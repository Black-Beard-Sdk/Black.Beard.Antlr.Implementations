//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.Parsers
{
    using System;
    using Bb.Parsers.Tsql;
    using Bb.Asts;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// tsql_file
        /// 	 : batch*  EOF
        /// 	 | execute_body_batch  go_statement*  EOF
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTsql_file(TSqlParser.Tsql_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTsqlFile(context, list);
        }
        
        /// <summary>
        /// batch
        /// 	 : go_statement
        /// 	 | execute_body_batch?  go_statement sql_clauses  go_statement*
        /// 	 | batch_level_statement  go_statement*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBatch(TSqlParser.BatchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBatch(context, list);
        }
        
        public override AstRoot VisitSql_clauses(TSqlParser.Sql_clausesContext context)
        {
            TSqlParser.Sql_clauseContext[] source = context.sql_clause();
            AstSqlClauses list = new AstSqlClauses(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Sql_clauseContext item = ((TSqlParser.Sql_clauseContext)(enumerator.Current));
                AstSqlClause acceptResult = ((AstSqlClause)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sql_clause
        /// 	 : dml_clause  SEMI?
        /// 	 | cfl_statement  SEMI?
        /// 	 | another_statement  SEMI?
        /// 	 | ddl_clause  SEMI?
        /// 	 | dbcc_special  SEMI?
        /// 	 | dbcc_clause  SEMI?
        /// 	 | backup_statement  SEMI?
        /// 	 | SEMI
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSql_clause(TSqlParser.Sql_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSqlClause(context, list);
        }
        
        /// <summary>
        /// block_statement
        /// 	 : BEGIN  SEMI?  sql_clause*  END  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBlock_statement(TSqlParser.Block_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBlockStatement(context, list);
        }
        
        /// <summary>
        /// break_statement
        /// 	 : BREAK  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBreak_statement(TSqlParser.Break_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBreakStatement(context, list);
        }
        
        /// <summary>
        /// continue_statement
        /// 	 : CONTINUE  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitContinue_statement(TSqlParser.Continue_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstContinueStatement(context, list);
        }
        
        /// <summary>
        /// goto_statement
        /// 	 : GOTO  id_  SEMI?
        /// 	 | id_  COLON  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGoto_statement(TSqlParser.Goto_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGotoStatement(context, list);
        }
        
        /// <summary>
        /// return_statement
        /// 	 : RETURN  expression?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitReturn_statement(TSqlParser.Return_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReturnStatement(context, list);
        }
        
        /// <summary>
        /// if_statement
        /// 	 : IF  search_condition    ELSE  ?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitIf_statement(TSqlParser.If_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIfStatement(context, list);
        }
        
        /// <summary>
        /// throw_statement
        /// 	 : THROW  throw_error_number  COMMA  throw_message  COMMA  throw_state?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitThrow_statement(TSqlParser.Throw_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowStatement(context, list);
        }
        
        /// <summary>
        /// throw_error_number
        /// 	 : DECIMAL
        /// 	 | LOCAL_ID
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitThrow_error_number(TSqlParser.Throw_error_numberContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowErrorNumber(context, list);
        }
        
        /// <summary>
        /// throw_message
        /// 	 : STRING
        /// 	 | LOCAL_ID
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitThrow_message(TSqlParser.Throw_messageContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowMessage(context, list);
        }
        
        /// <summary>
        /// throw_state
        /// 	 : DECIMAL
        /// 	 | LOCAL_ID
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitThrow_state(TSqlParser.Throw_stateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstThrowState(context, list);
        }
        
        /// <summary>
        /// try_catch_statement
        /// 	 : BEGIN  TRY  SEMI?    END  TRY  SEMI?  BEGIN  CATCH  SEMI?    END  CATCH  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTry_catch_statement(TSqlParser.Try_catch_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTryCatchStatement(context, list);
        }
        
        /// <summary>
        /// waitfor_statement
        /// 	 : WAITFOR  receive_statement?  COMMA?  DELAY TIME TIMEOUT  time?  expression?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitWaitfor_statement(TSqlParser.Waitfor_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWaitforStatement(context, list);
        }
        
        /// <summary>
        /// while_statement
        /// 	 : WHILE  search_condition  sql_clause BREAK  SEMI? CONTINUE  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitWhile_statement(TSqlParser.While_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhileStatement(context, list);
        }
        
        /// <summary>
        /// print_statement
        /// 	 : PRINT  expression DOUBLE_QUOTE_ID  COMMA  LOCAL_ID*  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPrint_statement(TSqlParser.Print_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrintStatement(context, list);
        }
        
        /// <summary>
        /// raiseerror_statement
        /// 	 : RAISERROR  LR_BRACKET    COMMA    COMMA    COMMA  constant_LOCAL_ID NULL_*  RR_BRACKET  WITH  LOG SETERROR NOWAIT?  SEMI?
        /// 	 | RAISERROR  DECIMAL    COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitRaiseerror_statement(TSqlParser.Raiseerror_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRaiseerrorStatement(context, list);
        }
        
        /// <summary>
        /// empty_statement
        /// 	 : SEMI
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitEmpty_statement(TSqlParser.Empty_statementContext context)
        {
            return new AstEmptyStatement(context);
        }
        
        /// <summary>
        /// alter_application_role
        /// 	 : ALTER  APPLICATION  ROLE  application_role  WITH  COMMA?  NAME  EQUAL  new_application_role_name?  COMMA?  PASSWORD  EQUAL  ?  COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_application_role(TSqlParser.Alter_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterApplicationRole(context, list);
        }
        
        /// <summary>
        /// create_application_role
        /// 	 : CREATE  APPLICATION  ROLE  application_role  WITH  COMMA?  PASSWORD  EQUAL  ?  COMMA?  DEFAULT_SCHEMA  EQUAL  app_role_schema?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_application_role(TSqlParser.Create_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateApplicationRole(context, list);
        }
        
        /// <summary>
        /// drop_aggregate
        /// 	 : DROP  AGGREGATE  IF  EXISTS?  schema_name  DOT?  aggregate_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_aggregate(TSqlParser.Drop_aggregateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAggregate(context, list);
        }
        
        /// <summary>
        /// drop_application_role
        /// 	 : DROP  APPLICATION  ROLE  role_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_application_role(TSqlParser.Drop_application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropApplicationRole(context, list);
        }
        
        /// <summary>
        /// alter_assembly
        /// 	 : alter_assembly_start  assembly_name  alter_assembly_clause
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly(TSqlParser.Alter_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssembly(context, list);
        }
        
        /// <summary>
        /// alter_assembly_start
        /// 	 : ALTER  ASSEMBLY
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_assembly_start(TSqlParser.Alter_assembly_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyStart(context, list);
        }
        
        /// <summary>
        /// alter_assembly_clause
        /// 	 : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly_clause(TSqlParser.Alter_assembly_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_from_clause
        /// 	 : alter_assembly_from_clause_start  client_assembly_specifier alter_assembly_file_bits
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly_from_clause(TSqlParser.Alter_assembly_from_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyFromClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_from_clause_start
        /// 	 : FROM
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitAlter_assembly_from_clause_start(TSqlParser.Alter_assembly_from_clause_startContext context)
        {
            return new AstAlterAssemblyFromClauseStart(context);
        }
        
        /// <summary>
        /// alter_assembly_drop_clause
        /// 	 : alter_assembly_drop  alter_assembly_drop_multiple_files
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly_drop_clause(TSqlParser.Alter_assembly_drop_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyDropClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files
        /// 	 : ALL
        /// 	 | multiple_local_files
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_assembly_drop_multiple_files(TSqlParser.Alter_assembly_drop_multiple_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyDropMultipleFiles(context, list);
        }
        
        /// <summary>
        /// alter_assembly_drop
        /// 	 : DROP
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitAlter_assembly_drop(TSqlParser.Alter_assembly_dropContext context)
        {
            return new AstAlterAssemblyDrop(context);
        }
        
        /// <summary>
        /// alter_assembly_add_clause
        /// 	 : alter_asssembly_add_clause_start  alter_assembly_client_file_clause
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly_add_clause(TSqlParser.Alter_assembly_add_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyAddClause(context, list);
        }
        
        /// <summary>
        /// alter_asssembly_add_clause_start
        /// 	 : ADD  FILE  FROM
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_asssembly_add_clause_start(TSqlParser.Alter_asssembly_add_clause_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAsssemblyAddClauseStart(context, list);
        }
        
        /// <summary>
        /// alter_assembly_client_file_clause
        /// 	 : alter_assembly_file_name  alter_assembly_as  id_?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly_client_file_clause(TSqlParser.Alter_assembly_client_file_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyClientFileClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_file_name
        /// 	 : STRING
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitAlter_assembly_file_name(TSqlParser.Alter_assembly_file_nameContext context)
        {
            return new AstAlterAssemblyFileName(context);
        }
        
        /// <summary>
        /// alter_assembly_file_bits
        /// 	 : alter_assembly_as  id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly_file_bits(TSqlParser.Alter_assembly_file_bitsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyFileBits(context, list);
        }
        
        /// <summary>
        /// alter_assembly_as
        /// 	 : AS
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitAlter_assembly_as(TSqlParser.Alter_assembly_asContext context)
        {
            return new AstAlterAssemblyAs(context);
        }
        
        /// <summary>
        /// alter_assembly_with_clause
        /// 	 : alter_assembly_with  assembly_option
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_assembly_with_clause(TSqlParser.Alter_assembly_with_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAssemblyWithClause(context, list);
        }
        
        /// <summary>
        /// alter_assembly_with
        /// 	 : WITH
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitAlter_assembly_with(TSqlParser.Alter_assembly_withContext context)
        {
            return new AstAlterAssemblyWith(context);
        }
        
        /// <summary>
        /// client_assembly_specifier
        /// 	 : network_file_share
        /// 	 | local_file
        /// 	 | STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitClient_assembly_specifier(TSqlParser.Client_assembly_specifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClientAssemblySpecifier(context, list);
        }
        
        /// <summary>
        /// assembly_option
        /// 	 : PERMISSION_SET  EQUAL  SAFE EXTERNAL_ACCESS UNSAFE
        /// 	 | VISIBILITY  EQUAL  on_off
        /// 	 | UNCHECKED  DATA
        /// 	 | assembly_option  COMMA
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAssembly_option(TSqlParser.Assembly_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAssemblyOption(context, list);
        }
        
        /// <summary>
        /// network_file_share
        /// 	 : network_file_start  network_computer  file_path
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitNetwork_file_share(TSqlParser.Network_file_shareContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNetworkFileShare(context, list);
        }
        
        /// <summary>
        /// network_file_start
        /// 	 : DOUBLE_BACK_SLASH
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitNetwork_file_start(TSqlParser.Network_file_startContext context)
        {
            return new AstNetworkFileStart(context);
        }
        
        /// <summary>
        /// file_path
        /// 	 : file_directory_path_separator  file_path
        /// 	 | id_
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFile_path(TSqlParser.File_pathContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFilePath(context, list);
        }
        
        /// <summary>
        /// file_directory_path_separator
        /// 	 : BACKSLASH
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitFile_directory_path_separator(TSqlParser.File_directory_path_separatorContext context)
        {
            return new AstFileDirectoryPathSeparator(context);
        }
        
        /// <summary>
        /// local_file
        /// 	 : local_drive  file_path
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitLocal_file(TSqlParser.Local_fileContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLocalFile(context, list);
        }
        
        /// <summary>
        /// local_drive
        /// 	 : DISK_DRIVE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitLocal_drive(TSqlParser.Local_driveContext context)
        {
            return new AstLocalDrive(context);
        }
        
        /// <summary>
        /// multiple_local_files
        /// 	 : multiple_local_file_start  local_file  SINGLE_QUOTE  COMMA
        /// 	 | local_file
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitMultiple_local_files(TSqlParser.Multiple_local_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMultipleLocalFiles(context, list);
        }
        
        /// <summary>
        /// multiple_local_file_start
        /// 	 : SINGLE_QUOTE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitMultiple_local_file_start(TSqlParser.Multiple_local_file_startContext context)
        {
            return new AstMultipleLocalFileStart(context);
        }
        
        /// <summary>
        /// create_assembly
        /// 	 : CREATE  ASSEMBLY  assembly_name  AUTHORIZATION  owner_name?  FROM  binary_content_nexts  WITH  PERMISSION_SET  EQUAL  SAFE EXTERNAL_ACCESS UNSAFE?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_assembly(TSqlParser.Create_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateAssembly(context, list);
        }
        
        public override AstRoot VisitBinary_content_nexts(TSqlParser.Binary_content_nextsContext context)
        {
            TSqlParser.Binary_content_nextContext[] source = context.binary_content_next();
            AstBinaryContentNexts list = new AstBinaryContentNexts(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Binary_content_nextContext item = ((TSqlParser.Binary_content_nextContext)(enumerator.Current));
                AstBinaryContentNext acceptResult = ((AstBinaryContentNext)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// binary_content_next
        /// 	 : COMMA?  binary_content
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBinary_content_next(TSqlParser.Binary_content_nextContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBinaryContentNext(context, list);
        }
        
        /// <summary>
        /// binary_content
        /// 	 : STRING
        /// 	 | BINARY
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBinary_content(TSqlParser.Binary_contentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBinaryContent(context, list);
        }
        
        /// <summary>
        /// drop_assembly
        /// 	 : DROP  ASSEMBLY  IF  EXISTS?  COMMA?  assembly_name+  WITH  NO  DEPENDENTS?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_assembly(TSqlParser.Drop_assemblyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAssembly(context, list);
        }
        
        /// <summary>
        /// alter_asymmetric_key
        /// 	 : alter_asymmetric_key_start  asym_key_name  asymmetric_key_option REMOVE  PRIVATE  KEY
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_asymmetric_key(TSqlParser.Alter_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// alter_asymmetric_key_start
        /// 	 : ALTER  ASYMMETRIC  KEY
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_asymmetric_key_start(TSqlParser.Alter_asymmetric_key_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAsymmetricKeyStart(context, list);
        }
        
        /// <summary>
        /// asymmetric_key_option
        /// 	 : asymmetric_key_option_start  asymmetric_key_password_change_option  COMMA  asymmetric_key_password_change_option?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAsymmetric_key_option(TSqlParser.Asymmetric_key_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsymmetricKeyOption(context, list);
        }
        
        /// <summary>
        /// asymmetric_key_option_start
        /// 	 : WITH  PRIVATE  KEY  LR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAsymmetric_key_option_start(TSqlParser.Asymmetric_key_option_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsymmetricKeyOptionStart(context, list);
        }
        
        /// <summary>
        /// asymmetric_key_password_change_option
        /// 	 : DECRYPTION  BY  PASSWORD  EQUAL  STRING
        /// 	 | ENCRYPTION  BY  PASSWORD  EQUAL  STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAsymmetric_key_password_change_option(TSqlParser.Asymmetric_key_password_change_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsymmetricKeyPasswordChangeOption(context, list);
        }
        
        /// <summary>
        /// create_asymmetric_key
        /// 	 : CREATE  ASYMMETRIC  KEY  asym_key_name  AUTHORIZATION  database_name?  FROM  FILE  EQUAL  STRING EXECUTABLE_FILE  EQUAL  STRING ASSEMBLY  assembly_name PROVIDER  provider_name?  WITH  ALGORITHM  EQUAL  RSA_4096 RSA_3072 RSA_2048 RSA_1024 RSA_512 PROVIDER_KEY_NAME  EQUAL   CREATION_DISPOSITION  EQUAL  CREATE_NEW OPEN_EXISTING?  ENCRYPTION  BY  PASSWORD  EQUAL  ?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_asymmetric_key(TSqlParser.Create_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// drop_asymmetric_key
        /// 	 : DROP  ASYMMETRIC  KEY    REMOVE  PROVIDER  KEY?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_asymmetric_key(TSqlParser.Drop_asymmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// alter_authorization
        /// 	 : alter_authorization_start  class_type  colon_colon?    entity_to  authorization_grantee
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_authorization(TSqlParser.Alter_authorizationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorization(context, list);
        }
        
        /// <summary>
        /// authorization_grantee
        /// 	 : 
        /// 	 | SCHEMA  OWNER
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAuthorization_grantee(TSqlParser.Authorization_granteeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAuthorizationGrantee(context, list);
        }
        
        /// <summary>
        /// entity_to
        /// 	 : TO
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitEntity_to(TSqlParser.Entity_toContext context)
        {
            return new AstEntityTo(context);
        }
        
        /// <summary>
        /// colon_colon
        /// 	 : DOUBLE_COLON
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitColon_colon(TSqlParser.Colon_colonContext context)
        {
            return new AstColonColon(context);
        }
        
        /// <summary>
        /// alter_authorization_start
        /// 	 : ALTER  AUTHORIZATION  ON
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_authorization_start(TSqlParser.Alter_authorization_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationStart(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_sql_database
        /// 	 : alter_authorization_start  class_type_for_sql_database  colon_colon?    entity_to  authorization_grantee
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_authorization_for_sql_database(TSqlParser.Alter_authorization_for_sql_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForSqlDatabase(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_azure_dw
        /// 	 : alter_authorization_start  class_type_for_azure_dw  colon_colon?    entity_to  authorization_grantee
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_authorization_for_azure_dw(TSqlParser.Alter_authorization_for_azure_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForAzureDw(context, list);
        }
        
        /// <summary>
        /// alter_authorization_for_parallel_dw
        /// 	 : alter_authorization_start  class_type_for_parallel_dw  colon_colon?    entity_to  authorization_grantee
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_authorization_for_parallel_dw(TSqlParser.Alter_authorization_for_parallel_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAuthorizationForParallelDw(context, list);
        }
        
        /// <summary>
        /// class_type
        /// 	 : OBJECT
        /// 	 | ASSEMBLY
        /// 	 | ASYMMETRIC  KEY
        /// 	 | AVAILABILITY  GROUP
        /// 	 | CERTIFICATE
        /// 	 | CONTRACT
        /// 	 | TYPE
        /// 	 | DATABASE
        /// 	 | ENDPOINT
        /// 	 | FULLTEXT  CATALOG
        /// 	 | FULLTEXT  STOPLIST
        /// 	 | MESSAGE  TYPE
        /// 	 | REMOTE  SERVICE  BINDING
        /// 	 | ROLE
        /// 	 | ROUTE
        /// 	 | SCHEMA
        /// 	 | SEARCH  PROPERTY  LIST
        /// 	 | SERVER  ROLE
        /// 	 | SERVICE
        /// 	 | SYMMETRIC  KEY
        /// 	 | XML  SCHEMA  COLLECTION
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitClass_type(TSqlParser.Class_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClassType(context, list);
        }
        
        /// <summary>
        /// class_type_for_sql_database
        /// 	 : OBJECT
        /// 	 | ASSEMBLY
        /// 	 | ASYMMETRIC  KEY
        /// 	 | CERTIFICATE
        /// 	 | TYPE
        /// 	 | DATABASE
        /// 	 | FULLTEXT  CATALOG
        /// 	 | FULLTEXT  STOPLIST
        /// 	 | ROLE
        /// 	 | SCHEMA
        /// 	 | SEARCH  PROPERTY  LIST
        /// 	 | SYMMETRIC  KEY
        /// 	 | XML  SCHEMA  COLLECTION
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitClass_type_for_sql_database(TSqlParser.Class_type_for_sql_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClassTypeForSqlDatabase(context, list);
        }
        
        /// <summary>
        /// class_type_for_azure_dw
        /// 	 : SCHEMA
        /// 	 | OBJECT
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitClass_type_for_azure_dw(TSqlParser.Class_type_for_azure_dwContext context)
        {
            return new AstClassTypeForAzureDw(context, context.GetText());
        }
        
        /// <summary>
        /// class_type_for_parallel_dw
        /// 	 : DATABASE
        /// 	 | SCHEMA
        /// 	 | OBJECT
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitClass_type_for_parallel_dw(TSqlParser.Class_type_for_parallel_dwContext context)
        {
            return new AstClassTypeForParallelDw(context, context.GetText());
        }
        
        /// <summary>
        /// class_type_for_grant
        /// 	 : APPLICATION  ROLE
        /// 	 | ASSEMBLY
        /// 	 | ASYMMETRIC  KEY
        /// 	 | AUDIT
        /// 	 | AVAILABILITY  GROUP
        /// 	 | BROKER  PRIORITY
        /// 	 | CERTIFICATE
        /// 	 | COLUMN  ENCRYPTION MASTER  KEY
        /// 	 | CONTRACT
        /// 	 | CREDENTIAL
        /// 	 | CRYPTOGRAPHIC  PROVIDER
        /// 	 | DATABASE  AUDIT  SPECIFICATION ENCRYPTION  KEY EVENT  SESSION SCOPED  CONFIGURATION CREDENTIAL RESOURCE  GOVERNOR?
        /// 	 | ENDPOINT
        /// 	 | EVENT  SESSION
        /// 	 | NOTIFICATION  DATABASE OBJECT SERVER
        /// 	 | EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY RESOURCE  POOL TABLE CATALOG STOPLIST
        /// 	 | LOGIN
        /// 	 | MASTER  KEY
        /// 	 | MESSAGE  TYPE
        /// 	 | OBJECT
        /// 	 | PARTITION  FUNCTION SCHEME
        /// 	 | REMOTE  SERVICE  BINDING
        /// 	 | RESOURCE  GOVERNOR
        /// 	 | ROLE
        /// 	 | ROUTE
        /// 	 | SCHEMA
        /// 	 | SEARCH  PROPERTY  LIST
        /// 	 | SERVER  AUDIT  SPECIFICATION? ROLE?
        /// 	 | SERVICE
        /// 	 | SQL  LOGIN
        /// 	 | SYMMETRIC  KEY
        /// 	 | TRIGGER  DATABASE SERVER
        /// 	 | TYPE
        /// 	 | USER
        /// 	 | XML  SCHEMA  COLLECTION
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitClass_type_for_grant(TSqlParser.Class_type_for_grantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClassTypeForGrant(context, list);
        }
        
        /// <summary>
        /// drop_availability_group
        /// 	 : DROP  AVAILABILITY  GROUP  group_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_availability_group(TSqlParser.Drop_availability_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropAvailabilityGroup(context, list);
        }
        
        /// <summary>
        /// alter_availability_group
        /// 	 : alter_availability_group_start  alter_availability_group_options
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_availability_group(TSqlParser.Alter_availability_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroup(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_start
        /// 	 : ALTER  AVAILABILITY  GROUP  group_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_availability_group_start(TSqlParser.Alter_availability_group_startContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupStart(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options
        /// 	 : SET  LR_BRACKET  AUTOMATED_BACKUP_PREFERENCE  EQUAL  PRIMARY SECONDARY_ONLY SECONDARY NONE FAILURE_CONDITION_LEVEL  EQUAL  DECIMAL HEALTH_CHECK_TIMEOUT  EQUAL   DB_FAILOVER  EQUAL  on_off REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  DECIMAL  RR_BRACKET
        /// 	 | ADD  DATABASE  database_name
        /// 	 | REMOVE  DATABASE  database_name
        /// 	 | ADD  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING?  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  COMMA?  BACKUP_PRIORITY  EQUAL  DECIMAL?  COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_WRITE ALL  RR_BRACKET?  COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET?  RR_BRACKET
        /// 	 | SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET
        /// 	 | PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL  
        /// 	 | MODIFY  REPLICA  ON  server_instance  WITH  LR_BRACKET  ENDPOINT_URL  EQUAL  STRING AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT FAILOVER_MODE  EQUAL  AUTOMATIC MANUAL SEEDING_MODE  EQUAL  AUTOMATIC MANUAL BACKUP_PRIORITY  EQUAL  DECIMAL SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  STRING  RR_BRACKET PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  NO READ_ONLY ALL READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  COMMA?  STRING* NONE  RR_BRACKET SESSION_TIMEOUT  EQUAL    RR_BRACKET
        /// 	 | REMOVE  REPLICA  ON  STRING
        /// 	 | JOIN
        /// 	 | JOIN  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT  COMMA  FAILOVER_MODE  EQUAL  MANUAL  COMMA  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL  RR_BRACKET+
        /// 	 | MODIFY  AVAILABILITY  GROUP  ON  COMMA?    WITH  LR_BRACKET  LISTENER_URL  EQUAL  STRING  COMMA?  AVAILABILITY_MODE  EQUAL  SYNCHRONOUS_COMMIT ASYNCHRONOUS_COMMIT?  COMMA?  FAILOVER_MODE  EQUAL  MANUAL?  COMMA?  SEEDING_MODE  EQUAL  AUTOMATIC MANUAL?  RR_BRACKET+
        /// 	 | GRANT  CREATE  ANY  DATABASE
        /// 	 | DENY  CREATE  ANY  DATABASE
        /// 	 | FAILOVER
        /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
        /// 	 | ADD  LISTENER    LR_BRACKET  WITH  DHCP  ON  LR_BRACKET  ip_v4_failover  ip_v4_failover  RR_BRACKET WITH  IP  LR_BRACKET  COMMA?  LR_BRACKET  ip_v4_failover  COMMA  ip_v4_failover ip_v6_failover  RR_BRACKET+  RR_BRACKET  COMMA  PORT  EQUAL  DECIMAL?  RR_BRACKET
        /// 	 | MODIFY  LISTENER  ADD  IP  LR_BRACKET  ip_v4_failover  ip_v4_failover ip_v6_failover  RR_BRACKET PORT  EQUAL  DECIMAL
        /// 	 | RESTART  LISTENER  STRING
        /// 	 | REMOVE  LISTENER  STRING
        /// 	 | OFFLINE
        /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_availability_group_options(TSqlParser.Alter_availability_group_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterAvailabilityGroupOptions(context, list);
        }
        
        /// <summary>
        /// server_instance
        /// 	 : STRING
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitServer_instance(TSqlParser.Server_instanceContext context)
        {
            return new AstServerInstance(context);
        }
        
        /// <summary>
        /// ip_v4_failover
        /// 	 : STRING
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitIp_v4_failover(TSqlParser.Ip_v4_failoverContext context)
        {
            return new AstIpV4Failover(context);
        }
        
        /// <summary>
        /// ip_v6_failover
        /// 	 : STRING
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitIp_v6_failover(TSqlParser.Ip_v6_failoverContext context)
        {
            return new AstIpV6Failover(context);
        }
        
        /// <summary>
        /// create_or_alter_broker_priority
        /// 	 : CREATE ALTER  BROKER  PRIORITY    FOR  CONVERSATION  SET  LR_BRACKET  CONTRACT_NAME  EQUAL  id_ ANY  COMMA??  LOCAL_SERVICE_NAME  EQUAL  DOUBLE_FORWARD_SLASH?  id_ ANY  COMMA??  REMOTE_SERVICE_NAME  EQUAL   ANY  COMMA??  PRIORITY_LEVEL  EQUAL   DEFAULT?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_or_alter_broker_priority(TSqlParser.Create_or_alter_broker_priorityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterBrokerPriority(context, list);
        }
        
        /// <summary>
        /// drop_broker_priority
        /// 	 : DROP  BROKER  PRIORITY  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_broker_priority(TSqlParser.Drop_broker_priorityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropBrokerPriority(context, list);
        }
        
        /// <summary>
        /// alter_certificate
        /// 	 : ALTER  CERTIFICATE  certificate_name  REMOVE  PRIVATE_KEY WITH  PRIVATE  KEY  LR_BRACKET  FILE  EQUAL  STRING  COMMA? DECRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA? ENCRYPTION  BY  PASSWORD  EQUAL  STRING  COMMA?+  RR_BRACKET WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_certificate(TSqlParser.Alter_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCertificate(context, list);
        }
        
        /// <summary>
        /// alter_column_encryption_key
        /// 	 : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key  ADD DROP  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL    COMMA  ALGORITHM  EQUAL    COMMA  ENCRYPTED_VALUE  EQUAL  BINARY?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_column_encryption_key(TSqlParser.Alter_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// create_column_encryption_key
        /// 	 : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key  WITH  VALUES  LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL    COMMA  ALGORITHM  EQUAL    COMMA  ENCRYPTED_VALUE  EQUAL    RR_BRACKET  COMMA?+
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_column_encryption_key(TSqlParser.Create_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_certificate
        /// 	 : DROP  CERTIFICATE  certificate_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_certificate(TSqlParser.Drop_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCertificate(context, list);
        }
        
        /// <summary>
        /// drop_column_encryption_key
        /// 	 : DROP  COLUMN  ENCRYPTION  KEY  encryption_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_column_encryption_key(TSqlParser.Drop_column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_column_master_key
        /// 	 : DROP  COLUMN  MASTER  KEY  master_key
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_column_master_key(TSqlParser.Drop_column_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropColumnMasterKey(context, list);
        }
        
        /// <summary>
        /// drop_contract
        /// 	 : DROP  CONTRACT  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_contract(TSqlParser.Drop_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropContract(context, list);
        }
        
        /// <summary>
        /// drop_credential
        /// 	 : DROP  CREDENTIAL  credential_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_credential(TSqlParser.Drop_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCredential(context, list);
        }
        
        /// <summary>
        /// drop_cryptograhic_provider
        /// 	 : DROP  CRYPTOGRAPHIC  PROVIDER  provider_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_cryptograhic_provider(TSqlParser.Drop_cryptograhic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropCryptograhicProvider(context, list);
        }
        
        /// <summary>
        /// drop_database
        /// 	 : DROP  DATABASE  IF  EXISTS?  COMMA?  database_name+
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_database(TSqlParser.Drop_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabase(context, list);
        }
        
        /// <summary>
        /// drop_database_audit_specification
        /// 	 : DROP  DATABASE  AUDIT  SPECIFICATION  audit_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_database_audit_specification(TSqlParser.Drop_database_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseAuditSpecification(context, list);
        }
        
        /// <summary>
        /// drop_database_encryption_key
        /// 	 : DROP  DATABASE  ENCRYPTION  KEY
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_database_encryption_key(TSqlParser.Drop_database_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_database_scoped_credential
        /// 	 : DROP  DATABASE  SCOPED  CREDENTIAL  credential_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_database_scoped_credential(TSqlParser.Drop_database_scoped_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDatabaseScopedCredential(context, list);
        }
        
        /// <summary>
        /// drop_default
        /// 	 : DROP  DEFAULT  IF  EXISTS?  COMMA?  schema_name  DOT?  schema_name
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_default(TSqlParser.Drop_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDefault(context, list);
        }
        
        /// <summary>
        /// drop_endpoint
        /// 	 : DROP  ENDPOINT  endpoint_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_endpoint(TSqlParser.Drop_endpointContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEndpoint(context, list);
        }
        
        /// <summary>
        /// drop_external_data_source
        /// 	 : DROP  EXTERNAL  DATA  SOURCE  external_data_source_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_external_data_source(TSqlParser.Drop_external_data_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalDataSource(context, list);
        }
        
        /// <summary>
        /// drop_external_file_format
        /// 	 : DROP  EXTERNAL  FILE  FORMAT  external_file_format_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_external_file_format(TSqlParser.Drop_external_file_formatContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalFileFormat(context, list);
        }
        
        /// <summary>
        /// drop_external_library
        /// 	 : DROP  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_external_library(TSqlParser.Drop_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalLibrary(context, list);
        }
        
        /// <summary>
        /// drop_external_resource_pool
        /// 	 : DROP  EXTERNAL  RESOURCE  POOL  pool_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_external_resource_pool(TSqlParser.Drop_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// drop_external_table
        /// 	 : DROP  EXTERNAL  TABLE  database_name  DOT?  schema_name  DOT?  tableName
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_external_table(TSqlParser.Drop_external_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropExternalTable(context, list);
        }
        
        /// <summary>
        /// drop_event_notifications
        /// 	 : DROP  EVENT  NOTIFICATION  COMMA?  notification_name+  ON  SERVER DATABASE QUEUE  queue_name
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_event_notifications(TSqlParser.Drop_event_notificationsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEventNotifications(context, list);
        }
        
        /// <summary>
        /// drop_event_session
        /// 	 : DROP  EVENT  SESSION  event_session_name  ON  SERVER
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_event_session(TSqlParser.Drop_event_sessionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropEventSession(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_catalog
        /// 	 : DROP  FULLTEXT  CATALOG  catalog_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_fulltext_catalog(TSqlParser.Drop_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_index
        /// 	 : DROP  FULLTEXT  INDEX  ON  schema_name  DOT?  tableName
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_fulltext_index(TSqlParser.Drop_fulltext_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextIndex(context, list);
        }
        
        /// <summary>
        /// drop_fulltext_stoplist
        /// 	 : DROP  FULLTEXT  STOPLIST  stoplist_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_fulltext_stoplist(TSqlParser.Drop_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// drop_login
        /// 	 : DROP  LOGIN  login_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_login(TSqlParser.Drop_loginContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropLogin(context, list);
        }
        
        /// <summary>
        /// drop_master_key
        /// 	 : DROP  MASTER  KEY
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_master_key(TSqlParser.Drop_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropMasterKey(context, list);
        }
        
        /// <summary>
        /// drop_message_type
        /// 	 : DROP  MESSAGE  TYPE  message_type_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_message_type(TSqlParser.Drop_message_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropMessageType(context, list);
        }
        
        /// <summary>
        /// message_type_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitMessage_type_name(TSqlParser.Message_type_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMessageTypeName(context, list);
        }
        
        /// <summary>
        /// drop_partition_function
        /// 	 : DROP  PARTITION  FUNCTION  partition_function_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_partition_function(TSqlParser.Drop_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropPartitionFunction(context, list);
        }
        
        /// <summary>
        /// partition_function_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPartition_function_name(TSqlParser.Partition_function_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartitionFunctionName(context, list);
        }
        
        /// <summary>
        /// drop_partition_scheme
        /// 	 : DROP  PARTITION  SCHEME  partition_scheme_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_partition_scheme(TSqlParser.Drop_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropPartitionScheme(context, list);
        }
        
        /// <summary>
        /// partition_scheme_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPartition_scheme_name(TSqlParser.Partition_scheme_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartitionSchemeName(context, list);
        }
        
        /// <summary>
        /// drop_queue
        /// 	 : DROP  QUEUE  database_name  DOT?  schema_name  DOT?  queue_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_queue(TSqlParser.Drop_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropQueue(context, list);
        }
        
        /// <summary>
        /// drop_remote_service_binding
        /// 	 : DROP  REMOTE  SERVICE  BINDING  binding_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_remote_service_binding(TSqlParser.Drop_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// drop_resource_pool
        /// 	 : DROP  RESOURCE  POOL  pool_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_resource_pool(TSqlParser.Drop_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropResourcePool(context, list);
        }
        
        /// <summary>
        /// drop_db_role
        /// 	 : DROP  ROLE  IF  EXISTS?  role_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_db_role(TSqlParser.Drop_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDbRole(context, list);
        }
        
        /// <summary>
        /// drop_route
        /// 	 : DROP  ROUTE  route_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_route(TSqlParser.Drop_routeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRoute(context, list);
        }
        
        /// <summary>
        /// drop_rule
        /// 	 : DROP  RULE  IF  EXISTS?  COMMA?  schema_name  DOT?  rule_name?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_rule(TSqlParser.Drop_ruleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRule(context, list);
        }
        
        /// <summary>
        /// drop_schema
        /// 	 : DROP  SCHEMA  IF  EXISTS?  schema_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_schema(TSqlParser.Drop_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSchema(context, list);
        }
        
        /// <summary>
        /// drop_search_property_list
        /// 	 : DROP  SEARCH  PROPERTY  LIST  property_list_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_search_property_list(TSqlParser.Drop_search_property_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSearchPropertyList(context, list);
        }
        
        /// <summary>
        /// drop_security_policy
        /// 	 : DROP  SECURITY  POLICY  IF  EXISTS?  schema_name  DOT?  security_policy_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_security_policy(TSqlParser.Drop_security_policyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSecurityPolicy(context, list);
        }
        
        /// <summary>
        /// drop_sequence
        /// 	 : DROP  SEQUENCE  IF  EXISTS?  COMMA?  database_name  DOT?  schema_name  DOT?  sequence_name?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_sequence(TSqlParser.Drop_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSequence(context, list);
        }
        
        /// <summary>
        /// drop_server_audit
        /// 	 : DROP  SERVER  AUDIT  audit_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_server_audit(TSqlParser.Drop_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerAudit(context, list);
        }
        
        /// <summary>
        /// drop_server_audit_specification
        /// 	 : DROP  SERVER  AUDIT  SPECIFICATION  audit_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_server_audit_specification(TSqlParser.Drop_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// drop_server_role
        /// 	 : DROP  SERVER  ROLE  role_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_server_role(TSqlParser.Drop_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropServerRole(context, list);
        }
        
        /// <summary>
        /// drop_service
        /// 	 : DROP  SERVICE  dropped_service_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_service(TSqlParser.Drop_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropService(context, list);
        }
        
        /// <summary>
        /// drop_signature
        /// 	 : DROP  COUNTER?  SIGNATURE  FROM  schema_name  DOT?  module_name  BY  COMMA?  CERTIFICATE  certificate_name COMMA?  ASYMMETRIC  KEY  asym_key_name+
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_signature(TSqlParser.Drop_signatureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSignature(context, list);
        }
        
        /// <summary>
        /// drop_statistics_name_azure_dw_and_pdw
        /// 	 : DROP  STATISTICS  schema_name  DOT?  object_name  DOT  statistics_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_statistics_name_azure_dw_and_pdw(TSqlParser.Drop_statistics_name_azure_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropStatisticsNameAzureDwAndPdw(context, list);
        }
        
        /// <summary>
        /// drop_symmetric_key
        /// 	 : DROP  SYMMETRIC  KEY  symmetric_key_name  REMOVE  PROVIDER  KEY?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_symmetric_key(TSqlParser.Drop_symmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSymmetricKey(context, list);
        }
        
        /// <summary>
        /// drop_synonym
        /// 	 : DROP  SYNONYM  IF  EXISTS?  schema_name  DOT?  synonym_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_synonym(TSqlParser.Drop_synonymContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropSynonym(context, list);
        }
        
        /// <summary>
        /// drop_user
        /// 	 : DROP  USER  IF  EXISTS?  user_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_user(TSqlParser.Drop_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropUser(context, list);
        }
        
        /// <summary>
        /// drop_workload_group
        /// 	 : DROP  WORKLOAD  GROUP  group_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_workload_group(TSqlParser.Drop_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// drop_xml_schema_collection
        /// 	 : DROP  XML  SCHEMA  COLLECTION  relational_schema  DOT?  sql_identifier
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_xml_schema_collection(TSqlParser.Drop_xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// disable_trigger
        /// 	 : DISABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_id  DOT?  object_name DATABASE ALL  SERVER
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDisable_trigger(TSqlParser.Disable_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDisableTrigger(context, list);
        }
        
        /// <summary>
        /// enable_trigger
        /// 	 : ENABLE  TRIGGER  COMMA?  schema_name  DOT?  trigger_name+ ALL  ON  schema_id  DOT?  object_name DATABASE ALL  SERVER
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEnable_trigger(TSqlParser.Enable_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEnableTrigger(context, list);
        }
        
        /// <summary>
        /// lock_table
        /// 	 : LOCK  TABLE  table_name  IN  SHARE EXCLUSIVE  MODE  WAIT   NOWAIT?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitLock_table(TSqlParser.Lock_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLockTable(context, list);
        }
        
        /// <summary>
        /// truncate_table
        /// 	 : TRUNCATE  TABLE  table_name  WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTruncate_table(TSqlParser.Truncate_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTruncateTable(context, list);
        }
        
        /// <summary>
        /// create_column_master_key
        /// 	 : CREATE  COLUMN  MASTER  KEY    WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL    COMMA  KEY_PATH  EQUAL    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_column_master_key(TSqlParser.Create_column_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnMasterKey(context, list);
        }
        
        /// <summary>
        /// alter_credential
        /// 	 : ALTER  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL    COMMA  SECRET  EQUAL  ?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_credential(TSqlParser.Alter_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCredential(context, list);
        }
        
        /// <summary>
        /// create_credential
        /// 	 : CREATE  CREDENTIAL  credential_name  WITH  IDENTITY  EQUAL    COMMA  SECRET  EQUAL  ?  FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_credential(TSqlParser.Create_credentialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCredential(context, list);
        }
        
        /// <summary>
        /// alter_cryptographic_provider
        /// 	 : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  ?  ENABLE DISABLE?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_cryptographic_provider(TSqlParser.Alter_cryptographic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterCryptographicProvider(context, list);
        }
        
        /// <summary>
        /// create_cryptographic_provider
        /// 	 : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_name  FROM  FILE  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_cryptographic_provider(TSqlParser.Create_cryptographic_providerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCryptographicProvider(context, list);
        }
        
        /// <summary>
        /// create_event_notification
        /// 	 : CREATE  EVENT  NOTIFICATION  event_notification_name  ON  SERVER DATABASE QUEUE  queue_name  WITH  FAN_IN?  FOR  COMMA?  event_type_or_group+  TO  SERVICE    COMMA  
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_event_notification(TSqlParser.Create_event_notificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateEventNotification(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session
        /// 	 : CREATE ALTER  EVENT  SESSION  event_session_name  ON  SERVER  COMMA?  ADD  EVENT  event_module_guid  DOT?  event_package_name  DOT  event_name  LR_BRACKET  SET  COMMA?  event_customizable_attributue  EQUAL  DECIMAL STRING*?  ACTION  LR_BRACKET  COMMA?  event_module_guid  DOT?  event_package_name  DOT  action_name+  RR_BRACKET+  WHERE  event_session_predicate_expression?  RR_BRACKET**  COMMA?  DROP  EVENT  event_module_guid  DOT?  event_package_name  DOT  event_name*  ADD  TARGET  event_module_guid  DOT?  event_package_name  DOT  target_name  LR_BRACKET  SET  COMMA?  target_parameter_name  EQUAL  LR_BRACKET?  DECIMAL  RR_BRACKET? STRING+  RR_BRACKET**  DROP  TARGET  event_module_guid  DOT?  event_package_name  DOT  target_name*  WITH  LR_BRACKET  COMMA?  MAX_MEMORY  EQUAL    KB MB?  COMMA?  EVENT_RETENTION_MODE  EQUAL  ALLOW_SINGLE_EVENT_LOSS ALLOW_MULTIPLE_EVENT_LOSS NO_EVENT_LOSS?  COMMA?  MAX_DISPATCH_LATENCY  EQUAL    SECONDS INFINITE?  COMMA?  MAX_EVENT_SIZE  EQUAL    KB MB?  COMMA?  MEMORY_PARTITION_MODE  EQUAL  NONE PER_NODE PER_CPU?  COMMA?  TRACK_CAUSALITY  EQUAL  on_off?  COMMA?  STARTUP_STATE  EQUAL  on_off?  RR_BRACKET?  STATE  EQUAL  START STOP?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_or_alter_event_session(TSqlParser.Create_or_alter_event_sessionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterEventSession(context, list);
        }
        
        /// <summary>
        /// start_stop
        /// 	 : START
        /// 	 | STOP
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitStart_stop(TSqlParser.Start_stopContext context)
        {
            return new AstStartStop(context, context.GetText());
        }
        
        /// <summary>
        /// event_session_predicate_expression
        /// 	 : COMMA?  AND OR?  NOT?  event_session_predicate_factor LR_BRACKET  event_session_predicate_expression  RR_BRACKET+
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEvent_session_predicate_expression(TSqlParser.Event_session_predicate_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionPredicateExpression(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_factor
        /// 	 : event_session_predicate_leaf
        /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEvent_session_predicate_factor(TSqlParser.Event_session_predicate_factorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionPredicateFactor(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_leaf
        /// 	 : event_field_name event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING
        /// 	 | event_module_guid  DOT?  event_package_name  DOT  predicate_compare_name  LR_BRACKET  event_field_name event_module_guid  DOT?  event_package_name  DOT  predicate_source_name  COMMA  DECIMAL STRING  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEvent_session_predicate_leaf(TSqlParser.Event_session_predicate_leafContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionPredicateLeaf(context, list);
        }
        
        /// <summary>
        /// alter_external_data_source
        /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_name  SET  LOCATION  EQUAL    COMMA? RESOURCE_MANAGER_LOCATION  EQUAL    COMMA? CREDENTIAL  EQUAL  credential_name+
        /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_name  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL    COMMA  CREDENTIAL  EQUAL  credential_name?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_external_data_source(TSqlParser.Alter_external_data_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterExternalDataSource(context, list);
        }
        
        /// <summary>
        /// alter_external_library
        /// 	 : ALTER  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?  SET ADD  LR_BRACKET  CONTENT  EQUAL   BINARY NONE  COMMA  PLATFORM  EQUAL  WINDOWS LINUX?  RR_BRACKET  WITH  COMMA?  LANGUAGE  EQUAL  R PYTHON DATA_SOURCE  EQUAL  external_data_source_name+  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_external_library(TSqlParser.Alter_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterExternalLibrary(context, list);
        }
        
        /// <summary>
        /// create_external_library
        /// 	 : CREATE  EXTERNAL  LIBRARY  library_name  AUTHORIZATION  owner_name?  FROM  COMMA?  LR_BRACKET?  CONTENT  EQUAL?   BINARY NONE  COMMA  PLATFORM  EQUAL  WINDOWS LINUX?  RR_BRACKET?  WITH  COMMA?  LANGUAGE  EQUAL  R PYTHON DATA_SOURCE  EQUAL  external_data_source_name+  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_external_library(TSqlParser.Create_external_libraryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateExternalLibrary(context, list);
        }
        
        /// <summary>
        /// alter_external_resource_pool
        /// 	 : ALTER  EXTERNAL  RESOURCE  POOL  pool_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL    COMMA?  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL+  COMMA?  MAX_MEMORY_PERCENT  EQUAL  ?  COMMA?  MAX_PROCESSES  EQUAL  ?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_external_resource_pool(TSqlParser.Alter_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// create_external_resource_pool
        /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  MAX_CPU_PERCENT  EQUAL    COMMA?  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL  TO  DECIMAL COMMA  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL  TO  DECIMAL COMMA?  DECIMAL+  COMMA?  MAX_MEMORY_PERCENT  EQUAL  ?  COMMA?  MAX_PROCESSES  EQUAL  ?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_external_resource_pool(TSqlParser.Create_external_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// alter_fulltext_catalog
        /// 	 : ALTER  FULLTEXT  CATALOG  catalog_name  REBUILD  WITH  ACCENT_SENSITIVITY  EQUAL  on_off? REORGANIZE AS  DEFAULT
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_fulltext_catalog(TSqlParser.Alter_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// create_fulltext_catalog
        /// 	 : CREATE  FULLTEXT  CATALOG  catalog_name  ON  FILEGROUP  file_group_id?  IN  PATH  ?  WITH  ACCENT_SENSITIVITY  EQUAL  on_off?  AS  DEFAULT?  AUTHORIZATION  owner_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_fulltext_catalog(TSqlParser.Create_fulltext_catalogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateFulltextCatalog(context, list);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist
        /// 	 : ALTER  FULLTEXT  STOPLIST  stoplist_name  ADD    LANGUAGE  STRING DECIMAL BINARY DROP    LANGUAGE  STRING DECIMAL BINARY ALL  STRING DECIMAL BINARY ALL
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_fulltext_stoplist(TSqlParser.Alter_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// create_fulltext_stoplist
        /// 	 : CREATE  FULLTEXT  STOPLIST  stoplist_name  FROM  database_name  DOT?  stoplist_name SYSTEM  STOPLIST?  AUTHORIZATION  owner_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_fulltext_stoplist(TSqlParser.Create_fulltext_stoplistContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateFulltextStoplist(context, list);
        }
        
        /// <summary>
        /// alter_login_sql_server
        /// 	 : ALTER  LOGIN  login_name  ENABLE DISABLE? WITH  PASSWORD  EQUAL     HASHED  MUST_CHANGE UNLOCK*?  OLD_PASSWORD  EQUAL    MUST_CHANGE UNLOCK*?  DEFAULT_DATABASE  EQUAL  database_name?  DEFAULT_LANGUAGE  EQUAL  language?  NAME  EQUAL  login_name?  CHECK_POLICY  EQUAL  on_off?  CHECK_EXPIRATION  EQUAL  on_off?  CREDENTIAL  EQUAL  credential_name?  NO  CREDENTIAL? ADD DROP  CREDENTIAL  credential_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_login_sql_server(TSqlParser.Alter_login_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginSqlServer(context, list);
        }
        
        /// <summary>
        /// create_login_sql_server
        /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL     HASHED  MUST_CHANGE UNLOCK*?  COMMA?  SID  EQUAL  ?  COMMA?  DEFAULT_DATABASE  EQUAL  database_name?  COMMA?  DEFAULT_LANGUAGE  EQUAL  language?  COMMA?  CHECK_EXPIRATION  EQUAL  on_off?  COMMA?  CHECK_POLICY  EQUAL  on_off?  COMMA?  CREDENTIAL  EQUAL  credential_name? FROM  WINDOWS  WITH  COMMA?  DEFAULT_DATABASE  EQUAL  database_name?  COMMA?  DEFAULT_LANGUAGE  EQUAL  ? CERTIFICATE  certificate_name ASYMMETRIC  KEY  asym_key_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_login_sql_server(TSqlParser.Create_login_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginSqlServer(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql
        /// 	 : ALTER  LOGIN  login_name  ENABLE DISABLE? WITH  PASSWORD  EQUAL    OLD_PASSWORD  EQUAL  ? NAME  EQUAL  login_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_login_azure_sql(TSqlParser.Alter_login_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginAzureSql(context, list);
        }
        
        /// <summary>
        /// create_login_azure_sql
        /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL  STRING  SID  EQUAL  ?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_login_azure_sql(TSqlParser.Create_login_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_dw_and_pdw
        /// 	 : ALTER  LOGIN  login_name  enable_disable? WITH  PASSWORD  EQUAL    OLD_PASSWORD  EQUAL    MUST_CHANGE UNLOCK*? NAME  EQUAL  login_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_login_azure_sql_dw_and_pdw(TSqlParser.Alter_login_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterLoginAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// enable_disable
        /// 	 : ENABLE
        /// 	 | DISABLE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitEnable_disable(TSqlParser.Enable_disableContext context)
        {
            return new AstEnableDisable(context, context.GetText());
        }
        
        /// <summary>
        /// create_login_pdw
        /// 	 : CREATE  LOGIN  login_name  WITH  PASSWORD  EQUAL    MUST_CHANGE?  CHECK_POLICY  EQUAL  on_off?? FROM  WINDOWS
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_login_pdw(TSqlParser.Create_login_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateLoginPdw(context, list);
        }
        
        /// <summary>
        /// alter_master_key_sql_server
        /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD DROP  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_master_key_sql_server(TSqlParser.Alter_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMasterKeySqlServer(context, list);
        }
        
        /// <summary>
        /// create_master_key_sql_server
        /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_master_key_sql_server(TSqlParser.Create_master_key_sql_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateMasterKeySqlServer(context, list);
        }
        
        /// <summary>
        /// alter_master_key_azure_sql
        /// 	 : ALTER  MASTER  KEY  FORCE?  REGENERATE  WITH  ENCRYPTION  BY  PASSWORD  EQUAL   ADD  ENCRYPTION  BY  SERVICE  MASTER  KEY PASSWORD  EQUAL   DROP  ENCRYPTION  BY  PASSWORD  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_master_key_azure_sql(TSqlParser.Alter_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMasterKeyAzureSql(context, list);
        }
        
        /// <summary>
        /// create_master_key_azure_sql
        /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  ?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_master_key_azure_sql(TSqlParser.Create_master_key_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateMasterKeyAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_message_type
        /// 	 : ALTER  MESSAGE  TYPE  message_type_name  VALIDATION  EQUAL  NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_message_type(TSqlParser.Alter_message_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterMessageType(context, list);
        }
        
        /// <summary>
        /// alter_partition_function
        /// 	 : ALTER  PARTITION  FUNCTION  partition_function_name  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  DECIMAL  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_partition_function(TSqlParser.Alter_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterPartitionFunction(context, list);
        }
        
        /// <summary>
        /// split_or_merge
        /// 	 : SPLIT
        /// 	 | MERGE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitSplit_or_merge(TSqlParser.Split_or_mergeContext context)
        {
            return new AstSplitOrMerge(context, context.GetText());
        }
        
        /// <summary>
        /// alter_partition_scheme
        /// 	 : ALTER  PARTITION  SCHEME  partition_scheme_name  NEXT  USED  file_group_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_partition_scheme(TSqlParser.Alter_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterPartitionScheme(context, list);
        }
        
        /// <summary>
        /// alter_remote_service_binding
        /// 	 : ALTER  REMOTE  SERVICE  BINDING  binding_name  WITH  USER  EQUAL  user_name?  COMMA  ANONYMOUS  EQUAL  on_off?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_remote_service_binding(TSqlParser.Alter_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// create_remote_service_binding
        /// 	 : CREATE  REMOTE  SERVICE  BINDING  binding_name  AUTHORIZATION  owner_name?  TO  SERVICE    WITH  USER  EQUAL  user_name?  COMMA  ANONYMOUS  EQUAL  on_off?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_remote_service_binding(TSqlParser.Create_remote_service_bindingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRemoteServiceBinding(context, list);
        }
        
        /// <summary>
        /// create_resource_pool
        /// 	 : CREATE  RESOURCE  POOL  pool_name  WITH  LR_BRACKET  COMMA?  MIN_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  MAX_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  CAP_CPU_PERCENT  EQUAL  DECIMAL?  COMMA?  AFFINITY  SCHEDULER  EQUAL  AUTO LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET NUMANODE  EQUAL  LR_BRACKET  COMMA?  DECIMAL DECIMAL  TO  DECIMAL+  RR_BRACKET?  COMMA?  MIN_MEMORY_PERCENT  EQUAL  DECIMAL?  COMMA?  MAX_MEMORY_PERCENT  EQUAL  DECIMAL?  COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  DECIMAL?  COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  DECIMAL?  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_resource_pool(TSqlParser.Create_resource_poolContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateResourcePool(context, list);
        }
        
        /// <summary>
        /// alter_resource_governor
        /// 	 : ALTER  RESOURCE  GOVERNOR  DISABLE RECONFIGURE WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  schema_name  DOT  function_name NULL_  RR_BRACKET RESET  STATISTICS WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_resource_governor(TSqlParser.Alter_resource_governorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterResourceGovernor(context, list);
        }
        
        /// <summary>
        /// alter_db_role
        /// 	 : ALTER  ROLE  role_name  add_drop  MEMBER  database_name WITH  NAME  EQUAL  role_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_db_role(TSqlParser.Alter_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterDbRole(context, list);
        }
        
        /// <summary>
        /// add_drop
        /// 	 : ADD
        /// 	 | DROP
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitAdd_drop(TSqlParser.Add_dropContext context)
        {
            return new AstAddDrop(context, context.GetText());
        }
        
        /// <summary>
        /// create_db_role
        /// 	 : CREATE  ROLE  role_name  AUTHORIZATION  owner_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_db_role(TSqlParser.Create_db_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateDbRole(context, list);
        }
        
        /// <summary>
        /// create_route
        /// 	 : CREATE  ROUTE  route_name  AUTHORIZATION  owner_name?  WITH  COMMA?  SERVICE_NAME  EQUAL  ?  COMMA?  BROKER_INSTANCE  EQUAL  ?  COMMA?  LIFETIME  EQUAL  DECIMAL?  COMMA?  ADDRESS  EQUAL  STRING  COMMA  MIRROR_ADDRESS  EQUAL  STRING?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_route(TSqlParser.Create_routeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRoute(context, list);
        }
        
        /// <summary>
        /// create_rule
        /// 	 : CREATE  RULE  schema_name  DOT?  rule_name  AS  search_condition
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_rule(TSqlParser.Create_ruleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateRule(context, list);
        }
        
        /// <summary>
        /// alter_schema_sql
        /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  OBJECT TYPE XML  SCHEMA  COLLECTION  DOUBLE_COLON?  id_  DOT  id_?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_schema_sql(TSqlParser.Alter_schema_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSchemaSql(context, list);
        }
        
        /// <summary>
        /// create_schema
        /// 	 : CREATE  SCHEMA  schema_name AUTHORIZATION  owner_name schema_name  AUTHORIZATION  owner_name  create_table create_view grant_deny  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  TO  owner_name REVOKE  enum_dml  ON  SCHEMA  DOUBLE_COLON?  object_name  FROM  owner_name*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_schema(TSqlParser.Create_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSchema(context, list);
        }
        
        /// <summary>
        /// enum_dml
        /// 	 : SELECT
        /// 	 | INSERT
        /// 	 | DELETE
        /// 	 | UPDATE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitEnum_dml(TSqlParser.Enum_dmlContext context)
        {
            return new AstEnumDml(context, context.GetText());
        }
        
        /// <summary>
        /// grant_deny
        /// 	 : GRANT
        /// 	 | DENY
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitGrant_deny(TSqlParser.Grant_denyContext context)
        {
            return new AstGrantDeny(context, context.GetText());
        }
        
        /// <summary>
        /// create_schema_azure_sql_dw_and_pdw
        /// 	 : CREATE  SCHEMA  schema_name  AUTHORIZATION  owner_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_schema_azure_sql_dw_and_pdw(TSqlParser.Create_schema_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSchemaAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// alter_schema_azure_sql_dw_and_pdw
        /// 	 : ALTER  SCHEMA  schema_name  TRANSFER  OBJECT  DOUBLE_COLON?  id_  DOT  ID?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_schema_azure_sql_dw_and_pdw(TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSchemaAzureSqlDwAndPdw(context, list);
        }
        
        /// <summary>
        /// create_search_property_list
        /// 	 : CREATE  SEARCH  PROPERTY  LIST  source_list_name  FROM  database_name  DOT?  source_list_name?  AUTHORIZATION  owner_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_search_property_list(TSqlParser.Create_search_property_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSearchPropertyList(context, list);
        }
        
        /// <summary>
        /// create_security_policy
        /// 	 : CREATE  SECURITY  POLICY  schema_name  DOT?  security_policy_name  COMMA?  ADD  FILTER BLOCK?  PREDICATE  tvf_schema_name  DOT  security_predicate_function_name  LR_BRACKET  COMMA?  column_name_or_arguments+  RR_BRACKET  ON  schema_name  DOT  tableName  COMMA?  AFTER  INSERT UPDATE COMMA?  BEFORE  UPDATE DELETE*+  WITH  LR_BRACKET  STATE  EQUAL  on_off  SCHEMABINDING  on_off?  RR_BRACKET?  NOT  FOR  REPLICATION?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_security_policy(TSqlParser.Create_security_policyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSecurityPolicy(context, list);
        }
        
        /// <summary>
        /// alter_sequence
        /// 	 : ALTER  SEQUENCE  schema_name  DOT?  sequence_name  RESTART  WITH  DECIMAL??  INCREMENT  BY  ?  MINVALUE  DECIMAL NO  MINVALUE?  MAXVALUE  DECIMAL NO  MAXVALUE?  CYCLE NO  CYCLE?  CACHE  DECIMAL NO  CACHE?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_sequence(TSqlParser.Alter_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSequence(context, list);
        }
        
        /// <summary>
        /// create_sequence
        /// 	 : CREATE  SEQUENCE  schema_name  DOT?  sequence_name  AS  data_type?  START  WITH  DECIMAL?  INCREMENT  BY  MINUS?  DECIMAL?  MINVALUE  MINUS?  DECIMAL? NO  MINVALUE?  MAXVALUE  MINUS?  DECIMAL? NO  MAXVALUE?  CYCLE NO  CYCLE?  CACHE  DECIMAL? NO  CACHE?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_sequence(TSqlParser.Create_sequenceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSequence(context, list);
        }
        
        /// <summary>
        /// alter_server_audit
        /// 	 : ALTER  SERVER  AUDIT  audit_name  TO  FILE  LR_BRACKET  COMMA?  FILEPATH  EQUAL   COMMA?  MAXSIZE  EQUAL  DECIMAL  MB GB TB UNLIMITED COMMA?  MAX_ROLLOVER_FILES  EQUAL   COMMA?  MAX_FILES  EQUAL   COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off*  RR_BRACKET APPLICATION_LOG SECURITY_LOG?  WITH  LR_BRACKET  COMMA?  QUEUE_DELAY  EQUAL   COMMA?  ON_FAILURE  EQUAL  CONTINUE SHUTDOWN FAIL_OPERATION COMMA?  STATE  EQUAL  on_off*  RR_BRACKET?  WHERE  COMMA?  NOT?  event_field_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING COMMA?  AND OR  NOT?  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_server_audit(TSqlParser.Alter_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerAudit(context, list);
        }
        
        /// <summary>
        /// create_server_audit
        /// 	 : CREATE  SERVER  AUDIT  audit_name  TO  FILE  LR_BRACKET  COMMA?  FILEPATH  EQUAL   COMMA?  MAXSIZE  EQUAL  DECIMAL  MB GB TB UNLIMITED COMMA?  MAX_ROLLOVER_FILES  EQUAL   COMMA?  MAX_FILES  EQUAL   COMMA?  RESERVE_DISK_SPACE  EQUAL  on_off*  RR_BRACKET APPLICATION_LOG SECURITY_LOG?  WITH  LR_BRACKET  COMMA?  QUEUE_DELAY  EQUAL   COMMA?  ON_FAILURE  EQUAL  CONTINUE SHUTDOWN FAIL_OPERATION COMMA?  STATE  EQUAL  on_off COMMA?  AUDIT_GUID  EQUAL  audit_guid*  RR_BRACKET?  WHERE  COMMA?  NOT?  event_field_name  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING COMMA?  AND OR  NOT?  EQUAL LESS  GREATER EXCLAMATION  EQUAL GREATER GREATER  EQUAL LESS LESS  EQUAL  DECIMAL STRING? REMOVE  WHERE MODIFY  NAME  EQUAL  audit_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_server_audit(TSqlParser.Create_server_auditContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerAudit(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_specification
        /// 	 : ALTER  SERVER  AUDIT  SPECIFICATION  audit_name  FOR  SERVER  AUDIT  audit_name?  ADD DROP  LR_BRACKET  audit_action_group_name  RR_BRACKET*  WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_server_audit_specification(TSqlParser.Alter_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// create_server_audit_specification
        /// 	 : CREATE  SERVER  AUDIT  SPECIFICATION  audit_name  FOR  SERVER  AUDIT  audit_name?  ADD  LR_BRACKET  audit_action_group_name  RR_BRACKET*  WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_server_audit_specification(TSqlParser.Create_server_audit_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerAuditSpecification(context, list);
        }
        
        /// <summary>
        /// alter_server_configuration
        /// 	 : ALTER  SERVER  CONFIGURATION  SET  PROCESS  AFFINITY  CPU  EQUAL  AUTO COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ NUMANODE  EQUAL  COMMA?  DECIMAL COMMA?  DECIMAL  TO  DECIMAL+ DIAGNOSTICS  LOG  ON OFF PATH  EQUAL  STRING DEFAULT MAX_SIZE  EQUAL  DECIMAL  MB DEFAULT MAX_FILES  EQUAL  DECIMAL DEFAULT FAILOVER  CLUSTER  PROPERTY  VERBOSELOGGING  EQUAL  STRING DEFAULT SQLDUMPERFLAGS  EQUAL  STRING DEFAULT SQLDUMPERPATH  EQUAL  STRING DEFAULT SQLDUMPERTIMEOUT  STRING DEFAULT FAILURECONDITIONLEVEL  EQUAL  STRING DEFAULT HEALTHCHECKTIMEOUT  EQUAL  DECIMAL DEFAULT HADR  CLUSTER  CONTEXT  EQUAL  STRING LOCAL BUFFER  POOL  EXTENSION  ON  LR_BRACKET  FILENAME  EQUAL  STRING  COMMA  SIZE  EQUAL  DECIMAL  KB MB GB  RR_BRACKET OFF SET  SOFTNUMA  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_server_configuration(TSqlParser.Alter_server_configurationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerConfiguration(context, list);
        }
        
        /// <summary>
        /// alter_server_role
        /// 	 : ALTER  SERVER  ROLE  server_role_name  ADD DROP  MEMBER  server_name WITH  NAME  EQUAL  server_role_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_server_role(TSqlParser.Alter_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerRole(context, list);
        }
        
        /// <summary>
        /// create_server_role
        /// 	 : CREATE  SERVER  ROLE  server_role_name  AUTHORIZATION  server_name?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_server_role(TSqlParser.Create_server_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServerRole(context, list);
        }
        
        /// <summary>
        /// alter_server_role_pdw
        /// 	 : ALTER  SERVER  ROLE  server_role_name  ADD DROP  MEMBER  login_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_server_role_pdw(TSqlParser.Alter_server_role_pdwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServerRolePdw(context, list);
        }
        
        /// <summary>
        /// alter_service
        /// 	 : ALTER  SERVICE  modified_service_name  ON  QUEUE  schema_name  DOT  queue_name?  COMMA?  ADD DROP  modified_contract_name*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_service(TSqlParser.Alter_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterService(context, list);
        }
        
        /// <summary>
        /// create_service
        /// 	 : CREATE  SERVICE  create_service_name  AUTHORIZATION  owner_name?  ON  QUEUE  schema_name  DOT?  queue_name  LR_BRACKET  COMMA?  id_ DEFAULT+  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_service(TSqlParser.Create_serviceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateService(context, list);
        }
        
        /// <summary>
        /// alter_service_master_key
        /// 	 : ALTER  SERVICE  MASTER  KEY  FORCE?  REGENERATE WITH  OLD_ACCOUNT  EQUAL    COMMA  OLD_PASSWORD  EQUAL   NEW_ACCOUNT  EQUAL    COMMA  NEW_PASSWORD  EQUAL  ?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_service_master_key(TSqlParser.Alter_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterServiceMasterKey(context, list);
        }
        
        /// <summary>
        /// alter_symmetric_key
        /// 	 : ALTER  SYMMETRIC  KEY  symmetric_key_name  add_drop  ENCRYPTION  BY  CERTIFICATE  certificate_name PASSWORD  EQUAL   SYMMETRIC  KEY  symmetric_key_name ASYMMETRIC  KEY  asym_key_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_symmetric_key(TSqlParser.Alter_symmetric_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterSymmetricKey(context, list);
        }
        
        /// <summary>
        /// create_synonym
        /// 	 : CREATE  SYNONYM  schema_name  DOT?  synonym_name  FOR  server_name  DOT?  database_name  DOT?  schema_name  DOT?  object_name database_name  DOT?    DOT?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_synonym(TSqlParser.Create_synonymContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateSynonym(context, list);
        }
        
        /// <summary>
        /// alter_user
        /// 	 : ALTER  USER  user_name  WITH  COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name NULL_ COMMA?  LOGIN  EQUAL  login_name COMMA?  PASSWORD  EQUAL  STRING  OLD_PASSWORD  EQUAL  STRING+ COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE  language COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off+
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_user(TSqlParser.Alter_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterUser(context, list);
        }
        
        /// <summary>
        /// create_user
        /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name?  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*?
        /// 	 | CREATE  USER  windows_principal  WITH  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off*? user_name  WITH  PASSWORD  EQUAL    COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  DEFAULT_LANGUAGE  EQUAL  NONE DECIMAL language COMMA?  SID  EQUAL  BINARY COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* azure_active_directory_principal  FROM  EXTERNAL  PROVIDER
        /// 	 | CREATE  USER  user_name  WITHOUT  LOGIN  COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off* FOR FROM  CERTIFICATE  certificate_name FOR FROM  ASYMMETRIC  KEY  asym_key_name
        /// 	 | CREATE  USER  user_name
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_user(TSqlParser.Create_userContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateUser(context, list);
        }
        
        /// <summary>
        /// create_user_azure_sql_dw
        /// 	 : CREATE  USER  user_name  FOR FROM  LOGIN  login_name WITHOUT  LOGIN?  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
        /// 	 | CREATE  USER  azure_active_directory_principal  FROM  EXTERNAL  PROVIDER  WITH  DEFAULT_SCHEMA  EQUAL  schema_name?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_user_azure_sql_dw(TSqlParser.Create_user_azure_sql_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateUserAzureSqlDw(context, list);
        }
        
        /// <summary>
        /// alter_user_azure_sql
        /// 	 : ALTER  USER  user_name  WITH  COMMA?  NAME  EQUAL  user_name COMMA?  DEFAULT_SCHEMA  EQUAL  schema_name COMMA?  LOGIN  EQUAL  login_name COMMA?  ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off+
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_user_azure_sql(TSqlParser.Alter_user_azure_sqlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterUserAzureSql(context, list);
        }
        
        /// <summary>
        /// alter_workload_group
        /// 	 : ALTER  WORKLOAD  GROUP  workload_group_group_name DEFAULT_DOUBLE_QUOTE  WITH  LR_BRACKET  IMPORTANCE  EQUAL  LOW MEDIUM HIGH COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL   COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL   REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL   MAX_DOP  EQUAL   GROUP_MAX_REQUESTS  EQUAL  +  RR_BRACKET?  USING  workload_group_pool_name DEFAULT_DOUBLE_QUOTE?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_workload_group(TSqlParser.Alter_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// create_workload_group
        /// 	 : CREATE  WORKLOAD  GROUP  workload_group_group_name  WITH  LR_BRACKET  IMPORTANCE  EQUAL  LOW MEDIUM HIGH COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL   COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL   REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL   MAX_DOP  EQUAL   GROUP_MAX_REQUESTS  EQUAL  +  RR_BRACKET?  USING  workload_group_pool_name DEFAULT_DOUBLE_QUOTE?  COMMA?  EXTERNAL  external_pool_name DEFAULT_DOUBLE_QUOTE??
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_workload_group(TSqlParser.Create_workload_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateWorkloadGroup(context, list);
        }
        
        /// <summary>
        /// create_xml_schema_collection
        /// 	 : CREATE  XML  SCHEMA  COLLECTION  relational_schema  DOT?  sql_identifier  AS  STRING id_ LOCAL_ID
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_xml_schema_collection(TSqlParser.Create_xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// create_partition_function
        /// 	 : CREATE  PARTITION  FUNCTION  partition_function_name  LR_BRACKET    RR_BRACKET  AS  RANGE  LEFT RIGHT?  FOR  VALUES  LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_partition_function(TSqlParser.Create_partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreatePartitionFunction(context, list);
        }
        
        /// <summary>
        /// create_partition_scheme
        /// 	 : CREATE  PARTITION  SCHEME  partition_scheme_name  AS  PARTITION  partition_function_name  ALL?  TO  LR_BRACKET    COMMA  *  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_partition_scheme(TSqlParser.Create_partition_schemeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreatePartitionScheme(context, list);
        }
        
        /// <summary>
        /// create_queue
        /// 	 : CREATE  QUEUE  full_table_name queue_name  queue_settings?  ON  file_group_name DEFAULT?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_queue(TSqlParser.Create_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateQueue(context, list);
        }
        
        /// <summary>
        /// queue_settings
        /// 	 : WITH  STATUS  EQUAL  on_off  COMMA??  RETENTION  EQUAL  on_off  COMMA??  ACTIVATION  LR_BRACKET  STATUS  EQUAL  on_off  COMMA??  PROCEDURE_NAME  EQUAL  func_proc_name_database_schema  COMMA??  MAX_QUEUE_READERS  EQUAL    COMMA??  EXECUTE  AS  SELF  OWNER  COMMA?? DROP  RR_BRACKET  COMMA??  POISON_MESSAGE_HANDLING  LR_BRACKET  STATUS  EQUAL  on_off  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQueue_settings(TSqlParser.Queue_settingsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueSettings(context, list);
        }
        
        /// <summary>
        /// alter_queue
        /// 	 : ALTER  QUEUE  full_table_name queue_name  queue_settings queue_action
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_queue(TSqlParser.Alter_queueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterQueue(context, list);
        }
        
        /// <summary>
        /// queue_action
        /// 	 : REBUILD  WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET?
        /// 	 | REORGANIZE  WITH  LOB_COMPACTION  EQUAL  on_off?
        /// 	 | MOVE  TO  id_ DEFAULT
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQueue_action(TSqlParser.Queue_actionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueAction(context, list);
        }
        
        /// <summary>
        /// queue_rebuild_options
        /// 	 : MAXDOP  EQUAL  DECIMAL
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQueue_rebuild_options(TSqlParser.Queue_rebuild_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueRebuildOptions(context, list);
        }
        
        /// <summary>
        /// create_contract
        /// 	 : CREATE  CONTRACT  contract_name  AUTHORIZATION  owner_name?  LR_BRACKET  message_type_name DEFAULT  SENT  BY  INITIATOR TARGET ANY  COMMA?+  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_contract(TSqlParser.Create_contractContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateContract(context, list);
        }
        
        /// <summary>
        /// message_statement
        /// 	 : CREATE  MESSAGE  TYPE  message_type_name  AUTHORIZATION  owner_name?  VALIDATION  EQUAL  NONE EMPTY WELL_FORMED_XML VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitMessage_statement(TSqlParser.Message_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMessageStatement(context, list);
        }
        
        /// <summary>
        /// merge_statement
        /// 	 : with_expression?  MERGE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches+  output_clause?  option_clause?  SEMI
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitMerge_statement(TSqlParser.Merge_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeStatement(context, list);
        }
        
        /// <summary>
        /// when_matches
        /// 	 : WHEN  MATCHED  AND  search_condition?  THEN  merge_matched+
        /// 	 | WHEN  NOT  MATCHED  BY  TARGET?  AND  search_condition?  THEN  merge_not_matched
        /// 	 | WHEN  NOT  MATCHED  BY  SOURCE  AND  search_condition?  THEN  merge_matched+
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitWhen_matches(TSqlParser.When_matchesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWhenMatches(context, list);
        }
        
        /// <summary>
        /// merge_matched
        /// 	 : UPDATE  SET  update_elem_merges
        /// 	 | DELETE
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitMerge_matched(TSqlParser.Merge_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeMatched(context, list);
        }
        
        /// <summary>
        /// update_elem_merges
        /// 	 : update_elem_merge  COMMA  update_elem_merge*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUpdate_elem_merges(TSqlParser.Update_elem_mergesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElemMerges(context, list);
        }
        
        /// <summary>
        /// merge_not_matched
        /// 	 : INSERT  LR_BRACKET  column_name_list  RR_BRACKET?  table_value_constructor DEFAULT  VALUES
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitMerge_not_matched(TSqlParser.Merge_not_matchedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMergeNotMatched(context, list);
        }
        
        /// <summary>
        /// delete_statement
        /// 	 : with_expression?  DELETE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? TOP  DECIMAL?  FROM?  delete_statement_from  with_table_hints?  output_clause?  FROM  table_sources?  WHERE  search_condition CURRENT  OF  GLOBAL?  cursor_name ?  for_clause?  option_clause?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDelete_statement(TSqlParser.Delete_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeleteStatement(context, list);
        }
        
        /// <summary>
        /// delete_statement_from
        /// 	 : ddl_object
        /// 	 | rowset_function_limited
        /// 	 | 
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDelete_statement_from(TSqlParser.Delete_statement_fromContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeleteStatementFrom(context, list);
        }
        
        /// <summary>
        /// insert_statement
        /// 	 : with_expression?  INSERT  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  INTO?  ddl_object rowset_function_limited  with_table_hints?  LR_BRACKET  insert_column_name_list  RR_BRACKET?  output_clause?  insert_statement_value  for_clause?  option_clause?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitInsert_statement(TSqlParser.Insert_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertStatement(context, list);
        }
        
        /// <summary>
        /// insert_statement_value
        /// 	 : table_value_constructor
        /// 	 | derived_table
        /// 	 | execute_statement
        /// 	 | DEFAULT  VALUES
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitInsert_statement_value(TSqlParser.Insert_statement_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertStatementValue(context, list);
        }
        
        /// <summary>
        /// receive_statement
        /// 	 : LR_BRACKET?  RECEIVE  ALL DISTINCT top_clause STAR  LOCAL_ID  EQUAL  expression  COMMA?*  FROM  full_table_name  INTO  table_variable  WHERE  ?  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitReceive_statement(TSqlParser.Receive_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReceiveStatement(context, list);
        }
        
        /// <summary>
        /// select_statement_standalone
        /// 	 : with_expression?  select_statement
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSelect_statement_standalone(TSqlParser.Select_statement_standaloneContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectStatementStandalone(context, list);
        }
        
        /// <summary>
        /// select_statement
        /// 	 : query_expression  select_order_by_clause?  for_clause?  option_clause?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSelect_statement(TSqlParser.Select_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectStatement(context, list);
        }
        
        /// <summary>
        /// time
        /// 	 : LOCAL_ID constant
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTime(TSqlParser.TimeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTime(context, list);
        }
        
        /// <summary>
        /// update_statement
        /// 	 : with_expression?  UPDATE  TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT??  ddl_object rowset_function_limited  with_table_hints?  SET  update_elems  output_clause?  FROM  table_sources?  WHERE  search_condition CURRENT  OF  GLOBAL?  cursor_name ?  for_clause?  option_clause?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUpdate_statement(TSqlParser.Update_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatement(context, list);
        }
        
        /// <summary>
        /// update_elems
        /// 	 : update_elem  COMMA  update_elem*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUpdate_elems(TSqlParser.Update_elemsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElems(context, list);
        }
        
        /// <summary>
        /// output_clause
        /// 	 : OUTPUT  output_dml_list_elems  INTO  LOCAL_ID table_name  LR_BRACKET  column_name_list  RR_BRACKET??
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOutput_clause(TSqlParser.Output_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOutputClause(context, list);
        }
        
        /// <summary>
        /// output_dml_list_elems
        /// 	 : output_dml_list_elem  COMMA  output_dml_list_elem*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOutput_dml_list_elems(TSqlParser.Output_dml_list_elemsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOutputDmlListElems(context, list);
        }
        
        /// <summary>
        /// output_dml_list_elem
        /// 	 : expression asterisk  as_column_alias?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOutput_dml_list_elem(TSqlParser.Output_dml_list_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOutputDmlListElem(context, list);
        }
        
        /// <summary>
        /// create_database
        /// 	 : CREATE  DATABASE  database_name  CONTAINMENT  EQUAL  NONE PARTIAL?  ON  PRIMARY?  database_file_spec  COMMA  database_file_spec*?  LOG  ON  database_file_spec  COMMA  database_file_spec*?  COLLATE  collation_name?  WITH  create_database_option  COMMA  create_database_option*?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_database(TSqlParser.Create_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateDatabase(context, list);
        }
        
        /// <summary>
        /// create_index
        /// 	 : CREATE  UNIQUE?  clustered?  INDEX  id_  ON  table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET?  WHERE  ?  create_index_options?  ON  id_?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_index(TSqlParser.Create_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateIndex(context, list);
        }
        
        /// <summary>
        /// create_index_options
        /// 	 : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_index_options(TSqlParser.Create_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateIndexOptions(context, list);
        }
        
        /// <summary>
        /// relational_index_options
        /// 	 : relational_index_option  COMMA  relational_index_option*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitRelational_index_options(TSqlParser.Relational_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRelationalIndexOptions(context, list);
        }
        
        /// <summary>
        /// relational_index_option
        /// 	 : rebuild_index_option
        /// 	 | DROP_EXISTING  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitRelational_index_option(TSqlParser.Relational_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRelationalIndexOption(context, list);
        }
        
        /// <summary>
        /// alter_index
        /// 	 : ALTER  INDEX  id_ ALL  ON  table_name  DISABLE PAUSE ABORT RESUME  resumable_index_options? reorganize_partition set_index_options rebuild_partition
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_index(TSqlParser.Alter_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterIndex(context, list);
        }
        
        /// <summary>
        /// resumable_index_options
        /// 	 : WITH  LR_BRACKET  resumable_index_option  COMMA  resumable_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitResumable_index_options(TSqlParser.Resumable_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstResumableIndexOptions(context, list);
        }
        
        /// <summary>
        /// resumable_index_option
        /// 	 : MAXDOP  EQUAL  
        /// 	 | MAX_DURATION  EQUAL    MINUTES?
        /// 	 | low_priority_lock_wait
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitResumable_index_option(TSqlParser.Resumable_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstResumableIndexOption(context, list);
        }
        
        /// <summary>
        /// reorganize_partition
        /// 	 : REORGANIZE  PARTITION  EQUAL  DECIMAL?  reorganize_options?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitReorganize_partition(TSqlParser.Reorganize_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReorganizePartition(context, list);
        }
        
        /// <summary>
        /// reorganize_options
        /// 	 : WITH  LR_BRACKET  reorganize_option  COMMA  reorganize_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitReorganize_options(TSqlParser.Reorganize_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReorganizeOptions(context, list);
        }
        
        /// <summary>
        /// reorganize_option
        /// 	 : LOB_COMPACTION  EQUAL  on_off
        /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitReorganize_option(TSqlParser.Reorganize_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReorganizeOption(context, list);
        }
        
        /// <summary>
        /// set_index_options
        /// 	 : SET  LR_BRACKET  set_index_option  COMMA  set_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSet_index_options(TSqlParser.Set_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetIndexOptions(context, list);
        }
        
        /// <summary>
        /// set_index_option
        /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSet_index_option(TSqlParser.Set_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetIndexOption(context, list);
        }
        
        /// <summary>
        /// rebuild_partition
        /// 	 : REBUILD  PARTITION  EQUAL  ALL?  rebuild_index_options?
        /// 	 | REBUILD  PARTITION  EQUAL  DECIMAL  single_partition_rebuild_index_options?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitRebuild_partition(TSqlParser.Rebuild_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRebuildPartition(context, list);
        }
        
        /// <summary>
        /// rebuild_index_options
        /// 	 : WITH  LR_BRACKET  rebuild_index_option  COMMA  rebuild_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitRebuild_index_options(TSqlParser.Rebuild_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRebuildIndexOptions(context, list);
        }
        
        /// <summary>
        /// rebuild_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
        /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | MAX_DURATION  EQUAL    MINUTES?
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  
        /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitRebuild_index_option(TSqlParser.Rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRebuildIndexOption(context, list);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_options
        /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  COMMA  single_partition_rebuild_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSingle_partition_rebuild_index_options(TSqlParser.Single_partition_rebuild_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSinglePartitionRebuildIndexOptions(context, list);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option
        /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSingle_partition_rebuild_index_option(TSqlParser.Single_partition_rebuild_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSinglePartitionRebuildIndexOption(context, list);
        }
        
        /// <summary>
        /// on_partitions
        /// 	 : ON  PARTITIONS  LR_BRACKET    TO  ?  COMMA    TO  ?*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOn_partitions(TSqlParser.On_partitionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnPartitions(context, list);
        }
        
        /// <summary>
        /// create_columnstore_index
        /// 	 : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  table_name  create_columnstore_index_options?  ON  id_?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_columnstore_index(TSqlParser.Create_columnstore_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnstoreIndex(context, list);
        }
        
        /// <summary>
        /// create_columnstore_index_options
        /// 	 : WITH  LR_BRACKET  columnstore_index_option  COMMA  columnstore_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_columnstore_index_options(TSqlParser.Create_columnstore_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateColumnstoreIndexOptions(context, list);
        }
        
        /// <summary>
        /// columnstore_index_option
        /// 	 : DROP_EXISTING  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  
        /// 	 | ONLINE  EQUAL  on_off
        /// 	 | COMPRESSION_DELAY  EQUAL    MINUTES?
        /// 	 | DATA_COMPRESSION  EQUAL  COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumnstore_index_option(TSqlParser.Columnstore_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnstoreIndexOption(context, list);
        }
        
        /// <summary>
        /// create_nonclustered_columnstore_index
        /// 	 : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  table_name  LR_BRACKET  column_name_list_with_order  RR_BRACKET  WHERE  search_condition?  create_columnstore_index_options?  ON  id_?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_nonclustered_columnstore_index(TSqlParser.Create_nonclustered_columnstore_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateNonclusteredColumnstoreIndex(context, list);
        }
        
        /// <summary>
        /// create_xml_index
        /// 	 : CREATE  PRIMARY?  XML  INDEX  id_  ON  table_name  LR_BRACKET  id_  RR_BRACKET  USING  XML  INDEX  id_  FOR  VALUE PATH PROPERTY???  xml_index_options?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_xml_index(TSqlParser.Create_xml_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateXmlIndex(context, list);
        }
        
        /// <summary>
        /// xml_index_options
        /// 	 : WITH  LR_BRACKET  xml_index_option  COMMA  xml_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitXml_index_options(TSqlParser.Xml_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlIndexOptions(context, list);
        }
        
        /// <summary>
        /// xml_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | DROP_EXISTING  EQUAL  on_off
        /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  
        /// 	 | XML_COMPRESSION  EQUAL  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitXml_index_option(TSqlParser.Xml_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlIndexOption(context, list);
        }
        
        /// <summary>
        /// create_or_alter_procedure
        /// 	 : CREATE  OR  ALTER REPLACE? ALTER      SEMI  DECIMAL?  LR_BRACKET?  procedure_params  RR_BRACKET??  procedure_options?  FOR  REPLICATION?  AS  as_external_name sql_clause
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_or_alter_procedure(TSqlParser.Create_or_alter_procedureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterProcedure(context, list);
        }
        
        /// <summary>
        /// procedure_options
        /// 	 : WITH  procedure_option  COMMA  procedure_option*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitProcedure_options(TSqlParser.Procedure_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureOptions(context, list);
        }
        
        /// <summary>
        /// as_external_name
        /// 	 : EXTERNAL  NAME  assembly_name  DOT  class_name  DOT  method_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAs_external_name(TSqlParser.As_external_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsExternalName(context, list);
        }
        
        /// <summary>
        /// create_or_alter_dml_trigger
        /// 	 : CREATE  OR  ALTER? ALTER  TRIGGER  simple_name  ON  table_name  dml_trigger_options?  FOR AFTER INSTEAD  OF  dml_trigger_operations  WITH  APPEND?  NOT  FOR  REPLICATION?  AS  sql_clauses
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_or_alter_dml_trigger(TSqlParser.Create_or_alter_dml_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterDmlTrigger(context, list);
        }
        
        /// <summary>
        /// dml_trigger_options
        /// 	 : WITH  dml_trigger_option  COMMA  dml_trigger_option*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDml_trigger_options(TSqlParser.Dml_trigger_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDmlTriggerOptions(context, list);
        }
        
        /// <summary>
        /// dml_trigger_operations
        /// 	 : dml_trigger_operation  COMMA  dml_trigger_operation*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDml_trigger_operations(TSqlParser.Dml_trigger_operationsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDmlTriggerOperations(context, list);
        }
        
        /// <summary>
        /// dml_trigger_option
        /// 	 : ENCRYPTION
        /// 	 | execute_clause
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDml_trigger_option(TSqlParser.Dml_trigger_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDmlTriggerOption(context, list);
        }
        
        /// <summary>
        /// dml_trigger_operation
        /// 	 : INSERT UPDATE DELETE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitDml_trigger_operation(TSqlParser.Dml_trigger_operationContext context)
        {
            return new AstDmlTriggerOperation(context, context.GetText());
        }
        
        /// <summary>
        /// create_or_alter_ddl_trigger
        /// 	 : CREATE  OR  ALTER? ALTER  TRIGGER  simple_name  ON  ALL  SERVER DATABASE  dml_trigger_options?  FOR AFTER  dml_trigger_operations  AS  sql_clauses
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_or_alter_ddl_trigger(TSqlParser.Create_or_alter_ddl_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterDdlTrigger(context, list);
        }
        
        /// <summary>
        /// create_or_alter_function
        /// 	 : CREATE  OR  ALTER? ALTER  FUNCTION    LR_BRACKET  procedure_params  RR_BRACKET LR_BRACKET  RR_BRACKET  func_body_returns_select func_body_returns_table func_body_returns_scalar  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_or_alter_function(TSqlParser.Create_or_alter_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateOrAlterFunction(context, list);
        }
        
        /// <summary>
        /// procedure_params
        /// 	 : procedure_param  COMMA  procedure_param*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitProcedure_params(TSqlParser.Procedure_paramsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureParams(context, list);
        }
        
        /// <summary>
        /// func_body_returns_select
        /// 	 : RETURNS  TABLE  function_options?  AS?  as_external_name RETURN  LR_BRACKET  select_statement_standalone  RR_BRACKET select_statement_standalone
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFunc_body_returns_select(TSqlParser.Func_body_returns_selectContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsSelect(context, list);
        }
        
        /// <summary>
        /// function_options
        /// 	 : WITH  function_option  COMMA  function_option*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFunction_options(TSqlParser.Function_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFunctionOptions(context, list);
        }
        
        /// <summary>
        /// func_body_returns_table
        /// 	 : RETURNS  LOCAL_ID  table_type_definition  function_options?  AS?  as_external_name BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFunc_body_returns_table(TSqlParser.Func_body_returns_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsTable(context, list);
        }
        
        /// <summary>
        /// func_body_returns_scalar
        /// 	 : RETURNS  data_type  function_options?  AS?  as_external_name BEGIN  sql_clause?  RETURN    SEMI?  END
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFunc_body_returns_scalar(TSqlParser.Func_body_returns_scalarContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncBodyReturnsScalar(context, list);
        }
        
        /// <summary>
        /// procedure_param
        /// 	 : LOCAL_ID  AS?  type_schema  DOT?  data_type  VARYING?  EQUAL  ?  OUT OUTPUT READONLY?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitProcedure_param(TSqlParser.Procedure_paramContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureParam(context, list);
        }
        
        /// <summary>
        /// procedure_option
        /// 	 : ENCRYPTION
        /// 	 | RECOMPILE
        /// 	 | execute_clause
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitProcedure_option(TSqlParser.Procedure_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProcedureOption(context, list);
        }
        
        /// <summary>
        /// function_option
        /// 	 : ENCRYPTION
        /// 	 | SCHEMABINDING
        /// 	 | RETURNS  NULL_  ON  NULL_  INPUT
        /// 	 | CALLED  ON  NULL_  INPUT
        /// 	 | execute_clause
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFunction_option(TSqlParser.Function_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFunctionOption(context, list);
        }
        
        /// <summary>
        /// create_statistics
        /// 	 : CREATE  STATISTICS  id_  ON  table_name  LR_BRACKET  column_name_list  RR_BRACKET  WITH  FULLSCAN SAMPLE  DECIMAL  PERCENT ROWS STATS_STREAM  COMMA  NORECOMPUTE?  COMMA  INCREMENTAL  EQUAL  on_off??  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_statistics(TSqlParser.Create_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateStatistics(context, list);
        }
        
        /// <summary>
        /// update_statistics
        /// 	 : UPDATE  STATISTICS  full_table_name  id_ LR_BRACKET  id_  COMMA  id_*  RR_BRACKET?  update_statistics_options?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUpdate_statistics(TSqlParser.Update_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatistics(context, list);
        }
        
        /// <summary>
        /// update_statistics_options
        /// 	 : WITH  update_statistics_option  COMMA  update_statistics_option*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUpdate_statistics_options(TSqlParser.Update_statistics_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatisticsOptions(context, list);
        }
        
        /// <summary>
        /// update_statistics_option
        /// 	 : FULLSCAN  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
        /// 	 | SAMPLE    PERCENT ROWS  COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off?
        /// 	 | RESAMPLE  on_partitions?
        /// 	 | STATS_STREAM  EQUAL  
        /// 	 | ROWCOUNT  EQUAL  DECIMAL
        /// 	 | PAGECOUNT  EQUAL  DECIMAL
        /// 	 | ALL
        /// 	 | COLUMNS
        /// 	 | INDEX
        /// 	 | NORECOMPUTE
        /// 	 | INCREMENTAL  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  
        /// 	 | AUTO_DROP  EQUAL  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitUpdate_statistics_option(TSqlParser.Update_statistics_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateStatisticsOption(context, list);
        }
        
        /// <summary>
        /// create_table
        /// 	 : CREATE  TABLE  table_name  LR_BRACKET  column_def_table_constraints  COMMA?  table_indices*  COMMA?  RR_BRACKET  LOCK  simple_id?  table_options*  ON  id_ DEFAULT?  TEXTIMAGE_ON  id_ DEFAULT?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_table(TSqlParser.Create_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateTable(context, list);
        }
        
        /// <summary>
        /// table_indices
        /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
        /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  ON  id_?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_indices(TSqlParser.Table_indicesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableIndices(context, list);
        }
        
        /// <summary>
        /// table_options
        /// 	 : WITH  LR_BRACKET  table_option  COMMA  table_option*  RR_BRACKET table_option  COMMA  table_option*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_options(TSqlParser.Table_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableOptions(context, list);
        }
        
        /// <summary>
        /// table_option
        /// 	 : simple_id keyword  EQUAL  simple_id keyword on_off DECIMAL
        /// 	 | CLUSTERED  COLUMNSTORE  INDEX
        /// 	 | HEAP
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | distribution
        /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_option(TSqlParser.Table_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableOption(context, list);
        }
        
        /// <summary>
        /// distribution
        /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
        /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDistribution(TSqlParser.DistributionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDistribution(context, list);
        }
        
        /// <summary>
        /// create_table_index_options
        /// 	 : WITH  LR_BRACKET  create_table_index_option  COMMA  create_table_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_table_index_options(TSqlParser.Create_table_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateTableIndexOptions(context, list);
        }
        
        /// <summary>
        /// create_table_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_table_index_option(TSqlParser.Create_table_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateTableIndexOption(context, list);
        }
        
        /// <summary>
        /// create_view
        /// 	 : CREATE  VIEW  simple_name  LR_BRACKET  column_name_list  RR_BRACKET?  view_attributes?  AS  select_statement_standalone  WITH  CHECK  OPTION?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_view(TSqlParser.Create_viewContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateView(context, list);
        }
        
        /// <summary>
        /// view_attributes
        /// 	 : WITH  view_attribute  COMMA  view_attribute*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitView_attributes(TSqlParser.View_attributesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstViewAttributes(context, list);
        }
        
        /// <summary>
        /// view_attribute
        /// 	 : ENCRYPTION
        /// 	 | SCHEMABINDING
        /// 	 | VIEW_METADATA
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitView_attribute(TSqlParser.View_attributeContext context)
        {
            return new AstViewAttribute(context, context.GetText());
        }
        
        /// <summary>
        /// alter_table
        /// 	 : ALTER  TABLE  table_name  SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  AUTO TABLE DISABLE  RR_BRACKET ADD  column_def_table_constraints ALTER  COLUMN  column_definition column_modifier DROP  COLUMN  ids_ DROP  CONSTRAINT  constraint_name WITH  CHECK NOCHECK  ADD  CONSTRAINT  constraint_name?  FOREIGN  KEY  LR_BRACKET    RR_BRACKET  REFERENCES  table_name  LR_BRACKET    RR_BRACKET?  on_delete on_update* CHECK  LR_BRACKET  search_condition  RR_BRACKET NOCHECK CHECK  CONSTRAINT  constraint_name ENABLE DISABLE  TRIGGER  id_? REBUILD  table_options SWITCH  switch_partition  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_table(TSqlParser.Alter_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTable(context, list);
        }
        
        /// <summary>
        /// ids_
        /// 	 : id_  COMMA  id_*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitIds_(TSqlParser.Ids_Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIds(context, list);
        }
        
        /// <summary>
        /// switch_partition
        /// 	 : PARTITION?  ?  TO    PARTITION  ?  WITH  low_priority_lock_wait?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSwitch_partition(TSqlParser.Switch_partitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchPartition(context, list);
        }
        
        /// <summary>
        /// low_priority_lock_wait
        /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL    MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitLow_priority_lock_wait(TSqlParser.Low_priority_lock_waitContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLowPriorityLockWait(context, list);
        }
        
        /// <summary>
        /// alter_database
        /// 	 : ALTER  DATABASE  database_name CURRENT  MODIFY  NAME  EQUAL  database_name COLLATE  collation_name SET  database_optionspec  WITH  termination? add_or_modify_files add_or_modify_filegroups  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_database(TSqlParser.Alter_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterDatabase(context, list);
        }
        
        /// <summary>
        /// add_or_modify_files
        /// 	 : ADD  FILE  filespecs  TO  FILEGROUP  file_group_name?
        /// 	 | ADD  LOG  FILE  filespecs
        /// 	 | REMOVE  FILE  file_group_name
        /// 	 | MODIFY  FILE  filespec
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAdd_or_modify_files(TSqlParser.Add_or_modify_filesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAddOrModifyFiles(context, list);
        }
        
        /// <summary>
        /// filespecs
        /// 	 : filespec  COMMA  filespec*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFilespecs(TSqlParser.FilespecsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFilespecs(context, list);
        }
        
        /// <summary>
        /// filespec
        /// 	 : LR_BRACKET  NAME  EQUAL  file_group_name  COMMA  NEWNAME  EQUAL  new_file_group_name STRING?  COMMA  FILENAME  EQUAL  ?  COMMA  SIZE  EQUAL  ?  COMMA  MAXSIZE  EQUAL   UNLIMITED?  COMMA  FILEGROWTH  EQUAL  ?  COMMA  OFFLINE?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFilespec(TSqlParser.FilespecContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFilespec(context, list);
        }
        
        /// <summary>
        /// add_or_modify_filegroups
        /// 	 : ADD  FILEGROUP  file_group_name  CONTAINS  FILESTREAM CONTAINS  MEMORY_OPTIMIZED_DATA?
        /// 	 | REMOVE  FILEGROUP  file_group_name
        /// 	 | MODIFY  FILEGROUP  file_group_name  filegroup_updatability_option DEFAULT NAME  EQUAL  new_file_group_name AUTOGROW_SINGLE_FILE AUTOGROW_ALL_FILES
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAdd_or_modify_filegroups(TSqlParser.Add_or_modify_filegroupsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAddOrModifyFilegroups(context, list);
        }
        
        /// <summary>
        /// filegroup_updatability_option
        /// 	 : READONLY
        /// 	 | READWRITE
        /// 	 | READ_ONLY
        /// 	 | READ_WRITE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitFilegroup_updatability_option(TSqlParser.Filegroup_updatability_optionContext context)
        {
            return new AstFilegroupUpdatabilityOption(context, context.GetText());
        }
        
        /// <summary>
        /// database_optionspec
        /// 	 : auto_option
        /// 	 | change_tracking_option
        /// 	 | containment_option
        /// 	 | cursor_option
        /// 	 | database_mirroring_option
        /// 	 | date_correlation_optimization_option
        /// 	 | db_encryption_option
        /// 	 | db_state_option
        /// 	 | db_update_option
        /// 	 | db_user_access_option
        /// 	 | delayed_durability_option
        /// 	 | external_access_option
        /// 	 | FILESTREAM  database_filestream_option
        /// 	 | hadr_options
        /// 	 | mixed_page_allocation_option
        /// 	 | parameterization_option
        /// 	 | recovery_option
        /// 	 | service_broker_option
        /// 	 | snapshot_option
        /// 	 | sql_option
        /// 	 | target_recovery_time_option
        /// 	 | termination
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDatabase_optionspec(TSqlParser.Database_optionspecContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseOptionspec(context, list);
        }
        
        /// <summary>
        /// auto_option
        /// 	 : AUTO_CLOSE  on_off
        /// 	 | AUTO_CREATE_STATISTICS  OFF
        /// 	 | ON  INCREMENTAL  EQUAL  ON OFF
        /// 	 | AUTO_SHRINK  on_off
        /// 	 | AUTO_UPDATE_STATISTICS  on_off
        /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAuto_option(TSqlParser.Auto_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAutoOption(context, list);
        }
        
        /// <summary>
        /// change_tracking_option
        /// 	 : CHANGE_TRACKING  EQUAL  OFF ON  change_tracking_option_list  change_tracking_option_lists*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitChange_tracking_option(TSqlParser.Change_tracking_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTrackingOption(context, list);
        }
        
        /// <summary>
        /// change_tracking_option_lists
        /// 	 : change_tracking_option_list  COMMA  change_tracking_option_list*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitChange_tracking_option_lists(TSqlParser.Change_tracking_option_listsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTrackingOptionLists(context, list);
        }
        
        /// <summary>
        /// change_tracking_option_list
        /// 	 : AUTO_CLEANUP  EQUAL  on_off
        /// 	 | CHANGE_RETENTION  EQUAL  DAYS HOURS MINUTES
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitChange_tracking_option_list(TSqlParser.Change_tracking_option_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTrackingOptionList(context, list);
        }
        
        /// <summary>
        /// containment_option
        /// 	 : CONTAINMENT  EQUAL  NONE PARTIAL
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitContainment_option(TSqlParser.Containment_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstContainmentOption(context, list);
        }
        
        /// <summary>
        /// cursor_option
        /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
        /// 	 | CURSOR_DEFAULT  local_global
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCursor_option(TSqlParser.Cursor_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCursorOption(context, list);
        }
        
        /// <summary>
        /// local_global
        /// 	 : LOCAL
        /// 	 | GLOBAL
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitLocal_global(TSqlParser.Local_globalContext context)
        {
            return new AstLocalGlobal(context, context.GetText());
        }
        
        /// <summary>
        /// alter_endpoint
        /// 	 : ALTER  ENDPOINT  endpoint_name  AUTHORIZATION  login_name?  STATE  EQUAL    ?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL    COMMA  LISTENER_IP  EQUAL  ALL IPV4_ADDR IPV6_ADDR STRING?  RR_BRACKET  TSQL FOR  SERVICE_BROKER  LR_BRACKET  AUTHENTICATION  EQUAL  WINDOWS  NTLM KERBEROS NEGOTIATE?  CERTIFICATE  certificate_name? CERTIFICATE  certificate_name  WINDOWS?  NTLM KERBEROS NEGOTIATE?  COMMA?  ENCRYPTION  EQUAL  DISABLED SUPPORTED REQUIRED  ALGORITHM  AES RC4 AES  RC4 RC4  AES??  COMMA?  MESSAGE_FORWARDING  EQUAL  ENABLED DISABLED?  COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  DECIMAL?  RR_BRACKET FOR  DATABASE_MIRRORING  LR_BRACKET  AUTHENTICATION  EQUAL  WINDOWS  NTLM KERBEROS NEGOTIATE?  CERTIFICATE  certificate_name? CERTIFICATE  certificate_name  WINDOWS?  NTLM KERBEROS NEGOTIATE?  COMMA?  ENCRYPTION  EQUAL  DISABLED SUPPORTED REQUIRED  ALGORITHM  AES RC4 AES  RC4 RC4  AES??  COMMA?  ROLE  EQUAL  WITNESS PARTNER ALL  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_endpoint(TSqlParser.Alter_endpointContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterEndpoint(context, list);
        }
        
        /// <summary>
        /// mirroring_set_option
        /// 	 : mirroring_partner  partner_option
        /// 	 | mirroring_witness  witness_option
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitMirroring_set_option(TSqlParser.Mirroring_set_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMirroringSetOption(context, list);
        }
        
        /// <summary>
        /// mirroring_partner
        /// 	 : PARTNER
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitMirroring_partner(TSqlParser.Mirroring_partnerContext context)
        {
            return new AstMirroringPartner(context);
        }
        
        /// <summary>
        /// mirroring_witness
        /// 	 : WITNESS
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitMirroring_witness(TSqlParser.Mirroring_witnessContext context)
        {
            return new AstMirroringWitness(context);
        }
        
        /// <summary>
        /// witness_partner_equal
        /// 	 : EQUAL
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitWitness_partner_equal(TSqlParser.Witness_partner_equalContext context)
        {
            return new AstWitnessPartnerEqual(context);
        }
        
        /// <summary>
        /// partner_option
        /// 	 : witness_partner_equal  partner_server
        /// 	 | FAILOVER
        /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
        /// 	 | OFF
        /// 	 | RESUME
        /// 	 | SAFETY  FULL OFF
        /// 	 | SUSPEND
        /// 	 | TIMEOUT  DECIMAL
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPartner_option(TSqlParser.Partner_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerOption(context, list);
        }
        
        /// <summary>
        /// witness_option
        /// 	 : witness_partner_equal  witness_server
        /// 	 | OFF
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitWitness_option(TSqlParser.Witness_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWitnessOption(context, list);
        }
        
        /// <summary>
        /// partner_server
        /// 	 : partner_server_tcp_prefix  host  mirroring_host_port_seperator  port_number
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPartner_server(TSqlParser.Partner_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerServer(context, list);
        }
        
        /// <summary>
        /// mirroring_host_port_seperator
        /// 	 : COLON
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitMirroring_host_port_seperator(TSqlParser.Mirroring_host_port_seperatorContext context)
        {
            return new AstMirroringHostPortSeperator(context);
        }
        
        /// <summary>
        /// partner_server_tcp_prefix
        /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPartner_server_tcp_prefix(TSqlParser.Partner_server_tcp_prefixContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartnerServerTcpPrefix(context, list);
        }
        
        /// <summary>
        /// port_number
        /// 	 : 
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPort_number(TSqlParser.Port_numberContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPortNumber(context, list);
        }
        
        /// <summary>
        /// host
        /// 	 : id_  DOT  host
        /// 	 | id_  DOT id_
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitHost(TSqlParser.HostContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHost(context, list);
        }
        
        /// <summary>
        /// date_correlation_optimization_option
        /// 	 : DATE_CORRELATION_OPTIMIZATION  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDate_correlation_optimization_option(TSqlParser.Date_correlation_optimization_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDateCorrelationOptimizationOption(context, list);
        }
        
        /// <summary>
        /// db_encryption_option
        /// 	 : ENCRYPTION  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDb_encryption_option(TSqlParser.Db_encryption_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbEncryptionOption(context, list);
        }
        
        /// <summary>
        /// db_state_option
        /// 	 : ONLINE OFFLINE EMERGENCY
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitDb_state_option(TSqlParser.Db_state_optionContext context)
        {
            return new AstDbStateOption(context, context.GetText());
        }
        
        /// <summary>
        /// db_update_option
        /// 	 : READ_ONLY
        /// 	 | READ_WRITE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitDb_update_option(TSqlParser.Db_update_optionContext context)
        {
            return new AstDbUpdateOption(context, context.GetText());
        }
        
        /// <summary>
        /// db_user_access_option
        /// 	 : SINGLE_USER
        /// 	 | RESTRICTED_USER
        /// 	 | MULTI_USER
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitDb_user_access_option(TSqlParser.Db_user_access_optionContext context)
        {
            return new AstDbUserAccessOption(context, context.GetText());
        }
        
        /// <summary>
        /// delayed_durability_option
        /// 	 : DELAYED_DURABILITY  EQUAL  DISABLED ALLOWED FORCED
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDelayed_durability_option(TSqlParser.Delayed_durability_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDelayedDurabilityOption(context, list);
        }
        
        /// <summary>
        /// external_access_option
        /// 	 : DB_CHAINING  on_off
        /// 	 | TRUSTWORTHY  on_off
        /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// 	 | NESTED_TRIGGERS  EQUAL  on_off
        /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExternal_access_option(TSqlParser.External_access_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExternalAccessOption(context, list);
        }
        
        /// <summary>
        /// id_or_string
        /// 	 : id_
        /// 	 | STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitId_or_string(TSqlParser.Id_or_stringContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIdOrString(context, list);
        }
        
        /// <summary>
        /// hadr_options
        /// 	 : HADR  AVAILABILITY  GROUP  EQUAL  group_name OFF SUSPEND RESUME
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitHadr_options(TSqlParser.Hadr_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHadrOptions(context, list);
        }
        
        /// <summary>
        /// mixed_page_allocation_option
        /// 	 : MIXED_PAGE_ALLOCATION  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitMixed_page_allocation_option(TSqlParser.Mixed_page_allocation_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMixedPageAllocationOption(context, list);
        }
        
        /// <summary>
        /// parameterization_option
        /// 	 : PARAMETERIZATION  SIMPLE FORCED
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitParameterization_option(TSqlParser.Parameterization_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstParameterizationOption(context, list);
        }
        
        /// <summary>
        /// recovery_option
        /// 	 : RECOVERY  FULL BULK_LOGGED SIMPLE
        /// 	 | TORN_PAGE_DETECTION  on_off
        /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
        /// 	 | PAGE_VERIFY  CHECKSUM TORN_PAGE_DETECTION NONE
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitRecovery_option(TSqlParser.Recovery_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRecoveryOption(context, list);
        }
        
        /// <summary>
        /// service_broker_option
        /// 	 : ENABLE_BROKER
        /// 	 | DISABLE_BROKER
        /// 	 | NEW_BROKER
        /// 	 | ERROR_BROKER_CONVERSATIONS
        /// 	 | HONOR_BROKER_PRIORITY  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitService_broker_option(TSqlParser.Service_broker_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServiceBrokerOption(context, list);
        }
        
        /// <summary>
        /// snapshot_option
        /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
        /// 	 | READ_COMMITTED_SNAPSHOT  on_off
        /// 	 | 
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSnapshot_option(TSqlParser.Snapshot_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSnapshotOption(context, list);
        }
        
        /// <summary>
        /// sql_option
        /// 	 : ANSI_NULL_DEFAULT  on_off
        /// 	 | ANSI_NULLS  on_off
        /// 	 | ANSI_PADDING  on_off
        /// 	 | ANSI_WARNINGS  on_off
        /// 	 | ARITHABORT  on_off
        /// 	 | COMPATIBILITY_LEVEL  EQUAL  DECIMAL
        /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
        /// 	 | NUMERIC_ROUNDABORT  on_off
        /// 	 | QUOTED_IDENTIFIER  on_off
        /// 	 | RECURSIVE_TRIGGERS  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSql_option(TSqlParser.Sql_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSqlOption(context, list);
        }
        
        /// <summary>
        /// target_recovery_time_option
        /// 	 : TARGET_RECOVERY_TIME  EQUAL  DECIMAL  SECONDS MINUTES
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTarget_recovery_time_option(TSqlParser.Target_recovery_time_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTargetRecoveryTimeOption(context, list);
        }
        
        /// <summary>
        /// termination
        /// 	 : ROLLBACK  AFTER  
        /// 	 | ROLLBACK  IMMEDIATE
        /// 	 | NO_WAIT
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTermination(TSqlParser.TerminationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTermination(context, list);
        }
        
        /// <summary>
        /// drop_index
        /// 	 : DROP  INDEX  IF  EXISTS?  drop_relational_or_xml_or_spatial_indexs drop_backward_compatible_indexs  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_index(TSqlParser.Drop_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropIndex(context, list);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_indexs
        /// 	 : drop_relational_or_xml_or_spatial_index  COMMA  drop_relational_or_xml_or_spatial_index*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_relational_or_xml_or_spatial_indexs(TSqlParser.Drop_relational_or_xml_or_spatial_indexsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRelationalOrXmlOrSpatialIndexs(context, list);
        }
        
        /// <summary>
        /// drop_backward_compatible_indexs
        /// 	 : drop_backward_compatible_index  COMMA  drop_backward_compatible_index*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_backward_compatible_indexs(TSqlParser.Drop_backward_compatible_indexsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropBackwardCompatibleIndexs(context, list);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_index
        /// 	 : index_name  ON  full_table_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_relational_or_xml_or_spatial_index(TSqlParser.Drop_relational_or_xml_or_spatial_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropRelationalOrXmlOrSpatialIndex(context, list);
        }
        
        /// <summary>
        /// drop_backward_compatible_index
        /// 	 : schema_name  DOT?  table_or_view_name  DOT  index_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_backward_compatible_index(TSqlParser.Drop_backward_compatible_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropBackwardCompatibleIndex(context, list);
        }
        
        /// <summary>
        /// drop_procedure
        /// 	 : DROP    IF  EXISTS?  func_proc_name_schemas  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_procedure(TSqlParser.Drop_procedureContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropProcedure(context, list);
        }
        
        /// <summary>
        /// func_proc_name_schemas
        /// 	 : func_proc_name_schema  COMMA  func_proc_name_schema*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFunc_proc_name_schemas(TSqlParser.Func_proc_name_schemasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncProcNameSchemas(context, list);
        }
        
        /// <summary>
        /// drop_dml_trigger
        /// 	 : DROP  TRIGGER  IF  EXISTS?  simple_names  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_dml_trigger(TSqlParser.Drop_dml_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDmlTrigger(context, list);
        }
        
        /// <summary>
        /// drop_ddl_trigger
        /// 	 : DROP  TRIGGER  IF  EXISTS?  simple_names  ON  DATABASE ALL  SERVER  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_ddl_trigger(TSqlParser.Drop_ddl_triggerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropDdlTrigger(context, list);
        }
        
        /// <summary>
        /// simple_names
        /// 	 : simple_name  COMMA  simple_name*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSimple_names(TSqlParser.Simple_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSimpleNames(context, list);
        }
        
        /// <summary>
        /// table_names
        /// 	 : table_name  COMMA  table_name*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTable_names(TSqlParser.Table_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableNames(context, list);
        }
        
        /// <summary>
        /// drop_function
        /// 	 : DROP  FUNCTION  IF  EXISTS?  func_proc_name_schemas  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_function(TSqlParser.Drop_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropFunction(context, list);
        }
        
        /// <summary>
        /// drop_statistics
        /// 	 : DROP  STATISTICS  COMMA?  table_name  DOT?  +  SEMI
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_statistics(TSqlParser.Drop_statisticsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropStatistics(context, list);
        }
        
        /// <summary>
        /// drop_table
        /// 	 : DROP  TABLE  IF  EXISTS?  table_names  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_table(TSqlParser.Drop_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropTable(context, list);
        }
        
        /// <summary>
        /// drop_view
        /// 	 : DROP  VIEW  IF  EXISTS?  simple_names  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDrop_view(TSqlParser.Drop_viewContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropView(context, list);
        }
        
        /// <summary>
        /// create_type
        /// 	 : CREATE  TYPE    FROM  data_type  default_value?  AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_type(TSqlParser.Create_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateType(context, list);
        }
        
        /// <summary>
        /// drop_type
        /// 	 : DROP  TYPE  IF  EXISTS?  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDrop_type(TSqlParser.Drop_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDropType(context, list);
        }
        
        /// <summary>
        /// openquery
        /// 	 : OPENQUERY  LR_BRACKET  linked_server  COMMA    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOpenquery(TSqlParser.OpenqueryContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenquery(context, list);
        }
        
        /// <summary>
        /// opendatasource
        /// 	 : OPENDATASOURCE  LR_BRACKET    COMMA    RR_BRACKET  DOT  database_name?  DOT  schema_name?  DOT  tableName
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOpendatasource(TSqlParser.OpendatasourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpendatasource(context, list);
        }
        
        /// <summary>
        /// declare_statement
        /// 	 : DECLARE  LOCAL_ID  AS?  table_type_definition table_name  SEMI?
        /// 	 | DECLARE    SEMI?
        /// 	 | DECLARE  LOCAL_ID  AS?  xml_type_definition  SEMI?
        /// 	 | WITH  XMLNAMESPACES  LR_BRACKET    RR_BRACKET  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDeclare_statement(TSqlParser.Declare_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareStatement(context, list);
        }
        
        /// <summary>
        /// declare_locals
        /// 	 : declare_local  COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDeclare_locals(TSqlParser.Declare_localsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareLocals(context, list);
        }
        
        /// <summary>
        /// xml_declarations
        /// 	 : xml_declaration  COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitXml_declarations(TSqlParser.Xml_declarationsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlDeclarations(context, list);
        }
        
        /// <summary>
        /// xml_declaration
        /// 	 :   AS  id_
        /// 	 | DEFAULT  STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitXml_declaration(TSqlParser.Xml_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlDeclaration(context, list);
        }
        
        /// <summary>
        /// cursor_statement
        /// 	 : CLOSE  GLOBAL?  cursor_name  SEMI?
        /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name  SEMI?
        /// 	 | declare_cursor
        /// 	 | fetch_cursor
        /// 	 | OPEN  GLOBAL?  cursor_name  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCursor_statement(TSqlParser.Cursor_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCursorStatement(context, list);
        }
        
        /// <summary>
        /// backup_database
        /// 	 : BACKUP  DATABASE  database_name  READ_WRITE_FILEGROUPS  COMMA?  FILE FILEGROUP  EQUAL  *?  COMMA?  FILE FILEGROUP  EQUAL  *  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBackup_database(TSqlParser.Backup_databaseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupDatabase(context, list);
        }
        
        /// <summary>
        /// backup_log
        /// 	 : BACKUP  LOG  database_name  TO  COMMA?  logical_device_name+ TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_+  MIRROR  TO  COMMA?  logical_device_name++ MIRROR  TO  COMMA?  DISK TAPE URL  EQUAL  STRING id_++?  WITH  COMMA?  DIFFERENTIAL COMMA?  COPY_ONLY COMMA?  COMPRESSION NO_COMPRESSION COMMA?  DESCRIPTION  EQUAL  STRING id_ COMMA?  NAME  EQUAL  backup_name COMMA?  CREDENTIAL COMMA?  FILE_SNAPSHOT COMMA?  EXPIREDATE  EQUAL  STRING id_ RETAINDAYS  EQUAL  DECIMAL id_ COMMA?  NOINIT INIT COMMA?  NOSKIP SKIP_KEYWORD COMMA?  NOFORMAT FORMAT COMMA?  MEDIADESCRIPTION  EQUAL  STRING id_ COMMA?  MEDIANAME  EQUAL   COMMA?  BLOCKSIZE  EQUAL  DECIMAL id_ COMMA?  BUFFERCOUNT  EQUAL  DECIMAL id_ COMMA?  MAXTRANSFER  EQUAL  DECIMAL id_ COMMA?  NO_CHECKSUM CHECKSUM COMMA?  STOP_ON_ERROR CONTINUE_AFTER_ERROR COMMA?  RESTART COMMA?  STATS  EQUAL  ? COMMA?  REWIND NOREWIND COMMA?  LOAD NOUNLOAD COMMA?  NORECOVERY STANDBY  EQUAL   COMMA?  NO_TRUNCATE COMMA?  ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  AES_128 AES_192 AES_256 TRIPLE_DES_3KEY  COMMA  SERVER  CERTIFICATE  EQUAL  encryptor_name SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_name*?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBackup_log(TSqlParser.Backup_logContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupLog(context, list);
        }
        
        /// <summary>
        /// backup_certificate
        /// 	 : BACKUP  CERTIFICATE  certificate_name  TO  FILE  EQUAL    WITH  PRIVATE  KEY  LR_BRACKET  COMMA?  FILE  EQUAL   COMMA?  ENCRYPTION  BY  PASSWORD  EQUAL   COMMA?  DECRYPTION  BY  PASSWORD  EQUAL  +  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBackup_certificate(TSqlParser.Backup_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupCertificate(context, list);
        }
        
        /// <summary>
        /// backup_master_key
        /// 	 : BACKUP  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBackup_master_key(TSqlParser.Backup_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupMasterKey(context, list);
        }
        
        /// <summary>
        /// backup_service_master_key
        /// 	 : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL    ENCRYPTION  BY  PASSWORD  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBackup_service_master_key(TSqlParser.Backup_service_master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupServiceMasterKey(context, list);
        }
        
        /// <summary>
        /// kill_statement
        /// 	 : KILL  kill_process kill_query_notification kill_stats_job
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitKill_statement(TSqlParser.Kill_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillStatement(context, list);
        }
        
        /// <summary>
        /// kill_process
        /// 	 :  UOW  WITH  STATUSONLY?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitKill_process(TSqlParser.Kill_processContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillProcess(context, list);
        }
        
        /// <summary>
        /// kill_query_notification
        /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  ALL 
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitKill_query_notification(TSqlParser.Kill_query_notificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillQueryNotification(context, list);
        }
        
        /// <summary>
        /// kill_stats_job
        /// 	 : STATS  JOB  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitKill_stats_job(TSqlParser.Kill_stats_jobContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKillStatsJob(context, list);
        }
        
        /// <summary>
        /// execute_statement
        /// 	 : EXECUTE  execute_body  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExecute_statement(TSqlParser.Execute_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatement(context, list);
        }
        
        /// <summary>
        /// execute_body_batch
        /// 	 : func_proc_name_server_database_schema  execute_statement_args?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExecute_body_batch(TSqlParser.Execute_body_batchContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteBodyBatch(context, list);
        }
        
        /// <summary>
        /// execute_body
        /// 	 :   EQUAL?  func_proc_name_server_database_schema execute_var_string  execute_statement_arg?
        /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  AS?  LOGIN USER  EQUAL  STRING?  AT_KEYWORD  linked_server?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExecute_body(TSqlParser.Execute_bodyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteBody(context, list);
        }
        
        /// <summary>
        /// execute_var_strings
        /// 	 : execute_var_string  COMMA  execute_var_string*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExecute_var_strings(TSqlParser.Execute_var_stringsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteVarStrings(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg
        /// 	 : execute_statement_arg_unnamed  COMMA  execute_statement_arg*
        /// 	 | execute_statement_arg_nameds
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExecute_statement_arg(TSqlParser.Execute_statement_argContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArg(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_nameds
        /// 	 : execute_statement_arg_named  COMMA  execute_statement_arg_named*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExecute_statement_arg_nameds(TSqlParser.Execute_statement_arg_namedsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgNameds(context, list);
        }
        
        /// <summary>
        /// execute_statement_args
        /// 	 : execute_statement_arg  COMMA  execute_statement_arg*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExecute_statement_args(TSqlParser.Execute_statement_argsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgs(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_named
        /// 	 :   EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExecute_statement_arg_named(TSqlParser.Execute_statement_arg_namedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgNamed(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_unnamed
        /// 	 : 
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExecute_statement_arg_unnamed(TSqlParser.Execute_statement_arg_unnamedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteStatementArgUnnamed(context, list);
        }
        
        /// <summary>
        /// execute_parameter
        /// 	 : constant LOCAL_ID  OUTPUT OUT? id_ DEFAULT NULL_
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExecute_parameter(TSqlParser.Execute_parameterContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteParameter(context, list);
        }
        
        /// <summary>
        /// execute_var_string
        /// 	 : LOCAL_ID  OUTPUT OUT?  PLUS  LOCAL_ID  PLUS  execute_var_string??
        /// 	 | STRING  PLUS  LOCAL_ID  PLUS  execute_var_string??
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExecute_var_string(TSqlParser.Execute_var_stringContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteVarString(context, list);
        }
        
        /// <summary>
        /// security_statement
        /// 	 : execute_clause  SEMI?
        /// 	 | GRANT  ALL  PRIVILEGES? grant_permission  LR_BRACKET  column_name_list  RR_BRACKET?  ON  class_type_for_grant  DOUBLE_COLON?  ?  TO  to_principal_rincipal_ids  WITH  GRANT  OPTION?  AS  ?  SEMI?
        /// 	 | REVERT  LR_BRACKET  WITH  COOKIE  EQUAL  LOCAL_ID  RR_BRACKET?  SEMI?
        /// 	 | open_key
        /// 	 | close_key
        /// 	 | create_key
        /// 	 | create_certificate
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSecurity_statement(TSqlParser.Security_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSecurityStatement(context, list);
        }
        
        /// <summary>
        /// to_principal_rincipal_ids
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTo_principal_rincipal_ids(TSqlParser.To_principal_rincipal_idsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstToPrincipalRincipalIds(context, list);
        }
        
        /// <summary>
        /// principal_id
        /// 	 : 
        /// 	 | id_
        /// 	 | PUBLIC
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPrincipal_id(TSqlParser.Principal_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrincipalId(context, list);
        }
        
        /// <summary>
        /// create_certificate
        /// 	 : CREATE  CERTIFICATE  certificate_name  AUTHORIZATION  user_name?  FROM  existing_keys generate_new_keys  ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_certificate(TSqlParser.Create_certificateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateCertificate(context, list);
        }
        
        /// <summary>
        /// existing_keys
        /// 	 : ASSEMBLY  assembly_name
        /// 	 | EXECUTABLE?  FILE  EQUAL    WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExisting_keys(TSqlParser.Existing_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistingKeys(context, list);
        }
        
        /// <summary>
        /// private_key_options
        /// 	 : FILE BINARY  EQUAL    COMMA  DECRYPTION ENCRYPTION  BY  PASSWORD  EQUAL  ?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPrivate_key_options(TSqlParser.Private_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrivateKeyOptions(context, list);
        }
        
        /// <summary>
        /// generate_new_keys
        /// 	 : ENCRYPTION  BY  PASSWORD  EQUAL  ?  WITH  SUBJECT  EQUAL    COMMA  date_options*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGenerate_new_keys(TSqlParser.Generate_new_keysContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGenerateNewKeys(context, list);
        }
        
        /// <summary>
        /// date_options
        /// 	 : START_DATE EXPIRY_DATE  EQUAL  STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDate_options(TSqlParser.Date_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDateOptions(context, list);
        }
        
        /// <summary>
        /// open_key
        /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_name  DECRYPTION  BY  decryption_mechanism
        /// 	 | OPEN  MASTER  KEY  DECRYPTION  BY  PASSWORD  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOpen_key(TSqlParser.Open_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenKey(context, list);
        }
        
        /// <summary>
        /// close_key
        /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_name
        /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
        /// 	 | CLOSE  MASTER  KEY
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitClose_key(TSqlParser.Close_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCloseKey(context, list);
        }
        
        /// <summary>
        /// create_key
        /// 	 : CREATE  MASTER  KEY  ENCRYPTION  BY  PASSWORD  EQUAL  
        /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_name  AUTHORIZATION  user_name?  FROM  PROVIDER  provider_name?  WITH  key_options ENCRYPTION  BY  encryption_mechanism  COMMA?+
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_key(TSqlParser.Create_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateKey(context, list);
        }
        
        /// <summary>
        /// key_options
        /// 	 : KEY_SOURCE  EQUAL  
        /// 	 | ALGORITHM  EQUAL  algorithm
        /// 	 | IDENTITY_VALUE  EQUAL  
        /// 	 | PROVIDER_KEY_NAME  EQUAL  
        /// 	 | CREATION_DISPOSITION  EQUAL  CREATE_NEW OPEN_EXISTING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitKey_options(TSqlParser.Key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstKeyOptions(context, list);
        }
        
        /// <summary>
        /// algorithm
        /// 	 : DES
        /// 	 | TRIPLE_DES
        /// 	 | TRIPLE_DES_3KEY
        /// 	 | RC2
        /// 	 | RC4
        /// 	 | RC4_128
        /// 	 | DESX
        /// 	 | AES_128
        /// 	 | AES_192
        /// 	 | AES_256
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitAlgorithm(TSqlParser.AlgorithmContext context)
        {
            return new AstAlgorithm(context, context.GetText());
        }
        
        /// <summary>
        /// encryption_mechanism
        /// 	 : CERTIFICATE  certificate_name
        /// 	 | ASYMMETRIC  KEY  asym_key_name
        /// 	 | SYMMETRIC  KEY  symmetric_key_name
        /// 	 | PASSWORD  EQUAL  STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEncryption_mechanism(TSqlParser.Encryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEncryptionMechanism(context, list);
        }
        
        /// <summary>
        /// decryption_mechanism
        /// 	 : CERTIFICATE  certificate_name  WITH  PASSWORD  EQUAL  STRING?
        /// 	 | ASYMMETRIC  KEY  asym_key_name  WITH  PASSWORD  EQUAL  STRING?
        /// 	 | SYMMETRIC  KEY  symmetric_key_name
        /// 	 | PASSWORD  EQUAL  STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDecryption_mechanism(TSqlParser.Decryption_mechanismContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDecryptionMechanism(context, list);
        }
        
        /// <summary>
        /// grant_permission
        /// 	 : ADMINISTER  BULK  OPERATIONS DATABASE  BULK  OPERATIONS
        /// 	 | ALTER  ANY  APPLICATION  ROLE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE COLUMN  ENCRYPTION  KEY MASTER  KEY CONNECTION CONTRACT CREDENTIAL DATABASE  AUDIT DDL  TRIGGER EVENT  NOTIFICATION SESSION SCOPED  CONFIGURATION? DATASPACE ENDPOINT EVENT  NOTIFICATION SESSION EXTERNAL  DATA  SOURCE FILE  FORMAT LIBRARY FULLTEXT  CATALOG LINKED  SERVER LOGIN MASK MESSAGE  TYPE REMOTE  SERVICE  BINDING ROLE ROUTE SCHEMA SECURITY  POLICY SERVER  AUDIT ROLE SERVICE SYMMETRIC  KEY USER RESOURCES SERVER  STATE SETTINGS TRACE?
        /// 	 | AUTHENTICATE  SERVER?
        /// 	 | BACKUP  DATABASE LOG
        /// 	 | CHECKPOINT
        /// 	 | CONNECT  ANY  DATABASE REPLICATION SQL?
        /// 	 | CONTROL  SERVER?
        /// 	 | CREATE  AGGREGATE ANY  DATABASE ASSEMBLY ASYMMETRIC  KEY AVAILABILITY  GROUP CERTIFICATE CONTRACT DATABASE  DDL  EVENT  NOTIFICATION? DDL  EVENT  NOTIFICATION DEFAULT ENDPOINT EXTERNAL  LIBRARY FULLTEXT  CATALOG FUNCTION MESSAGE  TYPE PROCEDURE QUEUE REMOTE  SERVICE  BINDING ROLE ROUTE RULE SCHEMA SEQUENCE SERVER  ROLE SERVICE SYMMETRIC  KEY SYNONYM TABLE TRACE  EVENT  NOTIFICATION TYPE VIEW XML  SCHEMA  COLLECTION
        /// 	 | DELETE
        /// 	 | EXECUTE  ANY  EXTERNAL  SCRIPT?
        /// 	 | EXTERNAL  ACCESS  ASSEMBLY
        /// 	 | IMPERSONATE  ANY  LOGIN?
        /// 	 | INSERT
        /// 	 | KILL  DATABASE  CONNECTION
        /// 	 | RECEIVE
        /// 	 | REFERENCES
        /// 	 | SELECT  ALL  USER  SECURABLES?
        /// 	 | SEND
        /// 	 | SHOWPLAN
        /// 	 | SHUTDOWN
        /// 	 | SUBSCRIBE  QUERY  NOTIFICATIONS
        /// 	 | TAKE  OWNERSHIP
        /// 	 | UNMASK
        /// 	 | UNSAFE  ASSEMBLY
        /// 	 | UPDATE
        /// 	 | VIEW  ANY  DATABASE DEFINITION COLUMN  ENCRYPTION MASTER  KEY  DEFINITION CHANGE  TRACKING DATABASE  STATE DEFINITION SERVER  STATE
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGrant_permission(TSqlParser.Grant_permissionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGrantPermission(context, list);
        }
        
        /// <summary>
        /// set_statement
        /// 	 : SET  LOCAL_ID  DOT  ?  EQUAL  expression  SEMI?
        /// 	 | SET  LOCAL_ID  assignment_operator  expression  SEMI?
        /// 	 | SET  LOCAL_ID  EQUAL  CURSOR  declare_set_cursor_common  FOR  READ  ONLY UPDATE  OF  column_name_list??  SEMI?
        /// 	 | set_special
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSet_statement(TSqlParser.Set_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetStatement(context, list);
        }
        
        /// <summary>
        /// transaction_statement
        /// 	 : BEGIN  DISTRIBUTED  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
        /// 	 | BEGIN  TRAN TRANSACTION  id_ LOCAL_ID  WITH  MARK  STRING??  SEMI?
        /// 	 | COMMIT  TRAN TRANSACTION  id_ LOCAL_ID  WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  OFF ON  RR_BRACKET??  SEMI?
        /// 	 | COMMIT  WORK?  SEMI?
        /// 	 | COMMIT  id_
        /// 	 | ROLLBACK  id_
        /// 	 | ROLLBACK  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
        /// 	 | ROLLBACK  WORK?  SEMI?
        /// 	 | SAVE  TRAN TRANSACTION  id_ LOCAL_ID?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTransaction_statement(TSqlParser.Transaction_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTransactionStatement(context, list);
        }
        
        /// <summary>
        /// go_statement
        /// 	 : GO  ?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGo_statement(TSqlParser.Go_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGoStatement(context, list);
        }
        
        /// <summary>
        /// use_statement
        /// 	 : USE  database_name  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUse_statement(TSqlParser.Use_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUseStatement(context, list);
        }
        
        /// <summary>
        /// setuser_statement
        /// 	 : SETUSER  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSetuser_statement(TSqlParser.Setuser_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetuserStatement(context, list);
        }
        
        /// <summary>
        /// reconfigure_statement
        /// 	 : RECONFIGURE  WITH  OVERRIDE?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitReconfigure_statement(TSqlParser.Reconfigure_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstReconfigureStatement(context, list);
        }
        
        /// <summary>
        /// shutdown_statement
        /// 	 : SHUTDOWN  WITH  NOWAIT?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitShutdown_statement(TSqlParser.Shutdown_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstShutdownStatement(context, list);
        }
        
        /// <summary>
        /// checkpoint_statement
        /// 	 : CHECKPOINT  ?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCheckpoint_statement(TSqlParser.Checkpoint_statementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCheckpointStatement(context, list);
        }
        
        /// <summary>
        /// dbcc_special
        /// 	 : DBCC  SHRINKLOG  LR_BRACKET  SIZE  EQUAL  constant_expression id_ DEFAULT  RR_BRACKET?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDbcc_special(TSqlParser.Dbcc_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccSpecial(context, list);
        }
        
        /// <summary>
        /// dbcc_clause
        /// 	 : DBCC    LR_BRACKET  expression_list  RR_BRACKET?  WITH  dbcc_options?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDbcc_clause(TSqlParser.Dbcc_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccClause(context, list);
        }
        
        /// <summary>
        /// dbcc_command
        /// 	 : simple_id
        /// 	 | keyword
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDbcc_command(TSqlParser.Dbcc_commandContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccCommand(context, list);
        }
        
        /// <summary>
        /// dbcc_options
        /// 	 : simple_id  COMMA  simple_id?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDbcc_options(TSqlParser.Dbcc_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDbccOptions(context, list);
        }
        
        /// <summary>
        /// execute_clause
        /// 	 : EXECUTE  AS  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExecute_clause(TSqlParser.Execute_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExecuteClause(context, list);
        }
        
        /// <summary>
        /// declare_local
        /// 	 : LOCAL_ID  AS?  data_type  EQUAL  expression?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDeclare_local(TSqlParser.Declare_localContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareLocal(context, list);
        }
        
        /// <summary>
        /// table_type_definition
        /// 	 : TABLE  LR_BRACKET  column_def_table_constraints  COMMA?  table_type_indices*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTable_type_definition(TSqlParser.Table_type_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableTypeDefinition(context, list);
        }
        
        /// <summary>
        /// table_type_indices
        /// 	 : PRIMARY  KEY INDEX  id_  CLUSTERED NONCLUSTERED? UNIQUE  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_type_indices(TSqlParser.Table_type_indicesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableTypeIndices(context, list);
        }
        
        /// <summary>
        /// xml_type_definition
        /// 	 : XML  LR_BRACKET  CONTENT DOCUMENT?  xml_schema_collection  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitXml_type_definition(TSqlParser.Xml_type_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlTypeDefinition(context, list);
        }
        
        /// <summary>
        /// xml_schema_collection
        /// 	 : ID  DOT  ID
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitXml_schema_collection(TSqlParser.Xml_schema_collectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// column_def_table_constraints
        /// 	 : column_def_table_constraint  COMMA?  column_def_table_constraint*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_def_table_constraints(TSqlParser.Column_def_table_constraintsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefTableConstraints(context, list);
        }
        
        /// <summary>
        /// column_def_table_constraint
        /// 	 : column_definition
        /// 	 | materialized_column_definition
        /// 	 | table_constraint
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumn_def_table_constraint(TSqlParser.Column_def_table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefTableConstraint(context, list);
        }
        
        /// <summary>
        /// column_definition
        /// 	 : id_  data_type AS  expression  PERSISTED?  column_definition_element*  column_index?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_definition(TSqlParser.Column_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefinition(context, list);
        }
        
        /// <summary>
        /// column_definition_element
        /// 	 : FILESTREAM
        /// 	 | COLLATE  collation_name
        /// 	 | SPARSE
        /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL    RR_BRACKET
        /// 	 | CONSTRAINT  constraint_name?  DEFAULT  
        /// 	 | IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
        /// 	 | NOT  FOR  REPLICATION
        /// 	 | GENERATED  ALWAYS  AS  ROW TRANSACTION_ID SEQUENCE_NUMBER  START END  HIDDEN_KEYWORD?
        /// 	 | ROWGUIDCOL
        /// 	 | ENCRYPTED  WITH  LR_BRACKET  COLUMN_ENCRYPTION_KEY  EQUAL    COMMA  ENCRYPTION_TYPE  EQUAL  DETERMINISTIC RANDOMIZED  COMMA  ALGORITHM  EQUAL    RR_BRACKET
        /// 	 | column_constraint
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumn_definition_element(TSqlParser.Column_definition_elementContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDefinitionElement(context, list);
        }
        
        /// <summary>
        /// column_modifier
        /// 	 : id_  add_drop  ROWGUIDCOL PERSISTED NOT  FOR  REPLICATION SPARSE HIDDEN_KEYWORD MASKED  WITH  FUNCTION  EQUAL  STRING LR_BRACKET  FUNCTION  EQUAL  STRING  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_modifier(TSqlParser.Column_modifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnModifier(context, list);
        }
        
        /// <summary>
        /// materialized_column_definition
        /// 	 : id_  COMPUTE AS  expression  MATERIALIZED NOT  MATERIALIZED?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitMaterialized_column_definition(TSqlParser.Materialized_column_definitionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMaterializedColumnDefinition(context, list);
        }
        
        /// <summary>
        /// column_constraint
        /// 	 : CONSTRAINT  constraint_name?  null_notnull PRIMARY  KEY UNIQUE  clustered?  primary_key_options FOREIGN  KEY?  foreign_key_options check_constraint
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumn_constraint(TSqlParser.Column_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnConstraint(context, list);
        }
        
        /// <summary>
        /// column_index
        /// 	 : INDEX  index_name?  create_table_index_options?  on_partition_or_filegroup?  FILESTREAM_ON  filestream_filegroup_or_partition_schema_name NULL_DOUBLE_QUOTE?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_index(TSqlParser.Column_indexContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnIndex(context, list);
        }
        
        /// <summary>
        /// on_partition_or_filegroup
        /// 	 : ON  partition_scheme_name  LR_BRACKET  partition_column_name  RR_BRACKET file_group_name DEFAULT_DOUBLE_QUOTE
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOn_partition_or_filegroup(TSqlParser.On_partition_or_filegroupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnPartitionOrFilegroup(context, list);
        }
        
        /// <summary>
        /// table_constraint
        /// 	 : CONSTRAINT  constraint_name?  PRIMARY  KEY UNIQUE  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options FOREIGN  KEY  LR_BRACKET    RR_BRACKET  foreign_key_options CONNECTION  LR_BRACKET  connection_node  COMMA  connection_node*  RR_BRACKET DEFAULT  LR_BRACKET?  STRING PLUS function_call DECIMAL+ NEXT  VALUE  FOR  table_name  RR_BRACKET?  FOR  id_ check_constraint
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_constraint(TSqlParser.Table_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableConstraint(context, list);
        }
        
        /// <summary>
        /// connection_node
        /// 	 :   TO  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitConnection_node(TSqlParser.Connection_nodeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConnectionNode(context, list);
        }
        
        /// <summary>
        /// primary_key_options
        /// 	 : WITH  FILLFACTOR  EQUAL  DECIMAL?  alter_table_index_options?  on_partition_or_filegroup?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPrimary_key_options(TSqlParser.Primary_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrimaryKeyOptions(context, list);
        }
        
        /// <summary>
        /// foreign_key_options
        /// 	 : REFERENCES  table_name  LR_BRACKET    RR_BRACKET  on_delete?  on_update?  NOT  FOR  REPLICATION?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitForeign_key_options(TSqlParser.Foreign_key_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstForeignKeyOptions(context, list);
        }
        
        /// <summary>
        /// check_constraint
        /// 	 : CHECK  NOT  FOR  REPLICATION?  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCheck_constraint(TSqlParser.Check_constraintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCheckConstraint(context, list);
        }
        
        /// <summary>
        /// on_delete
        /// 	 : ON  DELETE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOn_delete(TSqlParser.On_deleteContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnDelete(context, list);
        }
        
        /// <summary>
        /// on_update
        /// 	 : ON  UPDATE  NO  ACTION CASCADE SET  NULL_ SET  DEFAULT
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOn_update(TSqlParser.On_updateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOnUpdate(context, list);
        }
        
        /// <summary>
        /// alter_table_index_options
        /// 	 : WITH  LR_BRACKET  alter_table_index_option  COMMA  alter_table_index_option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAlter_table_index_options(TSqlParser.Alter_table_index_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTableIndexOptions(context, list);
        }
        
        /// <summary>
        /// alter_table_index_option
        /// 	 : PAD_INDEX  EQUAL  on_off
        /// 	 | FILLFACTOR  EQUAL  DECIMAL
        /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
        /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
        /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
        /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
        /// 	 | MAXDOP  EQUAL  
        /// 	 | DATA_COMPRESSION  EQUAL  NONE ROW PAGE COLUMNSTORE COLUMNSTORE_ARCHIVE  on_partitions?
        /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// 	 | distribution
        /// 	 | ONLINE  EQUAL  ON  LR_BRACKET  low_priority_lock_wait  RR_BRACKET? OFF
        /// 	 | RESUMABLE  EQUAL  on_off
        /// 	 | MAX_DURATION  EQUAL    MINUTES?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAlter_table_index_option(TSqlParser.Alter_table_index_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAlterTableIndexOption(context, list);
        }
        
        /// <summary>
        /// declare_cursor
        /// 	 : DECLARE  cursor_name  CURSOR  declare_set_cursor_common  FOR  UPDATE  OF  column_name_list??? sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  FOR  READ  ONLY UPDATE OF  column_name_list?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDeclare_cursor(TSqlParser.Declare_cursorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareCursor(context, list);
        }
        
        /// <summary>
        /// sensitive
        /// 	 : SEMI_SENSITIVE
        /// 	 | INSENSITIVE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitSensitive(TSqlParser.SensitiveContext context)
        {
            return new AstSensitive(context, context.GetText());
        }
        
        /// <summary>
        /// declare_set_cursor_common
        /// 	 : declare_set_cursor_common_partial*  FOR  select_statement_standalone
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDeclare_set_cursor_common(TSqlParser.Declare_set_cursor_commonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareSetCursorCommon(context, list);
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial
        /// 	 : local_global
        /// 	 | FORWARD_ONLY SCROLL
        /// 	 | STATIC KEYSET DYNAMIC FAST_FORWARD
        /// 	 | READ_ONLY SCROLL_LOCKS OPTIMISTIC
        /// 	 | TYPE_WARNING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDeclare_set_cursor_common_partial(TSqlParser.Declare_set_cursor_common_partialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeclareSetCursorCommonPartial(context, list);
        }
        
        /// <summary>
        /// fetch_cursor
        /// 	 : FETCH  fetch_cursor_strategy absolute_relative  expression?  FROM?  GLOBAL?  cursor_name  INTO  local_ids?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFetch_cursor(TSqlParser.Fetch_cursorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFetchCursor(context, list);
        }
        
        /// <summary>
        /// absolute_relative
        /// 	 : ABSOLUTE
        /// 	 | RELATIVE
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitAbsolute_relative(TSqlParser.Absolute_relativeContext context)
        {
            return new AstAbsoluteRelative(context, context.GetText());
        }
        
        /// <summary>
        /// fetch_cursor_strategy
        /// 	 : NEXT
        /// 	 | PRIOR
        /// 	 | FIRST
        /// 	 | LAST
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitFetch_cursor_strategy(TSqlParser.Fetch_cursor_strategyContext context)
        {
            return new AstFetchCursorStrategy(context, context.GetText());
        }
        
        /// <summary>
        /// local_ids
        /// 	 : LOCAL_ID  COMMA  LOCAL_ID*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitLocal_ids(TSqlParser.Local_idsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLocalIds(context, list);
        }
        
        /// <summary>
        /// set_special
        /// 	 : SET  id_  id_ constant_LOCAL_ID on_off  SEMI?
        /// 	 | SET  STATISTICS  IO TIME XML PROFILE  on_off  SEMI?
        /// 	 | SET  ROWCOUNT  LOCAL_ID DECIMAL  SEMI?
        /// 	 | SET  TEXTSIZE  DECIMAL  SEMI?
        /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  READ  UNCOMMITTED READ  COMMITTED REPEATABLE  READ SNAPSHOT SERIALIZABLE DECIMAL  SEMI?
        /// 	 | SET  IDENTITY_INSERT  table_name  on_off  SEMI?
        /// 	 | SET  special_list  COMMA  special_list*  on_off
        /// 	 | SET  modify_method
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSet_special(TSqlParser.Set_specialContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSetSpecial(context, list);
        }
        
        /// <summary>
        /// special_list
        /// 	 : ANSI_NULLS
        /// 	 | QUOTED_IDENTIFIER
        /// 	 | ANSI_PADDING
        /// 	 | ANSI_WARNINGS
        /// 	 | ANSI_DEFAULTS
        /// 	 | ANSI_NULL_DFLT_OFF
        /// 	 | ANSI_NULL_DFLT_ON
        /// 	 | ARITHABORT
        /// 	 | ARITHIGNORE
        /// 	 | CONCAT_NULL_YIELDS_NULL
        /// 	 | CURSOR_CLOSE_ON_COMMIT
        /// 	 | FMTONLY
        /// 	 | FORCEPLAN
        /// 	 | IMPLICIT_TRANSACTIONS
        /// 	 | NOCOUNT
        /// 	 | NOEXEC
        /// 	 | NUMERIC_ROUNDABORT
        /// 	 | PARSEONLY
        /// 	 | REMOTE_PROC_TRANSACTIONS
        /// 	 | SHOWPLAN_ALL
        /// 	 | SHOWPLAN_TEXT
        /// 	 | SHOWPLAN_XML
        /// 	 | XACT_ABORT
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitSpecial_list(TSqlParser.Special_listContext context)
        {
            return new AstSpecialList(context, context.GetText());
        }
        
        /// <summary>
        /// constant_LOCAL_ID
        /// 	 : constant
        /// 	 | LOCAL_ID
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitConstant_LOCAL_ID(TSqlParser.Constant_LOCAL_IDContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConstantLOCALID(context, list);
        }
        
        /// <summary>
        /// expression
        /// 	 : primitive_expression
        /// 	 | function_call
        /// 	 | expression  DOT  value_call query_call exist_call modify_call
        /// 	 | expression  DOT  hierarchyid_call
        /// 	 | expression  COLLATE  id_
        /// 	 | case_expression
        /// 	 | full_column_name
        /// 	 | bracket_expression
        /// 	 | unary_operator_expression
        /// 	 | expression    expression
        /// 	 | expression    expression
        /// 	 | expression  time_zone
        /// 	 | over_clause
        /// 	 | DOLLAR_ACTION
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExpression(TSqlParser.ExpressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpression(context, list);
        }
        
        /// <summary>
        /// parameter
        /// 	 : PLACEHOLDER
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitParameter(TSqlParser.ParameterContext context)
        {
            return new AstParameter(context);
        }
        
        /// <summary>
        /// time_zone
        /// 	 : AT_KEYWORD  TIME  ZONE  expression
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTime_zone(TSqlParser.Time_zoneContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTimeZone(context, list);
        }
        
        /// <summary>
        /// primitive_expression
        /// 	 : DEFAULT
        /// 	 | NULL_
        /// 	 | LOCAL_ID
        /// 	 | constant
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPrimitive_expression(TSqlParser.Primitive_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPrimitiveExpression(context, list);
        }
        
        /// <summary>
        /// case_expression
        /// 	 : CASE    switch_section+  ELSE  ?  END
        /// 	 | CASE  switch_search_condition_section+  ELSE  ?  END
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCase_expression(TSqlParser.Case_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCaseExpression(context, list);
        }
        
        /// <summary>
        /// unary_operator_expression
        /// 	 : BIT_NOT  expression
        /// 	 |   expression
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitUnary_operator_expression(TSqlParser.Unary_operator_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnaryOperatorExpression(context, list);
        }
        
        /// <summary>
        /// bracket_expression
        /// 	 : LR_BRACKET  expression  RR_BRACKET
        /// 	 | LR_BRACKET  subquery  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitBracket_expression(TSqlParser.Bracket_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBracketExpression(context, list);
        }
        
        /// <summary>
        /// constant_expression
        /// 	 : NULL_
        /// 	 | constant
        /// 	 | function_call
        /// 	 | LOCAL_ID
        /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitConstant_expression(TSqlParser.Constant_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConstantExpression(context, list);
        }
        
        /// <summary>
        /// with_expression
        /// 	 : WITH    COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitWith_expression(TSqlParser.With_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWithExpression(context, list);
        }
        
        /// <summary>
        /// common_table_expression
        /// 	 :   LR_BRACKET    RR_BRACKET?  AS  LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCommon_table_expression(TSqlParser.Common_table_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCommonTableExpression(context, list);
        }
        
        /// <summary>
        /// update_elem
        /// 	 : LOCAL_ID  EQUAL  full_column_name  EQUAL assignment_operator  expression
        /// 	 | full_column_name LOCAL_ID  EQUAL assignment_operator  expression
        /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitUpdate_elem(TSqlParser.Update_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElem(context, list);
        }
        
        /// <summary>
        /// update_elem_merge
        /// 	 : full_column_name LOCAL_ID  EQUAL assignment_operator  expression
        /// 	 | udt_column_name  DOT  method_name  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitUpdate_elem_merge(TSqlParser.Update_elem_mergeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdateElemMerge(context, list);
        }
        
        /// <summary>
        /// search_condition
        /// 	 : NOT*  predicate LR_BRACKET  search_condition  RR_BRACKET
        /// 	 | search_condition  AND  search_condition
        /// 	 | search_condition  OR  search_condition
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSearch_condition(TSqlParser.Search_conditionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSearchCondition(context, list);
        }
        
        /// <summary>
        /// predicate
        /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
        /// 	 | freetext_predicate
        /// 	 | expression  comparison_operator  expression
        /// 	 | expression  MULT_ASSIGN  expression
        /// 	 | expression  comparison_operator  ALL SOME ANY  LR_BRACKET  subquery  RR_BRACKET
        /// 	 | expression  NOT*  BETWEEN  expression  AND  expression
        /// 	 | expression  NOT*  IN  LR_BRACKET  subquery expression_list  RR_BRACKET
        /// 	 | expression  NOT*  LIKE  expression  ESCAPE  expression?
        /// 	 | expression  IS  null_notnull
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitPredicate(TSqlParser.PredicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicate(context, list);
        }
        
        /// <summary>
        /// query_expression
        /// 	 : query_specification LR_BRACKET  query_expression  RR_BRACKET  UNION  ALL?  query_expression?
        /// 	 | query_specification  select_order_by_clause?  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQuery_expression(TSqlParser.Query_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryExpression(context, list);
        }
        
        /// <summary>
        /// sql_union
        /// 	 : UNION  ALL? EXCEPT INTERSECT   LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSql_union(TSqlParser.Sql_unionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSqlUnion(context, list);
        }
        
        /// <summary>
        /// query_specification
        /// 	 : SELECT        INTO  ?  FROM  ?  WHERE  ?  GROUP  BY    groupBys_list GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET?  HAVING  ?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQuery_specification(TSqlParser.Query_specificationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQuerySpecification(context, list);
        }
        
        /// <summary>
        /// groupSet_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGroupSet_list(TSqlParser.GroupSet_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupSetList(context, list);
        }
        
        /// <summary>
        /// groupBys_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGroupBys_list(TSqlParser.GroupBys_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupBysList(context, list);
        }
        
        /// <summary>
        /// top_clause
        /// 	 : TOP  top_percent top_count  WITH  TIES?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTop_clause(TSqlParser.Top_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTopClause(context, list);
        }
        
        /// <summary>
        /// top_percent
        /// 	 :   PERCENT
        /// 	 | LR_BRACKET    RR_BRACKET  PERCENT
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTop_percent(TSqlParser.Top_percentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTopPercent(context, list);
        }
        
        /// <summary>
        /// top_count
        /// 	 : 
        /// 	 | LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTop_count(TSqlParser.Top_countContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTopCount(context, list);
        }
        
        /// <summary>
        /// order_by_clause
        /// 	 : ORDER  BY    COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOrder_by_clause(TSqlParser.Order_by_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOrderByClause(context, list);
        }
        
        /// <summary>
        /// select_order_by_clause
        /// 	 : order_by_clause  OFFSET      FETCH        ONLY??
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSelect_order_by_clause(TSqlParser.Select_order_by_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectOrderByClause(context, list);
        }
        
        /// <summary>
        /// for_clause
        /// 	 : FOR  BROWSE
        /// 	 | FOR  XML  RAW  LR_BRACKET  STRING  RR_BRACKET? AUTO  xml_common_directives*  COMMA  XMLDATA XMLSCHEMA  LR_BRACKET  STRING  RR_BRACKET??  COMMA  ELEMENTS  XSINIL ABSENT??
        /// 	 | FOR  XML  EXPLICIT  xml_common_directives*  COMMA  XMLDATA?
        /// 	 | FOR  XML  PATH  LR_BRACKET  STRING  RR_BRACKET?  xml_common_directives*  COMMA  ELEMENTS  XSINIL ABSENT??
        /// 	 | FOR  JSON  AUTO PATH  COMMA  ROOT  LR_BRACKET  STRING  RR_BRACKET INCLUDE_NULL_VALUES WITHOUT_ARRAY_WRAPPER*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFor_clause(TSqlParser.For_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstForClause(context, list);
        }
        
        /// <summary>
        /// xml_common_directives
        /// 	 : COMMA  BINARY_KEYWORD  BASE64 TYPE ROOT  LR_BRACKET  STRING  RR_BRACKET?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitXml_common_directives(TSqlParser.Xml_common_directivesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstXmlCommonDirectives(context, list);
        }
        
        /// <summary>
        /// order_by_expression
        /// 	 :    ?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOrder_by_expression(TSqlParser.Order_by_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOrderByExpression(context, list);
        }
        
        /// <summary>
        /// grouping_sets_item
        /// 	 : grouping_sets_list
        /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGrouping_sets_item(TSqlParser.Grouping_sets_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupingSetsItem(context, list);
        }
        
        /// <summary>
        /// grouping_sets_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGrouping_sets_list(TSqlParser.Grouping_sets_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupingSetsList(context, list);
        }
        
        /// <summary>
        /// option_clause
        /// 	 : OPTION  LR_BRACKET  option  COMMA  option*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOption_clause(TSqlParser.Option_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOptionClause(context, list);
        }
        
        /// <summary>
        /// option
        /// 	 : FAST  
        /// 	 | HASH ORDER  GROUP
        /// 	 | MERGE HASH CONCAT  UNION
        /// 	 | LOOP MERGE HASH  JOIN
        /// 	 | EXPAND  VIEWS
        /// 	 | FORCE  ORDER
        /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
        /// 	 | KEEP  PLAN
        /// 	 | KEEPFIXED  PLAN
        /// 	 | MAXDOP  
        /// 	 | MAXRECURSION  
        /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
        /// 	 | OPTIMIZE  FOR  UNKNOWN
        /// 	 | PARAMETERIZATION  SIMPLE FORCED
        /// 	 | RECOMPILE
        /// 	 | ROBUST  PLAN
        /// 	 | USE  PLAN  STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOption(TSqlParser.OptionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOption(context, list);
        }
        
        /// <summary>
        /// optimize_for_args
        /// 	 : optimize_for_arg  COMMA  optimize_for_arg*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOptimize_for_args(TSqlParser.Optimize_for_argsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOptimizeForArgs(context, list);
        }
        
        /// <summary>
        /// optimize_for_arg
        /// 	 : LOCAL_ID  UNKNOWN EQUAL  constant NULL_
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitOptimize_for_arg(TSqlParser.Optimize_for_argContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOptimizeForArg(context, list);
        }
        
        /// <summary>
        /// select_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSelect_list(TSqlParser.Select_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSelectList(context, list);
        }
        
        /// <summary>
        /// udt_method_arguments
        /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitUdt_method_arguments(TSqlParser.Udt_method_argumentsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUdtMethodArguments(context, list);
        }
        
        /// <summary>
        /// star_asterisk
        /// 	 : STAR
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitStar_asterisk(TSqlParser.Star_asteriskContext context)
        {
            return new AstStarAsterisk(context);
        }
        
        /// <summary>
        /// table_asterisk
        /// 	 : table_name  DOT  STAR
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTable_asterisk(TSqlParser.Table_asteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableAsterisk(context, list);
        }
        
        /// <summary>
        /// updated_asterisk
        /// 	 : INSERTED DELETED  DOT  STAR
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitUpdated_asterisk(TSqlParser.Updated_asteriskContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUpdatedAsterisk(context, list);
        }
        
        /// <summary>
        /// column_elem
        /// 	 : column_elem_target  as_column_alias?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_elem(TSqlParser.Column_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnElem(context, list);
        }
        
        /// <summary>
        /// column_elem_target
        /// 	 : full_column_name
        /// 	 | DOLLAR  IDENTITY
        /// 	 | DOLLAR  ROWGUID
        /// 	 | NULL_
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumn_elem_target(TSqlParser.Column_elem_targetContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnElemTarget(context, list);
        }
        
        /// <summary>
        /// udt_elem
        /// 	 : udt_column_name  DOT  non_static_attr  udt_method_arguments  as_column_alias?
        /// 	 | udt_column_name  DOUBLE_COLON  static_attr  udt_method_arguments?  as_column_alias?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitUdt_elem(TSqlParser.Udt_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUdtElem(context, list);
        }
        
        /// <summary>
        /// expression_elem
        /// 	 :     
        /// 	 |   as_column_alias?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExpression_elem(TSqlParser.Expression_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionElem(context, list);
        }
        
        /// <summary>
        /// expression_assign_elem
        /// 	 : LOCAL_ID  assignment_operator EQUAL  expression
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExpression_assign_elem(TSqlParser.Expression_assign_elemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionAssignElem(context, list);
        }
        
        /// <summary>
        /// table_sources
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_sources(TSqlParser.Table_sourcesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSources(context, list);
        }
        
        /// <summary>
        /// table_source
        /// 	 : table_source_item_joined
        /// 	 | LR_BRACKET  table_source  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_source(TSqlParser.Table_sourceContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSource(context, list);
        }
        
        /// <summary>
        /// table_source_item_joined
        /// 	 : table_source_item  
        /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_source_item_joined(TSqlParser.Table_source_item_joinedContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSourceItemJoined(context, list);
        }
        
        /// <summary>
        /// table_source_item
        /// 	 : full_table_name  deprecated_table_hint  as_table_alias
        /// 	 | full_table_name  as_table_alias?  with_table_hints deprecated_table_hint sybase_legacy_hints?
        /// 	 | rowset_function  as_table_alias?
        /// 	 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias  column_alias_list??
        /// 	 | change_table  as_table_alias?
        /// 	 | nodes_method  as_table_alias  column_alias_list??
        /// 	 | function_call  as_table_alias  column_alias_list??
        /// 	 |   as_table_alias?
        /// 	 |   DOT    as_table_alias  column_alias_list??
        /// 	 | open_xml
        /// 	 | open_json
        /// 	 | DOUBLE_COLON    as_table_alias?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_source_item(TSqlParser.Table_source_itemContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableSourceItem(context, list);
        }
        
        /// <summary>
        /// expression2
        /// 	 : expression  COMMA  expression?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExpression2(TSqlParser.Expression2Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpression2(context, list);
        }
        
        /// <summary>
        /// open_xml
        /// 	 : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  WITH  LR_BRACKET  schema_declaration  RR_BRACKET?  as_table_alias?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOpen_xml(TSqlParser.Open_xmlContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenXml(context, list);
        }
        
        /// <summary>
        /// open_json
        /// 	 : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  WITH  LR_BRACKET  json_declaration  RR_BRACKET?  as_table_alias?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOpen_json(TSqlParser.Open_jsonContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOpenJson(context, list);
        }
        
        /// <summary>
        /// json_declaration
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitJson_declaration(TSqlParser.Json_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstJsonDeclaration(context, list);
        }
        
        /// <summary>
        /// json_column_declaration
        /// 	 : column_declaration  AS  JSON?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitJson_column_declaration(TSqlParser.Json_column_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstJsonColumnDeclaration(context, list);
        }
        
        /// <summary>
        /// schema_declaration
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSchema_declaration(TSqlParser.Schema_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaDeclaration(context, list);
        }
        
        /// <summary>
        /// column_declaration
        /// 	 : id_  data_type  STRING?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_declaration(TSqlParser.Column_declarationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnDeclaration(context, list);
        }
        
        /// <summary>
        /// change_table_changes
        /// 	 : CHANGETABLE  LR_BRACKET  CHANGES    COMMA    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitChange_table_changes(TSqlParser.Change_table_changesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTableChanges(context, list);
        }
        
        /// <summary>
        /// change_table_version
        /// 	 : CHANGETABLE  LR_BRACKET  VERSION    COMMA    COMMA    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitChange_table_version(TSqlParser.Change_table_versionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstChangeTableVersion(context, list);
        }
        
        /// <summary>
        /// join_on
        /// 	 :      ?  JOIN    ON  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitJoin_on(TSqlParser.Join_onContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstJoinOn(context, list);
        }
        
        /// <summary>
        /// cross_join
        /// 	 : CROSS  JOIN  table_source
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCross_join(TSqlParser.Cross_joinContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCrossJoin(context, list);
        }
        
        /// <summary>
        /// apply_
        /// 	 :   APPLY  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitApply_(TSqlParser.Apply_Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstApply(context, list);
        }
        
        /// <summary>
        /// pivot
        /// 	 : PIVOT  pivot_clause  as_table_alias
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPivot(TSqlParser.PivotContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPivot(context, list);
        }
        
        /// <summary>
        /// unpivot
        /// 	 : UNPIVOT  unpivot_clause  as_table_alias
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUnpivot(TSqlParser.UnpivotContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnpivot(context, list);
        }
        
        /// <summary>
        /// pivot_clause
        /// 	 : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPivot_clause(TSqlParser.Pivot_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPivotClause(context, list);
        }
        
        /// <summary>
        /// unpivot_clause
        /// 	 : LR_BRACKET    FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUnpivot_clause(TSqlParser.Unpivot_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnpivotClause(context, list);
        }
        
        /// <summary>
        /// full_column_name_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFull_column_name_list(TSqlParser.Full_column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFullColumnNameList(context, list);
        }
        
        /// <summary>
        /// rowset_function
        /// 	 : OPENROWSET  LR_BRACKET    COMMA    COMMA    RR_BRACKET
        /// 	 | OPENROWSET  LR_BRACKET  BULK    COMMA  bulk_options id_  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitRowset_function(TSqlParser.Rowset_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRowsetFunction(context, list);
        }
        
        /// <summary>
        /// bulk_options
        /// 	 : bulk_option  COMMA  bulk_option*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBulk_options(TSqlParser.Bulk_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBulkOptions(context, list);
        }
        
        /// <summary>
        /// bulk_option
        /// 	 : id_  EQUAL  
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBulk_option(TSqlParser.Bulk_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBulkOption(context, list);
        }
        
        /// <summary>
        /// derived_table
        /// 	 : subquery
        /// 	 | LR_BRACKET  subquery  UNION  ALL  subquery*  RR_BRACKET
        /// 	 | table_value_constructor
        /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDerived_table(TSqlParser.Derived_tableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDerivedTable(context, list);
        }
        
        /// <summary>
        /// partition_function
        /// 	 : database_name  DOT?  DOLLAR_PARTITION  DOT  function_name  LR_BRACKET  expression  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPartition_function(TSqlParser.Partition_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartitionFunction(context, list);
        }
        
        /// <summary>
        /// freetext_function
        /// 	 : CONTAINSTABLE FREETEXTTABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  COMMA  expression?  RR_BRACKET
        /// 	 | SEMANTICSIMILARITYTABLE SEMANTICKEYPHRASETABLE  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
        /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  table_name  COMMA  full_column_name  COMMA  expression  COMMA  full_column_name  COMMA  expression  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFreetext_function(TSqlParser.Freetext_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFreetextFunction(context, list);
        }
        
        /// <summary>
        /// freetext_predicate
        /// 	 : CONTAINS  LR_BRACKET  full_column_name full_column_names STAR PROPERTY  LR_BRACKET  full_column_name  COMMA  expression  RR_BRACKET  COMMA  expression  RR_BRACKET
        /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFreetext_predicate(TSqlParser.Freetext_predicateContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFreetextPredicate(context, list);
        }
        
        /// <summary>
        /// expression_language
        /// 	 : expression  COMMA  LANGUAGE  expression?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExpression_language(TSqlParser.Expression_languageContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionLanguage(context, list);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names
        /// 	 : table_name  COMMA  full_column_name full_column_names STAR
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFreetext_table_andcolumn_names(TSqlParser.Freetext_table_andcolumn_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFreetextTableAndcolumnNames(context, list);
        }
        
        /// <summary>
        /// full_column_names
        /// 	 : LR_BRACKET  full_column_name  COMMA  full_column_name*  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFull_column_names(TSqlParser.Full_column_namesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFullColumnNames(context, list);
        }
        
        /// <summary>
        /// expressions
        /// 	 : expression  COMMA  expression*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExpressions(TSqlParser.ExpressionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressions(context, list);
        }
        
        /// <summary>
        /// value_method
        /// 	 :     LR_BRACKET  RR_BRACKET  LR_BRACKET  subquery  RR_BRACKET  DOT  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitValue_method(TSqlParser.Value_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstValueMethod(context, list);
        }
        
        /// <summary>
        /// value_call
        /// 	 : VALUE  LR_BRACKET    COMMA    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitValue_call(TSqlParser.Value_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstValueCall(context, list);
        }
        
        /// <summary>
        /// query_method
        /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQuery_method(TSqlParser.Query_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryMethod(context, list);
        }
        
        /// <summary>
        /// query_call
        /// 	 : QUERY  LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQuery_call(TSqlParser.Query_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueryCall(context, list);
        }
        
        /// <summary>
        /// exist_method
        /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExist_method(TSqlParser.Exist_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistMethod(context, list);
        }
        
        /// <summary>
        /// exist_call
        /// 	 : EXIST  LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExist_call(TSqlParser.Exist_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExistCall(context, list);
        }
        
        /// <summary>
        /// modify_method
        /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitModify_method(TSqlParser.Modify_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifyMethod(context, list);
        }
        
        /// <summary>
        /// modify_call
        /// 	 : MODIFY  LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitModify_call(TSqlParser.Modify_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifyCall(context, list);
        }
        
        /// <summary>
        /// hierarchyid_call
        /// 	 : GETANCESTOR  LR_BRACKET    RR_BRACKET
        /// 	 | GETDESCENDANT  LR_BRACKET    COMMA    RR_BRACKET
        /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
        /// 	 | ISDESCENDANTOF  LR_BRACKET    RR_BRACKET
        /// 	 | GETREPARENTEDVALUE  LR_BRACKET    COMMA    RR_BRACKET
        /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitHierarchyid_call(TSqlParser.Hierarchyid_callContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHierarchyidCall(context, list);
        }
        
        /// <summary>
        /// hierarchyid_static_method
        /// 	 : HIERARCHYID  DOUBLE_COLON  GETROOT  LR_BRACKET  RR_BRACKET PARSE  LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitHierarchyid_static_method(TSqlParser.Hierarchyid_static_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstHierarchyidStaticMethod(context, list);
        }
        
        /// <summary>
        /// nodes_method
        /// 	 :   LR_BRACKET  subquery  RR_BRACKET  DOT  NODES  LR_BRACKET    RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitNodes_method(TSqlParser.Nodes_methodContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNodesMethod(context, list);
        }
        
        /// <summary>
        /// switch_section
        /// 	 : WHEN  expression  THEN  expression
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSwitch_section(TSqlParser.Switch_sectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchSection(context, list);
        }
        
        /// <summary>
        /// switch_search_condition_section
        /// 	 : WHEN  search_condition  THEN  expression
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSwitch_search_condition_section(TSqlParser.Switch_search_condition_sectionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSwitchSearchConditionSection(context, list);
        }
        
        /// <summary>
        /// as_column_alias
        /// 	 : AS?  column_alias
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAs_column_alias(TSqlParser.As_column_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsColumnAlias(context, list);
        }
        
        /// <summary>
        /// as_table_alias
        /// 	 : AS?  table_alias
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAs_table_alias(TSqlParser.As_table_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsTableAlias(context, list);
        }
        
        /// <summary>
        /// table_alias
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTable_alias(TSqlParser.Table_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableAlias(context, list);
        }
        
        /// <summary>
        /// with_table_hints
        /// 	 : WITH  LR_BRACKET    COMMA?  *  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitWith_table_hints(TSqlParser.With_table_hintsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWithTableHints(context, list);
        }
        
        /// <summary>
        /// deprecated_table_hint
        /// 	 : LR_BRACKET  table_hint  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDeprecated_table_hint(TSqlParser.Deprecated_table_hintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDeprecatedTableHint(context, list);
        }
        
        public override AstRoot VisitSybase_legacy_hints(TSqlParser.Sybase_legacy_hintsContext context)
        {
            TSqlParser.Sybase_legacy_hintContext[] source = context.sybase_legacy_hint();
            AstSybaseLegacyHints list = new AstSybaseLegacyHints(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Sybase_legacy_hintContext item = ((TSqlParser.Sybase_legacy_hintContext)(enumerator.Current));
                AstSybaseLegacyHint acceptResult = ((AstSybaseLegacyHint)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sybase_legacy_hint
        /// 	 : HOLDLOCK
        /// 	 | NOHOLDLOCK
        /// 	 | READPAST
        /// 	 | SHARED
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitSybase_legacy_hint(TSqlParser.Sybase_legacy_hintContext context)
        {
            return new AstSybaseLegacyHint(context, context.GetText());
        }
        
        /// <summary>
        /// index_values
        /// 	 : index_value  COMMA  index_value*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitIndex_values(TSqlParser.Index_valuesContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIndexValues(context, list);
        }
        
        /// <summary>
        /// table_hint
        /// 	 : NOEXPAND
        /// 	 | INDEX  LR_BRACKET  index_values  RR_BRACKET EQUAL  LR_BRACKET  index_value  RR_BRACKET EQUAL  index_value
        /// 	 | FORCESEEK  LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET?
        /// 	 | FORCESCAN
        /// 	 | HOLDLOCK
        /// 	 | NOLOCK
        /// 	 | NOWAIT
        /// 	 | PAGLOCK
        /// 	 | READCOMMITTED
        /// 	 | READCOMMITTEDLOCK
        /// 	 | READPAST
        /// 	 | READUNCOMMITTED
        /// 	 | REPEATABLEREAD
        /// 	 | ROWLOCK
        /// 	 | SERIALIZABLE
        /// 	 | SNAPSHOT
        /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  DECIMAL
        /// 	 | TABLOCK
        /// 	 | TABLOCKX
        /// 	 | UPDLOCK
        /// 	 | XLOCK
        /// 	 | KEEPIDENTITY
        /// 	 | KEEPDEFAULTS
        /// 	 | IGNORE_CONSTRAINTS
        /// 	 | IGNORE_TRIGGERS
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_hint(TSqlParser.Table_hintContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableHint(context, list);
        }
        
        /// <summary>
        /// index_value
        /// 	 : id_
        /// 	 | DECIMAL
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitIndex_value(TSqlParser.Index_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIndexValue(context, list);
        }
        
        /// <summary>
        /// column_alias_list
        /// 	 : LR_BRACKET    COMMA  *  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumn_alias_list(TSqlParser.Column_alias_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnAliasList(context, list);
        }
        
        /// <summary>
        /// column_alias
        /// 	 : id_
        /// 	 | STRING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumn_alias(TSqlParser.Column_aliasContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnAlias(context, list);
        }
        
        /// <summary>
        /// table_value_constructor
        /// 	 : VALUES  LR_BRACKET    RR_BRACKET  COMMA  LR_BRACKET    RR_BRACKET*
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_value_constructor(TSqlParser.Table_value_constructorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableValueConstructor(context, list);
        }
        
        /// <summary>
        /// expression_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitExpression_list(TSqlParser.Expression_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExpressionList(context, list);
        }
        
        /// <summary>
        /// ranking_windowed_function
        /// 	 : RANK DENSE_RANK ROW_NUMBER  LR_BRACKET  RR_BRACKET  over_clause
        /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitRanking_windowed_function(TSqlParser.Ranking_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRankingWindowedFunction(context, list);
        }
        
        /// <summary>
        /// aggregate_windowed_function
        /// 	 :   LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
        /// 	 |   LR_BRACKET  STAR all_distinct_expression  RR_BRACKET  over_clause?
        /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
        /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
        /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAggregate_windowed_function(TSqlParser.Aggregate_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAggregateWindowedFunction(context, list);
        }
        
        /// <summary>
        /// analytic_windowed_function
        /// 	 : FIRST_VALUE LAST_VALUE  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// 	 | LAG LEAD  LR_BRACKET  expression  COMMA  expression2?  RR_BRACKET  over_clause
        /// 	 | CUME_DIST PERCENT_RANK  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  order_by_clause  RR_BRACKET
        /// 	 | PERCENTILE_CONT PERCENTILE_DISC  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  PARTITION  BY  expression_list?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAnalytic_windowed_function(TSqlParser.Analytic_windowed_functionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAnalyticWindowedFunction(context, list);
        }
        
        /// <summary>
        /// all_distinct_expression
        /// 	 : ALL DISTINCT?  expression
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAll_distinct_expression(TSqlParser.All_distinct_expressionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAllDistinctExpression(context, list);
        }
        
        /// <summary>
        /// over_clause
        /// 	 : OVER  LR_BRACKET  PARTITION  BY  expression_list?  order_by_clause?  row_or_range_clause?  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOver_clause(TSqlParser.Over_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOverClause(context, list);
        }
        
        /// <summary>
        /// row_or_range_clause
        /// 	 : ROWS RANGE  window_frame_extent
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitRow_or_range_clause(TSqlParser.Row_or_range_clauseContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRowOrRangeClause(context, list);
        }
        
        /// <summary>
        /// window_frame_extent
        /// 	 : window_frame_preceding
        /// 	 | BETWEEN  window_frame_bound  AND  window_frame_bound
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitWindow_frame_extent(TSqlParser.Window_frame_extentContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWindowFrameExtent(context, list);
        }
        
        /// <summary>
        /// window_frame_preceding
        /// 	 : UNBOUNDED  PRECEDING
        /// 	 | DECIMAL  PRECEDING
        /// 	 | CURRENT  ROW
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitWindow_frame_preceding(TSqlParser.Window_frame_precedingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWindowFramePreceding(context, list);
        }
        
        /// <summary>
        /// window_frame_following
        /// 	 : UNBOUNDED  FOLLOWING
        /// 	 | DECIMAL  FOLLOWING
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitWindow_frame_following(TSqlParser.Window_frame_followingContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWindowFrameFollowing(context, list);
        }
        
        /// <summary>
        /// create_database_option
        /// 	 : FILESTREAM  database_filestream_options
        /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
        /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
        /// 	 | NESTED_TRIGGERS  EQUAL  on_off
        /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
        /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  DECIMAL
        /// 	 | DB_CHAINING  on_off
        /// 	 | TRUSTWORTHY  on_off
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCreate_database_option(TSqlParser.Create_database_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateDatabaseOption(context, list);
        }
        
        /// <summary>
        /// database_filestream_options
        /// 	 : database_filestream_option  COMMA  database_filestream_option*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDatabase_filestream_options(TSqlParser.Database_filestream_optionsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseFilestreamOptions(context, list);
        }
        
        /// <summary>
        /// database_filestream_option
        /// 	 : LR_BRACKET  NON_TRANSACTED_ACCESS  EQUAL  OFF READ_ONLY FULL DIRECTORY_NAME  EQUAL  STRING  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDatabase_filestream_option(TSqlParser.Database_filestream_optionContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseFilestreamOption(context, list);
        }
        
        /// <summary>
        /// file_group
        /// 	 : FILEGROUP  id_  CONTAINS  FILESTREAM?  DEFAULT?  CONTAINS  MEMORY_OPTIMIZED_DATA?  file_spec  COMMA  file_spec*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFile_group(TSqlParser.File_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileGroup(context, list);
        }
        
        /// <summary>
        /// file_spec
        /// 	 : LR_BRACKET  NAME  EQUAL  id_or_string  COMMA?  FILENAME  EQUAL    COMMA?  SIZE  EQUAL  file_size  COMMA??  MAXSIZE  EQUAL  file_size UNLIMITED  COMMA??  FILEGROWTH  EQUAL  file_size  COMMA??  RR_BRACKET
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFile_spec(TSqlParser.File_specContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSpec(context, list);
        }
        
        /// <summary>
        /// entity_name
        /// 	 : server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEntity_name(TSqlParser.Entity_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEntityName(context, list);
        }
        
        /// <summary>
        /// entity_name_for_azure_dw
        /// 	 : schema_name
        /// 	 | schema_name  DOT  object_name
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEntity_name_for_azure_dw(TSqlParser.Entity_name_for_azure_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEntityNameForAzureDw(context, list);
        }
        
        /// <summary>
        /// entity_name_for_parallel_dw
        /// 	 : 
        /// 	 | schema_name  DOT  object_name
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEntity_name_for_parallel_dw(TSqlParser.Entity_name_for_parallel_dwContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEntityNameForParallelDw(context, list);
        }
        
        /// <summary>
        /// full_table_name
        /// 	 : linked_server  DOT  DOT  schema_name  DOT server_name  DOT  database_name  DOT  schema_name  DOT database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFull_table_name(TSqlParser.Full_table_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFullTableName(context, list);
        }
        
        /// <summary>
        /// table_name
        /// 	 : database_name  DOT  schema_name?  DOT schema_name  DOT?  tableName
        /// 	 | database_name  DOT  schema_name?  DOT schema_name  DOT?  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitTable_name(TSqlParser.Table_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableName(context, list);
        }
        
        /// <summary>
        /// simple_name
        /// 	 : schema_name  DOT?  
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSimple_name(TSqlParser.Simple_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSimpleName(context, list);
        }
        
        /// <summary>
        /// func_proc_name_schema
        /// 	 : schema_name  DOT?  function_name
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFunc_proc_name_schema(TSqlParser.Func_proc_name_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncProcNameSchema(context, list);
        }
        
        /// <summary>
        /// func_proc_name_database_schema
        /// 	 : database_name?  DOT  schema_name?  DOT  function_name
        /// 	 | func_proc_name_schema
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFunc_proc_name_database_schema(TSqlParser.Func_proc_name_database_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncProcNameDatabaseSchema(context, list);
        }
        
        /// <summary>
        /// func_proc_name_server_database_schema
        /// 	 : server_name?  DOT  database_name?  DOT  schema_name?  DOT  function_name
        /// 	 | func_proc_name_database_schema
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFunc_proc_name_server_database_schema(TSqlParser.Func_proc_name_server_database_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFuncProcNameServerDatabaseSchema(context, list);
        }
        
        /// <summary>
        /// ddl_object
        /// 	 : full_table_name
        /// 	 | LOCAL_ID
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDdl_object(TSqlParser.Ddl_objectContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDdlObject(context, list);
        }
        
        /// <summary>
        /// full_column_name
        /// 	 : DELETED INSERTED  DOT  column_name
        /// 	 | server_name?  DOT  schema_name?  DOT  tableName?  DOT  column_name
        /// 	 | schema_name?  DOT  tableName?  DOT  column_name
        /// 	 | tableName?  DOT  column_name
        /// 	 | column_name
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFull_column_name(TSqlParser.Full_column_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFullColumnName(context, list);
        }
        
        /// <summary>
        /// column_name_list_with_order
        /// 	 : id_  ASC DESC?  COMMA  id_  ASC DESC?*
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_name_list_with_order(TSqlParser.Column_name_list_with_orderContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnNameListWithOrder(context, list);
        }
        
        /// <summary>
        /// insert_column_name_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitInsert_column_name_list(TSqlParser.Insert_column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertColumnNameList(context, list);
        }
        
        /// <summary>
        /// insert_column_id
        /// 	 :   DOT*  id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitInsert_column_id(TSqlParser.Insert_column_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstInsertColumnId(context, list);
        }
        
        /// <summary>
        /// column_name_list
        /// 	 :   COMMA  *
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitColumn_name_list(TSqlParser.Column_name_listContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnNameList(context, list);
        }
        
        /// <summary>
        /// cursor_name
        /// 	 : id_
        /// 	 | LOCAL_ID
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitCursor_name(TSqlParser.Cursor_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCursorName(context, list);
        }
        
        /// <summary>
        /// on_off
        /// 	 : ON
        /// 	 | OFF
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitOn_off(TSqlParser.On_offContext context)
        {
            return new AstOnOff(context, context.GetText());
        }
        
        /// <summary>
        /// clustered
        /// 	 : CLUSTERED
        /// 	 | NONCLUSTERED
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitClustered(TSqlParser.ClusteredContext context)
        {
            return new AstClustered(context, context.GetText());
        }
        
        /// <summary>
        /// null_notnull
        /// 	 : NOT?  NULL_
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitNull_notnull(TSqlParser.Null_notnullContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNullNotnull(context, list);
        }
        
        /// <summary>
        /// null_or_default
        /// 	 : null_notnull DEFAULT  constant_expression  COLLATE  id_?  WITH  VALUES?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitNull_or_default(TSqlParser.Null_or_defaultContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNullOrDefault(context, list);
        }
        
        /// <summary>
        /// scalar_function_name
        /// 	 : func_proc_name_server_database_schema
        /// 	 | RIGHT
        /// 	 | LEFT
        /// 	 | BINARY_CHECKSUM
        /// 	 | CHECKSUM
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitScalar_function_name(TSqlParser.Scalar_function_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstScalarFunctionName(context, list);
        }
        
        /// <summary>
        /// begin_conversation_timer
        /// 	 : BEGIN  CONVERSATION  TIMER  LR_BRACKET  LOCAL_ID  RR_BRACKET  TIMEOUT  EQUAL  time  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBegin_conversation_timer(TSqlParser.Begin_conversation_timerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBeginConversationTimer(context, list);
        }
        
        /// <summary>
        /// begin_conversation_dialog
        /// 	 : BEGIN  DIALOG  CONVERSATION?    FROM  SERVICE    TO  SERVICE    COMMA  ?  ON  CONTRACT  contract_name  WITH  RELATED_CONVERSATION RELATED_CONVERSATION_GROUP  EQUAL  LOCAL_ID  COMMA??  LIFETIME  EQUAL  DECIMAL LOCAL_ID  COMMA??  ENCRYPTION  EQUAL  on_off??  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBegin_conversation_dialog(TSqlParser.Begin_conversation_dialogContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBeginConversationDialog(context, list);
        }
        
        /// <summary>
        /// contract_name
        /// 	 : id_ expression
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitContract_name(TSqlParser.Contract_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstContractName(context, list);
        }
        
        /// <summary>
        /// service_name
        /// 	 : id_ expression
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitService_name(TSqlParser.Service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServiceName(context, list);
        }
        
        /// <summary>
        /// end_conversation
        /// 	 : END  CONVERSATION    SEMI?  WITH  ERROR  EQUAL    DESCRIPTION  EQUAL  ?  CLEANUP??
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitEnd_conversation(TSqlParser.End_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEndConversation(context, list);
        }
        
        /// <summary>
        /// waitfor_conversation
        /// 	 : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  COMMA?  TIMEOUT  ?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitWaitfor_conversation(TSqlParser.Waitfor_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWaitforConversation(context, list);
        }
        
        /// <summary>
        /// get_conversation
        /// 	 : GET  CONVERSATION  GROUP    FROM    SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitGet_conversation(TSqlParser.Get_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGetConversation(context, list);
        }
        
        /// <summary>
        /// queue_id
        /// 	 : database_name  DOT  schema_name  DOT  queue_name
        /// 	 | id_
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitQueue_id(TSqlParser.Queue_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueId(context, list);
        }
        
        /// <summary>
        /// send_conversation
        /// 	 : SEND  ON  CONVERSATION    MESSAGE  TYPE    LR_BRACKET    RR_BRACKET?  SEMI?
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSend_conversation(TSqlParser.Send_conversationContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSendConversation(context, list);
        }
        
        /// <summary>
        /// data_type
        /// 	 :   LR_BRACKET  MAX  RR_BRACKET
        /// 	 | ext_type  LR_BRACKET    COMMA    RR_BRACKET
        /// 	 | ext_type  LR_BRACKET    RR_BRACKET
        /// 	 | ext_type  IDENTITY  LR_BRACKET    COMMA    RR_BRACKET?
        /// 	 |   PRECISION?
        /// 	 | unscaled_type
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitData_type(TSqlParser.Data_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDataType(context, list);
        }
        
        /// <summary>
        /// default_value
        /// 	 : NULL_
        /// 	 | DEFAULT
        /// 	 | constant
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitDefault_value(TSqlParser.Default_valueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDefaultValue(context, list);
        }
        
        /// <summary>
        /// constant
        /// 	 : STRING
        /// 	 | BINARY
        /// 	 | sign?  DECIMAL
        /// 	 | sign?  REAL FLOAT
        /// 	 | sign?    DECIMAL FLOAT
        /// 	 | parameter
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitConstant(TSqlParser.ConstantContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConstant(context, list);
        }
        
        /// <summary>
        /// sign
        /// 	 : PLUS
        /// 	 | MINUS
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitSign(TSqlParser.SignContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSign(context, list);
        }
        
        /// <summary>
        /// keyword
        /// 	 : ABORT
        /// 	 | ABSOLUTE
        /// 	 | ACCENT_SENSITIVITY
        /// 	 | ACCESS
        /// 	 | ACTION
        /// 	 | ACTIVATION
        /// 	 | ACTIVE
        /// 	 | ADD
        /// 	 | ADDRESS
        /// 	 | AES_128
        /// 	 | AES_192
        /// 	 | AES_256
        /// 	 | AFFINITY
        /// 	 | AFTER
        /// 	 | AGGREGATE
        /// 	 | ALGORITHM
        /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS
        /// 	 | ALLOW_PAGE_LOCKS
        /// 	 | ALLOW_ROW_LOCKS
        /// 	 | ALLOW_SNAPSHOT_ISOLATION
        /// 	 | ALLOWED
        /// 	 | ALWAYS
        /// 	 | ANSI_DEFAULTS
        /// 	 | ANSI_NULL_DEFAULT
        /// 	 | ANSI_NULL_DFLT_OFF
        /// 	 | ANSI_NULL_DFLT_ON
        /// 	 | ANSI_NULLS
        /// 	 | ANSI_PADDING
        /// 	 | ANSI_WARNINGS
        /// 	 | APP_NAME
        /// 	 | APPLICATION_LOG
        /// 	 | APPLOCK_MODE
        /// 	 | APPLOCK_TEST
        /// 	 | APPLY
        /// 	 | ARITHABORT
        /// 	 | ARITHIGNORE
        /// 	 | ASCII
        /// 	 | ASSEMBLY
        /// 	 | ASSEMBLYPROPERTY
        /// 	 | AT_KEYWORD
        /// 	 | AUDIT
        /// 	 | AUDIT_GUID
        /// 	 | AUTO
        /// 	 | AUTO_CLEANUP
        /// 	 | AUTO_CLOSE
        /// 	 | AUTO_CREATE_STATISTICS
        /// 	 | AUTO_DROP
        /// 	 | AUTO_SHRINK
        /// 	 | AUTO_UPDATE_STATISTICS
        /// 	 | AUTO_UPDATE_STATISTICS_ASYNC
        /// 	 | AUTOGROW_ALL_FILES
        /// 	 | AUTOGROW_SINGLE_FILE
        /// 	 | AVAILABILITY
        /// 	 | AVG
        /// 	 | BACKUP_PRIORITY
        /// 	 | BASE64
        /// 	 | BEGIN_DIALOG
        /// 	 | BIGINT
        /// 	 | BINARY_KEYWORD
        /// 	 | BINARY_CHECKSUM
        /// 	 | BINDING
        /// 	 | BLOB_STORAGE
        /// 	 | BROKER
        /// 	 | BROKER_INSTANCE
        /// 	 | BULK_LOGGED
        /// 	 | CALLER
        /// 	 | CAP_CPU_PERCENT
        /// 	 | CAST
        /// 	 | TRY_CAST
        /// 	 | CATALOG
        /// 	 | CATCH
        /// 	 | CHANGE
        /// 	 | CHANGE_RETENTION
        /// 	 | CHANGE_TRACKING
        /// 	 | CHAR
        /// 	 | CHARINDEX
        /// 	 | CHECKSUM
        /// 	 | CHECKSUM_AGG
        /// 	 | CLEANUP
        /// 	 | COL_LENGTH
        /// 	 | COL_NAME
        /// 	 | COLLECTION
        /// 	 | COLUMN_ENCRYPTION_KEY
        /// 	 | COLUMN_MASTER_KEY
        /// 	 | COLUMNPROPERTY
        /// 	 | COLUMNS
        /// 	 | COLUMNSTORE
        /// 	 | COLUMNSTORE_ARCHIVE
        /// 	 | COMMITTED
        /// 	 | COMPATIBILITY_LEVEL
        /// 	 | COMPRESS_ALL_ROW_GROUPS
        /// 	 | COMPRESSION_DELAY
        /// 	 | CONCAT
        /// 	 | CONCAT_WS
        /// 	 | CONCAT_NULL_YIELDS_NULL
        /// 	 | CONTENT
        /// 	 | CONTROL
        /// 	 | COOKIE
        /// 	 | COUNT
        /// 	 | COUNT_BIG
        /// 	 | COUNTER
        /// 	 | CPU
        /// 	 | CREATE_NEW
        /// 	 | CREATION_DISPOSITION
        /// 	 | CREDENTIAL
        /// 	 | CRYPTOGRAPHIC
        /// 	 | CUME_DIST
        /// 	 | CURSOR_CLOSE_ON_COMMIT
        /// 	 | CURSOR_DEFAULT
        /// 	 | DATA
        /// 	 | DATABASE_PRINCIPAL_ID
        /// 	 | DATABASEPROPERTYEX
        /// 	 | DATE_CORRELATION_OPTIMIZATION
        /// 	 | DATEADD
        /// 	 | DATEDIFF
        /// 	 | DATENAME
        /// 	 | DATEPART
        /// 	 | DAYS
        /// 	 | DB_CHAINING
        /// 	 | DB_FAILOVER
        /// 	 | DB_ID
        /// 	 | DB_NAME
        /// 	 | DECRYPTION
        /// 	 | DEFAULT_DOUBLE_QUOTE
        /// 	 | DEFAULT_FULLTEXT_LANGUAGE
        /// 	 | DEFAULT_LANGUAGE
        /// 	 | DEFINITION
        /// 	 | DELAY
        /// 	 | DELAYED_DURABILITY
        /// 	 | DELETED
        /// 	 | DENSE_RANK
        /// 	 | DEPENDENTS
        /// 	 | DES
        /// 	 | DESCRIPTION
        /// 	 | DESX
        /// 	 | DETERMINISTIC
        /// 	 | DHCP
        /// 	 | DIALOG
        /// 	 | DIFFERENCE
        /// 	 | DIRECTORY_NAME
        /// 	 | DISABLE
        /// 	 | DISABLE_BROKER
        /// 	 | DISABLED
        /// 	 | DOCUMENT
        /// 	 | DROP_EXISTING
        /// 	 | DYNAMIC
        /// 	 | ELEMENTS
        /// 	 | EMERGENCY
        /// 	 | EMPTY
        /// 	 | ENABLE
        /// 	 | ENABLE_BROKER
        /// 	 | ENCRYPTED
        /// 	 | ENCRYPTED_VALUE
        /// 	 | ENCRYPTION
        /// 	 | ENCRYPTION_TYPE
        /// 	 | ENDPOINT_URL
        /// 	 | ERROR_BROKER_CONVERSATIONS
        /// 	 | EXCLUSIVE
        /// 	 | EXECUTABLE
        /// 	 | EXIST
        /// 	 | EXPAND
        /// 	 | EXPIRY_DATE
        /// 	 | EXPLICIT
        /// 	 | FAIL_OPERATION
        /// 	 | FAILOVER_MODE
        /// 	 | FAILURE
        /// 	 | FAILURE_CONDITION_LEVEL
        /// 	 | FAST
        /// 	 | FAST_FORWARD
        /// 	 | FILE_ID
        /// 	 | FILE_IDEX
        /// 	 | FILE_NAME
        /// 	 | FILEGROUP
        /// 	 | FILEGROUP_ID
        /// 	 | FILEGROUP_NAME
        /// 	 | FILEGROUPPROPERTY
        /// 	 | FILEGROWTH
        /// 	 | FILENAME
        /// 	 | FILEPATH
        /// 	 | FILEPROPERTY
        /// 	 | FILEPROPERTYEX
        /// 	 | FILESTREAM
        /// 	 | FILTER
        /// 	 | FIRST
        /// 	 | FIRST_VALUE
        /// 	 | FMTONLY
        /// 	 | FOLLOWING
        /// 	 | FORCE
        /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
        /// 	 | FORCED
        /// 	 | FORCEPLAN
        /// 	 | FORCESCAN
        /// 	 | FORMAT
        /// 	 | FORWARD_ONLY
        /// 	 | FULLSCAN
        /// 	 | FULLTEXT
        /// 	 | FULLTEXTCATALOGPROPERTY
        /// 	 | FULLTEXTSERVICEPROPERTY
        /// 	 | GB
        /// 	 | GENERATED
        /// 	 | GETDATE
        /// 	 | GETUTCDATE
        /// 	 | GLOBAL
        /// 	 | GO
        /// 	 | GROUP_MAX_REQUESTS
        /// 	 | GROUPING
        /// 	 | GROUPING_ID
        /// 	 | HADR
        /// 	 | HASH
        /// 	 | HEALTH_CHECK_TIMEOUT
        /// 	 | HIDDEN_KEYWORD
        /// 	 | HIGH
        /// 	 | HONOR_BROKER_PRIORITY
        /// 	 | HOURS
        /// 	 | IDENTITY_VALUE
        /// 	 | IGNORE_CONSTRAINTS
        /// 	 | IGNORE_DUP_KEY
        /// 	 | IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX
        /// 	 | IGNORE_TRIGGERS
        /// 	 | IMMEDIATE
        /// 	 | IMPERSONATE
        /// 	 | IMPLICIT_TRANSACTIONS
        /// 	 | IMPORTANCE
        /// 	 | INCLUDE_NULL_VALUES
        /// 	 | INCREMENTAL
        /// 	 | INDEX_COL
        /// 	 | INDEXKEY_PROPERTY
        /// 	 | INDEXPROPERTY
        /// 	 | INITIATOR
        /// 	 | INPUT
        /// 	 | INSENSITIVE
        /// 	 | INSERTED
        /// 	 | INT
        /// 	 | IP
        /// 	 | ISOLATION
        /// 	 | JOB
        /// 	 | JSON
        /// 	 | KB
        /// 	 | KEEP
        /// 	 | KEEPDEFAULTS
        /// 	 | KEEPFIXED
        /// 	 | KEEPIDENTITY
        /// 	 | KEY_SOURCE
        /// 	 | KEYS
        /// 	 | KEYSET
        /// 	 | LAG
        /// 	 | LAST
        /// 	 | LAST_VALUE
        /// 	 | LEAD
        /// 	 | LEN
        /// 	 | LEVEL
        /// 	 | LIST
        /// 	 | LISTENER
        /// 	 | LISTENER_URL
        /// 	 | LOB_COMPACTION
        /// 	 | LOCAL
        /// 	 | LOCATION
        /// 	 | LOCK
        /// 	 | LOCK_ESCALATION
        /// 	 | LOGIN
        /// 	 | LOOP
        /// 	 | LOW
        /// 	 | LOWER
        /// 	 | LTRIM
        /// 	 | MANUAL
        /// 	 | MARK
        /// 	 | MASKED
        /// 	 | MATERIALIZED
        /// 	 | MAX
        /// 	 | MAX_CPU_PERCENT
        /// 	 | MAX_DOP
        /// 	 | MAX_FILES
        /// 	 | MAX_IOPS_PER_VOLUME
        /// 	 | MAX_MEMORY_PERCENT
        /// 	 | MAX_PROCESSES
        /// 	 | MAX_QUEUE_READERS
        /// 	 | MAX_ROLLOVER_FILES
        /// 	 | MAXDOP
        /// 	 | MAXRECURSION
        /// 	 | MAXSIZE
        /// 	 | MB
        /// 	 | MEDIUM
        /// 	 | MEMORY_OPTIMIZED_DATA
        /// 	 | MESSAGE
        /// 	 | MIN
        /// 	 | MIN_ACTIVE_ROWVERSION
        /// 	 | MIN_CPU_PERCENT
        /// 	 | MIN_IOPS_PER_VOLUME
        /// 	 | MIN_MEMORY_PERCENT
        /// 	 | MINUTES
        /// 	 | MIRROR_ADDRESS
        /// 	 | MIXED_PAGE_ALLOCATION
        /// 	 | MODE
        /// 	 | MODIFY
        /// 	 | MOVE
        /// 	 | MULTI_USER
        /// 	 | NAME
        /// 	 | NCHAR
        /// 	 | NESTED_TRIGGERS
        /// 	 | NEW_ACCOUNT
        /// 	 | NEW_BROKER
        /// 	 | NEW_PASSWORD
        /// 	 | NEWNAME
        /// 	 | NEXT
        /// 	 | NO
        /// 	 | NO_TRUNCATE
        /// 	 | NO_WAIT
        /// 	 | NOCOUNT
        /// 	 | NODES
        /// 	 | NOEXEC
        /// 	 | NOEXPAND
        /// 	 | NOLOCK
        /// 	 | NON_TRANSACTED_ACCESS
        /// 	 | NORECOMPUTE
        /// 	 | NORECOVERY
        /// 	 | NOTIFICATIONS
        /// 	 | NOWAIT
        /// 	 | NTILE
        /// 	 | NULL_DOUBLE_QUOTE
        /// 	 | NUMANODE
        /// 	 | NUMBER
        /// 	 | NUMERIC_ROUNDABORT
        /// 	 | OBJECT
        /// 	 | OBJECT_DEFINITION
        /// 	 | OBJECT_ID
        /// 	 | OBJECT_NAME
        /// 	 | OBJECT_SCHEMA_NAME
        /// 	 | OBJECTPROPERTY
        /// 	 | OBJECTPROPERTYEX
        /// 	 | OFFLINE
        /// 	 | OFFSET
        /// 	 | OLD_ACCOUNT
        /// 	 | ONLINE
        /// 	 | ONLY
        /// 	 | OPEN_EXISTING
        /// 	 | OPENJSON
        /// 	 | OPTIMISTIC
        /// 	 | OPTIMIZE
        /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY
        /// 	 | ORIGINAL_DB_NAME
        /// 	 | OUT
        /// 	 | OUTPUT
        /// 	 | OVERRIDE
        /// 	 | OWNER
        /// 	 | OWNERSHIP
        /// 	 | PAD_INDEX
        /// 	 | PAGE_VERIFY
        /// 	 | PAGECOUNT
        /// 	 | PAGLOCK
        /// 	 | PARAMETERIZATION
        /// 	 | PARSENAME
        /// 	 | PARSEONLY
        /// 	 | PARTITION
        /// 	 | PARTITIONS
        /// 	 | PARTNER
        /// 	 | PATH
        /// 	 | PATINDEX
        /// 	 | PAUSE
        /// 	 | PERCENT_RANK
        /// 	 | PERCENTILE_CONT
        /// 	 | PERCENTILE_DISC
        /// 	 | PERSIST_SAMPLE_PERCENT
        /// 	 | POISON_MESSAGE_HANDLING
        /// 	 | POOL
        /// 	 | PORT
        /// 	 | PRECEDING
        /// 	 | PRIMARY_ROLE
        /// 	 | PRIOR
        /// 	 | PRIORITY
        /// 	 | PRIORITY_LEVEL
        /// 	 | PRIVATE
        /// 	 | PRIVATE_KEY
        /// 	 | PRIVILEGES
        /// 	 | PROCEDURE_NAME
        /// 	 | PROPERTY
        /// 	 | PROVIDER
        /// 	 | PROVIDER_KEY_NAME
        /// 	 | QUERY
        /// 	 | QUEUE
        /// 	 | QUEUE_DELAY
        /// 	 | QUOTED_IDENTIFIER
        /// 	 | QUOTENAME
        /// 	 | RANDOMIZED
        /// 	 | RANGE
        /// 	 | RANK
        /// 	 | RC2
        /// 	 | RC4
        /// 	 | RC4_128
        /// 	 | READ_COMMITTED_SNAPSHOT
        /// 	 | READ_ONLY
        /// 	 | READ_ONLY_ROUTING_LIST
        /// 	 | READ_WRITE
        /// 	 | READCOMMITTED
        /// 	 | READCOMMITTEDLOCK
        /// 	 | READONLY
        /// 	 | READPAST
        /// 	 | READUNCOMMITTED
        /// 	 | READWRITE
        /// 	 | REBUILD
        /// 	 | RECEIVE
        /// 	 | RECOMPILE
        /// 	 | RECOVERY
        /// 	 | RECURSIVE_TRIGGERS
        /// 	 | RELATIVE
        /// 	 | REMOTE
        /// 	 | REMOTE_PROC_TRANSACTIONS
        /// 	 | REMOTE_SERVICE_NAME
        /// 	 | REMOVE
        /// 	 | REORGANIZE
        /// 	 | REPEATABLE
        /// 	 | REPEATABLEREAD
        /// 	 | REPLACE
        /// 	 | REPLICA
        /// 	 | REPLICATE
        /// 	 | REQUEST_MAX_CPU_TIME_SEC
        /// 	 | REQUEST_MAX_MEMORY_GRANT_PERCENT
        /// 	 | REQUEST_MEMORY_GRANT_TIMEOUT_SEC
        /// 	 | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT
        /// 	 | RESAMPLE
        /// 	 | RESERVE_DISK_SPACE
        /// 	 | RESOURCE
        /// 	 | RESOURCE_MANAGER_LOCATION
        /// 	 | RESTRICTED_USER
        /// 	 | RESUMABLE
        /// 	 | RETENTION
        /// 	 | REVERSE
        /// 	 | ROBUST
        /// 	 | ROOT
        /// 	 | ROUTE
        /// 	 | ROW
        /// 	 | ROW_NUMBER
        /// 	 | ROWGUID
        /// 	 | ROWLOCK
        /// 	 | ROWS
        /// 	 | RTRIM
        /// 	 | SAMPLE
        /// 	 | SCHEMA_ID
        /// 	 | SCHEMA_NAME
        /// 	 | SCHEMABINDING
        /// 	 | SCOPE_IDENTITY
        /// 	 | SCOPED
        /// 	 | SCROLL
        /// 	 | SCROLL_LOCKS
        /// 	 | SEARCH
        /// 	 | SECONDARY
        /// 	 | SECONDARY_ONLY
        /// 	 | SECONDARY_ROLE
        /// 	 | SECONDS
        /// 	 | SECRET
        /// 	 | SECURABLES
        /// 	 | SECURITY
        /// 	 | SECURITY_LOG
        /// 	 | SEEDING_MODE
        /// 	 | SELF
        /// 	 | SEMI_SENSITIVE
        /// 	 | SEND
        /// 	 | SENT
        /// 	 | SEQUENCE
        /// 	 | SEQUENCE_NUMBER
        /// 	 | SERIALIZABLE
        /// 	 | SERVERPROPERTY
        /// 	 | SESSION_TIMEOUT
        /// 	 | SETERROR
        /// 	 | SHARE
        /// 	 | SHARED
        /// 	 | SHOWPLAN
        /// 	 | SHOWPLAN_ALL
        /// 	 | SHOWPLAN_TEXT
        /// 	 | SHOWPLAN_XML
        /// 	 | SIGNATURE
        /// 	 | SIMPLE
        /// 	 | SINGLE_USER
        /// 	 | SIZE
        /// 	 | SMALLINT
        /// 	 | SNAPSHOT
        /// 	 | SORT_IN_TEMPDB
        /// 	 | SOUNDEX
        /// 	 | SPACE_KEYWORD
        /// 	 | SPARSE
        /// 	 | SPATIAL_WINDOW_MAX_CELLS
        /// 	 | STANDBY
        /// 	 | START_DATE
        /// 	 | STATIC
        /// 	 | STATISTICS_INCREMENTAL
        /// 	 | STATISTICS_NORECOMPUTE
        /// 	 | STATS_DATE
        /// 	 | STATS_STREAM
        /// 	 | STATUS
        /// 	 | STATUSONLY
        /// 	 | STDEV
        /// 	 | STDEVP
        /// 	 | STOPLIST
        /// 	 | STR
        /// 	 | STRING_AGG
        /// 	 | STRING_ESCAPE
        /// 	 | STUFF
        /// 	 | SUBJECT
        /// 	 | SUBSCRIBE
        /// 	 | SUBSCRIPTION
        /// 	 | SUBSTRING
        /// 	 | SUM
        /// 	 | SUSPEND
        /// 	 | SYMMETRIC
        /// 	 | SYNCHRONOUS_COMMIT
        /// 	 | SYNONYM
        /// 	 | SYSTEM
        /// 	 | TABLOCK
        /// 	 | TABLOCKX
        /// 	 | TAKE
        /// 	 | TARGET_RECOVERY_TIME
        /// 	 | TB
        /// 	 | TEXTIMAGE_ON
        /// 	 | THROW
        /// 	 | TIES
        /// 	 | TIME
        /// 	 | TIMEOUT
        /// 	 | TIMER
        /// 	 | TINYINT
        /// 	 | TORN_PAGE_DETECTION
        /// 	 | TRACKING
        /// 	 | TRANSACTION_ID
        /// 	 | TRANSFORM_NOISE_WORDS
        /// 	 | TRANSLATE
        /// 	 | TRIM
        /// 	 | TRIPLE_DES
        /// 	 | TRIPLE_DES_3KEY
        /// 	 | TRUSTWORTHY
        /// 	 | TRY
        /// 	 | TSQL
        /// 	 | TWO_DIGIT_YEAR_CUTOFF
        /// 	 | TYPE
        /// 	 | TYPE_ID
        /// 	 | TYPE_NAME
        /// 	 | TYPE_WARNING
        /// 	 | TYPEPROPERTY
        /// 	 | UNBOUNDED
        /// 	 | UNCOMMITTED
        /// 	 | UNICODE
        /// 	 | UNKNOWN
        /// 	 | UNLIMITED
        /// 	 | UNMASK
        /// 	 | UOW
        /// 	 | UPDLOCK
        /// 	 | UPPER
        /// 	 | USING
        /// 	 | VALID_XML
        /// 	 | VALIDATION
        /// 	 | VALUE
        /// 	 | VAR
        /// 	 | VARBINARY_KEYWORD
        /// 	 | VARP
        /// 	 | VERSION
        /// 	 | VIEW_METADATA
        /// 	 | VIEWS
        /// 	 | WAIT
        /// 	 | WELL_FORMED_XML
        /// 	 | WITHOUT_ARRAY_WRAPPER
        /// 	 | WORK
        /// 	 | WORKLOAD
        /// 	 | XLOCK
        /// 	 | XML
        /// 	 | XML_COMPRESSION
        /// 	 | XMLDATA
        /// 	 | XMLNAMESPACES
        /// 	 | XMLSCHEMA
        /// 	 | XSINIL
        /// 	 | ZONE
        /// 	 | ABORT_AFTER_WAIT
        /// 	 | ABSENT
        /// 	 | ADMINISTER
        /// 	 | AES
        /// 	 | ALLOW_CONNECTIONS
        /// 	 | ALLOW_MULTIPLE_EVENT_LOSS
        /// 	 | ALLOW_SINGLE_EVENT_LOSS
        /// 	 | ANONYMOUS
        /// 	 | APPEND
        /// 	 | APPLICATION
        /// 	 | ASYMMETRIC
        /// 	 | ASYNCHRONOUS_COMMIT
        /// 	 | AUTHENTICATE
        /// 	 | AUTHENTICATION
        /// 	 | AUTOMATED_BACKUP_PREFERENCE
        /// 	 | AUTOMATIC
        /// 	 | AVAILABILITY_MODE
        /// 	 | BEFORE
        /// 	 | BLOCK
        /// 	 | BLOCKERS
        /// 	 | BLOCKSIZE
        /// 	 | BLOCKING_HIERARCHY
        /// 	 | BUFFER
        /// 	 | BUFFERCOUNT
        /// 	 | CACHE
        /// 	 | CALLED
        /// 	 | CERTIFICATE
        /// 	 | CHANGETABLE
        /// 	 | CHANGES
        /// 	 | CHECK_POLICY
        /// 	 | CHECK_EXPIRATION
        /// 	 | CLASSIFIER_FUNCTION
        /// 	 | CLUSTER
        /// 	 | COMPRESS
        /// 	 | COMPRESSION
        /// 	 | CONNECT
        /// 	 | CONNECTION
        /// 	 | CONFIGURATION
        /// 	 | CONNECTIONPROPERTY
        /// 	 | CONTAINMENT
        /// 	 | CONTEXT
        /// 	 | CONTEXT_INFO
        /// 	 | CONTINUE_AFTER_ERROR
        /// 	 | CONTRACT
        /// 	 | CONTRACT_NAME
        /// 	 | CONVERSATION
        /// 	 | COPY_ONLY
        /// 	 | CURRENT_REQUEST_ID
        /// 	 | CURRENT_TRANSACTION_ID
        /// 	 | CYCLE
        /// 	 | DATA_COMPRESSION
        /// 	 | DATA_SOURCE
        /// 	 | DATABASE_MIRRORING
        /// 	 | DATASPACE
        /// 	 | DDL
        /// 	 | DECOMPRESS
        /// 	 | DEFAULT_DATABASE
        /// 	 | DEFAULT_SCHEMA
        /// 	 | DIAGNOSTICS
        /// 	 | DIFFERENTIAL
        /// 	 | DISTRIBUTION
        /// 	 | DTC_SUPPORT
        /// 	 | ENABLED
        /// 	 | ENDPOINT
        /// 	 | ERROR
        /// 	 | ERROR_LINE
        /// 	 | ERROR_MESSAGE
        /// 	 | ERROR_NUMBER
        /// 	 | ERROR_PROCEDURE
        /// 	 | ERROR_SEVERITY
        /// 	 | ERROR_STATE
        /// 	 | EVENT
        /// 	 | EVENTDATA
        /// 	 | EVENT_RETENTION_MODE
        /// 	 | EXECUTABLE_FILE
        /// 	 | EXPIREDATE
        /// 	 | EXTENSION
        /// 	 | EXTERNAL_ACCESS
        /// 	 | FAILOVER
        /// 	 | FAILURECONDITIONLEVEL
        /// 	 | FAN_IN
        /// 	 | FILE_SNAPSHOT
        /// 	 | FORCESEEK
        /// 	 | FORCE_SERVICE_ALLOW_DATA_LOSS
        /// 	 | FORMATMESSAGE
        /// 	 | GET
        /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT
        /// 	 | GETANCESTOR
        /// 	 | GETANSINULL
        /// 	 | GETDESCENDANT
        /// 	 | GETLEVEL
        /// 	 | GETREPARENTEDVALUE
        /// 	 | GETROOT
        /// 	 | GOVERNOR
        /// 	 | HASHED
        /// 	 | HEALTHCHECKTIMEOUT
        /// 	 | HEAP
        /// 	 | HIERARCHYID
        /// 	 | HOST_ID
        /// 	 | HOST_NAME
        /// 	 | IIF
        /// 	 | IO
        /// 	 | INCLUDE
        /// 	 | INCREMENT
        /// 	 | INFINITE
        /// 	 | INIT
        /// 	 | INSTEAD
        /// 	 | ISDESCENDANTOF
        /// 	 | ISNULL
        /// 	 | ISNUMERIC
        /// 	 | KERBEROS
        /// 	 | KEY_PATH
        /// 	 | KEY_STORE_PROVIDER_NAME
        /// 	 | LANGUAGE
        /// 	 | LIBRARY
        /// 	 | LIFETIME
        /// 	 | LINKED
        /// 	 | LINUX
        /// 	 | LISTENER_IP
        /// 	 | LISTENER_PORT
        /// 	 | LOCAL_SERVICE_NAME
        /// 	 | LOG
        /// 	 | MASK
        /// 	 | MATCHED
        /// 	 | MASTER
        /// 	 | MAX_MEMORY
        /// 	 | MAXTRANSFER
        /// 	 | MAXVALUE
        /// 	 | MAX_DISPATCH_LATENCY
        /// 	 | MAX_DURATION
        /// 	 | MAX_EVENT_SIZE
        /// 	 | MAX_SIZE
        /// 	 | MAX_OUTSTANDING_IO_PER_VOLUME
        /// 	 | MEDIADESCRIPTION
        /// 	 | MEDIANAME
        /// 	 | MEMBER
        /// 	 | MEMORY_PARTITION_MODE
        /// 	 | MESSAGE_FORWARDING
        /// 	 | MESSAGE_FORWARD_SIZE
        /// 	 | MINVALUE
        /// 	 | MIRROR
        /// 	 | MUST_CHANGE
        /// 	 | NEWID
        /// 	 | NEWSEQUENTIALID
        /// 	 | NOFORMAT
        /// 	 | NOINIT
        /// 	 | NONE
        /// 	 | NOREWIND
        /// 	 | NOSKIP
        /// 	 | NOUNLOAD
        /// 	 | NO_CHECKSUM
        /// 	 | NO_COMPRESSION
        /// 	 | NO_EVENT_LOSS
        /// 	 | NOTIFICATION
        /// 	 | NTLM
        /// 	 | OLD_PASSWORD
        /// 	 | ON_FAILURE
        /// 	 | OPERATIONS
        /// 	 | PAGE
        /// 	 | PARAM_NODE
        /// 	 | PARTIAL
        /// 	 | PASSWORD
        /// 	 | PERMISSION_SET
        /// 	 | PER_CPU
        /// 	 | PER_DB
        /// 	 | PER_NODE
        /// 	 | PERSISTED
        /// 	 | PLATFORM
        /// 	 | POLICY
        /// 	 | PREDICATE
        /// 	 | PROCESS
        /// 	 | PROFILE
        /// 	 | PYTHON
        /// 	 | R
        /// 	 | READ_WRITE_FILEGROUPS
        /// 	 | REGENERATE
        /// 	 | RELATED_CONVERSATION
        /// 	 | RELATED_CONVERSATION_GROUP
        /// 	 | REQUIRED
        /// 	 | RESET
        /// 	 | RESOURCES
        /// 	 | RESTART
        /// 	 | RESUME
        /// 	 | RETAINDAYS
        /// 	 | RETURNS
        /// 	 | REWIND
        /// 	 | ROLE
        /// 	 | ROUND_ROBIN
        /// 	 | ROWCOUNT_BIG
        /// 	 | RSA_512
        /// 	 | RSA_1024
        /// 	 | RSA_2048
        /// 	 | RSA_3072
        /// 	 | RSA_4096
        /// 	 | SAFETY
        /// 	 | SAFE
        /// 	 | SCHEDULER
        /// 	 | SCHEME
        /// 	 | SCRIPT
        /// 	 | SERVER
        /// 	 | SERVICE
        /// 	 | SERVICE_BROKER
        /// 	 | SERVICE_NAME
        /// 	 | SESSION
        /// 	 | SESSION_CONTEXT
        /// 	 | SETTINGS
        /// 	 | SHRINKLOG
        /// 	 | SID
        /// 	 | SKIP_KEYWORD
        /// 	 | SOFTNUMA
        /// 	 | SOURCE
        /// 	 | SPECIFICATION
        /// 	 | SPLIT
        /// 	 | SQL
        /// 	 | SQLDUMPERFLAGS
        /// 	 | SQLDUMPERPATH
        /// 	 | SQLDUMPERTIMEOUT
        /// 	 | STATE
        /// 	 | STATS
        /// 	 | START
        /// 	 | STARTED
        /// 	 | STARTUP_STATE
        /// 	 | STOP
        /// 	 | STOPPED
        /// 	 | STOP_ON_ERROR
        /// 	 | SUPPORTED
        /// 	 | SWITCH
        /// 	 | TAPE
        /// 	 | TARGET
        /// 	 | TCP
        /// 	 | TOSTRING
        /// 	 | TRACE
        /// 	 | TRACK_CAUSALITY
        /// 	 | TRANSFER
        /// 	 | UNCHECKED
        /// 	 | UNLOCK
        /// 	 | UNSAFE
        /// 	 | URL
        /// 	 | USED
        /// 	 | VERBOSELOGGING
        /// 	 | VISIBILITY
        /// 	 | WAIT_AT_LOW_PRIORITY
        /// 	 | WINDOWS
        /// 	 | WITHOUT
        /// 	 | WITNESS
        /// 	 | XACT_ABORT
        /// 	 | XACT_STATE
        /// 	 | VARCHAR
        /// 	 | NVARCHAR
        /// 	 | PRECISION
        /// </summary>
        /// <remarks>
        /// Strategy : ClassEnum
        /// </remarks>
        public override AstRoot VisitKeyword(TSqlParser.KeywordContext context)
        {
            return new AstKeyword(context, context.GetText());
        }
        
        /// <summary>
        /// id_
        /// 	 : ID
        /// 	 | DOUBLE_QUOTE_ID
        /// 	 | DOUBLE_QUOTE_BLANK
        /// 	 | SQUARE_BRACKET_ID
        /// 	 | keyword
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitId_(TSqlParser.Id_Context context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstId(context, list);
        }
        
        /// <summary>
        /// simple_id
        /// 	 : ID
        /// </summary>
        /// <remarks>
        /// Strategy : ClassTerminalAlias
        /// </remarks>
        public override AstRoot VisitSimple_id(TSqlParser.Simple_idContext context)
        {
            return new AstSimpleId(context);
        }
        
        /// <summary>
        /// comparison_operator
        /// 	 : EQUAL
        /// 	 | GREATER
        /// 	 | LESS
        /// 	 | LESS  EQUAL
        /// 	 | GREATER  EQUAL
        /// 	 | LESS  GREATER
        /// 	 | EXCLAMATION  EQUAL
        /// 	 | EXCLAMATION  GREATER
        /// 	 | EXCLAMATION  LESS
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitComparison_operator(TSqlParser.Comparison_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstComparisonOperator(context, list);
        }
        
        /// <summary>
        /// assignment_operator
        /// 	 : PLUS_ASSIGN
        /// 	 | MINUS_ASSIGN
        /// 	 | MULT_ASSIGN
        /// 	 | DIV_ASSIGN
        /// 	 | MOD_ASSIGN
        /// 	 | AND_ASSIGN
        /// 	 | XOR_ASSIGN
        /// 	 | OR_ASSIGN
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitAssignment_operator(TSqlParser.Assignment_operatorContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAssignmentOperator(context, list);
        }
        
        /// <summary>
        /// file_size
        /// 	 : DECIMAL  file_size_unity?
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFile_size(TSqlParser.File_sizeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSize(context, list);
        }
        
        /// <summary>
        /// file_size_unity
        /// 	 : KB
        /// 	 | MB
        /// 	 | GB
        /// 	 | TB
        /// 	 | MODULE
        /// </summary>
        /// <remarks>
        /// Strategy : _
        /// </remarks>
        public override AstRoot VisitFile_size_unity(TSqlParser.File_size_unityContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileSizeUnity(context, list);
        }
        
        /// <summary>
        /// filestream_filegroup_or_partition_schema_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFilestream_filegroup_or_partition_schema_name(TSqlParser.Filestream_filegroup_or_partition_schema_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFilestreamFilegroupOrPartitionSchemaName(context, list);
        }
        
        /// <summary>
        /// action_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAction_name(TSqlParser.Action_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstActionName(context, list);
        }
        
        /// <summary>
        /// aggregate_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAggregate_name(TSqlParser.Aggregate_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAggregateName(context, list);
        }
        
        /// <summary>
        /// app_role_schema
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitApp_role_schema(TSqlParser.App_role_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAppRoleSchema(context, list);
        }
        
        /// <summary>
        /// application_role
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitApplication_role(TSqlParser.Application_roleContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstApplicationRole(context, list);
        }
        
        /// <summary>
        /// assembly_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAssembly_name(TSqlParser.Assembly_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAssemblyName(context, list);
        }
        
        /// <summary>
        /// asym_key_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAsym_key_name(TSqlParser.Asym_key_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAsymKeyName(context, list);
        }
        
        /// <summary>
        /// audit_action_group_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAudit_action_group_name(TSqlParser.Audit_action_group_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAuditActionGroupName(context, list);
        }
        
        /// <summary>
        /// audit_guid
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAudit_guid(TSqlParser.Audit_guidContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAuditGuid(context, list);
        }
        
        /// <summary>
        /// audit_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAudit_name(TSqlParser.Audit_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAuditName(context, list);
        }
        
        /// <summary>
        /// audit_specification_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAudit_specification_name(TSqlParser.Audit_specification_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAuditSpecificationName(context, list);
        }
        
        /// <summary>
        /// azure_active_directory_principal
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitAzure_active_directory_principal(TSqlParser.Azure_active_directory_principalContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstAzureActiveDirectoryPrincipal(context, list);
        }
        
        /// <summary>
        /// backup_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBackup_name(TSqlParser.Backup_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBackupName(context, list);
        }
        
        /// <summary>
        /// binding_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitBinding_name(TSqlParser.Binding_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstBindingName(context, list);
        }
        
        /// <summary>
        /// catalog_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCatalog_name(TSqlParser.Catalog_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCatalogName(context, list);
        }
        
        /// <summary>
        /// cert_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCert_name(TSqlParser.Cert_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCertName(context, list);
        }
        
        /// <summary>
        /// certificate_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCertificate_name(TSqlParser.Certificate_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCertificateName(context, list);
        }
        
        /// <summary>
        /// class_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitClass_name(TSqlParser.Class_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstClassName(context, list);
        }
        
        /// <summary>
        /// collation_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCollation_name(TSqlParser.Collation_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCollationName(context, list);
        }
        
        /// <summary>
        /// column_encryption_key
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_encryption_key(TSqlParser.Column_encryption_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnEncryptionKey(context, list);
        }
        
        /// <summary>
        /// column_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_name(TSqlParser.Column_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnName(context, list);
        }
        
        /// <summary>
        /// column_name_or_arguments
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitColumn_name_or_arguments(TSqlParser.Column_name_or_argumentsContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstColumnNameOrArguments(context, list);
        }
        
        /// <summary>
        /// constraint_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitConstraint_name(TSqlParser.Constraint_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstConstraintName(context, list);
        }
        
        /// <summary>
        /// create_service_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCreate_service_name(TSqlParser.Create_service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCreateServiceName(context, list);
        }
        
        /// <summary>
        /// credential_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCredential_name(TSqlParser.Credential_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCredentialName(context, list);
        }
        
        /// <summary>
        /// cryptographic_provider_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitCryptographic_provider_name(TSqlParser.Cryptographic_provider_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstCryptographicProviderName(context, list);
        }
        
        /// <summary>
        /// data_source_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitData_source_name(TSqlParser.Data_source_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDataSourceName(context, list);
        }
        
        /// <summary>
        /// database_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDatabase_name(TSqlParser.Database_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDatabaseName(context, list);
        }
        
        /// <summary>
        /// dropped_service_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitDropped_service_name(TSqlParser.Dropped_service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstDroppedServiceName(context, list);
        }
        
        /// <summary>
        /// encryptor_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEncryptor_name(TSqlParser.Encryptor_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEncryptorName(context, list);
        }
        
        /// <summary>
        /// encryption_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEncryption_name(TSqlParser.Encryption_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEncryptionName(context, list);
        }
        
        /// <summary>
        /// endpoint_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEndpoint_name(TSqlParser.Endpoint_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEndpointName(context, list);
        }
        
        /// <summary>
        /// event_customizable_attributue
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_customizable_attributue(TSqlParser.Event_customizable_attributueContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventCustomizableAttributue(context, list);
        }
        
        /// <summary>
        /// event_field_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_field_name(TSqlParser.Event_field_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventFieldName(context, list);
        }
        
        /// <summary>
        /// event_module_guid
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_module_guid(TSqlParser.Event_module_guidContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventModuleGuid(context, list);
        }
        
        /// <summary>
        /// event_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_name(TSqlParser.Event_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventName(context, list);
        }
        
        /// <summary>
        /// event_notification_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_notification_name(TSqlParser.Event_notification_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventNotificationName(context, list);
        }
        
        /// <summary>
        /// event_package_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_package_name(TSqlParser.Event_package_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventPackageName(context, list);
        }
        
        /// <summary>
        /// event_session_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_session_name(TSqlParser.Event_session_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventSessionName(context, list);
        }
        
        /// <summary>
        /// event_type_or_group
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitEvent_type_or_group(TSqlParser.Event_type_or_groupContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstEventTypeOrGroup(context, list);
        }
        
        /// <summary>
        /// ext_type
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExt_type(TSqlParser.Ext_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExtType(context, list);
        }
        
        /// <summary>
        /// external_data_source_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExternal_data_source_name(TSqlParser.External_data_source_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExternalDataSourceName(context, list);
        }
        
        /// <summary>
        /// external_file_format_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExternal_file_format_name(TSqlParser.External_file_format_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExternalFileFormatName(context, list);
        }
        
        /// <summary>
        /// external_pool_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitExternal_pool_name(TSqlParser.External_pool_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstExternalPoolName(context, list);
        }
        
        /// <summary>
        /// file_group_id
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFile_group_id(TSqlParser.File_group_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileGroupId(context, list);
        }
        
        /// <summary>
        /// file_group_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFile_group_name(TSqlParser.File_group_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFileGroupName(context, list);
        }
        
        /// <summary>
        /// function_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitFunction_name(TSqlParser.Function_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstFunctionName(context, list);
        }
        
        /// <summary>
        /// group_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitGroup_name(TSqlParser.Group_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstGroupName(context, list);
        }
        
        /// <summary>
        /// index_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitIndex_name(TSqlParser.Index_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstIndexName(context, list);
        }
        
        /// <summary>
        /// language
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitLanguage(TSqlParser.LanguageContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLanguage(context, list);
        }
        
        /// <summary>
        /// library_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitLibrary_name(TSqlParser.Library_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLibraryName(context, list);
        }
        
        /// <summary>
        /// linked_server
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitLinked_server(TSqlParser.Linked_serverContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLinkedServer(context, list);
        }
        
        /// <summary>
        /// logical_device_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitLogical_device_name(TSqlParser.Logical_device_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLogicalDeviceName(context, list);
        }
        
        /// <summary>
        /// login_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitLogin_name(TSqlParser.Login_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstLoginName(context, list);
        }
        
        /// <summary>
        /// master_key
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitMaster_key(TSqlParser.Master_keyContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMasterKey(context, list);
        }
        
        /// <summary>
        /// method_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitMethod_name(TSqlParser.Method_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstMethodName(context, list);
        }
        
        /// <summary>
        /// modified_contract_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitModified_contract_name(TSqlParser.Modified_contract_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifiedContractName(context, list);
        }
        
        /// <summary>
        /// modified_service_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitModified_service_name(TSqlParser.Modified_service_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModifiedServiceName(context, list);
        }
        
        /// <summary>
        /// module_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitModule_name(TSqlParser.Module_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstModuleName(context, list);
        }
        
        /// <summary>
        /// network_computer
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitNetwork_computer(TSqlParser.Network_computerContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNetworkComputer(context, list);
        }
        
        /// <summary>
        /// new_application_role_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitNew_application_role_name(TSqlParser.New_application_role_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNewApplicationRoleName(context, list);
        }
        
        /// <summary>
        /// new_file_group_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitNew_file_group_name(TSqlParser.New_file_group_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNewFileGroupName(context, list);
        }
        
        /// <summary>
        /// non_static_attr
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitNon_static_attr(TSqlParser.Non_static_attrContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNonStaticAttr(context, list);
        }
        
        /// <summary>
        /// notification_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitNotification_name(TSqlParser.Notification_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstNotificationName(context, list);
        }
        
        /// <summary>
        /// object_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitObject_name(TSqlParser.Object_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstObjectName(context, list);
        }
        
        /// <summary>
        /// owner_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitOwner_name(TSqlParser.Owner_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstOwnerName(context, list);
        }
        
        /// <summary>
        /// partition_column_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPartition_column_name(TSqlParser.Partition_column_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPartitionColumnName(context, list);
        }
        
        /// <summary>
        /// pool_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPool_name(TSqlParser.Pool_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPoolName(context, list);
        }
        
        /// <summary>
        /// predicate_compare_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPredicate_compare_name(TSqlParser.Predicate_compare_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicateCompareName(context, list);
        }
        
        /// <summary>
        /// predicate_source_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitPredicate_source_name(TSqlParser.Predicate_source_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPredicateSourceName(context, list);
        }
        
        /// <summary>
        /// property_list_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitProperty_list_name(TSqlParser.Property_list_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstPropertyListName(context, list);
        }
        
        /// <summary>
        /// provider_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitProvider_name(TSqlParser.Provider_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstProviderName(context, list);
        }
        
        /// <summary>
        /// queue_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitQueue_name(TSqlParser.Queue_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstQueueName(context, list);
        }
        
        /// <summary>
        /// relational_schema
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitRelational_schema(TSqlParser.Relational_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRelationalSchema(context, list);
        }
        
        /// <summary>
        /// role_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitRole_name(TSqlParser.Role_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRoleName(context, list);
        }
        
        /// <summary>
        /// route_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitRoute_name(TSqlParser.Route_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRouteName(context, list);
        }
        
        /// <summary>
        /// rule_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitRule_name(TSqlParser.Rule_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstRuleName(context, list);
        }
        
        /// <summary>
        /// schema_collection_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSchema_collection_name(TSqlParser.Schema_collection_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaCollectionName(context, list);
        }
        
        /// <summary>
        /// schema_id
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSchema_id(TSqlParser.Schema_idContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaId(context, list);
        }
        
        /// <summary>
        /// schema_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSchema_name(TSqlParser.Schema_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSchemaName(context, list);
        }
        
        /// <summary>
        /// security_policy_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSecurity_policy_name(TSqlParser.Security_policy_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSecurityPolicyName(context, list);
        }
        
        /// <summary>
        /// security_predicate_function_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSecurity_predicate_function_name(TSqlParser.Security_predicate_function_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSecurityPredicateFunctionName(context, list);
        }
        
        /// <summary>
        /// sequence_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSequence_name(TSqlParser.Sequence_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSequenceName(context, list);
        }
        
        /// <summary>
        /// server_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitServer_name(TSqlParser.Server_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerName(context, list);
        }
        
        /// <summary>
        /// server_role_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitServer_role_name(TSqlParser.Server_role_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstServerRoleName(context, list);
        }
        
        /// <summary>
        /// source_list_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSource_list_name(TSqlParser.Source_list_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSourceListName(context, list);
        }
        
        /// <summary>
        /// sql_identifier
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSql_identifier(TSqlParser.Sql_identifierContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSqlIdentifier(context, list);
        }
        
        /// <summary>
        /// static_attr
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitStatic_attr(TSqlParser.Static_attrContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstStaticAttr(context, list);
        }
        
        /// <summary>
        /// statistics_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitStatistics_name(TSqlParser.Statistics_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstStatisticsName(context, list);
        }
        
        /// <summary>
        /// stoplist_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitStoplist_name(TSqlParser.Stoplist_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstStoplistName(context, list);
        }
        
        /// <summary>
        /// symmetric_key_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSymmetric_key_name(TSqlParser.Symmetric_key_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSymmetricKeyName(context, list);
        }
        
        /// <summary>
        /// synonym_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitSynonym_name(TSqlParser.Synonym_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstSynonymName(context, list);
        }
        
        /// <summary>
        /// table_or_view_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTable_or_view_name(TSqlParser.Table_or_view_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableOrViewName(context, list);
        }
        
        /// <summary>
        /// table_variable
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTable_variable(TSqlParser.Table_variableContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableVariable(context, list);
        }
        
        /// <summary>
        /// tableName
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTableName(TSqlParser.TableNameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTableName(context, list);
        }
        
        /// <summary>
        /// target_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTarget_name(TSqlParser.Target_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTargetName(context, list);
        }
        
        /// <summary>
        /// target_parameter_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTarget_parameter_name(TSqlParser.Target_parameter_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTargetParameterName(context, list);
        }
        
        /// <summary>
        /// trigger_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTrigger_name(TSqlParser.Trigger_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTriggerName(context, list);
        }
        
        /// <summary>
        /// tvf_schema_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitTvf_schema_name(TSqlParser.Tvf_schema_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTvfSchemaName(context, list);
        }
        
        /// <summary>
        /// type_schema
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitType_schema(TSqlParser.Type_schemaContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstTypeSchema(context, list);
        }
        
        /// <summary>
        /// udt_column_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUdt_column_name(TSqlParser.Udt_column_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUdtColumnName(context, list);
        }
        
        /// <summary>
        /// unscaled_type
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUnscaled_type(TSqlParser.Unscaled_typeContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUnscaledType(context, list);
        }
        
        /// <summary>
        /// user_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitUser_name(TSqlParser.User_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstUserName(context, list);
        }
        
        /// <summary>
        /// windows_principal
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitWindows_principal(TSqlParser.Windows_principalContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWindowsPrincipal(context, list);
        }
        
        /// <summary>
        /// workload_group_group_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitWorkload_group_group_name(TSqlParser.Workload_group_group_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWorkloadGroupGroupName(context, list);
        }
        
        /// <summary>
        /// workload_group_pool_name
        /// 	 : id_
        /// </summary>
        /// <remarks>
        /// Strategy : ClassWithProperties
        /// </remarks>
        public override AstRoot VisitWorkload_group_pool_name(TSqlParser.Workload_group_pool_nameContext context)
        {
            List<AstRoot> list = new List<AstRoot>();
            for (IEnumerator enumerator = context.children.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                IParseTree item = ((IParseTree)(enumerator.Current));
                AstRoot acceptResult = item.Accept(this);
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return new AstWorkloadGroupPoolName(context, list);
        }
    }
}
