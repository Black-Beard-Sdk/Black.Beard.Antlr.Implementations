#nullable disable
// Generated by ScriptClassDefaults.cs (mercredi 19 avril 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Asts
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// t_root
    /// 	 : batchs  EOF
    /// 	 | execute_body_batch  go_statements  EOF
    /// </summary>
    public abstract partial class AstTRoot : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteBodyBatch), false, false, "execute_body_batch"), new Bb.Asts.AstRuleMatcherItem(typeof(AstGoStatements), false, false, "go_statements")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstBatchs), false, false, "batchs"))));
        
        private static string _ruleValue = "batchs  EOF\r\n | execute_body_batch  go_statements  EOF\r\n";
        
        private static string _ruleName = "t_root";
        
        /// <summary>
        /// t_root : batchs 
        /// </summary>
        public partial class AstTRoot1 : AstTRoot
        {
            
            private static string _ruleName1 = "t_root";
            
            private AstBatchs _batchs;
            
            internal AstTRoot1(ParserRuleContext ctx, AstBatchs batchs) : 
                    base(ctx)
            {
                _batchs = batchs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBatchs Batchs
            {
                get
                {
                    return _batchs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTRoot(this);
            }
        }
        /// <summary>
        /// t_root : execute_body_batch go_statements 
        /// </summary>
        public partial class AstTRoot2 : AstTRoot
        {
            
            private static string _ruleName1 = "t_root";
            
            private AstExecuteBodyBatch _executeBodyBatch;
            
            private AstGoStatements _goStatements;
            
            internal AstTRoot2(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch, AstGoStatements goStatements) : 
                    base(ctx)
            {
                _executeBodyBatch = executeBodyBatch;
                _goStatements = goStatements;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteBodyBatch ExecuteBodyBatch
            {
                get
                {
                    return _executeBodyBatch;
                }
            }
            
            public virtual AstGoStatements GoStatements
            {
                get
                {
                    return _goStatements;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTRoot(this);
            }
        }
        

        
        internal AstTRoot(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTRoot(Position p) : 
                base(p)
        {
        }
        
        internal AstTRoot(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTRoot Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTRoot.AstTRoot1(ctx, list.Get<AstBatchs>(0));
            }
            if ((index == 2))
            {
                return new AstTRoot.AstTRoot2(ctx, list.Get<AstExecuteBodyBatch>(0), list.Get<AstGoStatements>(1));
            }
            return null;
        }
        
        /// <summary>
        /// t_root : 
        ///    batchs 
        /// </summary>
        public static AstTRoot TRoot(ParserRuleContext ctx, AstBatchs batchs)
        {
            AstTRoot.AstTRoot1 result = new AstTRoot.AstTRoot1(ctx, batchs);
            return result;
        }
        
        /// <summary>
        /// t_root : 
        ///    execute_body_batch go_statements 
        /// </summary>
        public static AstTRoot TRoot(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch, AstGoStatements goStatements)
        {
            AstTRoot.AstTRoot2 result = new AstTRoot.AstTRoot2(ctx, executeBodyBatch, goStatements);
            return result;
        }
    }
    
    /// <summary>
    /// batch
    /// 	 : execute_body_batch
    /// 	 | sql_clauses
    /// 	 | create_or_alter_function
    /// 	 | create_or_alter_procedure
    /// 	 | create_or_alter_trigger
    /// 	 | create_view
    /// </summary>
    public abstract partial class AstBatch : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteBodyBatch), false, false, "execute_body_batch")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSqlClauses), false, false, "sql_clauses")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateOrAlterFunction), false, false, "create_or_alter_function")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateOrAlterProcedure), false, false, "create_or_alter_procedure")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateOrAlterTrigger), false, false, "create_or_alter_trigger")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateView), false, false, "create_view"))));
        
        private static string _ruleValue = "execute_body_batch\r\n | sql_clauses\r\n | create_or_alter_function\r\n | create_or_alt" +
            "er_procedure\r\n | create_or_alter_trigger\r\n | create_view\r\n";
        
        private static string _ruleName = "batch";
        
        /// <summary>
        /// batch : execute_body_batch 
        /// </summary>
        public partial class AstBatch1 : AstBatch
        {
            
            private static string _ruleName1 = "batch";
            
            private AstExecuteBodyBatch _executeBodyBatch;
            
            internal AstBatch1(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch) : 
                    base(ctx)
            {
                _executeBodyBatch = executeBodyBatch;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteBodyBatch ExecuteBodyBatch
            {
                get
                {
                    return _executeBodyBatch;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : sql_clauses 
        /// </summary>
        public partial class AstBatch2 : AstBatch
        {
            
            private static string _ruleName1 = "batch";
            
            private AstSqlClauses _sqlClauses;
            
            internal AstBatch2(ParserRuleContext ctx, AstSqlClauses sqlClauses) : 
                    base(ctx)
            {
                _sqlClauses = sqlClauses;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSqlClauses SqlClauses
            {
                get
                {
                    return _sqlClauses;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_or_alter_function 
        /// </summary>
        public partial class AstBatch3 : AstBatch
        {
            
            private static string _ruleName1 = "batch";
            
            private AstCreateOrAlterFunction _createOrAlterFunction;
            
            internal AstBatch3(ParserRuleContext ctx, AstCreateOrAlterFunction createOrAlterFunction) : 
                    base(ctx)
            {
                _createOrAlterFunction = createOrAlterFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateOrAlterFunction CreateOrAlterFunction
            {
                get
                {
                    return _createOrAlterFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_or_alter_procedure 
        /// </summary>
        public partial class AstBatch4 : AstBatch
        {
            
            private static string _ruleName1 = "batch";
            
            private AstCreateOrAlterProcedure _createOrAlterProcedure;
            
            internal AstBatch4(ParserRuleContext ctx, AstCreateOrAlterProcedure createOrAlterProcedure) : 
                    base(ctx)
            {
                _createOrAlterProcedure = createOrAlterProcedure;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateOrAlterProcedure CreateOrAlterProcedure
            {
                get
                {
                    return _createOrAlterProcedure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_or_alter_trigger 
        /// </summary>
        public partial class AstBatch5 : AstBatch
        {
            
            private static string _ruleName1 = "batch";
            
            private AstCreateOrAlterTrigger _createOrAlterTrigger;
            
            internal AstBatch5(ParserRuleContext ctx, AstCreateOrAlterTrigger createOrAlterTrigger) : 
                    base(ctx)
            {
                _createOrAlterTrigger = createOrAlterTrigger;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateOrAlterTrigger CreateOrAlterTrigger
            {
                get
                {
                    return _createOrAlterTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_view 
        /// </summary>
        public partial class AstBatch6 : AstBatch
        {
            
            private static string _ruleName1 = "batch";
            
            private AstCreateView _createView;
            
            internal AstBatch6(ParserRuleContext ctx, AstCreateView createView) : 
                    base(ctx)
            {
                _createView = createView;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateView CreateView
            {
                get
                {
                    return _createView;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        

        
        internal AstBatch(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBatch(Position p) : 
                base(p)
        {
        }
        
        internal AstBatch(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBatch Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBatch.AstBatch1(ctx, list.Get<AstExecuteBodyBatch>(0));
            }
            if ((index == 2))
            {
                return new AstBatch.AstBatch2(ctx, list.Get<AstSqlClauses>(0));
            }
            if ((index == 3))
            {
                return new AstBatch.AstBatch3(ctx, list.Get<AstCreateOrAlterFunction>(0));
            }
            if ((index == 4))
            {
                return new AstBatch.AstBatch4(ctx, list.Get<AstCreateOrAlterProcedure>(0));
            }
            if ((index == 5))
            {
                return new AstBatch.AstBatch5(ctx, list.Get<AstCreateOrAlterTrigger>(0));
            }
            if ((index == 6))
            {
                return new AstBatch.AstBatch6(ctx, list.Get<AstCreateView>(0));
            }
            return null;
        }
        
        /// <summary>
        /// batch : 
        ///    execute_body_batch 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch)
        {
            AstBatch.AstBatch1 result = new AstBatch.AstBatch1(ctx, executeBodyBatch);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    sql_clauses 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstSqlClauses sqlClauses)
        {
            AstBatch.AstBatch2 result = new AstBatch.AstBatch2(ctx, sqlClauses);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_or_alter_function 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateOrAlterFunction createOrAlterFunction)
        {
            AstBatch.AstBatch3 result = new AstBatch.AstBatch3(ctx, createOrAlterFunction);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_or_alter_procedure 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateOrAlterProcedure createOrAlterProcedure)
        {
            AstBatch.AstBatch4 result = new AstBatch.AstBatch4(ctx, createOrAlterProcedure);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_or_alter_trigger 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateOrAlterTrigger createOrAlterTrigger)
        {
            AstBatch.AstBatch5 result = new AstBatch.AstBatch5(ctx, createOrAlterTrigger);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_view 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateView createView)
        {
            AstBatch.AstBatch6 result = new AstBatch.AstBatch6(ctx, createView);
            return result;
        }
    }
    
    /// <summary>
    /// sql_clause
    /// 	 : merge_statement
    /// 	 | delete_statement
    /// 	 | insert_statement
    /// 	 | select_statement_standalone
    /// 	 | update_statement
    /// 	 | alter_application_role
    /// 	 | alter_assembly
    /// 	 | alter_asymmetric_key
    /// 	 | alter_authorization
    /// 	 | alter_authorization_for_azure_dw
    /// 	 | alter_authorization_for_parallel_dw
    /// 	 | alter_authorization_for_sql_database
    /// 	 | alter_availability_group
    /// 	 | alter_certificate
    /// 	 | alter_column_encryption_key
    /// 	 | alter_credential
    /// 	 | alter_cryptographic_provider
    /// 	 | alter_database
    /// 	 | alter_db_role
    /// 	 | alter_endpoint
    /// 	 | create_or_alter_event_session
    /// 	 | alter_external_data_source
    /// 	 | alter_external_library
    /// 	 | alter_external_resource_pool
    /// 	 | alter_fulltext_catalog
    /// 	 | alter_fulltext_stoplist
    /// 	 | alter_index
    /// 	 | alter_login_azure_sql
    /// 	 | alter_login_azure_sql_dw_and_pdw
    /// 	 | alter_login_sql_server
    /// 	 | alter_master_key_azure_sql
    /// 	 | alter_master_key_sql_server
    /// 	 | alter_message_type
    /// 	 | alter_partition_function
    /// 	 | alter_partition_scheme
    /// 	 | alter_remote_service_binding
    /// 	 | alter_resource_governor
    /// 	 | alter_schema_azure_sql_dw_and_pdw
    /// 	 | alter_schema_sql
    /// 	 | alter_sequence
    /// 	 | alter_server_audit
    /// 	 | alter_server_audit_specification
    /// 	 | alter_server_configuration
    /// 	 | alter_server_role
    /// 	 | alter_server_role_pdw
    /// 	 | alter_service
    /// 	 | alter_service_master_key
    /// 	 | alter_symmetric_key
    /// 	 | alter_table
    /// 	 | alter_user
    /// 	 | alter_user_azure_sql
    /// 	 | alter_workload_group
    /// 	 | create_application_role
    /// 	 | create_assembly
    /// 	 | create_asymmetric_key
    /// 	 | create_column_encryption_key
    /// 	 | create_column_master_key
    /// 	 | create_credential
    /// 	 | create_cryptographic_provider
    /// 	 | create_database
    /// 	 | create_db_role
    /// 	 | create_event_notification
    /// 	 | create_external_library
    /// 	 | create_external_resource_pool
    /// 	 | create_fulltext_catalog
    /// 	 | create_fulltext_stoplist
    /// 	 | create_index
    /// 	 | create_columnstore_index
    /// 	 | create_nonclustered_columnstore_index
    /// 	 | create_login_azure_sql
    /// 	 | create_login_pdw
    /// 	 | create_login_sql_server
    /// 	 | create_master_key_azure_sql
    /// 	 | create_master_key_sql_server
    /// 	 | create_or_alter_broker_priority
    /// 	 | create_remote_service_binding
    /// 	 | create_resource_pool
    /// 	 | create_route
    /// 	 | create_rule
    /// 	 | create_schema
    /// 	 | create_schema_azure_sql_dw_and_pdw
    /// 	 | create_search_property_list
    /// 	 | create_security_policy
    /// 	 | create_sequence
    /// 	 | create_server_audit
    /// 	 | create_server_audit_specification
    /// 	 | create_server_role
    /// 	 | create_service
    /// 	 | create_statistics
    /// 	 | create_synonym
    /// 	 | create_table
    /// 	 | create_type
    /// 	 | create_user
    /// 	 | create_user_azure_sql_dw
    /// 	 | create_workload_group
    /// 	 | create_xml_index
    /// 	 | create_xml_schema_collection
    /// 	 | create_partition_function
    /// 	 | create_partition_scheme
    /// 	 | drop_aggregate
    /// 	 | drop_application_role
    /// 	 | drop_assembly
    /// 	 | drop_asymmetric_key
    /// 	 | drop_availability_group
    /// 	 | drop_broker_priority
    /// 	 | drop_certificate
    /// 	 | drop_column_encryption_key
    /// 	 | drop_column_master_key
    /// 	 | drop_contract
    /// 	 | drop_credential
    /// 	 | drop_cryptograhic_provider
    /// 	 | drop_database
    /// 	 | drop_database_audit_specification
    /// 	 | drop_database_encryption_key
    /// 	 | drop_database_scoped_credential
    /// 	 | drop_db_role
    /// 	 | drop_default
    /// 	 | drop_endpoint
    /// 	 | drop_event_notifications
    /// 	 | drop_event_session
    /// 	 | drop_external_data_source
    /// 	 | drop_external_file_format
    /// 	 | drop_external_library
    /// 	 | drop_external_resource_pool
    /// 	 | drop_external_table
    /// 	 | drop_fulltext_catalog
    /// 	 | drop_fulltext_index
    /// 	 | drop_fulltext_stoplist
    /// 	 | drop_function
    /// 	 | drop_index
    /// 	 | drop_login
    /// 	 | drop_master_key
    /// 	 | drop_message_type
    /// 	 | drop_partition_function
    /// 	 | drop_partition_scheme
    /// 	 | drop_procedure
    /// 	 | drop_queue
    /// 	 | drop_remote_service_binding
    /// 	 | drop_resource_pool
    /// 	 | drop_route
    /// 	 | drop_rule
    /// 	 | drop_schema
    /// 	 | drop_search_property_list
    /// 	 | drop_security_policy
    /// 	 | drop_sequence
    /// 	 | drop_server_audit
    /// 	 | drop_server_audit_specification
    /// 	 | drop_server_role
    /// 	 | drop_service
    /// 	 | drop_signature
    /// 	 | drop_statistics
    /// 	 | drop_statistics_id_azure_dw_and_pdw
    /// 	 | drop_symmetric_key
    /// 	 | drop_synonym
    /// 	 | drop_table
    /// 	 | drop_dml_trigger
    /// 	 | drop_ddl_trigger
    /// 	 | drop_type
    /// 	 | drop_user
    /// 	 | drop_view
    /// 	 | drop_workload_group
    /// 	 | drop_xml_schema_collection
    /// 	 | disable_trigger
    /// 	 | enable_trigger
    /// 	 | lock_table
    /// 	 | truncate_table
    /// 	 | update_statistics
    /// 	 | block_statement
    /// 	 | break_statement
    /// 	 | continue_statement
    /// 	 | goto_statement
    /// 	 | if_statement
    /// 	 | return_statement
    /// 	 | throw_statement
    /// 	 | try_catch_statement
    /// 	 | waitfor_statement
    /// 	 | while_statement
    /// 	 | print_statement
    /// 	 | raiseerror_statement
    /// 	 | declare_statement
    /// 	 | execute_statement
    /// 	 | cursor_statement
    /// 	 | begin_conversation_timer
    /// 	 | begin_conversation_dialog
    /// 	 | end_conversation
    /// 	 | get_conversation
    /// 	 | send_conversation
    /// 	 | waitfor_conversation
    /// 	 | create_contract
    /// 	 | create_queue
    /// 	 | alter_queue
    /// 	 | kill_statement
    /// 	 | message_statement
    /// 	 | security_statement
    /// 	 | set_statement
    /// 	 | transaction_statement
    /// 	 | use_statement
    /// 	 | setuser_statement
    /// 	 | reconfigure_statement
    /// 	 | shutdown_statement
    /// 	 | checkpoint_statement
    /// 	 | backup_database
    /// 	 | backup_log
    /// 	 | backup_certificate
    /// 	 | backup_master_key
    /// 	 | backup_service_master_key
    /// 	 | dbcc_special
    /// 	 | dbcc_clause
    /// </summary>
    public abstract partial class AstSqlClause : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstMergeStatement), false, false, "merge_statement")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDeleteStatement), false, false, "delete_statement")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstInsertStatement), false, false, "insert_statement")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstSelectStatementStandalone), false, false, "select_statement_standalone")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateStatement), false, false, "update_statement")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterApplicationRole), false, false, "alter_application_role")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAssembly), false, false, "alter_assembly")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAsymmetricKey), false, false, "alter_asymmetric_key")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAuthorization), false, false, "alter_authorization")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAuthorizationForAzureDw), false, false, "alter_authorization_for_azure_dw")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAuthorizationForParallelDw), false, false, "alter_authorization_for_parallel_dw")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAuthorizationForSqlDatabase), false, false, "alter_authorization_for_sql_database")), new Bb.Asts.AstRuleMatcherItems(13, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAvailabilityGroup), false, false, "alter_availability_group")), new Bb.Asts.AstRuleMatcherItems(14, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterCertificate), false, false, "alter_certificate")), new Bb.Asts.AstRuleMatcherItems(15, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterColumnEncryptionKey), false, false, "alter_column_encryption_key")), new Bb.Asts.AstRuleMatcherItems(16, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterCredential), false, false, "alter_credential")), new Bb.Asts.AstRuleMatcherItems(17, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterCryptographicProvider), false, false, "alter_cryptographic_provider")), new Bb.Asts.AstRuleMatcherItems(18, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterDatabase), false, false, "alter_database")), new Bb.Asts.AstRuleMatcherItems(19, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterDbRole), false, false, "alter_db_role")), new Bb.Asts.AstRuleMatcherItems(20, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterEndpoint), false, false, "alter_endpoint")), new Bb.Asts.AstRuleMatcherItems(21, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateOrAlterEventSession), false, false, "create_or_alter_event_session")), new Bb.Asts.AstRuleMatcherItems(22, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterExternalDataSource), false, false, "alter_external_data_source")), new Bb.Asts.AstRuleMatcherItems(23, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterExternalLibrary), false, false, "alter_external_library")), new Bb.Asts.AstRuleMatcherItems(24, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterExternalResourcePool), false, false, "alter_external_resource_pool")), new Bb.Asts.AstRuleMatcherItems(25, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterFulltextCatalog), false, false, "alter_fulltext_catalog")), new Bb.Asts.AstRuleMatcherItems(26, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterFulltextStoplist), false, false, "alter_fulltext_stoplist")), new Bb.Asts.AstRuleMatcherItems(27, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterIndex), false, false, "alter_index")), new Bb.Asts.AstRuleMatcherItems(28, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterLoginAzureSql), false, false, "alter_login_azure_sql")), new Bb.Asts.AstRuleMatcherItems(29, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterLoginAzureSqlDwAndPdw), false, false, "alter_login_azure_sql_dw_and_pdw")), new Bb.Asts.AstRuleMatcherItems(30, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterLoginSqlServer), false, false, "alter_login_sql_server")), new Bb.Asts.AstRuleMatcherItems(31, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterMasterKeyAzureSql), false, false, "alter_master_key_azure_sql")), new Bb.Asts.AstRuleMatcherItems(32, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterMasterKeySqlServer), false, false, "alter_master_key_sql_server")), new Bb.Asts.AstRuleMatcherItems(33, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterMessageType), false, false, "alter_message_type")), new Bb.Asts.AstRuleMatcherItems(34, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterPartitionFunction), false, false, "alter_partition_function")), new Bb.Asts.AstRuleMatcherItems(35, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterPartitionScheme), false, false, "alter_partition_scheme")), new Bb.Asts.AstRuleMatcherItems(36, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterRemoteServiceBinding), false, false, "alter_remote_service_binding")), new Bb.Asts.AstRuleMatcherItems(37, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterResourceGovernor), false, false, "alter_resource_governor")), new Bb.Asts.AstRuleMatcherItems(38, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterSchemaAzureSqlDwAndPdw), false, false, "alter_schema_azure_sql_dw_and_pdw")), new Bb.Asts.AstRuleMatcherItems(39, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterSchemaSql), false, false, "alter_schema_sql")), new Bb.Asts.AstRuleMatcherItems(40, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterSequence), false, false, "alter_sequence")), new Bb.Asts.AstRuleMatcherItems(41, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterServerAudit), false, false, "alter_server_audit")), new Bb.Asts.AstRuleMatcherItems(42, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterServerAuditSpecification), false, false, "alter_server_audit_specification")), new Bb.Asts.AstRuleMatcherItems(43, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterServerConfiguration), false, false, "alter_server_configuration")), new Bb.Asts.AstRuleMatcherItems(44, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterServerRole), false, false, "alter_server_role")), new Bb.Asts.AstRuleMatcherItems(45, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterServerRolePdw), false, false, "alter_server_role_pdw")), new Bb.Asts.AstRuleMatcherItems(46, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterService), false, false, "alter_service")), new Bb.Asts.AstRuleMatcherItems(47, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterServiceMasterKey), false, false, "alter_service_master_key")), new Bb.Asts.AstRuleMatcherItems(48, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterSymmetricKey), false, false, "alter_symmetric_key")), new Bb.Asts.AstRuleMatcherItems(49, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterTable), false, false, "alter_table")), new Bb.Asts.AstRuleMatcherItems(50, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterUser), false, false, "alter_user")), new Bb.Asts.AstRuleMatcherItems(51, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterUserAzureSql), false, false, "alter_user_azure_sql")), new Bb.Asts.AstRuleMatcherItems(52, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterWorkloadGroup), false, false, "alter_workload_group")), new Bb.Asts.AstRuleMatcherItems(53, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateApplicationRole), false, false, "create_application_role")), new Bb.Asts.AstRuleMatcherItems(54, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateAssembly), false, false, "create_assembly")), new Bb.Asts.AstRuleMatcherItems(55, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateAsymmetricKey), false, false, "create_asymmetric_key")), new Bb.Asts.AstRuleMatcherItems(56, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateColumnEncryptionKey), false, false, "create_column_encryption_key")), new Bb.Asts.AstRuleMatcherItems(57, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateColumnMasterKey), false, false, "create_column_master_key")), new Bb.Asts.AstRuleMatcherItems(58, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateCredential), false, false, "create_credential")), new Bb.Asts.AstRuleMatcherItems(59, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateCryptographicProvider), false, false, "create_cryptographic_provider")), new Bb.Asts.AstRuleMatcherItems(60, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateDatabase), false, false, "create_database")), new Bb.Asts.AstRuleMatcherItems(61, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateDbRole), false, false, "create_db_role")), new Bb.Asts.AstRuleMatcherItems(62, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateEventNotification), false, false, "create_event_notification")), new Bb.Asts.AstRuleMatcherItems(63, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateExternalLibrary), false, false, "create_external_library")), new Bb.Asts.AstRuleMatcherItems(64, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateExternalResourcePool), false, false, "create_external_resource_pool")), new Bb.Asts.AstRuleMatcherItems(65, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateFulltextCatalog), false, false, "create_fulltext_catalog")), new Bb.Asts.AstRuleMatcherItems(66, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateFulltextStoplist), false, false, "create_fulltext_stoplist")), new Bb.Asts.AstRuleMatcherItems(67, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateIndex), false, false, "create_index")), new Bb.Asts.AstRuleMatcherItems(68, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateColumnstoreIndex), false, false, "create_columnstore_index")), new Bb.Asts.AstRuleMatcherItems(69, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateNonclusteredColumnstoreIndex), false, false, "create_nonclustered_columnstore_index")), new Bb.Asts.AstRuleMatcherItems(70, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateLoginAzureSql), false, false, "create_login_azure_sql")), new Bb.Asts.AstRuleMatcherItems(71, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateLoginPdw), false, false, "create_login_pdw")), new Bb.Asts.AstRuleMatcherItems(72, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateLoginSqlServer), false, false, "create_login_sql_server")), new Bb.Asts.AstRuleMatcherItems(73, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateMasterKeyAzureSql), false, false, "create_master_key_azure_sql")), new Bb.Asts.AstRuleMatcherItems(74, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateMasterKeySqlServer), false, false, "create_master_key_sql_server")), new Bb.Asts.AstRuleMatcherItems(75, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateOrAlterBrokerPriority), false, false, "create_or_alter_broker_priority")), new Bb.Asts.AstRuleMatcherItems(76, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateRemoteServiceBinding), false, false, "create_remote_service_binding")), new Bb.Asts.AstRuleMatcherItems(77, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateResourcePool), false, false, "create_resource_pool")), new Bb.Asts.AstRuleMatcherItems(78, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateRoute), false, false, "create_route")), new Bb.Asts.AstRuleMatcherItems(79, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateRule), false, false, "create_rule")), new Bb.Asts.AstRuleMatcherItems(80, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateSchema), false, false, "create_schema")), new Bb.Asts.AstRuleMatcherItems(81, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateSchemaAzureSqlDwAndPdw), false, false, "create_schema_azure_sql_dw_and_pdw")), new Bb.Asts.AstRuleMatcherItems(82, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateSearchPropertyList), false, false, "create_search_property_list")), new Bb.Asts.AstRuleMatcherItems(83, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateSecurityPolicy), false, false, "create_security_policy")), new Bb.Asts.AstRuleMatcherItems(84, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateSequence), false, false, "create_sequence")), new Bb.Asts.AstRuleMatcherItems(85, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateServerAudit), false, false, "create_server_audit")), new Bb.Asts.AstRuleMatcherItems(86, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateServerAuditSpecification), false, false, "create_server_audit_specification")), new Bb.Asts.AstRuleMatcherItems(87, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateServerRole), false, false, "create_server_role")), new Bb.Asts.AstRuleMatcherItems(88, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateService), false, false, "create_service")), new Bb.Asts.AstRuleMatcherItems(89, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateStatistics), false, false, "create_statistics")), new Bb.Asts.AstRuleMatcherItems(90, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateSynonym), false, false, "create_synonym")), new Bb.Asts.AstRuleMatcherItems(91, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateTable), false, false, "create_table")), new Bb.Asts.AstRuleMatcherItems(92, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateType), false, false, "create_type")), new Bb.Asts.AstRuleMatcherItems(93, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateUser), false, false, "create_user")), new Bb.Asts.AstRuleMatcherItems(94, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateUserAzureSqlDw), false, false, "create_user_azure_sql_dw")), new Bb.Asts.AstRuleMatcherItems(95, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateWorkloadGroup), false, false, "create_workload_group")), new Bb.Asts.AstRuleMatcherItems(96, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateXmlIndex), false, false, "create_xml_index")), new Bb.Asts.AstRuleMatcherItems(97, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateXmlSchemaCollection), false, false, "create_xml_schema_collection")), new Bb.Asts.AstRuleMatcherItems(98, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreatePartitionFunction), false, false, "create_partition_function")), new Bb.Asts.AstRuleMatcherItems(99, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreatePartitionScheme), false, false, "create_partition_scheme")), new Bb.Asts.AstRuleMatcherItems(100, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropAggregate), false, false, "drop_aggregate")), new Bb.Asts.AstRuleMatcherItems(101, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropApplicationRole), false, false, "drop_application_role")), new Bb.Asts.AstRuleMatcherItems(102, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropAssembly), false, false, "drop_assembly")), new Bb.Asts.AstRuleMatcherItems(103, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropAsymmetricKey), false, false, "drop_asymmetric_key")), new Bb.Asts.AstRuleMatcherItems(104, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropAvailabilityGroup), false, false, "drop_availability_group")), new Bb.Asts.AstRuleMatcherItems(105, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropBrokerPriority), false, false, "drop_broker_priority")), new Bb.Asts.AstRuleMatcherItems(106, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropCertificate), false, false, "drop_certificate")), new Bb.Asts.AstRuleMatcherItems(107, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropColumnEncryptionKey), false, false, "drop_column_encryption_key")), new Bb.Asts.AstRuleMatcherItems(108, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropColumnMasterKey), false, false, "drop_column_master_key")), new Bb.Asts.AstRuleMatcherItems(109, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropContract), false, false, "drop_contract")), new Bb.Asts.AstRuleMatcherItems(110, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropCredential), false, false, "drop_credential")), new Bb.Asts.AstRuleMatcherItems(111, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropCryptograhicProvider), false, false, "drop_cryptograhic_provider")), new Bb.Asts.AstRuleMatcherItems(112, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDatabase), false, false, "drop_database")), new Bb.Asts.AstRuleMatcherItems(113, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDatabaseAuditSpecification), false, false, "drop_database_audit_specification")), new Bb.Asts.AstRuleMatcherItems(114, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDatabaseEncryptionKey), false, false, "drop_database_encryption_key")), new Bb.Asts.AstRuleMatcherItems(115, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDatabaseScopedCredential), false, false, "drop_database_scoped_credential")), new Bb.Asts.AstRuleMatcherItems(116, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDbRole), false, false, "drop_db_role")), new Bb.Asts.AstRuleMatcherItems(117, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDefault), false, false, "drop_default")), new Bb.Asts.AstRuleMatcherItems(118, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropEndpoint), false, false, "drop_endpoint")), new Bb.Asts.AstRuleMatcherItems(119, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropEventNotifications), false, false, "drop_event_notifications")), new Bb.Asts.AstRuleMatcherItems(120, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropEventSession), false, false, "drop_event_session")), new Bb.Asts.AstRuleMatcherItems(121, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropExternalDataSource), false, false, "drop_external_data_source")), new Bb.Asts.AstRuleMatcherItems(122, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropExternalFileFormat), false, false, "drop_external_file_format")), new Bb.Asts.AstRuleMatcherItems(123, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropExternalLibrary), false, false, "drop_external_library")), new Bb.Asts.AstRuleMatcherItems(124, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropExternalResourcePool), false, false, "drop_external_resource_pool")), new Bb.Asts.AstRuleMatcherItems(125, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropExternalTable), false, false, "drop_external_table")), new Bb.Asts.AstRuleMatcherItems(126, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropFulltextCatalog), false, false, "drop_fulltext_catalog")), new Bb.Asts.AstRuleMatcherItems(127, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropFulltextIndex), false, false, "drop_fulltext_index")), new Bb.Asts.AstRuleMatcherItems(128, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropFulltextStoplist), false, false, "drop_fulltext_stoplist")), new Bb.Asts.AstRuleMatcherItems(129, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropFunction), false, false, "drop_function")), new Bb.Asts.AstRuleMatcherItems(130, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropIndex), false, false, "drop_index")), new Bb.Asts.AstRuleMatcherItems(131, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropLogin), false, false, "drop_login")), new Bb.Asts.AstRuleMatcherItems(132, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropMasterKey), false, false, "drop_master_key")), new Bb.Asts.AstRuleMatcherItems(133, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropMessageType), false, false, "drop_message_type")), new Bb.Asts.AstRuleMatcherItems(134, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropPartitionFunction), false, false, "drop_partition_function")), new Bb.Asts.AstRuleMatcherItems(135, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropPartitionScheme), false, false, "drop_partition_scheme")), new Bb.Asts.AstRuleMatcherItems(136, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropProcedure), false, false, "drop_procedure")), new Bb.Asts.AstRuleMatcherItems(137, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropQueue), false, false, "drop_queue")), new Bb.Asts.AstRuleMatcherItems(138, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropRemoteServiceBinding), false, false, "drop_remote_service_binding")), new Bb.Asts.AstRuleMatcherItems(139, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropResourcePool), false, false, "drop_resource_pool")), new Bb.Asts.AstRuleMatcherItems(140, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropRoute), false, false, "drop_route")), new Bb.Asts.AstRuleMatcherItems(141, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropRule), false, false, "drop_rule")), new Bb.Asts.AstRuleMatcherItems(142, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropSchema), false, false, "drop_schema")), new Bb.Asts.AstRuleMatcherItems(143, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropSearchPropertyList), false, false, "drop_search_property_list")), new Bb.Asts.AstRuleMatcherItems(144, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropSecurityPolicy), false, false, "drop_security_policy")), new Bb.Asts.AstRuleMatcherItems(145, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropSequence), false, false, "drop_sequence")), new Bb.Asts.AstRuleMatcherItems(146, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropServerAudit), false, false, "drop_server_audit")), new Bb.Asts.AstRuleMatcherItems(147, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropServerAuditSpecification), false, false, "drop_server_audit_specification")), new Bb.Asts.AstRuleMatcherItems(148, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropServerRole), false, false, "drop_server_role")), new Bb.Asts.AstRuleMatcherItems(149, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropService), false, false, "drop_service")), new Bb.Asts.AstRuleMatcherItems(150, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropSignature), false, false, "drop_signature")), new Bb.Asts.AstRuleMatcherItems(151, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropStatistics), false, false, "drop_statistics")), new Bb.Asts.AstRuleMatcherItems(152, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropStatisticsIdAzureDwAndPdw), false, false, "drop_statistics_id_azure_dw_and_pdw")), new Bb.Asts.AstRuleMatcherItems(153, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropSymmetricKey), false, false, "drop_symmetric_key")), new Bb.Asts.AstRuleMatcherItems(154, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropSynonym), false, false, "drop_synonym")), new Bb.Asts.AstRuleMatcherItems(155, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropTable), false, false, "drop_table")), new Bb.Asts.AstRuleMatcherItems(156, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDmlTrigger), false, false, "drop_dml_trigger")), new Bb.Asts.AstRuleMatcherItems(157, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropDdlTrigger), false, false, "drop_ddl_trigger")), new Bb.Asts.AstRuleMatcherItems(158, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropType), false, false, "drop_type")), new Bb.Asts.AstRuleMatcherItems(159, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropUser), false, false, "drop_user")), new Bb.Asts.AstRuleMatcherItems(160, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropView), false, false, "drop_view")), new Bb.Asts.AstRuleMatcherItems(161, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropWorkloadGroup), false, false, "drop_workload_group")), new Bb.Asts.AstRuleMatcherItems(162, new Bb.Asts.AstRuleMatcherItem(typeof(AstDropXmlSchemaCollection), false, false, "drop_xml_schema_collection")), new Bb.Asts.AstRuleMatcherItems(163, new Bb.Asts.AstRuleMatcherItem(typeof(AstDisableTrigger), false, false, "disable_trigger")), new Bb.Asts.AstRuleMatcherItems(164, new Bb.Asts.AstRuleMatcherItem(typeof(AstEnableTrigger), false, false, "enable_trigger")), new Bb.Asts.AstRuleMatcherItems(165, new Bb.Asts.AstRuleMatcherItem(typeof(AstLockTable), false, false, "lock_table")), new Bb.Asts.AstRuleMatcherItems(166, new Bb.Asts.AstRuleMatcherItem(typeof(AstTruncateTable), false, false, "truncate_table")), new Bb.Asts.AstRuleMatcherItems(167, new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateStatistics), false, false, "update_statistics")), new Bb.Asts.AstRuleMatcherItems(168, new Bb.Asts.AstRuleMatcherItem(typeof(AstBlockStatement), false, false, "block_statement")), new Bb.Asts.AstRuleMatcherItems(169, new Bb.Asts.AstRuleMatcherItem(typeof(AstBreakStatement), false, false, "break_statement")), new Bb.Asts.AstRuleMatcherItems(170, new Bb.Asts.AstRuleMatcherItem(typeof(AstContinueStatement), false, false, "continue_statement")), new Bb.Asts.AstRuleMatcherItems(171, new Bb.Asts.AstRuleMatcherItem(typeof(AstGotoStatement), false, false, "goto_statement")), new Bb.Asts.AstRuleMatcherItems(172, new Bb.Asts.AstRuleMatcherItem(typeof(AstIfStatement), false, false, "if_statement")), new Bb.Asts.AstRuleMatcherItems(173, new Bb.Asts.AstRuleMatcherItem(typeof(AstReturnStatement), false, false, "return_statement")), new Bb.Asts.AstRuleMatcherItems(174, new Bb.Asts.AstRuleMatcherItem(typeof(AstThrowStatement), false, false, "throw_statement")), new Bb.Asts.AstRuleMatcherItems(175, new Bb.Asts.AstRuleMatcherItem(typeof(AstTryCatchStatement), false, false, "try_catch_statement")), new Bb.Asts.AstRuleMatcherItems(176, new Bb.Asts.AstRuleMatcherItem(typeof(AstWaitforStatement), false, false, "waitfor_statement")), new Bb.Asts.AstRuleMatcherItems(177, new Bb.Asts.AstRuleMatcherItem(typeof(AstWhileStatement), false, false, "while_statement")), new Bb.Asts.AstRuleMatcherItems(178, new Bb.Asts.AstRuleMatcherItem(typeof(AstPrintStatement), false, false, "print_statement")), new Bb.Asts.AstRuleMatcherItems(179, new Bb.Asts.AstRuleMatcherItem(typeof(AstRaiseerrorStatement), false, false, "raiseerror_statement")), new Bb.Asts.AstRuleMatcherItems(180, new Bb.Asts.AstRuleMatcherItem(typeof(AstDeclareStatement), false, false, "declare_statement")), new Bb.Asts.AstRuleMatcherItems(181, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteStatement), false, false, "execute_statement")), new Bb.Asts.AstRuleMatcherItems(182, new Bb.Asts.AstRuleMatcherItem(typeof(AstCursorStatement), false, false, "cursor_statement")), new Bb.Asts.AstRuleMatcherItems(183, new Bb.Asts.AstRuleMatcherItem(typeof(AstBeginConversationTimer), false, false, "begin_conversation_timer")), new Bb.Asts.AstRuleMatcherItems(184, new Bb.Asts.AstRuleMatcherItem(typeof(AstBeginConversationDialog), false, false, "begin_conversation_dialog")), new Bb.Asts.AstRuleMatcherItems(185, new Bb.Asts.AstRuleMatcherItem(typeof(AstEndConversation), false, false, "end_conversation")), new Bb.Asts.AstRuleMatcherItems(186, new Bb.Asts.AstRuleMatcherItem(typeof(AstGetConversation), false, false, "get_conversation")), new Bb.Asts.AstRuleMatcherItems(187, new Bb.Asts.AstRuleMatcherItem(typeof(AstSendConversation), false, false, "send_conversation")), new Bb.Asts.AstRuleMatcherItems(188, new Bb.Asts.AstRuleMatcherItem(typeof(AstWaitforConversation), false, false, "waitfor_conversation")), new Bb.Asts.AstRuleMatcherItems(189, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateContract), false, false, "create_contract")), new Bb.Asts.AstRuleMatcherItems(190, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateQueue), false, false, "create_queue")), new Bb.Asts.AstRuleMatcherItems(191, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterQueue), false, false, "alter_queue")), new Bb.Asts.AstRuleMatcherItems(192, new Bb.Asts.AstRuleMatcherItem(typeof(AstKillStatement), false, false, "kill_statement")), new Bb.Asts.AstRuleMatcherItems(193, new Bb.Asts.AstRuleMatcherItem(typeof(AstMessageStatement), false, false, "message_statement")), new Bb.Asts.AstRuleMatcherItems(194, new Bb.Asts.AstRuleMatcherItem(typeof(AstSecurityStatement), false, false, "security_statement")), new Bb.Asts.AstRuleMatcherItems(195, new Bb.Asts.AstRuleMatcherItem(typeof(AstSetStatement), false, false, "set_statement")), new Bb.Asts.AstRuleMatcherItems(196, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionStatement), false, false, "transaction_statement")), new Bb.Asts.AstRuleMatcherItems(197, new Bb.Asts.AstRuleMatcherItem(typeof(AstUseStatement), false, false, "use_statement")), new Bb.Asts.AstRuleMatcherItems(198, new Bb.Asts.AstRuleMatcherItem(typeof(AstSetuserStatement), false, false, "setuser_statement")), new Bb.Asts.AstRuleMatcherItems(199, new Bb.Asts.AstRuleMatcherItem(typeof(AstReconfigureStatement), false, false, "reconfigure_statement")), new Bb.Asts.AstRuleMatcherItems(200, new Bb.Asts.AstRuleMatcherItem(typeof(AstShutdownStatement), false, false, "shutdown_statement")), new Bb.Asts.AstRuleMatcherItems(201, new Bb.Asts.AstRuleMatcherItem(typeof(AstCheckpointStatement), false, false, "checkpoint_statement")), new Bb.Asts.AstRuleMatcherItems(202, new Bb.Asts.AstRuleMatcherItem(typeof(AstBackupDatabase), false, false, "backup_database")), new Bb.Asts.AstRuleMatcherItems(203, new Bb.Asts.AstRuleMatcherItem(typeof(AstBackupLog), false, false, "backup_log")), new Bb.Asts.AstRuleMatcherItems(204, new Bb.Asts.AstRuleMatcherItem(typeof(AstBackupCertificate), false, false, "backup_certificate")), new Bb.Asts.AstRuleMatcherItems(205, new Bb.Asts.AstRuleMatcherItem(typeof(AstBackupMasterKey), false, false, "backup_master_key")), new Bb.Asts.AstRuleMatcherItems(206, new Bb.Asts.AstRuleMatcherItem(typeof(AstBackupServiceMasterKey), false, false, "backup_service_master_key")), new Bb.Asts.AstRuleMatcherItems(207, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbccSpecial), false, false, "dbcc_special")), new Bb.Asts.AstRuleMatcherItems(208, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbccClause), false, false, "dbcc_clause"))));
        
        private static string _ruleValue = "merge_statement\r\n | delete_statement\r\n | insert_statement\r\n | select_statement_st" +
            "andalone\r\n | update_statement\r\n | alter_application_role\r\n | alter_assembly\r\n | " +
            "alter_asymmetric_key\r\n | alter_authorization\r\n | alter_authorization_for_azure_d" +
            "w\r\n | alter_authorization_for_parallel_dw\r\n | alter_authorization_for_sql_databa" +
            "se\r\n | alter_availability_group\r\n | alter_certificate\r\n | alter_column_encryptio" +
            "n_key\r\n | alter_credential\r\n | alter_cryptographic_provider\r\n | alter_database\r\n" +
            " | alter_db_role\r\n | alter_endpoint\r\n | create_or_alter_event_session\r\n | alter_" +
            "external_data_source\r\n | alter_external_library\r\n | alter_external_resource_pool" +
            "\r\n | alter_fulltext_catalog\r\n | alter_fulltext_stoplist\r\n | alter_index\r\n | alte" +
            "r_login_azure_sql\r\n | alter_login_azure_sql_dw_and_pdw\r\n | alter_login_sql_serve" +
            "r\r\n | alter_master_key_azure_sql\r\n | alter_master_key_sql_server\r\n | alter_messa" +
            "ge_type\r\n | alter_partition_function\r\n | alter_partition_scheme\r\n | alter_remote" +
            "_service_binding\r\n | alter_resource_governor\r\n | alter_schema_azure_sql_dw_and_p" +
            "dw\r\n | alter_schema_sql\r\n | alter_sequence\r\n | alter_server_audit\r\n | alter_serv" +
            "er_audit_specification\r\n | alter_server_configuration\r\n | alter_server_role\r\n | " +
            "alter_server_role_pdw\r\n | alter_service\r\n | alter_service_master_key\r\n | alter_s" +
            "ymmetric_key\r\n | alter_table\r\n | alter_user\r\n | alter_user_azure_sql\r\n | alter_w" +
            "orkload_group\r\n | create_application_role\r\n | create_assembly\r\n | create_asymmet" +
            "ric_key\r\n | create_column_encryption_key\r\n | create_column_master_key\r\n | create" +
            "_credential\r\n | create_cryptographic_provider\r\n | create_database\r\n | create_db_" +
            "role\r\n | create_event_notification\r\n | create_external_library\r\n | create_extern" +
            "al_resource_pool\r\n | create_fulltext_catalog\r\n | create_fulltext_stoplist\r\n | cr" +
            "eate_index\r\n | create_columnstore_index\r\n | create_nonclustered_columnstore_inde" +
            "x\r\n | create_login_azure_sql\r\n | create_login_pdw\r\n | create_login_sql_server\r\n " +
            "| create_master_key_azure_sql\r\n | create_master_key_sql_server\r\n | create_or_alt" +
            "er_broker_priority\r\n | create_remote_service_binding\r\n | create_resource_pool\r\n " +
            "| create_route\r\n | create_rule\r\n | create_schema\r\n | create_schema_azure_sql_dw_" +
            "and_pdw\r\n | create_search_property_list\r\n | create_security_policy\r\n | create_se" +
            "quence\r\n | create_server_audit\r\n | create_server_audit_specification\r\n | create_" +
            "server_role\r\n | create_service\r\n | create_statistics\r\n | create_synonym\r\n | crea" +
            "te_table\r\n | create_type\r\n | create_user\r\n | create_user_azure_sql_dw\r\n | create" +
            "_workload_group\r\n | create_xml_index\r\n | create_xml_schema_collection\r\n | create" +
            "_partition_function\r\n | create_partition_scheme\r\n | drop_aggregate\r\n | drop_appl" +
            "ication_role\r\n | drop_assembly\r\n | drop_asymmetric_key\r\n | drop_availability_gro" +
            "up\r\n | drop_broker_priority\r\n | drop_certificate\r\n | drop_column_encryption_key\r" +
            "\n | drop_column_master_key\r\n | drop_contract\r\n | drop_credential\r\n | drop_crypto" +
            "grahic_provider\r\n | drop_database\r\n | drop_database_audit_specification\r\n | drop" +
            "_database_encryption_key\r\n | drop_database_scoped_credential\r\n | drop_db_role\r\n " +
            "| drop_default\r\n | drop_endpoint\r\n | drop_event_notifications\r\n | drop_event_ses" +
            "sion\r\n | drop_external_data_source\r\n | drop_external_file_format\r\n | drop_extern" +
            "al_library\r\n | drop_external_resource_pool\r\n | drop_external_table\r\n | drop_full" +
            "text_catalog\r\n | drop_fulltext_index\r\n | drop_fulltext_stoplist\r\n | drop_functio" +
            "n\r\n | drop_index\r\n | drop_login\r\n | drop_master_key\r\n | drop_message_type\r\n | dr" +
            "op_partition_function\r\n | drop_partition_scheme\r\n | drop_procedure\r\n | drop_queu" +
            "e\r\n | drop_remote_service_binding\r\n | drop_resource_pool\r\n | drop_route\r\n | drop" +
            "_rule\r\n | drop_schema\r\n | drop_search_property_list\r\n | drop_security_policy\r\n |" +
            " drop_sequence\r\n | drop_server_audit\r\n | drop_server_audit_specification\r\n | dro" +
            "p_server_role\r\n | drop_service\r\n | drop_signature\r\n | drop_statistics\r\n | drop_s" +
            "tatistics_id_azure_dw_and_pdw\r\n | drop_symmetric_key\r\n | drop_synonym\r\n | drop_t" +
            "able\r\n | drop_dml_trigger\r\n | drop_ddl_trigger\r\n | drop_type\r\n | drop_user\r\n | d" +
            "rop_view\r\n | drop_workload_group\r\n | drop_xml_schema_collection\r\n | disable_trig" +
            "ger\r\n | enable_trigger\r\n | lock_table\r\n | truncate_table\r\n | update_statistics\r\n" +
            " | block_statement\r\n | break_statement\r\n | continue_statement\r\n | goto_statement" +
            "\r\n | if_statement\r\n | return_statement\r\n | throw_statement\r\n | try_catch_stateme" +
            "nt\r\n | waitfor_statement\r\n | while_statement\r\n | print_statement\r\n | raiseerror_" +
            "statement\r\n | declare_statement\r\n | execute_statement\r\n | cursor_statement\r\n | b" +
            "egin_conversation_timer\r\n | begin_conversation_dialog\r\n | end_conversation\r\n | g" +
            "et_conversation\r\n | send_conversation\r\n | waitfor_conversation\r\n | create_contra" +
            "ct\r\n | create_queue\r\n | alter_queue\r\n | kill_statement\r\n | message_statement\r\n |" +
            " security_statement\r\n | set_statement\r\n | transaction_statement\r\n | use_statemen" +
            "t\r\n | setuser_statement\r\n | reconfigure_statement\r\n | shutdown_statement\r\n | che" +
            "ckpoint_statement\r\n | backup_database\r\n | backup_log\r\n | backup_certificate\r\n | " +
            "backup_master_key\r\n | backup_service_master_key\r\n | dbcc_special\r\n | dbcc_clause" +
            "\r\n";
        
        private static string _ruleName = "sql_clause";
        
        /// <summary>
        /// sql_clause : merge_statement 
        /// </summary>
        public partial class AstSqlClause1 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstMergeStatement _mergeStatement;
            
            internal AstSqlClause1(ParserRuleContext ctx, AstMergeStatement mergeStatement) : 
                    base(ctx)
            {
                _mergeStatement = mergeStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMergeStatement MergeStatement
            {
                get
                {
                    return _mergeStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : delete_statement 
        /// </summary>
        public partial class AstSqlClause2 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDeleteStatement _deleteStatement;
            
            internal AstSqlClause2(ParserRuleContext ctx, AstDeleteStatement deleteStatement) : 
                    base(ctx)
            {
                _deleteStatement = deleteStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDeleteStatement DeleteStatement
            {
                get
                {
                    return _deleteStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : insert_statement 
        /// </summary>
        public partial class AstSqlClause3 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstInsertStatement _insertStatement;
            
            internal AstSqlClause3(ParserRuleContext ctx, AstInsertStatement insertStatement) : 
                    base(ctx)
            {
                _insertStatement = insertStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstInsertStatement InsertStatement
            {
                get
                {
                    return _insertStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : select_statement_standalone 
        /// </summary>
        public partial class AstSqlClause4 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstSelectStatementStandalone _selectStatementStandalone;
            
            internal AstSqlClause4(ParserRuleContext ctx, AstSelectStatementStandalone selectStatementStandalone) : 
                    base(ctx)
            {
                _selectStatementStandalone = selectStatementStandalone;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSelectStatementStandalone SelectStatementStandalone
            {
                get
                {
                    return _selectStatementStandalone;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : update_statement 
        /// </summary>
        public partial class AstSqlClause5 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstUpdateStatement _updateStatement;
            
            internal AstSqlClause5(ParserRuleContext ctx, AstUpdateStatement updateStatement) : 
                    base(ctx)
            {
                _updateStatement = updateStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUpdateStatement UpdateStatement
            {
                get
                {
                    return _updateStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_application_role 
        /// </summary>
        public partial class AstSqlClause6 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterApplicationRole _alterApplicationRole;
            
            internal AstSqlClause6(ParserRuleContext ctx, AstAlterApplicationRole alterApplicationRole) : 
                    base(ctx)
            {
                _alterApplicationRole = alterApplicationRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterApplicationRole AlterApplicationRole
            {
                get
                {
                    return _alterApplicationRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_assembly 
        /// </summary>
        public partial class AstSqlClause7 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterAssembly _alterAssembly;
            
            internal AstSqlClause7(ParserRuleContext ctx, AstAlterAssembly alterAssembly) : 
                    base(ctx)
            {
                _alterAssembly = alterAssembly;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAssembly AlterAssembly
            {
                get
                {
                    return _alterAssembly;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_asymmetric_key 
        /// </summary>
        public partial class AstSqlClause8 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterAsymmetricKey _alterAsymmetricKey;
            
            internal AstSqlClause8(ParserRuleContext ctx, AstAlterAsymmetricKey alterAsymmetricKey) : 
                    base(ctx)
            {
                _alterAsymmetricKey = alterAsymmetricKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAsymmetricKey AlterAsymmetricKey
            {
                get
                {
                    return _alterAsymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization 
        /// </summary>
        public partial class AstSqlClause9 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterAuthorization _alterAuthorization;
            
            internal AstSqlClause9(ParserRuleContext ctx, AstAlterAuthorization alterAuthorization) : 
                    base(ctx)
            {
                _alterAuthorization = alterAuthorization;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAuthorization AlterAuthorization
            {
                get
                {
                    return _alterAuthorization;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization_for_azure_dw 
        /// </summary>
        public partial class AstSqlClause10 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterAuthorizationForAzureDw _alterAuthorizationForAzureDw;
            
            internal AstSqlClause10(ParserRuleContext ctx, AstAlterAuthorizationForAzureDw alterAuthorizationForAzureDw) : 
                    base(ctx)
            {
                _alterAuthorizationForAzureDw = alterAuthorizationForAzureDw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAuthorizationForAzureDw AlterAuthorizationForAzureDw
            {
                get
                {
                    return _alterAuthorizationForAzureDw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization_for_parallel_dw 
        /// </summary>
        public partial class AstSqlClause11 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterAuthorizationForParallelDw _alterAuthorizationForParallelDw;
            
            internal AstSqlClause11(ParserRuleContext ctx, AstAlterAuthorizationForParallelDw alterAuthorizationForParallelDw) : 
                    base(ctx)
            {
                _alterAuthorizationForParallelDw = alterAuthorizationForParallelDw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAuthorizationForParallelDw AlterAuthorizationForParallelDw
            {
                get
                {
                    return _alterAuthorizationForParallelDw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization_for_sql_database 
        /// </summary>
        public partial class AstSqlClause12 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterAuthorizationForSqlDatabase _alterAuthorizationForSqlDatabase;
            
            internal AstSqlClause12(ParserRuleContext ctx, AstAlterAuthorizationForSqlDatabase alterAuthorizationForSqlDatabase) : 
                    base(ctx)
            {
                _alterAuthorizationForSqlDatabase = alterAuthorizationForSqlDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAuthorizationForSqlDatabase AlterAuthorizationForSqlDatabase
            {
                get
                {
                    return _alterAuthorizationForSqlDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_availability_group 
        /// </summary>
        public partial class AstSqlClause13 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterAvailabilityGroup _alterAvailabilityGroup;
            
            internal AstSqlClause13(ParserRuleContext ctx, AstAlterAvailabilityGroup alterAvailabilityGroup) : 
                    base(ctx)
            {
                _alterAvailabilityGroup = alterAvailabilityGroup;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAvailabilityGroup AlterAvailabilityGroup
            {
                get
                {
                    return _alterAvailabilityGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_certificate 
        /// </summary>
        public partial class AstSqlClause14 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterCertificate _alterCertificate;
            
            internal AstSqlClause14(ParserRuleContext ctx, AstAlterCertificate alterCertificate) : 
                    base(ctx)
            {
                _alterCertificate = alterCertificate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterCertificate AlterCertificate
            {
                get
                {
                    return _alterCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_column_encryption_key 
        /// </summary>
        public partial class AstSqlClause15 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterColumnEncryptionKey _alterColumnEncryptionKey;
            
            internal AstSqlClause15(ParserRuleContext ctx, AstAlterColumnEncryptionKey alterColumnEncryptionKey) : 
                    base(ctx)
            {
                _alterColumnEncryptionKey = alterColumnEncryptionKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterColumnEncryptionKey AlterColumnEncryptionKey
            {
                get
                {
                    return _alterColumnEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_credential 
        /// </summary>
        public partial class AstSqlClause16 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterCredential _alterCredential;
            
            internal AstSqlClause16(ParserRuleContext ctx, AstAlterCredential alterCredential) : 
                    base(ctx)
            {
                _alterCredential = alterCredential;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterCredential AlterCredential
            {
                get
                {
                    return _alterCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_cryptographic_provider 
        /// </summary>
        public partial class AstSqlClause17 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterCryptographicProvider _alterCryptographicProvider;
            
            internal AstSqlClause17(ParserRuleContext ctx, AstAlterCryptographicProvider alterCryptographicProvider) : 
                    base(ctx)
            {
                _alterCryptographicProvider = alterCryptographicProvider;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterCryptographicProvider AlterCryptographicProvider
            {
                get
                {
                    return _alterCryptographicProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_database 
        /// </summary>
        public partial class AstSqlClause18 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterDatabase _alterDatabase;
            
            internal AstSqlClause18(ParserRuleContext ctx, AstAlterDatabase alterDatabase) : 
                    base(ctx)
            {
                _alterDatabase = alterDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterDatabase AlterDatabase
            {
                get
                {
                    return _alterDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_db_role 
        /// </summary>
        public partial class AstSqlClause19 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterDbRole _alterDbRole;
            
            internal AstSqlClause19(ParserRuleContext ctx, AstAlterDbRole alterDbRole) : 
                    base(ctx)
            {
                _alterDbRole = alterDbRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterDbRole AlterDbRole
            {
                get
                {
                    return _alterDbRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_endpoint 
        /// </summary>
        public partial class AstSqlClause20 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterEndpoint _alterEndpoint;
            
            internal AstSqlClause20(ParserRuleContext ctx, AstAlterEndpoint alterEndpoint) : 
                    base(ctx)
            {
                _alterEndpoint = alterEndpoint;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterEndpoint AlterEndpoint
            {
                get
                {
                    return _alterEndpoint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_or_alter_event_session 
        /// </summary>
        public partial class AstSqlClause21 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateOrAlterEventSession _createOrAlterEventSession;
            
            internal AstSqlClause21(ParserRuleContext ctx, AstCreateOrAlterEventSession createOrAlterEventSession) : 
                    base(ctx)
            {
                _createOrAlterEventSession = createOrAlterEventSession;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateOrAlterEventSession CreateOrAlterEventSession
            {
                get
                {
                    return _createOrAlterEventSession;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_external_data_source 
        /// </summary>
        public partial class AstSqlClause22 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterExternalDataSource _alterExternalDataSource;
            
            internal AstSqlClause22(ParserRuleContext ctx, AstAlterExternalDataSource alterExternalDataSource) : 
                    base(ctx)
            {
                _alterExternalDataSource = alterExternalDataSource;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterExternalDataSource AlterExternalDataSource
            {
                get
                {
                    return _alterExternalDataSource;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_external_library 
        /// </summary>
        public partial class AstSqlClause23 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterExternalLibrary _alterExternalLibrary;
            
            internal AstSqlClause23(ParserRuleContext ctx, AstAlterExternalLibrary alterExternalLibrary) : 
                    base(ctx)
            {
                _alterExternalLibrary = alterExternalLibrary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterExternalLibrary AlterExternalLibrary
            {
                get
                {
                    return _alterExternalLibrary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_external_resource_pool 
        /// </summary>
        public partial class AstSqlClause24 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterExternalResourcePool _alterExternalResourcePool;
            
            internal AstSqlClause24(ParserRuleContext ctx, AstAlterExternalResourcePool alterExternalResourcePool) : 
                    base(ctx)
            {
                _alterExternalResourcePool = alterExternalResourcePool;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterExternalResourcePool AlterExternalResourcePool
            {
                get
                {
                    return _alterExternalResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_fulltext_catalog 
        /// </summary>
        public partial class AstSqlClause25 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterFulltextCatalog _alterFulltextCatalog;
            
            internal AstSqlClause25(ParserRuleContext ctx, AstAlterFulltextCatalog alterFulltextCatalog) : 
                    base(ctx)
            {
                _alterFulltextCatalog = alterFulltextCatalog;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterFulltextCatalog AlterFulltextCatalog
            {
                get
                {
                    return _alterFulltextCatalog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_fulltext_stoplist 
        /// </summary>
        public partial class AstSqlClause26 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterFulltextStoplist _alterFulltextStoplist;
            
            internal AstSqlClause26(ParserRuleContext ctx, AstAlterFulltextStoplist alterFulltextStoplist) : 
                    base(ctx)
            {
                _alterFulltextStoplist = alterFulltextStoplist;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterFulltextStoplist AlterFulltextStoplist
            {
                get
                {
                    return _alterFulltextStoplist;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_index 
        /// </summary>
        public partial class AstSqlClause27 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterIndex _alterIndex;
            
            internal AstSqlClause27(ParserRuleContext ctx, AstAlterIndex alterIndex) : 
                    base(ctx)
            {
                _alterIndex = alterIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterIndex AlterIndex
            {
                get
                {
                    return _alterIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_login_azure_sql 
        /// </summary>
        public partial class AstSqlClause28 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterLoginAzureSql _alterLoginAzureSql;
            
            internal AstSqlClause28(ParserRuleContext ctx, AstAlterLoginAzureSql alterLoginAzureSql) : 
                    base(ctx)
            {
                _alterLoginAzureSql = alterLoginAzureSql;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterLoginAzureSql AlterLoginAzureSql
            {
                get
                {
                    return _alterLoginAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_login_azure_sql_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause29 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterLoginAzureSqlDwAndPdw _alterLoginAzureSqlDwAndPdw;
            
            internal AstSqlClause29(ParserRuleContext ctx, AstAlterLoginAzureSqlDwAndPdw alterLoginAzureSqlDwAndPdw) : 
                    base(ctx)
            {
                _alterLoginAzureSqlDwAndPdw = alterLoginAzureSqlDwAndPdw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterLoginAzureSqlDwAndPdw AlterLoginAzureSqlDwAndPdw
            {
                get
                {
                    return _alterLoginAzureSqlDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_login_sql_server 
        /// </summary>
        public partial class AstSqlClause30 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterLoginSqlServer _alterLoginSqlServer;
            
            internal AstSqlClause30(ParserRuleContext ctx, AstAlterLoginSqlServer alterLoginSqlServer) : 
                    base(ctx)
            {
                _alterLoginSqlServer = alterLoginSqlServer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterLoginSqlServer AlterLoginSqlServer
            {
                get
                {
                    return _alterLoginSqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_master_key_azure_sql 
        /// </summary>
        public partial class AstSqlClause31 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterMasterKeyAzureSql _alterMasterKeyAzureSql;
            
            internal AstSqlClause31(ParserRuleContext ctx, AstAlterMasterKeyAzureSql alterMasterKeyAzureSql) : 
                    base(ctx)
            {
                _alterMasterKeyAzureSql = alterMasterKeyAzureSql;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql
            {
                get
                {
                    return _alterMasterKeyAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_master_key_sql_server 
        /// </summary>
        public partial class AstSqlClause32 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterMasterKeySqlServer _alterMasterKeySqlServer;
            
            internal AstSqlClause32(ParserRuleContext ctx, AstAlterMasterKeySqlServer alterMasterKeySqlServer) : 
                    base(ctx)
            {
                _alterMasterKeySqlServer = alterMasterKeySqlServer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterMasterKeySqlServer AlterMasterKeySqlServer
            {
                get
                {
                    return _alterMasterKeySqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_message_type 
        /// </summary>
        public partial class AstSqlClause33 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterMessageType _alterMessageType;
            
            internal AstSqlClause33(ParserRuleContext ctx, AstAlterMessageType alterMessageType) : 
                    base(ctx)
            {
                _alterMessageType = alterMessageType;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterMessageType AlterMessageType
            {
                get
                {
                    return _alterMessageType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_partition_function 
        /// </summary>
        public partial class AstSqlClause34 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterPartitionFunction _alterPartitionFunction;
            
            internal AstSqlClause34(ParserRuleContext ctx, AstAlterPartitionFunction alterPartitionFunction) : 
                    base(ctx)
            {
                _alterPartitionFunction = alterPartitionFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterPartitionFunction AlterPartitionFunction
            {
                get
                {
                    return _alterPartitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_partition_scheme 
        /// </summary>
        public partial class AstSqlClause35 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterPartitionScheme _alterPartitionScheme;
            
            internal AstSqlClause35(ParserRuleContext ctx, AstAlterPartitionScheme alterPartitionScheme) : 
                    base(ctx)
            {
                _alterPartitionScheme = alterPartitionScheme;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterPartitionScheme AlterPartitionScheme
            {
                get
                {
                    return _alterPartitionScheme;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_remote_service_binding 
        /// </summary>
        public partial class AstSqlClause36 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterRemoteServiceBinding _alterRemoteServiceBinding;
            
            internal AstSqlClause36(ParserRuleContext ctx, AstAlterRemoteServiceBinding alterRemoteServiceBinding) : 
                    base(ctx)
            {
                _alterRemoteServiceBinding = alterRemoteServiceBinding;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterRemoteServiceBinding AlterRemoteServiceBinding
            {
                get
                {
                    return _alterRemoteServiceBinding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_resource_governor 
        /// </summary>
        public partial class AstSqlClause37 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterResourceGovernor _alterResourceGovernor;
            
            internal AstSqlClause37(ParserRuleContext ctx, AstAlterResourceGovernor alterResourceGovernor) : 
                    base(ctx)
            {
                _alterResourceGovernor = alterResourceGovernor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterResourceGovernor AlterResourceGovernor
            {
                get
                {
                    return _alterResourceGovernor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause38 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterSchemaAzureSqlDwAndPdw _alterSchemaAzureSqlDwAndPdw;
            
            internal AstSqlClause38(ParserRuleContext ctx, AstAlterSchemaAzureSqlDwAndPdw alterSchemaAzureSqlDwAndPdw) : 
                    base(ctx)
            {
                _alterSchemaAzureSqlDwAndPdw = alterSchemaAzureSqlDwAndPdw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterSchemaAzureSqlDwAndPdw AlterSchemaAzureSqlDwAndPdw
            {
                get
                {
                    return _alterSchemaAzureSqlDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_schema_sql 
        /// </summary>
        public partial class AstSqlClause39 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterSchemaSql _alterSchemaSql;
            
            internal AstSqlClause39(ParserRuleContext ctx, AstAlterSchemaSql alterSchemaSql) : 
                    base(ctx)
            {
                _alterSchemaSql = alterSchemaSql;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterSchemaSql AlterSchemaSql
            {
                get
                {
                    return _alterSchemaSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_sequence 
        /// </summary>
        public partial class AstSqlClause40 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterSequence _alterSequence;
            
            internal AstSqlClause40(ParserRuleContext ctx, AstAlterSequence alterSequence) : 
                    base(ctx)
            {
                _alterSequence = alterSequence;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterSequence AlterSequence
            {
                get
                {
                    return _alterSequence;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_audit 
        /// </summary>
        public partial class AstSqlClause41 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterServerAudit _alterServerAudit;
            
            internal AstSqlClause41(ParserRuleContext ctx, AstAlterServerAudit alterServerAudit) : 
                    base(ctx)
            {
                _alterServerAudit = alterServerAudit;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterServerAudit AlterServerAudit
            {
                get
                {
                    return _alterServerAudit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_audit_specification 
        /// </summary>
        public partial class AstSqlClause42 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterServerAuditSpecification _alterServerAuditSpecification;
            
            internal AstSqlClause42(ParserRuleContext ctx, AstAlterServerAuditSpecification alterServerAuditSpecification) : 
                    base(ctx)
            {
                _alterServerAuditSpecification = alterServerAuditSpecification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterServerAuditSpecification AlterServerAuditSpecification
            {
                get
                {
                    return _alterServerAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_configuration 
        /// </summary>
        public partial class AstSqlClause43 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterServerConfiguration _alterServerConfiguration;
            
            internal AstSqlClause43(ParserRuleContext ctx, AstAlterServerConfiguration alterServerConfiguration) : 
                    base(ctx)
            {
                _alterServerConfiguration = alterServerConfiguration;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterServerConfiguration AlterServerConfiguration
            {
                get
                {
                    return _alterServerConfiguration;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_role 
        /// </summary>
        public partial class AstSqlClause44 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterServerRole _alterServerRole;
            
            internal AstSqlClause44(ParserRuleContext ctx, AstAlterServerRole alterServerRole) : 
                    base(ctx)
            {
                _alterServerRole = alterServerRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterServerRole AlterServerRole
            {
                get
                {
                    return _alterServerRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_role_pdw 
        /// </summary>
        public partial class AstSqlClause45 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterServerRolePdw _alterServerRolePdw;
            
            internal AstSqlClause45(ParserRuleContext ctx, AstAlterServerRolePdw alterServerRolePdw) : 
                    base(ctx)
            {
                _alterServerRolePdw = alterServerRolePdw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterServerRolePdw AlterServerRolePdw
            {
                get
                {
                    return _alterServerRolePdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_service 
        /// </summary>
        public partial class AstSqlClause46 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterService _alterService;
            
            internal AstSqlClause46(ParserRuleContext ctx, AstAlterService alterService) : 
                    base(ctx)
            {
                _alterService = alterService;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterService AlterService
            {
                get
                {
                    return _alterService;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_service_master_key 
        /// </summary>
        public partial class AstSqlClause47 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterServiceMasterKey _alterServiceMasterKey;
            
            internal AstSqlClause47(ParserRuleContext ctx, AstAlterServiceMasterKey alterServiceMasterKey) : 
                    base(ctx)
            {
                _alterServiceMasterKey = alterServiceMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterServiceMasterKey AlterServiceMasterKey
            {
                get
                {
                    return _alterServiceMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_symmetric_key 
        /// </summary>
        public partial class AstSqlClause48 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterSymmetricKey _alterSymmetricKey;
            
            internal AstSqlClause48(ParserRuleContext ctx, AstAlterSymmetricKey alterSymmetricKey) : 
                    base(ctx)
            {
                _alterSymmetricKey = alterSymmetricKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterSymmetricKey AlterSymmetricKey
            {
                get
                {
                    return _alterSymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_table 
        /// </summary>
        public partial class AstSqlClause49 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterTable _alterTable;
            
            internal AstSqlClause49(ParserRuleContext ctx, AstAlterTable alterTable) : 
                    base(ctx)
            {
                _alterTable = alterTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterTable AlterTable
            {
                get
                {
                    return _alterTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_user 
        /// </summary>
        public partial class AstSqlClause50 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterUser _alterUser;
            
            internal AstSqlClause50(ParserRuleContext ctx, AstAlterUser alterUser) : 
                    base(ctx)
            {
                _alterUser = alterUser;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterUser AlterUser
            {
                get
                {
                    return _alterUser;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_user_azure_sql 
        /// </summary>
        public partial class AstSqlClause51 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterUserAzureSql _alterUserAzureSql;
            
            internal AstSqlClause51(ParserRuleContext ctx, AstAlterUserAzureSql alterUserAzureSql) : 
                    base(ctx)
            {
                _alterUserAzureSql = alterUserAzureSql;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterUserAzureSql AlterUserAzureSql
            {
                get
                {
                    return _alterUserAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_workload_group 
        /// </summary>
        public partial class AstSqlClause52 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterWorkloadGroup _alterWorkloadGroup;
            
            internal AstSqlClause52(ParserRuleContext ctx, AstAlterWorkloadGroup alterWorkloadGroup) : 
                    base(ctx)
            {
                _alterWorkloadGroup = alterWorkloadGroup;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterWorkloadGroup AlterWorkloadGroup
            {
                get
                {
                    return _alterWorkloadGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_application_role 
        /// </summary>
        public partial class AstSqlClause53 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateApplicationRole _createApplicationRole;
            
            internal AstSqlClause53(ParserRuleContext ctx, AstCreateApplicationRole createApplicationRole) : 
                    base(ctx)
            {
                _createApplicationRole = createApplicationRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateApplicationRole CreateApplicationRole
            {
                get
                {
                    return _createApplicationRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_assembly 
        /// </summary>
        public partial class AstSqlClause54 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateAssembly _createAssembly;
            
            internal AstSqlClause54(ParserRuleContext ctx, AstCreateAssembly createAssembly) : 
                    base(ctx)
            {
                _createAssembly = createAssembly;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateAssembly CreateAssembly
            {
                get
                {
                    return _createAssembly;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_asymmetric_key 
        /// </summary>
        public partial class AstSqlClause55 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateAsymmetricKey _createAsymmetricKey;
            
            internal AstSqlClause55(ParserRuleContext ctx, AstCreateAsymmetricKey createAsymmetricKey) : 
                    base(ctx)
            {
                _createAsymmetricKey = createAsymmetricKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateAsymmetricKey CreateAsymmetricKey
            {
                get
                {
                    return _createAsymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_column_encryption_key 
        /// </summary>
        public partial class AstSqlClause56 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateColumnEncryptionKey _createColumnEncryptionKey;
            
            internal AstSqlClause56(ParserRuleContext ctx, AstCreateColumnEncryptionKey createColumnEncryptionKey) : 
                    base(ctx)
            {
                _createColumnEncryptionKey = createColumnEncryptionKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateColumnEncryptionKey CreateColumnEncryptionKey
            {
                get
                {
                    return _createColumnEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_column_master_key 
        /// </summary>
        public partial class AstSqlClause57 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateColumnMasterKey _createColumnMasterKey;
            
            internal AstSqlClause57(ParserRuleContext ctx, AstCreateColumnMasterKey createColumnMasterKey) : 
                    base(ctx)
            {
                _createColumnMasterKey = createColumnMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateColumnMasterKey CreateColumnMasterKey
            {
                get
                {
                    return _createColumnMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_credential 
        /// </summary>
        public partial class AstSqlClause58 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateCredential _createCredential;
            
            internal AstSqlClause58(ParserRuleContext ctx, AstCreateCredential createCredential) : 
                    base(ctx)
            {
                _createCredential = createCredential;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateCredential CreateCredential
            {
                get
                {
                    return _createCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_cryptographic_provider 
        /// </summary>
        public partial class AstSqlClause59 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateCryptographicProvider _createCryptographicProvider;
            
            internal AstSqlClause59(ParserRuleContext ctx, AstCreateCryptographicProvider createCryptographicProvider) : 
                    base(ctx)
            {
                _createCryptographicProvider = createCryptographicProvider;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateCryptographicProvider CreateCryptographicProvider
            {
                get
                {
                    return _createCryptographicProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_database 
        /// </summary>
        public partial class AstSqlClause60 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateDatabase _createDatabase;
            
            internal AstSqlClause60(ParserRuleContext ctx, AstCreateDatabase createDatabase) : 
                    base(ctx)
            {
                _createDatabase = createDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateDatabase CreateDatabase
            {
                get
                {
                    return _createDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_db_role 
        /// </summary>
        public partial class AstSqlClause61 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateDbRole _createDbRole;
            
            internal AstSqlClause61(ParserRuleContext ctx, AstCreateDbRole createDbRole) : 
                    base(ctx)
            {
                _createDbRole = createDbRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateDbRole CreateDbRole
            {
                get
                {
                    return _createDbRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_event_notification 
        /// </summary>
        public partial class AstSqlClause62 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateEventNotification _createEventNotification;
            
            internal AstSqlClause62(ParserRuleContext ctx, AstCreateEventNotification createEventNotification) : 
                    base(ctx)
            {
                _createEventNotification = createEventNotification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateEventNotification CreateEventNotification
            {
                get
                {
                    return _createEventNotification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_external_library 
        /// </summary>
        public partial class AstSqlClause63 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateExternalLibrary _createExternalLibrary;
            
            internal AstSqlClause63(ParserRuleContext ctx, AstCreateExternalLibrary createExternalLibrary) : 
                    base(ctx)
            {
                _createExternalLibrary = createExternalLibrary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateExternalLibrary CreateExternalLibrary
            {
                get
                {
                    return _createExternalLibrary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_external_resource_pool 
        /// </summary>
        public partial class AstSqlClause64 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateExternalResourcePool _createExternalResourcePool;
            
            internal AstSqlClause64(ParserRuleContext ctx, AstCreateExternalResourcePool createExternalResourcePool) : 
                    base(ctx)
            {
                _createExternalResourcePool = createExternalResourcePool;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateExternalResourcePool CreateExternalResourcePool
            {
                get
                {
                    return _createExternalResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_fulltext_catalog 
        /// </summary>
        public partial class AstSqlClause65 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateFulltextCatalog _createFulltextCatalog;
            
            internal AstSqlClause65(ParserRuleContext ctx, AstCreateFulltextCatalog createFulltextCatalog) : 
                    base(ctx)
            {
                _createFulltextCatalog = createFulltextCatalog;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateFulltextCatalog CreateFulltextCatalog
            {
                get
                {
                    return _createFulltextCatalog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_fulltext_stoplist 
        /// </summary>
        public partial class AstSqlClause66 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateFulltextStoplist _createFulltextStoplist;
            
            internal AstSqlClause66(ParserRuleContext ctx, AstCreateFulltextStoplist createFulltextStoplist) : 
                    base(ctx)
            {
                _createFulltextStoplist = createFulltextStoplist;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateFulltextStoplist CreateFulltextStoplist
            {
                get
                {
                    return _createFulltextStoplist;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_index 
        /// </summary>
        public partial class AstSqlClause67 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateIndex _createIndex;
            
            internal AstSqlClause67(ParserRuleContext ctx, AstCreateIndex createIndex) : 
                    base(ctx)
            {
                _createIndex = createIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateIndex CreateIndex
            {
                get
                {
                    return _createIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_columnstore_index 
        /// </summary>
        public partial class AstSqlClause68 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateColumnstoreIndex _createColumnstoreIndex;
            
            internal AstSqlClause68(ParserRuleContext ctx, AstCreateColumnstoreIndex createColumnstoreIndex) : 
                    base(ctx)
            {
                _createColumnstoreIndex = createColumnstoreIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateColumnstoreIndex CreateColumnstoreIndex
            {
                get
                {
                    return _createColumnstoreIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_nonclustered_columnstore_index 
        /// </summary>
        public partial class AstSqlClause69 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateNonclusteredColumnstoreIndex _createNonclusteredColumnstoreIndex;
            
            internal AstSqlClause69(ParserRuleContext ctx, AstCreateNonclusteredColumnstoreIndex createNonclusteredColumnstoreIndex) : 
                    base(ctx)
            {
                _createNonclusteredColumnstoreIndex = createNonclusteredColumnstoreIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateNonclusteredColumnstoreIndex CreateNonclusteredColumnstoreIndex
            {
                get
                {
                    return _createNonclusteredColumnstoreIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_login_azure_sql 
        /// </summary>
        public partial class AstSqlClause70 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateLoginAzureSql _createLoginAzureSql;
            
            internal AstSqlClause70(ParserRuleContext ctx, AstCreateLoginAzureSql createLoginAzureSql) : 
                    base(ctx)
            {
                _createLoginAzureSql = createLoginAzureSql;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateLoginAzureSql CreateLoginAzureSql
            {
                get
                {
                    return _createLoginAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_login_pdw 
        /// </summary>
        public partial class AstSqlClause71 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateLoginPdw _createLoginPdw;
            
            internal AstSqlClause71(ParserRuleContext ctx, AstCreateLoginPdw createLoginPdw) : 
                    base(ctx)
            {
                _createLoginPdw = createLoginPdw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateLoginPdw CreateLoginPdw
            {
                get
                {
                    return _createLoginPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_login_sql_server 
        /// </summary>
        public partial class AstSqlClause72 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateLoginSqlServer _createLoginSqlServer;
            
            internal AstSqlClause72(ParserRuleContext ctx, AstCreateLoginSqlServer createLoginSqlServer) : 
                    base(ctx)
            {
                _createLoginSqlServer = createLoginSqlServer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateLoginSqlServer CreateLoginSqlServer
            {
                get
                {
                    return _createLoginSqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_master_key_azure_sql 
        /// </summary>
        public partial class AstSqlClause73 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateMasterKeyAzureSql _createMasterKeyAzureSql;
            
            internal AstSqlClause73(ParserRuleContext ctx, AstCreateMasterKeyAzureSql createMasterKeyAzureSql) : 
                    base(ctx)
            {
                _createMasterKeyAzureSql = createMasterKeyAzureSql;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateMasterKeyAzureSql CreateMasterKeyAzureSql
            {
                get
                {
                    return _createMasterKeyAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_master_key_sql_server 
        /// </summary>
        public partial class AstSqlClause74 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateMasterKeySqlServer _createMasterKeySqlServer;
            
            internal AstSqlClause74(ParserRuleContext ctx, AstCreateMasterKeySqlServer createMasterKeySqlServer) : 
                    base(ctx)
            {
                _createMasterKeySqlServer = createMasterKeySqlServer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateMasterKeySqlServer CreateMasterKeySqlServer
            {
                get
                {
                    return _createMasterKeySqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_or_alter_broker_priority 
        /// </summary>
        public partial class AstSqlClause75 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateOrAlterBrokerPriority _createOrAlterBrokerPriority;
            
            internal AstSqlClause75(ParserRuleContext ctx, AstCreateOrAlterBrokerPriority createOrAlterBrokerPriority) : 
                    base(ctx)
            {
                _createOrAlterBrokerPriority = createOrAlterBrokerPriority;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateOrAlterBrokerPriority CreateOrAlterBrokerPriority
            {
                get
                {
                    return _createOrAlterBrokerPriority;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_remote_service_binding 
        /// </summary>
        public partial class AstSqlClause76 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateRemoteServiceBinding _createRemoteServiceBinding;
            
            internal AstSqlClause76(ParserRuleContext ctx, AstCreateRemoteServiceBinding createRemoteServiceBinding) : 
                    base(ctx)
            {
                _createRemoteServiceBinding = createRemoteServiceBinding;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateRemoteServiceBinding CreateRemoteServiceBinding
            {
                get
                {
                    return _createRemoteServiceBinding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_resource_pool 
        /// </summary>
        public partial class AstSqlClause77 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateResourcePool _createResourcePool;
            
            internal AstSqlClause77(ParserRuleContext ctx, AstCreateResourcePool createResourcePool) : 
                    base(ctx)
            {
                _createResourcePool = createResourcePool;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateResourcePool CreateResourcePool
            {
                get
                {
                    return _createResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_route 
        /// </summary>
        public partial class AstSqlClause78 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateRoute _createRoute;
            
            internal AstSqlClause78(ParserRuleContext ctx, AstCreateRoute createRoute) : 
                    base(ctx)
            {
                _createRoute = createRoute;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateRoute CreateRoute
            {
                get
                {
                    return _createRoute;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_rule 
        /// </summary>
        public partial class AstSqlClause79 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateRule _createRule;
            
            internal AstSqlClause79(ParserRuleContext ctx, AstCreateRule createRule) : 
                    base(ctx)
            {
                _createRule = createRule;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateRule CreateRule
            {
                get
                {
                    return _createRule;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_schema 
        /// </summary>
        public partial class AstSqlClause80 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateSchema _createSchema;
            
            internal AstSqlClause80(ParserRuleContext ctx, AstCreateSchema createSchema) : 
                    base(ctx)
            {
                _createSchema = createSchema;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateSchema CreateSchema
            {
                get
                {
                    return _createSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause81 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateSchemaAzureSqlDwAndPdw _createSchemaAzureSqlDwAndPdw;
            
            internal AstSqlClause81(ParserRuleContext ctx, AstCreateSchemaAzureSqlDwAndPdw createSchemaAzureSqlDwAndPdw) : 
                    base(ctx)
            {
                _createSchemaAzureSqlDwAndPdw = createSchemaAzureSqlDwAndPdw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateSchemaAzureSqlDwAndPdw CreateSchemaAzureSqlDwAndPdw
            {
                get
                {
                    return _createSchemaAzureSqlDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_search_property_list 
        /// </summary>
        public partial class AstSqlClause82 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateSearchPropertyList _createSearchPropertyList;
            
            internal AstSqlClause82(ParserRuleContext ctx, AstCreateSearchPropertyList createSearchPropertyList) : 
                    base(ctx)
            {
                _createSearchPropertyList = createSearchPropertyList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateSearchPropertyList CreateSearchPropertyList
            {
                get
                {
                    return _createSearchPropertyList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_security_policy 
        /// </summary>
        public partial class AstSqlClause83 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateSecurityPolicy _createSecurityPolicy;
            
            internal AstSqlClause83(ParserRuleContext ctx, AstCreateSecurityPolicy createSecurityPolicy) : 
                    base(ctx)
            {
                _createSecurityPolicy = createSecurityPolicy;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateSecurityPolicy CreateSecurityPolicy
            {
                get
                {
                    return _createSecurityPolicy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_sequence 
        /// </summary>
        public partial class AstSqlClause84 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateSequence _createSequence;
            
            internal AstSqlClause84(ParserRuleContext ctx, AstCreateSequence createSequence) : 
                    base(ctx)
            {
                _createSequence = createSequence;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateSequence CreateSequence
            {
                get
                {
                    return _createSequence;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_server_audit 
        /// </summary>
        public partial class AstSqlClause85 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateServerAudit _createServerAudit;
            
            internal AstSqlClause85(ParserRuleContext ctx, AstCreateServerAudit createServerAudit) : 
                    base(ctx)
            {
                _createServerAudit = createServerAudit;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateServerAudit CreateServerAudit
            {
                get
                {
                    return _createServerAudit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_server_audit_specification 
        /// </summary>
        public partial class AstSqlClause86 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateServerAuditSpecification _createServerAuditSpecification;
            
            internal AstSqlClause86(ParserRuleContext ctx, AstCreateServerAuditSpecification createServerAuditSpecification) : 
                    base(ctx)
            {
                _createServerAuditSpecification = createServerAuditSpecification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateServerAuditSpecification CreateServerAuditSpecification
            {
                get
                {
                    return _createServerAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_server_role 
        /// </summary>
        public partial class AstSqlClause87 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateServerRole _createServerRole;
            
            internal AstSqlClause87(ParserRuleContext ctx, AstCreateServerRole createServerRole) : 
                    base(ctx)
            {
                _createServerRole = createServerRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateServerRole CreateServerRole
            {
                get
                {
                    return _createServerRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_service 
        /// </summary>
        public partial class AstSqlClause88 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateService _createService;
            
            internal AstSqlClause88(ParserRuleContext ctx, AstCreateService createService) : 
                    base(ctx)
            {
                _createService = createService;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateService CreateService
            {
                get
                {
                    return _createService;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_statistics 
        /// </summary>
        public partial class AstSqlClause89 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateStatistics _createStatistics;
            
            internal AstSqlClause89(ParserRuleContext ctx, AstCreateStatistics createStatistics) : 
                    base(ctx)
            {
                _createStatistics = createStatistics;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateStatistics CreateStatistics
            {
                get
                {
                    return _createStatistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_synonym 
        /// </summary>
        public partial class AstSqlClause90 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateSynonym _createSynonym;
            
            internal AstSqlClause90(ParserRuleContext ctx, AstCreateSynonym createSynonym) : 
                    base(ctx)
            {
                _createSynonym = createSynonym;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateSynonym CreateSynonym
            {
                get
                {
                    return _createSynonym;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_table 
        /// </summary>
        public partial class AstSqlClause91 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateTable _createTable;
            
            internal AstSqlClause91(ParserRuleContext ctx, AstCreateTable createTable) : 
                    base(ctx)
            {
                _createTable = createTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateTable CreateTable
            {
                get
                {
                    return _createTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_type 
        /// </summary>
        public partial class AstSqlClause92 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateType _createType;
            
            internal AstSqlClause92(ParserRuleContext ctx, AstCreateType createType) : 
                    base(ctx)
            {
                _createType = createType;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateType CreateType
            {
                get
                {
                    return _createType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_user 
        /// </summary>
        public partial class AstSqlClause93 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateUser _createUser;
            
            internal AstSqlClause93(ParserRuleContext ctx, AstCreateUser createUser) : 
                    base(ctx)
            {
                _createUser = createUser;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateUser CreateUser
            {
                get
                {
                    return _createUser;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_user_azure_sql_dw 
        /// </summary>
        public partial class AstSqlClause94 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateUserAzureSqlDw _createUserAzureSqlDw;
            
            internal AstSqlClause94(ParserRuleContext ctx, AstCreateUserAzureSqlDw createUserAzureSqlDw) : 
                    base(ctx)
            {
                _createUserAzureSqlDw = createUserAzureSqlDw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateUserAzureSqlDw CreateUserAzureSqlDw
            {
                get
                {
                    return _createUserAzureSqlDw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_workload_group 
        /// </summary>
        public partial class AstSqlClause95 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateWorkloadGroup _createWorkloadGroup;
            
            internal AstSqlClause95(ParserRuleContext ctx, AstCreateWorkloadGroup createWorkloadGroup) : 
                    base(ctx)
            {
                _createWorkloadGroup = createWorkloadGroup;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateWorkloadGroup CreateWorkloadGroup
            {
                get
                {
                    return _createWorkloadGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_xml_index 
        /// </summary>
        public partial class AstSqlClause96 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateXmlIndex _createXmlIndex;
            
            internal AstSqlClause96(ParserRuleContext ctx, AstCreateXmlIndex createXmlIndex) : 
                    base(ctx)
            {
                _createXmlIndex = createXmlIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateXmlIndex CreateXmlIndex
            {
                get
                {
                    return _createXmlIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_xml_schema_collection 
        /// </summary>
        public partial class AstSqlClause97 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateXmlSchemaCollection _createXmlSchemaCollection;
            
            internal AstSqlClause97(ParserRuleContext ctx, AstCreateXmlSchemaCollection createXmlSchemaCollection) : 
                    base(ctx)
            {
                _createXmlSchemaCollection = createXmlSchemaCollection;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateXmlSchemaCollection CreateXmlSchemaCollection
            {
                get
                {
                    return _createXmlSchemaCollection;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_partition_function 
        /// </summary>
        public partial class AstSqlClause98 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreatePartitionFunction _createPartitionFunction;
            
            internal AstSqlClause98(ParserRuleContext ctx, AstCreatePartitionFunction createPartitionFunction) : 
                    base(ctx)
            {
                _createPartitionFunction = createPartitionFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreatePartitionFunction CreatePartitionFunction
            {
                get
                {
                    return _createPartitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_partition_scheme 
        /// </summary>
        public partial class AstSqlClause99 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreatePartitionScheme _createPartitionScheme;
            
            internal AstSqlClause99(ParserRuleContext ctx, AstCreatePartitionScheme createPartitionScheme) : 
                    base(ctx)
            {
                _createPartitionScheme = createPartitionScheme;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreatePartitionScheme CreatePartitionScheme
            {
                get
                {
                    return _createPartitionScheme;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_aggregate 
        /// </summary>
        public partial class AstSqlClause100 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropAggregate _dropAggregate;
            
            internal AstSqlClause100(ParserRuleContext ctx, AstDropAggregate dropAggregate) : 
                    base(ctx)
            {
                _dropAggregate = dropAggregate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropAggregate DropAggregate
            {
                get
                {
                    return _dropAggregate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_application_role 
        /// </summary>
        public partial class AstSqlClause101 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropApplicationRole _dropApplicationRole;
            
            internal AstSqlClause101(ParserRuleContext ctx, AstDropApplicationRole dropApplicationRole) : 
                    base(ctx)
            {
                _dropApplicationRole = dropApplicationRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropApplicationRole DropApplicationRole
            {
                get
                {
                    return _dropApplicationRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_assembly 
        /// </summary>
        public partial class AstSqlClause102 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropAssembly _dropAssembly;
            
            internal AstSqlClause102(ParserRuleContext ctx, AstDropAssembly dropAssembly) : 
                    base(ctx)
            {
                _dropAssembly = dropAssembly;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropAssembly DropAssembly
            {
                get
                {
                    return _dropAssembly;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_asymmetric_key 
        /// </summary>
        public partial class AstSqlClause103 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropAsymmetricKey _dropAsymmetricKey;
            
            internal AstSqlClause103(ParserRuleContext ctx, AstDropAsymmetricKey dropAsymmetricKey) : 
                    base(ctx)
            {
                _dropAsymmetricKey = dropAsymmetricKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropAsymmetricKey DropAsymmetricKey
            {
                get
                {
                    return _dropAsymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_availability_group 
        /// </summary>
        public partial class AstSqlClause104 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropAvailabilityGroup _dropAvailabilityGroup;
            
            internal AstSqlClause104(ParserRuleContext ctx, AstDropAvailabilityGroup dropAvailabilityGroup) : 
                    base(ctx)
            {
                _dropAvailabilityGroup = dropAvailabilityGroup;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropAvailabilityGroup DropAvailabilityGroup
            {
                get
                {
                    return _dropAvailabilityGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_broker_priority 
        /// </summary>
        public partial class AstSqlClause105 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropBrokerPriority _dropBrokerPriority;
            
            internal AstSqlClause105(ParserRuleContext ctx, AstDropBrokerPriority dropBrokerPriority) : 
                    base(ctx)
            {
                _dropBrokerPriority = dropBrokerPriority;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropBrokerPriority DropBrokerPriority
            {
                get
                {
                    return _dropBrokerPriority;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_certificate 
        /// </summary>
        public partial class AstSqlClause106 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropCertificate _dropCertificate;
            
            internal AstSqlClause106(ParserRuleContext ctx, AstDropCertificate dropCertificate) : 
                    base(ctx)
            {
                _dropCertificate = dropCertificate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropCertificate DropCertificate
            {
                get
                {
                    return _dropCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_column_encryption_key 
        /// </summary>
        public partial class AstSqlClause107 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropColumnEncryptionKey _dropColumnEncryptionKey;
            
            internal AstSqlClause107(ParserRuleContext ctx, AstDropColumnEncryptionKey dropColumnEncryptionKey) : 
                    base(ctx)
            {
                _dropColumnEncryptionKey = dropColumnEncryptionKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropColumnEncryptionKey DropColumnEncryptionKey
            {
                get
                {
                    return _dropColumnEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_column_master_key 
        /// </summary>
        public partial class AstSqlClause108 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropColumnMasterKey _dropColumnMasterKey;
            
            internal AstSqlClause108(ParserRuleContext ctx, AstDropColumnMasterKey dropColumnMasterKey) : 
                    base(ctx)
            {
                _dropColumnMasterKey = dropColumnMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropColumnMasterKey DropColumnMasterKey
            {
                get
                {
                    return _dropColumnMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_contract 
        /// </summary>
        public partial class AstSqlClause109 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropContract _dropContract;
            
            internal AstSqlClause109(ParserRuleContext ctx, AstDropContract dropContract) : 
                    base(ctx)
            {
                _dropContract = dropContract;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropContract DropContract
            {
                get
                {
                    return _dropContract;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_credential 
        /// </summary>
        public partial class AstSqlClause110 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropCredential _dropCredential;
            
            internal AstSqlClause110(ParserRuleContext ctx, AstDropCredential dropCredential) : 
                    base(ctx)
            {
                _dropCredential = dropCredential;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropCredential DropCredential
            {
                get
                {
                    return _dropCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_cryptograhic_provider 
        /// </summary>
        public partial class AstSqlClause111 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropCryptograhicProvider _dropCryptograhicProvider;
            
            internal AstSqlClause111(ParserRuleContext ctx, AstDropCryptograhicProvider dropCryptograhicProvider) : 
                    base(ctx)
            {
                _dropCryptograhicProvider = dropCryptograhicProvider;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropCryptograhicProvider DropCryptograhicProvider
            {
                get
                {
                    return _dropCryptograhicProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database 
        /// </summary>
        public partial class AstSqlClause112 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDatabase _dropDatabase;
            
            internal AstSqlClause112(ParserRuleContext ctx, AstDropDatabase dropDatabase) : 
                    base(ctx)
            {
                _dropDatabase = dropDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDatabase DropDatabase
            {
                get
                {
                    return _dropDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database_audit_specification 
        /// </summary>
        public partial class AstSqlClause113 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDatabaseAuditSpecification _dropDatabaseAuditSpecification;
            
            internal AstSqlClause113(ParserRuleContext ctx, AstDropDatabaseAuditSpecification dropDatabaseAuditSpecification) : 
                    base(ctx)
            {
                _dropDatabaseAuditSpecification = dropDatabaseAuditSpecification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDatabaseAuditSpecification DropDatabaseAuditSpecification
            {
                get
                {
                    return _dropDatabaseAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database_encryption_key 
        /// </summary>
        public partial class AstSqlClause114 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDatabaseEncryptionKey _dropDatabaseEncryptionKey;
            
            internal AstSqlClause114(ParserRuleContext ctx, AstDropDatabaseEncryptionKey dropDatabaseEncryptionKey) : 
                    base(ctx)
            {
                _dropDatabaseEncryptionKey = dropDatabaseEncryptionKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDatabaseEncryptionKey DropDatabaseEncryptionKey
            {
                get
                {
                    return _dropDatabaseEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database_scoped_credential 
        /// </summary>
        public partial class AstSqlClause115 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDatabaseScopedCredential _dropDatabaseScopedCredential;
            
            internal AstSqlClause115(ParserRuleContext ctx, AstDropDatabaseScopedCredential dropDatabaseScopedCredential) : 
                    base(ctx)
            {
                _dropDatabaseScopedCredential = dropDatabaseScopedCredential;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDatabaseScopedCredential DropDatabaseScopedCredential
            {
                get
                {
                    return _dropDatabaseScopedCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_db_role 
        /// </summary>
        public partial class AstSqlClause116 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDbRole _dropDbRole;
            
            internal AstSqlClause116(ParserRuleContext ctx, AstDropDbRole dropDbRole) : 
                    base(ctx)
            {
                _dropDbRole = dropDbRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDbRole DropDbRole
            {
                get
                {
                    return _dropDbRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_default 
        /// </summary>
        public partial class AstSqlClause117 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDefault _dropDefault;
            
            internal AstSqlClause117(ParserRuleContext ctx, AstDropDefault dropDefault) : 
                    base(ctx)
            {
                _dropDefault = dropDefault;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDefault DropDefault
            {
                get
                {
                    return _dropDefault;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_endpoint 
        /// </summary>
        public partial class AstSqlClause118 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropEndpoint _dropEndpoint;
            
            internal AstSqlClause118(ParserRuleContext ctx, AstDropEndpoint dropEndpoint) : 
                    base(ctx)
            {
                _dropEndpoint = dropEndpoint;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropEndpoint DropEndpoint
            {
                get
                {
                    return _dropEndpoint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_event_notifications 
        /// </summary>
        public partial class AstSqlClause119 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropEventNotifications _dropEventNotifications;
            
            internal AstSqlClause119(ParserRuleContext ctx, AstDropEventNotifications dropEventNotifications) : 
                    base(ctx)
            {
                _dropEventNotifications = dropEventNotifications;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropEventNotifications DropEventNotifications
            {
                get
                {
                    return _dropEventNotifications;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_event_session 
        /// </summary>
        public partial class AstSqlClause120 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropEventSession _dropEventSession;
            
            internal AstSqlClause120(ParserRuleContext ctx, AstDropEventSession dropEventSession) : 
                    base(ctx)
            {
                _dropEventSession = dropEventSession;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropEventSession DropEventSession
            {
                get
                {
                    return _dropEventSession;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_data_source 
        /// </summary>
        public partial class AstSqlClause121 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropExternalDataSource _dropExternalDataSource;
            
            internal AstSqlClause121(ParserRuleContext ctx, AstDropExternalDataSource dropExternalDataSource) : 
                    base(ctx)
            {
                _dropExternalDataSource = dropExternalDataSource;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropExternalDataSource DropExternalDataSource
            {
                get
                {
                    return _dropExternalDataSource;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_file_format 
        /// </summary>
        public partial class AstSqlClause122 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropExternalFileFormat _dropExternalFileFormat;
            
            internal AstSqlClause122(ParserRuleContext ctx, AstDropExternalFileFormat dropExternalFileFormat) : 
                    base(ctx)
            {
                _dropExternalFileFormat = dropExternalFileFormat;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropExternalFileFormat DropExternalFileFormat
            {
                get
                {
                    return _dropExternalFileFormat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_library 
        /// </summary>
        public partial class AstSqlClause123 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropExternalLibrary _dropExternalLibrary;
            
            internal AstSqlClause123(ParserRuleContext ctx, AstDropExternalLibrary dropExternalLibrary) : 
                    base(ctx)
            {
                _dropExternalLibrary = dropExternalLibrary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropExternalLibrary DropExternalLibrary
            {
                get
                {
                    return _dropExternalLibrary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_resource_pool 
        /// </summary>
        public partial class AstSqlClause124 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropExternalResourcePool _dropExternalResourcePool;
            
            internal AstSqlClause124(ParserRuleContext ctx, AstDropExternalResourcePool dropExternalResourcePool) : 
                    base(ctx)
            {
                _dropExternalResourcePool = dropExternalResourcePool;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropExternalResourcePool DropExternalResourcePool
            {
                get
                {
                    return _dropExternalResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_table 
        /// </summary>
        public partial class AstSqlClause125 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropExternalTable _dropExternalTable;
            
            internal AstSqlClause125(ParserRuleContext ctx, AstDropExternalTable dropExternalTable) : 
                    base(ctx)
            {
                _dropExternalTable = dropExternalTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropExternalTable DropExternalTable
            {
                get
                {
                    return _dropExternalTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_fulltext_catalog 
        /// </summary>
        public partial class AstSqlClause126 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropFulltextCatalog _dropFulltextCatalog;
            
            internal AstSqlClause126(ParserRuleContext ctx, AstDropFulltextCatalog dropFulltextCatalog) : 
                    base(ctx)
            {
                _dropFulltextCatalog = dropFulltextCatalog;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropFulltextCatalog DropFulltextCatalog
            {
                get
                {
                    return _dropFulltextCatalog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_fulltext_index 
        /// </summary>
        public partial class AstSqlClause127 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropFulltextIndex _dropFulltextIndex;
            
            internal AstSqlClause127(ParserRuleContext ctx, AstDropFulltextIndex dropFulltextIndex) : 
                    base(ctx)
            {
                _dropFulltextIndex = dropFulltextIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropFulltextIndex DropFulltextIndex
            {
                get
                {
                    return _dropFulltextIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_fulltext_stoplist 
        /// </summary>
        public partial class AstSqlClause128 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropFulltextStoplist _dropFulltextStoplist;
            
            internal AstSqlClause128(ParserRuleContext ctx, AstDropFulltextStoplist dropFulltextStoplist) : 
                    base(ctx)
            {
                _dropFulltextStoplist = dropFulltextStoplist;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropFulltextStoplist DropFulltextStoplist
            {
                get
                {
                    return _dropFulltextStoplist;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_function 
        /// </summary>
        public partial class AstSqlClause129 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropFunction _dropFunction;
            
            internal AstSqlClause129(ParserRuleContext ctx, AstDropFunction dropFunction) : 
                    base(ctx)
            {
                _dropFunction = dropFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropFunction DropFunction
            {
                get
                {
                    return _dropFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_index 
        /// </summary>
        public partial class AstSqlClause130 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropIndex _dropIndex;
            
            internal AstSqlClause130(ParserRuleContext ctx, AstDropIndex dropIndex) : 
                    base(ctx)
            {
                _dropIndex = dropIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropIndex DropIndex
            {
                get
                {
                    return _dropIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_login 
        /// </summary>
        public partial class AstSqlClause131 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropLogin _dropLogin;
            
            internal AstSqlClause131(ParserRuleContext ctx, AstDropLogin dropLogin) : 
                    base(ctx)
            {
                _dropLogin = dropLogin;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropLogin DropLogin
            {
                get
                {
                    return _dropLogin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_master_key 
        /// </summary>
        public partial class AstSqlClause132 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropMasterKey _dropMasterKey;
            
            internal AstSqlClause132(ParserRuleContext ctx, AstDropMasterKey dropMasterKey) : 
                    base(ctx)
            {
                _dropMasterKey = dropMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropMasterKey DropMasterKey
            {
                get
                {
                    return _dropMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_message_type 
        /// </summary>
        public partial class AstSqlClause133 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropMessageType _dropMessageType;
            
            internal AstSqlClause133(ParserRuleContext ctx, AstDropMessageType dropMessageType) : 
                    base(ctx)
            {
                _dropMessageType = dropMessageType;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropMessageType DropMessageType
            {
                get
                {
                    return _dropMessageType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_partition_function 
        /// </summary>
        public partial class AstSqlClause134 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropPartitionFunction _dropPartitionFunction;
            
            internal AstSqlClause134(ParserRuleContext ctx, AstDropPartitionFunction dropPartitionFunction) : 
                    base(ctx)
            {
                _dropPartitionFunction = dropPartitionFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropPartitionFunction DropPartitionFunction
            {
                get
                {
                    return _dropPartitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_partition_scheme 
        /// </summary>
        public partial class AstSqlClause135 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropPartitionScheme _dropPartitionScheme;
            
            internal AstSqlClause135(ParserRuleContext ctx, AstDropPartitionScheme dropPartitionScheme) : 
                    base(ctx)
            {
                _dropPartitionScheme = dropPartitionScheme;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropPartitionScheme DropPartitionScheme
            {
                get
                {
                    return _dropPartitionScheme;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_procedure 
        /// </summary>
        public partial class AstSqlClause136 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropProcedure _dropProcedure;
            
            internal AstSqlClause136(ParserRuleContext ctx, AstDropProcedure dropProcedure) : 
                    base(ctx)
            {
                _dropProcedure = dropProcedure;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropProcedure DropProcedure
            {
                get
                {
                    return _dropProcedure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_queue 
        /// </summary>
        public partial class AstSqlClause137 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropQueue _dropQueue;
            
            internal AstSqlClause137(ParserRuleContext ctx, AstDropQueue dropQueue) : 
                    base(ctx)
            {
                _dropQueue = dropQueue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropQueue DropQueue
            {
                get
                {
                    return _dropQueue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_remote_service_binding 
        /// </summary>
        public partial class AstSqlClause138 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropRemoteServiceBinding _dropRemoteServiceBinding;
            
            internal AstSqlClause138(ParserRuleContext ctx, AstDropRemoteServiceBinding dropRemoteServiceBinding) : 
                    base(ctx)
            {
                _dropRemoteServiceBinding = dropRemoteServiceBinding;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropRemoteServiceBinding DropRemoteServiceBinding
            {
                get
                {
                    return _dropRemoteServiceBinding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_resource_pool 
        /// </summary>
        public partial class AstSqlClause139 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropResourcePool _dropResourcePool;
            
            internal AstSqlClause139(ParserRuleContext ctx, AstDropResourcePool dropResourcePool) : 
                    base(ctx)
            {
                _dropResourcePool = dropResourcePool;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropResourcePool DropResourcePool
            {
                get
                {
                    return _dropResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_route 
        /// </summary>
        public partial class AstSqlClause140 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropRoute _dropRoute;
            
            internal AstSqlClause140(ParserRuleContext ctx, AstDropRoute dropRoute) : 
                    base(ctx)
            {
                _dropRoute = dropRoute;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropRoute DropRoute
            {
                get
                {
                    return _dropRoute;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_rule 
        /// </summary>
        public partial class AstSqlClause141 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropRule _dropRule;
            
            internal AstSqlClause141(ParserRuleContext ctx, AstDropRule dropRule) : 
                    base(ctx)
            {
                _dropRule = dropRule;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropRule DropRule
            {
                get
                {
                    return _dropRule;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_schema 
        /// </summary>
        public partial class AstSqlClause142 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropSchema _dropSchema;
            
            internal AstSqlClause142(ParserRuleContext ctx, AstDropSchema dropSchema) : 
                    base(ctx)
            {
                _dropSchema = dropSchema;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropSchema DropSchema
            {
                get
                {
                    return _dropSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_search_property_list 
        /// </summary>
        public partial class AstSqlClause143 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropSearchPropertyList _dropSearchPropertyList;
            
            internal AstSqlClause143(ParserRuleContext ctx, AstDropSearchPropertyList dropSearchPropertyList) : 
                    base(ctx)
            {
                _dropSearchPropertyList = dropSearchPropertyList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropSearchPropertyList DropSearchPropertyList
            {
                get
                {
                    return _dropSearchPropertyList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_security_policy 
        /// </summary>
        public partial class AstSqlClause144 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropSecurityPolicy _dropSecurityPolicy;
            
            internal AstSqlClause144(ParserRuleContext ctx, AstDropSecurityPolicy dropSecurityPolicy) : 
                    base(ctx)
            {
                _dropSecurityPolicy = dropSecurityPolicy;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropSecurityPolicy DropSecurityPolicy
            {
                get
                {
                    return _dropSecurityPolicy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_sequence 
        /// </summary>
        public partial class AstSqlClause145 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropSequence _dropSequence;
            
            internal AstSqlClause145(ParserRuleContext ctx, AstDropSequence dropSequence) : 
                    base(ctx)
            {
                _dropSequence = dropSequence;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropSequence DropSequence
            {
                get
                {
                    return _dropSequence;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_server_audit 
        /// </summary>
        public partial class AstSqlClause146 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropServerAudit _dropServerAudit;
            
            internal AstSqlClause146(ParserRuleContext ctx, AstDropServerAudit dropServerAudit) : 
                    base(ctx)
            {
                _dropServerAudit = dropServerAudit;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropServerAudit DropServerAudit
            {
                get
                {
                    return _dropServerAudit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_server_audit_specification 
        /// </summary>
        public partial class AstSqlClause147 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropServerAuditSpecification _dropServerAuditSpecification;
            
            internal AstSqlClause147(ParserRuleContext ctx, AstDropServerAuditSpecification dropServerAuditSpecification) : 
                    base(ctx)
            {
                _dropServerAuditSpecification = dropServerAuditSpecification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropServerAuditSpecification DropServerAuditSpecification
            {
                get
                {
                    return _dropServerAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_server_role 
        /// </summary>
        public partial class AstSqlClause148 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropServerRole _dropServerRole;
            
            internal AstSqlClause148(ParserRuleContext ctx, AstDropServerRole dropServerRole) : 
                    base(ctx)
            {
                _dropServerRole = dropServerRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropServerRole DropServerRole
            {
                get
                {
                    return _dropServerRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_service 
        /// </summary>
        public partial class AstSqlClause149 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropService _dropService;
            
            internal AstSqlClause149(ParserRuleContext ctx, AstDropService dropService) : 
                    base(ctx)
            {
                _dropService = dropService;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropService DropService
            {
                get
                {
                    return _dropService;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_signature 
        /// </summary>
        public partial class AstSqlClause150 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropSignature _dropSignature;
            
            internal AstSqlClause150(ParserRuleContext ctx, AstDropSignature dropSignature) : 
                    base(ctx)
            {
                _dropSignature = dropSignature;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropSignature DropSignature
            {
                get
                {
                    return _dropSignature;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_statistics 
        /// </summary>
        public partial class AstSqlClause151 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropStatistics _dropStatistics;
            
            internal AstSqlClause151(ParserRuleContext ctx, AstDropStatistics dropStatistics) : 
                    base(ctx)
            {
                _dropStatistics = dropStatistics;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropStatistics DropStatistics
            {
                get
                {
                    return _dropStatistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_statistics_id_azure_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause152 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropStatisticsIdAzureDwAndPdw _dropStatisticsIdAzureDwAndPdw;
            
            internal AstSqlClause152(ParserRuleContext ctx, AstDropStatisticsIdAzureDwAndPdw dropStatisticsIdAzureDwAndPdw) : 
                    base(ctx)
            {
                _dropStatisticsIdAzureDwAndPdw = dropStatisticsIdAzureDwAndPdw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropStatisticsIdAzureDwAndPdw DropStatisticsIdAzureDwAndPdw
            {
                get
                {
                    return _dropStatisticsIdAzureDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_symmetric_key 
        /// </summary>
        public partial class AstSqlClause153 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropSymmetricKey _dropSymmetricKey;
            
            internal AstSqlClause153(ParserRuleContext ctx, AstDropSymmetricKey dropSymmetricKey) : 
                    base(ctx)
            {
                _dropSymmetricKey = dropSymmetricKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropSymmetricKey DropSymmetricKey
            {
                get
                {
                    return _dropSymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_synonym 
        /// </summary>
        public partial class AstSqlClause154 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropSynonym _dropSynonym;
            
            internal AstSqlClause154(ParserRuleContext ctx, AstDropSynonym dropSynonym) : 
                    base(ctx)
            {
                _dropSynonym = dropSynonym;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropSynonym DropSynonym
            {
                get
                {
                    return _dropSynonym;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_table 
        /// </summary>
        public partial class AstSqlClause155 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropTable _dropTable;
            
            internal AstSqlClause155(ParserRuleContext ctx, AstDropTable dropTable) : 
                    base(ctx)
            {
                _dropTable = dropTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropTable DropTable
            {
                get
                {
                    return _dropTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_dml_trigger 
        /// </summary>
        public partial class AstSqlClause156 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDmlTrigger _dropDmlTrigger;
            
            internal AstSqlClause156(ParserRuleContext ctx, AstDropDmlTrigger dropDmlTrigger) : 
                    base(ctx)
            {
                _dropDmlTrigger = dropDmlTrigger;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDmlTrigger DropDmlTrigger
            {
                get
                {
                    return _dropDmlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_ddl_trigger 
        /// </summary>
        public partial class AstSqlClause157 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropDdlTrigger _dropDdlTrigger;
            
            internal AstSqlClause157(ParserRuleContext ctx, AstDropDdlTrigger dropDdlTrigger) : 
                    base(ctx)
            {
                _dropDdlTrigger = dropDdlTrigger;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropDdlTrigger DropDdlTrigger
            {
                get
                {
                    return _dropDdlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_type 
        /// </summary>
        public partial class AstSqlClause158 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropType _dropType;
            
            internal AstSqlClause158(ParserRuleContext ctx, AstDropType dropType) : 
                    base(ctx)
            {
                _dropType = dropType;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropType DropType
            {
                get
                {
                    return _dropType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_user 
        /// </summary>
        public partial class AstSqlClause159 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropUser _dropUser;
            
            internal AstSqlClause159(ParserRuleContext ctx, AstDropUser dropUser) : 
                    base(ctx)
            {
                _dropUser = dropUser;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropUser DropUser
            {
                get
                {
                    return _dropUser;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_view 
        /// </summary>
        public partial class AstSqlClause160 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropView _dropView;
            
            internal AstSqlClause160(ParserRuleContext ctx, AstDropView dropView) : 
                    base(ctx)
            {
                _dropView = dropView;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropView DropView
            {
                get
                {
                    return _dropView;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_workload_group 
        /// </summary>
        public partial class AstSqlClause161 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropWorkloadGroup _dropWorkloadGroup;
            
            internal AstSqlClause161(ParserRuleContext ctx, AstDropWorkloadGroup dropWorkloadGroup) : 
                    base(ctx)
            {
                _dropWorkloadGroup = dropWorkloadGroup;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropWorkloadGroup DropWorkloadGroup
            {
                get
                {
                    return _dropWorkloadGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_xml_schema_collection 
        /// </summary>
        public partial class AstSqlClause162 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDropXmlSchemaCollection _dropXmlSchemaCollection;
            
            internal AstSqlClause162(ParserRuleContext ctx, AstDropXmlSchemaCollection dropXmlSchemaCollection) : 
                    base(ctx)
            {
                _dropXmlSchemaCollection = dropXmlSchemaCollection;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDropXmlSchemaCollection DropXmlSchemaCollection
            {
                get
                {
                    return _dropXmlSchemaCollection;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : disable_trigger 
        /// </summary>
        public partial class AstSqlClause163 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDisableTrigger _disableTrigger;
            
            internal AstSqlClause163(ParserRuleContext ctx, AstDisableTrigger disableTrigger) : 
                    base(ctx)
            {
                _disableTrigger = disableTrigger;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDisableTrigger DisableTrigger
            {
                get
                {
                    return _disableTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : enable_trigger 
        /// </summary>
        public partial class AstSqlClause164 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstEnableTrigger _enableTrigger;
            
            internal AstSqlClause164(ParserRuleContext ctx, AstEnableTrigger enableTrigger) : 
                    base(ctx)
            {
                _enableTrigger = enableTrigger;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEnableTrigger EnableTrigger
            {
                get
                {
                    return _enableTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : lock_table 
        /// </summary>
        public partial class AstSqlClause165 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstLockTable _lockTable;
            
            internal AstSqlClause165(ParserRuleContext ctx, AstLockTable lockTable) : 
                    base(ctx)
            {
                _lockTable = lockTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLockTable LockTable
            {
                get
                {
                    return _lockTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : truncate_table 
        /// </summary>
        public partial class AstSqlClause166 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstTruncateTable _truncateTable;
            
            internal AstSqlClause166(ParserRuleContext ctx, AstTruncateTable truncateTable) : 
                    base(ctx)
            {
                _truncateTable = truncateTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTruncateTable TruncateTable
            {
                get
                {
                    return _truncateTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : update_statistics 
        /// </summary>
        public partial class AstSqlClause167 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstUpdateStatistics _updateStatistics;
            
            internal AstSqlClause167(ParserRuleContext ctx, AstUpdateStatistics updateStatistics) : 
                    base(ctx)
            {
                _updateStatistics = updateStatistics;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUpdateStatistics UpdateStatistics
            {
                get
                {
                    return _updateStatistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : block_statement 
        /// </summary>
        public partial class AstSqlClause168 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBlockStatement _blockStatement;
            
            internal AstSqlClause168(ParserRuleContext ctx, AstBlockStatement blockStatement) : 
                    base(ctx)
            {
                _blockStatement = blockStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBlockStatement BlockStatement
            {
                get
                {
                    return _blockStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : break_statement 
        /// </summary>
        public partial class AstSqlClause169 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBreakStatement _breakStatement;
            
            internal AstSqlClause169(ParserRuleContext ctx, AstBreakStatement breakStatement) : 
                    base(ctx)
            {
                _breakStatement = breakStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBreakStatement BreakStatement
            {
                get
                {
                    return _breakStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : continue_statement 
        /// </summary>
        public partial class AstSqlClause170 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstContinueStatement _continueStatement;
            
            internal AstSqlClause170(ParserRuleContext ctx, AstContinueStatement continueStatement) : 
                    base(ctx)
            {
                _continueStatement = continueStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstContinueStatement ContinueStatement
            {
                get
                {
                    return _continueStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : goto_statement 
        /// </summary>
        public partial class AstSqlClause171 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstGotoStatement _gotoStatement;
            
            internal AstSqlClause171(ParserRuleContext ctx, AstGotoStatement gotoStatement) : 
                    base(ctx)
            {
                _gotoStatement = gotoStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGotoStatement GotoStatement
            {
                get
                {
                    return _gotoStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : if_statement 
        /// </summary>
        public partial class AstSqlClause172 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstIfStatement _ifStatement;
            
            internal AstSqlClause172(ParserRuleContext ctx, AstIfStatement ifStatement) : 
                    base(ctx)
            {
                _ifStatement = ifStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIfStatement IfStatement
            {
                get
                {
                    return _ifStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : return_statement 
        /// </summary>
        public partial class AstSqlClause173 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstReturnStatement _returnStatement;
            
            internal AstSqlClause173(ParserRuleContext ctx, AstReturnStatement returnStatement) : 
                    base(ctx)
            {
                _returnStatement = returnStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReturnStatement ReturnStatement
            {
                get
                {
                    return _returnStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : throw_statement 
        /// </summary>
        public partial class AstSqlClause174 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstThrowStatement _throwStatement;
            
            internal AstSqlClause174(ParserRuleContext ctx, AstThrowStatement throwStatement) : 
                    base(ctx)
            {
                _throwStatement = throwStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstThrowStatement ThrowStatement
            {
                get
                {
                    return _throwStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : try_catch_statement 
        /// </summary>
        public partial class AstSqlClause175 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstTryCatchStatement _tryCatchStatement;
            
            internal AstSqlClause175(ParserRuleContext ctx, AstTryCatchStatement tryCatchStatement) : 
                    base(ctx)
            {
                _tryCatchStatement = tryCatchStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTryCatchStatement TryCatchStatement
            {
                get
                {
                    return _tryCatchStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : waitfor_statement 
        /// </summary>
        public partial class AstSqlClause176 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstWaitforStatement _waitforStatement;
            
            internal AstSqlClause176(ParserRuleContext ctx, AstWaitforStatement waitforStatement) : 
                    base(ctx)
            {
                _waitforStatement = waitforStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWaitforStatement WaitforStatement
            {
                get
                {
                    return _waitforStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : while_statement 
        /// </summary>
        public partial class AstSqlClause177 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstWhileStatement _whileStatement;
            
            internal AstSqlClause177(ParserRuleContext ctx, AstWhileStatement whileStatement) : 
                    base(ctx)
            {
                _whileStatement = whileStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWhileStatement WhileStatement
            {
                get
                {
                    return _whileStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : print_statement 
        /// </summary>
        public partial class AstSqlClause178 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstPrintStatement _printStatement;
            
            internal AstSqlClause178(ParserRuleContext ctx, AstPrintStatement printStatement) : 
                    base(ctx)
            {
                _printStatement = printStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPrintStatement PrintStatement
            {
                get
                {
                    return _printStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : raiseerror_statement 
        /// </summary>
        public partial class AstSqlClause179 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstRaiseerrorStatement _raiseerrorStatement;
            
            internal AstSqlClause179(ParserRuleContext ctx, AstRaiseerrorStatement raiseerrorStatement) : 
                    base(ctx)
            {
                _raiseerrorStatement = raiseerrorStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRaiseerrorStatement RaiseerrorStatement
            {
                get
                {
                    return _raiseerrorStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : declare_statement 
        /// </summary>
        public partial class AstSqlClause180 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDeclareStatement _declareStatement;
            
            internal AstSqlClause180(ParserRuleContext ctx, AstDeclareStatement declareStatement) : 
                    base(ctx)
            {
                _declareStatement = declareStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDeclareStatement DeclareStatement
            {
                get
                {
                    return _declareStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : execute_statement 
        /// </summary>
        public partial class AstSqlClause181 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstExecuteStatement _executeStatement;
            
            internal AstSqlClause181(ParserRuleContext ctx, AstExecuteStatement executeStatement) : 
                    base(ctx)
            {
                _executeStatement = executeStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteStatement ExecuteStatement
            {
                get
                {
                    return _executeStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : cursor_statement 
        /// </summary>
        public partial class AstSqlClause182 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCursorStatement _cursorStatement;
            
            internal AstSqlClause182(ParserRuleContext ctx, AstCursorStatement cursorStatement) : 
                    base(ctx)
            {
                _cursorStatement = cursorStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCursorStatement CursorStatement
            {
                get
                {
                    return _cursorStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : begin_conversation_timer 
        /// </summary>
        public partial class AstSqlClause183 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBeginConversationTimer _beginConversationTimer;
            
            internal AstSqlClause183(ParserRuleContext ctx, AstBeginConversationTimer beginConversationTimer) : 
                    base(ctx)
            {
                _beginConversationTimer = beginConversationTimer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBeginConversationTimer BeginConversationTimer
            {
                get
                {
                    return _beginConversationTimer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : begin_conversation_dialog 
        /// </summary>
        public partial class AstSqlClause184 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBeginConversationDialog _beginConversationDialog;
            
            internal AstSqlClause184(ParserRuleContext ctx, AstBeginConversationDialog beginConversationDialog) : 
                    base(ctx)
            {
                _beginConversationDialog = beginConversationDialog;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBeginConversationDialog BeginConversationDialog
            {
                get
                {
                    return _beginConversationDialog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : end_conversation 
        /// </summary>
        public partial class AstSqlClause185 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstEndConversation _endConversation;
            
            internal AstSqlClause185(ParserRuleContext ctx, AstEndConversation endConversation) : 
                    base(ctx)
            {
                _endConversation = endConversation;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEndConversation EndConversation
            {
                get
                {
                    return _endConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : get_conversation 
        /// </summary>
        public partial class AstSqlClause186 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstGetConversation _getConversation;
            
            internal AstSqlClause186(ParserRuleContext ctx, AstGetConversation getConversation) : 
                    base(ctx)
            {
                _getConversation = getConversation;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGetConversation GetConversation
            {
                get
                {
                    return _getConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : send_conversation 
        /// </summary>
        public partial class AstSqlClause187 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstSendConversation _sendConversation;
            
            internal AstSqlClause187(ParserRuleContext ctx, AstSendConversation sendConversation) : 
                    base(ctx)
            {
                _sendConversation = sendConversation;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSendConversation SendConversation
            {
                get
                {
                    return _sendConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : waitfor_conversation 
        /// </summary>
        public partial class AstSqlClause188 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstWaitforConversation _waitforConversation;
            
            internal AstSqlClause188(ParserRuleContext ctx, AstWaitforConversation waitforConversation) : 
                    base(ctx)
            {
                _waitforConversation = waitforConversation;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWaitforConversation WaitforConversation
            {
                get
                {
                    return _waitforConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_contract 
        /// </summary>
        public partial class AstSqlClause189 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateContract _createContract;
            
            internal AstSqlClause189(ParserRuleContext ctx, AstCreateContract createContract) : 
                    base(ctx)
            {
                _createContract = createContract;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateContract CreateContract
            {
                get
                {
                    return _createContract;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_queue 
        /// </summary>
        public partial class AstSqlClause190 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCreateQueue _createQueue;
            
            internal AstSqlClause190(ParserRuleContext ctx, AstCreateQueue createQueue) : 
                    base(ctx)
            {
                _createQueue = createQueue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateQueue CreateQueue
            {
                get
                {
                    return _createQueue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_queue 
        /// </summary>
        public partial class AstSqlClause191 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstAlterQueue _alterQueue;
            
            internal AstSqlClause191(ParserRuleContext ctx, AstAlterQueue alterQueue) : 
                    base(ctx)
            {
                _alterQueue = alterQueue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterQueue AlterQueue
            {
                get
                {
                    return _alterQueue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : kill_statement 
        /// </summary>
        public partial class AstSqlClause192 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstKillStatement _killStatement;
            
            internal AstSqlClause192(ParserRuleContext ctx, AstKillStatement killStatement) : 
                    base(ctx)
            {
                _killStatement = killStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKillStatement KillStatement
            {
                get
                {
                    return _killStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : message_statement 
        /// </summary>
        public partial class AstSqlClause193 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstMessageStatement _messageStatement;
            
            internal AstSqlClause193(ParserRuleContext ctx, AstMessageStatement messageStatement) : 
                    base(ctx)
            {
                _messageStatement = messageStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMessageStatement MessageStatement
            {
                get
                {
                    return _messageStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : security_statement 
        /// </summary>
        public partial class AstSqlClause194 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstSecurityStatement _securityStatement;
            
            internal AstSqlClause194(ParserRuleContext ctx, AstSecurityStatement securityStatement) : 
                    base(ctx)
            {
                _securityStatement = securityStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSecurityStatement SecurityStatement
            {
                get
                {
                    return _securityStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : set_statement 
        /// </summary>
        public partial class AstSqlClause195 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstSetStatement _setStatement;
            
            internal AstSqlClause195(ParserRuleContext ctx, AstSetStatement setStatement) : 
                    base(ctx)
            {
                _setStatement = setStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSetStatement SetStatement
            {
                get
                {
                    return _setStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : transaction_statement 
        /// </summary>
        public partial class AstSqlClause196 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstTransactionStatement _transactionStatement;
            
            internal AstSqlClause196(ParserRuleContext ctx, AstTransactionStatement transactionStatement) : 
                    base(ctx)
            {
                _transactionStatement = transactionStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransactionStatement TransactionStatement
            {
                get
                {
                    return _transactionStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : use_statement 
        /// </summary>
        public partial class AstSqlClause197 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstUseStatement _useStatement;
            
            internal AstSqlClause197(ParserRuleContext ctx, AstUseStatement useStatement) : 
                    base(ctx)
            {
                _useStatement = useStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUseStatement UseStatement
            {
                get
                {
                    return _useStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : setuser_statement 
        /// </summary>
        public partial class AstSqlClause198 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstSetuserStatement _setuserStatement;
            
            internal AstSqlClause198(ParserRuleContext ctx, AstSetuserStatement setuserStatement) : 
                    base(ctx)
            {
                _setuserStatement = setuserStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSetuserStatement SetuserStatement
            {
                get
                {
                    return _setuserStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : reconfigure_statement 
        /// </summary>
        public partial class AstSqlClause199 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstReconfigureStatement _reconfigureStatement;
            
            internal AstSqlClause199(ParserRuleContext ctx, AstReconfigureStatement reconfigureStatement) : 
                    base(ctx)
            {
                _reconfigureStatement = reconfigureStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReconfigureStatement ReconfigureStatement
            {
                get
                {
                    return _reconfigureStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : shutdown_statement 
        /// </summary>
        public partial class AstSqlClause200 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstShutdownStatement _shutdownStatement;
            
            internal AstSqlClause200(ParserRuleContext ctx, AstShutdownStatement shutdownStatement) : 
                    base(ctx)
            {
                _shutdownStatement = shutdownStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstShutdownStatement ShutdownStatement
            {
                get
                {
                    return _shutdownStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : checkpoint_statement 
        /// </summary>
        public partial class AstSqlClause201 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstCheckpointStatement _checkpointStatement;
            
            internal AstSqlClause201(ParserRuleContext ctx, AstCheckpointStatement checkpointStatement) : 
                    base(ctx)
            {
                _checkpointStatement = checkpointStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCheckpointStatement CheckpointStatement
            {
                get
                {
                    return _checkpointStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_database 
        /// </summary>
        public partial class AstSqlClause202 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBackupDatabase _backupDatabase;
            
            internal AstSqlClause202(ParserRuleContext ctx, AstBackupDatabase backupDatabase) : 
                    base(ctx)
            {
                _backupDatabase = backupDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBackupDatabase BackupDatabase
            {
                get
                {
                    return _backupDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_log 
        /// </summary>
        public partial class AstSqlClause203 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBackupLog _backupLog;
            
            internal AstSqlClause203(ParserRuleContext ctx, AstBackupLog backupLog) : 
                    base(ctx)
            {
                _backupLog = backupLog;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBackupLog BackupLog
            {
                get
                {
                    return _backupLog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_certificate 
        /// </summary>
        public partial class AstSqlClause204 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBackupCertificate _backupCertificate;
            
            internal AstSqlClause204(ParserRuleContext ctx, AstBackupCertificate backupCertificate) : 
                    base(ctx)
            {
                _backupCertificate = backupCertificate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBackupCertificate BackupCertificate
            {
                get
                {
                    return _backupCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_master_key 
        /// </summary>
        public partial class AstSqlClause205 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBackupMasterKey _backupMasterKey;
            
            internal AstSqlClause205(ParserRuleContext ctx, AstBackupMasterKey backupMasterKey) : 
                    base(ctx)
            {
                _backupMasterKey = backupMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBackupMasterKey BackupMasterKey
            {
                get
                {
                    return _backupMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_service_master_key 
        /// </summary>
        public partial class AstSqlClause206 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstBackupServiceMasterKey _backupServiceMasterKey;
            
            internal AstSqlClause206(ParserRuleContext ctx, AstBackupServiceMasterKey backupServiceMasterKey) : 
                    base(ctx)
            {
                _backupServiceMasterKey = backupServiceMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBackupServiceMasterKey BackupServiceMasterKey
            {
                get
                {
                    return _backupServiceMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : dbcc_special 
        /// </summary>
        public partial class AstSqlClause207 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDbccSpecial _dbccSpecial;
            
            internal AstSqlClause207(ParserRuleContext ctx, AstDbccSpecial dbccSpecial) : 
                    base(ctx)
            {
                _dbccSpecial = dbccSpecial;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDbccSpecial DbccSpecial
            {
                get
                {
                    return _dbccSpecial;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : dbcc_clause 
        /// </summary>
        public partial class AstSqlClause208 : AstSqlClause
        {
            
            private static string _ruleName1 = "sql_clause";
            
            private AstDbccClause _dbccClause;
            
            internal AstSqlClause208(ParserRuleContext ctx, AstDbccClause dbccClause) : 
                    base(ctx)
            {
                _dbccClause = dbccClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDbccClause DbccClause
            {
                get
                {
                    return _dbccClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        

        
        internal AstSqlClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlClause(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlClause(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSqlClause Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSqlClause.AstSqlClause1(ctx, list.Get<AstMergeStatement>(0));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause2(ctx, list.Get<AstDeleteStatement>(0));
            }
            if ((index == 3))
            {
                return new AstSqlClause.AstSqlClause3(ctx, list.Get<AstInsertStatement>(0));
            }
            if ((index == 4))
            {
                return new AstSqlClause.AstSqlClause4(ctx, list.Get<AstSelectStatementStandalone>(0));
            }
            if ((index == 5))
            {
                return new AstSqlClause.AstSqlClause5(ctx, list.Get<AstUpdateStatement>(0));
            }
            if ((index == 6))
            {
                return new AstSqlClause.AstSqlClause6(ctx, list.Get<AstAlterApplicationRole>(0));
            }
            if ((index == 7))
            {
                return new AstSqlClause.AstSqlClause7(ctx, list.Get<AstAlterAssembly>(0));
            }
            if ((index == 8))
            {
                return new AstSqlClause.AstSqlClause8(ctx, list.Get<AstAlterAsymmetricKey>(0));
            }
            if ((index == 9))
            {
                return new AstSqlClause.AstSqlClause9(ctx, list.Get<AstAlterAuthorization>(0));
            }
            if ((index == 10))
            {
                return new AstSqlClause.AstSqlClause10(ctx, list.Get<AstAlterAuthorizationForAzureDw>(0));
            }
            if ((index == 11))
            {
                return new AstSqlClause.AstSqlClause11(ctx, list.Get<AstAlterAuthorizationForParallelDw>(0));
            }
            if ((index == 12))
            {
                return new AstSqlClause.AstSqlClause12(ctx, list.Get<AstAlterAuthorizationForSqlDatabase>(0));
            }
            if ((index == 13))
            {
                return new AstSqlClause.AstSqlClause13(ctx, list.Get<AstAlterAvailabilityGroup>(0));
            }
            if ((index == 14))
            {
                return new AstSqlClause.AstSqlClause14(ctx, list.Get<AstAlterCertificate>(0));
            }
            if ((index == 15))
            {
                return new AstSqlClause.AstSqlClause15(ctx, list.Get<AstAlterColumnEncryptionKey>(0));
            }
            if ((index == 16))
            {
                return new AstSqlClause.AstSqlClause16(ctx, list.Get<AstAlterCredential>(0));
            }
            if ((index == 17))
            {
                return new AstSqlClause.AstSqlClause17(ctx, list.Get<AstAlterCryptographicProvider>(0));
            }
            if ((index == 18))
            {
                return new AstSqlClause.AstSqlClause18(ctx, list.Get<AstAlterDatabase>(0));
            }
            if ((index == 19))
            {
                return new AstSqlClause.AstSqlClause19(ctx, list.Get<AstAlterDbRole>(0));
            }
            if ((index == 20))
            {
                return new AstSqlClause.AstSqlClause20(ctx, list.Get<AstAlterEndpoint>(0));
            }
            if ((index == 21))
            {
                return new AstSqlClause.AstSqlClause21(ctx, list.Get<AstCreateOrAlterEventSession>(0));
            }
            if ((index == 22))
            {
                return new AstSqlClause.AstSqlClause22(ctx, list.Get<AstAlterExternalDataSource>(0));
            }
            if ((index == 23))
            {
                return new AstSqlClause.AstSqlClause23(ctx, list.Get<AstAlterExternalLibrary>(0));
            }
            if ((index == 24))
            {
                return new AstSqlClause.AstSqlClause24(ctx, list.Get<AstAlterExternalResourcePool>(0));
            }
            if ((index == 25))
            {
                return new AstSqlClause.AstSqlClause25(ctx, list.Get<AstAlterFulltextCatalog>(0));
            }
            if ((index == 26))
            {
                return new AstSqlClause.AstSqlClause26(ctx, list.Get<AstAlterFulltextStoplist>(0));
            }
            if ((index == 27))
            {
                return new AstSqlClause.AstSqlClause27(ctx, list.Get<AstAlterIndex>(0));
            }
            if ((index == 28))
            {
                return new AstSqlClause.AstSqlClause28(ctx, list.Get<AstAlterLoginAzureSql>(0));
            }
            if ((index == 29))
            {
                return new AstSqlClause.AstSqlClause29(ctx, list.Get<AstAlterLoginAzureSqlDwAndPdw>(0));
            }
            if ((index == 30))
            {
                return new AstSqlClause.AstSqlClause30(ctx, list.Get<AstAlterLoginSqlServer>(0));
            }
            if ((index == 31))
            {
                return new AstSqlClause.AstSqlClause31(ctx, list.Get<AstAlterMasterKeyAzureSql>(0));
            }
            if ((index == 32))
            {
                return new AstSqlClause.AstSqlClause32(ctx, list.Get<AstAlterMasterKeySqlServer>(0));
            }
            if ((index == 33))
            {
                return new AstSqlClause.AstSqlClause33(ctx, list.Get<AstAlterMessageType>(0));
            }
            if ((index == 34))
            {
                return new AstSqlClause.AstSqlClause34(ctx, list.Get<AstAlterPartitionFunction>(0));
            }
            if ((index == 35))
            {
                return new AstSqlClause.AstSqlClause35(ctx, list.Get<AstAlterPartitionScheme>(0));
            }
            if ((index == 36))
            {
                return new AstSqlClause.AstSqlClause36(ctx, list.Get<AstAlterRemoteServiceBinding>(0));
            }
            if ((index == 37))
            {
                return new AstSqlClause.AstSqlClause37(ctx, list.Get<AstAlterResourceGovernor>(0));
            }
            if ((index == 38))
            {
                return new AstSqlClause.AstSqlClause38(ctx, list.Get<AstAlterSchemaAzureSqlDwAndPdw>(0));
            }
            if ((index == 39))
            {
                return new AstSqlClause.AstSqlClause39(ctx, list.Get<AstAlterSchemaSql>(0));
            }
            if ((index == 40))
            {
                return new AstSqlClause.AstSqlClause40(ctx, list.Get<AstAlterSequence>(0));
            }
            if ((index == 41))
            {
                return new AstSqlClause.AstSqlClause41(ctx, list.Get<AstAlterServerAudit>(0));
            }
            if ((index == 42))
            {
                return new AstSqlClause.AstSqlClause42(ctx, list.Get<AstAlterServerAuditSpecification>(0));
            }
            if ((index == 43))
            {
                return new AstSqlClause.AstSqlClause43(ctx, list.Get<AstAlterServerConfiguration>(0));
            }
            if ((index == 44))
            {
                return new AstSqlClause.AstSqlClause44(ctx, list.Get<AstAlterServerRole>(0));
            }
            if ((index == 45))
            {
                return new AstSqlClause.AstSqlClause45(ctx, list.Get<AstAlterServerRolePdw>(0));
            }
            if ((index == 46))
            {
                return new AstSqlClause.AstSqlClause46(ctx, list.Get<AstAlterService>(0));
            }
            if ((index == 47))
            {
                return new AstSqlClause.AstSqlClause47(ctx, list.Get<AstAlterServiceMasterKey>(0));
            }
            if ((index == 48))
            {
                return new AstSqlClause.AstSqlClause48(ctx, list.Get<AstAlterSymmetricKey>(0));
            }
            if ((index == 49))
            {
                return new AstSqlClause.AstSqlClause49(ctx, list.Get<AstAlterTable>(0));
            }
            if ((index == 50))
            {
                return new AstSqlClause.AstSqlClause50(ctx, list.Get<AstAlterUser>(0));
            }
            if ((index == 51))
            {
                return new AstSqlClause.AstSqlClause51(ctx, list.Get<AstAlterUserAzureSql>(0));
            }
            if ((index == 52))
            {
                return new AstSqlClause.AstSqlClause52(ctx, list.Get<AstAlterWorkloadGroup>(0));
            }
            if ((index == 53))
            {
                return new AstSqlClause.AstSqlClause53(ctx, list.Get<AstCreateApplicationRole>(0));
            }
            if ((index == 54))
            {
                return new AstSqlClause.AstSqlClause54(ctx, list.Get<AstCreateAssembly>(0));
            }
            if ((index == 55))
            {
                return new AstSqlClause.AstSqlClause55(ctx, list.Get<AstCreateAsymmetricKey>(0));
            }
            if ((index == 56))
            {
                return new AstSqlClause.AstSqlClause56(ctx, list.Get<AstCreateColumnEncryptionKey>(0));
            }
            if ((index == 57))
            {
                return new AstSqlClause.AstSqlClause57(ctx, list.Get<AstCreateColumnMasterKey>(0));
            }
            if ((index == 58))
            {
                return new AstSqlClause.AstSqlClause58(ctx, list.Get<AstCreateCredential>(0));
            }
            if ((index == 59))
            {
                return new AstSqlClause.AstSqlClause59(ctx, list.Get<AstCreateCryptographicProvider>(0));
            }
            if ((index == 60))
            {
                return new AstSqlClause.AstSqlClause60(ctx, list.Get<AstCreateDatabase>(0));
            }
            if ((index == 61))
            {
                return new AstSqlClause.AstSqlClause61(ctx, list.Get<AstCreateDbRole>(0));
            }
            if ((index == 62))
            {
                return new AstSqlClause.AstSqlClause62(ctx, list.Get<AstCreateEventNotification>(0));
            }
            if ((index == 63))
            {
                return new AstSqlClause.AstSqlClause63(ctx, list.Get<AstCreateExternalLibrary>(0));
            }
            if ((index == 64))
            {
                return new AstSqlClause.AstSqlClause64(ctx, list.Get<AstCreateExternalResourcePool>(0));
            }
            if ((index == 65))
            {
                return new AstSqlClause.AstSqlClause65(ctx, list.Get<AstCreateFulltextCatalog>(0));
            }
            if ((index == 66))
            {
                return new AstSqlClause.AstSqlClause66(ctx, list.Get<AstCreateFulltextStoplist>(0));
            }
            if ((index == 67))
            {
                return new AstSqlClause.AstSqlClause67(ctx, list.Get<AstCreateIndex>(0));
            }
            if ((index == 68))
            {
                return new AstSqlClause.AstSqlClause68(ctx, list.Get<AstCreateColumnstoreIndex>(0));
            }
            if ((index == 69))
            {
                return new AstSqlClause.AstSqlClause69(ctx, list.Get<AstCreateNonclusteredColumnstoreIndex>(0));
            }
            if ((index == 70))
            {
                return new AstSqlClause.AstSqlClause70(ctx, list.Get<AstCreateLoginAzureSql>(0));
            }
            if ((index == 71))
            {
                return new AstSqlClause.AstSqlClause71(ctx, list.Get<AstCreateLoginPdw>(0));
            }
            if ((index == 72))
            {
                return new AstSqlClause.AstSqlClause72(ctx, list.Get<AstCreateLoginSqlServer>(0));
            }
            if ((index == 73))
            {
                return new AstSqlClause.AstSqlClause73(ctx, list.Get<AstCreateMasterKeyAzureSql>(0));
            }
            if ((index == 74))
            {
                return new AstSqlClause.AstSqlClause74(ctx, list.Get<AstCreateMasterKeySqlServer>(0));
            }
            if ((index == 75))
            {
                return new AstSqlClause.AstSqlClause75(ctx, list.Get<AstCreateOrAlterBrokerPriority>(0));
            }
            if ((index == 76))
            {
                return new AstSqlClause.AstSqlClause76(ctx, list.Get<AstCreateRemoteServiceBinding>(0));
            }
            if ((index == 77))
            {
                return new AstSqlClause.AstSqlClause77(ctx, list.Get<AstCreateResourcePool>(0));
            }
            if ((index == 78))
            {
                return new AstSqlClause.AstSqlClause78(ctx, list.Get<AstCreateRoute>(0));
            }
            if ((index == 79))
            {
                return new AstSqlClause.AstSqlClause79(ctx, list.Get<AstCreateRule>(0));
            }
            if ((index == 80))
            {
                return new AstSqlClause.AstSqlClause80(ctx, list.Get<AstCreateSchema>(0));
            }
            if ((index == 81))
            {
                return new AstSqlClause.AstSqlClause81(ctx, list.Get<AstCreateSchemaAzureSqlDwAndPdw>(0));
            }
            if ((index == 82))
            {
                return new AstSqlClause.AstSqlClause82(ctx, list.Get<AstCreateSearchPropertyList>(0));
            }
            if ((index == 83))
            {
                return new AstSqlClause.AstSqlClause83(ctx, list.Get<AstCreateSecurityPolicy>(0));
            }
            if ((index == 84))
            {
                return new AstSqlClause.AstSqlClause84(ctx, list.Get<AstCreateSequence>(0));
            }
            if ((index == 85))
            {
                return new AstSqlClause.AstSqlClause85(ctx, list.Get<AstCreateServerAudit>(0));
            }
            if ((index == 86))
            {
                return new AstSqlClause.AstSqlClause86(ctx, list.Get<AstCreateServerAuditSpecification>(0));
            }
            if ((index == 87))
            {
                return new AstSqlClause.AstSqlClause87(ctx, list.Get<AstCreateServerRole>(0));
            }
            if ((index == 88))
            {
                return new AstSqlClause.AstSqlClause88(ctx, list.Get<AstCreateService>(0));
            }
            if ((index == 89))
            {
                return new AstSqlClause.AstSqlClause89(ctx, list.Get<AstCreateStatistics>(0));
            }
            if ((index == 90))
            {
                return new AstSqlClause.AstSqlClause90(ctx, list.Get<AstCreateSynonym>(0));
            }
            if ((index == 91))
            {
                return new AstSqlClause.AstSqlClause91(ctx, list.Get<AstCreateTable>(0));
            }
            if ((index == 92))
            {
                return new AstSqlClause.AstSqlClause92(ctx, list.Get<AstCreateType>(0));
            }
            if ((index == 93))
            {
                return new AstSqlClause.AstSqlClause93(ctx, list.Get<AstCreateUser>(0));
            }
            if ((index == 94))
            {
                return new AstSqlClause.AstSqlClause94(ctx, list.Get<AstCreateUserAzureSqlDw>(0));
            }
            if ((index == 95))
            {
                return new AstSqlClause.AstSqlClause95(ctx, list.Get<AstCreateWorkloadGroup>(0));
            }
            if ((index == 96))
            {
                return new AstSqlClause.AstSqlClause96(ctx, list.Get<AstCreateXmlIndex>(0));
            }
            if ((index == 97))
            {
                return new AstSqlClause.AstSqlClause97(ctx, list.Get<AstCreateXmlSchemaCollection>(0));
            }
            if ((index == 98))
            {
                return new AstSqlClause.AstSqlClause98(ctx, list.Get<AstCreatePartitionFunction>(0));
            }
            if ((index == 99))
            {
                return new AstSqlClause.AstSqlClause99(ctx, list.Get<AstCreatePartitionScheme>(0));
            }
            if ((index == 100))
            {
                return new AstSqlClause.AstSqlClause100(ctx, list.Get<AstDropAggregate>(0));
            }
            if ((index == 101))
            {
                return new AstSqlClause.AstSqlClause101(ctx, list.Get<AstDropApplicationRole>(0));
            }
            if ((index == 102))
            {
                return new AstSqlClause.AstSqlClause102(ctx, list.Get<AstDropAssembly>(0));
            }
            if ((index == 103))
            {
                return new AstSqlClause.AstSqlClause103(ctx, list.Get<AstDropAsymmetricKey>(0));
            }
            if ((index == 104))
            {
                return new AstSqlClause.AstSqlClause104(ctx, list.Get<AstDropAvailabilityGroup>(0));
            }
            if ((index == 105))
            {
                return new AstSqlClause.AstSqlClause105(ctx, list.Get<AstDropBrokerPriority>(0));
            }
            if ((index == 106))
            {
                return new AstSqlClause.AstSqlClause106(ctx, list.Get<AstDropCertificate>(0));
            }
            if ((index == 107))
            {
                return new AstSqlClause.AstSqlClause107(ctx, list.Get<AstDropColumnEncryptionKey>(0));
            }
            if ((index == 108))
            {
                return new AstSqlClause.AstSqlClause108(ctx, list.Get<AstDropColumnMasterKey>(0));
            }
            if ((index == 109))
            {
                return new AstSqlClause.AstSqlClause109(ctx, list.Get<AstDropContract>(0));
            }
            if ((index == 110))
            {
                return new AstSqlClause.AstSqlClause110(ctx, list.Get<AstDropCredential>(0));
            }
            if ((index == 111))
            {
                return new AstSqlClause.AstSqlClause111(ctx, list.Get<AstDropCryptograhicProvider>(0));
            }
            if ((index == 112))
            {
                return new AstSqlClause.AstSqlClause112(ctx, list.Get<AstDropDatabase>(0));
            }
            if ((index == 113))
            {
                return new AstSqlClause.AstSqlClause113(ctx, list.Get<AstDropDatabaseAuditSpecification>(0));
            }
            if ((index == 114))
            {
                return new AstSqlClause.AstSqlClause114(ctx, list.Get<AstDropDatabaseEncryptionKey>(0));
            }
            if ((index == 115))
            {
                return new AstSqlClause.AstSqlClause115(ctx, list.Get<AstDropDatabaseScopedCredential>(0));
            }
            if ((index == 116))
            {
                return new AstSqlClause.AstSqlClause116(ctx, list.Get<AstDropDbRole>(0));
            }
            if ((index == 117))
            {
                return new AstSqlClause.AstSqlClause117(ctx, list.Get<AstDropDefault>(0));
            }
            if ((index == 118))
            {
                return new AstSqlClause.AstSqlClause118(ctx, list.Get<AstDropEndpoint>(0));
            }
            if ((index == 119))
            {
                return new AstSqlClause.AstSqlClause119(ctx, list.Get<AstDropEventNotifications>(0));
            }
            if ((index == 120))
            {
                return new AstSqlClause.AstSqlClause120(ctx, list.Get<AstDropEventSession>(0));
            }
            if ((index == 121))
            {
                return new AstSqlClause.AstSqlClause121(ctx, list.Get<AstDropExternalDataSource>(0));
            }
            if ((index == 122))
            {
                return new AstSqlClause.AstSqlClause122(ctx, list.Get<AstDropExternalFileFormat>(0));
            }
            if ((index == 123))
            {
                return new AstSqlClause.AstSqlClause123(ctx, list.Get<AstDropExternalLibrary>(0));
            }
            if ((index == 124))
            {
                return new AstSqlClause.AstSqlClause124(ctx, list.Get<AstDropExternalResourcePool>(0));
            }
            if ((index == 125))
            {
                return new AstSqlClause.AstSqlClause125(ctx, list.Get<AstDropExternalTable>(0));
            }
            if ((index == 126))
            {
                return new AstSqlClause.AstSqlClause126(ctx, list.Get<AstDropFulltextCatalog>(0));
            }
            if ((index == 127))
            {
                return new AstSqlClause.AstSqlClause127(ctx, list.Get<AstDropFulltextIndex>(0));
            }
            if ((index == 128))
            {
                return new AstSqlClause.AstSqlClause128(ctx, list.Get<AstDropFulltextStoplist>(0));
            }
            if ((index == 129))
            {
                return new AstSqlClause.AstSqlClause129(ctx, list.Get<AstDropFunction>(0));
            }
            if ((index == 130))
            {
                return new AstSqlClause.AstSqlClause130(ctx, list.Get<AstDropIndex>(0));
            }
            if ((index == 131))
            {
                return new AstSqlClause.AstSqlClause131(ctx, list.Get<AstDropLogin>(0));
            }
            if ((index == 132))
            {
                return new AstSqlClause.AstSqlClause132(ctx, list.Get<AstDropMasterKey>(0));
            }
            if ((index == 133))
            {
                return new AstSqlClause.AstSqlClause133(ctx, list.Get<AstDropMessageType>(0));
            }
            if ((index == 134))
            {
                return new AstSqlClause.AstSqlClause134(ctx, list.Get<AstDropPartitionFunction>(0));
            }
            if ((index == 135))
            {
                return new AstSqlClause.AstSqlClause135(ctx, list.Get<AstDropPartitionScheme>(0));
            }
            if ((index == 136))
            {
                return new AstSqlClause.AstSqlClause136(ctx, list.Get<AstDropProcedure>(0));
            }
            if ((index == 137))
            {
                return new AstSqlClause.AstSqlClause137(ctx, list.Get<AstDropQueue>(0));
            }
            if ((index == 138))
            {
                return new AstSqlClause.AstSqlClause138(ctx, list.Get<AstDropRemoteServiceBinding>(0));
            }
            if ((index == 139))
            {
                return new AstSqlClause.AstSqlClause139(ctx, list.Get<AstDropResourcePool>(0));
            }
            if ((index == 140))
            {
                return new AstSqlClause.AstSqlClause140(ctx, list.Get<AstDropRoute>(0));
            }
            if ((index == 141))
            {
                return new AstSqlClause.AstSqlClause141(ctx, list.Get<AstDropRule>(0));
            }
            if ((index == 142))
            {
                return new AstSqlClause.AstSqlClause142(ctx, list.Get<AstDropSchema>(0));
            }
            if ((index == 143))
            {
                return new AstSqlClause.AstSqlClause143(ctx, list.Get<AstDropSearchPropertyList>(0));
            }
            if ((index == 144))
            {
                return new AstSqlClause.AstSqlClause144(ctx, list.Get<AstDropSecurityPolicy>(0));
            }
            if ((index == 145))
            {
                return new AstSqlClause.AstSqlClause145(ctx, list.Get<AstDropSequence>(0));
            }
            if ((index == 146))
            {
                return new AstSqlClause.AstSqlClause146(ctx, list.Get<AstDropServerAudit>(0));
            }
            if ((index == 147))
            {
                return new AstSqlClause.AstSqlClause147(ctx, list.Get<AstDropServerAuditSpecification>(0));
            }
            if ((index == 148))
            {
                return new AstSqlClause.AstSqlClause148(ctx, list.Get<AstDropServerRole>(0));
            }
            if ((index == 149))
            {
                return new AstSqlClause.AstSqlClause149(ctx, list.Get<AstDropService>(0));
            }
            if ((index == 150))
            {
                return new AstSqlClause.AstSqlClause150(ctx, list.Get<AstDropSignature>(0));
            }
            if ((index == 151))
            {
                return new AstSqlClause.AstSqlClause151(ctx, list.Get<AstDropStatistics>(0));
            }
            if ((index == 152))
            {
                return new AstSqlClause.AstSqlClause152(ctx, list.Get<AstDropStatisticsIdAzureDwAndPdw>(0));
            }
            if ((index == 153))
            {
                return new AstSqlClause.AstSqlClause153(ctx, list.Get<AstDropSymmetricKey>(0));
            }
            if ((index == 154))
            {
                return new AstSqlClause.AstSqlClause154(ctx, list.Get<AstDropSynonym>(0));
            }
            if ((index == 155))
            {
                return new AstSqlClause.AstSqlClause155(ctx, list.Get<AstDropTable>(0));
            }
            if ((index == 156))
            {
                return new AstSqlClause.AstSqlClause156(ctx, list.Get<AstDropDmlTrigger>(0));
            }
            if ((index == 157))
            {
                return new AstSqlClause.AstSqlClause157(ctx, list.Get<AstDropDdlTrigger>(0));
            }
            if ((index == 158))
            {
                return new AstSqlClause.AstSqlClause158(ctx, list.Get<AstDropType>(0));
            }
            if ((index == 159))
            {
                return new AstSqlClause.AstSqlClause159(ctx, list.Get<AstDropUser>(0));
            }
            if ((index == 160))
            {
                return new AstSqlClause.AstSqlClause160(ctx, list.Get<AstDropView>(0));
            }
            if ((index == 161))
            {
                return new AstSqlClause.AstSqlClause161(ctx, list.Get<AstDropWorkloadGroup>(0));
            }
            if ((index == 162))
            {
                return new AstSqlClause.AstSqlClause162(ctx, list.Get<AstDropXmlSchemaCollection>(0));
            }
            if ((index == 163))
            {
                return new AstSqlClause.AstSqlClause163(ctx, list.Get<AstDisableTrigger>(0));
            }
            if ((index == 164))
            {
                return new AstSqlClause.AstSqlClause164(ctx, list.Get<AstEnableTrigger>(0));
            }
            if ((index == 165))
            {
                return new AstSqlClause.AstSqlClause165(ctx, list.Get<AstLockTable>(0));
            }
            if ((index == 166))
            {
                return new AstSqlClause.AstSqlClause166(ctx, list.Get<AstTruncateTable>(0));
            }
            if ((index == 167))
            {
                return new AstSqlClause.AstSqlClause167(ctx, list.Get<AstUpdateStatistics>(0));
            }
            if ((index == 168))
            {
                return new AstSqlClause.AstSqlClause168(ctx, list.Get<AstBlockStatement>(0));
            }
            if ((index == 169))
            {
                return new AstSqlClause.AstSqlClause169(ctx, list.Get<AstBreakStatement>(0));
            }
            if ((index == 170))
            {
                return new AstSqlClause.AstSqlClause170(ctx, list.Get<AstContinueStatement>(0));
            }
            if ((index == 171))
            {
                return new AstSqlClause.AstSqlClause171(ctx, list.Get<AstGotoStatement>(0));
            }
            if ((index == 172))
            {
                return new AstSqlClause.AstSqlClause172(ctx, list.Get<AstIfStatement>(0));
            }
            if ((index == 173))
            {
                return new AstSqlClause.AstSqlClause173(ctx, list.Get<AstReturnStatement>(0));
            }
            if ((index == 174))
            {
                return new AstSqlClause.AstSqlClause174(ctx, list.Get<AstThrowStatement>(0));
            }
            if ((index == 175))
            {
                return new AstSqlClause.AstSqlClause175(ctx, list.Get<AstTryCatchStatement>(0));
            }
            if ((index == 176))
            {
                return new AstSqlClause.AstSqlClause176(ctx, list.Get<AstWaitforStatement>(0));
            }
            if ((index == 177))
            {
                return new AstSqlClause.AstSqlClause177(ctx, list.Get<AstWhileStatement>(0));
            }
            if ((index == 178))
            {
                return new AstSqlClause.AstSqlClause178(ctx, list.Get<AstPrintStatement>(0));
            }
            if ((index == 179))
            {
                return new AstSqlClause.AstSqlClause179(ctx, list.Get<AstRaiseerrorStatement>(0));
            }
            if ((index == 180))
            {
                return new AstSqlClause.AstSqlClause180(ctx, list.Get<AstDeclareStatement>(0));
            }
            if ((index == 181))
            {
                return new AstSqlClause.AstSqlClause181(ctx, list.Get<AstExecuteStatement>(0));
            }
            if ((index == 182))
            {
                return new AstSqlClause.AstSqlClause182(ctx, list.Get<AstCursorStatement>(0));
            }
            if ((index == 183))
            {
                return new AstSqlClause.AstSqlClause183(ctx, list.Get<AstBeginConversationTimer>(0));
            }
            if ((index == 184))
            {
                return new AstSqlClause.AstSqlClause184(ctx, list.Get<AstBeginConversationDialog>(0));
            }
            if ((index == 185))
            {
                return new AstSqlClause.AstSqlClause185(ctx, list.Get<AstEndConversation>(0));
            }
            if ((index == 186))
            {
                return new AstSqlClause.AstSqlClause186(ctx, list.Get<AstGetConversation>(0));
            }
            if ((index == 187))
            {
                return new AstSqlClause.AstSqlClause187(ctx, list.Get<AstSendConversation>(0));
            }
            if ((index == 188))
            {
                return new AstSqlClause.AstSqlClause188(ctx, list.Get<AstWaitforConversation>(0));
            }
            if ((index == 189))
            {
                return new AstSqlClause.AstSqlClause189(ctx, list.Get<AstCreateContract>(0));
            }
            if ((index == 190))
            {
                return new AstSqlClause.AstSqlClause190(ctx, list.Get<AstCreateQueue>(0));
            }
            if ((index == 191))
            {
                return new AstSqlClause.AstSqlClause191(ctx, list.Get<AstAlterQueue>(0));
            }
            if ((index == 192))
            {
                return new AstSqlClause.AstSqlClause192(ctx, list.Get<AstKillStatement>(0));
            }
            if ((index == 193))
            {
                return new AstSqlClause.AstSqlClause193(ctx, list.Get<AstMessageStatement>(0));
            }
            if ((index == 194))
            {
                return new AstSqlClause.AstSqlClause194(ctx, list.Get<AstSecurityStatement>(0));
            }
            if ((index == 195))
            {
                return new AstSqlClause.AstSqlClause195(ctx, list.Get<AstSetStatement>(0));
            }
            if ((index == 196))
            {
                return new AstSqlClause.AstSqlClause196(ctx, list.Get<AstTransactionStatement>(0));
            }
            if ((index == 197))
            {
                return new AstSqlClause.AstSqlClause197(ctx, list.Get<AstUseStatement>(0));
            }
            if ((index == 198))
            {
                return new AstSqlClause.AstSqlClause198(ctx, list.Get<AstSetuserStatement>(0));
            }
            if ((index == 199))
            {
                return new AstSqlClause.AstSqlClause199(ctx, list.Get<AstReconfigureStatement>(0));
            }
            if ((index == 200))
            {
                return new AstSqlClause.AstSqlClause200(ctx, list.Get<AstShutdownStatement>(0));
            }
            if ((index == 201))
            {
                return new AstSqlClause.AstSqlClause201(ctx, list.Get<AstCheckpointStatement>(0));
            }
            if ((index == 202))
            {
                return new AstSqlClause.AstSqlClause202(ctx, list.Get<AstBackupDatabase>(0));
            }
            if ((index == 203))
            {
                return new AstSqlClause.AstSqlClause203(ctx, list.Get<AstBackupLog>(0));
            }
            if ((index == 204))
            {
                return new AstSqlClause.AstSqlClause204(ctx, list.Get<AstBackupCertificate>(0));
            }
            if ((index == 205))
            {
                return new AstSqlClause.AstSqlClause205(ctx, list.Get<AstBackupMasterKey>(0));
            }
            if ((index == 206))
            {
                return new AstSqlClause.AstSqlClause206(ctx, list.Get<AstBackupServiceMasterKey>(0));
            }
            if ((index == 207))
            {
                return new AstSqlClause.AstSqlClause207(ctx, list.Get<AstDbccSpecial>(0));
            }
            if ((index == 208))
            {
                return new AstSqlClause.AstSqlClause208(ctx, list.Get<AstDbccClause>(0));
            }
            return null;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    merge_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstMergeStatement mergeStatement)
        {
            AstSqlClause.AstSqlClause1 result = new AstSqlClause.AstSqlClause1(ctx, mergeStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    delete_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDeleteStatement deleteStatement)
        {
            AstSqlClause.AstSqlClause2 result = new AstSqlClause.AstSqlClause2(ctx, deleteStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    insert_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstInsertStatement insertStatement)
        {
            AstSqlClause.AstSqlClause3 result = new AstSqlClause.AstSqlClause3(ctx, insertStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    select_statement_standalone 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSelectStatementStandalone selectStatementStandalone)
        {
            AstSqlClause.AstSqlClause4 result = new AstSqlClause.AstSqlClause4(ctx, selectStatementStandalone);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    update_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstUpdateStatement updateStatement)
        {
            AstSqlClause.AstSqlClause5 result = new AstSqlClause.AstSqlClause5(ctx, updateStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_application_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterApplicationRole alterApplicationRole)
        {
            AstSqlClause.AstSqlClause6 result = new AstSqlClause.AstSqlClause6(ctx, alterApplicationRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_assembly 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAssembly alterAssembly)
        {
            AstSqlClause.AstSqlClause7 result = new AstSqlClause.AstSqlClause7(ctx, alterAssembly);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_asymmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAsymmetricKey alterAsymmetricKey)
        {
            AstSqlClause.AstSqlClause8 result = new AstSqlClause.AstSqlClause8(ctx, alterAsymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorization alterAuthorization)
        {
            AstSqlClause.AstSqlClause9 result = new AstSqlClause.AstSqlClause9(ctx, alterAuthorization);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization_for_azure_dw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorizationForAzureDw alterAuthorizationForAzureDw)
        {
            AstSqlClause.AstSqlClause10 result = new AstSqlClause.AstSqlClause10(ctx, alterAuthorizationForAzureDw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization_for_parallel_dw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorizationForParallelDw alterAuthorizationForParallelDw)
        {
            AstSqlClause.AstSqlClause11 result = new AstSqlClause.AstSqlClause11(ctx, alterAuthorizationForParallelDw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization_for_sql_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorizationForSqlDatabase alterAuthorizationForSqlDatabase)
        {
            AstSqlClause.AstSqlClause12 result = new AstSqlClause.AstSqlClause12(ctx, alterAuthorizationForSqlDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_availability_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAvailabilityGroup alterAvailabilityGroup)
        {
            AstSqlClause.AstSqlClause13 result = new AstSqlClause.AstSqlClause13(ctx, alterAvailabilityGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_certificate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterCertificate alterCertificate)
        {
            AstSqlClause.AstSqlClause14 result = new AstSqlClause.AstSqlClause14(ctx, alterCertificate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_column_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterColumnEncryptionKey alterColumnEncryptionKey)
        {
            AstSqlClause.AstSqlClause15 result = new AstSqlClause.AstSqlClause15(ctx, alterColumnEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterCredential alterCredential)
        {
            AstSqlClause.AstSqlClause16 result = new AstSqlClause.AstSqlClause16(ctx, alterCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_cryptographic_provider 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterCryptographicProvider alterCryptographicProvider)
        {
            AstSqlClause.AstSqlClause17 result = new AstSqlClause.AstSqlClause17(ctx, alterCryptographicProvider);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterDatabase alterDatabase)
        {
            AstSqlClause.AstSqlClause18 result = new AstSqlClause.AstSqlClause18(ctx, alterDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_db_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterDbRole alterDbRole)
        {
            AstSqlClause.AstSqlClause19 result = new AstSqlClause.AstSqlClause19(ctx, alterDbRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_endpoint 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterEndpoint alterEndpoint)
        {
            AstSqlClause.AstSqlClause20 result = new AstSqlClause.AstSqlClause20(ctx, alterEndpoint);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_or_alter_event_session 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateOrAlterEventSession createOrAlterEventSession)
        {
            AstSqlClause.AstSqlClause21 result = new AstSqlClause.AstSqlClause21(ctx, createOrAlterEventSession);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_external_data_source 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterExternalDataSource alterExternalDataSource)
        {
            AstSqlClause.AstSqlClause22 result = new AstSqlClause.AstSqlClause22(ctx, alterExternalDataSource);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_external_library 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterExternalLibrary alterExternalLibrary)
        {
            AstSqlClause.AstSqlClause23 result = new AstSqlClause.AstSqlClause23(ctx, alterExternalLibrary);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_external_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterExternalResourcePool alterExternalResourcePool)
        {
            AstSqlClause.AstSqlClause24 result = new AstSqlClause.AstSqlClause24(ctx, alterExternalResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_fulltext_catalog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterFulltextCatalog alterFulltextCatalog)
        {
            AstSqlClause.AstSqlClause25 result = new AstSqlClause.AstSqlClause25(ctx, alterFulltextCatalog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_fulltext_stoplist 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterFulltextStoplist alterFulltextStoplist)
        {
            AstSqlClause.AstSqlClause26 result = new AstSqlClause.AstSqlClause26(ctx, alterFulltextStoplist);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterIndex alterIndex)
        {
            AstSqlClause.AstSqlClause27 result = new AstSqlClause.AstSqlClause27(ctx, alterIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_login_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterLoginAzureSql alterLoginAzureSql)
        {
            AstSqlClause.AstSqlClause28 result = new AstSqlClause.AstSqlClause28(ctx, alterLoginAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_login_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterLoginAzureSqlDwAndPdw alterLoginAzureSqlDwAndPdw)
        {
            AstSqlClause.AstSqlClause29 result = new AstSqlClause.AstSqlClause29(ctx, alterLoginAzureSqlDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_login_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterLoginSqlServer alterLoginSqlServer)
        {
            AstSqlClause.AstSqlClause30 result = new AstSqlClause.AstSqlClause30(ctx, alterLoginSqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_master_key_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterMasterKeyAzureSql alterMasterKeyAzureSql)
        {
            AstSqlClause.AstSqlClause31 result = new AstSqlClause.AstSqlClause31(ctx, alterMasterKeyAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_master_key_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterMasterKeySqlServer alterMasterKeySqlServer)
        {
            AstSqlClause.AstSqlClause32 result = new AstSqlClause.AstSqlClause32(ctx, alterMasterKeySqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_message_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterMessageType alterMessageType)
        {
            AstSqlClause.AstSqlClause33 result = new AstSqlClause.AstSqlClause33(ctx, alterMessageType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_partition_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterPartitionFunction alterPartitionFunction)
        {
            AstSqlClause.AstSqlClause34 result = new AstSqlClause.AstSqlClause34(ctx, alterPartitionFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_partition_scheme 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterPartitionScheme alterPartitionScheme)
        {
            AstSqlClause.AstSqlClause35 result = new AstSqlClause.AstSqlClause35(ctx, alterPartitionScheme);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_remote_service_binding 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterRemoteServiceBinding alterRemoteServiceBinding)
        {
            AstSqlClause.AstSqlClause36 result = new AstSqlClause.AstSqlClause36(ctx, alterRemoteServiceBinding);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_resource_governor 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterResourceGovernor alterResourceGovernor)
        {
            AstSqlClause.AstSqlClause37 result = new AstSqlClause.AstSqlClause37(ctx, alterResourceGovernor);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSchemaAzureSqlDwAndPdw alterSchemaAzureSqlDwAndPdw)
        {
            AstSqlClause.AstSqlClause38 result = new AstSqlClause.AstSqlClause38(ctx, alterSchemaAzureSqlDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_schema_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSchemaSql alterSchemaSql)
        {
            AstSqlClause.AstSqlClause39 result = new AstSqlClause.AstSqlClause39(ctx, alterSchemaSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_sequence 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSequence alterSequence)
        {
            AstSqlClause.AstSqlClause40 result = new AstSqlClause.AstSqlClause40(ctx, alterSequence);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_audit 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerAudit alterServerAudit)
        {
            AstSqlClause.AstSqlClause41 result = new AstSqlClause.AstSqlClause41(ctx, alterServerAudit);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerAuditSpecification alterServerAuditSpecification)
        {
            AstSqlClause.AstSqlClause42 result = new AstSqlClause.AstSqlClause42(ctx, alterServerAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_configuration 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerConfiguration alterServerConfiguration)
        {
            AstSqlClause.AstSqlClause43 result = new AstSqlClause.AstSqlClause43(ctx, alterServerConfiguration);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerRole alterServerRole)
        {
            AstSqlClause.AstSqlClause44 result = new AstSqlClause.AstSqlClause44(ctx, alterServerRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_role_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerRolePdw alterServerRolePdw)
        {
            AstSqlClause.AstSqlClause45 result = new AstSqlClause.AstSqlClause45(ctx, alterServerRolePdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_service 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterService alterService)
        {
            AstSqlClause.AstSqlClause46 result = new AstSqlClause.AstSqlClause46(ctx, alterService);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_service_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServiceMasterKey alterServiceMasterKey)
        {
            AstSqlClause.AstSqlClause47 result = new AstSqlClause.AstSqlClause47(ctx, alterServiceMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_symmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSymmetricKey alterSymmetricKey)
        {
            AstSqlClause.AstSqlClause48 result = new AstSqlClause.AstSqlClause48(ctx, alterSymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterTable alterTable)
        {
            AstSqlClause.AstSqlClause49 result = new AstSqlClause.AstSqlClause49(ctx, alterTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_user 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterUser alterUser)
        {
            AstSqlClause.AstSqlClause50 result = new AstSqlClause.AstSqlClause50(ctx, alterUser);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_user_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterUserAzureSql alterUserAzureSql)
        {
            AstSqlClause.AstSqlClause51 result = new AstSqlClause.AstSqlClause51(ctx, alterUserAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_workload_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterWorkloadGroup alterWorkloadGroup)
        {
            AstSqlClause.AstSqlClause52 result = new AstSqlClause.AstSqlClause52(ctx, alterWorkloadGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_application_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateApplicationRole createApplicationRole)
        {
            AstSqlClause.AstSqlClause53 result = new AstSqlClause.AstSqlClause53(ctx, createApplicationRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_assembly 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateAssembly createAssembly)
        {
            AstSqlClause.AstSqlClause54 result = new AstSqlClause.AstSqlClause54(ctx, createAssembly);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_asymmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateAsymmetricKey createAsymmetricKey)
        {
            AstSqlClause.AstSqlClause55 result = new AstSqlClause.AstSqlClause55(ctx, createAsymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_column_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateColumnEncryptionKey createColumnEncryptionKey)
        {
            AstSqlClause.AstSqlClause56 result = new AstSqlClause.AstSqlClause56(ctx, createColumnEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_column_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateColumnMasterKey createColumnMasterKey)
        {
            AstSqlClause.AstSqlClause57 result = new AstSqlClause.AstSqlClause57(ctx, createColumnMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateCredential createCredential)
        {
            AstSqlClause.AstSqlClause58 result = new AstSqlClause.AstSqlClause58(ctx, createCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_cryptographic_provider 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateCryptographicProvider createCryptographicProvider)
        {
            AstSqlClause.AstSqlClause59 result = new AstSqlClause.AstSqlClause59(ctx, createCryptographicProvider);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateDatabase createDatabase)
        {
            AstSqlClause.AstSqlClause60 result = new AstSqlClause.AstSqlClause60(ctx, createDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_db_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateDbRole createDbRole)
        {
            AstSqlClause.AstSqlClause61 result = new AstSqlClause.AstSqlClause61(ctx, createDbRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_event_notification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateEventNotification createEventNotification)
        {
            AstSqlClause.AstSqlClause62 result = new AstSqlClause.AstSqlClause62(ctx, createEventNotification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_external_library 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateExternalLibrary createExternalLibrary)
        {
            AstSqlClause.AstSqlClause63 result = new AstSqlClause.AstSqlClause63(ctx, createExternalLibrary);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_external_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateExternalResourcePool createExternalResourcePool)
        {
            AstSqlClause.AstSqlClause64 result = new AstSqlClause.AstSqlClause64(ctx, createExternalResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_fulltext_catalog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateFulltextCatalog createFulltextCatalog)
        {
            AstSqlClause.AstSqlClause65 result = new AstSqlClause.AstSqlClause65(ctx, createFulltextCatalog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_fulltext_stoplist 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateFulltextStoplist createFulltextStoplist)
        {
            AstSqlClause.AstSqlClause66 result = new AstSqlClause.AstSqlClause66(ctx, createFulltextStoplist);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateIndex createIndex)
        {
            AstSqlClause.AstSqlClause67 result = new AstSqlClause.AstSqlClause67(ctx, createIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_columnstore_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateColumnstoreIndex createColumnstoreIndex)
        {
            AstSqlClause.AstSqlClause68 result = new AstSqlClause.AstSqlClause68(ctx, createColumnstoreIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_nonclustered_columnstore_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateNonclusteredColumnstoreIndex createNonclusteredColumnstoreIndex)
        {
            AstSqlClause.AstSqlClause69 result = new AstSqlClause.AstSqlClause69(ctx, createNonclusteredColumnstoreIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_login_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateLoginAzureSql createLoginAzureSql)
        {
            AstSqlClause.AstSqlClause70 result = new AstSqlClause.AstSqlClause70(ctx, createLoginAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_login_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateLoginPdw createLoginPdw)
        {
            AstSqlClause.AstSqlClause71 result = new AstSqlClause.AstSqlClause71(ctx, createLoginPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_login_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateLoginSqlServer createLoginSqlServer)
        {
            AstSqlClause.AstSqlClause72 result = new AstSqlClause.AstSqlClause72(ctx, createLoginSqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_master_key_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateMasterKeyAzureSql createMasterKeyAzureSql)
        {
            AstSqlClause.AstSqlClause73 result = new AstSqlClause.AstSqlClause73(ctx, createMasterKeyAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_master_key_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateMasterKeySqlServer createMasterKeySqlServer)
        {
            AstSqlClause.AstSqlClause74 result = new AstSqlClause.AstSqlClause74(ctx, createMasterKeySqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_or_alter_broker_priority 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateOrAlterBrokerPriority createOrAlterBrokerPriority)
        {
            AstSqlClause.AstSqlClause75 result = new AstSqlClause.AstSqlClause75(ctx, createOrAlterBrokerPriority);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_remote_service_binding 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateRemoteServiceBinding createRemoteServiceBinding)
        {
            AstSqlClause.AstSqlClause76 result = new AstSqlClause.AstSqlClause76(ctx, createRemoteServiceBinding);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateResourcePool createResourcePool)
        {
            AstSqlClause.AstSqlClause77 result = new AstSqlClause.AstSqlClause77(ctx, createResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_route 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateRoute createRoute)
        {
            AstSqlClause.AstSqlClause78 result = new AstSqlClause.AstSqlClause78(ctx, createRoute);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_rule 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateRule createRule)
        {
            AstSqlClause.AstSqlClause79 result = new AstSqlClause.AstSqlClause79(ctx, createRule);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_schema 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSchema createSchema)
        {
            AstSqlClause.AstSqlClause80 result = new AstSqlClause.AstSqlClause80(ctx, createSchema);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSchemaAzureSqlDwAndPdw createSchemaAzureSqlDwAndPdw)
        {
            AstSqlClause.AstSqlClause81 result = new AstSqlClause.AstSqlClause81(ctx, createSchemaAzureSqlDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_search_property_list 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSearchPropertyList createSearchPropertyList)
        {
            AstSqlClause.AstSqlClause82 result = new AstSqlClause.AstSqlClause82(ctx, createSearchPropertyList);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_security_policy 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSecurityPolicy createSecurityPolicy)
        {
            AstSqlClause.AstSqlClause83 result = new AstSqlClause.AstSqlClause83(ctx, createSecurityPolicy);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_sequence 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSequence createSequence)
        {
            AstSqlClause.AstSqlClause84 result = new AstSqlClause.AstSqlClause84(ctx, createSequence);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_server_audit 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateServerAudit createServerAudit)
        {
            AstSqlClause.AstSqlClause85 result = new AstSqlClause.AstSqlClause85(ctx, createServerAudit);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_server_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateServerAuditSpecification createServerAuditSpecification)
        {
            AstSqlClause.AstSqlClause86 result = new AstSqlClause.AstSqlClause86(ctx, createServerAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_server_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateServerRole createServerRole)
        {
            AstSqlClause.AstSqlClause87 result = new AstSqlClause.AstSqlClause87(ctx, createServerRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_service 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateService createService)
        {
            AstSqlClause.AstSqlClause88 result = new AstSqlClause.AstSqlClause88(ctx, createService);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_statistics 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateStatistics createStatistics)
        {
            AstSqlClause.AstSqlClause89 result = new AstSqlClause.AstSqlClause89(ctx, createStatistics);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_synonym 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSynonym createSynonym)
        {
            AstSqlClause.AstSqlClause90 result = new AstSqlClause.AstSqlClause90(ctx, createSynonym);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateTable createTable)
        {
            AstSqlClause.AstSqlClause91 result = new AstSqlClause.AstSqlClause91(ctx, createTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateType createType)
        {
            AstSqlClause.AstSqlClause92 result = new AstSqlClause.AstSqlClause92(ctx, createType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_user 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateUser createUser)
        {
            AstSqlClause.AstSqlClause93 result = new AstSqlClause.AstSqlClause93(ctx, createUser);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_user_azure_sql_dw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateUserAzureSqlDw createUserAzureSqlDw)
        {
            AstSqlClause.AstSqlClause94 result = new AstSqlClause.AstSqlClause94(ctx, createUserAzureSqlDw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_workload_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateWorkloadGroup createWorkloadGroup)
        {
            AstSqlClause.AstSqlClause95 result = new AstSqlClause.AstSqlClause95(ctx, createWorkloadGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_xml_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateXmlIndex createXmlIndex)
        {
            AstSqlClause.AstSqlClause96 result = new AstSqlClause.AstSqlClause96(ctx, createXmlIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_xml_schema_collection 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateXmlSchemaCollection createXmlSchemaCollection)
        {
            AstSqlClause.AstSqlClause97 result = new AstSqlClause.AstSqlClause97(ctx, createXmlSchemaCollection);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_partition_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreatePartitionFunction createPartitionFunction)
        {
            AstSqlClause.AstSqlClause98 result = new AstSqlClause.AstSqlClause98(ctx, createPartitionFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_partition_scheme 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreatePartitionScheme createPartitionScheme)
        {
            AstSqlClause.AstSqlClause99 result = new AstSqlClause.AstSqlClause99(ctx, createPartitionScheme);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_aggregate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAggregate dropAggregate)
        {
            AstSqlClause.AstSqlClause100 result = new AstSqlClause.AstSqlClause100(ctx, dropAggregate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_application_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropApplicationRole dropApplicationRole)
        {
            AstSqlClause.AstSqlClause101 result = new AstSqlClause.AstSqlClause101(ctx, dropApplicationRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_assembly 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAssembly dropAssembly)
        {
            AstSqlClause.AstSqlClause102 result = new AstSqlClause.AstSqlClause102(ctx, dropAssembly);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_asymmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAsymmetricKey dropAsymmetricKey)
        {
            AstSqlClause.AstSqlClause103 result = new AstSqlClause.AstSqlClause103(ctx, dropAsymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_availability_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAvailabilityGroup dropAvailabilityGroup)
        {
            AstSqlClause.AstSqlClause104 result = new AstSqlClause.AstSqlClause104(ctx, dropAvailabilityGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_broker_priority 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropBrokerPriority dropBrokerPriority)
        {
            AstSqlClause.AstSqlClause105 result = new AstSqlClause.AstSqlClause105(ctx, dropBrokerPriority);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_certificate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropCertificate dropCertificate)
        {
            AstSqlClause.AstSqlClause106 result = new AstSqlClause.AstSqlClause106(ctx, dropCertificate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_column_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropColumnEncryptionKey dropColumnEncryptionKey)
        {
            AstSqlClause.AstSqlClause107 result = new AstSqlClause.AstSqlClause107(ctx, dropColumnEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_column_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropColumnMasterKey dropColumnMasterKey)
        {
            AstSqlClause.AstSqlClause108 result = new AstSqlClause.AstSqlClause108(ctx, dropColumnMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_contract 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropContract dropContract)
        {
            AstSqlClause.AstSqlClause109 result = new AstSqlClause.AstSqlClause109(ctx, dropContract);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropCredential dropCredential)
        {
            AstSqlClause.AstSqlClause110 result = new AstSqlClause.AstSqlClause110(ctx, dropCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_cryptograhic_provider 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropCryptograhicProvider dropCryptograhicProvider)
        {
            AstSqlClause.AstSqlClause111 result = new AstSqlClause.AstSqlClause111(ctx, dropCryptograhicProvider);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabase dropDatabase)
        {
            AstSqlClause.AstSqlClause112 result = new AstSqlClause.AstSqlClause112(ctx, dropDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabaseAuditSpecification dropDatabaseAuditSpecification)
        {
            AstSqlClause.AstSqlClause113 result = new AstSqlClause.AstSqlClause113(ctx, dropDatabaseAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabaseEncryptionKey dropDatabaseEncryptionKey)
        {
            AstSqlClause.AstSqlClause114 result = new AstSqlClause.AstSqlClause114(ctx, dropDatabaseEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database_scoped_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabaseScopedCredential dropDatabaseScopedCredential)
        {
            AstSqlClause.AstSqlClause115 result = new AstSqlClause.AstSqlClause115(ctx, dropDatabaseScopedCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_db_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDbRole dropDbRole)
        {
            AstSqlClause.AstSqlClause116 result = new AstSqlClause.AstSqlClause116(ctx, dropDbRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_default 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDefault dropDefault)
        {
            AstSqlClause.AstSqlClause117 result = new AstSqlClause.AstSqlClause117(ctx, dropDefault);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_endpoint 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropEndpoint dropEndpoint)
        {
            AstSqlClause.AstSqlClause118 result = new AstSqlClause.AstSqlClause118(ctx, dropEndpoint);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_event_notifications 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropEventNotifications dropEventNotifications)
        {
            AstSqlClause.AstSqlClause119 result = new AstSqlClause.AstSqlClause119(ctx, dropEventNotifications);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_event_session 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropEventSession dropEventSession)
        {
            AstSqlClause.AstSqlClause120 result = new AstSqlClause.AstSqlClause120(ctx, dropEventSession);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_data_source 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalDataSource dropExternalDataSource)
        {
            AstSqlClause.AstSqlClause121 result = new AstSqlClause.AstSqlClause121(ctx, dropExternalDataSource);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_file_format 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalFileFormat dropExternalFileFormat)
        {
            AstSqlClause.AstSqlClause122 result = new AstSqlClause.AstSqlClause122(ctx, dropExternalFileFormat);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_library 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalLibrary dropExternalLibrary)
        {
            AstSqlClause.AstSqlClause123 result = new AstSqlClause.AstSqlClause123(ctx, dropExternalLibrary);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalResourcePool dropExternalResourcePool)
        {
            AstSqlClause.AstSqlClause124 result = new AstSqlClause.AstSqlClause124(ctx, dropExternalResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalTable dropExternalTable)
        {
            AstSqlClause.AstSqlClause125 result = new AstSqlClause.AstSqlClause125(ctx, dropExternalTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_fulltext_catalog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFulltextCatalog dropFulltextCatalog)
        {
            AstSqlClause.AstSqlClause126 result = new AstSqlClause.AstSqlClause126(ctx, dropFulltextCatalog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_fulltext_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFulltextIndex dropFulltextIndex)
        {
            AstSqlClause.AstSqlClause127 result = new AstSqlClause.AstSqlClause127(ctx, dropFulltextIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_fulltext_stoplist 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFulltextStoplist dropFulltextStoplist)
        {
            AstSqlClause.AstSqlClause128 result = new AstSqlClause.AstSqlClause128(ctx, dropFulltextStoplist);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFunction dropFunction)
        {
            AstSqlClause.AstSqlClause129 result = new AstSqlClause.AstSqlClause129(ctx, dropFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropIndex dropIndex)
        {
            AstSqlClause.AstSqlClause130 result = new AstSqlClause.AstSqlClause130(ctx, dropIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_login 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropLogin dropLogin)
        {
            AstSqlClause.AstSqlClause131 result = new AstSqlClause.AstSqlClause131(ctx, dropLogin);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropMasterKey dropMasterKey)
        {
            AstSqlClause.AstSqlClause132 result = new AstSqlClause.AstSqlClause132(ctx, dropMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_message_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropMessageType dropMessageType)
        {
            AstSqlClause.AstSqlClause133 result = new AstSqlClause.AstSqlClause133(ctx, dropMessageType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_partition_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropPartitionFunction dropPartitionFunction)
        {
            AstSqlClause.AstSqlClause134 result = new AstSqlClause.AstSqlClause134(ctx, dropPartitionFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_partition_scheme 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropPartitionScheme dropPartitionScheme)
        {
            AstSqlClause.AstSqlClause135 result = new AstSqlClause.AstSqlClause135(ctx, dropPartitionScheme);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_procedure 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropProcedure dropProcedure)
        {
            AstSqlClause.AstSqlClause136 result = new AstSqlClause.AstSqlClause136(ctx, dropProcedure);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_queue 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropQueue dropQueue)
        {
            AstSqlClause.AstSqlClause137 result = new AstSqlClause.AstSqlClause137(ctx, dropQueue);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_remote_service_binding 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropRemoteServiceBinding dropRemoteServiceBinding)
        {
            AstSqlClause.AstSqlClause138 result = new AstSqlClause.AstSqlClause138(ctx, dropRemoteServiceBinding);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropResourcePool dropResourcePool)
        {
            AstSqlClause.AstSqlClause139 result = new AstSqlClause.AstSqlClause139(ctx, dropResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_route 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropRoute dropRoute)
        {
            AstSqlClause.AstSqlClause140 result = new AstSqlClause.AstSqlClause140(ctx, dropRoute);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_rule 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropRule dropRule)
        {
            AstSqlClause.AstSqlClause141 result = new AstSqlClause.AstSqlClause141(ctx, dropRule);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_schema 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSchema dropSchema)
        {
            AstSqlClause.AstSqlClause142 result = new AstSqlClause.AstSqlClause142(ctx, dropSchema);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_search_property_list 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSearchPropertyList dropSearchPropertyList)
        {
            AstSqlClause.AstSqlClause143 result = new AstSqlClause.AstSqlClause143(ctx, dropSearchPropertyList);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_security_policy 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSecurityPolicy dropSecurityPolicy)
        {
            AstSqlClause.AstSqlClause144 result = new AstSqlClause.AstSqlClause144(ctx, dropSecurityPolicy);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_sequence 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSequence dropSequence)
        {
            AstSqlClause.AstSqlClause145 result = new AstSqlClause.AstSqlClause145(ctx, dropSequence);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_server_audit 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropServerAudit dropServerAudit)
        {
            AstSqlClause.AstSqlClause146 result = new AstSqlClause.AstSqlClause146(ctx, dropServerAudit);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_server_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropServerAuditSpecification dropServerAuditSpecification)
        {
            AstSqlClause.AstSqlClause147 result = new AstSqlClause.AstSqlClause147(ctx, dropServerAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_server_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropServerRole dropServerRole)
        {
            AstSqlClause.AstSqlClause148 result = new AstSqlClause.AstSqlClause148(ctx, dropServerRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_service 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropService dropService)
        {
            AstSqlClause.AstSqlClause149 result = new AstSqlClause.AstSqlClause149(ctx, dropService);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_signature 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSignature dropSignature)
        {
            AstSqlClause.AstSqlClause150 result = new AstSqlClause.AstSqlClause150(ctx, dropSignature);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_statistics 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropStatistics dropStatistics)
        {
            AstSqlClause.AstSqlClause151 result = new AstSqlClause.AstSqlClause151(ctx, dropStatistics);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_statistics_id_azure_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropStatisticsIdAzureDwAndPdw dropStatisticsIdAzureDwAndPdw)
        {
            AstSqlClause.AstSqlClause152 result = new AstSqlClause.AstSqlClause152(ctx, dropStatisticsIdAzureDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_symmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSymmetricKey dropSymmetricKey)
        {
            AstSqlClause.AstSqlClause153 result = new AstSqlClause.AstSqlClause153(ctx, dropSymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_synonym 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSynonym dropSynonym)
        {
            AstSqlClause.AstSqlClause154 result = new AstSqlClause.AstSqlClause154(ctx, dropSynonym);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropTable dropTable)
        {
            AstSqlClause.AstSqlClause155 result = new AstSqlClause.AstSqlClause155(ctx, dropTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_dml_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDmlTrigger dropDmlTrigger)
        {
            AstSqlClause.AstSqlClause156 result = new AstSqlClause.AstSqlClause156(ctx, dropDmlTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_ddl_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDdlTrigger dropDdlTrigger)
        {
            AstSqlClause.AstSqlClause157 result = new AstSqlClause.AstSqlClause157(ctx, dropDdlTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropType dropType)
        {
            AstSqlClause.AstSqlClause158 result = new AstSqlClause.AstSqlClause158(ctx, dropType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_user 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropUser dropUser)
        {
            AstSqlClause.AstSqlClause159 result = new AstSqlClause.AstSqlClause159(ctx, dropUser);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_view 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropView dropView)
        {
            AstSqlClause.AstSqlClause160 result = new AstSqlClause.AstSqlClause160(ctx, dropView);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_workload_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropWorkloadGroup dropWorkloadGroup)
        {
            AstSqlClause.AstSqlClause161 result = new AstSqlClause.AstSqlClause161(ctx, dropWorkloadGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_xml_schema_collection 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropXmlSchemaCollection dropXmlSchemaCollection)
        {
            AstSqlClause.AstSqlClause162 result = new AstSqlClause.AstSqlClause162(ctx, dropXmlSchemaCollection);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    disable_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDisableTrigger disableTrigger)
        {
            AstSqlClause.AstSqlClause163 result = new AstSqlClause.AstSqlClause163(ctx, disableTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    enable_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstEnableTrigger enableTrigger)
        {
            AstSqlClause.AstSqlClause164 result = new AstSqlClause.AstSqlClause164(ctx, enableTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    lock_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstLockTable lockTable)
        {
            AstSqlClause.AstSqlClause165 result = new AstSqlClause.AstSqlClause165(ctx, lockTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    truncate_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstTruncateTable truncateTable)
        {
            AstSqlClause.AstSqlClause166 result = new AstSqlClause.AstSqlClause166(ctx, truncateTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    update_statistics 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstUpdateStatistics updateStatistics)
        {
            AstSqlClause.AstSqlClause167 result = new AstSqlClause.AstSqlClause167(ctx, updateStatistics);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    block_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBlockStatement blockStatement)
        {
            AstSqlClause.AstSqlClause168 result = new AstSqlClause.AstSqlClause168(ctx, blockStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    break_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBreakStatement breakStatement)
        {
            AstSqlClause.AstSqlClause169 result = new AstSqlClause.AstSqlClause169(ctx, breakStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    continue_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstContinueStatement continueStatement)
        {
            AstSqlClause.AstSqlClause170 result = new AstSqlClause.AstSqlClause170(ctx, continueStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    goto_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstGotoStatement gotoStatement)
        {
            AstSqlClause.AstSqlClause171 result = new AstSqlClause.AstSqlClause171(ctx, gotoStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    if_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstIfStatement ifStatement)
        {
            AstSqlClause.AstSqlClause172 result = new AstSqlClause.AstSqlClause172(ctx, ifStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    return_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstReturnStatement returnStatement)
        {
            AstSqlClause.AstSqlClause173 result = new AstSqlClause.AstSqlClause173(ctx, returnStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    throw_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstThrowStatement throwStatement)
        {
            AstSqlClause.AstSqlClause174 result = new AstSqlClause.AstSqlClause174(ctx, throwStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    try_catch_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstTryCatchStatement tryCatchStatement)
        {
            AstSqlClause.AstSqlClause175 result = new AstSqlClause.AstSqlClause175(ctx, tryCatchStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    waitfor_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstWaitforStatement waitforStatement)
        {
            AstSqlClause.AstSqlClause176 result = new AstSqlClause.AstSqlClause176(ctx, waitforStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    while_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstWhileStatement whileStatement)
        {
            AstSqlClause.AstSqlClause177 result = new AstSqlClause.AstSqlClause177(ctx, whileStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    print_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstPrintStatement printStatement)
        {
            AstSqlClause.AstSqlClause178 result = new AstSqlClause.AstSqlClause178(ctx, printStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    raiseerror_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstRaiseerrorStatement raiseerrorStatement)
        {
            AstSqlClause.AstSqlClause179 result = new AstSqlClause.AstSqlClause179(ctx, raiseerrorStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    declare_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDeclareStatement declareStatement)
        {
            AstSqlClause.AstSqlClause180 result = new AstSqlClause.AstSqlClause180(ctx, declareStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    execute_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstExecuteStatement executeStatement)
        {
            AstSqlClause.AstSqlClause181 result = new AstSqlClause.AstSqlClause181(ctx, executeStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    cursor_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCursorStatement cursorStatement)
        {
            AstSqlClause.AstSqlClause182 result = new AstSqlClause.AstSqlClause182(ctx, cursorStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    begin_conversation_timer 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBeginConversationTimer beginConversationTimer)
        {
            AstSqlClause.AstSqlClause183 result = new AstSqlClause.AstSqlClause183(ctx, beginConversationTimer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    begin_conversation_dialog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBeginConversationDialog beginConversationDialog)
        {
            AstSqlClause.AstSqlClause184 result = new AstSqlClause.AstSqlClause184(ctx, beginConversationDialog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    end_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstEndConversation endConversation)
        {
            AstSqlClause.AstSqlClause185 result = new AstSqlClause.AstSqlClause185(ctx, endConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    get_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstGetConversation getConversation)
        {
            AstSqlClause.AstSqlClause186 result = new AstSqlClause.AstSqlClause186(ctx, getConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    send_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSendConversation sendConversation)
        {
            AstSqlClause.AstSqlClause187 result = new AstSqlClause.AstSqlClause187(ctx, sendConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    waitfor_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstWaitforConversation waitforConversation)
        {
            AstSqlClause.AstSqlClause188 result = new AstSqlClause.AstSqlClause188(ctx, waitforConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_contract 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateContract createContract)
        {
            AstSqlClause.AstSqlClause189 result = new AstSqlClause.AstSqlClause189(ctx, createContract);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_queue 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateQueue createQueue)
        {
            AstSqlClause.AstSqlClause190 result = new AstSqlClause.AstSqlClause190(ctx, createQueue);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_queue 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterQueue alterQueue)
        {
            AstSqlClause.AstSqlClause191 result = new AstSqlClause.AstSqlClause191(ctx, alterQueue);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    kill_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstKillStatement killStatement)
        {
            AstSqlClause.AstSqlClause192 result = new AstSqlClause.AstSqlClause192(ctx, killStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    message_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstMessageStatement messageStatement)
        {
            AstSqlClause.AstSqlClause193 result = new AstSqlClause.AstSqlClause193(ctx, messageStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    security_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSecurityStatement securityStatement)
        {
            AstSqlClause.AstSqlClause194 result = new AstSqlClause.AstSqlClause194(ctx, securityStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    set_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSetStatement setStatement)
        {
            AstSqlClause.AstSqlClause195 result = new AstSqlClause.AstSqlClause195(ctx, setStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    transaction_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstTransactionStatement transactionStatement)
        {
            AstSqlClause.AstSqlClause196 result = new AstSqlClause.AstSqlClause196(ctx, transactionStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    use_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstUseStatement useStatement)
        {
            AstSqlClause.AstSqlClause197 result = new AstSqlClause.AstSqlClause197(ctx, useStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    setuser_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSetuserStatement setuserStatement)
        {
            AstSqlClause.AstSqlClause198 result = new AstSqlClause.AstSqlClause198(ctx, setuserStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    reconfigure_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstReconfigureStatement reconfigureStatement)
        {
            AstSqlClause.AstSqlClause199 result = new AstSqlClause.AstSqlClause199(ctx, reconfigureStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    shutdown_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstShutdownStatement shutdownStatement)
        {
            AstSqlClause.AstSqlClause200 result = new AstSqlClause.AstSqlClause200(ctx, shutdownStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    checkpoint_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCheckpointStatement checkpointStatement)
        {
            AstSqlClause.AstSqlClause201 result = new AstSqlClause.AstSqlClause201(ctx, checkpointStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupDatabase backupDatabase)
        {
            AstSqlClause.AstSqlClause202 result = new AstSqlClause.AstSqlClause202(ctx, backupDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_log 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupLog backupLog)
        {
            AstSqlClause.AstSqlClause203 result = new AstSqlClause.AstSqlClause203(ctx, backupLog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_certificate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupCertificate backupCertificate)
        {
            AstSqlClause.AstSqlClause204 result = new AstSqlClause.AstSqlClause204(ctx, backupCertificate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupMasterKey backupMasterKey)
        {
            AstSqlClause.AstSqlClause205 result = new AstSqlClause.AstSqlClause205(ctx, backupMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_service_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupServiceMasterKey backupServiceMasterKey)
        {
            AstSqlClause.AstSqlClause206 result = new AstSqlClause.AstSqlClause206(ctx, backupServiceMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    dbcc_special 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDbccSpecial dbccSpecial)
        {
            AstSqlClause.AstSqlClause207 result = new AstSqlClause.AstSqlClause207(ctx, dbccSpecial);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    dbcc_clause 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDbccClause dbccClause)
        {
            AstSqlClause.AstSqlClause208 result = new AstSqlClause.AstSqlClause208(ctx, dbccClause);
            return result;
        }
    }
    
    /// <summary>
    /// goto_statement
    /// 	 : GOTO  code_location_id
    /// 	 | code_location_id  COLON
    /// </summary>
    public abstract partial class AstGotoStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCodeLocationId), false, false, "code_location_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCodeLocationId), false, false, "code_location_id"))));
        
        private static string _ruleValue = "GOTO  code_location_id\r\n | code_location_id  COLON\r\n";
        
        private static string _ruleName = "goto_statement";
        
        /// <summary>
        /// goto_statement : GOTO code_location_id 
        /// </summary>
        public partial class AstGotoStatement1 : AstGotoStatement
        {
            
            private static string _ruleName1 = "goto_statement";
            
            private AstCodeLocationId _codeLocationId;
            
            internal AstGotoStatement1(ParserRuleContext ctx, AstCodeLocationId codeLocationId) : 
                    base(ctx)
            {
                _codeLocationId = codeLocationId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCodeLocationId CodeLocationId
            {
                get
                {
                    return _codeLocationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGotoStatement(this);
            }
        }
        /// <summary>
        /// goto_statement : code_location_id COLON 
        /// </summary>
        public partial class AstGotoStatement2 : AstGotoStatement
        {
            
            private static string _ruleName1 = "goto_statement";
            
            private AstCodeLocationId _codeLocationId;
            
            internal AstGotoStatement2(ParserRuleContext ctx, AstCodeLocationId codeLocationId) : 
                    base(ctx)
            {
                _codeLocationId = codeLocationId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCodeLocationId CodeLocationId
            {
                get
                {
                    return _codeLocationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGotoStatement(this);
            }
        }
        

        
        internal AstGotoStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGotoStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstGotoStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstGotoStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstGotoStatement.AstGotoStatement1(ctx, list.Get<AstCodeLocationId>(0));
            }
            if ((index == 2))
            {
                return new AstGotoStatement.AstGotoStatement2(ctx, list.Get<AstCodeLocationId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// goto_statement : 
        ///    GOTO code_location_id 
        /// </summary>
        public static AstGotoStatement GotoStatement(ParserRuleContext ctx, AstCodeLocationId codeLocationId)
        {
            AstGotoStatement.AstGotoStatement1 result = new AstGotoStatement.AstGotoStatement1(ctx, codeLocationId);
            return result;
        }
    }
    
    /// <summary>
    /// throw_statement
    /// 	 : THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?
    /// </summary>
    public partial class AstThrowStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstThrowErrorNumber), false, false, "throw_error_number"), new Bb.Asts.AstRuleMatcherItem(typeof(AstThrowMessage), false, false, "throw_message"), new Bb.Asts.AstRuleMatcherItem(typeof(AstThrowState), false, false, "throw_state"))));
        
        private AstThrowErrorNumber _throwErrorNumber;
        
        private AstThrowMessage _throwMessage;
        
        private AstThrowState _throwState;
        
        private static string _ruleValue = "THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?\r\n";
        
        private static string _ruleName = "throw_statement";
        
        internal AstThrowStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstThrowStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstThrowStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstThrowStatement(ParserRuleContext ctx, AstThrowErrorNumber throwErrorNumber, AstThrowMessage throwMessage, AstThrowState throwState) : 
                base(ctx)
        {
            _throwErrorNumber = throwErrorNumber;
            _throwMessage = throwMessage;
            _throwState = throwState;
        }
        
        public virtual AstThrowErrorNumber ThrowErrorNumber
        {
            get
            {
                return _throwErrorNumber;
            }
        }
        
        public virtual AstThrowMessage ThrowMessage
        {
            get
            {
                return _throwMessage;
            }
        }
        
        public virtual AstThrowState ThrowState
        {
            get
            {
                return _throwState;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowStatement(this);
        }
        
        public static AstThrowStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstThrowStatement(ctx, list.Get<AstThrowErrorNumber>(0), list.Get<AstThrowMessage>(1), list.Get<AstThrowState>(2));
        }
        
        /// <summary>
        /// throw_statement : 
        ///    THROW throw_error_number , throw_message , throw_state 
        /// </summary>
        public static AstThrowStatement ThrowStatement(ParserRuleContext ctx, AstThrowErrorNumber throwErrorNumber, AstThrowMessage throwMessage, AstThrowState throwState)
        {
            AstThrowStatement result = new AstThrowStatement(ctx, throwErrorNumber, throwMessage, throwState);
            return result;
        }
    }
    
    /// <summary>
    /// try_catch_statement
    /// 	 : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH
    /// </summary>
    public partial class AstTryCatchStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSqlClauses), false, false, "sql_clauses"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSqlClauses), true, false, "sql_clauses"))));
        
        private AstSqlClauses _tryClauses;
        
        private AstSqlClauses? _catchClauses;
        
        private static string _ruleValue = "BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI" +
            "?  catch_clauses = sql_clauses  END  CATCH\r\n";
        
        private static string _ruleName = "try_catch_statement";
        
        internal AstTryCatchStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTryCatchStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTryCatchStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstTryCatchStatement(ParserRuleContext ctx, AstSqlClauses tryClauses, AstSqlClauses? catchClauses) : 
                base(ctx)
        {
            _tryClauses = tryClauses;
            _catchClauses = catchClauses;
        }
        
        public virtual AstSqlClauses TryClauses
        {
            get
            {
                return _tryClauses;
            }
        }
        
        public virtual AstSqlClauses? CatchClauses
        {
            get
            {
                return _catchClauses;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTryCatchStatement(this);
        }
        
        public static AstTryCatchStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstTryCatchStatement(ctx, list.Get<AstSqlClauses>(0), list.Get<AstSqlClauses?>(1));
        }
        
        /// <summary>
        /// try_catch_statement : 
        ///    BEGIN TRY SEMI? try_clauses=sql_clauses END TRY SEMI? BEGIN CATCH SEMI? catch_clauses=sql_clauses? END CATCH 
        /// </summary>
        public static AstTryCatchStatement TryCatchStatement(ParserRuleContext ctx, AstSqlClauses tryClauses, AstSqlClauses catchClauses)
        {
            AstTryCatchStatement result = new AstTryCatchStatement(ctx, tryClauses, catchClauses);
            return result;
        }
    }
    
    /// <summary>
    /// while_statement_content
    /// 	 : sql_clause
    /// 	 | BREAK
    /// 	 | CONTINUE
    /// </summary>
    public abstract partial class AstWhileStatementContent : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSqlClause), false, false, "sql_clause"))));
        
        private static string _ruleValue = "sql_clause\r\n | BREAK\r\n | CONTINUE\r\n";
        
        private static string _ruleName = "while_statement_content";
        
        /// <summary>
        /// while_statement_content : sql_clause 
        /// </summary>
        public partial class AstWhileStatementContent1 : AstWhileStatementContent
        {
            
            private static string _ruleName1 = "while_statement_content";
            
            private AstSqlClause _sqlClause;
            
            internal AstWhileStatementContent1(ParserRuleContext ctx, AstSqlClause sqlClause) : 
                    base(ctx)
            {
                _sqlClause = sqlClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSqlClause SqlClause
            {
                get
                {
                    return _sqlClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhileStatementContent(this);
            }
        }
        /// <summary>
        /// while_statement_content : BREAK 
        /// </summary>
        public partial class AstWhileStatementContent2 : AstWhileStatementContent
        {
            
            private static string _ruleName1 = "while_statement_content";
            
            internal AstWhileStatementContent2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhileStatementContent(this);
            }
        }
        /// <summary>
        /// while_statement_content : CONTINUE 
        /// </summary>
        public partial class AstWhileStatementContent3 : AstWhileStatementContent
        {
            
            private static string _ruleName1 = "while_statement_content";
            
            internal AstWhileStatementContent3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhileStatementContent(this);
            }
        }
        

        
        internal AstWhileStatementContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWhileStatementContent(Position p) : 
                base(p)
        {
        }
        
        internal AstWhileStatementContent(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWhileStatementContent Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWhileStatementContent.AstWhileStatementContent1(ctx, list.Get<AstSqlClause>(0));
            }
            if ((index == 2))
            {
                return new AstWhileStatementContent.AstWhileStatementContent2(ctx);
            }
            if ((index == 3))
            {
                return new AstWhileStatementContent.AstWhileStatementContent3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// while_statement_content : 
        ///    sql_clause 
        /// </summary>
        public static AstWhileStatementContent WhileStatementContent(ParserRuleContext ctx, AstSqlClause sqlClause)
        {
            AstWhileStatementContent.AstWhileStatementContent1 result = new AstWhileStatementContent.AstWhileStatementContent1(ctx, sqlClause);
            return result;
        }
        
        /// <summary>
        /// while_statement_content : 
        ///    BREAK 
        /// </summary>
        public static AstWhileStatementContent WhileStatementContent(ParserRuleContext ctx)
        {
            AstWhileStatementContent.AstWhileStatementContent2 result = new AstWhileStatementContent.AstWhileStatementContent2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// raiseerror_statement
    /// 	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?
    /// 	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
    /// </summary>
    public abstract partial class AstRaiseerrorStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalStringLocalId), false, false, "decimal_string_local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstConstantLocalId), false, false, "constant_local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstConstantLocalId), false, false, "constant_local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstConstantLocalIds), true, false, "constant_local_ids"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLogSeterrorNowait), false, false, "log_seterror_nowait")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringLocalIdDoubleQuoteId), false, false, "string_local_id_double_quote_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalStringLocals), true, false, "decimal_string_locals"))));
        
        private static string _ruleValue = @"RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?
 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
";
        
        private static string _ruleName = "raiseerror_statement";
        
        /// <summary>
        /// raiseerror_statement : RAISERROR LR_BRACKET msg=decimal_string_local_id COMMA severity=constant_local_id COMMA state=constant_local_id constant_local_ids? RR_BRACKET WITH log_seterror_nowait 
        /// </summary>
        public partial class AstRaiseerrorStatement1 : AstRaiseerrorStatement
        {
            
            private static string _ruleName1 = "raiseerror_statement";
            
            private AstDecimalStringLocalId _msg;
            
            private AstConstantLocalId _severity;
            
            private AstConstantLocalId _state;
            
            private AstConstantLocalIds? _constantLocalIds;
            
            private AstLogSeterrorNowait _logSeterrorNowait;
            
            internal AstRaiseerrorStatement1(ParserRuleContext ctx, AstDecimalStringLocalId msg, AstConstantLocalId severity, AstConstantLocalId state, AstConstantLocalIds? constantLocalIds, AstLogSeterrorNowait logSeterrorNowait) : 
                    base(ctx)
            {
                _msg = msg;
                _severity = severity;
                _state = state;
                _constantLocalIds = constantLocalIds;
                _logSeterrorNowait = logSeterrorNowait;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalStringLocalId Msg
            {
                get
                {
                    return _msg;
                }
            }
            
            public virtual AstConstantLocalId Severity
            {
                get
                {
                    return _severity;
                }
            }
            
            public virtual AstConstantLocalId State
            {
                get
                {
                    return _state;
                }
            }
            
            public virtual AstConstantLocalIds? ConstantLocalIds
            {
                get
                {
                    return _constantLocalIds;
                }
            }
            
            public virtual AstLogSeterrorNowait LogSeterrorNowait
            {
                get
                {
                    return _logSeterrorNowait;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRaiseerrorStatement(this);
            }
        }
        /// <summary>
        /// raiseerror_statement : RAISERROR decimal formatstring=string_local_id_double_quote_id decimal_string_locals? 
        /// </summary>
        public partial class AstRaiseerrorStatement2 : AstRaiseerrorStatement
        {
            
            private static string _ruleName1 = "raiseerror_statement";
            
            private AstDecimal _decimal;
            
            private AstStringLocalIdDoubleQuoteId _formatstring;
            
            private AstDecimalStringLocals? _decimalStringLocals;
            
            internal AstRaiseerrorStatement2(ParserRuleContext ctx, AstDecimal @decimal, AstStringLocalIdDoubleQuoteId formatstring, AstDecimalStringLocals? decimalStringLocals) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _formatstring = formatstring;
                _decimalStringLocals = decimalStringLocals;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstStringLocalIdDoubleQuoteId Formatstring
            {
                get
                {
                    return _formatstring;
                }
            }
            
            public virtual AstDecimalStringLocals? DecimalStringLocals
            {
                get
                {
                    return _decimalStringLocals;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRaiseerrorStatement(this);
            }
        }
        

        
        internal AstRaiseerrorStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRaiseerrorStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstRaiseerrorStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRaiseerrorStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRaiseerrorStatement.AstRaiseerrorStatement1(ctx, list.Get<AstDecimalStringLocalId>(0), list.Get<AstConstantLocalId>(1), list.Get<AstConstantLocalId>(2), list.Get<AstConstantLocalIds?>(3), list.Get<AstLogSeterrorNowait>(4));
            }
            if ((index == 2))
            {
                return new AstRaiseerrorStatement.AstRaiseerrorStatement2(ctx, list.Get<AstDecimal>(0), list.Get<AstStringLocalIdDoubleQuoteId>(1), list.Get<AstDecimalStringLocals?>(2));
            }
            return null;
        }
        
        /// <summary>
        /// raiseerror_statement : 
        ///    RAISERROR ( msg=decimal_string_local_id , severity=constant_local_id , state=constant_local_id constant_local_ids? ) WITH log_seterror_nowait 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(ParserRuleContext ctx, AstDecimalStringLocalId msg, AstConstantLocalId severity, AstConstantLocalId state, AstConstantLocalIds constantLocalIds, AstLogSeterrorNowait logSeterrorNowait)
        {
            AstRaiseerrorStatement.AstRaiseerrorStatement1 result = new AstRaiseerrorStatement.AstRaiseerrorStatement1(ctx, msg, severity, state, constantLocalIds, logSeterrorNowait);
            return result;
        }
        
        /// <summary>
        /// raiseerror_statement : 
        ///    RAISERROR decimal formatstring=string_local_id_double_quote_id decimal_string_locals? 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(ParserRuleContext ctx, AstDecimal @decimal, AstStringLocalIdDoubleQuoteId formatstring, AstDecimalStringLocals decimalStringLocals)
        {
            AstRaiseerrorStatement.AstRaiseerrorStatement2 result = new AstRaiseerrorStatement.AstRaiseerrorStatement2(ctx, @decimal, formatstring, decimalStringLocals);
            return result;
        }
    }
    
    /// <summary>
    /// alter_assembly_start
    /// 	 : ALTER  ASSEMBLY
    /// </summary>
    public partial class AstAlterAssemblyStart : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "ALTER  ASSEMBLY\r\n";
        
        private static string _ruleName = "alter_assembly_start";
        
        internal AstAlterAssemblyStart(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyStart(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyStart(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyStart(this);
        }
        
        public static AstAlterAssemblyStart Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstAlterAssemblyStart(ctx);
        }
        
        /// <summary>
        /// alter_assembly_start : 
        ///    ALTER ASSEMBLY 
        /// </summary>
        public static AstAlterAssemblyStart AlterAssemblyStart(ParserRuleContext ctx)
        {
            AstAlterAssemblyStart result = new AstAlterAssemblyStart(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_multiple_files
    /// 	 : ALL
    /// 	 | multiple_local_files
    /// </summary>
    public abstract partial class AstAlterAssemblyDropMultipleFiles : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstMultipleLocalFiles), false, false, "multiple_local_files"))));
        
        private static string _ruleValue = "ALL\r\n | multiple_local_files\r\n";
        
        private static string _ruleName = "alter_assembly_drop_multiple_files";
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : ALL 
        /// </summary>
        public partial class AstAlterAssemblyDropMultipleFiles1 : AstAlterAssemblyDropMultipleFiles
        {
            
            private static string _ruleName1 = "alter_assembly_drop_multiple_files";
            
            internal AstAlterAssemblyDropMultipleFiles1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAssemblyDropMultipleFiles(this);
            }
        }
        /// <summary>
        /// alter_assembly_drop_multiple_files : multiple_local_files 
        /// </summary>
        public partial class AstAlterAssemblyDropMultipleFiles2 : AstAlterAssemblyDropMultipleFiles
        {
            
            private static string _ruleName1 = "alter_assembly_drop_multiple_files";
            
            private AstMultipleLocalFiles _multipleLocalFiles;
            
            internal AstAlterAssemblyDropMultipleFiles2(ParserRuleContext ctx, AstMultipleLocalFiles multipleLocalFiles) : 
                    base(ctx)
            {
                _multipleLocalFiles = multipleLocalFiles;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMultipleLocalFiles MultipleLocalFiles
            {
                get
                {
                    return _multipleLocalFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAssemblyDropMultipleFiles(this);
            }
        }
        

        
        internal AstAlterAssemblyDropMultipleFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterAssemblyDropMultipleFiles Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles1(ctx);
            }
            if ((index == 2))
            {
                return new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2(ctx, list.Get<AstMultipleLocalFiles>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : 
        ///    ALL 
        /// </summary>
        public static AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles(ParserRuleContext ctx)
        {
            AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles1 result = new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles1(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : 
        ///    multiple_local_files 
        /// </summary>
        public static AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles(ParserRuleContext ctx, AstMultipleLocalFiles multipleLocalFiles)
        {
            AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2 result = new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2(ctx, multipleLocalFiles);
            return result;
        }
    }
    
    /// <summary>
    /// client_assembly_specifier
    /// 	 : network_file_share
    /// 	 | local_file
    /// 	 | stringtext
    /// </summary>
    public abstract partial class AstClientAssemblySpecifier : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstNetworkFileShare), false, false, "network_file_share")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalFile), false, false, "local_file")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "network_file_share\r\n | local_file\r\n | stringtext\r\n";
        
        private static string _ruleName = "client_assembly_specifier";
        
        /// <summary>
        /// client_assembly_specifier : network_file_share 
        /// </summary>
        public partial class AstClientAssemblySpecifier1 : AstClientAssemblySpecifier
        {
            
            private static string _ruleName1 = "client_assembly_specifier";
            
            private AstNetworkFileShare _networkFileShare;
            
            internal AstClientAssemblySpecifier1(ParserRuleContext ctx, AstNetworkFileShare networkFileShare) : 
                    base(ctx)
            {
                _networkFileShare = networkFileShare;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstNetworkFileShare NetworkFileShare
            {
                get
                {
                    return _networkFileShare;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        /// <summary>
        /// client_assembly_specifier : local_file 
        /// </summary>
        public partial class AstClientAssemblySpecifier2 : AstClientAssemblySpecifier
        {
            
            private static string _ruleName1 = "client_assembly_specifier";
            
            private AstLocalFile _localFile;
            
            internal AstClientAssemblySpecifier2(ParserRuleContext ctx, AstLocalFile localFile) : 
                    base(ctx)
            {
                _localFile = localFile;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalFile LocalFile
            {
                get
                {
                    return _localFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        /// <summary>
        /// client_assembly_specifier : stringtext 
        /// </summary>
        public partial class AstClientAssemblySpecifier3 : AstClientAssemblySpecifier
        {
            
            private static string _ruleName1 = "client_assembly_specifier";
            
            private AstStringtext _stringtext;
            
            internal AstClientAssemblySpecifier3(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        

        
        internal AstClientAssemblySpecifier(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClientAssemblySpecifier(Position p) : 
                base(p)
        {
        }
        
        internal AstClientAssemblySpecifier(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstClientAssemblySpecifier Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstClientAssemblySpecifier.AstClientAssemblySpecifier1(ctx, list.Get<AstNetworkFileShare>(0));
            }
            if ((index == 2))
            {
                return new AstClientAssemblySpecifier.AstClientAssemblySpecifier2(ctx, list.Get<AstLocalFile>(0));
            }
            if ((index == 3))
            {
                return new AstClientAssemblySpecifier.AstClientAssemblySpecifier3(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    network_file_share 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(ParserRuleContext ctx, AstNetworkFileShare networkFileShare)
        {
            AstClientAssemblySpecifier.AstClientAssemblySpecifier1 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier1(ctx, networkFileShare);
            return result;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    local_file 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(ParserRuleContext ctx, AstLocalFile localFile)
        {
            AstClientAssemblySpecifier.AstClientAssemblySpecifier2 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier2(ctx, localFile);
            return result;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    stringtext 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstClientAssemblySpecifier.AstClientAssemblySpecifier3 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier3(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// assembly_option
    /// 	 : PERMISSION_SET  EQUAL  assembly_permission
    /// 	 | VISIBILITY  EQUAL  on_off
    /// 	 | UNCHECKED  DATA
    /// 	 | assembly_option  COMMA
    /// </summary>
    public abstract partial class AstAssemblyOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAssemblyPermission), false, false, "assembly_permission")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstAssemblyOption), false, false, "assembly_option"))));
        
        private static string _ruleValue = "PERMISSION_SET  EQUAL  assembly_permission\r\n | VISIBILITY  EQUAL  on_off\r\n | UNCH" +
            "ECKED  DATA\r\n | assembly_option  COMMA\r\n";
        
        private static string _ruleName = "assembly_option";
        
        /// <summary>
        /// assembly_option : PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public partial class AstAssemblyOption1 : AstAssemblyOption
        {
            
            private static string _ruleName1 = "assembly_option";
            
            private AstAssemblyPermission _assemblyPermission;
            
            internal AstAssemblyOption1(ParserRuleContext ctx, AstAssemblyPermission assemblyPermission) : 
                    base(ctx)
            {
                _assemblyPermission = assemblyPermission;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAssemblyPermission AssemblyPermission
            {
                get
                {
                    return _assemblyPermission;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : VISIBILITY EQUAL on_off 
        /// </summary>
        public partial class AstAssemblyOption2 : AstAssemblyOption
        {
            
            private static string _ruleName1 = "assembly_option";
            
            private AstOnOff _onOff;
            
            internal AstAssemblyOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : UNCHECKED DATA 
        /// </summary>
        public partial class AstAssemblyOption3 : AstAssemblyOption
        {
            
            private static string _ruleName1 = "assembly_option";
            
            internal AstAssemblyOption3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : assembly_option COMMA 
        /// </summary>
        public partial class AstAssemblyOption4 : AstAssemblyOption
        {
            
            private static string _ruleName1 = "assembly_option";
            
            private AstAssemblyOption _assemblyOption;
            
            internal AstAssemblyOption4(ParserRuleContext ctx, AstAssemblyOption assemblyOption) : 
                    base(ctx)
            {
                _assemblyOption = assemblyOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAssemblyOption AssemblyOption
            {
                get
                {
                    return _assemblyOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        

        
        internal AstAssemblyOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAssemblyOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAssemblyOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAssemblyOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAssemblyOption.AstAssemblyOption1(ctx, list.Get<AstAssemblyPermission>(0));
            }
            if ((index == 2))
            {
                return new AstAssemblyOption.AstAssemblyOption2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstAssemblyOption.AstAssemblyOption3(ctx);
            }
            if ((index == 4))
            {
                return new AstAssemblyOption.AstAssemblyOption4(ctx, list.Get<AstAssemblyOption>(0));
            }
            return null;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx, AstAssemblyPermission assemblyPermission)
        {
            AstAssemblyOption.AstAssemblyOption1 result = new AstAssemblyOption.AstAssemblyOption1(ctx, assemblyPermission);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    VISIBILITY EQUAL on_off 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAssemblyOption.AstAssemblyOption2 result = new AstAssemblyOption.AstAssemblyOption2(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    UNCHECKED DATA 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx)
        {
            AstAssemblyOption.AstAssemblyOption3 result = new AstAssemblyOption.AstAssemblyOption3(ctx);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    assembly_option , 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx, AstAssemblyOption assemblyOption)
        {
            AstAssemblyOption.AstAssemblyOption4 result = new AstAssemblyOption.AstAssemblyOption4(ctx, assemblyOption);
            return result;
        }
    }
    
    /// <summary>
    /// file_path
    /// 	 : file_directory_path_separator  file_path
    /// 	 | id_
    /// </summary>
    public abstract partial class AstFilePath : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileDirectoryPathSeparator), false, false, "file_directory_path_separator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFilePath), false, false, "file_path")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "file_directory_path_separator  file_path\r\n | id_\r\n";
        
        private static string _ruleName = "file_path";
        
        /// <summary>
        /// file_path : file_directory_path_separator file_path 
        /// </summary>
        public partial class AstFilePath1 : AstFilePath
        {
            
            private static string _ruleName1 = "file_path";
            
            private AstFileDirectoryPathSeparator _fileDirectoryPathSeparator;
            
            private AstFilePath _filePath;
            
            internal AstFilePath1(ParserRuleContext ctx, AstFileDirectoryPathSeparator fileDirectoryPathSeparator, AstFilePath filePath) : 
                    base(ctx)
            {
                _fileDirectoryPathSeparator = fileDirectoryPathSeparator;
                _filePath = filePath;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileDirectoryPathSeparator FileDirectoryPathSeparator
            {
                get
                {
                    return _fileDirectoryPathSeparator;
                }
            }
            
            public virtual AstFilePath FilePath
            {
                get
                {
                    return _filePath;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFilePath(this);
            }
        }
        /// <summary>
        /// file_path : id_ 
        /// </summary>
        public partial class AstFilePath2 : AstFilePath
        {
            
            private static string _ruleName1 = "file_path";
            
            private AstId _id;
            
            internal AstFilePath2(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFilePath(this);
            }
        }
        

        
        internal AstFilePath(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFilePath(Position p) : 
                base(p)
        {
        }
        
        internal AstFilePath(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstFilePath Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstFilePath.AstFilePath1(ctx, list.Get<AstFileDirectoryPathSeparator>(0), list.Get<AstFilePath>(1));
            }
            if ((index == 2))
            {
                return new AstFilePath.AstFilePath2(ctx, list.Get<AstId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// file_path : 
        ///    file_directory_path_separator file_path 
        /// </summary>
        public static AstFilePath FilePath(ParserRuleContext ctx, AstFileDirectoryPathSeparator fileDirectoryPathSeparator, AstFilePath filePath)
        {
            AstFilePath.AstFilePath1 result = new AstFilePath.AstFilePath1(ctx, fileDirectoryPathSeparator, filePath);
            return result;
        }
        
        /// <summary>
        /// file_path : 
        ///    id_ 
        /// </summary>
        public static AstFilePath FilePath(ParserRuleContext ctx, AstId id)
        {
            AstFilePath.AstFilePath2 result = new AstFilePath.AstFilePath2(ctx, id);
            return result;
        }
    }
    
    /// <summary>
    /// multiple_local_files
    /// 	 : SINGLE_QUOTE  local_file  SINGLE_QUOTE  COMMA
    /// 	 | local_file
    /// </summary>
    public abstract partial class AstMultipleLocalFiles : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalFile), false, false, "local_file")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalFile), false, false, "local_file"))));
        
        private static string _ruleValue = "SINGLE_QUOTE  local_file  SINGLE_QUOTE  COMMA\r\n | local_file\r\n";
        
        private static string _ruleName = "multiple_local_files";
        
        /// <summary>
        /// multiple_local_files : SINGLE_QUOTE local_file SINGLE_QUOTE COMMA 
        /// </summary>
        public partial class AstMultipleLocalFiles1 : AstMultipleLocalFiles
        {
            
            private static string _ruleName1 = "multiple_local_files";
            
            private AstLocalFile _localFile;
            
            internal AstMultipleLocalFiles1(ParserRuleContext ctx, AstLocalFile localFile) : 
                    base(ctx)
            {
                _localFile = localFile;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalFile LocalFile
            {
                get
                {
                    return _localFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMultipleLocalFiles(this);
            }
        }
        /// <summary>
        /// multiple_local_files : local_file 
        /// </summary>
        public partial class AstMultipleLocalFiles2 : AstMultipleLocalFiles
        {
            
            private static string _ruleName1 = "multiple_local_files";
            
            private AstLocalFile _localFile;
            
            internal AstMultipleLocalFiles2(ParserRuleContext ctx, AstLocalFile localFile) : 
                    base(ctx)
            {
                _localFile = localFile;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalFile LocalFile
            {
                get
                {
                    return _localFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMultipleLocalFiles(this);
            }
        }
        

        
        internal AstMultipleLocalFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMultipleLocalFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstMultipleLocalFiles(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstMultipleLocalFiles Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstMultipleLocalFiles.AstMultipleLocalFiles1(ctx, list.Get<AstLocalFile>(0));
            }
            if ((index == 2))
            {
                return new AstMultipleLocalFiles.AstMultipleLocalFiles2(ctx, list.Get<AstLocalFile>(0));
            }
            return null;
        }
        
        /// <summary>
        /// multiple_local_files : 
        ///    \ local_file \ , 
        /// </summary>
        public static AstMultipleLocalFiles MultipleLocalFiles(ParserRuleContext ctx, AstLocalFile localFile)
        {
            AstMultipleLocalFiles.AstMultipleLocalFiles1 result = new AstMultipleLocalFiles.AstMultipleLocalFiles1(ctx, localFile);
            return result;
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : stringtext
    /// 	 | binary_
    /// </summary>
    public abstract partial class AstBinaryContent : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_"))));
        
        private static string _ruleValue = "stringtext\r\n | binary_\r\n";
        
        private static string _ruleName = "binary_content";
        
        /// <summary>
        /// binary_content : stringtext 
        /// </summary>
        public partial class AstBinaryContent1 : AstBinaryContent
        {
            
            private static string _ruleName1 = "binary_content";
            
            private AstStringtext _stringtext;
            
            internal AstBinaryContent1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBinaryContent(this);
            }
        }
        /// <summary>
        /// binary_content : binary_ 
        /// </summary>
        public partial class AstBinaryContent2 : AstBinaryContent
        {
            
            private static string _ruleName1 = "binary_content";
            
            private AstBinary _binary;
            
            internal AstBinaryContent2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBinaryContent(this);
            }
        }
        

        
        internal AstBinaryContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBinaryContent(Position p) : 
                base(p)
        {
        }
        
        internal AstBinaryContent(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBinaryContent Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBinaryContent.AstBinaryContent1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstBinaryContent.AstBinaryContent2(ctx, list.Get<AstBinary>(0));
            }
            return null;
        }
        
        /// <summary>
        /// binary_content : 
        ///    stringtext 
        /// </summary>
        public static AstBinaryContent BinaryContent(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstBinaryContent.AstBinaryContent1 result = new AstBinaryContent.AstBinaryContent1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// binary_content : 
        ///    binary_ 
        /// </summary>
        public static AstBinaryContent BinaryContent(ParserRuleContext ctx, AstBinary binary)
        {
            AstBinaryContent.AstBinaryContent2 result = new AstBinaryContent.AstBinaryContent2(ctx, binary);
            return result;
        }
    }
    
    /// <summary>
    /// by_password_crypt
    /// 	 : decryption_by_pwd
    /// 	 | encryption_by_pwd
    /// </summary>
    public abstract partial class AstByPasswordCrypt : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecryptionByPwd), false, false, "decryption_by_pwd")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionByPwd), false, false, "encryption_by_pwd"))));
        
        private static string _ruleValue = "decryption_by_pwd\r\n | encryption_by_pwd\r\n";
        
        private static string _ruleName = "by_password_crypt";
        
        /// <summary>
        /// by_password_crypt : decryption_by_pwd 
        /// </summary>
        public partial class AstByPasswordCrypt1 : AstByPasswordCrypt
        {
            
            private static string _ruleName1 = "by_password_crypt";
            
            private AstDecryptionByPwd _decryptionByPwd;
            
            internal AstByPasswordCrypt1(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd) : 
                    base(ctx)
            {
                _decryptionByPwd = decryptionByPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecryptionByPwd DecryptionByPwd
            {
                get
                {
                    return _decryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitByPasswordCrypt(this);
            }
        }
        /// <summary>
        /// by_password_crypt : encryption_by_pwd 
        /// </summary>
        public partial class AstByPasswordCrypt2 : AstByPasswordCrypt
        {
            
            private static string _ruleName1 = "by_password_crypt";
            
            private AstEncryptionByPwd _encryptionByPwd;
            
            internal AstByPasswordCrypt2(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd) : 
                    base(ctx)
            {
                _encryptionByPwd = encryptionByPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEncryptionByPwd EncryptionByPwd
            {
                get
                {
                    return _encryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitByPasswordCrypt(this);
            }
        }
        

        
        internal AstByPasswordCrypt(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstByPasswordCrypt(Position p) : 
                base(p)
        {
        }
        
        internal AstByPasswordCrypt(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstByPasswordCrypt Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstByPasswordCrypt.AstByPasswordCrypt1(ctx, list.Get<AstDecryptionByPwd>(0));
            }
            if ((index == 2))
            {
                return new AstByPasswordCrypt.AstByPasswordCrypt2(ctx, list.Get<AstEncryptionByPwd>(0));
            }
            return null;
        }
        
        /// <summary>
        /// by_password_crypt : 
        ///    decryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd)
        {
            AstByPasswordCrypt.AstByPasswordCrypt1 result = new AstByPasswordCrypt.AstByPasswordCrypt1(ctx, decryptionByPwd);
            return result;
        }
        
        /// <summary>
        /// by_password_crypt : 
        ///    encryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd)
        {
            AstByPasswordCrypt.AstByPasswordCrypt2 result = new AstByPasswordCrypt.AstByPasswordCrypt2(ctx, encryptionByPwd);
            return result;
        }
    }
    
    /// <summary>
    /// asymetric_key_with_info
    /// 	 : ALGORITHM  EQUAL  asymetric_algorithm
    /// 	 | PROVIDER_KEY_NAME  EQUAL  provider_key_name = stringtext
    /// 	 | CREATION_DISPOSITION  EQUAL  creation_disposition
    /// </summary>
    public abstract partial class AstAsymetricKeyWithInfo : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAsymetricAlgorithm), false, false, "asymetric_algorithm")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreationDisposition), false, false, "creation_disposition"))));
        
        private static string _ruleValue = "ALGORITHM  EQUAL  asymetric_algorithm\r\n | PROVIDER_KEY_NAME  EQUAL  provider_key_" +
            "name = stringtext\r\n | CREATION_DISPOSITION  EQUAL  creation_disposition\r\n";
        
        private static string _ruleName = "asymetric_key_with_info";
        
        /// <summary>
        /// asymetric_key_with_info : ALGORITHM EQUAL asymetric_algorithm 
        /// </summary>
        public partial class AstAsymetricKeyWithInfo1 : AstAsymetricKeyWithInfo
        {
            
            private static string _ruleName1 = "asymetric_key_with_info";
            
            private AstAsymetricAlgorithm _asymetricAlgorithm;
            
            internal AstAsymetricKeyWithInfo1(ParserRuleContext ctx, AstAsymetricAlgorithm asymetricAlgorithm) : 
                    base(ctx)
            {
                _asymetricAlgorithm = asymetricAlgorithm;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAsymetricAlgorithm AsymetricAlgorithm
            {
                get
                {
                    return _asymetricAlgorithm;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyWithInfo(this);
            }
        }
        /// <summary>
        /// asymetric_key_with_info : PROVIDER_KEY_NAME EQUAL provider_key_name=stringtext 
        /// </summary>
        public partial class AstAsymetricKeyWithInfo2 : AstAsymetricKeyWithInfo
        {
            
            private static string _ruleName1 = "asymetric_key_with_info";
            
            private AstStringtext _providerKeyName;
            
            internal AstAsymetricKeyWithInfo2(ParserRuleContext ctx, AstStringtext providerKeyName) : 
                    base(ctx)
            {
                _providerKeyName = providerKeyName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext ProviderKeyName
            {
                get
                {
                    return _providerKeyName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyWithInfo(this);
            }
        }
        /// <summary>
        /// asymetric_key_with_info : CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public partial class AstAsymetricKeyWithInfo3 : AstAsymetricKeyWithInfo
        {
            
            private static string _ruleName1 = "asymetric_key_with_info";
            
            private AstCreationDisposition _creationDisposition;
            
            internal AstAsymetricKeyWithInfo3(ParserRuleContext ctx, AstCreationDisposition creationDisposition) : 
                    base(ctx)
            {
                _creationDisposition = creationDisposition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreationDisposition CreationDisposition
            {
                get
                {
                    return _creationDisposition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyWithInfo(this);
            }
        }
        

        
        internal AstAsymetricKeyWithInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAsymetricKeyWithInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstAsymetricKeyWithInfo(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAsymetricKeyWithInfo Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo1(ctx, list.Get<AstAsymetricAlgorithm>(0));
            }
            if ((index == 2))
            {
                return new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo2(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 3))
            {
                return new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo3(ctx, list.Get<AstCreationDisposition>(0));
            }
            return null;
        }
        
        /// <summary>
        /// asymetric_key_with_info : 
        ///    ALGORITHM EQUAL asymetric_algorithm 
        /// </summary>
        public static AstAsymetricKeyWithInfo AsymetricKeyWithInfo(ParserRuleContext ctx, AstAsymetricAlgorithm asymetricAlgorithm)
        {
            AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo1 result = new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo1(ctx, asymetricAlgorithm);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_with_info : 
        ///    PROVIDER_KEY_NAME EQUAL provider_key_name=stringtext 
        /// </summary>
        public static AstAsymetricKeyWithInfo AsymetricKeyWithInfo(ParserRuleContext ctx, AstStringtext providerKeyName)
        {
            AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo2 result = new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo2(ctx, providerKeyName);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_with_info : 
        ///    CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public static AstAsymetricKeyWithInfo AsymetricKeyWithInfo(ParserRuleContext ctx, AstCreationDisposition creationDisposition)
        {
            AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo3 result = new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo3(ctx, creationDisposition);
            return result;
        }
    }
    
    /// <summary>
    /// asymetric_key_from
    /// 	 : FILE  EQUAL  stringtext
    /// 	 | EXECUTABLE_FILE  EQUAL  stringtext
    /// 	 | ASSEMBLY  assembly_id
    /// 	 | PROVIDER  provider_id
    /// </summary>
    public abstract partial class AstAsymetricKeyFrom : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAssemblyId), false, false, "assembly_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstProviderId), false, false, "provider_id"))));
        
        private static string _ruleValue = "FILE  EQUAL  stringtext\r\n | EXECUTABLE_FILE  EQUAL  stringtext\r\n | ASSEMBLY  asse" +
            "mbly_id\r\n | PROVIDER  provider_id\r\n";
        
        private static string _ruleName = "asymetric_key_from";
        
        /// <summary>
        /// asymetric_key_from : FILE EQUAL stringtext 
        /// </summary>
        public partial class AstAsymetricKeyFrom1 : AstAsymetricKeyFrom
        {
            
            private static string _ruleName1 = "asymetric_key_from";
            
            private AstStringtext _stringtext;
            
            internal AstAsymetricKeyFrom1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        /// <summary>
        /// asymetric_key_from : EXECUTABLE_FILE EQUAL stringtext 
        /// </summary>
        public partial class AstAsymetricKeyFrom2 : AstAsymetricKeyFrom
        {
            
            private static string _ruleName1 = "asymetric_key_from";
            
            private AstStringtext _stringtext;
            
            internal AstAsymetricKeyFrom2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        /// <summary>
        /// asymetric_key_from : ASSEMBLY assembly_id 
        /// </summary>
        public partial class AstAsymetricKeyFrom3 : AstAsymetricKeyFrom
        {
            
            private static string _ruleName1 = "asymetric_key_from";
            
            private AstAssemblyId _assemblyId;
            
            internal AstAsymetricKeyFrom3(ParserRuleContext ctx, AstAssemblyId assemblyId) : 
                    base(ctx)
            {
                _assemblyId = assemblyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAssemblyId AssemblyId
            {
                get
                {
                    return _assemblyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        /// <summary>
        /// asymetric_key_from : PROVIDER provider_id 
        /// </summary>
        public partial class AstAsymetricKeyFrom4 : AstAsymetricKeyFrom
        {
            
            private static string _ruleName1 = "asymetric_key_from";
            
            private AstProviderId _providerId;
            
            internal AstAsymetricKeyFrom4(ParserRuleContext ctx, AstProviderId providerId) : 
                    base(ctx)
            {
                _providerId = providerId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstProviderId ProviderId
            {
                get
                {
                    return _providerId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        

        
        internal AstAsymetricKeyFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAsymetricKeyFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstAsymetricKeyFrom(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAsymetricKeyFrom Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom2(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 3))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom3(ctx, list.Get<AstAssemblyId>(0));
            }
            if ((index == 4))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom4(ctx, list.Get<AstProviderId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// asymetric_key_from : 
        ///    FILE EQUAL stringtext 
        /// </summary>
        public static AstAsymetricKeyFrom AsymetricKeyFrom(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstAsymetricKeyFrom.AstAsymetricKeyFrom1 result = new AstAsymetricKeyFrom.AstAsymetricKeyFrom1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_from : 
        ///    ASSEMBLY assembly_id 
        /// </summary>
        public static AstAsymetricKeyFrom AsymetricKeyFrom(ParserRuleContext ctx, AstAssemblyId assemblyId)
        {
            AstAsymetricKeyFrom.AstAsymetricKeyFrom3 result = new AstAsymetricKeyFrom.AstAsymetricKeyFrom3(ctx, assemblyId);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_from : 
        ///    PROVIDER provider_id 
        /// </summary>
        public static AstAsymetricKeyFrom AsymetricKeyFrom(ParserRuleContext ctx, AstProviderId providerId)
        {
            AstAsymetricKeyFrom.AstAsymetricKeyFrom4 result = new AstAsymetricKeyFrom.AstAsymetricKeyFrom4(ctx, providerId);
            return result;
        }
    }
    
    /// <summary>
    /// drop_asymmetric_key
    /// 	 : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropAsymmetricKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private AstId _keyName;
        
        private static string _ruleValue = "DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?\r\n";
        
        private static string _ruleName = "drop_asymmetric_key";
        
        internal AstDropAsymmetricKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropAsymmetricKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropAsymmetricKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropAsymmetricKey(ParserRuleContext ctx, AstId keyName) : 
                base(ctx)
        {
            _keyName = keyName;
        }
        
        public virtual AstId KeyName
        {
            get
            {
                return _keyName;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAsymmetricKey(this);
        }
        
        public static AstDropAsymmetricKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropAsymmetricKey(ctx, list.Get<AstId>(0));
        }
        
        /// <summary>
        /// drop_asymmetric_key : 
        ///    DROP ASYMMETRIC KEY key_name=id_ REMOVE PROVIDER KEY 
        /// </summary>
        public static AstDropAsymmetricKey DropAsymmetricKey(ParserRuleContext ctx, AstId keyName)
        {
            AstDropAsymmetricKey result = new AstDropAsymmetricKey(ctx, keyName);
            return result;
        }
    }
    
    /// <summary>
    /// authorization_grantee
    /// 	 : principal_name = id_
    /// 	 | SCHEMA  OWNER
    /// </summary>
    public abstract partial class AstAuthorizationGrantee : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "principal_name = id_\r\n | SCHEMA  OWNER\r\n";
        
        private static string _ruleName = "authorization_grantee";
        
        /// <summary>
        /// authorization_grantee : principal_name=id_ 
        /// </summary>
        public partial class AstAuthorizationGrantee1 : AstAuthorizationGrantee
        {
            
            private static string _ruleName1 = "authorization_grantee";
            
            private AstId _principalName;
            
            internal AstAuthorizationGrantee1(ParserRuleContext ctx, AstId principalName) : 
                    base(ctx)
            {
                _principalName = principalName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId PrincipalName
            {
                get
                {
                    return _principalName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthorizationGrantee(this);
            }
        }
        /// <summary>
        /// authorization_grantee : SCHEMA OWNER 
        /// </summary>
        public partial class AstAuthorizationGrantee2 : AstAuthorizationGrantee
        {
            
            private static string _ruleName1 = "authorization_grantee";
            
            internal AstAuthorizationGrantee2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthorizationGrantee(this);
            }
        }
        

        
        internal AstAuthorizationGrantee(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAuthorizationGrantee(Position p) : 
                base(p)
        {
        }
        
        internal AstAuthorizationGrantee(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAuthorizationGrantee Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAuthorizationGrantee.AstAuthorizationGrantee1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstAuthorizationGrantee.AstAuthorizationGrantee2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// authorization_grantee : 
        ///    principal_name=id_ 
        /// </summary>
        public static AstAuthorizationGrantee AuthorizationGrantee(ParserRuleContext ctx, AstId principalName)
        {
            AstAuthorizationGrantee.AstAuthorizationGrantee1 result = new AstAuthorizationGrantee.AstAuthorizationGrantee1(ctx, principalName);
            return result;
        }
        
        /// <summary>
        /// authorization_grantee : 
        ///    SCHEMA OWNER 
        /// </summary>
        public static AstAuthorizationGrantee AuthorizationGrantee(ParserRuleContext ctx)
        {
            AstAuthorizationGrantee.AstAuthorizationGrantee2 result = new AstAuthorizationGrantee.AstAuthorizationGrantee2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// class_type_for_grant
    /// 	 : COLUMN  encryption_master  KEY
    /// 	 | NOTIFICATION  database_object_server
    /// 	 | object_type_for_grant
    /// </summary>
    public abstract partial class AstClassTypeForGrant : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionMaster), false, false, "encryption_master")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseObjectServer), false, false, "database_object_server")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstObjectTypeForGrant), false, false, "object_type_for_grant"))));
        
        private static string _ruleValue = "COLUMN  encryption_master  KEY\r\n | NOTIFICATION  database_object_server\r\n | objec" +
            "t_type_for_grant\r\n";
        
        private static string _ruleName = "class_type_for_grant";
        
        /// <summary>
        /// class_type_for_grant : COLUMN encryption_master KEY 
        /// </summary>
        public partial class AstClassTypeForGrant1 : AstClassTypeForGrant
        {
            
            private static string _ruleName1 = "class_type_for_grant";
            
            private AstEncryptionMaster _encryptionMaster;
            
            internal AstClassTypeForGrant1(ParserRuleContext ctx, AstEncryptionMaster encryptionMaster) : 
                    base(ctx)
            {
                _encryptionMaster = encryptionMaster;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEncryptionMaster EncryptionMaster
            {
                get
                {
                    return _encryptionMaster;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        /// <summary>
        /// class_type_for_grant : NOTIFICATION database_object_server 
        /// </summary>
        public partial class AstClassTypeForGrant2 : AstClassTypeForGrant
        {
            
            private static string _ruleName1 = "class_type_for_grant";
            
            private AstDatabaseObjectServer _databaseObjectServer;
            
            internal AstClassTypeForGrant2(ParserRuleContext ctx, AstDatabaseObjectServer databaseObjectServer) : 
                    base(ctx)
            {
                _databaseObjectServer = databaseObjectServer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatabaseObjectServer DatabaseObjectServer
            {
                get
                {
                    return _databaseObjectServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        /// <summary>
        /// class_type_for_grant : object_type_for_grant 
        /// </summary>
        public partial class AstClassTypeForGrant3 : AstClassTypeForGrant
        {
            
            private static string _ruleName1 = "class_type_for_grant";
            
            private AstObjectTypeForGrant _objectTypeForGrant;
            
            internal AstClassTypeForGrant3(ParserRuleContext ctx, AstObjectTypeForGrant objectTypeForGrant) : 
                    base(ctx)
            {
                _objectTypeForGrant = objectTypeForGrant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstObjectTypeForGrant ObjectTypeForGrant
            {
                get
                {
                    return _objectTypeForGrant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        

        
        internal AstClassTypeForGrant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClassTypeForGrant(Position p) : 
                base(p)
        {
        }
        
        internal AstClassTypeForGrant(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstClassTypeForGrant Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstClassTypeForGrant.AstClassTypeForGrant1(ctx, list.Get<AstEncryptionMaster>(0));
            }
            if ((index == 2))
            {
                return new AstClassTypeForGrant.AstClassTypeForGrant2(ctx, list.Get<AstDatabaseObjectServer>(0));
            }
            if ((index == 3))
            {
                return new AstClassTypeForGrant.AstClassTypeForGrant3(ctx, list.Get<AstObjectTypeForGrant>(0));
            }
            return null;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    COLUMN encryption_master KEY 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(ParserRuleContext ctx, AstEncryptionMaster encryptionMaster)
        {
            AstClassTypeForGrant.AstClassTypeForGrant1 result = new AstClassTypeForGrant.AstClassTypeForGrant1(ctx, encryptionMaster);
            return result;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    NOTIFICATION database_object_server 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(ParserRuleContext ctx, AstDatabaseObjectServer databaseObjectServer)
        {
            AstClassTypeForGrant.AstClassTypeForGrant2 result = new AstClassTypeForGrant.AstClassTypeForGrant2(ctx, databaseObjectServer);
            return result;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    object_type_for_grant 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(ParserRuleContext ctx, AstObjectTypeForGrant objectTypeForGrant)
        {
            AstClassTypeForGrant.AstClassTypeForGrant3 result = new AstClassTypeForGrant.AstClassTypeForGrant3(ctx, objectTypeForGrant);
            return result;
        }
    }
    
    /// <summary>
    /// alter_options_listener
    /// 	 : add_listener
    /// 	 | MODIFY  LISTENER  alter_listener
    /// 	 | restart_listener
    /// </summary>
    public abstract partial class AstAlterOptionsListener : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAddListener), false, false, "add_listener")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterListener), false, false, "alter_listener")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstRestartListener), false, false, "restart_listener"))));
        
        private static string _ruleValue = "add_listener\r\n | MODIFY  LISTENER  alter_listener\r\n | restart_listener\r\n";
        
        private static string _ruleName = "alter_options_listener";
        
        /// <summary>
        /// alter_options_listener : add_listener 
        /// </summary>
        public partial class AstAlterOptionsListener1 : AstAlterOptionsListener
        {
            
            private static string _ruleName1 = "alter_options_listener";
            
            private AstAddListener _addListener;
            
            internal AstAlterOptionsListener1(ParserRuleContext ctx, AstAddListener addListener) : 
                    base(ctx)
            {
                _addListener = addListener;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAddListener AddListener
            {
                get
                {
                    return _addListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterOptionsListener(this);
            }
        }
        /// <summary>
        /// alter_options_listener : MODIFY LISTENER alter_listener 
        /// </summary>
        public partial class AstAlterOptionsListener2 : AstAlterOptionsListener
        {
            
            private static string _ruleName1 = "alter_options_listener";
            
            private AstAlterListener _alterListener;
            
            internal AstAlterOptionsListener2(ParserRuleContext ctx, AstAlterListener alterListener) : 
                    base(ctx)
            {
                _alterListener = alterListener;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterListener AlterListener
            {
                get
                {
                    return _alterListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterOptionsListener(this);
            }
        }
        /// <summary>
        /// alter_options_listener : restart_listener 
        /// </summary>
        public partial class AstAlterOptionsListener3 : AstAlterOptionsListener
        {
            
            private static string _ruleName1 = "alter_options_listener";
            
            private AstRestartListener _restartListener;
            
            internal AstAlterOptionsListener3(ParserRuleContext ctx, AstRestartListener restartListener) : 
                    base(ctx)
            {
                _restartListener = restartListener;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRestartListener RestartListener
            {
                get
                {
                    return _restartListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterOptionsListener(this);
            }
        }
        

        
        internal AstAlterOptionsListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterOptionsListener(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterOptionsListener(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterOptionsListener Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterOptionsListener.AstAlterOptionsListener1(ctx, list.Get<AstAddListener>(0));
            }
            if ((index == 2))
            {
                return new AstAlterOptionsListener.AstAlterOptionsListener2(ctx, list.Get<AstAlterListener>(0));
            }
            if ((index == 3))
            {
                return new AstAlterOptionsListener.AstAlterOptionsListener3(ctx, list.Get<AstRestartListener>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_options_listener : 
        ///    add_listener 
        /// </summary>
        public static AstAlterOptionsListener AlterOptionsListener(ParserRuleContext ctx, AstAddListener addListener)
        {
            AstAlterOptionsListener.AstAlterOptionsListener1 result = new AstAlterOptionsListener.AstAlterOptionsListener1(ctx, addListener);
            return result;
        }
        
        /// <summary>
        /// alter_options_listener : 
        ///    MODIFY LISTENER alter_listener 
        /// </summary>
        public static AstAlterOptionsListener AlterOptionsListener(ParserRuleContext ctx, AstAlterListener alterListener)
        {
            AstAlterOptionsListener.AstAlterOptionsListener2 result = new AstAlterOptionsListener.AstAlterOptionsListener2(ctx, alterListener);
            return result;
        }
        
        /// <summary>
        /// alter_options_listener : 
        ///    restart_listener 
        /// </summary>
        public static AstAlterOptionsListener AlterOptionsListener(ParserRuleContext ctx, AstRestartListener restartListener)
        {
            AstAlterOptionsListener.AstAlterOptionsListener3 result = new AstAlterOptionsListener.AstAlterOptionsListener3(ctx, restartListener);
            return result;
        }
    }
    
    /// <summary>
    /// alter_listener
    /// 	 : ADD  IP  LR_BRACKET  ip_listener  RR_BRACKET
    /// 	 | PORT  EQUAL  decimal
    /// </summary>
    public abstract partial class AstAlterListener : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstIpListener), false, false, "ip_listener")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "ADD  IP  LR_BRACKET  ip_listener  RR_BRACKET\r\n | PORT  EQUAL  decimal\r\n";
        
        private static string _ruleName = "alter_listener";
        
        /// <summary>
        /// alter_listener : ADD IP LR_BRACKET ip_listener RR_BRACKET 
        /// </summary>
        public partial class AstAlterListener1 : AstAlterListener
        {
            
            private static string _ruleName1 = "alter_listener";
            
            private AstIpListener _ipListener;
            
            internal AstAlterListener1(ParserRuleContext ctx, AstIpListener ipListener) : 
                    base(ctx)
            {
                _ipListener = ipListener;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIpListener IpListener
            {
                get
                {
                    return _ipListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterListener(this);
            }
        }
        /// <summary>
        /// alter_listener : PORT EQUAL decimal 
        /// </summary>
        public partial class AstAlterListener2 : AstAlterListener
        {
            
            private static string _ruleName1 = "alter_listener";
            
            private AstDecimal _decimal;
            
            internal AstAlterListener2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterListener(this);
            }
        }
        

        
        internal AstAlterListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterListener(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterListener(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterListener Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterListener.AstAlterListener1(ctx, list.Get<AstIpListener>(0));
            }
            if ((index == 2))
            {
                return new AstAlterListener.AstAlterListener2(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_listener : 
        ///    ADD IP ( ip_listener ) 
        /// </summary>
        public static AstAlterListener AlterListener(ParserRuleContext ctx, AstIpListener ipListener)
        {
            AstAlterListener.AstAlterListener1 result = new AstAlterListener.AstAlterListener1(ctx, ipListener);
            return result;
        }
        
        /// <summary>
        /// alter_listener : 
        ///    PORT EQUAL decimal 
        /// </summary>
        public static AstAlterListener AlterListener(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterListener.AstAlterListener2 result = new AstAlterListener.AstAlterListener2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// ip_listener
    /// 	 : range_ip_v4
    /// 	 | ipv6
    /// </summary>
    public abstract partial class AstIpListener : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRangeIpV4), false, false, "range_ip_v4")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstIpv6), false, false, "ipv6"))));
        
        private static string _ruleValue = "range_ip_v4\r\n | ipv6\r\n";
        
        private static string _ruleName = "ip_listener";
        
        /// <summary>
        /// ip_listener : range_ip_v4 
        /// </summary>
        public partial class AstIpListener1 : AstIpListener
        {
            
            private static string _ruleName1 = "ip_listener";
            
            private AstRangeIpV4 _rangeIpV4;
            
            internal AstIpListener1(ParserRuleContext ctx, AstRangeIpV4 rangeIpV4) : 
                    base(ctx)
            {
                _rangeIpV4 = rangeIpV4;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRangeIpV4 RangeIpV4
            {
                get
                {
                    return _rangeIpV4;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListener(this);
            }
        }
        /// <summary>
        /// ip_listener : ipv6 
        /// </summary>
        public partial class AstIpListener2 : AstIpListener
        {
            
            private static string _ruleName1 = "ip_listener";
            
            private AstIpv6 _ipv6;
            
            internal AstIpListener2(ParserRuleContext ctx, AstIpv6 ipv6) : 
                    base(ctx)
            {
                _ipv6 = ipv6;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIpv6 Ipv6
            {
                get
                {
                    return _ipv6;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListener(this);
            }
        }
        

        
        internal AstIpListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIpListener(Position p) : 
                base(p)
        {
        }
        
        internal AstIpListener(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIpListener Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIpListener.AstIpListener1(ctx, list.Get<AstRangeIpV4>(0));
            }
            if ((index == 2))
            {
                return new AstIpListener.AstIpListener2(ctx, list.Get<AstIpv6>(0));
            }
            return null;
        }
        
        /// <summary>
        /// ip_listener : 
        ///    range_ip_v4 
        /// </summary>
        public static AstIpListener IpListener(ParserRuleContext ctx, AstRangeIpV4 rangeIpV4)
        {
            AstIpListener.AstIpListener1 result = new AstIpListener.AstIpListener1(ctx, rangeIpV4);
            return result;
        }
        
        /// <summary>
        /// ip_listener : 
        ///    ipv6 
        /// </summary>
        public static AstIpListener IpListener(ParserRuleContext ctx, AstIpv6 ipv6)
        {
            AstIpListener.AstIpListener2 result = new AstIpListener.AstIpListener2(ctx, ipv6);
            return result;
        }
    }
    
    /// <summary>
    /// ip_listener_comma
    /// 	 : range_ip_comma_v4
    /// 	 | ipv6
    /// </summary>
    public abstract partial class AstIpListenerComma : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRangeIpCommaV4), false, false, "range_ip_comma_v4")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstIpv6), false, false, "ipv6"))));
        
        private static string _ruleValue = "range_ip_comma_v4\r\n | ipv6\r\n";
        
        private static string _ruleName = "ip_listener_comma";
        
        /// <summary>
        /// ip_listener_comma : range_ip_comma_v4 
        /// </summary>
        public partial class AstIpListenerComma1 : AstIpListenerComma
        {
            
            private static string _ruleName1 = "ip_listener_comma";
            
            private AstRangeIpCommaV4 _rangeIpCommaV4;
            
            internal AstIpListenerComma1(ParserRuleContext ctx, AstRangeIpCommaV4 rangeIpCommaV4) : 
                    base(ctx)
            {
                _rangeIpCommaV4 = rangeIpCommaV4;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRangeIpCommaV4 RangeIpCommaV4
            {
                get
                {
                    return _rangeIpCommaV4;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListenerComma(this);
            }
        }
        /// <summary>
        /// ip_listener_comma : ipv6 
        /// </summary>
        public partial class AstIpListenerComma2 : AstIpListenerComma
        {
            
            private static string _ruleName1 = "ip_listener_comma";
            
            private AstIpv6 _ipv6;
            
            internal AstIpListenerComma2(ParserRuleContext ctx, AstIpv6 ipv6) : 
                    base(ctx)
            {
                _ipv6 = ipv6;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIpv6 Ipv6
            {
                get
                {
                    return _ipv6;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListenerComma(this);
            }
        }
        

        
        internal AstIpListenerComma(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIpListenerComma(Position p) : 
                base(p)
        {
        }
        
        internal AstIpListenerComma(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIpListenerComma Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIpListenerComma.AstIpListenerComma1(ctx, list.Get<AstRangeIpCommaV4>(0));
            }
            if ((index == 2))
            {
                return new AstIpListenerComma.AstIpListenerComma2(ctx, list.Get<AstIpv6>(0));
            }
            return null;
        }
        
        /// <summary>
        /// ip_listener_comma : 
        ///    range_ip_comma_v4 
        /// </summary>
        public static AstIpListenerComma IpListenerComma(ParserRuleContext ctx, AstRangeIpCommaV4 rangeIpCommaV4)
        {
            AstIpListenerComma.AstIpListenerComma1 result = new AstIpListenerComma.AstIpListenerComma1(ctx, rangeIpCommaV4);
            return result;
        }
        
        /// <summary>
        /// ip_listener_comma : 
        ///    ipv6 
        /// </summary>
        public static AstIpListenerComma IpListenerComma(ParserRuleContext ctx, AstIpv6 ipv6)
        {
            AstIpListenerComma.AstIpListenerComma2 result = new AstIpListenerComma.AstIpListenerComma2(ctx, ipv6);
            return result;
        }
    }
    
    /// <summary>
    /// address_listener
    /// 	 : listener_dhcp
    /// 	 | WITH  IP  LR_BRACKET  listener_ip_address
    /// </summary>
    public abstract partial class AstAddressListener : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstListenerDhcp), false, false, "listener_dhcp")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstListenerIpAddress), false, false, "listener_ip_address"))));
        
        private static string _ruleValue = "listener_dhcp\r\n | WITH  IP  LR_BRACKET  listener_ip_address\r\n";
        
        private static string _ruleName = "address_listener";
        
        /// <summary>
        /// address_listener : listener_dhcp 
        /// </summary>
        public partial class AstAddressListener1 : AstAddressListener
        {
            
            private static string _ruleName1 = "address_listener";
            
            private AstListenerDhcp _listenerDhcp;
            
            internal AstAddressListener1(ParserRuleContext ctx, AstListenerDhcp listenerDhcp) : 
                    base(ctx)
            {
                _listenerDhcp = listenerDhcp;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstListenerDhcp ListenerDhcp
            {
                get
                {
                    return _listenerDhcp;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddressListener(this);
            }
        }
        /// <summary>
        /// address_listener : WITH IP LR_BRACKET listener_ip_address 
        /// </summary>
        public partial class AstAddressListener2 : AstAddressListener
        {
            
            private static string _ruleName1 = "address_listener";
            
            private AstListenerIpAddress _listenerIpAddress;
            
            internal AstAddressListener2(ParserRuleContext ctx, AstListenerIpAddress listenerIpAddress) : 
                    base(ctx)
            {
                _listenerIpAddress = listenerIpAddress;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstListenerIpAddress ListenerIpAddress
            {
                get
                {
                    return _listenerIpAddress;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddressListener(this);
            }
        }
        

        
        internal AstAddressListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddressListener(Position p) : 
                base(p)
        {
        }
        
        internal AstAddressListener(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAddressListener Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAddressListener.AstAddressListener1(ctx, list.Get<AstListenerDhcp>(0));
            }
            if ((index == 2))
            {
                return new AstAddressListener.AstAddressListener2(ctx, list.Get<AstListenerIpAddress>(0));
            }
            return null;
        }
        
        /// <summary>
        /// address_listener : 
        ///    listener_dhcp 
        /// </summary>
        public static AstAddressListener AddressListener(ParserRuleContext ctx, AstListenerDhcp listenerDhcp)
        {
            AstAddressListener.AstAddressListener1 result = new AstAddressListener.AstAddressListener1(ctx, listenerDhcp);
            return result;
        }
        
        /// <summary>
        /// address_listener : 
        ///    WITH IP ( listener_ip_address 
        /// </summary>
        public static AstAddressListener AddressListener(ParserRuleContext ctx, AstListenerIpAddress listenerIpAddress)
        {
            AstAddressListener.AstAddressListener2 result = new AstAddressListener.AstAddressListener2(ctx, listenerIpAddress);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_primary
    /// 	 : ENDPOINT_URL  EQUAL  url_value
    /// 	 | availability_mode_set
    /// 	 | FAILOVER_MODE  EQUAL  failover = auto_manual
    /// 	 | seeding_mode_set
    /// 	 | backup_priority_set
    /// </summary>
    public abstract partial class AstAlterAvailabilityReplicatPrimary : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUrlValue), false, false, "url_value")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAvailabilityModeSet), false, false, "availability_mode_set")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAutoManual), false, false, "auto_manual")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstSeedingModeSet), false, false, "seeding_mode_set")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstBackupPrioritySet), false, false, "backup_priority_set"))));
        
        private static string _ruleValue = "ENDPOINT_URL  EQUAL  url_value\r\n | availability_mode_set\r\n | FAILOVER_MODE  EQUAL" +
            "  failover = auto_manual\r\n | seeding_mode_set\r\n | backup_priority_set\r\n";
        
        private static string _ruleName = "alter_availability_replicat_primary";
        
        /// <summary>
        /// alter_availability_replicat_primary : ENDPOINT_URL EQUAL url_value 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary1 : AstAlterAvailabilityReplicatPrimary
        {
            
            private static string _ruleName1 = "alter_availability_replicat_primary";
            
            private AstUrlValue _urlValue;
            
            internal AstAlterAvailabilityReplicatPrimary1(ParserRuleContext ctx, AstUrlValue urlValue) : 
                    base(ctx)
            {
                _urlValue = urlValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUrlValue UrlValue
            {
                get
                {
                    return _urlValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : availability_mode_set 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary2 : AstAlterAvailabilityReplicatPrimary
        {
            
            private static string _ruleName1 = "alter_availability_replicat_primary";
            
            private AstAvailabilityModeSet _availabilityModeSet;
            
            internal AstAlterAvailabilityReplicatPrimary2(ParserRuleContext ctx, AstAvailabilityModeSet availabilityModeSet) : 
                    base(ctx)
            {
                _availabilityModeSet = availabilityModeSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAvailabilityModeSet AvailabilityModeSet
            {
                get
                {
                    return _availabilityModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : FAILOVER_MODE EQUAL failover=auto_manual 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary3 : AstAlterAvailabilityReplicatPrimary
        {
            
            private static string _ruleName1 = "alter_availability_replicat_primary";
            
            private AstAutoManual _failover;
            
            internal AstAlterAvailabilityReplicatPrimary3(ParserRuleContext ctx, AstAutoManual failover) : 
                    base(ctx)
            {
                _failover = failover;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAutoManual Failover
            {
                get
                {
                    return _failover;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : seeding_mode_set 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary4 : AstAlterAvailabilityReplicatPrimary
        {
            
            private static string _ruleName1 = "alter_availability_replicat_primary";
            
            private AstSeedingModeSet _seedingModeSet;
            
            internal AstAlterAvailabilityReplicatPrimary4(ParserRuleContext ctx, AstSeedingModeSet seedingModeSet) : 
                    base(ctx)
            {
                _seedingModeSet = seedingModeSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSeedingModeSet SeedingModeSet
            {
                get
                {
                    return _seedingModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : backup_priority_set 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary5 : AstAlterAvailabilityReplicatPrimary
        {
            
            private static string _ruleName1 = "alter_availability_replicat_primary";
            
            private AstBackupPrioritySet _backupPrioritySet;
            
            internal AstAlterAvailabilityReplicatPrimary5(ParserRuleContext ctx, AstBackupPrioritySet backupPrioritySet) : 
                    base(ctx)
            {
                _backupPrioritySet = backupPrioritySet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBackupPrioritySet BackupPrioritySet
            {
                get
                {
                    return _backupPrioritySet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        

        
        internal AstAlterAvailabilityReplicatPrimary(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterAvailabilityReplicatPrimary Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1(ctx, list.Get<AstUrlValue>(0));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2(ctx, list.Get<AstAvailabilityModeSet>(0));
            }
            if ((index == 3))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3(ctx, list.Get<AstAutoManual>(0));
            }
            if ((index == 4))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4(ctx, list.Get<AstSeedingModeSet>(0));
            }
            if ((index == 5))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5(ctx, list.Get<AstBackupPrioritySet>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    ENDPOINT_URL EQUAL url_value 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstUrlValue urlValue)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1(ctx, urlValue);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    availability_mode_set 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstAvailabilityModeSet availabilityModeSet)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2(ctx, availabilityModeSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    FAILOVER_MODE EQUAL failover=auto_manual 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstAutoManual failover)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3(ctx, failover);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    seeding_mode_set 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstSeedingModeSet seedingModeSet)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4(ctx, seedingModeSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    backup_priority_set 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstBackupPrioritySet backupPrioritySet)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5(ctx, backupPrioritySet);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_primary_role
    /// 	 : allow_connections_set
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET
    /// 	 | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
    /// </summary>
    public abstract partial class AstAlterAvailabilityPrimaryRole : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAllowConnectionsSet), false, false, "allow_connections_set")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstRoutingList), false, false, "routing_list")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "allow_connections_set\r\n | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list" +
            "  RR_BRACKET\r\n | SESSION_TIMEOUT  EQUAL  session_timeout = decimal\r\n";
        
        private static string _ruleName = "alter_availability_primary_role";
        
        /// <summary>
        /// alter_availability_primary_role : allow_connections_set 
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole1 : AstAlterAvailabilityPrimaryRole
        {
            
            private static string _ruleName1 = "alter_availability_primary_role";
            
            private AstAllowConnectionsSet _allowConnectionsSet;
            
            internal AstAlterAvailabilityPrimaryRole1(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet) : 
                    base(ctx)
            {
                _allowConnectionsSet = allowConnectionsSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAllowConnectionsSet AllowConnectionsSet
            {
                get
                {
                    return _allowConnectionsSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        /// <summary>
        /// alter_availability_primary_role : READ_ONLY_ROUTING_LIST EQUAL LR_BRACKET routing_list RR_BRACKET 
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole2 : AstAlterAvailabilityPrimaryRole
        {
            
            private static string _ruleName1 = "alter_availability_primary_role";
            
            private AstRoutingList _routingList;
            
            internal AstAlterAvailabilityPrimaryRole2(ParserRuleContext ctx, AstRoutingList routingList) : 
                    base(ctx)
            {
                _routingList = routingList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRoutingList RoutingList
            {
                get
                {
                    return _routingList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        /// <summary>
        /// alter_availability_primary_role : SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole3 : AstAlterAvailabilityPrimaryRole
        {
            
            private static string _ruleName1 = "alter_availability_primary_role";
            
            private AstDecimal _sessionTimeout;
            
            internal AstAlterAvailabilityPrimaryRole3(ParserRuleContext ctx, AstDecimal sessionTimeout) : 
                    base(ctx)
            {
                _sessionTimeout = sessionTimeout;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal SessionTimeout
            {
                get
                {
                    return _sessionTimeout;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        

        
        internal AstAlterAvailabilityPrimaryRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterAvailabilityPrimaryRole Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1(ctx, list.Get<AstAllowConnectionsSet>(0));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2(ctx, list.Get<AstRoutingList>(0));
            }
            if ((index == 3))
            {
                return new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    allow_connections_set 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet)
        {
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1(ctx, allowConnectionsSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( routing_list ) 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(ParserRuleContext ctx, AstRoutingList routingList)
        {
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2(ctx, routingList);
            return result;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(ParserRuleContext ctx, AstDecimal sessionTimeout)
        {
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3(ctx, sessionTimeout);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_replicat
    /// 	 : alter_availability_replicat_add
    /// 	 | REMOVE  REPLICA  ON  server_instance_txt
    /// 	 | alter_availability_replicat_modify
    /// </summary>
    public abstract partial class AstAlterAvailabilityReplicat : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAvailabilityReplicatAdd), false, false, "alter_availability_replicat_add")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerInstanceTxt), false, false, "server_instance_txt")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAvailabilityReplicatModify), false, false, "alter_availability_replicat_modify"))));
        
        private static string _ruleValue = "alter_availability_replicat_add\r\n | REMOVE  REPLICA  ON  server_instance_txt\r\n | " +
            "alter_availability_replicat_modify\r\n";
        
        private static string _ruleName = "alter_availability_replicat";
        
        /// <summary>
        /// alter_availability_replicat : alter_availability_replicat_add 
        /// </summary>
        public partial class AstAlterAvailabilityReplicat1 : AstAlterAvailabilityReplicat
        {
            
            private static string _ruleName1 = "alter_availability_replicat";
            
            private AstAlterAvailabilityReplicatAdd _alterAvailabilityReplicatAdd;
            
            internal AstAlterAvailabilityReplicat1(ParserRuleContext ctx, AstAlterAvailabilityReplicatAdd alterAvailabilityReplicatAdd) : 
                    base(ctx)
            {
                _alterAvailabilityReplicatAdd = alterAvailabilityReplicatAdd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAvailabilityReplicatAdd AlterAvailabilityReplicatAdd
            {
                get
                {
                    return _alterAvailabilityReplicatAdd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicat(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat : REMOVE REPLICA ON server_instance_txt 
        /// </summary>
        public partial class AstAlterAvailabilityReplicat2 : AstAlterAvailabilityReplicat
        {
            
            private static string _ruleName1 = "alter_availability_replicat";
            
            private AstServerInstanceTxt _serverInstanceTxt;
            
            internal AstAlterAvailabilityReplicat2(ParserRuleContext ctx, AstServerInstanceTxt serverInstanceTxt) : 
                    base(ctx)
            {
                _serverInstanceTxt = serverInstanceTxt;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerInstanceTxt ServerInstanceTxt
            {
                get
                {
                    return _serverInstanceTxt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicat(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat : alter_availability_replicat_modify 
        /// </summary>
        public partial class AstAlterAvailabilityReplicat3 : AstAlterAvailabilityReplicat
        {
            
            private static string _ruleName1 = "alter_availability_replicat";
            
            private AstAlterAvailabilityReplicatModify _alterAvailabilityReplicatModify;
            
            internal AstAlterAvailabilityReplicat3(ParserRuleContext ctx, AstAlterAvailabilityReplicatModify alterAvailabilityReplicatModify) : 
                    base(ctx)
            {
                _alterAvailabilityReplicatModify = alterAvailabilityReplicatModify;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAvailabilityReplicatModify AlterAvailabilityReplicatModify
            {
                get
                {
                    return _alterAvailabilityReplicatModify;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicat(this);
            }
        }
        

        
        internal AstAlterAvailabilityReplicat(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityReplicat(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityReplicat(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterAvailabilityReplicat Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat1(ctx, list.Get<AstAlterAvailabilityReplicatAdd>(0));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat2(ctx, list.Get<AstServerInstanceTxt>(0));
            }
            if ((index == 3))
            {
                return new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat3(ctx, list.Get<AstAlterAvailabilityReplicatModify>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_availability_replicat : 
        ///    alter_availability_replicat_add 
        /// </summary>
        public static AstAlterAvailabilityReplicat AlterAvailabilityReplicat(ParserRuleContext ctx, AstAlterAvailabilityReplicatAdd alterAvailabilityReplicatAdd)
        {
            AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat1 result = new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat1(ctx, alterAvailabilityReplicatAdd);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat : 
        ///    REMOVE REPLICA ON server_instance_txt 
        /// </summary>
        public static AstAlterAvailabilityReplicat AlterAvailabilityReplicat(ParserRuleContext ctx, AstServerInstanceTxt serverInstanceTxt)
        {
            AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat2 result = new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat2(ctx, serverInstanceTxt);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat : 
        ///    alter_availability_replicat_modify 
        /// </summary>
        public static AstAlterAvailabilityReplicat AlterAvailabilityReplicat(ParserRuleContext ctx, AstAlterAvailabilityReplicatModify alterAvailabilityReplicatModify)
        {
            AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat3 result = new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat3(ctx, alterAvailabilityReplicatModify);
            return result;
        }
    }
    
    /// <summary>
    /// availability_group_options
    /// 	 : JOIN
    /// 	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url_set  COMMA  availability_mode_set  COMMA  failover_mode_manuel  COMMA  seeding_mode_set)  RR_BRACKET)+
    /// 	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url_set  (COMMA?  availability_mode_set)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode_set)?)  RR_BRACKET)+
    /// </summary>
    public abstract partial class AstAvailabilityGroupOptions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstListenerUrlSet), false, false, "listener_url_set"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAvailabilityModeSet), false, false, "availability_mode_set"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFailoverModeManuel), false, false, "failover_mode_manuel"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSeedingModeSet), false, false, "seeding_mode_set")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstListenerUrlSet), false, false, "listener_url_set"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAvailabilityModeSet), false, false, "availability_mode_set"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFailoverModeManuel), false, false, "failover_mode_manuel"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSeedingModeSet), false, false, "seeding_mode_set"))));
        
        private static string _ruleValue = @"JOIN
 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url_set  COMMA  availability_mode_set  COMMA  failover_mode_manuel  COMMA  seeding_mode_set)  RR_BRACKET)+
 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url_set  (COMMA?  availability_mode_set)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode_set)?)  RR_BRACKET)+
";
        
        private static string _ruleName = "availability_group_options";
        
        /// <summary>
        /// availability_group_options : JOIN 
        /// </summary>
        public partial class AstAvailabilityGroupOptions1 : AstAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "availability_group_options";
            
            internal AstAvailabilityGroupOptions1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// availability_group_options : JOIN AVAILABILITY GROUP ON COMMA? ag_name=stringtext WITH LR_BRACKET listener_url_set COMMA availability_mode_set COMMA failover_mode_manuel COMMA seeding_mode_set RR_BRACKET 
        /// </summary>
        public partial class AstAvailabilityGroupOptions2 : AstAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "availability_group_options";
            
            private AstStringtext _agName;
            
            private AstListenerUrlSet _listenerUrlSet;
            
            private AstAvailabilityModeSet _availabilityModeSet;
            
            private AstFailoverModeManuel _failoverModeManuel;
            
            private AstSeedingModeSet _seedingModeSet;
            
            internal AstAvailabilityGroupOptions2(ParserRuleContext ctx, AstStringtext agName, AstListenerUrlSet listenerUrlSet, AstAvailabilityModeSet availabilityModeSet, AstFailoverModeManuel failoverModeManuel, AstSeedingModeSet seedingModeSet) : 
                    base(ctx)
            {
                _agName = agName;
                _listenerUrlSet = listenerUrlSet;
                _availabilityModeSet = availabilityModeSet;
                _failoverModeManuel = failoverModeManuel;
                _seedingModeSet = seedingModeSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext AgName
            {
                get
                {
                    return _agName;
                }
            }
            
            public virtual AstListenerUrlSet ListenerUrlSet
            {
                get
                {
                    return _listenerUrlSet;
                }
            }
            
            public virtual AstAvailabilityModeSet AvailabilityModeSet
            {
                get
                {
                    return _availabilityModeSet;
                }
            }
            
            public virtual AstFailoverModeManuel FailoverModeManuel
            {
                get
                {
                    return _failoverModeManuel;
                }
            }
            
            public virtual AstSeedingModeSet SeedingModeSet
            {
                get
                {
                    return _seedingModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// availability_group_options : MODIFY AVAILABILITY GROUP ON COMMA? ag_name_modified=stringtext WITH LR_BRACKET listener_url_set COMMA? availability_mode_set COMMA? failover_mode_manuel COMMA? seeding_mode_set RR_BRACKET 
        /// </summary>
        public partial class AstAvailabilityGroupOptions3 : AstAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "availability_group_options";
            
            private AstStringtext _agNameModified;
            
            private AstListenerUrlSet _listenerUrlSet;
            
            private AstAvailabilityModeSet _availabilityModeSet;
            
            private AstFailoverModeManuel _failoverModeManuel;
            
            private AstSeedingModeSet _seedingModeSet;
            
            internal AstAvailabilityGroupOptions3(ParserRuleContext ctx, AstStringtext agNameModified, AstListenerUrlSet listenerUrlSet, AstAvailabilityModeSet availabilityModeSet, AstFailoverModeManuel failoverModeManuel, AstSeedingModeSet seedingModeSet) : 
                    base(ctx)
            {
                _agNameModified = agNameModified;
                _listenerUrlSet = listenerUrlSet;
                _availabilityModeSet = availabilityModeSet;
                _failoverModeManuel = failoverModeManuel;
                _seedingModeSet = seedingModeSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext AgNameModified
            {
                get
                {
                    return _agNameModified;
                }
            }
            
            public virtual AstListenerUrlSet ListenerUrlSet
            {
                get
                {
                    return _listenerUrlSet;
                }
            }
            
            public virtual AstAvailabilityModeSet AvailabilityModeSet
            {
                get
                {
                    return _availabilityModeSet;
                }
            }
            
            public virtual AstFailoverModeManuel FailoverModeManuel
            {
                get
                {
                    return _failoverModeManuel;
                }
            }
            
            public virtual AstSeedingModeSet SeedingModeSet
            {
                get
                {
                    return _seedingModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAvailabilityGroupOptions(this);
            }
        }
        

        
        internal AstAvailabilityGroupOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAvailabilityGroupOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstAvailabilityGroupOptions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAvailabilityGroupOptions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions1(ctx);
            }
            if ((index == 2))
            {
                return new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions2(ctx, list.Get<AstStringtext>(0), list.Get<AstListenerUrlSet>(1), list.Get<AstAvailabilityModeSet>(2), list.Get<AstFailoverModeManuel>(3), list.Get<AstSeedingModeSet>(4));
            }
            if ((index == 3))
            {
                return new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions3(ctx, list.Get<AstStringtext>(0), list.Get<AstListenerUrlSet>(1), list.Get<AstAvailabilityModeSet>(2), list.Get<AstFailoverModeManuel>(3), list.Get<AstSeedingModeSet>(4));
            }
            return null;
        }
        
        /// <summary>
        /// availability_group_options : 
        ///    JOIN 
        /// </summary>
        public static AstAvailabilityGroupOptions AvailabilityGroupOptions(ParserRuleContext ctx)
        {
            AstAvailabilityGroupOptions.AstAvailabilityGroupOptions1 result = new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions1(ctx);
            return result;
        }
        
        /// <summary>
        /// availability_group_options : 
        ///    JOIN AVAILABILITY GROUP ON ,? ag_name=stringtext WITH ( listener_url_set , availability_mode_set , failover_mode_manuel , seeding_mode_set ) 
        /// </summary>
        public static AstAvailabilityGroupOptions AvailabilityGroupOptions(ParserRuleContext ctx, AstStringtext agName, AstListenerUrlSet listenerUrlSet, AstAvailabilityModeSet availabilityModeSet, AstFailoverModeManuel failoverModeManuel, AstSeedingModeSet seedingModeSet)
        {
            AstAvailabilityGroupOptions.AstAvailabilityGroupOptions2 result = new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions2(ctx, agName, listenerUrlSet, availabilityModeSet, failoverModeManuel, seedingModeSet);
            return result;
        }
    }
    
    /// <summary>
    /// failover_mode_manuel
    /// 	 : FAILOVER_MODE  EQUAL  MANUAL
    /// </summary>
    public partial class AstFailoverModeManuel : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "FAILOVER_MODE  EQUAL  MANUAL\r\n";
        
        private static string _ruleName = "failover_mode_manuel";
        
        internal AstFailoverModeManuel(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFailoverModeManuel(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFailoverModeManuel(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFailoverModeManuel(this);
        }
        
        public static AstFailoverModeManuel Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstFailoverModeManuel(ctx);
        }
        
        /// <summary>
        /// failover_mode_manuel : 
        ///    FAILOVER_MODE EQUAL MANUAL 
        /// </summary>
        public static AstFailoverModeManuel FailoverModeManuel(ParserRuleContext ctx)
        {
            AstFailoverModeManuel result = new AstFailoverModeManuel(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_role
    /// 	 : secondary_role_args
    /// 	 | primary_role_args
    /// </summary>
    public abstract partial class AstAlterRole : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSecondaryRoleArgs), false, false, "secondary_role_args")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstPrimaryRoleArgs), false, false, "primary_role_args"))));
        
        private static string _ruleValue = "secondary_role_args\r\n | primary_role_args\r\n";
        
        private static string _ruleName = "alter_role";
        
        /// <summary>
        /// alter_role : secondary_role_args 
        /// </summary>
        public partial class AstAlterRole1 : AstAlterRole
        {
            
            private static string _ruleName1 = "alter_role";
            
            private AstSecondaryRoleArgs _secondaryRoleArgs;
            
            internal AstAlterRole1(ParserRuleContext ctx, AstSecondaryRoleArgs secondaryRoleArgs) : 
                    base(ctx)
            {
                _secondaryRoleArgs = secondaryRoleArgs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSecondaryRoleArgs SecondaryRoleArgs
            {
                get
                {
                    return _secondaryRoleArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterRole(this);
            }
        }
        /// <summary>
        /// alter_role : primary_role_args 
        /// </summary>
        public partial class AstAlterRole2 : AstAlterRole
        {
            
            private static string _ruleName1 = "alter_role";
            
            private AstPrimaryRoleArgs _primaryRoleArgs;
            
            internal AstAlterRole2(ParserRuleContext ctx, AstPrimaryRoleArgs primaryRoleArgs) : 
                    base(ctx)
            {
                _primaryRoleArgs = primaryRoleArgs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPrimaryRoleArgs PrimaryRoleArgs
            {
                get
                {
                    return _primaryRoleArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterRole(this);
            }
        }
        

        
        internal AstAlterRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterRole(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterRole Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterRole.AstAlterRole1(ctx, list.Get<AstSecondaryRoleArgs>(0));
            }
            if ((index == 2))
            {
                return new AstAlterRole.AstAlterRole2(ctx, list.Get<AstPrimaryRoleArgs>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_role : 
        ///    secondary_role_args 
        /// </summary>
        public static AstAlterRole AlterRole(ParserRuleContext ctx, AstSecondaryRoleArgs secondaryRoleArgs)
        {
            AstAlterRole.AstAlterRole1 result = new AstAlterRole.AstAlterRole1(ctx, secondaryRoleArgs);
            return result;
        }
        
        /// <summary>
        /// alter_role : 
        ///    primary_role_args 
        /// </summary>
        public static AstAlterRole AlterRole(ParserRuleContext ctx, AstPrimaryRoleArgs primaryRoleArgs)
        {
            AstAlterRole.AstAlterRole2 result = new AstAlterRole.AstAlterRole2(ctx, primaryRoleArgs);
            return result;
        }
    }
    
    /// <summary>
    /// primary_role_config
    /// 	 : allow_connections_set
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  string_list_not  RR_BRACKET
    /// 	 | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
    /// </summary>
    public abstract partial class AstPrimaryRoleConfig : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAllowConnectionsSet), false, false, "allow_connections_set")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringListNot), false, false, "string_list_not")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "allow_connections_set\r\n | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  string_list_" +
            "not  RR_BRACKET\r\n | SESSION_TIMEOUT  EQUAL  session_timeout = decimal\r\n";
        
        private static string _ruleName = "primary_role_config";
        
        /// <summary>
        /// primary_role_config : allow_connections_set 
        /// </summary>
        public partial class AstPrimaryRoleConfig1 : AstPrimaryRoleConfig
        {
            
            private static string _ruleName1 = "primary_role_config";
            
            private AstAllowConnectionsSet _allowConnectionsSet;
            
            internal AstPrimaryRoleConfig1(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet) : 
                    base(ctx)
            {
                _allowConnectionsSet = allowConnectionsSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAllowConnectionsSet AllowConnectionsSet
            {
                get
                {
                    return _allowConnectionsSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimaryRoleConfig(this);
            }
        }
        /// <summary>
        /// primary_role_config : READ_ONLY_ROUTING_LIST EQUAL LR_BRACKET string_list_not RR_BRACKET 
        /// </summary>
        public partial class AstPrimaryRoleConfig2 : AstPrimaryRoleConfig
        {
            
            private static string _ruleName1 = "primary_role_config";
            
            private AstStringListNot _stringListNot;
            
            internal AstPrimaryRoleConfig2(ParserRuleContext ctx, AstStringListNot stringListNot) : 
                    base(ctx)
            {
                _stringListNot = stringListNot;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringListNot StringListNot
            {
                get
                {
                    return _stringListNot;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimaryRoleConfig(this);
            }
        }
        /// <summary>
        /// primary_role_config : SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public partial class AstPrimaryRoleConfig3 : AstPrimaryRoleConfig
        {
            
            private static string _ruleName1 = "primary_role_config";
            
            private AstDecimal _sessionTimeout;
            
            internal AstPrimaryRoleConfig3(ParserRuleContext ctx, AstDecimal sessionTimeout) : 
                    base(ctx)
            {
                _sessionTimeout = sessionTimeout;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal SessionTimeout
            {
                get
                {
                    return _sessionTimeout;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimaryRoleConfig(this);
            }
        }
        

        
        internal AstPrimaryRoleConfig(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrimaryRoleConfig(Position p) : 
                base(p)
        {
        }
        
        internal AstPrimaryRoleConfig(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPrimaryRoleConfig Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPrimaryRoleConfig.AstPrimaryRoleConfig1(ctx, list.Get<AstAllowConnectionsSet>(0));
            }
            if ((index == 2))
            {
                return new AstPrimaryRoleConfig.AstPrimaryRoleConfig2(ctx, list.Get<AstStringListNot>(0));
            }
            if ((index == 3))
            {
                return new AstPrimaryRoleConfig.AstPrimaryRoleConfig3(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// primary_role_config : 
        ///    allow_connections_set 
        /// </summary>
        public static AstPrimaryRoleConfig PrimaryRoleConfig(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet)
        {
            AstPrimaryRoleConfig.AstPrimaryRoleConfig1 result = new AstPrimaryRoleConfig.AstPrimaryRoleConfig1(ctx, allowConnectionsSet);
            return result;
        }
        
        /// <summary>
        /// primary_role_config : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( string_list_not ) 
        /// </summary>
        public static AstPrimaryRoleConfig PrimaryRoleConfig(ParserRuleContext ctx, AstStringListNot stringListNot)
        {
            AstPrimaryRoleConfig.AstPrimaryRoleConfig2 result = new AstPrimaryRoleConfig.AstPrimaryRoleConfig2(ctx, stringListNot);
            return result;
        }
        
        /// <summary>
        /// primary_role_config : 
        ///    SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstPrimaryRoleConfig PrimaryRoleConfig(ParserRuleContext ctx, AstDecimal sessionTimeout)
        {
            AstPrimaryRoleConfig.AstPrimaryRoleConfig3 result = new AstPrimaryRoleConfig.AstPrimaryRoleConfig3(ctx, sessionTimeout);
            return result;
        }
    }
    
    /// <summary>
    /// string_list_not
    /// 	 : string_list
    /// 	 | NONE
    /// </summary>
    public abstract partial class AstStringListNot : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringList), false, false, "string_list"))));
        
        private static string _ruleValue = "string_list\r\n | NONE\r\n";
        
        private static string _ruleName = "string_list_not";
        
        /// <summary>
        /// string_list_not : string_list 
        /// </summary>
        public partial class AstStringListNot1 : AstStringListNot
        {
            
            private static string _ruleName1 = "string_list_not";
            
            private AstStringList _stringList;
            
            internal AstStringListNot1(ParserRuleContext ctx, AstStringList stringList) : 
                    base(ctx)
            {
                _stringList = stringList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringList StringList
            {
                get
                {
                    return _stringList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringListNot(this);
            }
        }
        /// <summary>
        /// string_list_not : NONE 
        /// </summary>
        public partial class AstStringListNot2 : AstStringListNot
        {
            
            private static string _ruleName1 = "string_list_not";
            
            internal AstStringListNot2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringListNot(this);
            }
        }
        

        
        internal AstStringListNot(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringListNot(Position p) : 
                base(p)
        {
        }
        
        internal AstStringListNot(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstStringListNot Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstStringListNot.AstStringListNot1(ctx, list.Get<AstStringList>(0));
            }
            if ((index == 2))
            {
                return new AstStringListNot.AstStringListNot2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// string_list_not : 
        ///    string_list 
        /// </summary>
        public static AstStringListNot StringListNot(ParserRuleContext ctx, AstStringList stringList)
        {
            AstStringListNot.AstStringListNot1 result = new AstStringListNot.AstStringListNot1(ctx, stringList);
            return result;
        }
        
        /// <summary>
        /// string_list_not : 
        ///    NONE 
        /// </summary>
        public static AstStringListNot StringListNot(ParserRuleContext ctx)
        {
            AstStringListNot.AstStringListNot2 result = new AstStringListNot.AstStringListNot2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// secondary_role_config
    /// 	 : allow_connections_set
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET
    /// </summary>
    public abstract partial class AstSecondaryRoleConfig : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAllowConnectionsSet), false, false, "allow_connections_set")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "allow_connections_set\r\n | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  " +
            "RR_BRACKET\r\n";
        
        private static string _ruleName = "secondary_role_config";
        
        /// <summary>
        /// secondary_role_config : allow_connections_set 
        /// </summary>
        public partial class AstSecondaryRoleConfig1 : AstSecondaryRoleConfig
        {
            
            private static string _ruleName1 = "secondary_role_config";
            
            private AstAllowConnectionsSet _allowConnectionsSet;
            
            internal AstSecondaryRoleConfig1(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet) : 
                    base(ctx)
            {
                _allowConnectionsSet = allowConnectionsSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAllowConnectionsSet AllowConnectionsSet
            {
                get
                {
                    return _allowConnectionsSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecondaryRoleConfig(this);
            }
        }
        /// <summary>
        /// secondary_role_config : READ_ONLY_ROUTING_LIST EQUAL LR_BRACKET stringtext RR_BRACKET 
        /// </summary>
        public partial class AstSecondaryRoleConfig2 : AstSecondaryRoleConfig
        {
            
            private static string _ruleName1 = "secondary_role_config";
            
            private AstStringtext _stringtext;
            
            internal AstSecondaryRoleConfig2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecondaryRoleConfig(this);
            }
        }
        

        
        internal AstSecondaryRoleConfig(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSecondaryRoleConfig(Position p) : 
                base(p)
        {
        }
        
        internal AstSecondaryRoleConfig(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSecondaryRoleConfig Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSecondaryRoleConfig.AstSecondaryRoleConfig1(ctx, list.Get<AstAllowConnectionsSet>(0));
            }
            if ((index == 2))
            {
                return new AstSecondaryRoleConfig.AstSecondaryRoleConfig2(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// secondary_role_config : 
        ///    allow_connections_set 
        /// </summary>
        public static AstSecondaryRoleConfig SecondaryRoleConfig(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet)
        {
            AstSecondaryRoleConfig.AstSecondaryRoleConfig1 result = new AstSecondaryRoleConfig.AstSecondaryRoleConfig1(ctx, allowConnectionsSet);
            return result;
        }
        
        /// <summary>
        /// secondary_role_config : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( stringtext ) 
        /// </summary>
        public static AstSecondaryRoleConfig SecondaryRoleConfig(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstSecondaryRoleConfig.AstSecondaryRoleConfig2 result = new AstSecondaryRoleConfig.AstSecondaryRoleConfig2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options
    /// 	 : SET  LR_BRACKET  alter_availability_group_option_set  RR_BRACKET
    /// 	 | add_remove_database
    /// 	 | alter_availability_replicat
    /// 	 | alter_options_listener
    /// 	 | alter_role
    /// 	 | availability_group_options
    /// 	 | grant_deny  CREATE  ANY  DATABASE
    /// 	 | FAILOVER
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | OFFLINE
    /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAvailabilityGroupOptionSet), false, false, "alter_availability_group_option_set")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAddRemoveDatabase), false, false, "add_remove_database")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterAvailabilityReplicat), false, false, "alter_availability_replicat")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterOptionsListener), false, false, "alter_options_listener")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterRole), false, false, "alter_role")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstAvailabilityGroupOptions), false, false, "availability_group_options")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstGrantDeny), false, false, "grant_deny"))));
        
        private static string _ruleValue = @"SET  LR_BRACKET  alter_availability_group_option_set  RR_BRACKET
 | add_remove_database
 | alter_availability_replicat
 | alter_options_listener
 | alter_role
 | availability_group_options
 | grant_deny  CREATE  ANY  DATABASE
 | FAILOVER
 | FORCE_FAILOVER_ALLOW_DATA_LOSS
 | OFFLINE
 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
";
        
        private static string _ruleName = "alter_availability_group_options";
        
        /// <summary>
        /// alter_availability_group_options : SET LR_BRACKET alter_availability_group_option_set RR_BRACKET 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions1 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            private AstAlterAvailabilityGroupOptionSet _alterAvailabilityGroupOptionSet;
            
            internal AstAlterAvailabilityGroupOptions1(ParserRuleContext ctx, AstAlterAvailabilityGroupOptionSet alterAvailabilityGroupOptionSet) : 
                    base(ctx)
            {
                _alterAvailabilityGroupOptionSet = alterAvailabilityGroupOptionSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet
            {
                get
                {
                    return _alterAvailabilityGroupOptionSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : add_remove_database 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions2 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            private AstAddRemoveDatabase _addRemoveDatabase;
            
            internal AstAlterAvailabilityGroupOptions2(ParserRuleContext ctx, AstAddRemoveDatabase addRemoveDatabase) : 
                    base(ctx)
            {
                _addRemoveDatabase = addRemoveDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAddRemoveDatabase AddRemoveDatabase
            {
                get
                {
                    return _addRemoveDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_availability_replicat 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions3 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            private AstAlterAvailabilityReplicat _alterAvailabilityReplicat;
            
            internal AstAlterAvailabilityGroupOptions3(ParserRuleContext ctx, AstAlterAvailabilityReplicat alterAvailabilityReplicat) : 
                    base(ctx)
            {
                _alterAvailabilityReplicat = alterAvailabilityReplicat;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterAvailabilityReplicat AlterAvailabilityReplicat
            {
                get
                {
                    return _alterAvailabilityReplicat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_options_listener 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions4 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            private AstAlterOptionsListener _alterOptionsListener;
            
            internal AstAlterAvailabilityGroupOptions4(ParserRuleContext ctx, AstAlterOptionsListener alterOptionsListener) : 
                    base(ctx)
            {
                _alterOptionsListener = alterOptionsListener;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterOptionsListener AlterOptionsListener
            {
                get
                {
                    return _alterOptionsListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_role 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions5 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            private AstAlterRole _alterRole;
            
            internal AstAlterAvailabilityGroupOptions5(ParserRuleContext ctx, AstAlterRole alterRole) : 
                    base(ctx)
            {
                _alterRole = alterRole;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterRole AlterRole
            {
                get
                {
                    return _alterRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : availability_group_options 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions6 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            private AstAvailabilityGroupOptions _availabilityGroupOptions;
            
            internal AstAlterAvailabilityGroupOptions6(ParserRuleContext ctx, AstAvailabilityGroupOptions availabilityGroupOptions) : 
                    base(ctx)
            {
                _availabilityGroupOptions = availabilityGroupOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAvailabilityGroupOptions AvailabilityGroupOptions
            {
                get
                {
                    return _availabilityGroupOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : grant_deny CREATE ANY DATABASE 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions7 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            private AstGrantDeny _grantDeny;
            
            internal AstAlterAvailabilityGroupOptions7(ParserRuleContext ctx, AstGrantDeny grantDeny) : 
                    base(ctx)
            {
                _grantDeny = grantDeny;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGrantDeny GrantDeny
            {
                get
                {
                    return _grantDeny;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : FAILOVER 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions8 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            internal AstAlterAvailabilityGroupOptions8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : FORCE_FAILOVER_ALLOW_DATA_LOSS 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions9 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            internal AstAlterAvailabilityGroupOptions9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : OFFLINE 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions10 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            internal AstAlterAvailabilityGroupOptions10(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : WITH LR_BRACKET DTC_SUPPORT EQUAL PER_DB RR_BRACKET 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions11 : AstAlterAvailabilityGroupOptions
        {
            
            private static string _ruleName1 = "alter_availability_group_options";
            
            internal AstAlterAvailabilityGroupOptions11(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterAvailabilityGroupOptions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1(ctx, list.Get<AstAlterAvailabilityGroupOptionSet>(0));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2(ctx, list.Get<AstAddRemoveDatabase>(0));
            }
            if ((index == 3))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3(ctx, list.Get<AstAlterAvailabilityReplicat>(0));
            }
            if ((index == 4))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4(ctx, list.Get<AstAlterOptionsListener>(0));
            }
            if ((index == 5))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5(ctx, list.Get<AstAlterRole>(0));
            }
            if ((index == 6))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6(ctx, list.Get<AstAvailabilityGroupOptions>(0));
            }
            if ((index == 7))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7(ctx, list.Get<AstGrantDeny>(0));
            }
            if ((index == 8))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions8(ctx);
            }
            if ((index == 9))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions9(ctx);
            }
            if ((index == 10))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions10(ctx);
            }
            if ((index == 11))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions11(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    SET ( alter_availability_group_option_set ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterAvailabilityGroupOptionSet alterAvailabilityGroupOptionSet)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1(ctx, alterAvailabilityGroupOptionSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    add_remove_database 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAddRemoveDatabase addRemoveDatabase)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2(ctx, addRemoveDatabase);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_availability_replicat 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterAvailabilityReplicat alterAvailabilityReplicat)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3(ctx, alterAvailabilityReplicat);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_options_listener 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterOptionsListener alterOptionsListener)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4(ctx, alterOptionsListener);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_role 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterRole alterRole)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5(ctx, alterRole);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    availability_group_options 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAvailabilityGroupOptions availabilityGroupOptions)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6(ctx, availabilityGroupOptions);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    grant_deny CREATE ANY DATABASE 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstGrantDeny grantDeny)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7(ctx, grantDeny);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    FAILOVER 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions8 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions8(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_option_set
    /// 	 : AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none
    /// 	 | FAILURE_CONDITION_LEVEL  EQUAL  decimal
    /// 	 | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal
    /// 	 | DB_FAILOVER  EQUAL  on_off
    /// 	 | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptionSet : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPrimarySecondaryNone), false, false, "primary_secondary_none")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none\r\n | FAILURE_CONDITION_" +
            "LEVEL  EQUAL  decimal\r\n | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal\r\n " +
            "| DB_FAILOVER  EQUAL  on_off\r\n | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQ" +
            "UAL  decimal\r\n";
        
        private static string _ruleName = "alter_availability_group_option_set";
        
        /// <summary>
        /// alter_availability_group_option_set : AUTOMATED_BACKUP_PREFERENCE EQUAL primary_secondary_none 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet1 : AstAlterAvailabilityGroupOptionSet
        {
            
            private static string _ruleName1 = "alter_availability_group_option_set";
            
            private AstPrimarySecondaryNone _primarySecondaryNone;
            
            internal AstAlterAvailabilityGroupOptionSet1(ParserRuleContext ctx, AstPrimarySecondaryNone primarySecondaryNone) : 
                    base(ctx)
            {
                _primarySecondaryNone = primarySecondaryNone;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPrimarySecondaryNone PrimarySecondaryNone
            {
                get
                {
                    return _primarySecondaryNone;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : FAILURE_CONDITION_LEVEL EQUAL decimal 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet2 : AstAlterAvailabilityGroupOptionSet
        {
            
            private static string _ruleName1 = "alter_availability_group_option_set";
            
            private AstDecimal _decimal;
            
            internal AstAlterAvailabilityGroupOptionSet2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : HEALTH_CHECK_TIMEOUT EQUAL milliseconds=decimal 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet3 : AstAlterAvailabilityGroupOptionSet
        {
            
            private static string _ruleName1 = "alter_availability_group_option_set";
            
            private AstDecimal _milliseconds;
            
            internal AstAlterAvailabilityGroupOptionSet3(ParserRuleContext ctx, AstDecimal milliseconds) : 
                    base(ctx)
            {
                _milliseconds = milliseconds;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Milliseconds
            {
                get
                {
                    return _milliseconds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : DB_FAILOVER EQUAL on_off 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet4 : AstAlterAvailabilityGroupOptionSet
        {
            
            private static string _ruleName1 = "alter_availability_group_option_set";
            
            private AstOnOff _onOff;
            
            internal AstAlterAvailabilityGroupOptionSet4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT EQUAL decimal 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet5 : AstAlterAvailabilityGroupOptionSet
        {
            
            private static string _ruleName1 = "alter_availability_group_option_set";
            
            private AstDecimal _decimal;
            
            internal AstAlterAvailabilityGroupOptionSet5(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptionSet(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionSet(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionSet(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterAvailabilityGroupOptionSet Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet1(ctx, list.Get<AstPrimarySecondaryNone>(0));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet3(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 4))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet5(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_availability_group_option_set : 
        ///    AUTOMATED_BACKUP_PREFERENCE EQUAL primary_secondary_none 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet(ParserRuleContext ctx, AstPrimarySecondaryNone primarySecondaryNone)
        {
            AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet1 result = new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet1(ctx, primarySecondaryNone);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_option_set : 
        ///    FAILURE_CONDITION_LEVEL EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet2 result = new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_option_set : 
        ///    DB_FAILOVER EQUAL on_off 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet4 result = new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet4(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// broker_local_service_name
    /// 	 : LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?  id_ | ANY)  COMMA?
    /// </summary>
    public abstract partial class AstBrokerLocalServiceName : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?  id_ | ANY)  COMMA?\r\n";
        
        private static string _ruleName = "broker_local_service_name";
        
        /// <summary>
        /// broker_local_service_name : LOCAL_SERVICE_NAME EQUAL DOUBLE_FORWARD_SLASH? id_ COMMA? 
        /// </summary>
        public partial class AstBrokerLocalServiceName1 : AstBrokerLocalServiceName
        {
            
            private static string _ruleName1 = "broker_local_service_name";
            
            private AstId _id;
            
            internal AstBrokerLocalServiceName1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBrokerLocalServiceName(this);
            }
        }
        /// <summary>
        /// broker_local_service_name : LOCAL_SERVICE_NAME EQUAL ANY COMMA? 
        /// </summary>
        public partial class AstBrokerLocalServiceName2 : AstBrokerLocalServiceName
        {
            
            private static string _ruleName1 = "broker_local_service_name";
            
            internal AstBrokerLocalServiceName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBrokerLocalServiceName(this);
            }
        }
        

        
        internal AstBrokerLocalServiceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBrokerLocalServiceName(Position p) : 
                base(p)
        {
        }
        
        internal AstBrokerLocalServiceName(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBrokerLocalServiceName Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBrokerLocalServiceName.AstBrokerLocalServiceName1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstBrokerLocalServiceName.AstBrokerLocalServiceName2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// broker_local_service_name : 
        ///    LOCAL_SERVICE_NAME EQUAL DOUBLE_FORWARD_SLASH? id_ COMMA? 
        /// </summary>
        public static AstBrokerLocalServiceName BrokerLocalServiceName(ParserRuleContext ctx, AstId id)
        {
            AstBrokerLocalServiceName.AstBrokerLocalServiceName1 result = new AstBrokerLocalServiceName.AstBrokerLocalServiceName1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// broker_local_service_name : 
        ///    LOCAL_SERVICE_NAME EQUAL ANY COMMA? 
        /// </summary>
        public static AstBrokerLocalServiceName BrokerLocalServiceName(ParserRuleContext ctx)
        {
            AstBrokerLocalServiceName.AstBrokerLocalServiceName2 result = new AstBrokerLocalServiceName.AstBrokerLocalServiceName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// id_any
    /// 	 : id_
    /// 	 | ANY
    /// </summary>
    public abstract partial class AstIdAny : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "id_\r\n | ANY\r\n";
        
        private static string _ruleName = "id_any";
        
        /// <summary>
        /// id_any : id_ 
        /// </summary>
        public partial class AstIdAny1 : AstIdAny
        {
            
            private static string _ruleName1 = "id_any";
            
            private AstId _id;
            
            internal AstIdAny1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdAny(this);
            }
        }
        /// <summary>
        /// id_any : ANY 
        /// </summary>
        public partial class AstIdAny2 : AstIdAny
        {
            
            private static string _ruleName1 = "id_any";
            
            internal AstIdAny2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdAny(this);
            }
        }
        

        
        internal AstIdAny(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIdAny(Position p) : 
                base(p)
        {
        }
        
        internal AstIdAny(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIdAny Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIdAny.AstIdAny1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstIdAny.AstIdAny2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// id_any : 
        ///    id_ 
        /// </summary>
        public static AstIdAny IdAny(ParserRuleContext ctx, AstId id)
        {
            AstIdAny.AstIdAny1 result = new AstIdAny.AstIdAny1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// id_any : 
        ///    ANY 
        /// </summary>
        public static AstIdAny IdAny(ParserRuleContext ctx)
        {
            AstIdAny.AstIdAny2 result = new AstIdAny.AstIdAny2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// stringtext_any
    /// 	 : id_
    /// 	 | ANY
    /// </summary>
    public abstract partial class AstStringtextAny : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "id_\r\n | ANY\r\n";
        
        private static string _ruleName = "stringtext_any";
        
        /// <summary>
        /// stringtext_any : id_ 
        /// </summary>
        public partial class AstStringtextAny1 : AstStringtextAny
        {
            
            private static string _ruleName1 = "stringtext_any";
            
            private AstId _id;
            
            internal AstStringtextAny1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringtextAny(this);
            }
        }
        /// <summary>
        /// stringtext_any : ANY 
        /// </summary>
        public partial class AstStringtextAny2 : AstStringtextAny
        {
            
            private static string _ruleName1 = "stringtext_any";
            
            internal AstStringtextAny2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringtextAny(this);
            }
        }
        

        
        internal AstStringtextAny(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringtextAny(Position p) : 
                base(p)
        {
        }
        
        internal AstStringtextAny(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstStringtextAny Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstStringtextAny.AstStringtextAny1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstStringtextAny.AstStringtextAny2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// stringtext_any : 
        ///    id_ 
        /// </summary>
        public static AstStringtextAny StringtextAny(ParserRuleContext ctx, AstId id)
        {
            AstStringtextAny.AstStringtextAny1 result = new AstStringtextAny.AstStringtextAny1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// stringtext_any : 
        ///    ANY 
        /// </summary>
        public static AstStringtextAny StringtextAny(ParserRuleContext ctx)
        {
            AstStringtextAny.AstStringtextAny2 result = new AstStringtextAny.AstStringtextAny2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// drop_broker_priority
    /// 	 : DROP  BROKER  PRIORITY  ConversationPriorityName = id_
    /// </summary>
    public partial class AstDropBrokerPriority : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private AstId _ConversationPriorityName;
        
        private static string _ruleValue = "DROP  BROKER  PRIORITY  ConversationPriorityName = id_\r\n";
        
        private static string _ruleName = "drop_broker_priority";
        
        internal AstDropBrokerPriority(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropBrokerPriority(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropBrokerPriority(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropBrokerPriority(ParserRuleContext ctx, AstId conversationPriorityName) : 
                base(ctx)
        {
            _ConversationPriorityName = conversationPriorityName;
        }
        
        public virtual AstId Conversationpriorityname
        {
            get
            {
                return _ConversationPriorityName;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBrokerPriority(this);
        }
        
        public static AstDropBrokerPriority Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropBrokerPriority(ctx, list.Get<AstId>(0));
        }
        
        /// <summary>
        /// drop_broker_priority : 
        ///    DROP BROKER PRIORITY ConversationPriorityName=id_ 
        /// </summary>
        public static AstDropBrokerPriority DropBrokerPriority(ParserRuleContext ctx, AstId conversationPriorityName)
        {
            AstDropBrokerPriority result = new AstDropBrokerPriority(ctx, conversationPriorityName);
            return result;
        }
    }
    
    /// <summary>
    /// drop_contract
    /// 	 : DROP  CONTRACT  dropped_contract_name = id_
    /// </summary>
    public partial class AstDropContract : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private AstId _droppedContractName;
        
        private static string _ruleValue = "DROP  CONTRACT  dropped_contract_name = id_\r\n";
        
        private static string _ruleName = "drop_contract";
        
        internal AstDropContract(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropContract(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropContract(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropContract(ParserRuleContext ctx, AstId droppedContractName) : 
                base(ctx)
        {
            _droppedContractName = droppedContractName;
        }
        
        public virtual AstId DroppedContractName
        {
            get
            {
                return _droppedContractName;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropContract(this);
        }
        
        public static AstDropContract Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropContract(ctx, list.Get<AstId>(0));
        }
        
        /// <summary>
        /// drop_contract : 
        ///    DROP CONTRACT dropped_contract_name=id_ 
        /// </summary>
        public static AstDropContract DropContract(ParserRuleContext ctx, AstId droppedContractName)
        {
            AstDropContract result = new AstDropContract(ctx, droppedContractName);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database
    /// 	 : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+
    /// </summary>
    public partial class AstDropDatabase : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseId), false, false, "database_id"))));
        
        private AstDatabaseId _databaseId;
        
        private static string _ruleValue = "DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+\r\n";
        
        private static string _ruleName = "drop_database";
        
        internal AstDropDatabase(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabase(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabase(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropDatabase(ParserRuleContext ctx, AstDatabaseId databaseId) : 
                base(ctx)
        {
            _databaseId = databaseId;
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return _databaseId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabase(this);
        }
        
        public static AstDropDatabase Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropDatabase(ctx, list.Get<AstDatabaseId>(0));
        }
        
        /// <summary>
        /// drop_database : 
        ///    DROP DATABASE IF EXISTS COMMA? database_id 
        /// </summary>
        public static AstDropDatabase DropDatabase(ParserRuleContext ctx, AstDatabaseId databaseId)
        {
            AstDropDatabase result = new AstDropDatabase(ctx, databaseId);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database_encryption_key
    /// 	 : DROP  DATABASE  ENCRYPTION  KEY
    /// </summary>
    public partial class AstDropDatabaseEncryptionKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "DROP  DATABASE  ENCRYPTION  KEY\r\n";
        
        private static string _ruleName = "drop_database_encryption_key";
        
        internal AstDropDatabaseEncryptionKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseEncryptionKey(this);
        }
        
        public static AstDropDatabaseEncryptionKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropDatabaseEncryptionKey(ctx);
        }
        
        /// <summary>
        /// drop_database_encryption_key : 
        ///    DROP DATABASE ENCRYPTION KEY 
        /// </summary>
        public static AstDropDatabaseEncryptionKey DropDatabaseEncryptionKey(ParserRuleContext ctx)
        {
            AstDropDatabaseEncryptionKey result = new AstDropDatabaseEncryptionKey(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// drop_default
    /// 	 : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)
    /// </summary>
    public partial class AstDropDefault : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDefaultRef), false, false, "default_ref"))));
        
        private AstDefaultRef _defaultRef;
        
        private static string _ruleValue = "DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)\r\n";
        
        private static string _ruleName = "drop_default";
        
        internal AstDropDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropDefault(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDefault(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropDefault(ParserRuleContext ctx, AstDefaultRef defaultRef) : 
                base(ctx)
        {
            _defaultRef = defaultRef;
        }
        
        public virtual AstDefaultRef DefaultRef
        {
            get
            {
                return _defaultRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDefault(this);
        }
        
        public static AstDropDefault Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropDefault(ctx, list.Get<AstDefaultRef>(0));
        }
        
        /// <summary>
        /// drop_default : 
        ///    DROP DEFAULT IF EXISTS COMMA? default_ref 
        /// </summary>
        public static AstDropDefault DropDefault(ParserRuleContext ctx, AstDefaultRef defaultRef)
        {
            AstDropDefault result = new AstDropDefault(ctx, defaultRef);
            return result;
        }
    }
    
    /// <summary>
    /// event_notification_on
    /// 	 : server_database
    /// 	 | QUEUE  queue_id
    /// </summary>
    public abstract partial class AstEventNotificationOn : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerDatabase), false, false, "server_database")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueueId), false, false, "queue_id"))));
        
        private static string _ruleValue = "server_database\r\n | QUEUE  queue_id\r\n";
        
        private static string _ruleName = "event_notification_on";
        
        /// <summary>
        /// event_notification_on : server_database 
        /// </summary>
        public partial class AstEventNotificationOn1 : AstEventNotificationOn
        {
            
            private static string _ruleName1 = "event_notification_on";
            
            private AstServerDatabase _serverDatabase;
            
            internal AstEventNotificationOn1(ParserRuleContext ctx, AstServerDatabase serverDatabase) : 
                    base(ctx)
            {
                _serverDatabase = serverDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerDatabase ServerDatabase
            {
                get
                {
                    return _serverDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventNotificationOn(this);
            }
        }
        /// <summary>
        /// event_notification_on : QUEUE queue_id 
        /// </summary>
        public partial class AstEventNotificationOn2 : AstEventNotificationOn
        {
            
            private static string _ruleName1 = "event_notification_on";
            
            private AstQueueId _queueId;
            
            internal AstEventNotificationOn2(ParserRuleContext ctx, AstQueueId queueId) : 
                    base(ctx)
            {
                _queueId = queueId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueueId QueueId
            {
                get
                {
                    return _queueId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventNotificationOn(this);
            }
        }
        

        
        internal AstEventNotificationOn(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventNotificationOn(Position p) : 
                base(p)
        {
        }
        
        internal AstEventNotificationOn(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEventNotificationOn Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEventNotificationOn.AstEventNotificationOn1(ctx, list.Get<AstServerDatabase>(0));
            }
            if ((index == 2))
            {
                return new AstEventNotificationOn.AstEventNotificationOn2(ctx, list.Get<AstQueueId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// event_notification_on : 
        ///    server_database 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(ParserRuleContext ctx, AstServerDatabase serverDatabase)
        {
            AstEventNotificationOn.AstEventNotificationOn1 result = new AstEventNotificationOn.AstEventNotificationOn1(ctx, serverDatabase);
            return result;
        }
        
        /// <summary>
        /// event_notification_on : 
        ///    QUEUE queue_id 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(ParserRuleContext ctx, AstQueueId queueId)
        {
            AstEventNotificationOn.AstEventNotificationOn2 result = new AstEventNotificationOn.AstEventNotificationOn2(ctx, queueId);
            return result;
        }
    }
    
    /// <summary>
    /// drop_master_key
    /// 	 : DROP  MASTER  KEY
    /// </summary>
    public partial class AstDropMasterKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "DROP  MASTER  KEY\r\n";
        
        private static string _ruleName = "drop_master_key";
        
        internal AstDropMasterKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropMasterKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropMasterKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMasterKey(this);
        }
        
        public static AstDropMasterKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropMasterKey(ctx);
        }
        
        /// <summary>
        /// drop_master_key : 
        ///    DROP MASTER KEY 
        /// </summary>
        public static AstDropMasterKey DropMasterKey(ParserRuleContext ctx)
        {
            AstDropMasterKey result = new AstDropMasterKey(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// drop_rule
    /// 	 : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?
    /// </summary>
    public partial class AstDropRule : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaRuleRef), false, false, "schema_rule_ref"))));
        
        private AstSchemaRuleRef _schemaRuleRef;
        
        private static string _ruleValue = "DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?\r\n";
        
        private static string _ruleName = "drop_rule";
        
        internal AstDropRule(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropRule(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropRule(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropRule(ParserRuleContext ctx, AstSchemaRuleRef schemaRuleRef) : 
                base(ctx)
        {
            _schemaRuleRef = schemaRuleRef;
        }
        
        public virtual AstSchemaRuleRef SchemaRuleRef
        {
            get
            {
                return _schemaRuleRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRule(this);
        }
        
        public static AstDropRule Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropRule(ctx, list.Get<AstSchemaRuleRef>(0));
        }
        
        /// <summary>
        /// drop_rule : 
        ///    DROP RULE IF EXISTS COMMA? schema_rule_ref 
        /// </summary>
        public static AstDropRule DropRule(ParserRuleContext ctx, AstSchemaRuleRef schemaRuleRef)
        {
            AstDropRule result = new AstDropRule(ctx, schemaRuleRef);
            return result;
        }
    }
    
    /// <summary>
    /// drop_sequence
    /// 	 : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequence_ref)?
    /// </summary>
    public partial class AstDropSequence : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseSchemaSequenceRef), false, false, "database_schema_sequence_ref"))));
        
        private AstDatabaseSchemaSequenceRef _databaseSchemaSequenceRef;
        
        private static string _ruleValue = "DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequence_ref)?\r\n";
        
        private static string _ruleName = "drop_sequence";
        
        internal AstDropSequence(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropSequence(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropSequence(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropSequence(ParserRuleContext ctx, AstDatabaseSchemaSequenceRef databaseSchemaSequenceRef) : 
                base(ctx)
        {
            _databaseSchemaSequenceRef = databaseSchemaSequenceRef;
        }
        
        public virtual AstDatabaseSchemaSequenceRef DatabaseSchemaSequenceRef
        {
            get
            {
                return _databaseSchemaSequenceRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSequence(this);
        }
        
        public static AstDropSequence Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropSequence(ctx, list.Get<AstDatabaseSchemaSequenceRef>(0));
        }
        
        /// <summary>
        /// drop_sequence : 
        ///    DROP SEQUENCE IF EXISTS COMMA? database_schema_sequence_ref 
        /// </summary>
        public static AstDropSequence DropSequence(ParserRuleContext ctx, AstDatabaseSchemaSequenceRef databaseSchemaSequenceRef)
        {
            AstDropSequence result = new AstDropSequence(ctx, databaseSchemaSequenceRef);
            return result;
        }
    }
    
    /// <summary>
    /// drop_signature_by
    /// 	 : CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstDropSignatureBy : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCertificateId), false, false, "certificate_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAsymKeyId), false, false, "asym_key_id"))));
        
        private static string _ruleValue = "CERTIFICATE  certificate_id\r\n | ASYMMETRIC  KEY  asym_key_id\r\n";
        
        private static string _ruleName = "drop_signature_by";
        
        /// <summary>
        /// drop_signature_by : CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstDropSignatureBy1 : AstDropSignatureBy
        {
            
            private static string _ruleName1 = "drop_signature_by";
            
            private AstCertificateId _certificateId;
            
            internal AstDropSignatureBy1(ParserRuleContext ctx, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _certificateId = certificateId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDropSignatureBy(this);
            }
        }
        /// <summary>
        /// drop_signature_by : ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstDropSignatureBy2 : AstDropSignatureBy
        {
            
            private static string _ruleName1 = "drop_signature_by";
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstDropSignatureBy2(ParserRuleContext ctx, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDropSignatureBy(this);
            }
        }
        

        
        internal AstDropSignatureBy(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropSignatureBy(Position p) : 
                base(p)
        {
        }
        
        internal AstDropSignatureBy(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDropSignatureBy Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDropSignatureBy.AstDropSignatureBy1(ctx, list.Get<AstCertificateId>(0));
            }
            if ((index == 2))
            {
                return new AstDropSignatureBy.AstDropSignatureBy2(ctx, list.Get<AstAsymKeyId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// drop_signature_by : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstDropSignatureBy DropSignatureBy(ParserRuleContext ctx, AstCertificateId certificateId)
        {
            AstDropSignatureBy.AstDropSignatureBy1 result = new AstDropSignatureBy.AstDropSignatureBy1(ctx, certificateId);
            return result;
        }
        
        /// <summary>
        /// drop_signature_by : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstDropSignatureBy DropSignatureBy(ParserRuleContext ctx, AstAsymKeyId asymKeyId)
        {
            AstDropSignatureBy.AstDropSignatureBy2 result = new AstDropSignatureBy.AstDropSignatureBy2(ctx, asymKeyId);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : schema_trigger_refs
    /// 	 | ALL
    /// </summary>
    public abstract partial class AstTriggerName : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaTriggerRefs), false, false, "schema_trigger_refs"))));
        
        private static string _ruleValue = "schema_trigger_refs\r\n | ALL\r\n";
        
        private static string _ruleName = "trigger_name";
        
        /// <summary>
        /// trigger_name : schema_trigger_refs 
        /// </summary>
        public partial class AstTriggerName1 : AstTriggerName
        {
            
            private static string _ruleName1 = "trigger_name";
            
            private AstSchemaTriggerRefs _schemaTriggerRefs;
            
            internal AstTriggerName1(ParserRuleContext ctx, AstSchemaTriggerRefs schemaTriggerRefs) : 
                    base(ctx)
            {
                _schemaTriggerRefs = schemaTriggerRefs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaTriggerRefs SchemaTriggerRefs
            {
                get
                {
                    return _schemaTriggerRefs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerName(this);
            }
        }
        /// <summary>
        /// trigger_name : ALL 
        /// </summary>
        public partial class AstTriggerName2 : AstTriggerName
        {
            
            private static string _ruleName1 = "trigger_name";
            
            internal AstTriggerName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerName(this);
            }
        }
        

        
        internal AstTriggerName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTriggerName(Position p) : 
                base(p)
        {
        }
        
        internal AstTriggerName(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTriggerName Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTriggerName.AstTriggerName1(ctx, list.Get<AstSchemaTriggerRefs>(0));
            }
            if ((index == 2))
            {
                return new AstTriggerName.AstTriggerName2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// trigger_name : 
        ///    schema_trigger_refs 
        /// </summary>
        public static AstTriggerName TriggerName(ParserRuleContext ctx, AstSchemaTriggerRefs schemaTriggerRefs)
        {
            AstTriggerName.AstTriggerName1 result = new AstTriggerName.AstTriggerName1(ctx, schemaTriggerRefs);
            return result;
        }
        
        /// <summary>
        /// trigger_name : 
        ///    ALL 
        /// </summary>
        public static AstTriggerName TriggerName(ParserRuleContext ctx)
        {
            AstTriggerName.AstTriggerName2 result = new AstTriggerName.AstTriggerName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_target
    /// 	 : schema_object_ref
    /// 	 | all_server_database
    /// </summary>
    public abstract partial class AstTriggerTarget : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaObjectRef), false, false, "schema_object_ref")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAllServerDatabase), false, false, "all_server_database"))));
        
        private static string _ruleValue = "schema_object_ref\r\n | all_server_database\r\n";
        
        private static string _ruleName = "trigger_target";
        
        /// <summary>
        /// trigger_target : schema_object_ref 
        /// </summary>
        public partial class AstTriggerTarget1 : AstTriggerTarget
        {
            
            private static string _ruleName1 = "trigger_target";
            
            private AstSchemaObjectRef _schemaObjectRef;
            
            internal AstTriggerTarget1(ParserRuleContext ctx, AstSchemaObjectRef schemaObjectRef) : 
                    base(ctx)
            {
                _schemaObjectRef = schemaObjectRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaObjectRef SchemaObjectRef
            {
                get
                {
                    return _schemaObjectRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerTarget(this);
            }
        }
        /// <summary>
        /// trigger_target : all_server_database 
        /// </summary>
        public partial class AstTriggerTarget2 : AstTriggerTarget
        {
            
            private static string _ruleName1 = "trigger_target";
            
            private AstAllServerDatabase _allServerDatabase;
            
            internal AstTriggerTarget2(ParserRuleContext ctx, AstAllServerDatabase allServerDatabase) : 
                    base(ctx)
            {
                _allServerDatabase = allServerDatabase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAllServerDatabase AllServerDatabase
            {
                get
                {
                    return _allServerDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerTarget(this);
            }
        }
        

        
        internal AstTriggerTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTriggerTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstTriggerTarget(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTriggerTarget Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTriggerTarget.AstTriggerTarget1(ctx, list.Get<AstSchemaObjectRef>(0));
            }
            if ((index == 2))
            {
                return new AstTriggerTarget.AstTriggerTarget2(ctx, list.Get<AstAllServerDatabase>(0));
            }
            return null;
        }
        
        /// <summary>
        /// trigger_target : 
        ///    schema_object_ref 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(ParserRuleContext ctx, AstSchemaObjectRef schemaObjectRef)
        {
            AstTriggerTarget.AstTriggerTarget1 result = new AstTriggerTarget.AstTriggerTarget1(ctx, schemaObjectRef);
            return result;
        }
        
        /// <summary>
        /// trigger_target : 
        ///    all_server_database 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(ParserRuleContext ctx, AstAllServerDatabase allServerDatabase)
        {
            AstTriggerTarget.AstTriggerTarget2 result = new AstTriggerTarget.AstTriggerTarget2(ctx, allServerDatabase);
            return result;
        }
    }
    
    /// <summary>
    /// lock_table_delay
    /// 	 : WAIT  seconds = decimal
    /// 	 | NOWAIT
    /// </summary>
    public abstract partial class AstLockTableDelay : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "WAIT  seconds = decimal\r\n | NOWAIT\r\n";
        
        private static string _ruleName = "lock_table_delay";
        
        /// <summary>
        /// lock_table_delay : WAIT seconds=decimal 
        /// </summary>
        public partial class AstLockTableDelay1 : AstLockTableDelay
        {
            
            private static string _ruleName1 = "lock_table_delay";
            
            private AstDecimal _seconds;
            
            internal AstLockTableDelay1(ParserRuleContext ctx, AstDecimal seconds) : 
                    base(ctx)
            {
                _seconds = seconds;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Seconds
            {
                get
                {
                    return _seconds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLockTableDelay(this);
            }
        }
        /// <summary>
        /// lock_table_delay : NOWAIT 
        /// </summary>
        public partial class AstLockTableDelay2 : AstLockTableDelay
        {
            
            private static string _ruleName1 = "lock_table_delay";
            
            internal AstLockTableDelay2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLockTableDelay(this);
            }
        }
        

        
        internal AstLockTableDelay(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLockTableDelay(Position p) : 
                base(p)
        {
        }
        
        internal AstLockTableDelay(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstLockTableDelay Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstLockTableDelay.AstLockTableDelay1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstLockTableDelay.AstLockTableDelay2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// lock_table_delay : 
        ///    WAIT seconds=decimal 
        /// </summary>
        public static AstLockTableDelay LockTableDelay(ParserRuleContext ctx, AstDecimal seconds)
        {
            AstLockTableDelay.AstLockTableDelay1 result = new AstLockTableDelay.AstLockTableDelay1(ctx, seconds);
            return result;
        }
        
        /// <summary>
        /// lock_table_delay : 
        ///    NOWAIT 
        /// </summary>
        public static AstLockTableDelay LockTableDelay(ParserRuleContext ctx)
        {
            AstLockTableDelay.AstLockTableDelay2 result = new AstLockTableDelay.AstLockTableDelay2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_column_master_key
    /// 	 : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstCreateColumnMasterKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private AstId _keyName;
        
        private AstStringtext _keyStoreProviderName;
        
        private AstStringtext _keyPath;
        
        private static string _ruleValue = "CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER" +
            "_NAME  EQUAL  key_store_provider_name = stringtext  COMMA  KEY_PATH  EQUAL  key_" +
            "path = stringtext  RR_BRACKET\r\n";
        
        private static string _ruleName = "create_column_master_key";
        
        internal AstCreateColumnMasterKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateColumnMasterKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateColumnMasterKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateColumnMasterKey(ParserRuleContext ctx, AstId keyName, AstStringtext keyStoreProviderName, AstStringtext keyPath) : 
                base(ctx)
        {
            _keyName = keyName;
            _keyStoreProviderName = keyStoreProviderName;
            _keyPath = keyPath;
        }
        
        public virtual AstId KeyName
        {
            get
            {
                return _keyName;
            }
        }
        
        public virtual AstStringtext KeyStoreProviderName
        {
            get
            {
                return _keyStoreProviderName;
            }
        }
        
        public virtual AstStringtext KeyPath
        {
            get
            {
                return _keyPath;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnMasterKey(this);
        }
        
        public static AstCreateColumnMasterKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCreateColumnMasterKey(ctx, list.Get<AstId>(0), list.Get<AstStringtext>(1), list.Get<AstStringtext>(2));
        }
        
        /// <summary>
        /// create_column_master_key : 
        ///    CREATE COLUMN MASTER KEY key_name=id_ WITH ( KEY_STORE_PROVIDER_NAME EQUAL key_store_provider_name=stringtext , KEY_PATH EQUAL key_path=stringtext ) 
        /// </summary>
        public static AstCreateColumnMasterKey CreateColumnMasterKey(ParserRuleContext ctx, AstId keyName, AstStringtext keyStoreProviderName, AstStringtext keyPath)
        {
            AstCreateColumnMasterKey result = new AstCreateColumnMasterKey(ctx, keyName, keyStoreProviderName, keyPath);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_with
    /// 	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET
    /// </summary>
    public partial class AstCreateOrAlterEventSessionWith : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSessionArgMaxMemory), false, false, "session_arg_max_memory"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSessionArgEventRetentionMode), false, false, "session_arg_event_retention_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSessionArgMaxDispatch), false, false, "session_arg_max_dispatch"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSessionArgMaxEventSize), false, false, "session_arg_max_event_size"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSessionArgMemoryPartition), false, false, "session_arg_memory_partition"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSessionArgTrackCausality), false, false, "session_arg_track_causality"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSessionArgStartupState), false, false, "session_arg_startup_state"))));
        
        private AstSessionArgMaxMemory _sessionArgMaxMemory;
        
        private AstSessionArgEventRetentionMode _sessionArgEventRetentionMode;
        
        private AstSessionArgMaxDispatch _sessionArgMaxDispatch;
        
        private AstSessionArgMaxEventSize _sessionArgMaxEventSize;
        
        private AstSessionArgMemoryPartition _sessionArgMemoryPartition;
        
        private AstSessionArgTrackCausality _sessionArgTrackCausality;
        
        private AstSessionArgStartupState _sessionArgStartupState;
        
        private static string _ruleValue = @"WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET
";
        
        private static string _ruleName = "create_or_alter_event_session_with";
        
        internal AstCreateOrAlterEventSessionWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(ParserRuleContext ctx, AstSessionArgMaxMemory sessionArgMaxMemory, AstSessionArgEventRetentionMode sessionArgEventRetentionMode, AstSessionArgMaxDispatch sessionArgMaxDispatch, AstSessionArgMaxEventSize sessionArgMaxEventSize, AstSessionArgMemoryPartition sessionArgMemoryPartition, AstSessionArgTrackCausality sessionArgTrackCausality, AstSessionArgStartupState sessionArgStartupState) : 
                base(ctx)
        {
            _sessionArgMaxMemory = sessionArgMaxMemory;
            _sessionArgEventRetentionMode = sessionArgEventRetentionMode;
            _sessionArgMaxDispatch = sessionArgMaxDispatch;
            _sessionArgMaxEventSize = sessionArgMaxEventSize;
            _sessionArgMemoryPartition = sessionArgMemoryPartition;
            _sessionArgTrackCausality = sessionArgTrackCausality;
            _sessionArgStartupState = sessionArgStartupState;
        }
        
        public virtual AstSessionArgMaxMemory SessionArgMaxMemory
        {
            get
            {
                return _sessionArgMaxMemory;
            }
        }
        
        public virtual AstSessionArgEventRetentionMode SessionArgEventRetentionMode
        {
            get
            {
                return _sessionArgEventRetentionMode;
            }
        }
        
        public virtual AstSessionArgMaxDispatch SessionArgMaxDispatch
        {
            get
            {
                return _sessionArgMaxDispatch;
            }
        }
        
        public virtual AstSessionArgMaxEventSize SessionArgMaxEventSize
        {
            get
            {
                return _sessionArgMaxEventSize;
            }
        }
        
        public virtual AstSessionArgMemoryPartition SessionArgMemoryPartition
        {
            get
            {
                return _sessionArgMemoryPartition;
            }
        }
        
        public virtual AstSessionArgTrackCausality SessionArgTrackCausality
        {
            get
            {
                return _sessionArgTrackCausality;
            }
        }
        
        public virtual AstSessionArgStartupState SessionArgStartupState
        {
            get
            {
                return _sessionArgStartupState;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionWith(this);
        }
        
        public static AstCreateOrAlterEventSessionWith Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCreateOrAlterEventSessionWith(ctx, list.Get<AstSessionArgMaxMemory>(0), list.Get<AstSessionArgEventRetentionMode>(1), list.Get<AstSessionArgMaxDispatch>(2), list.Get<AstSessionArgMaxEventSize>(3), list.Get<AstSessionArgMemoryPartition>(4), list.Get<AstSessionArgTrackCausality>(5), list.Get<AstSessionArgStartupState>(6));
        }
        
        /// <summary>
        /// create_or_alter_event_session_with : 
        ///    WITH ( COMMA? session_arg_max_memory COMMA? session_arg_event_retention_mode COMMA? session_arg_max_dispatch COMMA? session_arg_max_event_size COMMA? session_arg_memory_partition COMMA? session_arg_track_causality COMMA? session_arg_startup_state ) 
        /// </summary>
        public static AstCreateOrAlterEventSessionWith CreateOrAlterEventSessionWith(ParserRuleContext ctx, AstSessionArgMaxMemory sessionArgMaxMemory, AstSessionArgEventRetentionMode sessionArgEventRetentionMode, AstSessionArgMaxDispatch sessionArgMaxDispatch, AstSessionArgMaxEventSize sessionArgMaxEventSize, AstSessionArgMemoryPartition sessionArgMemoryPartition, AstSessionArgTrackCausality sessionArgTrackCausality, AstSessionArgStartupState sessionArgStartupState)
        {
            AstCreateOrAlterEventSessionWith result = new AstCreateOrAlterEventSessionWith(ctx, sessionArgMaxMemory, sessionArgEventRetentionMode, sessionArgMaxDispatch, sessionArgMaxEventSize, sessionArgMemoryPartition, sessionArgTrackCausality, sessionArgStartupState);
            return result;
        }
    }
    
    /// <summary>
    /// session_arg_max_dispatch
    /// 	 : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | INFINITE)
    /// </summary>
    public abstract partial class AstSessionArgMaxDispatch : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | INFINITE)\r\n";
        
        private static string _ruleName = "session_arg_max_dispatch";
        
        /// <summary>
        /// session_arg_max_dispatch : MAX_DISPATCH_LATENCY EQUAL decimal SECONDS 
        /// </summary>
        public partial class AstSessionArgMaxDispatch1 : AstSessionArgMaxDispatch
        {
            
            private static string _ruleName1 = "session_arg_max_dispatch";
            
            private AstDecimal _decimal;
            
            internal AstSessionArgMaxDispatch1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSessionArgMaxDispatch(this);
            }
        }
        /// <summary>
        /// session_arg_max_dispatch : MAX_DISPATCH_LATENCY EQUAL INFINITE 
        /// </summary>
        public partial class AstSessionArgMaxDispatch2 : AstSessionArgMaxDispatch
        {
            
            private static string _ruleName1 = "session_arg_max_dispatch";
            
            internal AstSessionArgMaxDispatch2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSessionArgMaxDispatch(this);
            }
        }
        

        
        internal AstSessionArgMaxDispatch(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSessionArgMaxDispatch(Position p) : 
                base(p)
        {
        }
        
        internal AstSessionArgMaxDispatch(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSessionArgMaxDispatch Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// session_arg_max_dispatch : 
        ///    MAX_DISPATCH_LATENCY EQUAL decimal SECONDS 
        /// </summary>
        public static AstSessionArgMaxDispatch SessionArgMaxDispatch(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSessionArgMaxDispatch.AstSessionArgMaxDispatch1 result = new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// session_arg_max_dispatch : 
        ///    MAX_DISPATCH_LATENCY EQUAL INFINITE 
        /// </summary>
        public static AstSessionArgMaxDispatch SessionArgMaxDispatch(ParserRuleContext ctx)
        {
            AstSessionArgMaxDispatch.AstSessionArgMaxDispatch2 result = new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// target_parameter_value
    /// 	 : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)
    /// </summary>
    public abstract partial class AstTargetParameterValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "(LR_BRACKET?  decimal  RR_BRACKET? | stringtext)\r\n";
        
        private static string _ruleName = "target_parameter_value";
        
        /// <summary>
        /// target_parameter_value : LR_BRACKET? decimal RR_BRACKET? 
        /// </summary>
        public partial class AstTargetParameterValue1 : AstTargetParameterValue
        {
            
            private static string _ruleName1 = "target_parameter_value";
            
            private AstDecimal _decimal;
            
            internal AstTargetParameterValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTargetParameterValue(this);
            }
        }
        /// <summary>
        /// target_parameter_value : stringtext 
        /// </summary>
        public partial class AstTargetParameterValue2 : AstTargetParameterValue
        {
            
            private static string _ruleName1 = "target_parameter_value";
            
            private AstStringtext _stringtext;
            
            internal AstTargetParameterValue2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTargetParameterValue(this);
            }
        }
        

        
        internal AstTargetParameterValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTargetParameterValue(Position p) : 
                base(p)
        {
        }
        
        internal AstTargetParameterValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTargetParameterValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTargetParameterValue.AstTargetParameterValue1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstTargetParameterValue.AstTargetParameterValue2(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// target_parameter_value : 
        ///    LR_BRACKET? decimal RR_BRACKET? 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTargetParameterValue.AstTargetParameterValue1 result = new AstTargetParameterValue.AstTargetParameterValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// target_parameter_value : 
        ///    stringtext 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstTargetParameterValue.AstTargetParameterValue2 result = new AstTargetParameterValue.AstTargetParameterValue2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_expression
    /// 	 : (COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+
    /// </summary>
    public abstract partial class AstEventSessionPredicateExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAndOr), true, false, "and_or"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEventSessionPredicateFactor), false, false, "event_session_predicate_factor")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAndOr), true, false, "and_or"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEventSessionPredicateExpression), false, false, "event_session_predicate_expression"))));
        
        private static string _ruleValue = "(COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_sessi" +
            "on_predicate_expression  RR_BRACKET))+\r\n";
        
        private static string _ruleName = "event_session_predicate_expression";
        
        /// <summary>
        /// event_session_predicate_expression : COMMA? and_or? NOT? event_session_predicate_factor 
        /// </summary>
        public partial class AstEventSessionPredicateExpression1 : AstEventSessionPredicateExpression
        {
            
            private static string _ruleName1 = "event_session_predicate_expression";
            
            private AstAndOr? _andOr;
            
            private AstEventSessionPredicateFactor _eventSessionPredicateFactor;
            
            internal AstEventSessionPredicateExpression1(ParserRuleContext ctx, AstAndOr? andOr, AstEventSessionPredicateFactor eventSessionPredicateFactor) : 
                    base(ctx)
            {
                _andOr = andOr;
                _eventSessionPredicateFactor = eventSessionPredicateFactor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAndOr? AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstEventSessionPredicateFactor EventSessionPredicateFactor
            {
                get
                {
                    return _eventSessionPredicateFactor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateExpression(this);
            }
        }
        /// <summary>
        /// event_session_predicate_expression : COMMA? and_or? NOT? LR_BRACKET event_session_predicate_expression RR_BRACKET 
        /// </summary>
        public partial class AstEventSessionPredicateExpression2 : AstEventSessionPredicateExpression
        {
            
            private static string _ruleName1 = "event_session_predicate_expression";
            
            private AstAndOr? _andOr;
            
            private AstEventSessionPredicateExpression _eventSessionPredicateExpression;
            
            internal AstEventSessionPredicateExpression2(ParserRuleContext ctx, AstAndOr? andOr, AstEventSessionPredicateExpression eventSessionPredicateExpression) : 
                    base(ctx)
            {
                _andOr = andOr;
                _eventSessionPredicateExpression = eventSessionPredicateExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAndOr? AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstEventSessionPredicateExpression EventSessionPredicateExpression
            {
                get
                {
                    return _eventSessionPredicateExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateExpression(this);
            }
        }
        

        
        internal AstEventSessionPredicateExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEventSessionPredicateExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression1(ctx, list.Get<AstAndOr?>(0), list.Get<AstEventSessionPredicateFactor>(1));
            }
            if ((index == 2))
            {
                return new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression2(ctx, list.Get<AstAndOr?>(0), list.Get<AstEventSessionPredicateExpression>(1));
            }
            return null;
        }
        
        /// <summary>
        /// event_session_predicate_expression : 
        ///    COMMA? and_or? NOT? event_session_predicate_factor 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(ParserRuleContext ctx, AstAndOr andOr, AstEventSessionPredicateFactor eventSessionPredicateFactor)
        {
            AstEventSessionPredicateExpression.AstEventSessionPredicateExpression1 result = new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression1(ctx, andOr, eventSessionPredicateFactor);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_expression : 
        ///    COMMA? and_or? NOT? ( event_session_predicate_expression ) 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(ParserRuleContext ctx, AstAndOr andOr, AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            AstEventSessionPredicateExpression.AstEventSessionPredicateExpression2 result = new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression2(ctx, andOr, eventSessionPredicateExpression);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_factor
    /// 	 : event_session_predicate_leaf
    /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstEventSessionPredicateFactor : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEventSessionPredicateLeaf), false, false, "event_session_predicate_leaf")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstEventSessionPredicateExpression), false, false, "event_session_predicate_expression"))));
        
        private static string _ruleValue = "event_session_predicate_leaf\r\n | LR_BRACKET  event_session_predicate_expression  " +
            "RR_BRACKET\r\n";
        
        private static string _ruleName = "event_session_predicate_factor";
        
        /// <summary>
        /// event_session_predicate_factor : event_session_predicate_leaf 
        /// </summary>
        public partial class AstEventSessionPredicateFactor1 : AstEventSessionPredicateFactor
        {
            
            private static string _ruleName1 = "event_session_predicate_factor";
            
            private AstEventSessionPredicateLeaf _eventSessionPredicateLeaf;
            
            internal AstEventSessionPredicateFactor1(ParserRuleContext ctx, AstEventSessionPredicateLeaf eventSessionPredicateLeaf) : 
                    base(ctx)
            {
                _eventSessionPredicateLeaf = eventSessionPredicateLeaf;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEventSessionPredicateLeaf EventSessionPredicateLeaf
            {
                get
                {
                    return _eventSessionPredicateLeaf;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateFactor(this);
            }
        }
        /// <summary>
        /// event_session_predicate_factor : LR_BRACKET event_session_predicate_expression RR_BRACKET 
        /// </summary>
        public partial class AstEventSessionPredicateFactor2 : AstEventSessionPredicateFactor
        {
            
            private static string _ruleName1 = "event_session_predicate_factor";
            
            private AstEventSessionPredicateExpression _eventSessionPredicateExpression;
            
            internal AstEventSessionPredicateFactor2(ParserRuleContext ctx, AstEventSessionPredicateExpression eventSessionPredicateExpression) : 
                    base(ctx)
            {
                _eventSessionPredicateExpression = eventSessionPredicateExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEventSessionPredicateExpression EventSessionPredicateExpression
            {
                get
                {
                    return _eventSessionPredicateExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateFactor(this);
            }
        }
        

        
        internal AstEventSessionPredicateFactor(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateFactor(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateFactor(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEventSessionPredicateFactor Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1(ctx, list.Get<AstEventSessionPredicateLeaf>(0));
            }
            if ((index == 2))
            {
                return new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2(ctx, list.Get<AstEventSessionPredicateExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// event_session_predicate_factor : 
        ///    event_session_predicate_leaf 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(ParserRuleContext ctx, AstEventSessionPredicateLeaf eventSessionPredicateLeaf)
        {
            AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1 result = new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1(ctx, eventSessionPredicateLeaf);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_factor : 
        ///    ( event_session_predicate_expression ) 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(ParserRuleContext ctx, AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2 result = new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2(ctx, eventSessionPredicateExpression);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf
    /// 	 : event_field_id
    /// 	 | event_session_id_source1  event_session_predicate_leaf_ope  decimal_string
    /// 	 | source1 = full_predicate_source_ref  LR_BRACKET  event_session_id_source2  RR_BRACKET
    /// </summary>
    public abstract partial class AstEventSessionPredicateLeaf : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstEventSessionIdSource1), false, false, "event_session_id_source1"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEventSessionPredicateLeafOpe), false, false, "event_session_predicate_leaf_ope"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalString), false, false, "decimal_string")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullPredicateSourceRef), false, false, "full_predicate_source_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEventSessionIdSource2), false, false, "event_session_id_source2")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEventFieldId), false, false, "event_field_id"))));
        
        private static string _ruleValue = "event_field_id\r\n | event_session_id_source1  event_session_predicate_leaf_ope  de" +
            "cimal_string\r\n | source1 = full_predicate_source_ref  LR_BRACKET  event_session_" +
            "id_source2  RR_BRACKET\r\n";
        
        private static string _ruleName = "event_session_predicate_leaf";
        
        /// <summary>
        /// event_session_predicate_leaf : event_field_id 
        /// </summary>
        public partial class AstEventSessionPredicateLeaf1 : AstEventSessionPredicateLeaf
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf";
            
            private AstEventFieldId _eventFieldId;
            
            internal AstEventSessionPredicateLeaf1(ParserRuleContext ctx, AstEventFieldId eventFieldId) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf : event_session_id_source1 event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public partial class AstEventSessionPredicateLeaf2 : AstEventSessionPredicateLeaf
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf";
            
            private AstEventSessionIdSource1 _eventSessionIdSource1;
            
            private AstEventSessionPredicateLeafOpe _eventSessionPredicateLeafOpe;
            
            private AstDecimalString _decimalString;
            
            internal AstEventSessionPredicateLeaf2(ParserRuleContext ctx, AstEventSessionIdSource1 eventSessionIdSource1, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _eventSessionIdSource1 = eventSessionIdSource1;
                _eventSessionPredicateLeafOpe = eventSessionPredicateLeafOpe;
                _decimalString = decimalString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEventSessionIdSource1 EventSessionIdSource1
            {
                get
                {
                    return _eventSessionIdSource1;
                }
            }
            
            public virtual AstEventSessionPredicateLeafOpe EventSessionPredicateLeafOpe
            {
                get
                {
                    return _eventSessionPredicateLeafOpe;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf : source1=full_predicate_source_ref LR_BRACKET event_session_id_source2 RR_BRACKET 
        /// </summary>
        public partial class AstEventSessionPredicateLeaf3 : AstEventSessionPredicateLeaf
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf";
            
            private AstFullPredicateSourceRef _source1;
            
            private AstEventSessionIdSource2 _eventSessionIdSource2;
            
            internal AstEventSessionPredicateLeaf3(ParserRuleContext ctx, AstFullPredicateSourceRef source1, AstEventSessionIdSource2 eventSessionIdSource2) : 
                    base(ctx)
            {
                _source1 = source1;
                _eventSessionIdSource2 = eventSessionIdSource2;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullPredicateSourceRef Source1
            {
                get
                {
                    return _source1;
                }
            }
            
            public virtual AstEventSessionIdSource2 EventSessionIdSource2
            {
                get
                {
                    return _eventSessionIdSource2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        

        
        internal AstEventSessionPredicateLeaf(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeaf(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeaf(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEventSessionPredicateLeaf Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1(ctx, list.Get<AstEventFieldId>(0));
            }
            if ((index == 2))
            {
                return new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2(ctx, list.Get<AstEventSessionIdSource1>(0), list.Get<AstEventSessionPredicateLeafOpe>(1), list.Get<AstDecimalString>(2));
            }
            if ((index == 3))
            {
                return new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf3(ctx, list.Get<AstFullPredicateSourceRef>(0), list.Get<AstEventSessionIdSource2>(1));
            }
            return null;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(ParserRuleContext ctx, AstEventFieldId eventFieldId)
        {
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1(ctx, eventFieldId);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    event_session_id_source1 event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(ParserRuleContext ctx, AstEventSessionIdSource1 eventSessionIdSource1, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString)
        {
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2(ctx, eventSessionIdSource1, eventSessionPredicateLeafOpe, decimalString);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    source1=full_predicate_source_ref ( event_session_id_source2 ) 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(ParserRuleContext ctx, AstFullPredicateSourceRef source1, AstEventSessionIdSource2 eventSessionIdSource2)
        {
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf3 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf3(ctx, source1, eventSessionIdSource2);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_id_source1
    /// 	 : event_field_id
    /// 	 | full_predicate_source_ref
    /// </summary>
    public abstract partial class AstEventSessionIdSource1 : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEventFieldId), false, false, "event_field_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullPredicateSourceRef), false, false, "full_predicate_source_ref"))));
        
        private static string _ruleValue = "event_field_id\r\n | full_predicate_source_ref\r\n";
        
        private static string _ruleName = "event_session_id_source1";
        
        /// <summary>
        /// event_session_id_source1 : event_field_id 
        /// </summary>
        public partial class AstEventSessionIdSource11 : AstEventSessionIdSource1
        {
            
            private static string _ruleName1 = "event_session_id_source1";
            
            private AstEventFieldId _eventFieldId;
            
            internal AstEventSessionIdSource11(ParserRuleContext ctx, AstEventFieldId eventFieldId) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource1(this);
            }
        }
        /// <summary>
        /// event_session_id_source1 : full_predicate_source_ref 
        /// </summary>
        public partial class AstEventSessionIdSource12 : AstEventSessionIdSource1
        {
            
            private static string _ruleName1 = "event_session_id_source1";
            
            private AstFullPredicateSourceRef _fullPredicateSourceRef;
            
            internal AstEventSessionIdSource12(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef) : 
                    base(ctx)
            {
                _fullPredicateSourceRef = fullPredicateSourceRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullPredicateSourceRef FullPredicateSourceRef
            {
                get
                {
                    return _fullPredicateSourceRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource1(this);
            }
        }
        

        
        internal AstEventSessionIdSource1(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionIdSource1(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionIdSource1(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEventSessionIdSource1 Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEventSessionIdSource1.AstEventSessionIdSource11(ctx, list.Get<AstEventFieldId>(0));
            }
            if ((index == 2))
            {
                return new AstEventSessionIdSource1.AstEventSessionIdSource12(ctx, list.Get<AstFullPredicateSourceRef>(0));
            }
            return null;
        }
        
        /// <summary>
        /// event_session_id_source1 : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionIdSource1 EventSessionIdSource1(ParserRuleContext ctx, AstEventFieldId eventFieldId)
        {
            AstEventSessionIdSource1.AstEventSessionIdSource11 result = new AstEventSessionIdSource1.AstEventSessionIdSource11(ctx, eventFieldId);
            return result;
        }
        
        /// <summary>
        /// event_session_id_source1 : 
        ///    full_predicate_source_ref 
        /// </summary>
        public static AstEventSessionIdSource1 EventSessionIdSource1(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef)
        {
            AstEventSessionIdSource1.AstEventSessionIdSource12 result = new AstEventSessionIdSource1.AstEventSessionIdSource12(ctx, fullPredicateSourceRef);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_id_source2
    /// 	 : event_field_id
    /// 	 | full_predicate_source_ref  COMMA  decimal_string
    /// </summary>
    public abstract partial class AstEventSessionIdSource2 : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullPredicateSourceRef), false, false, "full_predicate_source_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalString), false, false, "decimal_string")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEventFieldId), false, false, "event_field_id"))));
        
        private static string _ruleValue = "event_field_id\r\n | full_predicate_source_ref  COMMA  decimal_string\r\n";
        
        private static string _ruleName = "event_session_id_source2";
        
        /// <summary>
        /// event_session_id_source2 : event_field_id 
        /// </summary>
        public partial class AstEventSessionIdSource21 : AstEventSessionIdSource2
        {
            
            private static string _ruleName1 = "event_session_id_source2";
            
            private AstEventFieldId _eventFieldId;
            
            internal AstEventSessionIdSource21(ParserRuleContext ctx, AstEventFieldId eventFieldId) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource2(this);
            }
        }
        /// <summary>
        /// event_session_id_source2 : full_predicate_source_ref COMMA decimal_string 
        /// </summary>
        public partial class AstEventSessionIdSource22 : AstEventSessionIdSource2
        {
            
            private static string _ruleName1 = "event_session_id_source2";
            
            private AstFullPredicateSourceRef _fullPredicateSourceRef;
            
            private AstDecimalString _decimalString;
            
            internal AstEventSessionIdSource22(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _fullPredicateSourceRef = fullPredicateSourceRef;
                _decimalString = decimalString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullPredicateSourceRef FullPredicateSourceRef
            {
                get
                {
                    return _fullPredicateSourceRef;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource2(this);
            }
        }
        

        
        internal AstEventSessionIdSource2(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionIdSource2(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionIdSource2(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEventSessionIdSource2 Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEventSessionIdSource2.AstEventSessionIdSource21(ctx, list.Get<AstEventFieldId>(0));
            }
            if ((index == 2))
            {
                return new AstEventSessionIdSource2.AstEventSessionIdSource22(ctx, list.Get<AstFullPredicateSourceRef>(0), list.Get<AstDecimalString>(1));
            }
            return null;
        }
        
        /// <summary>
        /// event_session_id_source2 : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionIdSource2 EventSessionIdSource2(ParserRuleContext ctx, AstEventFieldId eventFieldId)
        {
            AstEventSessionIdSource2.AstEventSessionIdSource21 result = new AstEventSessionIdSource2.AstEventSessionIdSource21(ctx, eventFieldId);
            return result;
        }
        
        /// <summary>
        /// event_session_id_source2 : 
        ///    full_predicate_source_ref , decimal_string 
        /// </summary>
        public static AstEventSessionIdSource2 EventSessionIdSource2(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef, AstDecimalString decimalString)
        {
            AstEventSessionIdSource2.AstEventSessionIdSource22 result = new AstEventSessionIdSource2.AstEventSessionIdSource22(ctx, fullPredicateSourceRef, decimalString);
            return result;
        }
    }
    
    /// <summary>
    /// alter_external_data_source
    /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  external_sources
    /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  external_credential?  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterExternalDataSource : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDataSourceId), false, false, "data_source_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExternalCredential), true, false, "external_credential")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDataSourceId), false, false, "data_source_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExternalSources), false, false, "external_sources"))));
        
        private static string _ruleValue = "ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  external_sources\r\n | ALTER  E" +
            "XTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORA" +
            "GE  COMMA  LOCATION  EQUAL  location = stringtext  external_credential?  RR_BRAC" +
            "KET\r\n";
        
        private static string _ruleName = "alter_external_data_source";
        
        /// <summary>
        /// alter_external_data_source : ALTER EXTERNAL DATA SOURCE data_source_id SET external_sources 
        /// </summary>
        public partial class AstAlterExternalDataSource1 : AstAlterExternalDataSource
        {
            
            private static string _ruleName1 = "alter_external_data_source";
            
            private AstDataSourceId _dataSourceId;
            
            private AstExternalSources _externalSources;
            
            internal AstAlterExternalDataSource1(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstExternalSources externalSources) : 
                    base(ctx)
            {
                _dataSourceId = dataSourceId;
                _externalSources = externalSources;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDataSourceId DataSourceId
            {
                get
                {
                    return _dataSourceId;
                }
            }
            
            public virtual AstExternalSources ExternalSources
            {
                get
                {
                    return _externalSources;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterExternalDataSource(this);
            }
        }
        /// <summary>
        /// alter_external_data_source : ALTER EXTERNAL DATA SOURCE data_source_id WITH LR_BRACKET TYPE EQUAL BLOB_STORAGE COMMA LOCATION EQUAL location=stringtext external_credential? RR_BRACKET 
        /// </summary>
        public partial class AstAlterExternalDataSource2 : AstAlterExternalDataSource
        {
            
            private static string _ruleName1 = "alter_external_data_source";
            
            private AstDataSourceId _dataSourceId;
            
            private AstStringtext _location;
            
            private AstExternalCredential? _externalCredential;
            
            internal AstAlterExternalDataSource2(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstStringtext location, AstExternalCredential? externalCredential) : 
                    base(ctx)
            {
                _dataSourceId = dataSourceId;
                _location = location;
                _externalCredential = externalCredential;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDataSourceId DataSourceId
            {
                get
                {
                    return _dataSourceId;
                }
            }
            
            public virtual AstStringtext Location
            {
                get
                {
                    return _location;
                }
            }
            
            public virtual AstExternalCredential? ExternalCredential
            {
                get
                {
                    return _externalCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterExternalDataSource(this);
            }
        }
        

        
        internal AstAlterExternalDataSource(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterExternalDataSource(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterExternalDataSource(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterExternalDataSource Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterExternalDataSource.AstAlterExternalDataSource1(ctx, list.Get<AstDataSourceId>(0), list.Get<AstExternalSources>(1));
            }
            if ((index == 2))
            {
                return new AstAlterExternalDataSource.AstAlterExternalDataSource2(ctx, list.Get<AstDataSourceId>(0), list.Get<AstStringtext>(1), list.Get<AstExternalCredential?>(2));
            }
            return null;
        }
        
        /// <summary>
        /// alter_external_data_source : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id SET external_sources 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstExternalSources externalSources)
        {
            AstAlterExternalDataSource.AstAlterExternalDataSource1 result = new AstAlterExternalDataSource.AstAlterExternalDataSource1(ctx, dataSourceId, externalSources);
            return result;
        }
        
        /// <summary>
        /// alter_external_data_source : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id WITH ( TYPE EQUAL BLOB_STORAGE , LOCATION EQUAL location=stringtext external_credential? ) 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstStringtext location, AstExternalCredential externalCredential)
        {
            AstAlterExternalDataSource.AstAlterExternalDataSource2 result = new AstAlterExternalDataSource.AstAlterExternalDataSource2(ctx, dataSourceId, location, externalCredential);
            return result;
        }
    }
    
    /// <summary>
    /// external_source
    /// 	 : LOCATION  EQUAL  location = stringtext
    /// 	 | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext
    /// 	 | CREDENTIAL  EQUAL  credential_id
    /// </summary>
    public abstract partial class AstExternalSource : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstCredentialId), false, false, "credential_id"))));
        
        private static string _ruleValue = "LOCATION  EQUAL  location = stringtext\r\n | RESOURCE_MANAGER_LOCATION  EQUAL  reso" +
            "urce_manager_location = stringtext\r\n | CREDENTIAL  EQUAL  credential_id\r\n";
        
        private static string _ruleName = "external_source";
        
        /// <summary>
        /// external_source : LOCATION EQUAL location=stringtext 
        /// </summary>
        public partial class AstExternalSource1 : AstExternalSource
        {
            
            private static string _ruleName1 = "external_source";
            
            private AstStringtext _location;
            
            internal AstExternalSource1(ParserRuleContext ctx, AstStringtext location) : 
                    base(ctx)
            {
                _location = location;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Location
            {
                get
                {
                    return _location;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalSource(this);
            }
        }
        /// <summary>
        /// external_source : RESOURCE_MANAGER_LOCATION EQUAL resource_manager_location=stringtext 
        /// </summary>
        public partial class AstExternalSource2 : AstExternalSource
        {
            
            private static string _ruleName1 = "external_source";
            
            private AstStringtext _resourceManagerLocation;
            
            internal AstExternalSource2(ParserRuleContext ctx, AstStringtext resourceManagerLocation) : 
                    base(ctx)
            {
                _resourceManagerLocation = resourceManagerLocation;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext ResourceManagerLocation
            {
                get
                {
                    return _resourceManagerLocation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalSource(this);
            }
        }
        /// <summary>
        /// external_source : CREDENTIAL EQUAL credential_id 
        /// </summary>
        public partial class AstExternalSource3 : AstExternalSource
        {
            
            private static string _ruleName1 = "external_source";
            
            private AstCredentialId _credentialId;
            
            internal AstExternalSource3(ParserRuleContext ctx, AstCredentialId credentialId) : 
                    base(ctx)
            {
                _credentialId = credentialId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCredentialId CredentialId
            {
                get
                {
                    return _credentialId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalSource(this);
            }
        }
        

        
        internal AstExternalSource(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExternalSource(Position p) : 
                base(p)
        {
        }
        
        internal AstExternalSource(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExternalSource Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExternalSource.AstExternalSource1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstExternalSource.AstExternalSource2(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 3))
            {
                return new AstExternalSource.AstExternalSource3(ctx, list.Get<AstCredentialId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// external_source : 
        ///    LOCATION EQUAL location=stringtext 
        /// </summary>
        public static AstExternalSource ExternalSource(ParserRuleContext ctx, AstStringtext location)
        {
            AstExternalSource.AstExternalSource1 result = new AstExternalSource.AstExternalSource1(ctx, location);
            return result;
        }
        
        /// <summary>
        /// external_source : 
        ///    CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstExternalSource ExternalSource(ParserRuleContext ctx, AstCredentialId credentialId)
        {
            AstExternalSource.AstExternalSource3 result = new AstExternalSource.AstExternalSource3(ctx, credentialId);
            return result;
        }
    }
    
    /// <summary>
    /// code_content
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | NONE
    /// </summary>
    public abstract partial class AstCodeContent : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_"))));
        
        private static string _ruleValue = "stringtext\r\n | binary_\r\n | NONE\r\n";
        
        private static string _ruleName = "code_content";
        
        /// <summary>
        /// code_content : stringtext 
        /// </summary>
        public partial class AstCodeContent1 : AstCodeContent
        {
            
            private static string _ruleName1 = "code_content";
            
            private AstStringtext _stringtext;
            
            internal AstCodeContent1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        /// <summary>
        /// code_content : binary_ 
        /// </summary>
        public partial class AstCodeContent2 : AstCodeContent
        {
            
            private static string _ruleName1 = "code_content";
            
            private AstBinary _binary;
            
            internal AstCodeContent2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        /// <summary>
        /// code_content : NONE 
        /// </summary>
        public partial class AstCodeContent3 : AstCodeContent
        {
            
            private static string _ruleName1 = "code_content";
            
            internal AstCodeContent3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        

        
        internal AstCodeContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCodeContent(Position p) : 
                base(p)
        {
        }
        
        internal AstCodeContent(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCodeContent Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCodeContent.AstCodeContent1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstCodeContent.AstCodeContent2(ctx, list.Get<AstBinary>(0));
            }
            if ((index == 3))
            {
                return new AstCodeContent.AstCodeContent3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// code_content : 
        ///    stringtext 
        /// </summary>
        public static AstCodeContent CodeContent(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstCodeContent.AstCodeContent1 result = new AstCodeContent.AstCodeContent1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// code_content : 
        ///    binary_ 
        /// </summary>
        public static AstCodeContent CodeContent(ParserRuleContext ctx, AstBinary binary)
        {
            AstCodeContent.AstCodeContent2 result = new AstCodeContent.AstCodeContent2(ctx, binary);
            return result;
        }
        
        /// <summary>
        /// code_content : 
        ///    NONE 
        /// </summary>
        public static AstCodeContent CodeContent(ParserRuleContext ctx)
        {
            AstCodeContent.AstCodeContent3 result = new AstCodeContent.AstCodeContent3(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with
    /// </summary>
    public partial class AstCreateExternalResourcePool : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPoolId), false, false, "pool_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExternalResourceWith), false, false, "external_resource_with"))));
        
        private AstPoolId _poolId;
        
        private AstExternalResourceWith _externalResourceWith;
        
        private static string _ruleValue = "CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with\r\n";
        
        private static string _ruleName = "create_external_resource_pool";
        
        internal AstCreateExternalResourcePool(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateExternalResourcePool(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateExternalResourcePool(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateExternalResourcePool(ParserRuleContext ctx, AstPoolId poolId, AstExternalResourceWith externalResourceWith) : 
                base(ctx)
        {
            _poolId = poolId;
            _externalResourceWith = externalResourceWith;
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return _poolId;
            }
        }
        
        public virtual AstExternalResourceWith ExternalResourceWith
        {
            get
            {
                return _externalResourceWith;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
        
        public static AstCreateExternalResourcePool Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCreateExternalResourcePool(ctx, list.Get<AstPoolId>(0), list.Get<AstExternalResourceWith>(1));
        }
        
        /// <summary>
        /// create_external_resource_pool : 
        ///    CREATE EXTERNAL RESOURCE POOL pool_id WITH external_resource_with 
        /// </summary>
        public static AstCreateExternalResourcePool CreateExternalResourcePool(ParserRuleContext ctx, AstPoolId poolId, AstExternalResourceWith externalResourceWith)
        {
            AstCreateExternalResourcePool result = new AstCreateExternalResourcePool(ctx, poolId, externalResourceWith);
            return result;
        }
    }
    
    /// <summary>
    /// fulltext_languageList
    /// 	 : stringtext
    /// 	 | decimal
    /// 	 | binary_
    /// </summary>
    public abstract partial class AstFulltextLanguagelist : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_"))));
        
        private static string _ruleValue = "stringtext\r\n | decimal\r\n | binary_\r\n";
        
        private static string _ruleName = "fulltext_languageList";
        
        /// <summary>
        /// fulltext_languageList : stringtext 
        /// </summary>
        public partial class AstFulltextLanguagelist1 : AstFulltextLanguagelist
        {
            
            private static string _ruleName1 = "fulltext_languageList";
            
            private AstStringtext _stringtext;
            
            internal AstFulltextLanguagelist1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguagelist(this);
            }
        }
        /// <summary>
        /// fulltext_languageList : decimal 
        /// </summary>
        public partial class AstFulltextLanguagelist2 : AstFulltextLanguagelist
        {
            
            private static string _ruleName1 = "fulltext_languageList";
            
            private AstDecimal _decimal;
            
            internal AstFulltextLanguagelist2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguagelist(this);
            }
        }
        /// <summary>
        /// fulltext_languageList : binary_ 
        /// </summary>
        public partial class AstFulltextLanguagelist3 : AstFulltextLanguagelist
        {
            
            private static string _ruleName1 = "fulltext_languageList";
            
            private AstBinary _binary;
            
            internal AstFulltextLanguagelist3(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguagelist(this);
            }
        }
        

        
        internal AstFulltextLanguagelist(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFulltextLanguagelist(Position p) : 
                base(p)
        {
        }
        
        internal AstFulltextLanguagelist(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstFulltextLanguagelist Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstFulltextLanguagelist.AstFulltextLanguagelist1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstFulltextLanguagelist.AstFulltextLanguagelist2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstFulltextLanguagelist.AstFulltextLanguagelist3(ctx, list.Get<AstBinary>(0));
            }
            return null;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    stringtext 
        /// </summary>
        public static AstFulltextLanguagelist FulltextLanguagelist(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstFulltextLanguagelist.AstFulltextLanguagelist1 result = new AstFulltextLanguagelist.AstFulltextLanguagelist1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    decimal 
        /// </summary>
        public static AstFulltextLanguagelist FulltextLanguagelist(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstFulltextLanguagelist.AstFulltextLanguagelist2 result = new AstFulltextLanguagelist.AstFulltextLanguagelist2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    binary_ 
        /// </summary>
        public static AstFulltextLanguagelist FulltextLanguagelist(ParserRuleContext ctx, AstBinary binary)
        {
            AstFulltextLanguagelist.AstFulltextLanguagelist3 result = new AstFulltextLanguagelist.AstFulltextLanguagelist3(ctx, binary);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_sql_server_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_sql_server_settings
    /// 	 | add_drop  CREDENTIAL  credential_id
    /// </summary>
    public abstract partial class AstAlterLoginSqlServerInfos : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAddDrop), false, false, "add_drop"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCredentialId), false, false, "credential_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEnableDisable), true, false, "enable_disable")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterLoginSqlServerSettings), false, false, "alter_login_sql_server_settings"))));
        
        private static string _ruleValue = "enable_disable?\r\n | WITH  alter_login_sql_server_settings\r\n | add_drop  CREDENTIA" +
            "L  credential_id\r\n";
        
        private static string _ruleName = "alter_login_sql_server_infos";
        
        /// <summary>
        /// alter_login_sql_server_infos : enable_disable? 
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos1 : AstAlterLoginSqlServerInfos
        {
            
            private static string _ruleName1 = "alter_login_sql_server_infos";
            
            private AstEnableDisable? _enableDisable;
            
            internal AstAlterLoginSqlServerInfos1(ParserRuleContext ctx, AstEnableDisable? enableDisable) : 
                    base(ctx)
            {
                _enableDisable = enableDisable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEnableDisable? EnableDisable
            {
                get
                {
                    return _enableDisable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        /// <summary>
        /// alter_login_sql_server_infos : WITH alter_login_sql_server_settings 
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos2 : AstAlterLoginSqlServerInfos
        {
            
            private static string _ruleName1 = "alter_login_sql_server_infos";
            
            private AstAlterLoginSqlServerSettings _alterLoginSqlServerSettings;
            
            internal AstAlterLoginSqlServerInfos2(ParserRuleContext ctx, AstAlterLoginSqlServerSettings alterLoginSqlServerSettings) : 
                    base(ctx)
            {
                _alterLoginSqlServerSettings = alterLoginSqlServerSettings;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterLoginSqlServerSettings AlterLoginSqlServerSettings
            {
                get
                {
                    return _alterLoginSqlServerSettings;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        /// <summary>
        /// alter_login_sql_server_infos : add_drop CREDENTIAL credential_id 
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos3 : AstAlterLoginSqlServerInfos
        {
            
            private static string _ruleName1 = "alter_login_sql_server_infos";
            
            private AstAddDrop _addDrop;
            
            private AstCredentialId _credentialId;
            
            internal AstAlterLoginSqlServerInfos3(ParserRuleContext ctx, AstAddDrop addDrop, AstCredentialId credentialId) : 
                    base(ctx)
            {
                _addDrop = addDrop;
                _credentialId = credentialId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAddDrop AddDrop
            {
                get
                {
                    return _addDrop;
                }
            }
            
            public virtual AstCredentialId CredentialId
            {
                get
                {
                    return _credentialId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        

        
        internal AstAlterLoginSqlServerInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterLoginSqlServerInfos Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1(ctx, list.Get<AstEnableDisable?>(0));
            }
            if ((index == 2))
            {
                return new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2(ctx, list.Get<AstAlterLoginSqlServerSettings>(0));
            }
            if ((index == 3))
            {
                return new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3(ctx, list.Get<AstAddDrop>(0), list.Get<AstCredentialId>(1));
            }
            return null;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(ParserRuleContext ctx, AstEnableDisable enableDisable)
        {
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1(ctx, enableDisable);
            return result;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    WITH alter_login_sql_server_settings 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(ParserRuleContext ctx, AstAlterLoginSqlServerSettings alterLoginSqlServerSettings)
        {
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2(ctx, alterLoginSqlServerSettings);
            return result;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    add_drop CREDENTIAL credential_id 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(ParserRuleContext ctx, AstAddDrop addDrop, AstCredentialId credentialId)
        {
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3(ctx, addDrop, credentialId);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_settings
    /// 	 : (PASSWORD  EQUAL  pwd_value  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language_id)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?
    /// </summary>
    public partial class AstCreateLoginSqlServerSettings : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPwdValue), false, false, "pwd_value"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPwdStrategies), true, false, "pwd_strategies"), new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseId), false, false, "database_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLanguageId), false, false, "language_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCredentialId), false, false, "credential_id"))));
        
        private AstPwdValue _pwdValue;
        
        private AstPwdStrategies? _pwdStrategies;
        
        private AstBinary _sid;
        
        private AstDatabaseId _databaseId;
        
        private AstLanguageId _languageId;
        
        private AstOnOff _checkExpiration;
        
        private AstOnOff _checkPolicy;
        
        private AstCredentialId _credentialId;
        
        private static string _ruleValue = @"(PASSWORD  EQUAL  pwd_value  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language_id)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?
";
        
        private static string _ruleName = "create_login_sql_server_settings";
        
        internal AstCreateLoginSqlServerSettings(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(ParserRuleContext ctx, AstPwdValue pwdValue, AstPwdStrategies? pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguageId languageId, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId) : 
                base(ctx)
        {
            _pwdValue = pwdValue;
            _pwdStrategies = pwdStrategies;
            _sid = sid;
            _databaseId = databaseId;
            _languageId = languageId;
            _checkExpiration = checkExpiration;
            _checkPolicy = checkPolicy;
            _credentialId = credentialId;
        }
        
        public virtual AstPwdValue PwdValue
        {
            get
            {
                return _pwdValue;
            }
        }
        
        public virtual AstPwdStrategies? PwdStrategies
        {
            get
            {
                return _pwdStrategies;
            }
        }
        
        public virtual AstBinary Sid
        {
            get
            {
                return _sid;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return _databaseId;
            }
        }
        
        public virtual AstLanguageId LanguageId
        {
            get
            {
                return _languageId;
            }
        }
        
        public virtual AstOnOff CheckExpiration
        {
            get
            {
                return _checkExpiration;
            }
        }
        
        public virtual AstOnOff CheckPolicy
        {
            get
            {
                return _checkPolicy;
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return _credentialId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServerSettings(this);
        }
        
        public static AstCreateLoginSqlServerSettings Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCreateLoginSqlServerSettings(ctx, list.Get<AstPwdValue>(0), list.Get<AstPwdStrategies?>(1), list.Get<AstBinary>(2), list.Get<AstDatabaseId>(3), list.Get<AstLanguageId>(4), list.Get<AstOnOff>(5), list.Get<AstOnOff>(6), list.Get<AstCredentialId>(7));
        }
        
        /// <summary>
        /// create_login_sql_server_settings : 
        ///    PASSWORD EQUAL pwd_value pwd_strategies? COMMA? SID EQUAL sid=binary_ COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL language_id COMMA? CHECK_EXPIRATION EQUAL check_expiration=on_off COMMA? CHECK_POLICY EQUAL check_policy=on_off COMMA? CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings(ParserRuleContext ctx, AstPwdValue pwdValue, AstPwdStrategies pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguageId languageId, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId)
        {
            AstCreateLoginSqlServerSettings result = new AstCreateLoginSqlServerSettings(ctx, pwdValue, pwdStrategies, sid, databaseId, languageId, checkExpiration, checkPolicy, credentialId);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_from
    /// 	 : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtext)?)
    /// 	 | CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstCreateLoginSqlServerFrom : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseId), false, false, "database_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCertificateId), false, false, "certificate_id")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAsymKeyId), false, false, "asym_key_id"))));
        
        private static string _ruleValue = "WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT" +
            "_LANGUAGE  EQUAL  default_language = stringtext)?)\r\n | CERTIFICATE  certificate_" +
            "id\r\n | ASYMMETRIC  KEY  asym_key_id\r\n";
        
        private static string _ruleName = "create_login_sql_server_from";
        
        /// <summary>
        /// create_login_sql_server_from : WINDOWS WITH COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL default_language=stringtext 
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom1 : AstCreateLoginSqlServerFrom
        {
            
            private static string _ruleName1 = "create_login_sql_server_from";
            
            private AstDatabaseId _databaseId;
            
            private AstStringtext _defaultLanguage;
            
            internal AstCreateLoginSqlServerFrom1(ParserRuleContext ctx, AstDatabaseId databaseId, AstStringtext defaultLanguage) : 
                    base(ctx)
            {
                _databaseId = databaseId;
                _defaultLanguage = defaultLanguage;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatabaseId DatabaseId
            {
                get
                {
                    return _databaseId;
                }
            }
            
            public virtual AstStringtext DefaultLanguage
            {
                get
                {
                    return _defaultLanguage;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        /// <summary>
        /// create_login_sql_server_from : CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom2 : AstCreateLoginSqlServerFrom
        {
            
            private static string _ruleName1 = "create_login_sql_server_from";
            
            private AstCertificateId _certificateId;
            
            internal AstCreateLoginSqlServerFrom2(ParserRuleContext ctx, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _certificateId = certificateId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        /// <summary>
        /// create_login_sql_server_from : ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom3 : AstCreateLoginSqlServerFrom
        {
            
            private static string _ruleName1 = "create_login_sql_server_from";
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstCreateLoginSqlServerFrom3(ParserRuleContext ctx, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        

        
        internal AstCreateLoginSqlServerFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateLoginSqlServerFrom Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1(ctx, list.Get<AstDatabaseId>(0), list.Get<AstStringtext>(1));
            }
            if ((index == 2))
            {
                return new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2(ctx, list.Get<AstCertificateId>(0));
            }
            if ((index == 3))
            {
                return new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3(ctx, list.Get<AstAsymKeyId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    WINDOWS WITH COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL default_language=stringtext 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(ParserRuleContext ctx, AstDatabaseId databaseId, AstStringtext defaultLanguage)
        {
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1(ctx, databaseId, defaultLanguage);
            return result;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(ParserRuleContext ctx, AstCertificateId certificateId)
        {
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2(ctx, certificateId);
            return result;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(ParserRuleContext ctx, AstAsymKeyId asymKeyId)
        {
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3(ctx, asymKeyId);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_azure_sql_with
    /// </summary>
    public abstract partial class AstAlterLoginAzureSqlInfos : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEnableDisable), true, false, "enable_disable")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterLoginAzureSqlWith), false, false, "alter_login_azure_sql_with"))));
        
        private static string _ruleValue = "enable_disable?\r\n | WITH  alter_login_azure_sql_with\r\n";
        
        private static string _ruleName = "alter_login_azure_sql_infos";
        
        /// <summary>
        /// alter_login_azure_sql_infos : enable_disable? 
        /// </summary>
        public partial class AstAlterLoginAzureSqlInfos1 : AstAlterLoginAzureSqlInfos
        {
            
            private static string _ruleName1 = "alter_login_azure_sql_infos";
            
            private AstEnableDisable? _enableDisable;
            
            internal AstAlterLoginAzureSqlInfos1(ParserRuleContext ctx, AstEnableDisable? enableDisable) : 
                    base(ctx)
            {
                _enableDisable = enableDisable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEnableDisable? EnableDisable
            {
                get
                {
                    return _enableDisable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlInfos(this);
            }
        }
        /// <summary>
        /// alter_login_azure_sql_infos : WITH alter_login_azure_sql_with 
        /// </summary>
        public partial class AstAlterLoginAzureSqlInfos2 : AstAlterLoginAzureSqlInfos
        {
            
            private static string _ruleName1 = "alter_login_azure_sql_infos";
            
            private AstAlterLoginAzureSqlWith _alterLoginAzureSqlWith;
            
            internal AstAlterLoginAzureSqlInfos2(ParserRuleContext ctx, AstAlterLoginAzureSqlWith alterLoginAzureSqlWith) : 
                    base(ctx)
            {
                _alterLoginAzureSqlWith = alterLoginAzureSqlWith;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith
            {
                get
                {
                    return _alterLoginAzureSqlWith;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlInfos(this);
            }
        }
        

        
        internal AstAlterLoginAzureSqlInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterLoginAzureSqlInfos Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1(ctx, list.Get<AstEnableDisable?>(0));
            }
            if ((index == 2))
            {
                return new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2(ctx, list.Get<AstAlterLoginAzureSqlWith>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(ParserRuleContext ctx, AstEnableDisable enableDisable)
        {
            AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1 result = new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1(ctx, enableDisable);
            return result;
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos : 
        ///    WITH alter_login_azure_sql_with 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(ParserRuleContext ctx, AstAlterLoginAzureSqlWith alterLoginAzureSqlWith)
        {
            AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2 result = new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2(ctx, alterLoginAzureSqlWith);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_with
    /// 	 : password_setting  old_pwd?
    /// 	 | NAME  EQUAL  login_id
    /// </summary>
    public abstract partial class AstAlterLoginAzureSqlWith : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOldPwd), true, false, "old_pwd")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLoginId), false, false, "login_id"))));
        
        private static string _ruleValue = "password_setting  old_pwd?\r\n | NAME  EQUAL  login_id\r\n";
        
        private static string _ruleName = "alter_login_azure_sql_with";
        
        /// <summary>
        /// alter_login_azure_sql_with : password_setting old_pwd? 
        /// </summary>
        public partial class AstAlterLoginAzureSqlWith1 : AstAlterLoginAzureSqlWith
        {
            
            private static string _ruleName1 = "alter_login_azure_sql_with";
            
            private AstPasswordSetting _passwordSetting;
            
            private AstOldPwd? _oldPwd;
            
            internal AstAlterLoginAzureSqlWith1(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwd? oldPwd) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _oldPwd = oldPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstOldPwd? OldPwd
            {
                get
                {
                    return _oldPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlWith(this);
            }
        }
        /// <summary>
        /// alter_login_azure_sql_with : NAME EQUAL login_id 
        /// </summary>
        public partial class AstAlterLoginAzureSqlWith2 : AstAlterLoginAzureSqlWith
        {
            
            private static string _ruleName1 = "alter_login_azure_sql_with";
            
            private AstLoginId _loginId;
            
            internal AstAlterLoginAzureSqlWith2(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlWith(this);
            }
        }
        

        
        internal AstAlterLoginAzureSqlWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterLoginAzureSqlWith Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1(ctx, list.Get<AstPasswordSetting>(0), list.Get<AstOldPwd?>(1));
            }
            if ((index == 2))
            {
                return new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2(ctx, list.Get<AstLoginId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_login_azure_sql_with : 
        ///    password_setting old_pwd? 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwd oldPwd)
        {
            AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1 result = new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1(ctx, passwordSetting, oldPwd);
            return result;
        }
        
        /// <summary>
        /// alter_login_azure_sql_with : 
        ///    NAME EQUAL login_id 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2 result = new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2(ctx, loginId);
            return result;
        }
    }
    
    /// <summary>
    /// login_pwd_strategy
    /// 	 : enable_disable?
    /// 	 | WITH  change_password
    /// </summary>
    public abstract partial class AstLoginPwdStrategy : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEnableDisable), true, false, "enable_disable")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstChangePassword), false, false, "change_password"))));
        
        private static string _ruleValue = "enable_disable?\r\n | WITH  change_password\r\n";
        
        private static string _ruleName = "login_pwd_strategy";
        
        /// <summary>
        /// login_pwd_strategy : enable_disable? 
        /// </summary>
        public partial class AstLoginPwdStrategy1 : AstLoginPwdStrategy
        {
            
            private static string _ruleName1 = "login_pwd_strategy";
            
            private AstEnableDisable? _enableDisable;
            
            internal AstLoginPwdStrategy1(ParserRuleContext ctx, AstEnableDisable? enableDisable) : 
                    base(ctx)
            {
                _enableDisable = enableDisable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEnableDisable? EnableDisable
            {
                get
                {
                    return _enableDisable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPwdStrategy(this);
            }
        }
        /// <summary>
        /// login_pwd_strategy : WITH change_password 
        /// </summary>
        public partial class AstLoginPwdStrategy2 : AstLoginPwdStrategy
        {
            
            private static string _ruleName1 = "login_pwd_strategy";
            
            private AstChangePassword _changePassword;
            
            internal AstLoginPwdStrategy2(ParserRuleContext ctx, AstChangePassword changePassword) : 
                    base(ctx)
            {
                _changePassword = changePassword;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstChangePassword ChangePassword
            {
                get
                {
                    return _changePassword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPwdStrategy(this);
            }
        }
        

        
        internal AstLoginPwdStrategy(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLoginPwdStrategy(Position p) : 
                base(p)
        {
        }
        
        internal AstLoginPwdStrategy(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstLoginPwdStrategy Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstLoginPwdStrategy.AstLoginPwdStrategy1(ctx, list.Get<AstEnableDisable?>(0));
            }
            if ((index == 2))
            {
                return new AstLoginPwdStrategy.AstLoginPwdStrategy2(ctx, list.Get<AstChangePassword>(0));
            }
            return null;
        }
        
        /// <summary>
        /// login_pwd_strategy : 
        ///    enable_disable? 
        /// </summary>
        public static AstLoginPwdStrategy LoginPwdStrategy(ParserRuleContext ctx, AstEnableDisable enableDisable)
        {
            AstLoginPwdStrategy.AstLoginPwdStrategy1 result = new AstLoginPwdStrategy.AstLoginPwdStrategy1(ctx, enableDisable);
            return result;
        }
        
        /// <summary>
        /// login_pwd_strategy : 
        ///    WITH change_password 
        /// </summary>
        public static AstLoginPwdStrategy LoginPwdStrategy(ParserRuleContext ctx, AstChangePassword changePassword)
        {
            AstLoginPwdStrategy.AstLoginPwdStrategy2 result = new AstLoginPwdStrategy.AstLoginPwdStrategy2(ctx, changePassword);
            return result;
        }
    }
    
    /// <summary>
    /// change_password
    /// 	 : password_setting  old_pwd_strategies?
    /// 	 | NAME  EQUAL  login_id
    /// </summary>
    public abstract partial class AstChangePassword : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOldPwdStrategies), true, false, "old_pwd_strategies")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLoginId), false, false, "login_id"))));
        
        private static string _ruleValue = "password_setting  old_pwd_strategies?\r\n | NAME  EQUAL  login_id\r\n";
        
        private static string _ruleName = "change_password";
        
        /// <summary>
        /// change_password : password_setting old_pwd_strategies? 
        /// </summary>
        public partial class AstChangePassword1 : AstChangePassword
        {
            
            private static string _ruleName1 = "change_password";
            
            private AstPasswordSetting _passwordSetting;
            
            private AstOldPwdStrategies? _oldPwdStrategies;
            
            internal AstChangePassword1(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwdStrategies? oldPwdStrategies) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _oldPwdStrategies = oldPwdStrategies;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstOldPwdStrategies? OldPwdStrategies
            {
                get
                {
                    return _oldPwdStrategies;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangePassword(this);
            }
        }
        /// <summary>
        /// change_password : NAME EQUAL login_id 
        /// </summary>
        public partial class AstChangePassword2 : AstChangePassword
        {
            
            private static string _ruleName1 = "change_password";
            
            private AstLoginId _loginId;
            
            internal AstChangePassword2(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangePassword(this);
            }
        }
        

        
        internal AstChangePassword(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangePassword(Position p) : 
                base(p)
        {
        }
        
        internal AstChangePassword(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstChangePassword Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstChangePassword.AstChangePassword1(ctx, list.Get<AstPasswordSetting>(0), list.Get<AstOldPwdStrategies?>(1));
            }
            if ((index == 2))
            {
                return new AstChangePassword.AstChangePassword2(ctx, list.Get<AstLoginId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// change_password : 
        ///    password_setting old_pwd_strategies? 
        /// </summary>
        public static AstChangePassword ChangePassword(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwdStrategies oldPwdStrategies)
        {
            AstChangePassword.AstChangePassword1 result = new AstChangePassword.AstChangePassword1(ctx, passwordSetting, oldPwdStrategies);
            return result;
        }
        
        /// <summary>
        /// change_password : 
        ///    NAME EQUAL login_id 
        /// </summary>
        public static AstChangePassword ChangePassword(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstChangePassword.AstChangePassword2 result = new AstChangePassword.AstChangePassword2(ctx, loginId);
            return result;
        }
    }
    
    /// <summary>
    /// login_pdw_pwd
    /// 	 : WITH  (password_setting  MUST_CHANGE?  (CHECK_POLICY  EQUAL  on_off?)?)
    /// 	 | FROM  WINDOWS
    /// </summary>
    public abstract partial class AstLoginPdwPwd : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), true, false, "on_off"))));
        
        private static string _ruleValue = "WITH  (password_setting  MUST_CHANGE?  (CHECK_POLICY  EQUAL  on_off?)?)\r\n | FROM " +
            " WINDOWS\r\n";
        
        private static string _ruleName = "login_pdw_pwd";
        
        /// <summary>
        /// login_pdw_pwd : WITH password_setting MUST_CHANGE? CHECK_POLICY EQUAL on_off? 
        /// </summary>
        public partial class AstLoginPdwPwd1 : AstLoginPdwPwd
        {
            
            private static string _ruleName1 = "login_pdw_pwd";
            
            private AstPasswordSetting _passwordSetting;
            
            private AstOnOff? _onOff;
            
            internal AstLoginPdwPwd1(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOnOff? onOff) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstOnOff? OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPdwPwd(this);
            }
        }
        /// <summary>
        /// login_pdw_pwd : FROM WINDOWS 
        /// </summary>
        public partial class AstLoginPdwPwd2 : AstLoginPdwPwd
        {
            
            private static string _ruleName1 = "login_pdw_pwd";
            
            internal AstLoginPdwPwd2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPdwPwd(this);
            }
        }
        

        
        internal AstLoginPdwPwd(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLoginPdwPwd(Position p) : 
                base(p)
        {
        }
        
        internal AstLoginPdwPwd(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstLoginPdwPwd Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstLoginPdwPwd.AstLoginPdwPwd1(ctx, list.Get<AstPasswordSetting>(0), list.Get<AstOnOff?>(1));
            }
            if ((index == 2))
            {
                return new AstLoginPdwPwd.AstLoginPdwPwd2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// login_pdw_pwd : 
        ///    WITH password_setting MUST_CHANGE? CHECK_POLICY EQUAL on_off? 
        /// </summary>
        public static AstLoginPdwPwd LoginPdwPwd(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOnOff onOff)
        {
            AstLoginPdwPwd.AstLoginPdwPwd1 result = new AstLoginPdwPwd.AstLoginPdwPwd1(ctx, passwordSetting, onOff);
            return result;
        }
        
        /// <summary>
        /// login_pdw_pwd : 
        ///    FROM WINDOWS 
        /// </summary>
        public static AstLoginPdwPwd LoginPdwPwd(ParserRuleContext ctx)
        {
            AstLoginPdwPwd.AstLoginPdwPwd2 result = new AstLoginPdwPwd.AstLoginPdwPwd2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_sql_server
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | add_drop  add_master_key)
    /// </summary>
    public abstract partial class AstAlterMasterKeySqlServer : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAddDrop), false, false, "add_drop"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAddMasterKey), false, false, "add_master_key")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRegenerateMaterKey), false, false, "regenerate_mater_key"))));
        
        private static string _ruleValue = "ALTER  MASTER  KEY  (regenerate_mater_key | add_drop  add_master_key)\r\n";
        
        private static string _ruleName = "alter_master_key_sql_server";
        
        /// <summary>
        /// alter_master_key_sql_server : ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public partial class AstAlterMasterKeySqlServer1 : AstAlterMasterKeySqlServer
        {
            
            private static string _ruleName1 = "alter_master_key_sql_server";
            
            private AstRegenerateMaterKey _regenerateMaterKey;
            
            internal AstAlterMasterKeySqlServer1(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey) : 
                    base(ctx)
            {
                _regenerateMaterKey = regenerateMaterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRegenerateMaterKey RegenerateMaterKey
            {
                get
                {
                    return _regenerateMaterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeySqlServer(this);
            }
        }
        /// <summary>
        /// alter_master_key_sql_server : ALTER MASTER KEY add_drop add_master_key 
        /// </summary>
        public partial class AstAlterMasterKeySqlServer2 : AstAlterMasterKeySqlServer
        {
            
            private static string _ruleName1 = "alter_master_key_sql_server";
            
            private AstAddDrop _addDrop;
            
            private AstAddMasterKey _addMasterKey;
            
            internal AstAlterMasterKeySqlServer2(ParserRuleContext ctx, AstAddDrop addDrop, AstAddMasterKey addMasterKey) : 
                    base(ctx)
            {
                _addDrop = addDrop;
                _addMasterKey = addMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAddDrop AddDrop
            {
                get
                {
                    return _addDrop;
                }
            }
            
            public virtual AstAddMasterKey AddMasterKey
            {
                get
                {
                    return _addMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeySqlServer(this);
            }
        }
        

        
        internal AstAlterMasterKeySqlServer(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeySqlServer(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeySqlServer(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterMasterKeySqlServer Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer1(ctx, list.Get<AstRegenerateMaterKey>(0));
            }
            if ((index == 2))
            {
                return new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer2(ctx, list.Get<AstAddDrop>(0), list.Get<AstAddMasterKey>(1));
            }
            return null;
        }
        
        /// <summary>
        /// alter_master_key_sql_server : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey)
        {
            AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer1 result = new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer1(ctx, regenerateMaterKey);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_sql_server : 
        ///    ALTER MASTER KEY add_drop add_master_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(ParserRuleContext ctx, AstAddDrop addDrop, AstAddMasterKey addMasterKey)
        {
            AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer2 result = new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer2(ctx, addDrop, addMasterKey);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_azure_sql
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  add_master_key | DROP  encryption_by_pwd)
    /// </summary>
    public abstract partial class AstAlterMasterKeyAzureSql : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRegenerateMaterKey), false, false, "regenerate_mater_key")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAddMasterKey), false, false, "add_master_key")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionByPwd), false, false, "encryption_by_pwd"))));
        
        private static string _ruleValue = "ALTER  MASTER  KEY  (regenerate_mater_key | ADD  add_master_key | DROP  encryptio" +
            "n_by_pwd)\r\n";
        
        private static string _ruleName = "alter_master_key_azure_sql";
        
        /// <summary>
        /// alter_master_key_azure_sql : ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public partial class AstAlterMasterKeyAzureSql1 : AstAlterMasterKeyAzureSql
        {
            
            private static string _ruleName1 = "alter_master_key_azure_sql";
            
            private AstRegenerateMaterKey _regenerateMaterKey;
            
            internal AstAlterMasterKeyAzureSql1(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey) : 
                    base(ctx)
            {
                _regenerateMaterKey = regenerateMaterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRegenerateMaterKey RegenerateMaterKey
            {
                get
                {
                    return _regenerateMaterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeyAzureSql(this);
            }
        }
        /// <summary>
        /// alter_master_key_azure_sql : ALTER MASTER KEY ADD add_master_key 
        /// </summary>
        public partial class AstAlterMasterKeyAzureSql2 : AstAlterMasterKeyAzureSql
        {
            
            private static string _ruleName1 = "alter_master_key_azure_sql";
            
            private AstAddMasterKey _addMasterKey;
            
            internal AstAlterMasterKeyAzureSql2(ParserRuleContext ctx, AstAddMasterKey addMasterKey) : 
                    base(ctx)
            {
                _addMasterKey = addMasterKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAddMasterKey AddMasterKey
            {
                get
                {
                    return _addMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeyAzureSql(this);
            }
        }
        /// <summary>
        /// alter_master_key_azure_sql : ALTER MASTER KEY DROP encryption_by_pwd 
        /// </summary>
        public partial class AstAlterMasterKeyAzureSql3 : AstAlterMasterKeyAzureSql
        {
            
            private static string _ruleName1 = "alter_master_key_azure_sql";
            
            private AstEncryptionByPwd _encryptionByPwd;
            
            internal AstAlterMasterKeyAzureSql3(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd) : 
                    base(ctx)
            {
                _encryptionByPwd = encryptionByPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEncryptionByPwd EncryptionByPwd
            {
                get
                {
                    return _encryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeyAzureSql(this);
            }
        }
        

        
        internal AstAlterMasterKeyAzureSql(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterMasterKeyAzureSql Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql1(ctx, list.Get<AstRegenerateMaterKey>(0));
            }
            if ((index == 2))
            {
                return new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql2(ctx, list.Get<AstAddMasterKey>(0));
            }
            if ((index == 3))
            {
                return new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql3(ctx, list.Get<AstEncryptionByPwd>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey)
        {
            AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql1 result = new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql1(ctx, regenerateMaterKey);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY ADD add_master_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(ParserRuleContext ctx, AstAddMasterKey addMasterKey)
        {
            AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql2 result = new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql2(ctx, addMasterKey);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY DROP encryption_by_pwd 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd)
        {
            AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql3 result = new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql3(ctx, encryptionByPwd);
            return result;
        }
    }
    
    /// <summary>
    /// add_master_key
    /// 	 : ENCRYPTION  BY  (SERVICE  MASTER  KEY | password_setting)
    /// </summary>
    public abstract partial class AstAddMasterKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"))));
        
        private static string _ruleValue = "ENCRYPTION  BY  (SERVICE  MASTER  KEY | password_setting)\r\n";
        
        private static string _ruleName = "add_master_key";
        
        /// <summary>
        /// add_master_key : ENCRYPTION BY SERVICE MASTER KEY 
        /// </summary>
        public partial class AstAddMasterKey1 : AstAddMasterKey
        {
            
            private static string _ruleName1 = "add_master_key";
            
            internal AstAddMasterKey1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddMasterKey(this);
            }
        }
        /// <summary>
        /// add_master_key : ENCRYPTION BY password_setting 
        /// </summary>
        public partial class AstAddMasterKey2 : AstAddMasterKey
        {
            
            private static string _ruleName1 = "add_master_key";
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstAddMasterKey2(ParserRuleContext ctx, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddMasterKey(this);
            }
        }
        

        
        internal AstAddMasterKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddMasterKey(Position p) : 
                base(p)
        {
        }
        
        internal AstAddMasterKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAddMasterKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAddMasterKey.AstAddMasterKey1(ctx);
            }
            if ((index == 2))
            {
                return new AstAddMasterKey.AstAddMasterKey2(ctx, list.Get<AstPasswordSetting>(0));
            }
            return null;
        }
        
        /// <summary>
        /// add_master_key : 
        ///    ENCRYPTION BY SERVICE MASTER KEY 
        /// </summary>
        public static AstAddMasterKey AddMasterKey(ParserRuleContext ctx)
        {
            AstAddMasterKey.AstAddMasterKey1 result = new AstAddMasterKey.AstAddMasterKey1(ctx);
            return result;
        }
        
        /// <summary>
        /// add_master_key : 
        ///    ENCRYPTION BY password_setting 
        /// </summary>
        public static AstAddMasterKey AddMasterKey(ParserRuleContext ctx, AstPasswordSetting passwordSetting)
        {
            AstAddMasterKey.AstAddMasterKey2 result = new AstAddMasterKey.AstAddMasterKey2(ctx, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// message_validation_value
    /// 	 : message_validation_value_enum
    /// 	 | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id
    /// </summary>
    public abstract partial class AstMessageValidationValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstMessageValidationValueEnum), false, false, "message_validation_value_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaCollectionId), false, false, "schema_collection_id"))));
        
        private static string _ruleValue = "message_validation_value_enum\r\n | VALID_XML  WITH  SCHEMA  COLLECTION  schema_col" +
            "lection_id\r\n";
        
        private static string _ruleName = "message_validation_value";
        
        /// <summary>
        /// message_validation_value : message_validation_value_enum 
        /// </summary>
        public partial class AstMessageValidationValue1 : AstMessageValidationValue
        {
            
            private static string _ruleName1 = "message_validation_value";
            
            private AstMessageValidationValueEnum _messageValidationValueEnum;
            
            internal AstMessageValidationValue1(ParserRuleContext ctx, AstMessageValidationValueEnum messageValidationValueEnum) : 
                    base(ctx)
            {
                _messageValidationValueEnum = messageValidationValueEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMessageValidationValueEnum MessageValidationValueEnum
            {
                get
                {
                    return _messageValidationValueEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMessageValidationValue(this);
            }
        }
        /// <summary>
        /// message_validation_value : VALID_XML WITH SCHEMA COLLECTION schema_collection_id 
        /// </summary>
        public partial class AstMessageValidationValue2 : AstMessageValidationValue
        {
            
            private static string _ruleName1 = "message_validation_value";
            
            private AstSchemaCollectionId _schemaCollectionId;
            
            internal AstMessageValidationValue2(ParserRuleContext ctx, AstSchemaCollectionId schemaCollectionId) : 
                    base(ctx)
            {
                _schemaCollectionId = schemaCollectionId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaCollectionId SchemaCollectionId
            {
                get
                {
                    return _schemaCollectionId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMessageValidationValue(this);
            }
        }
        

        
        internal AstMessageValidationValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMessageValidationValue(Position p) : 
                base(p)
        {
        }
        
        internal AstMessageValidationValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstMessageValidationValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstMessageValidationValue.AstMessageValidationValue1(ctx, list.Get<AstMessageValidationValueEnum>(0));
            }
            if ((index == 2))
            {
                return new AstMessageValidationValue.AstMessageValidationValue2(ctx, list.Get<AstSchemaCollectionId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// message_validation_value : 
        ///    message_validation_value_enum 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(ParserRuleContext ctx, AstMessageValidationValueEnum messageValidationValueEnum)
        {
            AstMessageValidationValue.AstMessageValidationValue1 result = new AstMessageValidationValue.AstMessageValidationValue1(ctx, messageValidationValueEnum);
            return result;
        }
        
        /// <summary>
        /// message_validation_value : 
        ///    VALID_XML WITH SCHEMA COLLECTION schema_collection_id 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(ParserRuleContext ctx, AstSchemaCollectionId schemaCollectionId)
        {
            AstMessageValidationValue.AstMessageValidationValue2 result = new AstMessageValidationValue.AstMessageValidationValue2(ctx, schemaCollectionId);
            return result;
        }
    }
    
    /// <summary>
    /// create_resource_pool_infos
    /// 	 : WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = decimal)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = decimal)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = decimal)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  resource_affinity_scheduler_value)?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = decimal)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = decimal)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = decimal)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = decimal)?  RR_BRACKET
    /// </summary>
    public partial class AstCreateResourcePoolInfos : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstResourceAffinitySchedulerValue), false, false, "resource_affinity_scheduler_value"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstDecimal _minCpuPercent;
        
        private AstDecimal _maxCpuPercent;
        
        private AstDecimal _capCpuPercent;
        
        private AstResourceAffinitySchedulerValue _resourceAffinitySchedulerValue;
        
        private AstDecimal _minMemoryPercent;
        
        private AstDecimal _maxMemoryPercent;
        
        private AstDecimal _minTopsPercent;
        
        private AstDecimal _maxTopsPercent;
        
        private static string _ruleValue = @"WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = decimal)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = decimal)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = decimal)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  resource_affinity_scheduler_value)?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = decimal)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = decimal)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = decimal)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = decimal)?  RR_BRACKET
";
        
        private static string _ruleName = "create_resource_pool_infos";
        
        internal AstCreateResourcePoolInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateResourcePoolInfos(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateResourcePoolInfos(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateResourcePoolInfos(ParserRuleContext ctx, AstDecimal minCpuPercent, AstDecimal maxCpuPercent, AstDecimal capCpuPercent, AstResourceAffinitySchedulerValue resourceAffinitySchedulerValue, AstDecimal minMemoryPercent, AstDecimal maxMemoryPercent, AstDecimal minTopsPercent, AstDecimal maxTopsPercent) : 
                base(ctx)
        {
            _minCpuPercent = minCpuPercent;
            _maxCpuPercent = maxCpuPercent;
            _capCpuPercent = capCpuPercent;
            _resourceAffinitySchedulerValue = resourceAffinitySchedulerValue;
            _minMemoryPercent = minMemoryPercent;
            _maxMemoryPercent = maxMemoryPercent;
            _minTopsPercent = minTopsPercent;
            _maxTopsPercent = maxTopsPercent;
        }
        
        public virtual AstDecimal MinCpuPercent
        {
            get
            {
                return _minCpuPercent;
            }
        }
        
        public virtual AstDecimal MaxCpuPercent
        {
            get
            {
                return _maxCpuPercent;
            }
        }
        
        public virtual AstDecimal CapCpuPercent
        {
            get
            {
                return _capCpuPercent;
            }
        }
        
        public virtual AstResourceAffinitySchedulerValue ResourceAffinitySchedulerValue
        {
            get
            {
                return _resourceAffinitySchedulerValue;
            }
        }
        
        public virtual AstDecimal MinMemoryPercent
        {
            get
            {
                return _minMemoryPercent;
            }
        }
        
        public virtual AstDecimal MaxMemoryPercent
        {
            get
            {
                return _maxMemoryPercent;
            }
        }
        
        public virtual AstDecimal MinTopsPercent
        {
            get
            {
                return _minTopsPercent;
            }
        }
        
        public virtual AstDecimal MaxTopsPercent
        {
            get
            {
                return _maxTopsPercent;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePoolInfos(this);
        }
        
        public static AstCreateResourcePoolInfos Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCreateResourcePoolInfos(ctx, list.Get<AstDecimal>(0), list.Get<AstDecimal>(1), list.Get<AstDecimal>(2), list.Get<AstResourceAffinitySchedulerValue>(3), list.Get<AstDecimal>(4), list.Get<AstDecimal>(5), list.Get<AstDecimal>(6), list.Get<AstDecimal>(7));
        }
        
        /// <summary>
        /// create_resource_pool_infos : 
        ///    WITH ( COMMA? MIN_CPU_PERCENT EQUAL min_cpu_percent=decimal COMMA? MAX_CPU_PERCENT EQUAL max_cpu_percent=decimal COMMA? CAP_CPU_PERCENT EQUAL cap_cpu_percent=decimal COMMA? AFFINITY SCHEDULER EQUAL resource_affinity_scheduler_value COMMA? MIN_MEMORY_PERCENT EQUAL min_memory_percent=decimal COMMA? MAX_MEMORY_PERCENT EQUAL max_memory_percent=decimal COMMA? MIN_IOPS_PER_VOLUME EQUAL min_tops_percent=decimal COMMA? MAX_IOPS_PER_VOLUME EQUAL max_tops_percent=decimal ) 
        /// </summary>
        public static AstCreateResourcePoolInfos CreateResourcePoolInfos(ParserRuleContext ctx, AstDecimal minCpuPercent, AstDecimal maxCpuPercent, AstDecimal capCpuPercent, AstResourceAffinitySchedulerValue resourceAffinitySchedulerValue, AstDecimal minMemoryPercent, AstDecimal maxMemoryPercent, AstDecimal minTopsPercent, AstDecimal maxTopsPercent)
        {
            AstCreateResourcePoolInfos result = new AstCreateResourcePoolInfos(ctx, minCpuPercent, maxCpuPercent, capCpuPercent, resourceAffinitySchedulerValue, minMemoryPercent, maxMemoryPercent, minTopsPercent, maxTopsPercent);
            return result;
        }
    }
    
    /// <summary>
    /// resource_affinity_scheduler_value
    /// 	 : AUTO
    /// 	 | LR_BRACKET  decimal_ranges  RR_BRACKET
    /// 	 | NUMANODE  EQUAL  LR_BRACKET  decimal_ranges  RR_BRACKET
    /// </summary>
    public abstract partial class AstResourceAffinitySchedulerValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalRanges), false, false, "decimal_ranges")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalRanges), false, false, "decimal_ranges"))));
        
        private static string _ruleValue = "AUTO\r\n | LR_BRACKET  decimal_ranges  RR_BRACKET\r\n | NUMANODE  EQUAL  LR_BRACKET  " +
            "decimal_ranges  RR_BRACKET\r\n";
        
        private static string _ruleName = "resource_affinity_scheduler_value";
        
        /// <summary>
        /// resource_affinity_scheduler_value : AUTO 
        /// </summary>
        public partial class AstResourceAffinitySchedulerValue1 : AstResourceAffinitySchedulerValue
        {
            
            private static string _ruleName1 = "resource_affinity_scheduler_value";
            
            internal AstResourceAffinitySchedulerValue1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResourceAffinitySchedulerValue(this);
            }
        }
        /// <summary>
        /// resource_affinity_scheduler_value : LR_BRACKET decimal_ranges RR_BRACKET 
        /// </summary>
        public partial class AstResourceAffinitySchedulerValue2 : AstResourceAffinitySchedulerValue
        {
            
            private static string _ruleName1 = "resource_affinity_scheduler_value";
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstResourceAffinitySchedulerValue2(ParserRuleContext ctx, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRanges = decimalRanges;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResourceAffinitySchedulerValue(this);
            }
        }
        /// <summary>
        /// resource_affinity_scheduler_value : NUMANODE EQUAL LR_BRACKET decimal_ranges RR_BRACKET 
        /// </summary>
        public partial class AstResourceAffinitySchedulerValue3 : AstResourceAffinitySchedulerValue
        {
            
            private static string _ruleName1 = "resource_affinity_scheduler_value";
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstResourceAffinitySchedulerValue3(ParserRuleContext ctx, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRanges = decimalRanges;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResourceAffinitySchedulerValue(this);
            }
        }
        

        
        internal AstResourceAffinitySchedulerValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstResourceAffinitySchedulerValue(Position p) : 
                base(p)
        {
        }
        
        internal AstResourceAffinitySchedulerValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstResourceAffinitySchedulerValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue1(ctx);
            }
            if ((index == 2))
            {
                return new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue2(ctx, list.Get<AstDecimalRanges>(0));
            }
            if ((index == 3))
            {
                return new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue3(ctx, list.Get<AstDecimalRanges>(0));
            }
            return null;
        }
        
        /// <summary>
        /// resource_affinity_scheduler_value : 
        ///    AUTO 
        /// </summary>
        public static AstResourceAffinitySchedulerValue ResourceAffinitySchedulerValue(ParserRuleContext ctx)
        {
            AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue1 result = new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue1(ctx);
            return result;
        }
        
        /// <summary>
        /// resource_affinity_scheduler_value : 
        ///    ( decimal_ranges ) 
        /// </summary>
        public static AstResourceAffinitySchedulerValue ResourceAffinitySchedulerValue(ParserRuleContext ctx, AstDecimalRanges decimalRanges)
        {
            AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue2 result = new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue2(ctx, decimalRanges);
            return result;
        }
    }
    
    /// <summary>
    /// alter_resource_governor
    /// 	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)
    /// </summary>
    public abstract partial class AstAlterResourceGovernor : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDisableReconfigure), false, false, "disable_reconfigure")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaFuncProcRef), false, false, "schema_func_proc_ref")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = @"ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)
";
        
        private static string _ruleName = "alter_resource_governor";
        
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR disable_reconfigure 
        /// </summary>
        public partial class AstAlterResourceGovernor1 : AstAlterResourceGovernor
        {
            
            private static string _ruleName1 = "alter_resource_governor";
            
            private AstDisableReconfigure _disableReconfigure;
            
            internal AstAlterResourceGovernor1(ParserRuleContext ctx, AstDisableReconfigure disableReconfigure) : 
                    base(ctx)
            {
                _disableReconfigure = disableReconfigure;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDisableReconfigure DisableReconfigure
            {
                get
                {
                    return _disableReconfigure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR WITH LR_BRACKET CLASSIFIER_FUNCTION EQUAL schema_func_proc_ref RR_BRACKET 
        /// </summary>
        public partial class AstAlterResourceGovernor2 : AstAlterResourceGovernor
        {
            
            private static string _ruleName1 = "alter_resource_governor";
            
            private AstSchemaFuncProcRef _schemaFuncProcRef;
            
            internal AstAlterResourceGovernor2(ParserRuleContext ctx, AstSchemaFuncProcRef schemaFuncProcRef) : 
                    base(ctx)
            {
                _schemaFuncProcRef = schemaFuncProcRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaFuncProcRef SchemaFuncProcRef
            {
                get
                {
                    return _schemaFuncProcRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR WITH LR_BRACKET CLASSIFIER_FUNCTION EQUAL NULL_ RR_BRACKET 
        /// </summary>
        public partial class AstAlterResourceGovernor3 : AstAlterResourceGovernor
        {
            
            private static string _ruleName1 = "alter_resource_governor";
            
            internal AstAlterResourceGovernor3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR RESET STATISTICS 
        /// </summary>
        public partial class AstAlterResourceGovernor4 : AstAlterResourceGovernor
        {
            
            private static string _ruleName1 = "alter_resource_governor";
            
            internal AstAlterResourceGovernor4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR WITH LR_BRACKET MAX_OUTSTANDING_IO_PER_VOLUME EQUAL max_outstanding_io_per_volume=decimal RR_BRACKET 
        /// </summary>
        public partial class AstAlterResourceGovernor5 : AstAlterResourceGovernor
        {
            
            private static string _ruleName1 = "alter_resource_governor";
            
            private AstDecimal _maxOutstandingIoPerVolume;
            
            internal AstAlterResourceGovernor5(ParserRuleContext ctx, AstDecimal maxOutstandingIoPerVolume) : 
                    base(ctx)
            {
                _maxOutstandingIoPerVolume = maxOutstandingIoPerVolume;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxOutstandingIoPerVolume
            {
                get
                {
                    return _maxOutstandingIoPerVolume;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        

        
        internal AstAlterResourceGovernor(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterResourceGovernor(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterResourceGovernor(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterResourceGovernor Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor1(ctx, list.Get<AstDisableReconfigure>(0));
            }
            if ((index == 2))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor2(ctx, list.Get<AstSchemaFuncProcRef>(0));
            }
            if ((index == 3))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor3(ctx);
            }
            if ((index == 4))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor4(ctx);
            }
            if ((index == 5))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor5(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR disable_reconfigure 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx, AstDisableReconfigure disableReconfigure)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor1 result = new AstAlterResourceGovernor.AstAlterResourceGovernor1(ctx, disableReconfigure);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( CLASSIFIER_FUNCTION EQUAL schema_func_proc_ref ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx, AstSchemaFuncProcRef schemaFuncProcRef)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor2 result = new AstAlterResourceGovernor.AstAlterResourceGovernor2(ctx, schemaFuncProcRef);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( CLASSIFIER_FUNCTION EQUAL NULL_ ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor3 result = new AstAlterResourceGovernor.AstAlterResourceGovernor3(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( MAX_OUTSTANDING_IO_PER_VOLUME EQUAL max_outstanding_io_per_volume=decimal ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx, AstDecimal maxOutstandingIoPerVolume)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor5 result = new AstAlterResourceGovernor.AstAlterResourceGovernor5(ctx, maxOutstandingIoPerVolume);
            return result;
        }
    }
    
    /// <summary>
    /// alter_db_role
    /// 	 : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  database_id | WITH  NAME  EQUAL  new_role_name = role_id)
    /// </summary>
    public abstract partial class AstAlterDbRole : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRoleId), false, false, "role_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAddDrop), false, false, "add_drop"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseId), false, false, "database_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstRoleId), false, false, "role_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstRoleId), false, false, "role_id"))));
        
        private static string _ruleValue = "ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  database_id | WITH  NAME" +
            "  EQUAL  new_role_name = role_id)\r\n";
        
        private static string _ruleName = "alter_db_role";
        
        /// <summary>
        /// alter_db_role : ALTER ROLE old_role_name=role_id add_drop MEMBER database_id 
        /// </summary>
        public partial class AstAlterDbRole1 : AstAlterDbRole
        {
            
            private static string _ruleName1 = "alter_db_role";
            
            private AstRoleId _oldRoleName;
            
            private AstAddDrop _addDrop;
            
            private AstDatabaseId _databaseId;
            
            internal AstAlterDbRole1(ParserRuleContext ctx, AstRoleId oldRoleName, AstAddDrop addDrop, AstDatabaseId databaseId) : 
                    base(ctx)
            {
                _oldRoleName = oldRoleName;
                _addDrop = addDrop;
                _databaseId = databaseId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRoleId OldRoleName
            {
                get
                {
                    return _oldRoleName;
                }
            }
            
            public virtual AstAddDrop AddDrop
            {
                get
                {
                    return _addDrop;
                }
            }
            
            public virtual AstDatabaseId DatabaseId
            {
                get
                {
                    return _databaseId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDbRole(this);
            }
        }
        /// <summary>
        /// alter_db_role : ALTER ROLE old_role_name=role_id WITH NAME EQUAL new_role_name=role_id 
        /// </summary>
        public partial class AstAlterDbRole2 : AstAlterDbRole
        {
            
            private static string _ruleName1 = "alter_db_role";
            
            private AstRoleId _oldRoleName;
            
            private AstRoleId _newRoleName;
            
            internal AstAlterDbRole2(ParserRuleContext ctx, AstRoleId oldRoleName, AstRoleId newRoleName) : 
                    base(ctx)
            {
                _oldRoleName = oldRoleName;
                _newRoleName = newRoleName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRoleId OldRoleName
            {
                get
                {
                    return _oldRoleName;
                }
            }
            
            public virtual AstRoleId NewRoleName
            {
                get
                {
                    return _newRoleName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDbRole(this);
            }
        }
        

        
        internal AstAlterDbRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterDbRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterDbRole(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterDbRole Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterDbRole.AstAlterDbRole1(ctx, list.Get<AstRoleId>(0), list.Get<AstAddDrop>(1), list.Get<AstDatabaseId>(2));
            }
            if ((index == 2))
            {
                return new AstAlterDbRole.AstAlterDbRole2(ctx, list.Get<AstRoleId>(0), list.Get<AstRoleId>(1));
            }
            return null;
        }
        
        /// <summary>
        /// alter_db_role : 
        ///    ALTER ROLE old_role_name=role_id add_drop MEMBER database_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(ParserRuleContext ctx, AstRoleId oldRoleName, AstAddDrop addDrop, AstDatabaseId databaseId)
        {
            AstAlterDbRole.AstAlterDbRole1 result = new AstAlterDbRole.AstAlterDbRole1(ctx, oldRoleName, addDrop, databaseId);
            return result;
        }
        
        /// <summary>
        /// alter_db_role : 
        ///    ALTER ROLE old_role_name=role_id WITH NAME EQUAL new_role_name=role_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(ParserRuleContext ctx, AstRoleId oldRoleName, AstRoleId newRoleName)
        {
            AstAlterDbRole.AstAlterDbRole2 result = new AstAlterDbRole.AstAlterDbRole2(ctx, oldRoleName, newRoleName);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_name
    /// 	 : schema_identifier  schema_authorization?
    /// 	 | schema_identifier?  schema_authorization
    /// </summary>
    public abstract partial class AstCreateSchemaName : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaIdentifier), false, false, "schema_identifier"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaAuthorization), true, false, "schema_authorization")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaIdentifier), true, false, "schema_identifier"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaAuthorization), false, false, "schema_authorization"))));
        
        private static string _ruleValue = "schema_identifier  schema_authorization?\r\n | schema_identifier?  schema_authoriza" +
            "tion\r\n";
        
        private static string _ruleName = "create_schema_name";
        
        /// <summary>
        /// create_schema_name : schema_identifier schema_authorization? 
        /// </summary>
        public partial class AstCreateSchemaName1 : AstCreateSchemaName
        {
            
            private static string _ruleName1 = "create_schema_name";
            
            private AstSchemaIdentifier _schemaIdentifier;
            
            private AstSchemaAuthorization? _schemaAuthorization;
            
            internal AstCreateSchemaName1(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier, AstSchemaAuthorization? schemaAuthorization) : 
                    base(ctx)
            {
                _schemaIdentifier = schemaIdentifier;
                _schemaAuthorization = schemaAuthorization;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaIdentifier SchemaIdentifier
            {
                get
                {
                    return _schemaIdentifier;
                }
            }
            
            public virtual AstSchemaAuthorization? SchemaAuthorization
            {
                get
                {
                    return _schemaAuthorization;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaName(this);
            }
        }
        /// <summary>
        /// create_schema_name : schema_identifier? schema_authorization 
        /// </summary>
        public partial class AstCreateSchemaName2 : AstCreateSchemaName
        {
            
            private static string _ruleName1 = "create_schema_name";
            
            private AstSchemaIdentifier? _schemaIdentifier;
            
            private AstSchemaAuthorization _schemaAuthorization;
            
            internal AstCreateSchemaName2(ParserRuleContext ctx, AstSchemaIdentifier? schemaIdentifier, AstSchemaAuthorization schemaAuthorization) : 
                    base(ctx)
            {
                _schemaIdentifier = schemaIdentifier;
                _schemaAuthorization = schemaAuthorization;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaIdentifier? SchemaIdentifier
            {
                get
                {
                    return _schemaIdentifier;
                }
            }
            
            public virtual AstSchemaAuthorization SchemaAuthorization
            {
                get
                {
                    return _schemaAuthorization;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaName(this);
            }
        }
        

        
        internal AstCreateSchemaName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaName(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaName(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateSchemaName Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateSchemaName.AstCreateSchemaName1(ctx, list.Get<AstSchemaIdentifier>(0), list.Get<AstSchemaAuthorization?>(1));
            }
            if ((index == 2))
            {
                return new AstCreateSchemaName.AstCreateSchemaName2(ctx, list.Get<AstSchemaIdentifier?>(0), list.Get<AstSchemaAuthorization>(1));
            }
            return null;
        }
        
        /// <summary>
        /// create_schema_name : 
        ///    schema_identifier schema_authorization? 
        /// </summary>
        public static AstCreateSchemaName CreateSchemaName(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier, AstSchemaAuthorization schemaAuthorization)
        {
            AstCreateSchemaName.AstCreateSchemaName1 result = new AstCreateSchemaName.AstCreateSchemaName1(ctx, schemaIdentifier, schemaAuthorization);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_target
    /// 	 : create_table
    /// 	 | create_view
    /// 	 | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  TO  owner_id
    /// 	 | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  FROM  owner_id
    /// </summary>
    public abstract partial class AstCreateSchemaTarget : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstGrantDeny), false, false, "grant_deny"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEnumDml), false, false, "enum_dml"), new Bb.Asts.AstRuleMatcherItem(typeof(AstObjectIdentifier), false, false, "object_identifier"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOwnerId), false, false, "owner_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstEnumDml), false, false, "enum_dml"), new Bb.Asts.AstRuleMatcherItem(typeof(AstObjectIdentifier), false, false, "object_identifier"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOwnerId), false, false, "owner_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateTable), false, false, "create_table")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateView), false, false, "create_view"))));
        
        private static string _ruleValue = "create_table\r\n | create_view\r\n | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)" +
            "?  object_identifier  TO  owner_id\r\n | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COL" +
            "ON)?  object_identifier  FROM  owner_id\r\n";
        
        private static string _ruleName = "create_schema_target";
        
        /// <summary>
        /// create_schema_target : create_table 
        /// </summary>
        public partial class AstCreateSchemaTarget1 : AstCreateSchemaTarget
        {
            
            private static string _ruleName1 = "create_schema_target";
            
            private AstCreateTable _createTable;
            
            internal AstCreateSchemaTarget1(ParserRuleContext ctx, AstCreateTable createTable) : 
                    base(ctx)
            {
                _createTable = createTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateTable CreateTable
            {
                get
                {
                    return _createTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : create_view 
        /// </summary>
        public partial class AstCreateSchemaTarget2 : AstCreateSchemaTarget
        {
            
            private static string _ruleName1 = "create_schema_target";
            
            private AstCreateView _createView;
            
            internal AstCreateSchemaTarget2(ParserRuleContext ctx, AstCreateView createView) : 
                    base(ctx)
            {
                _createView = createView;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateView CreateView
            {
                get
                {
                    return _createView;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : grant_deny enum_dml ON SCHEMA DOUBLE_COLON object_identifier TO owner_id 
        /// </summary>
        public partial class AstCreateSchemaTarget3 : AstCreateSchemaTarget
        {
            
            private static string _ruleName1 = "create_schema_target";
            
            private AstGrantDeny _grantDeny;
            
            private AstEnumDml _enumDml;
            
            private AstObjectIdentifier _objectIdentifier;
            
            private AstOwnerId _ownerId;
            
            internal AstCreateSchemaTarget3(ParserRuleContext ctx, AstGrantDeny grantDeny, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId) : 
                    base(ctx)
            {
                _grantDeny = grantDeny;
                _enumDml = enumDml;
                _objectIdentifier = objectIdentifier;
                _ownerId = ownerId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGrantDeny GrantDeny
            {
                get
                {
                    return _grantDeny;
                }
            }
            
            public virtual AstEnumDml EnumDml
            {
                get
                {
                    return _enumDml;
                }
            }
            
            public virtual AstObjectIdentifier ObjectIdentifier
            {
                get
                {
                    return _objectIdentifier;
                }
            }
            
            public virtual AstOwnerId OwnerId
            {
                get
                {
                    return _ownerId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : REVOKE enum_dml ON SCHEMA DOUBLE_COLON object_identifier FROM owner_id 
        /// </summary>
        public partial class AstCreateSchemaTarget4 : AstCreateSchemaTarget
        {
            
            private static string _ruleName1 = "create_schema_target";
            
            private AstEnumDml _enumDml;
            
            private AstObjectIdentifier _objectIdentifier;
            
            private AstOwnerId _ownerId;
            
            internal AstCreateSchemaTarget4(ParserRuleContext ctx, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId) : 
                    base(ctx)
            {
                _enumDml = enumDml;
                _objectIdentifier = objectIdentifier;
                _ownerId = ownerId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEnumDml EnumDml
            {
                get
                {
                    return _enumDml;
                }
            }
            
            public virtual AstObjectIdentifier ObjectIdentifier
            {
                get
                {
                    return _objectIdentifier;
                }
            }
            
            public virtual AstOwnerId OwnerId
            {
                get
                {
                    return _ownerId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        

        
        internal AstCreateSchemaTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaTarget(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateSchemaTarget Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget1(ctx, list.Get<AstCreateTable>(0));
            }
            if ((index == 2))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget2(ctx, list.Get<AstCreateView>(0));
            }
            if ((index == 3))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget3(ctx, list.Get<AstGrantDeny>(0), list.Get<AstEnumDml>(1), list.Get<AstObjectIdentifier>(2), list.Get<AstOwnerId>(3));
            }
            if ((index == 4))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget4(ctx, list.Get<AstEnumDml>(0), list.Get<AstObjectIdentifier>(1), list.Get<AstOwnerId>(2));
            }
            return null;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    create_table 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstCreateTable createTable)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget1 result = new AstCreateSchemaTarget.AstCreateSchemaTarget1(ctx, createTable);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    create_view 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstCreateView createView)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget2 result = new AstCreateSchemaTarget.AstCreateSchemaTarget2(ctx, createView);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    grant_deny enum_dml ON SCHEMA :: object_identifier TO owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstGrantDeny grantDeny, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget3 result = new AstCreateSchemaTarget.AstCreateSchemaTarget3(ctx, grantDeny, enumDml, objectIdentifier, ownerId);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    REVOKE enum_dml ON SCHEMA :: object_identifier FROM owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget4 result = new AstCreateSchemaTarget.AstCreateSchemaTarget4(ctx, enumDml, objectIdentifier, ownerId);
            return result;
        }
    }
    
    /// <summary>
    /// schema_table_ref_impact
    /// 	 : AFTER  insert_update
    /// 	 | BEFORE  update_delate
    /// </summary>
    public abstract partial class AstSchemaTableRefImpact : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstInsertUpdate), false, false, "insert_update")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateDelate), false, false, "update_delate"))));
        
        private static string _ruleValue = "AFTER  insert_update\r\n | BEFORE  update_delate\r\n";
        
        private static string _ruleName = "schema_table_ref_impact";
        
        /// <summary>
        /// schema_table_ref_impact : AFTER insert_update 
        /// </summary>
        public partial class AstSchemaTableRefImpact1 : AstSchemaTableRefImpact
        {
            
            private static string _ruleName1 = "schema_table_ref_impact";
            
            private AstInsertUpdate _insertUpdate;
            
            internal AstSchemaTableRefImpact1(ParserRuleContext ctx, AstInsertUpdate insertUpdate) : 
                    base(ctx)
            {
                _insertUpdate = insertUpdate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstInsertUpdate InsertUpdate
            {
                get
                {
                    return _insertUpdate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaTableRefImpact(this);
            }
        }
        /// <summary>
        /// schema_table_ref_impact : BEFORE update_delate 
        /// </summary>
        public partial class AstSchemaTableRefImpact2 : AstSchemaTableRefImpact
        {
            
            private static string _ruleName1 = "schema_table_ref_impact";
            
            private AstUpdateDelate _updateDelate;
            
            internal AstSchemaTableRefImpact2(ParserRuleContext ctx, AstUpdateDelate updateDelate) : 
                    base(ctx)
            {
                _updateDelate = updateDelate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUpdateDelate UpdateDelate
            {
                get
                {
                    return _updateDelate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaTableRefImpact(this);
            }
        }
        

        
        internal AstSchemaTableRefImpact(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSchemaTableRefImpact(Position p) : 
                base(p)
        {
        }
        
        internal AstSchemaTableRefImpact(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSchemaTableRefImpact Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSchemaTableRefImpact.AstSchemaTableRefImpact1(ctx, list.Get<AstInsertUpdate>(0));
            }
            if ((index == 2))
            {
                return new AstSchemaTableRefImpact.AstSchemaTableRefImpact2(ctx, list.Get<AstUpdateDelate>(0));
            }
            return null;
        }
        
        /// <summary>
        /// schema_table_ref_impact : 
        ///    AFTER insert_update 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(ParserRuleContext ctx, AstInsertUpdate insertUpdate)
        {
            AstSchemaTableRefImpact.AstSchemaTableRefImpact1 result = new AstSchemaTableRefImpact.AstSchemaTableRefImpact1(ctx, insertUpdate);
            return result;
        }
        
        /// <summary>
        /// schema_table_ref_impact : 
        ///    BEFORE update_delate 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(ParserRuleContext ctx, AstUpdateDelate updateDelate)
        {
            AstSchemaTableRefImpact.AstSchemaTableRefImpact2 result = new AstSchemaTableRefImpact.AstSchemaTableRefImpact2(ctx, updateDelate);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_restart
    /// 	 : RESTART  (WITH  decimal)?
    /// </summary>
    public partial class AstAlterSequenceRestart : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "RESTART  (WITH  decimal)?\r\n";
        
        private static string _ruleName = "alter_sequence_restart";
        
        internal AstAlterSequenceRestart(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceRestart(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceRestart(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstAlterSequenceRestart(ParserRuleContext ctx, AstDecimal @decimal) : 
                base(ctx)
        {
            _decimal = @decimal;
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return _decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceRestart(this);
        }
        
        public static AstAlterSequenceRestart Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstAlterSequenceRestart(ctx, list.Get<AstDecimal>(0));
        }
        
        /// <summary>
        /// alter_sequence_restart : 
        ///    RESTART WITH decimal 
        /// </summary>
        public static AstAlterSequenceRestart AlterSequenceRestart(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterSequenceRestart result = new AstAlterSequenceRestart(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_increment
    /// 	 : INCREMENT  BY  sequnce_increment = decimal
    /// </summary>
    public partial class AstAlterSequenceIncrement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstDecimal _sequnceIncrement;
        
        private static string _ruleValue = "INCREMENT  BY  sequnce_increment = decimal\r\n";
        
        private static string _ruleName = "alter_sequence_increment";
        
        internal AstAlterSequenceIncrement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceIncrement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceIncrement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstAlterSequenceIncrement(ParserRuleContext ctx, AstDecimal sequnceIncrement) : 
                base(ctx)
        {
            _sequnceIncrement = sequnceIncrement;
        }
        
        public virtual AstDecimal SequnceIncrement
        {
            get
            {
                return _sequnceIncrement;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceIncrement(this);
        }
        
        public static AstAlterSequenceIncrement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstAlterSequenceIncrement(ctx, list.Get<AstDecimal>(0));
        }
        
        /// <summary>
        /// alter_sequence_increment : 
        ///    INCREMENT BY sequnce_increment=decimal 
        /// </summary>
        public static AstAlterSequenceIncrement AlterSequenceIncrement(ParserRuleContext ctx, AstDecimal sequnceIncrement)
        {
            AstAlterSequenceIncrement result = new AstAlterSequenceIncrement(ctx, sequnceIncrement);
            return result;
        }
    }
    
    /// <summary>
    /// sequence_cache
    /// 	 : (CACHE  decimal | NO  CACHE)
    /// </summary>
    public abstract partial class AstSequenceCache : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "(CACHE  decimal | NO  CACHE)\r\n";
        
        private static string _ruleName = "sequence_cache";
        
        /// <summary>
        /// sequence_cache : CACHE decimal 
        /// </summary>
        public partial class AstSequenceCache1 : AstSequenceCache
        {
            
            private static string _ruleName1 = "sequence_cache";
            
            private AstDecimal _decimal;
            
            internal AstSequenceCache1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCache(this);
            }
        }
        /// <summary>
        /// sequence_cache : NO CACHE 
        /// </summary>
        public partial class AstSequenceCache2 : AstSequenceCache
        {
            
            private static string _ruleName1 = "sequence_cache";
            
            internal AstSequenceCache2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCache(this);
            }
        }
        

        
        internal AstSequenceCache(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSequenceCache(Position p) : 
                base(p)
        {
        }
        
        internal AstSequenceCache(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSequenceCache Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSequenceCache.AstSequenceCache1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstSequenceCache.AstSequenceCache2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// sequence_cache : 
        ///    CACHE decimal 
        /// </summary>
        public static AstSequenceCache SequenceCache(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSequenceCache.AstSequenceCache1 result = new AstSequenceCache.AstSequenceCache1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// sequence_cache : 
        ///    NO CACHE 
        /// </summary>
        public static AstSequenceCache SequenceCache(ParserRuleContext ctx)
        {
            AstSequenceCache.AstSequenceCache2 result = new AstSequenceCache.AstSequenceCache2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_max_value
    /// 	 : (MAXVALUE  decimal | NO  MAXVALUE)?
    /// </summary>
    public abstract partial class AstAlterSequenceMaxValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "(MAXVALUE  decimal | NO  MAXVALUE)?\r\n";
        
        private static string _ruleName = "alter_sequence_max_value";
        
        /// <summary>
        /// alter_sequence_max_value : MAXVALUE decimal 
        /// </summary>
        public partial class AstAlterSequenceMaxValue1 : AstAlterSequenceMaxValue
        {
            
            private static string _ruleName1 = "alter_sequence_max_value";
            
            private AstDecimal _decimal;
            
            internal AstAlterSequenceMaxValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMaxValue(this);
            }
        }
        /// <summary>
        /// alter_sequence_max_value : NO MAXVALUE 
        /// </summary>
        public partial class AstAlterSequenceMaxValue2 : AstAlterSequenceMaxValue
        {
            
            private static string _ruleName1 = "alter_sequence_max_value";
            
            internal AstAlterSequenceMaxValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMaxValue(this);
            }
        }
        

        
        internal AstAlterSequenceMaxValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMaxValue(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMaxValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterSequenceMaxValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// alter_sequence_max_value : 
        ///    MAXVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMaxValue AlterSequenceMaxValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterSequenceMaxValue.AstAlterSequenceMaxValue1 result = new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_sequence_max_value : 
        ///    NO MAXVALUE 
        /// </summary>
        public static AstAlterSequenceMaxValue AlterSequenceMaxValue(ParserRuleContext ctx)
        {
            AstAlterSequenceMaxValue.AstAlterSequenceMaxValue2 result = new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_min_value
    /// 	 : MINVALUE  decimal
    /// 	 | NO  MINVALUE
    /// </summary>
    public abstract partial class AstAlterSequenceMinValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "MINVALUE  decimal\r\n | NO  MINVALUE\r\n";
        
        private static string _ruleName = "alter_sequence_min_value";
        
        /// <summary>
        /// alter_sequence_min_value : MINVALUE decimal 
        /// </summary>
        public partial class AstAlterSequenceMinValue1 : AstAlterSequenceMinValue
        {
            
            private static string _ruleName1 = "alter_sequence_min_value";
            
            private AstDecimal _decimal;
            
            internal AstAlterSequenceMinValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMinValue(this);
            }
        }
        /// <summary>
        /// alter_sequence_min_value : NO MINVALUE 
        /// </summary>
        public partial class AstAlterSequenceMinValue2 : AstAlterSequenceMinValue
        {
            
            private static string _ruleName1 = "alter_sequence_min_value";
            
            internal AstAlterSequenceMinValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMinValue(this);
            }
        }
        

        
        internal AstAlterSequenceMinValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMinValue(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMinValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterSequenceMinValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterSequenceMinValue.AstAlterSequenceMinValue1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstAlterSequenceMinValue.AstAlterSequenceMinValue2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// alter_sequence_min_value : 
        ///    MINVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMinValue AlterSequenceMinValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterSequenceMinValue.AstAlterSequenceMinValue1 result = new AstAlterSequenceMinValue.AstAlterSequenceMinValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_sequence_min_value : 
        ///    NO MINVALUE 
        /// </summary>
        public static AstAlterSequenceMinValue AlterSequenceMinValue(ParserRuleContext ctx)
        {
            AstAlterSequenceMinValue.AstAlterSequenceMinValue2 result = new AstAlterSequenceMinValue.AstAlterSequenceMinValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_min_value
    /// 	 : MINVALUE  real?
    /// 	 | NO  MINVALUE
    /// </summary>
    public abstract partial class AstCreateSequenceMinValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstReal), true, false, "real"))));
        
        private static string _ruleValue = "MINVALUE  real?\r\n | NO  MINVALUE\r\n";
        
        private static string _ruleName = "create_sequence_min_value";
        
        /// <summary>
        /// create_sequence_min_value : MINVALUE real? 
        /// </summary>
        public partial class AstCreateSequenceMinValue1 : AstCreateSequenceMinValue
        {
            
            private static string _ruleName1 = "create_sequence_min_value";
            
            private AstReal? _real;
            
            internal AstCreateSequenceMinValue1(ParserRuleContext ctx, AstReal? real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReal? Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMinValue(this);
            }
        }
        /// <summary>
        /// create_sequence_min_value : NO MINVALUE 
        /// </summary>
        public partial class AstCreateSequenceMinValue2 : AstCreateSequenceMinValue
        {
            
            private static string _ruleName1 = "create_sequence_min_value";
            
            internal AstCreateSequenceMinValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMinValue(this);
            }
        }
        

        
        internal AstCreateSequenceMinValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMinValue(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMinValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateSequenceMinValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateSequenceMinValue.AstCreateSequenceMinValue1(ctx, list.Get<AstReal?>(0));
            }
            if ((index == 2))
            {
                return new AstCreateSequenceMinValue.AstCreateSequenceMinValue2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// create_sequence_min_value : 
        ///    MINVALUE real? 
        /// </summary>
        public static AstCreateSequenceMinValue CreateSequenceMinValue(ParserRuleContext ctx, AstReal real)
        {
            AstCreateSequenceMinValue.AstCreateSequenceMinValue1 result = new AstCreateSequenceMinValue.AstCreateSequenceMinValue1(ctx, real);
            return result;
        }
        
        /// <summary>
        /// create_sequence_min_value : 
        ///    NO MINVALUE 
        /// </summary>
        public static AstCreateSequenceMinValue CreateSequenceMinValue(ParserRuleContext ctx)
        {
            AstCreateSequenceMinValue.AstCreateSequenceMinValue2 result = new AstCreateSequenceMinValue.AstCreateSequenceMinValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_max_value
    /// 	 : MAXVALUE  real?
    /// 	 | NO  MAXVALUE
    /// </summary>
    public abstract partial class AstCreateSequenceMaxValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstReal), true, false, "real"))));
        
        private static string _ruleValue = "MAXVALUE  real?\r\n | NO  MAXVALUE\r\n";
        
        private static string _ruleName = "create_sequence_max_value";
        
        /// <summary>
        /// create_sequence_max_value : MAXVALUE real? 
        /// </summary>
        public partial class AstCreateSequenceMaxValue1 : AstCreateSequenceMaxValue
        {
            
            private static string _ruleName1 = "create_sequence_max_value";
            
            private AstReal? _real;
            
            internal AstCreateSequenceMaxValue1(ParserRuleContext ctx, AstReal? real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReal? Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMaxValue(this);
            }
        }
        /// <summary>
        /// create_sequence_max_value : NO MAXVALUE 
        /// </summary>
        public partial class AstCreateSequenceMaxValue2 : AstCreateSequenceMaxValue
        {
            
            private static string _ruleName1 = "create_sequence_max_value";
            
            internal AstCreateSequenceMaxValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMaxValue(this);
            }
        }
        

        
        internal AstCreateSequenceMaxValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMaxValue(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMaxValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateSequenceMaxValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1(ctx, list.Get<AstReal?>(0));
            }
            if ((index == 2))
            {
                return new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// create_sequence_max_value : 
        ///    MAXVALUE real? 
        /// </summary>
        public static AstCreateSequenceMaxValue CreateSequenceMaxValue(ParserRuleContext ctx, AstReal real)
        {
            AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1 result = new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1(ctx, real);
            return result;
        }
        
        /// <summary>
        /// create_sequence_max_value : 
        ///    NO MAXVALUE 
        /// </summary>
        public static AstCreateSequenceMaxValue CreateSequenceMaxValue(ParserRuleContext ctx)
        {
            AstCreateSequenceMaxValue.AstCreateSequenceMaxValue2 result = new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_infos
    /// 	 : (TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public abstract partial class AstAlterServerAuditInfos : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerAuditFile), false, false, "server_audit_file"), new Bb.Asts.AstRuleMatcherItem(typeof(AstWithServerAuditFile), true, false, "with_server_audit_file"), new Bb.Asts.AstRuleMatcherItem(typeof(AstWhereServerAuditCondition), true, false, "where_server_audit_condition")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAuditId), false, false, "audit_id"))));
        
        private static string _ruleValue = "(TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition?\r" +
            "\n | REMOVE  WHERE\r\n | MODIFY  NAME  EQUAL  audit_id\r\n";
        
        private static string _ruleName = "alter_server_audit_infos";
        
        /// <summary>
        /// alter_server_audit_infos : TO server_audit_file with_server_audit_file? where_server_audit_condition? 
        /// </summary>
        public partial class AstAlterServerAuditInfos1 : AstAlterServerAuditInfos
        {
            
            private static string _ruleName1 = "alter_server_audit_infos";
            
            private AstServerAuditFile _serverAuditFile;
            
            private AstWithServerAuditFile? _withServerAuditFile;
            
            private AstWhereServerAuditCondition? _whereServerAuditCondition;
            
            internal AstAlterServerAuditInfos1(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstWithServerAuditFile? withServerAuditFile, AstWhereServerAuditCondition? whereServerAuditCondition) : 
                    base(ctx)
            {
                _serverAuditFile = serverAuditFile;
                _withServerAuditFile = withServerAuditFile;
                _whereServerAuditCondition = whereServerAuditCondition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerAuditFile ServerAuditFile
            {
                get
                {
                    return _serverAuditFile;
                }
            }
            
            public virtual AstWithServerAuditFile? WithServerAuditFile
            {
                get
                {
                    return _withServerAuditFile;
                }
            }
            
            public virtual AstWhereServerAuditCondition? WhereServerAuditCondition
            {
                get
                {
                    return _whereServerAuditCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        /// <summary>
        /// alter_server_audit_infos : REMOVE WHERE 
        /// </summary>
        public partial class AstAlterServerAuditInfos2 : AstAlterServerAuditInfos
        {
            
            private static string _ruleName1 = "alter_server_audit_infos";
            
            internal AstAlterServerAuditInfos2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        /// <summary>
        /// alter_server_audit_infos : MODIFY NAME EQUAL audit_id 
        /// </summary>
        public partial class AstAlterServerAuditInfos3 : AstAlterServerAuditInfos
        {
            
            private static string _ruleName1 = "alter_server_audit_infos";
            
            private AstAuditId _auditId;
            
            internal AstAlterServerAuditInfos3(ParserRuleContext ctx, AstAuditId auditId) : 
                    base(ctx)
            {
                _auditId = auditId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAuditId AuditId
            {
                get
                {
                    return _auditId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        

        
        internal AstAlterServerAuditInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditInfos(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterServerAuditInfos Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterServerAuditInfos.AstAlterServerAuditInfos1(ctx, list.Get<AstServerAuditFile>(0), list.Get<AstWithServerAuditFile?>(1), list.Get<AstWhereServerAuditCondition?>(2));
            }
            if ((index == 2))
            {
                return new AstAlterServerAuditInfos.AstAlterServerAuditInfos2(ctx);
            }
            if ((index == 3))
            {
                return new AstAlterServerAuditInfos.AstAlterServerAuditInfos3(ctx, list.Get<AstAuditId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    TO server_audit_file with_server_audit_file? where_server_audit_condition? 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstWithServerAuditFile withServerAuditFile, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            AstAlterServerAuditInfos.AstAlterServerAuditInfos1 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos1(ctx, serverAuditFile, withServerAuditFile, whereServerAuditCondition);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    REMOVE WHERE 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(ParserRuleContext ctx)
        {
            AstAlterServerAuditInfos.AstAlterServerAuditInfos2 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos2(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(ParserRuleContext ctx, AstAuditId auditId)
        {
            AstAlterServerAuditInfos.AstAlterServerAuditInfos3 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos3(ctx, auditId);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_info
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  on_off
    /// </summary>
    public abstract partial class AstServerAuditFileInfo : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstContinueShutdown), false, false, "continue_shutdown")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n | ON_FAILURE  EQUAL  continue_shutdow" +
            "n\r\n | STATE  EQUAL  on_off\r\n";
        
        private static string _ruleName = "server_audit_file_info";
        
        /// <summary>
        /// server_audit_file_info : QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public partial class AstServerAuditFileInfo1 : AstServerAuditFileInfo
        {
            
            private static string _ruleName1 = "server_audit_file_info";
            
            private AstDecimal _queueDelay;
            
            internal AstServerAuditFileInfo1(ParserRuleContext ctx, AstDecimal queueDelay) : 
                    base(ctx)
            {
                _queueDelay = queueDelay;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal QueueDelay
            {
                get
                {
                    return _queueDelay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        /// <summary>
        /// server_audit_file_info : ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public partial class AstServerAuditFileInfo2 : AstServerAuditFileInfo
        {
            
            private static string _ruleName1 = "server_audit_file_info";
            
            private AstContinueShutdown _continueShutdown;
            
            internal AstServerAuditFileInfo2(ParserRuleContext ctx, AstContinueShutdown continueShutdown) : 
                    base(ctx)
            {
                _continueShutdown = continueShutdown;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstContinueShutdown ContinueShutdown
            {
                get
                {
                    return _continueShutdown;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        /// <summary>
        /// server_audit_file_info : STATE EQUAL on_off 
        /// </summary>
        public partial class AstServerAuditFileInfo3 : AstServerAuditFileInfo
        {
            
            private static string _ruleName1 = "server_audit_file_info";
            
            private AstOnOff _onOff;
            
            internal AstServerAuditFileInfo3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        

        
        internal AstServerAuditFileInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileInfo(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerAuditFileInfo Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerAuditFileInfo.AstServerAuditFileInfo1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileInfo.AstServerAuditFileInfo2(ctx, list.Get<AstContinueShutdown>(0));
            }
            if ((index == 3))
            {
                return new AstServerAuditFileInfo.AstServerAuditFileInfo3(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(ParserRuleContext ctx, AstDecimal queueDelay)
        {
            AstServerAuditFileInfo.AstServerAuditFileInfo1 result = new AstServerAuditFileInfo.AstServerAuditFileInfo1(ctx, queueDelay);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(ParserRuleContext ctx, AstContinueShutdown continueShutdown)
        {
            AstServerAuditFileInfo.AstServerAuditFileInfo2 result = new AstServerAuditFileInfo.AstServerAuditFileInfo2(ctx, continueShutdown);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    STATE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServerAuditFileInfo.AstServerAuditFileInfo3 result = new AstServerAuditFileInfo.AstServerAuditFileInfo3(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file
    /// 	 : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET
    /// 	 | APPLICATION_LOG
    /// 	 | SECURITY_LOG
    /// </summary>
    public abstract partial class AstServerAuditFile : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerAuditFileSpecs), true, false, "server_audit_file_specs"))));
        
        private static string _ruleValue = "FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET\r\n | APPLICATION_LOG\r\n | SE" +
            "CURITY_LOG\r\n";
        
        private static string _ruleName = "server_audit_file";
        
        /// <summary>
        /// server_audit_file : FILE LR_BRACKET server_audit_file_specs? RR_BRACKET 
        /// </summary>
        public partial class AstServerAuditFile1 : AstServerAuditFile
        {
            
            private static string _ruleName1 = "server_audit_file";
            
            private AstServerAuditFileSpecs? _serverAuditFileSpecs;
            
            internal AstServerAuditFile1(ParserRuleContext ctx, AstServerAuditFileSpecs? serverAuditFileSpecs) : 
                    base(ctx)
            {
                _serverAuditFileSpecs = serverAuditFileSpecs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerAuditFileSpecs? ServerAuditFileSpecs
            {
                get
                {
                    return _serverAuditFileSpecs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        /// <summary>
        /// server_audit_file : APPLICATION_LOG 
        /// </summary>
        public partial class AstServerAuditFile2 : AstServerAuditFile
        {
            
            private static string _ruleName1 = "server_audit_file";
            
            internal AstServerAuditFile2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        /// <summary>
        /// server_audit_file : SECURITY_LOG 
        /// </summary>
        public partial class AstServerAuditFile3 : AstServerAuditFile
        {
            
            private static string _ruleName1 = "server_audit_file";
            
            internal AstServerAuditFile3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        

        
        internal AstServerAuditFile(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFile(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFile(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerAuditFile Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerAuditFile.AstServerAuditFile1(ctx, list.Get<AstServerAuditFileSpecs?>(0));
            }
            if ((index == 2))
            {
                return new AstServerAuditFile.AstServerAuditFile2(ctx);
            }
            if ((index == 3))
            {
                return new AstServerAuditFile.AstServerAuditFile3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// server_audit_file : 
        ///    FILE ( server_audit_file_specs? ) 
        /// </summary>
        public static AstServerAuditFile ServerAuditFile(ParserRuleContext ctx, AstServerAuditFileSpecs serverAuditFileSpecs)
        {
            AstServerAuditFile.AstServerAuditFile1 result = new AstServerAuditFile.AstServerAuditFile1(ctx, serverAuditFileSpecs);
            return result;
        }
        
        /// <summary>
        /// server_audit_file : 
        ///    APPLICATION_LOG 
        /// </summary>
        public static AstServerAuditFile ServerAuditFile(ParserRuleContext ctx)
        {
            AstServerAuditFile.AstServerAuditFile2 result = new AstServerAuditFile.AstServerAuditFile2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_spec
    /// 	 : FILEPATH  EQUAL  filepath = stringtext
    /// 	 | MAXSIZE  EQUAL  decimal_size_unlimited
    /// 	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
    /// 	 | MAX_FILES  EQUAL  max_files = decimal
    /// 	 | RESERVE_DISK_SPACE  EQUAL  on_off
    /// </summary>
    public abstract partial class AstServerAuditFileSpec : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalSizeUnlimited), false, false, "decimal_size_unlimited")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalUnlimited), false, false, "decimal_unlimited")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "FILEPATH  EQUAL  filepath = stringtext\r\n | MAXSIZE  EQUAL  decimal_size_unlimited" +
            "\r\n | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited\r\n | MAX_F" +
            "ILES  EQUAL  max_files = decimal\r\n | RESERVE_DISK_SPACE  EQUAL  on_off\r\n";
        
        private static string _ruleName = "server_audit_file_spec";
        
        /// <summary>
        /// server_audit_file_spec : FILEPATH EQUAL filepath=stringtext 
        /// </summary>
        public partial class AstServerAuditFileSpec1 : AstServerAuditFileSpec
        {
            
            private static string _ruleName1 = "server_audit_file_spec";
            
            private AstStringtext _filepath;
            
            internal AstServerAuditFileSpec1(ParserRuleContext ctx, AstStringtext filepath) : 
                    base(ctx)
            {
                _filepath = filepath;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Filepath
            {
                get
                {
                    return _filepath;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAXSIZE EQUAL decimal_size_unlimited 
        /// </summary>
        public partial class AstServerAuditFileSpec2 : AstServerAuditFileSpec
        {
            
            private static string _ruleName1 = "server_audit_file_spec";
            
            private AstDecimalSizeUnlimited _decimalSizeUnlimited;
            
            internal AstServerAuditFileSpec2(ParserRuleContext ctx, AstDecimalSizeUnlimited decimalSizeUnlimited) : 
                    base(ctx)
            {
                _decimalSizeUnlimited = decimalSizeUnlimited;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalSizeUnlimited DecimalSizeUnlimited
            {
                get
                {
                    return _decimalSizeUnlimited;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAX_ROLLOVER_FILES EQUAL max_rollover_files=decimal_unlimited 
        /// </summary>
        public partial class AstServerAuditFileSpec3 : AstServerAuditFileSpec
        {
            
            private static string _ruleName1 = "server_audit_file_spec";
            
            private AstDecimalUnlimited _maxRolloverFiles;
            
            internal AstServerAuditFileSpec3(ParserRuleContext ctx, AstDecimalUnlimited maxRolloverFiles) : 
                    base(ctx)
            {
                _maxRolloverFiles = maxRolloverFiles;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalUnlimited MaxRolloverFiles
            {
                get
                {
                    return _maxRolloverFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAX_FILES EQUAL max_files=decimal 
        /// </summary>
        public partial class AstServerAuditFileSpec4 : AstServerAuditFileSpec
        {
            
            private static string _ruleName1 = "server_audit_file_spec";
            
            private AstDecimal _maxFiles;
            
            internal AstServerAuditFileSpec4(ParserRuleContext ctx, AstDecimal maxFiles) : 
                    base(ctx)
            {
                _maxFiles = maxFiles;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxFiles
            {
                get
                {
                    return _maxFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : RESERVE_DISK_SPACE EQUAL on_off 
        /// </summary>
        public partial class AstServerAuditFileSpec5 : AstServerAuditFileSpec
        {
            
            private static string _ruleName1 = "server_audit_file_spec";
            
            private AstOnOff _onOff;
            
            internal AstServerAuditFileSpec5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        

        
        internal AstServerAuditFileSpec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileSpec(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileSpec(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerAuditFileSpec Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec2(ctx, list.Get<AstDecimalSizeUnlimited>(0));
            }
            if ((index == 3))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec3(ctx, list.Get<AstDecimalUnlimited>(0));
            }
            if ((index == 4))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec4(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 5))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec5(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    FILEPATH EQUAL filepath=stringtext 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstStringtext filepath)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec1 result = new AstServerAuditFileSpec.AstServerAuditFileSpec1(ctx, filepath);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAXSIZE EQUAL decimal_size_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstDecimalSizeUnlimited decimalSizeUnlimited)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec2 result = new AstServerAuditFileSpec.AstServerAuditFileSpec2(ctx, decimalSizeUnlimited);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAX_ROLLOVER_FILES EQUAL max_rollover_files=decimal_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstDecimalUnlimited maxRolloverFiles)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec3 result = new AstServerAuditFileSpec.AstServerAuditFileSpec3(ctx, maxRolloverFiles);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAX_FILES EQUAL max_files=decimal 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstDecimal maxFiles)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec4 result = new AstServerAuditFileSpec.AstServerAuditFileSpec4(ctx, maxFiles);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    RESERVE_DISK_SPACE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec5 result = new AstServerAuditFileSpec.AstServerAuditFileSpec5(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_unlimited
    /// 	 : decimal
    /// 	 | UNLIMITED
    /// </summary>
    public abstract partial class AstDecimalUnlimited : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "decimal\r\n | UNLIMITED\r\n";
        
        private static string _ruleName = "decimal_unlimited";
        
        /// <summary>
        /// decimal_unlimited : decimal 
        /// </summary>
        public partial class AstDecimalUnlimited1 : AstDecimalUnlimited
        {
            
            private static string _ruleName1 = "decimal_unlimited";
            
            private AstDecimal _decimal;
            
            internal AstDecimalUnlimited1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalUnlimited(this);
            }
        }
        /// <summary>
        /// decimal_unlimited : UNLIMITED 
        /// </summary>
        public partial class AstDecimalUnlimited2 : AstDecimalUnlimited
        {
            
            private static string _ruleName1 = "decimal_unlimited";
            
            internal AstDecimalUnlimited2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalUnlimited(this);
            }
        }
        

        
        internal AstDecimalUnlimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalUnlimited(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalUnlimited(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDecimalUnlimited Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDecimalUnlimited.AstDecimalUnlimited1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstDecimalUnlimited.AstDecimalUnlimited2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// decimal_unlimited : 
        ///    decimal 
        /// </summary>
        public static AstDecimalUnlimited DecimalUnlimited(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstDecimalUnlimited.AstDecimalUnlimited1 result = new AstDecimalUnlimited.AstDecimalUnlimited1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// decimal_unlimited : 
        ///    UNLIMITED 
        /// </summary>
        public static AstDecimalUnlimited DecimalUnlimited(ParserRuleContext ctx)
        {
            AstDecimalUnlimited.AstDecimalUnlimited2 result = new AstDecimalUnlimited.AstDecimalUnlimited2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_size_unlimited
    /// 	 : (decimal  size_unity | UNLIMITED)
    /// </summary>
    public abstract partial class AstDecimalSizeUnlimited : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSizeUnity), false, false, "size_unity"))));
        
        private static string _ruleValue = "(decimal  size_unity | UNLIMITED)\r\n";
        
        private static string _ruleName = "decimal_size_unlimited";
        
        /// <summary>
        /// decimal_size_unlimited : decimal size_unity 
        /// </summary>
        public partial class AstDecimalSizeUnlimited1 : AstDecimalSizeUnlimited
        {
            
            private static string _ruleName1 = "decimal_size_unlimited";
            
            private AstDecimal _decimal;
            
            private AstSizeUnity _sizeUnity;
            
            internal AstDecimalSizeUnlimited1(ParserRuleContext ctx, AstDecimal @decimal, AstSizeUnity sizeUnity) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _sizeUnity = sizeUnity;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstSizeUnity SizeUnity
            {
                get
                {
                    return _sizeUnity;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalSizeUnlimited(this);
            }
        }
        /// <summary>
        /// decimal_size_unlimited : UNLIMITED 
        /// </summary>
        public partial class AstDecimalSizeUnlimited2 : AstDecimalSizeUnlimited
        {
            
            private static string _ruleName1 = "decimal_size_unlimited";
            
            internal AstDecimalSizeUnlimited2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalSizeUnlimited(this);
            }
        }
        

        
        internal AstDecimalSizeUnlimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalSizeUnlimited(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalSizeUnlimited(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDecimalSizeUnlimited Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited1(ctx, list.Get<AstDecimal>(0), list.Get<AstSizeUnity>(1));
            }
            if ((index == 2))
            {
                return new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// decimal_size_unlimited : 
        ///    decimal size_unity 
        /// </summary>
        public static AstDecimalSizeUnlimited DecimalSizeUnlimited(ParserRuleContext ctx, AstDecimal @decimal, AstSizeUnity sizeUnity)
        {
            AstDecimalSizeUnlimited.AstDecimalSizeUnlimited1 result = new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited1(ctx, @decimal, sizeUnity);
            return result;
        }
        
        /// <summary>
        /// decimal_size_unlimited : 
        ///    UNLIMITED 
        /// </summary>
        public static AstDecimalSizeUnlimited DecimalSizeUnlimited(ParserRuleContext ctx)
        {
            AstDecimalSizeUnlimited.AstDecimalSizeUnlimited2 result = new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_condition
    /// 	 : COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string
    /// 	 | COMMA?  and_or  NOT?  audit_operator  decimal_string
    /// </summary>
    public abstract partial class AstAlterServerAuditCondition : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEventFieldId), false, false, "event_field_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAuditOperator), false, false, "audit_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalString), false, false, "decimal_string")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAndOr), false, false, "and_or"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAuditOperator), false, false, "audit_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalString), false, false, "decimal_string"))));
        
        private static string _ruleValue = "COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string\r\n | COMMA?  and_or" +
            "  NOT?  audit_operator  decimal_string\r\n";
        
        private static string _ruleName = "alter_server_audit_condition";
        
        /// <summary>
        /// alter_server_audit_condition : COMMA? NOT? event_field_id audit_operator decimal_string 
        /// </summary>
        public partial class AstAlterServerAuditCondition1 : AstAlterServerAuditCondition
        {
            
            private static string _ruleName1 = "alter_server_audit_condition";
            
            private AstEventFieldId _eventFieldId;
            
            private AstAuditOperator _auditOperator;
            
            private AstDecimalString _decimalString;
            
            internal AstAlterServerAuditCondition1(ParserRuleContext ctx, AstEventFieldId eventFieldId, AstAuditOperator auditOperator, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
                _auditOperator = auditOperator;
                _decimalString = decimalString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public virtual AstAuditOperator AuditOperator
            {
                get
                {
                    return _auditOperator;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditCondition(this);
            }
        }
        /// <summary>
        /// alter_server_audit_condition : COMMA? and_or NOT? audit_operator decimal_string 
        /// </summary>
        public partial class AstAlterServerAuditCondition2 : AstAlterServerAuditCondition
        {
            
            private static string _ruleName1 = "alter_server_audit_condition";
            
            private AstAndOr _andOr;
            
            private AstAuditOperator _auditOperator;
            
            private AstDecimalString _decimalString;
            
            internal AstAlterServerAuditCondition2(ParserRuleContext ctx, AstAndOr andOr, AstAuditOperator auditOperator, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _andOr = andOr;
                _auditOperator = auditOperator;
                _decimalString = decimalString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAndOr AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstAuditOperator AuditOperator
            {
                get
                {
                    return _auditOperator;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditCondition(this);
            }
        }
        

        
        internal AstAlterServerAuditCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditCondition(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterServerAuditCondition Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterServerAuditCondition.AstAlterServerAuditCondition1(ctx, list.Get<AstEventFieldId>(0), list.Get<AstAuditOperator>(1), list.Get<AstDecimalString>(2));
            }
            if ((index == 2))
            {
                return new AstAlterServerAuditCondition.AstAlterServerAuditCondition2(ctx, list.Get<AstAndOr>(0), list.Get<AstAuditOperator>(1), list.Get<AstDecimalString>(2));
            }
            return null;
        }
        
        /// <summary>
        /// alter_server_audit_condition : 
        ///    COMMA? NOT? event_field_id audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(ParserRuleContext ctx, AstEventFieldId eventFieldId, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            AstAlterServerAuditCondition.AstAlterServerAuditCondition1 result = new AstAlterServerAuditCondition.AstAlterServerAuditCondition1(ctx, eventFieldId, auditOperator, decimalString);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_condition : 
        ///    COMMA? and_or NOT? audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(ParserRuleContext ctx, AstAndOr andOr, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            AstAlterServerAuditCondition.AstAlterServerAuditCondition2 result = new AstAlterServerAuditCondition.AstAlterServerAuditCondition2(ctx, andOr, auditOperator, decimalString);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_to_infos
    /// 	 : (TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public abstract partial class AstCreateServerAuditToInfos : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerAuditFile), false, false, "server_audit_file"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateServerAuditWiths), true, false, "create_server_audit_withs"), new Bb.Asts.AstRuleMatcherItem(typeof(AstWhereServerAuditCondition), true, false, "where_server_audit_condition")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAuditId), false, false, "audit_id"))));
        
        private static string _ruleValue = "(TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACK" +
            "ET)?  where_server_audit_condition?\r\n | REMOVE  WHERE\r\n | MODIFY  NAME  EQUAL  a" +
            "udit_id\r\n";
        
        private static string _ruleName = "create_server_audit_to_infos";
        
        /// <summary>
        /// create_server_audit_to_infos : TO server_audit_file WITH LR_BRACKET create_server_audit_withs? RR_BRACKET where_server_audit_condition? 
        /// </summary>
        public partial class AstCreateServerAuditToInfos1 : AstCreateServerAuditToInfos
        {
            
            private static string _ruleName1 = "create_server_audit_to_infos";
            
            private AstServerAuditFile _serverAuditFile;
            
            private AstCreateServerAuditWiths? _createServerAuditWiths;
            
            private AstWhereServerAuditCondition? _whereServerAuditCondition;
            
            internal AstCreateServerAuditToInfos1(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstCreateServerAuditWiths? createServerAuditWiths, AstWhereServerAuditCondition? whereServerAuditCondition) : 
                    base(ctx)
            {
                _serverAuditFile = serverAuditFile;
                _createServerAuditWiths = createServerAuditWiths;
                _whereServerAuditCondition = whereServerAuditCondition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerAuditFile ServerAuditFile
            {
                get
                {
                    return _serverAuditFile;
                }
            }
            
            public virtual AstCreateServerAuditWiths? CreateServerAuditWiths
            {
                get
                {
                    return _createServerAuditWiths;
                }
            }
            
            public virtual AstWhereServerAuditCondition? WhereServerAuditCondition
            {
                get
                {
                    return _whereServerAuditCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        /// <summary>
        /// create_server_audit_to_infos : REMOVE WHERE 
        /// </summary>
        public partial class AstCreateServerAuditToInfos2 : AstCreateServerAuditToInfos
        {
            
            private static string _ruleName1 = "create_server_audit_to_infos";
            
            internal AstCreateServerAuditToInfos2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        /// <summary>
        /// create_server_audit_to_infos : MODIFY NAME EQUAL audit_id 
        /// </summary>
        public partial class AstCreateServerAuditToInfos3 : AstCreateServerAuditToInfos
        {
            
            private static string _ruleName1 = "create_server_audit_to_infos";
            
            private AstAuditId _auditId;
            
            internal AstCreateServerAuditToInfos3(ParserRuleContext ctx, AstAuditId auditId) : 
                    base(ctx)
            {
                _auditId = auditId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAuditId AuditId
            {
                get
                {
                    return _auditId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        

        
        internal AstCreateServerAuditToInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditToInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditToInfos(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateServerAuditToInfos Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1(ctx, list.Get<AstServerAuditFile>(0), list.Get<AstCreateServerAuditWiths?>(1), list.Get<AstWhereServerAuditCondition?>(2));
            }
            if ((index == 2))
            {
                return new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos2(ctx);
            }
            if ((index == 3))
            {
                return new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3(ctx, list.Get<AstAuditId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    TO server_audit_file WITH ( create_server_audit_withs? ) where_server_audit_condition? 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstCreateServerAuditWiths createServerAuditWiths, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1(ctx, serverAuditFile, createServerAuditWiths, whereServerAuditCondition);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    REMOVE WHERE 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(ParserRuleContext ctx)
        {
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos2 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos2(ctx);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(ParserRuleContext ctx, AstAuditId auditId)
        {
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3(ctx, auditId);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_with
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  state = on_off
    /// 	 | audit1 = audit_guid_id  EQUAL  audit2 = audit_guid_id
    /// </summary>
    public abstract partial class AstCreateServerAuditWith : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstAuditGuidId), false, false, "audit_guid_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAuditGuidId), false, false, "audit_guid_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstContinueShutdown), false, false, "continue_shutdown")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n | ON_FAILURE  EQUAL  continue_shutdow" +
            "n\r\n | STATE  EQUAL  state = on_off\r\n | audit1 = audit_guid_id  EQUAL  audit2 = a" +
            "udit_guid_id\r\n";
        
        private static string _ruleName = "create_server_audit_with";
        
        /// <summary>
        /// create_server_audit_with : QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public partial class AstCreateServerAuditWith1 : AstCreateServerAuditWith
        {
            
            private static string _ruleName1 = "create_server_audit_with";
            
            private AstDecimal _queueDelay;
            
            internal AstCreateServerAuditWith1(ParserRuleContext ctx, AstDecimal queueDelay) : 
                    base(ctx)
            {
                _queueDelay = queueDelay;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal QueueDelay
            {
                get
                {
                    return _queueDelay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public partial class AstCreateServerAuditWith2 : AstCreateServerAuditWith
        {
            
            private static string _ruleName1 = "create_server_audit_with";
            
            private AstContinueShutdown _continueShutdown;
            
            internal AstCreateServerAuditWith2(ParserRuleContext ctx, AstContinueShutdown continueShutdown) : 
                    base(ctx)
            {
                _continueShutdown = continueShutdown;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstContinueShutdown ContinueShutdown
            {
                get
                {
                    return _continueShutdown;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : STATE EQUAL state=on_off 
        /// </summary>
        public partial class AstCreateServerAuditWith3 : AstCreateServerAuditWith
        {
            
            private static string _ruleName1 = "create_server_audit_with";
            
            private AstOnOff _state;
            
            internal AstCreateServerAuditWith3(ParserRuleContext ctx, AstOnOff state) : 
                    base(ctx)
            {
                _state = state;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff State
            {
                get
                {
                    return _state;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : audit1=audit_guid_id EQUAL audit2=audit_guid_id 
        /// </summary>
        public partial class AstCreateServerAuditWith4 : AstCreateServerAuditWith
        {
            
            private static string _ruleName1 = "create_server_audit_with";
            
            private AstAuditGuidId _audit1;
            
            private AstAuditGuidId _audit2;
            
            internal AstCreateServerAuditWith4(ParserRuleContext ctx, AstAuditGuidId audit1, AstAuditGuidId audit2) : 
                    base(ctx)
            {
                _audit1 = audit1;
                _audit2 = audit2;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAuditGuidId Audit1
            {
                get
                {
                    return _audit1;
                }
            }
            
            public virtual AstAuditGuidId Audit2
            {
                get
                {
                    return _audit2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        

        
        internal AstCreateServerAuditWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditWith(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditWith(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateServerAuditWith Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith2(ctx, list.Get<AstContinueShutdown>(0));
            }
            if ((index == 3))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith4(ctx, list.Get<AstAuditGuidId>(0), list.Get<AstAuditGuidId>(1));
            }
            return null;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstDecimal queueDelay)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith1 result = new AstCreateServerAuditWith.AstCreateServerAuditWith1(ctx, queueDelay);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstContinueShutdown continueShutdown)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith2 result = new AstCreateServerAuditWith.AstCreateServerAuditWith2(ctx, continueShutdown);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    STATE EQUAL state=on_off 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstOnOff state)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith3 result = new AstCreateServerAuditWith.AstCreateServerAuditWith3(ctx, state);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    audit1=audit_guid_id EQUAL audit2=audit_guid_id 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstAuditGuidId audit1, AstAuditGuidId audit2)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith4 result = new AstCreateServerAuditWith.AstCreateServerAuditWith4(ctx, audit1, audit2);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_configuration
    /// 	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)
    /// </summary>
    public abstract partial class AstAlterServerConfiguration : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerConfigProcessAffinity), false, false, "server_config_process_affinity")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerConfigDiagnosticLog), false, false, "server_config_diagnostic_log")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerConfigFailover), false, false, "server_config_failover")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstServerConfigBufferPoolExt), false, false, "server_config_buffer_pool_ext")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_confi" +
            "g_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stri" +
            "ngtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)\r\n";
        
        private static string _ruleName = "alter_server_configuration";
        
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_process_affinity 
        /// </summary>
        public partial class AstAlterServerConfiguration1 : AstAlterServerConfiguration
        {
            
            private static string _ruleName1 = "alter_server_configuration";
            
            private AstServerConfigProcessAffinity _serverConfigProcessAffinity;
            
            internal AstAlterServerConfiguration1(ParserRuleContext ctx, AstServerConfigProcessAffinity serverConfigProcessAffinity) : 
                    base(ctx)
            {
                _serverConfigProcessAffinity = serverConfigProcessAffinity;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerConfigProcessAffinity ServerConfigProcessAffinity
            {
                get
                {
                    return _serverConfigProcessAffinity;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_diagnostic_log 
        /// </summary>
        public partial class AstAlterServerConfiguration2 : AstAlterServerConfiguration
        {
            
            private static string _ruleName1 = "alter_server_configuration";
            
            private AstServerConfigDiagnosticLog _serverConfigDiagnosticLog;
            
            internal AstAlterServerConfiguration2(ParserRuleContext ctx, AstServerConfigDiagnosticLog serverConfigDiagnosticLog) : 
                    base(ctx)
            {
                _serverConfigDiagnosticLog = serverConfigDiagnosticLog;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerConfigDiagnosticLog ServerConfigDiagnosticLog
            {
                get
                {
                    return _serverConfigDiagnosticLog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_failover 
        /// </summary>
        public partial class AstAlterServerConfiguration3 : AstAlterServerConfiguration
        {
            
            private static string _ruleName1 = "alter_server_configuration";
            
            private AstServerConfigFailover _serverConfigFailover;
            
            internal AstAlterServerConfiguration3(ParserRuleContext ctx, AstServerConfigFailover serverConfigFailover) : 
                    base(ctx)
            {
                _serverConfigFailover = serverConfigFailover;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerConfigFailover ServerConfigFailover
            {
                get
                {
                    return _serverConfigFailover;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL stringtext 
        /// </summary>
        public partial class AstAlterServerConfiguration4 : AstAlterServerConfiguration
        {
            
            private static string _ruleName1 = "alter_server_configuration";
            
            private AstStringtext _stringtext;
            
            internal AstAlterServerConfiguration4(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL LOCAL 
        /// </summary>
        public partial class AstAlterServerConfiguration5 : AstAlterServerConfiguration
        {
            
            private static string _ruleName1 = "alter_server_configuration";
            
            internal AstAlterServerConfiguration5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_buffer_pool_ext 
        /// </summary>
        public partial class AstAlterServerConfiguration6 : AstAlterServerConfiguration
        {
            
            private static string _ruleName1 = "alter_server_configuration";
            
            private AstServerConfigBufferPoolExt _serverConfigBufferPoolExt;
            
            internal AstAlterServerConfiguration6(ParserRuleContext ctx, AstServerConfigBufferPoolExt serverConfigBufferPoolExt) : 
                    base(ctx)
            {
                _serverConfigBufferPoolExt = serverConfigBufferPoolExt;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServerConfigBufferPoolExt ServerConfigBufferPoolExt
            {
                get
                {
                    return _serverConfigBufferPoolExt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET SET SOFTNUMA on_off 
        /// </summary>
        public partial class AstAlterServerConfiguration7 : AstAlterServerConfiguration
        {
            
            private static string _ruleName1 = "alter_server_configuration";
            
            private AstOnOff _onOff;
            
            internal AstAlterServerConfiguration7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        

        
        internal AstAlterServerConfiguration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerConfiguration(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerConfiguration(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterServerConfiguration Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration1(ctx, list.Get<AstServerConfigProcessAffinity>(0));
            }
            if ((index == 2))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration2(ctx, list.Get<AstServerConfigDiagnosticLog>(0));
            }
            if ((index == 3))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration3(ctx, list.Get<AstServerConfigFailover>(0));
            }
            if ((index == 4))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration4(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 5))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration5(ctx);
            }
            if ((index == 6))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration6(ctx, list.Get<AstServerConfigBufferPoolExt>(0));
            }
            if ((index == 7))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration7(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_process_affinity 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigProcessAffinity serverConfigProcessAffinity)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration1 result = new AstAlterServerConfiguration.AstAlterServerConfiguration1(ctx, serverConfigProcessAffinity);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_diagnostic_log 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigDiagnosticLog serverConfigDiagnosticLog)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration2 result = new AstAlterServerConfiguration.AstAlterServerConfiguration2(ctx, serverConfigDiagnosticLog);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_failover 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigFailover serverConfigFailover)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration3 result = new AstAlterServerConfiguration.AstAlterServerConfiguration3(ctx, serverConfigFailover);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL stringtext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration4 result = new AstAlterServerConfiguration.AstAlterServerConfiguration4(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL LOCAL 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration5 result = new AstAlterServerConfiguration.AstAlterServerConfiguration5(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_buffer_pool_ext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigBufferPoolExt serverConfigBufferPoolExt)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration6 result = new AstAlterServerConfiguration.AstAlterServerConfiguration6(ctx, serverConfigBufferPoolExt);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET SET SOFTNUMA on_off 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration7 result = new AstAlterServerConfiguration.AstAlterServerConfiguration7(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_process_affinity
    /// 	 : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decimal_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)
    /// </summary>
    public abstract partial class AstServerConfigProcessAffinity : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalRange), false, false, "decimal_range"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalRanges), false, false, "decimal_ranges")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalRange), false, false, "decimal_range"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalRanges), false, false, "decimal_ranges"))));
        
        private static string _ruleValue = "PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decimal_range  decimal_ranges) | NUMANODE" +
            "  EQUAL  decimal_range  decimal_ranges)\r\n";
        
        private static string _ruleName = "server_config_process_affinity";
        
        /// <summary>
        /// server_config_process_affinity : PROCESS AFFINITY CPU EQUAL AUTO 
        /// </summary>
        public partial class AstServerConfigProcessAffinity1 : AstServerConfigProcessAffinity
        {
            
            private static string _ruleName1 = "server_config_process_affinity";
            
            internal AstServerConfigProcessAffinity1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigProcessAffinity(this);
            }
        }
        /// <summary>
        /// server_config_process_affinity : PROCESS AFFINITY CPU EQUAL decimal_range decimal_ranges 
        /// </summary>
        public partial class AstServerConfigProcessAffinity2 : AstServerConfigProcessAffinity
        {
            
            private static string _ruleName1 = "server_config_process_affinity";
            
            private AstDecimalRange _decimalRange;
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstServerConfigProcessAffinity2(ParserRuleContext ctx, AstDecimalRange decimalRange, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRange = decimalRange;
                _decimalRanges = decimalRanges;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalRange DecimalRange
            {
                get
                {
                    return _decimalRange;
                }
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigProcessAffinity(this);
            }
        }
        /// <summary>
        /// server_config_process_affinity : PROCESS AFFINITY NUMANODE EQUAL decimal_range decimal_ranges 
        /// </summary>
        public partial class AstServerConfigProcessAffinity3 : AstServerConfigProcessAffinity
        {
            
            private static string _ruleName1 = "server_config_process_affinity";
            
            private AstDecimalRange _decimalRange;
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstServerConfigProcessAffinity3(ParserRuleContext ctx, AstDecimalRange decimalRange, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRange = decimalRange;
                _decimalRanges = decimalRanges;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalRange DecimalRange
            {
                get
                {
                    return _decimalRange;
                }
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigProcessAffinity(this);
            }
        }
        

        
        internal AstServerConfigProcessAffinity(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigProcessAffinity(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigProcessAffinity(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerConfigProcessAffinity Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity1(ctx);
            }
            if ((index == 2))
            {
                return new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity2(ctx, list.Get<AstDecimalRange>(0), list.Get<AstDecimalRanges>(1));
            }
            if ((index == 3))
            {
                return new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity3(ctx, list.Get<AstDecimalRange>(0), list.Get<AstDecimalRanges>(1));
            }
            return null;
        }
        
        /// <summary>
        /// server_config_process_affinity : 
        ///    PROCESS AFFINITY CPU EQUAL AUTO 
        /// </summary>
        public static AstServerConfigProcessAffinity ServerConfigProcessAffinity(ParserRuleContext ctx)
        {
            AstServerConfigProcessAffinity.AstServerConfigProcessAffinity1 result = new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity1(ctx);
            return result;
        }
        
        /// <summary>
        /// server_config_process_affinity : 
        ///    PROCESS AFFINITY CPU EQUAL decimal_range decimal_ranges 
        /// </summary>
        public static AstServerConfigProcessAffinity ServerConfigProcessAffinity(ParserRuleContext ctx, AstDecimalRange decimalRange, AstDecimalRanges decimalRanges)
        {
            AstServerConfigProcessAffinity.AstServerConfigProcessAffinity2 result = new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity2(ctx, decimalRange, decimalRanges);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_diagnostic_log
    /// 	 : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)
    /// </summary>
    public abstract partial class AstServerConfigDiagnosticLog : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringOrDefault), false, false, "string_or_default")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSizeValue), false, false, "size_value")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalDefault), false, false, "decimal_default"))));
        
        private static string _ruleValue = "DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string_or_default | MAX_SIZE  EQUAL  siz" +
            "e_value | MAX_FILES  EQUAL  decimal_default)\r\n";
        
        private static string _ruleName = "server_config_diagnostic_log";
        
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG on_off 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog1 : AstServerConfigDiagnosticLog
        {
            
            private static string _ruleName1 = "server_config_diagnostic_log";
            
            private AstOnOff _onOff;
            
            internal AstServerConfigDiagnosticLog1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG PATH EQUAL string_or_default 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog2 : AstServerConfigDiagnosticLog
        {
            
            private static string _ruleName1 = "server_config_diagnostic_log";
            
            private AstStringOrDefault _stringOrDefault;
            
            internal AstServerConfigDiagnosticLog2(ParserRuleContext ctx, AstStringOrDefault stringOrDefault) : 
                    base(ctx)
            {
                _stringOrDefault = stringOrDefault;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringOrDefault StringOrDefault
            {
                get
                {
                    return _stringOrDefault;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG MAX_SIZE EQUAL size_value 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog3 : AstServerConfigDiagnosticLog
        {
            
            private static string _ruleName1 = "server_config_diagnostic_log";
            
            private AstSizeValue _sizeValue;
            
            internal AstServerConfigDiagnosticLog3(ParserRuleContext ctx, AstSizeValue sizeValue) : 
                    base(ctx)
            {
                _sizeValue = sizeValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSizeValue SizeValue
            {
                get
                {
                    return _sizeValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG MAX_FILES EQUAL decimal_default 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog4 : AstServerConfigDiagnosticLog
        {
            
            private static string _ruleName1 = "server_config_diagnostic_log";
            
            private AstDecimalDefault _decimalDefault;
            
            internal AstServerConfigDiagnosticLog4(ParserRuleContext ctx, AstDecimalDefault decimalDefault) : 
                    base(ctx)
            {
                _decimalDefault = decimalDefault;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalDefault DecimalDefault
            {
                get
                {
                    return _decimalDefault;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        

        
        internal AstServerConfigDiagnosticLog(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigDiagnosticLog(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigDiagnosticLog(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerConfigDiagnosticLog Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog2(ctx, list.Get<AstStringOrDefault>(0));
            }
            if ((index == 3))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog3(ctx, list.Get<AstSizeValue>(0));
            }
            if ((index == 4))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog4(ctx, list.Get<AstDecimalDefault>(0));
            }
            return null;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG on_off 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog1 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG PATH EQUAL string_or_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstStringOrDefault stringOrDefault)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog2 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog2(ctx, stringOrDefault);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG MAX_SIZE EQUAL size_value 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstSizeValue sizeValue)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog3 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog3(ctx, sizeValue);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG MAX_FILES EQUAL decimal_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstDecimalDefault decimalDefault)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog4 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog4(ctx, decimalDefault);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_failover
    /// 	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)
    /// </summary>
    public abstract partial class AstServerConfigFailover : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringOrDefault), false, false, "string_or_default")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringOrDefault), false, false, "string_or_default")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringOrDefault), false, false, "string_or_default")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringOrDefault), false, false, "string_or_default")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringOrDefault), false, false, "string_or_default")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalDefault), false, false, "decimal_default"))));
        
        private static string _ruleValue = @"FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)
";
        
        private static string _ruleName = "server_config_failover";
        
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY VERBOSELOGGING EQUAL verboselogging=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover1 : AstServerConfigFailover
        {
            
            private static string _ruleName1 = "server_config_failover";
            
            private AstStringOrDefault _verboselogging;
            
            internal AstServerConfigFailover1(ParserRuleContext ctx, AstStringOrDefault verboselogging) : 
                    base(ctx)
            {
                _verboselogging = verboselogging;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringOrDefault Verboselogging
            {
                get
                {
                    return _verboselogging;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY SQLDUMPERFLAGS EQUAL sqldumperflags=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover2 : AstServerConfigFailover
        {
            
            private static string _ruleName1 = "server_config_failover";
            
            private AstStringOrDefault _sqldumperflags;
            
            internal AstServerConfigFailover2(ParserRuleContext ctx, AstStringOrDefault sqldumperflags) : 
                    base(ctx)
            {
                _sqldumperflags = sqldumperflags;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringOrDefault Sqldumperflags
            {
                get
                {
                    return _sqldumperflags;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY SQLDUMPERPATH EQUAL sqldumperpath=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover3 : AstServerConfigFailover
        {
            
            private static string _ruleName1 = "server_config_failover";
            
            private AstStringOrDefault _sqldumperpath;
            
            internal AstServerConfigFailover3(ParserRuleContext ctx, AstStringOrDefault sqldumperpath) : 
                    base(ctx)
            {
                _sqldumperpath = sqldumperpath;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringOrDefault Sqldumperpath
            {
                get
                {
                    return _sqldumperpath;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY SQLDUMPERTIMEOUT sqldumpertimeout=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover4 : AstServerConfigFailover
        {
            
            private static string _ruleName1 = "server_config_failover";
            
            private AstStringOrDefault _sqldumpertimeout;
            
            internal AstServerConfigFailover4(ParserRuleContext ctx, AstStringOrDefault sqldumpertimeout) : 
                    base(ctx)
            {
                _sqldumpertimeout = sqldumpertimeout;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringOrDefault Sqldumpertimeout
            {
                get
                {
                    return _sqldumpertimeout;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY FAILURECONDITIONLEVEL EQUAL failure=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover5 : AstServerConfigFailover
        {
            
            private static string _ruleName1 = "server_config_failover";
            
            private AstStringOrDefault _failure;
            
            internal AstServerConfigFailover5(ParserRuleContext ctx, AstStringOrDefault failure) : 
                    base(ctx)
            {
                _failure = failure;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringOrDefault Failure
            {
                get
                {
                    return _failure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY HEALTHCHECKTIMEOUT EQUAL health=decimal_default 
        /// </summary>
        public partial class AstServerConfigFailover6 : AstServerConfigFailover
        {
            
            private static string _ruleName1 = "server_config_failover";
            
            private AstDecimalDefault _health;
            
            internal AstServerConfigFailover6(ParserRuleContext ctx, AstDecimalDefault health) : 
                    base(ctx)
            {
                _health = health;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalDefault Health
            {
                get
                {
                    return _health;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        

        
        internal AstServerConfigFailover(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigFailover(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigFailover(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerConfigFailover Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerConfigFailover.AstServerConfigFailover1(ctx, list.Get<AstStringOrDefault>(0));
            }
            if ((index == 2))
            {
                return new AstServerConfigFailover.AstServerConfigFailover2(ctx, list.Get<AstStringOrDefault>(0));
            }
            if ((index == 3))
            {
                return new AstServerConfigFailover.AstServerConfigFailover3(ctx, list.Get<AstStringOrDefault>(0));
            }
            if ((index == 4))
            {
                return new AstServerConfigFailover.AstServerConfigFailover4(ctx, list.Get<AstStringOrDefault>(0));
            }
            if ((index == 5))
            {
                return new AstServerConfigFailover.AstServerConfigFailover5(ctx, list.Get<AstStringOrDefault>(0));
            }
            if ((index == 6))
            {
                return new AstServerConfigFailover.AstServerConfigFailover6(ctx, list.Get<AstDecimalDefault>(0));
            }
            return null;
        }
        
        /// <summary>
        /// server_config_failover : 
        ///    FAILOVER CLUSTER PROPERTY VERBOSELOGGING EQUAL verboselogging=string_or_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(ParserRuleContext ctx, AstStringOrDefault verboselogging)
        {
            AstServerConfigFailover.AstServerConfigFailover1 result = new AstServerConfigFailover.AstServerConfigFailover1(ctx, verboselogging);
            return result;
        }
        
        /// <summary>
        /// server_config_failover : 
        ///    FAILOVER CLUSTER PROPERTY HEALTHCHECKTIMEOUT EQUAL health=decimal_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(ParserRuleContext ctx, AstDecimalDefault health)
        {
            AstServerConfigFailover.AstServerConfigFailover6 result = new AstServerConfigFailover.AstServerConfigFailover6(ctx, health);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_buffer_pool_ext
    /// 	 : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILENAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_unity  RR_BRACKET | OFF)
    /// </summary>
    public abstract partial class AstServerConfigBufferPoolExt : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSizeUnity), false, false, "size_unity"))));
        
        private static string _ruleValue = "BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILENAME  EQUAL  filename = stringtext " +
            " COMMA  SIZE  EQUAL  size = decimal  size_unity  RR_BRACKET | OFF)\r\n";
        
        private static string _ruleName = "server_config_buffer_pool_ext";
        
        /// <summary>
        /// server_config_buffer_pool_ext : BUFFER POOL EXTENSION ON LR_BRACKET FILENAME EQUAL filename=stringtext COMMA SIZE EQUAL size=decimal size_unity RR_BRACKET 
        /// </summary>
        public partial class AstServerConfigBufferPoolExt1 : AstServerConfigBufferPoolExt
        {
            
            private static string _ruleName1 = "server_config_buffer_pool_ext";
            
            private AstStringtext _filename;
            
            private AstDecimal _size;
            
            private AstSizeUnity _sizeUnity;
            
            internal AstServerConfigBufferPoolExt1(ParserRuleContext ctx, AstStringtext filename, AstDecimal size, AstSizeUnity sizeUnity) : 
                    base(ctx)
            {
                _filename = filename;
                _size = size;
                _sizeUnity = sizeUnity;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Filename
            {
                get
                {
                    return _filename;
                }
            }
            
            public virtual AstDecimal Size
            {
                get
                {
                    return _size;
                }
            }
            
            public virtual AstSizeUnity SizeUnity
            {
                get
                {
                    return _sizeUnity;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigBufferPoolExt(this);
            }
        }
        /// <summary>
        /// server_config_buffer_pool_ext : BUFFER POOL EXTENSION OFF 
        /// </summary>
        public partial class AstServerConfigBufferPoolExt2 : AstServerConfigBufferPoolExt
        {
            
            private static string _ruleName1 = "server_config_buffer_pool_ext";
            
            internal AstServerConfigBufferPoolExt2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigBufferPoolExt(this);
            }
        }
        

        
        internal AstServerConfigBufferPoolExt(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigBufferPoolExt(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigBufferPoolExt(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerConfigBufferPoolExt Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt1(ctx, list.Get<AstStringtext>(0), list.Get<AstDecimal>(1), list.Get<AstSizeUnity>(2));
            }
            if ((index == 2))
            {
                return new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// server_config_buffer_pool_ext : 
        ///    BUFFER POOL EXTENSION ON ( FILENAME EQUAL filename=stringtext , SIZE EQUAL size=decimal size_unity ) 
        /// </summary>
        public static AstServerConfigBufferPoolExt ServerConfigBufferPoolExt(ParserRuleContext ctx, AstStringtext filename, AstDecimal size, AstSizeUnity sizeUnity)
        {
            AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt1 result = new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt1(ctx, filename, size, sizeUnity);
            return result;
        }
        
        /// <summary>
        /// server_config_buffer_pool_ext : 
        ///    BUFFER POOL EXTENSION OFF 
        /// </summary>
        public static AstServerConfigBufferPoolExt ServerConfigBufferPoolExt(ParserRuleContext ctx)
        {
            AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt2 result = new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// string_or_default
    /// 	 : stringtext
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstStringOrDefault : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "stringtext\r\n | DEFAULT\r\n";
        
        private static string _ruleName = "string_or_default";
        
        /// <summary>
        /// string_or_default : stringtext 
        /// </summary>
        public partial class AstStringOrDefault1 : AstStringOrDefault
        {
            
            private static string _ruleName1 = "string_or_default";
            
            private AstStringtext _stringtext;
            
            internal AstStringOrDefault1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringOrDefault(this);
            }
        }
        /// <summary>
        /// string_or_default : DEFAULT 
        /// </summary>
        public partial class AstStringOrDefault2 : AstStringOrDefault
        {
            
            private static string _ruleName1 = "string_or_default";
            
            internal AstStringOrDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringOrDefault(this);
            }
        }
        

        
        internal AstStringOrDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringOrDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstStringOrDefault(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstStringOrDefault Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstStringOrDefault.AstStringOrDefault1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstStringOrDefault.AstStringOrDefault2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// string_or_default : 
        ///    stringtext 
        /// </summary>
        public static AstStringOrDefault StringOrDefault(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstStringOrDefault.AstStringOrDefault1 result = new AstStringOrDefault.AstStringOrDefault1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// string_or_default : 
        ///    DEFAULT 
        /// </summary>
        public static AstStringOrDefault StringOrDefault(ParserRuleContext ctx)
        {
            AstStringOrDefault.AstStringOrDefault2 result = new AstStringOrDefault.AstStringOrDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// contract_ref
    /// 	 : contract_id
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstContractRef : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstContractId), false, false, "contract_id"))));
        
        private static string _ruleValue = "contract_id\r\n | DEFAULT\r\n";
        
        private static string _ruleName = "contract_ref";
        
        /// <summary>
        /// contract_ref : contract_id 
        /// </summary>
        public partial class AstContractRef1 : AstContractRef
        {
            
            private static string _ruleName1 = "contract_ref";
            
            private AstContractId _contractId;
            
            internal AstContractRef1(ParserRuleContext ctx, AstContractId contractId) : 
                    base(ctx)
            {
                _contractId = contractId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstContractId ContractId
            {
                get
                {
                    return _contractId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractRef(this);
            }
        }
        /// <summary>
        /// contract_ref : DEFAULT 
        /// </summary>
        public partial class AstContractRef2 : AstContractRef
        {
            
            private static string _ruleName1 = "contract_ref";
            
            internal AstContractRef2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractRef(this);
            }
        }
        

        
        internal AstContractRef(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstContractRef(Position p) : 
                base(p)
        {
        }
        
        internal AstContractRef(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstContractRef Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstContractRef.AstContractRef1(ctx, list.Get<AstContractId>(0));
            }
            if ((index == 2))
            {
                return new AstContractRef.AstContractRef2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// contract_ref : 
        ///    contract_id 
        /// </summary>
        public static AstContractRef ContractRef(ParserRuleContext ctx, AstContractId contractId)
        {
            AstContractRef.AstContractRef1 result = new AstContractRef.AstContractRef1(ctx, contractId);
            return result;
        }
        
        /// <summary>
        /// contract_ref : 
        ///    DEFAULT 
        /// </summary>
        public static AstContractRef ContractRef(ParserRuleContext ctx)
        {
            AstContractRef.AstContractRef2 result = new AstContractRef.AstContractRef2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// service_master_key_items
    /// 	 : FORCE?  REGENERATE
    /// 	 | WITH  regenerate_account
    /// </summary>
    public abstract partial class AstServiceMasterKeyItems : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstRegenerateAccount), false, false, "regenerate_account"))));
        
        private static string _ruleValue = "FORCE?  REGENERATE\r\n | WITH  regenerate_account\r\n";
        
        private static string _ruleName = "service_master_key_items";
        
        /// <summary>
        /// service_master_key_items : FORCE? REGENERATE 
        /// </summary>
        public partial class AstServiceMasterKeyItems1 : AstServiceMasterKeyItems
        {
            
            private static string _ruleName1 = "service_master_key_items";
            
            internal AstServiceMasterKeyItems1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceMasterKeyItems(this);
            }
        }
        /// <summary>
        /// service_master_key_items : WITH regenerate_account 
        /// </summary>
        public partial class AstServiceMasterKeyItems2 : AstServiceMasterKeyItems
        {
            
            private static string _ruleName1 = "service_master_key_items";
            
            private AstRegenerateAccount _regenerateAccount;
            
            internal AstServiceMasterKeyItems2(ParserRuleContext ctx, AstRegenerateAccount regenerateAccount) : 
                    base(ctx)
            {
                _regenerateAccount = regenerateAccount;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRegenerateAccount RegenerateAccount
            {
                get
                {
                    return _regenerateAccount;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceMasterKeyItems(this);
            }
        }
        

        
        internal AstServiceMasterKeyItems(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServiceMasterKeyItems(Position p) : 
                base(p)
        {
        }
        
        internal AstServiceMasterKeyItems(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServiceMasterKeyItems Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServiceMasterKeyItems.AstServiceMasterKeyItems1(ctx);
            }
            if ((index == 2))
            {
                return new AstServiceMasterKeyItems.AstServiceMasterKeyItems2(ctx, list.Get<AstRegenerateAccount>(0));
            }
            return null;
        }
        
        /// <summary>
        /// service_master_key_items : 
        ///    FORCE? REGENERATE 
        /// </summary>
        public static AstServiceMasterKeyItems ServiceMasterKeyItems(ParserRuleContext ctx)
        {
            AstServiceMasterKeyItems.AstServiceMasterKeyItems1 result = new AstServiceMasterKeyItems.AstServiceMasterKeyItems1(ctx);
            return result;
        }
        
        /// <summary>
        /// service_master_key_items : 
        ///    WITH regenerate_account 
        /// </summary>
        public static AstServiceMasterKeyItems ServiceMasterKeyItems(ParserRuleContext ctx, AstRegenerateAccount regenerateAccount)
        {
            AstServiceMasterKeyItems.AstServiceMasterKeyItems2 result = new AstServiceMasterKeyItems.AstServiceMasterKeyItems2(ctx, regenerateAccount);
            return result;
        }
    }
    
    /// <summary>
    /// regenerate_account
    /// 	 : OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  old_pwd
    /// 	 | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  new_password_set
    /// </summary>
    public abstract partial class AstRegenerateAccount : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOldPwd), false, false, "old_pwd")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstNewPasswordSet), false, false, "new_password_set"))));
        
        private static string _ruleValue = "OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  old_pwd\r\n | NEW_ACCOU" +
            "NT  EQUAL  new_account_name = stringtext  COMMA  new_password_set\r\n";
        
        private static string _ruleName = "regenerate_account";
        
        /// <summary>
        /// regenerate_account : OLD_ACCOUNT EQUAL acold_account_name=stringtext COMMA old_pwd 
        /// </summary>
        public partial class AstRegenerateAccount1 : AstRegenerateAccount
        {
            
            private static string _ruleName1 = "regenerate_account";
            
            private AstStringtext _acoldAccountName;
            
            private AstOldPwd _oldPwd;
            
            internal AstRegenerateAccount1(ParserRuleContext ctx, AstStringtext acoldAccountName, AstOldPwd oldPwd) : 
                    base(ctx)
            {
                _acoldAccountName = acoldAccountName;
                _oldPwd = oldPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext AcoldAccountName
            {
                get
                {
                    return _acoldAccountName;
                }
            }
            
            public virtual AstOldPwd OldPwd
            {
                get
                {
                    return _oldPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRegenerateAccount(this);
            }
        }
        /// <summary>
        /// regenerate_account : NEW_ACCOUNT EQUAL new_account_name=stringtext COMMA new_password_set 
        /// </summary>
        public partial class AstRegenerateAccount2 : AstRegenerateAccount
        {
            
            private static string _ruleName1 = "regenerate_account";
            
            private AstStringtext _newAccountName;
            
            private AstNewPasswordSet _newPasswordSet;
            
            internal AstRegenerateAccount2(ParserRuleContext ctx, AstStringtext newAccountName, AstNewPasswordSet newPasswordSet) : 
                    base(ctx)
            {
                _newAccountName = newAccountName;
                _newPasswordSet = newPasswordSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext NewAccountName
            {
                get
                {
                    return _newAccountName;
                }
            }
            
            public virtual AstNewPasswordSet NewPasswordSet
            {
                get
                {
                    return _newPasswordSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRegenerateAccount(this);
            }
        }
        

        
        internal AstRegenerateAccount(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRegenerateAccount(Position p) : 
                base(p)
        {
        }
        
        internal AstRegenerateAccount(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRegenerateAccount Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRegenerateAccount.AstRegenerateAccount1(ctx, list.Get<AstStringtext>(0), list.Get<AstOldPwd>(1));
            }
            if ((index == 2))
            {
                return new AstRegenerateAccount.AstRegenerateAccount2(ctx, list.Get<AstStringtext>(0), list.Get<AstNewPasswordSet>(1));
            }
            return null;
        }
        
        /// <summary>
        /// regenerate_account : 
        ///    OLD_ACCOUNT EQUAL acold_account_name=stringtext , old_pwd 
        /// </summary>
        public static AstRegenerateAccount RegenerateAccount(ParserRuleContext ctx, AstStringtext acoldAccountName, AstOldPwd oldPwd)
        {
            AstRegenerateAccount.AstRegenerateAccount1 result = new AstRegenerateAccount.AstRegenerateAccount1(ctx, acoldAccountName, oldPwd);
            return result;
        }
        
        /// <summary>
        /// regenerate_account : 
        ///    NEW_ACCOUNT EQUAL new_account_name=stringtext , new_password_set 
        /// </summary>
        public static AstRegenerateAccount RegenerateAccount(ParserRuleContext ctx, AstStringtext newAccountName, AstNewPasswordSet newPasswordSet)
        {
            AstRegenerateAccount.AstRegenerateAccount2 result = new AstRegenerateAccount.AstRegenerateAccount2(ctx, newAccountName, newPasswordSet);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_item
    /// 	 : NAME  EQUAL  user_id
    /// 	 | DEFAULT_SCHEMA  EQUAL  schema_id_null
    /// 	 | LOGIN  EQUAL  login_id
    /// 	 | password_setting  old_pwd+
    /// 	 | DEFAULT_LANGUAGE  EQUAL  language_setting_value
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstAlterUserItem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"), new Bb.Asts.AstRuleMatcherItem(typeof(IEnumerable<AstOldPwd>), false, true, "old_pwd")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaIdNull), false, false, "schema_id_null")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLoginId), false, false, "login_id")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstLanguageSettingValue), false, false, "language_setting_value")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "NAME  EQUAL  user_id\r\n | DEFAULT_SCHEMA  EQUAL  schema_id_null\r\n | LOGIN  EQUAL  " +
            "login_id\r\n | password_setting  old_pwd+\r\n | DEFAULT_LANGUAGE  EQUAL  language_se" +
            "tting_value\r\n | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off\r\n";
        
        private static string _ruleName = "alter_user_item";
        
        /// <summary>
        /// alter_user_item : NAME EQUAL user_id 
        /// </summary>
        public partial class AstAlterUserItem1 : AstAlterUserItem
        {
            
            private static string _ruleName1 = "alter_user_item";
            
            private AstUserId _userId;
            
            internal AstAlterUserItem1(ParserRuleContext ctx, AstUserId userId) : 
                    base(ctx)
            {
                _userId = userId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : DEFAULT_SCHEMA EQUAL schema_id_null 
        /// </summary>
        public partial class AstAlterUserItem2 : AstAlterUserItem
        {
            
            private static string _ruleName1 = "alter_user_item";
            
            private AstSchemaIdNull _schemaIdNull;
            
            internal AstAlterUserItem2(ParserRuleContext ctx, AstSchemaIdNull schemaIdNull) : 
                    base(ctx)
            {
                _schemaIdNull = schemaIdNull;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaIdNull SchemaIdNull
            {
                get
                {
                    return _schemaIdNull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : LOGIN EQUAL login_id 
        /// </summary>
        public partial class AstAlterUserItem3 : AstAlterUserItem
        {
            
            private static string _ruleName1 = "alter_user_item";
            
            private AstLoginId _loginId;
            
            internal AstAlterUserItem3(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : password_setting old_pwd+ 
        /// </summary>
        public partial class AstAlterUserItem4 : AstAlterUserItem
        {
            
            private static string _ruleName1 = "alter_user_item";
            
            private AstPasswordSetting _passwordSetting;
            
            private IEnumerable<AstOldPwd> _oldPwd;
            
            internal AstAlterUserItem4(ParserRuleContext ctx, AstPasswordSetting passwordSetting, IEnumerable<AstOldPwd> oldPwd) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _oldPwd = oldPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual IEnumerable<AstOldPwd> OldPwd
            {
                get
                {
                    return _oldPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public partial class AstAlterUserItem5 : AstAlterUserItem
        {
            
            private static string _ruleName1 = "alter_user_item";
            
            private AstLanguageSettingValue _languageSettingValue;
            
            internal AstAlterUserItem5(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue) : 
                    base(ctx)
            {
                _languageSettingValue = languageSettingValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLanguageSettingValue LanguageSettingValue
            {
                get
                {
                    return _languageSettingValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstAlterUserItem6 : AstAlterUserItem
        {
            
            private static string _ruleName1 = "alter_user_item";
            
            private AstOnOff _onOff;
            
            internal AstAlterUserItem6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        

        
        internal AstAlterUserItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserItem(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterUserItem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterUserItem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterUserItem.AstAlterUserItem1(ctx, list.Get<AstUserId>(0));
            }
            if ((index == 2))
            {
                return new AstAlterUserItem.AstAlterUserItem2(ctx, list.Get<AstSchemaIdNull>(0));
            }
            if ((index == 3))
            {
                return new AstAlterUserItem.AstAlterUserItem3(ctx, list.Get<AstLoginId>(0));
            }
            if ((index == 4))
            {
                return new AstAlterUserItem.AstAlterUserItem4(ctx, list.Get<AstPasswordSetting>(0), list.Get<IEnumerable<AstOldPwd>>(1));
            }
            if ((index == 5))
            {
                return new AstAlterUserItem.AstAlterUserItem5(ctx, list.Get<AstLanguageSettingValue>(0));
            }
            if ((index == 6))
            {
                return new AstAlterUserItem.AstAlterUserItem6(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstUserId userId)
        {
            AstAlterUserItem.AstAlterUserItem1 result = new AstAlterUserItem.AstAlterUserItem1(ctx, userId);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    DEFAULT_SCHEMA EQUAL schema_id_null 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstSchemaIdNull schemaIdNull)
        {
            AstAlterUserItem.AstAlterUserItem2 result = new AstAlterUserItem.AstAlterUserItem2(ctx, schemaIdNull);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstAlterUserItem.AstAlterUserItem3 result = new AstAlterUserItem.AstAlterUserItem3(ctx, loginId);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    password_setting old_pwd+ 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstPasswordSetting passwordSetting, IEnumerable<AstOldPwd> oldPwd)
        {
            AstAlterUserItem.AstAlterUserItem4 result = new AstAlterUserItem.AstAlterUserItem4(ctx, passwordSetting, oldPwd);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue)
        {
            AstAlterUserItem.AstAlterUserItem5 result = new AstAlterUserItem.AstAlterUserItem5(ctx, languageSettingValue);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterUserItem.AstAlterUserItem6 result = new AstAlterUserItem.AstAlterUserItem6(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// schema_id_null
    /// 	 : schema_identifier
    /// 	 | NULL_
    /// </summary>
    public abstract partial class AstSchemaIdNull : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaIdentifier), false, false, "schema_identifier"))));
        
        private static string _ruleValue = "schema_identifier\r\n | NULL_\r\n";
        
        private static string _ruleName = "schema_id_null";
        
        /// <summary>
        /// schema_id_null : schema_identifier 
        /// </summary>
        public partial class AstSchemaIdNull1 : AstSchemaIdNull
        {
            
            private static string _ruleName1 = "schema_id_null";
            
            private AstSchemaIdentifier _schemaIdentifier;
            
            internal AstSchemaIdNull1(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier) : 
                    base(ctx)
            {
                _schemaIdentifier = schemaIdentifier;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSchemaIdentifier SchemaIdentifier
            {
                get
                {
                    return _schemaIdentifier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaIdNull(this);
            }
        }
        /// <summary>
        /// schema_id_null : NULL_ 
        /// </summary>
        public partial class AstSchemaIdNull2 : AstSchemaIdNull
        {
            
            private static string _ruleName1 = "schema_id_null";
            
            internal AstSchemaIdNull2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaIdNull(this);
            }
        }
        

        
        internal AstSchemaIdNull(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSchemaIdNull(Position p) : 
                base(p)
        {
        }
        
        internal AstSchemaIdNull(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSchemaIdNull Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSchemaIdNull.AstSchemaIdNull1(ctx, list.Get<AstSchemaIdentifier>(0));
            }
            if ((index == 2))
            {
                return new AstSchemaIdNull.AstSchemaIdNull2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// schema_id_null : 
        ///    schema_identifier 
        /// </summary>
        public static AstSchemaIdNull SchemaIdNull(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier)
        {
            AstSchemaIdNull.AstSchemaIdNull1 result = new AstSchemaIdNull.AstSchemaIdNull1(ctx, schemaIdentifier);
            return result;
        }
        
        /// <summary>
        /// schema_id_null : 
        ///    NULL_ 
        /// </summary>
        public static AstSchemaIdNull SchemaIdNull(ParserRuleContext ctx)
        {
            AstSchemaIdNull.AstSchemaIdNull2 result = new AstSchemaIdNull.AstSchemaIdNull2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_user
    /// 	 : CREATE  USER  user_id  create_user_with_login
    /// 	 | CREATE  USER  create_user_windows_principal_id
    /// 	 | CREATE  USER  user_id  create_user_without_login?
    /// </summary>
    public abstract partial class AstCreateUser : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateUserWithLogin), false, false, "create_user_with_login")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateUserWithoutLogin), true, false, "create_user_without_login")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateUserWindowsPrincipalId), false, false, "create_user_windows_principal_id"))));
        
        private static string _ruleValue = "CREATE  USER  user_id  create_user_with_login\r\n | CREATE  USER  create_user_windo" +
            "ws_principal_id\r\n | CREATE  USER  user_id  create_user_without_login?\r\n";
        
        private static string _ruleName = "create_user";
        
        /// <summary>
        /// create_user : CREATE USER user_id create_user_with_login 
        /// </summary>
        public partial class AstCreateUser1 : AstCreateUser
        {
            
            private static string _ruleName1 = "create_user";
            
            private AstUserId _userId;
            
            private AstCreateUserWithLogin _createUserWithLogin;
            
            internal AstCreateUser1(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithLogin createUserWithLogin) : 
                    base(ctx)
            {
                _userId = userId;
                _createUserWithLogin = createUserWithLogin;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstCreateUserWithLogin CreateUserWithLogin
            {
                get
                {
                    return _createUserWithLogin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        /// <summary>
        /// create_user : CREATE USER create_user_windows_principal_id 
        /// </summary>
        public partial class AstCreateUser2 : AstCreateUser
        {
            
            private static string _ruleName1 = "create_user";
            
            private AstCreateUserWindowsPrincipalId _createUserWindowsPrincipalId;
            
            internal AstCreateUser2(ParserRuleContext ctx, AstCreateUserWindowsPrincipalId createUserWindowsPrincipalId) : 
                    base(ctx)
            {
                _createUserWindowsPrincipalId = createUserWindowsPrincipalId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId
            {
                get
                {
                    return _createUserWindowsPrincipalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        /// <summary>
        /// create_user : CREATE USER user_id create_user_without_login? 
        /// </summary>
        public partial class AstCreateUser3 : AstCreateUser
        {
            
            private static string _ruleName1 = "create_user";
            
            private AstUserId _userId;
            
            private AstCreateUserWithoutLogin? _createUserWithoutLogin;
            
            internal AstCreateUser3(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithoutLogin? createUserWithoutLogin) : 
                    base(ctx)
            {
                _userId = userId;
                _createUserWithoutLogin = createUserWithoutLogin;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstCreateUserWithoutLogin? CreateUserWithoutLogin
            {
                get
                {
                    return _createUserWithoutLogin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        

        
        internal AstCreateUser(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUser(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUser(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateUser Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateUser.AstCreateUser1(ctx, list.Get<AstUserId>(0), list.Get<AstCreateUserWithLogin>(1));
            }
            if ((index == 2))
            {
                return new AstCreateUser.AstCreateUser2(ctx, list.Get<AstCreateUserWindowsPrincipalId>(0));
            }
            if ((index == 3))
            {
                return new AstCreateUser.AstCreateUser3(ctx, list.Get<AstUserId>(0), list.Get<AstCreateUserWithoutLogin?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER user_id create_user_with_login 
        /// </summary>
        public static AstCreateUser CreateUser(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithLogin createUserWithLogin)
        {
            AstCreateUser.AstCreateUser1 result = new AstCreateUser.AstCreateUser1(ctx, userId, createUserWithLogin);
            return result;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER create_user_windows_principal_id 
        /// </summary>
        public static AstCreateUser CreateUser(ParserRuleContext ctx, AstCreateUserWindowsPrincipalId createUserWindowsPrincipalId)
        {
            AstCreateUser.AstCreateUser2 result = new AstCreateUser.AstCreateUser2(ctx, createUserWindowsPrincipalId);
            return result;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER user_id create_user_without_login? 
        /// </summary>
        public static AstCreateUser CreateUser(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithoutLogin createUserWithoutLogin)
        {
            AstCreateUser.AstCreateUser3 result = new AstCreateUser.AstCreateUser3(ctx, userId, createUserWithoutLogin);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_with_login
    /// 	 : (for_from  LOGIN  login_id)?  (WITH  user_settings_shorts)?
    /// </summary>
    public partial class AstCreateUserWithLogin : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstForFrom), false, false, "for_from"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLoginId), false, false, "login_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUserSettingsShorts), false, false, "user_settings_shorts"))));
        
        private AstForFrom _forFrom;
        
        private AstLoginId _loginId;
        
        private AstUserSettingsShorts _userSettingsShorts;
        
        private static string _ruleValue = "(for_from  LOGIN  login_id)?  (WITH  user_settings_shorts)?\r\n";
        
        private static string _ruleName = "create_user_with_login";
        
        internal AstCreateUserWithLogin(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithLogin(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithLogin(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateUserWithLogin(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId, AstUserSettingsShorts userSettingsShorts) : 
                base(ctx)
        {
            _forFrom = forFrom;
            _loginId = loginId;
            _userSettingsShorts = userSettingsShorts;
        }
        
        public virtual AstForFrom ForFrom
        {
            get
            {
                return _forFrom;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return _loginId;
            }
        }
        
        public virtual AstUserSettingsShorts UserSettingsShorts
        {
            get
            {
                return _userSettingsShorts;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserWithLogin(this);
        }
        
        public static AstCreateUserWithLogin Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCreateUserWithLogin(ctx, list.Get<AstForFrom>(0), list.Get<AstLoginId>(1), list.Get<AstUserSettingsShorts>(2));
        }
        
        /// <summary>
        /// create_user_with_login : 
        ///    for_from LOGIN login_id WITH user_settings_shorts 
        /// </summary>
        public static AstCreateUserWithLogin CreateUserWithLogin(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId, AstUserSettingsShorts userSettingsShorts)
        {
            AstCreateUserWithLogin result = new AstCreateUserWithLogin(ctx, forFrom, loginId, userSettingsShorts);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_without_login
    /// 	 : WITHOUT  LOGIN  user_settings_shorts?
    /// 	 | for_from  CERTIFICATE  certificate_id
    /// 	 | for_from  ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstCreateUserWithoutLogin : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstForFrom), false, false, "for_from"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCertificateId), false, false, "certificate_id")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstForFrom), false, false, "for_from"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsymKeyId), false, false, "asym_key_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserSettingsShorts), true, false, "user_settings_shorts"))));
        
        private static string _ruleValue = "WITHOUT  LOGIN  user_settings_shorts?\r\n | for_from  CERTIFICATE  certificate_id\r\n" +
            " | for_from  ASYMMETRIC  KEY  asym_key_id\r\n";
        
        private static string _ruleName = "create_user_without_login";
        
        /// <summary>
        /// create_user_without_login : WITHOUT LOGIN user_settings_shorts? 
        /// </summary>
        public partial class AstCreateUserWithoutLogin1 : AstCreateUserWithoutLogin
        {
            
            private static string _ruleName1 = "create_user_without_login";
            
            private AstUserSettingsShorts? _userSettingsShorts;
            
            internal AstCreateUserWithoutLogin1(ParserRuleContext ctx, AstUserSettingsShorts? userSettingsShorts) : 
                    base(ctx)
            {
                _userSettingsShorts = userSettingsShorts;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserSettingsShorts? UserSettingsShorts
            {
                get
                {
                    return _userSettingsShorts;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        /// <summary>
        /// create_user_without_login : for_from CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstCreateUserWithoutLogin2 : AstCreateUserWithoutLogin
        {
            
            private static string _ruleName1 = "create_user_without_login";
            
            private AstForFrom _forFrom;
            
            private AstCertificateId _certificateId;
            
            internal AstCreateUserWithoutLogin2(ParserRuleContext ctx, AstForFrom forFrom, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _forFrom = forFrom;
                _certificateId = certificateId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstForFrom ForFrom
            {
                get
                {
                    return _forFrom;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        /// <summary>
        /// create_user_without_login : for_from ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstCreateUserWithoutLogin3 : AstCreateUserWithoutLogin
        {
            
            private static string _ruleName1 = "create_user_without_login";
            
            private AstForFrom _forFrom;
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstCreateUserWithoutLogin3(ParserRuleContext ctx, AstForFrom forFrom, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _forFrom = forFrom;
                _asymKeyId = asymKeyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstForFrom ForFrom
            {
                get
                {
                    return _forFrom;
                }
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        

        
        internal AstCreateUserWithoutLogin(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithoutLogin(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithoutLogin(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateUserWithoutLogin Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1(ctx, list.Get<AstUserSettingsShorts?>(0));
            }
            if ((index == 2))
            {
                return new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2(ctx, list.Get<AstForFrom>(0), list.Get<AstCertificateId>(1));
            }
            if ((index == 3))
            {
                return new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3(ctx, list.Get<AstForFrom>(0), list.Get<AstAsymKeyId>(1));
            }
            return null;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    WITHOUT LOGIN user_settings_shorts? 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(ParserRuleContext ctx, AstUserSettingsShorts userSettingsShorts)
        {
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1(ctx, userSettingsShorts);
            return result;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    for_from CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(ParserRuleContext ctx, AstForFrom forFrom, AstCertificateId certificateId)
        {
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2(ctx, forFrom, certificateId);
            return result;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    for_from ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(ParserRuleContext ctx, AstForFrom forFrom, AstAsymKeyId asymKeyId)
        {
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3(ctx, forFrom, asymKeyId);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_windows_principal_id
    /// 	 : windows_principal_id  (WITH  user_settings)?
    /// 	 | user_id  WITH  password_setting  user_settings?
    /// 	 | user_id  FROM  EXTERNAL  PROVIDER
    /// </summary>
    public abstract partial class AstCreateUserWindowsPrincipalId : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUserSettings), true, false, "user_settings")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWindowsPrincipalId), false, false, "windows_principal_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUserSettings), false, false, "user_settings")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id"))));
        
        private static string _ruleValue = "windows_principal_id  (WITH  user_settings)?\r\n | user_id  WITH  password_setting " +
            " user_settings?\r\n | user_id  FROM  EXTERNAL  PROVIDER\r\n";
        
        private static string _ruleName = "create_user_windows_principal_id";
        
        /// <summary>
        /// create_user_windows_principal_id : windows_principal_id WITH user_settings 
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId1 : AstCreateUserWindowsPrincipalId
        {
            
            private static string _ruleName1 = "create_user_windows_principal_id";
            
            private AstWindowsPrincipalId _windowsPrincipalId;
            
            private AstUserSettings _userSettings;
            
            internal AstCreateUserWindowsPrincipalId1(ParserRuleContext ctx, AstWindowsPrincipalId windowsPrincipalId, AstUserSettings userSettings) : 
                    base(ctx)
            {
                _windowsPrincipalId = windowsPrincipalId;
                _userSettings = userSettings;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWindowsPrincipalId WindowsPrincipalId
            {
                get
                {
                    return _windowsPrincipalId;
                }
            }
            
            public virtual AstUserSettings UserSettings
            {
                get
                {
                    return _userSettings;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        /// <summary>
        /// create_user_windows_principal_id : user_id WITH password_setting user_settings? 
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId2 : AstCreateUserWindowsPrincipalId
        {
            
            private static string _ruleName1 = "create_user_windows_principal_id";
            
            private AstUserId _userId;
            
            private AstPasswordSetting _passwordSetting;
            
            private AstUserSettings? _userSettings;
            
            internal AstCreateUserWindowsPrincipalId2(ParserRuleContext ctx, AstUserId userId, AstPasswordSetting passwordSetting, AstUserSettings? userSettings) : 
                    base(ctx)
            {
                _userId = userId;
                _passwordSetting = passwordSetting;
                _userSettings = userSettings;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstUserSettings? UserSettings
            {
                get
                {
                    return _userSettings;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        /// <summary>
        /// create_user_windows_principal_id : user_id FROM EXTERNAL PROVIDER 
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId3 : AstCreateUserWindowsPrincipalId
        {
            
            private static string _ruleName1 = "create_user_windows_principal_id";
            
            private AstUserId _userId;
            
            internal AstCreateUserWindowsPrincipalId3(ParserRuleContext ctx, AstUserId userId) : 
                    base(ctx)
            {
                _userId = userId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        

        
        internal AstCreateUserWindowsPrincipalId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateUserWindowsPrincipalId Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1(ctx, list.Get<AstWindowsPrincipalId>(0), list.Get<AstUserSettings>(1));
            }
            if ((index == 2))
            {
                return new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2(ctx, list.Get<AstUserId>(0), list.Get<AstPasswordSetting>(1), list.Get<AstUserSettings?>(2));
            }
            if ((index == 3))
            {
                return new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3(ctx, list.Get<AstUserId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    windows_principal_id WITH user_settings 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(ParserRuleContext ctx, AstWindowsPrincipalId windowsPrincipalId, AstUserSettings userSettings)
        {
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1(ctx, windowsPrincipalId, userSettings);
            return result;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    user_id WITH password_setting user_settings? 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(ParserRuleContext ctx, AstUserId userId, AstPasswordSetting passwordSetting, AstUserSettings userSettings)
        {
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2(ctx, userId, passwordSetting, userSettings);
            return result;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    user_id FROM EXTERNAL PROVIDER 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(ParserRuleContext ctx, AstUserId userId)
        {
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3(ctx, userId);
            return result;
        }
    }
    
    /// <summary>
    /// pwd_value
    /// 	 : pwd
    /// 	 | binary_  HASHED
    /// </summary>
    public abstract partial class AstPwdValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPwd), false, false, "pwd")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_"))));
        
        private static string _ruleValue = "pwd\r\n | binary_  HASHED\r\n";
        
        private static string _ruleName = "pwd_value";
        
        /// <summary>
        /// pwd_value : pwd 
        /// </summary>
        public partial class AstPwdValue1 : AstPwdValue
        {
            
            private static string _ruleName1 = "pwd_value";
            
            private AstPwd _pwd;
            
            internal AstPwdValue1(ParserRuleContext ctx, AstPwd pwd) : 
                    base(ctx)
            {
                _pwd = pwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPwd Pwd
            {
                get
                {
                    return _pwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPwdValue(this);
            }
        }
        /// <summary>
        /// pwd_value : binary_ HASHED 
        /// </summary>
        public partial class AstPwdValue2 : AstPwdValue
        {
            
            private static string _ruleName1 = "pwd_value";
            
            private AstBinary _binary;
            
            internal AstPwdValue2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPwdValue(this);
            }
        }
        

        
        internal AstPwdValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPwdValue(Position p) : 
                base(p)
        {
        }
        
        internal AstPwdValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPwdValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPwdValue.AstPwdValue1(ctx, list.Get<AstPwd>(0));
            }
            if ((index == 2))
            {
                return new AstPwdValue.AstPwdValue2(ctx, list.Get<AstBinary>(0));
            }
            return null;
        }
        
        /// <summary>
        /// pwd_value : 
        ///    pwd 
        /// </summary>
        public static AstPwdValue PwdValue(ParserRuleContext ctx, AstPwd pwd)
        {
            AstPwdValue.AstPwdValue1 result = new AstPwdValue.AstPwdValue1(ctx, pwd);
            return result;
        }
        
        /// <summary>
        /// pwd_value : 
        ///    binary_ HASHED 
        /// </summary>
        public static AstPwdValue PwdValue(ParserRuleContext ctx, AstBinary binary)
        {
            AstPwdValue.AstPwdValue2 result = new AstPwdValue.AstPwdValue2(ctx, binary);
            return result;
        }
    }
    
    /// <summary>
    /// user_settings_short
    /// 	 : default_schema_set
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUserSettingsShort : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDefaultSchemaSet), false, false, "default_schema_set")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "default_schema_set\r\n | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off\r\n";
        
        private static string _ruleName = "user_settings_short";
        
        /// <summary>
        /// user_settings_short : default_schema_set 
        /// </summary>
        public partial class AstUserSettingsShort1 : AstUserSettingsShort
        {
            
            private static string _ruleName1 = "user_settings_short";
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstUserSettingsShort1(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettingsShort(this);
            }
        }
        /// <summary>
        /// user_settings_short : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstUserSettingsShort2 : AstUserSettingsShort
        {
            
            private static string _ruleName1 = "user_settings_short";
            
            private AstOnOff _onOff;
            
            internal AstUserSettingsShort2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettingsShort(this);
            }
        }
        

        
        internal AstUserSettingsShort(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserSettingsShort(Position p) : 
                base(p)
        {
        }
        
        internal AstUserSettingsShort(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUserSettingsShort Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUserSettingsShort.AstUserSettingsShort1(ctx, list.Get<AstDefaultSchemaSet>(0));
            }
            if ((index == 2))
            {
                return new AstUserSettingsShort.AstUserSettingsShort2(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// user_settings_short : 
        ///    default_schema_set 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstUserSettingsShort.AstUserSettingsShort1 result = new AstUserSettingsShort.AstUserSettingsShort1(ctx, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// user_settings_short : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstUserSettingsShort.AstUserSettingsShort2 result = new AstUserSettingsShort.AstUserSettingsShort2(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// user_setting
    /// 	 : default_schema_set
    /// 	 | DEFAULT_LANGUAGE  EQUAL  language_setting_value
    /// 	 | SID  EQUAL  binary_
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUserSetting : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDefaultSchemaSet), false, false, "default_schema_set")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLanguageSettingValue), false, false, "language_setting_value")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "default_schema_set\r\n | DEFAULT_LANGUAGE  EQUAL  language_setting_value\r\n | SID  E" +
            "QUAL  binary_\r\n | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off\r\n";
        
        private static string _ruleName = "user_setting";
        
        /// <summary>
        /// user_setting : default_schema_set 
        /// </summary>
        public partial class AstUserSetting1 : AstUserSetting
        {
            
            private static string _ruleName1 = "user_setting";
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstUserSetting1(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        /// <summary>
        /// user_setting : DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public partial class AstUserSetting2 : AstUserSetting
        {
            
            private static string _ruleName1 = "user_setting";
            
            private AstLanguageSettingValue _languageSettingValue;
            
            internal AstUserSetting2(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue) : 
                    base(ctx)
            {
                _languageSettingValue = languageSettingValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLanguageSettingValue LanguageSettingValue
            {
                get
                {
                    return _languageSettingValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        /// <summary>
        /// user_setting : SID EQUAL binary_ 
        /// </summary>
        public partial class AstUserSetting3 : AstUserSetting
        {
            
            private static string _ruleName1 = "user_setting";
            
            private AstBinary _binary;
            
            internal AstUserSetting3(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        /// <summary>
        /// user_setting : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstUserSetting4 : AstUserSetting
        {
            
            private static string _ruleName1 = "user_setting";
            
            private AstOnOff _onOff;
            
            internal AstUserSetting4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        

        
        internal AstUserSetting(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserSetting(Position p) : 
                base(p)
        {
        }
        
        internal AstUserSetting(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUserSetting Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUserSetting.AstUserSetting1(ctx, list.Get<AstDefaultSchemaSet>(0));
            }
            if ((index == 2))
            {
                return new AstUserSetting.AstUserSetting2(ctx, list.Get<AstLanguageSettingValue>(0));
            }
            if ((index == 3))
            {
                return new AstUserSetting.AstUserSetting3(ctx, list.Get<AstBinary>(0));
            }
            if ((index == 4))
            {
                return new AstUserSetting.AstUserSetting4(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// user_setting : 
        ///    default_schema_set 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstUserSetting.AstUserSetting1 result = new AstUserSetting.AstUserSetting1(ctx, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// user_setting : 
        ///    DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue)
        {
            AstUserSetting.AstUserSetting2 result = new AstUserSetting.AstUserSetting2(ctx, languageSettingValue);
            return result;
        }
        
        /// <summary>
        /// user_setting : 
        ///    SID EQUAL binary_ 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstBinary binary)
        {
            AstUserSetting.AstUserSetting3 result = new AstUserSetting.AstUserSetting3(ctx, binary);
            return result;
        }
        
        /// <summary>
        /// user_setting : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstUserSetting.AstUserSetting4 result = new AstUserSetting.AstUserSetting4(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_azure_sql_dw
    /// 	 : CREATE  USER  user_id  user_strategy?  (WITH  default_schema_set)?
    /// 	 | CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  default_schema_set)?
    /// </summary>
    public abstract partial class AstCreateUserAzureSqlDw : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUserStrategy), true, false, "user_strategy"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDefaultSchemaSet), false, false, "default_schema_set")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDefaultSchemaSet), false, false, "default_schema_set"))));
        
        private static string _ruleValue = "CREATE  USER  user_id  user_strategy?  (WITH  default_schema_set)?\r\n | CREATE  US" +
            "ER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  default_schema_set)?\r\n";
        
        private static string _ruleName = "create_user_azure_sql_dw";
        
        /// <summary>
        /// create_user_azure_sql_dw : CREATE USER user_id user_strategy? WITH default_schema_set 
        /// </summary>
        public partial class AstCreateUserAzureSqlDw1 : AstCreateUserAzureSqlDw
        {
            
            private static string _ruleName1 = "create_user_azure_sql_dw";
            
            private AstUserId _userId;
            
            private AstUserStrategy? _userStrategy;
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstCreateUserAzureSqlDw1(ParserRuleContext ctx, AstUserId userId, AstUserStrategy? userStrategy, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _userId = userId;
                _userStrategy = userStrategy;
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstUserStrategy? UserStrategy
            {
                get
                {
                    return _userStrategy;
                }
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserAzureSqlDw(this);
            }
        }
        /// <summary>
        /// create_user_azure_sql_dw : CREATE USER user_id FROM EXTERNAL PROVIDER WITH default_schema_set 
        /// </summary>
        public partial class AstCreateUserAzureSqlDw2 : AstCreateUserAzureSqlDw
        {
            
            private static string _ruleName1 = "create_user_azure_sql_dw";
            
            private AstUserId _userId;
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstCreateUserAzureSqlDw2(ParserRuleContext ctx, AstUserId userId, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _userId = userId;
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserAzureSqlDw(this);
            }
        }
        

        
        internal AstCreateUserAzureSqlDw(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserAzureSqlDw(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserAzureSqlDw(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateUserAzureSqlDw Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1(ctx, list.Get<AstUserId>(0), list.Get<AstUserStrategy?>(1), list.Get<AstDefaultSchemaSet>(2));
            }
            if ((index == 2))
            {
                return new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw2(ctx, list.Get<AstUserId>(0), list.Get<AstDefaultSchemaSet>(1));
            }
            return null;
        }
        
        /// <summary>
        /// create_user_azure_sql_dw : 
        ///    CREATE USER user_id user_strategy? WITH default_schema_set 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(ParserRuleContext ctx, AstUserId userId, AstUserStrategy userStrategy, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1 result = new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1(ctx, userId, userStrategy, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// create_user_azure_sql_dw : 
        ///    CREATE USER user_id FROM EXTERNAL PROVIDER WITH default_schema_set 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(ParserRuleContext ctx, AstUserId userId, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw2 result = new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw2(ctx, userId, defaultSchemaSet);
            return result;
        }
    }
    
    /// <summary>
    /// user_strategy
    /// 	 : for_from  LOGIN  login_id
    /// 	 | WITHOUT  LOGIN
    /// </summary>
    public abstract partial class AstUserStrategy : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstForFrom), false, false, "for_from"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLoginId), false, false, "login_id"))));
        
        private static string _ruleValue = "for_from  LOGIN  login_id\r\n | WITHOUT  LOGIN\r\n";
        
        private static string _ruleName = "user_strategy";
        
        /// <summary>
        /// user_strategy : for_from LOGIN login_id 
        /// </summary>
        public partial class AstUserStrategy1 : AstUserStrategy
        {
            
            private static string _ruleName1 = "user_strategy";
            
            private AstForFrom _forFrom;
            
            private AstLoginId _loginId;
            
            internal AstUserStrategy1(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId) : 
                    base(ctx)
            {
                _forFrom = forFrom;
                _loginId = loginId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstForFrom ForFrom
            {
                get
                {
                    return _forFrom;
                }
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserStrategy(this);
            }
        }
        /// <summary>
        /// user_strategy : WITHOUT LOGIN 
        /// </summary>
        public partial class AstUserStrategy2 : AstUserStrategy
        {
            
            private static string _ruleName1 = "user_strategy";
            
            internal AstUserStrategy2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserStrategy(this);
            }
        }
        

        
        internal AstUserStrategy(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserStrategy(Position p) : 
                base(p)
        {
        }
        
        internal AstUserStrategy(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUserStrategy Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUserStrategy.AstUserStrategy1(ctx, list.Get<AstForFrom>(0), list.Get<AstLoginId>(1));
            }
            if ((index == 2))
            {
                return new AstUserStrategy.AstUserStrategy2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// user_strategy : 
        ///    for_from LOGIN login_id 
        /// </summary>
        public static AstUserStrategy UserStrategy(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId)
        {
            AstUserStrategy.AstUserStrategy1 result = new AstUserStrategy.AstUserStrategy1(ctx, forFrom, loginId);
            return result;
        }
        
        /// <summary>
        /// user_strategy : 
        ///    WITHOUT LOGIN 
        /// </summary>
        public static AstUserStrategy UserStrategy(ParserRuleContext ctx)
        {
            AstUserStrategy.AstUserStrategy2 result = new AstUserStrategy.AstUserStrategy2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql_info
    /// 	 : NAME  EQUAL  user_id
    /// 	 | default_schema_set
    /// 	 | LOGIN  EQUAL  login_id
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstAlterUserAzureSqlInfo : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDefaultSchemaSet), false, false, "default_schema_set")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLoginId), false, false, "login_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "NAME  EQUAL  user_id\r\n | default_schema_set\r\n | LOGIN  EQUAL  login_id\r\n | ALLOW_" +
            "ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off\r\n";
        
        private static string _ruleName = "alter_user_azure_sql_info";
        
        /// <summary>
        /// alter_user_azure_sql_info : NAME EQUAL user_id 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo1 : AstAlterUserAzureSqlInfo
        {
            
            private static string _ruleName1 = "alter_user_azure_sql_info";
            
            private AstUserId _userId;
            
            internal AstAlterUserAzureSqlInfo1(ParserRuleContext ctx, AstUserId userId) : 
                    base(ctx)
            {
                _userId = userId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        /// <summary>
        /// alter_user_azure_sql_info : default_schema_set 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo2 : AstAlterUserAzureSqlInfo
        {
            
            private static string _ruleName1 = "alter_user_azure_sql_info";
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstAlterUserAzureSqlInfo2(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        /// <summary>
        /// alter_user_azure_sql_info : LOGIN EQUAL login_id 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo3 : AstAlterUserAzureSqlInfo
        {
            
            private static string _ruleName1 = "alter_user_azure_sql_info";
            
            private AstLoginId _loginId;
            
            internal AstAlterUserAzureSqlInfo3(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        /// <summary>
        /// alter_user_azure_sql_info : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo4 : AstAlterUserAzureSqlInfo
        {
            
            private static string _ruleName1 = "alter_user_azure_sql_info";
            
            private AstOnOff _onOff;
            
            internal AstAlterUserAzureSqlInfo4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        

        
        internal AstAlterUserAzureSqlInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterUserAzureSqlInfo Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo1(ctx, list.Get<AstUserId>(0));
            }
            if ((index == 2))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo2(ctx, list.Get<AstDefaultSchemaSet>(0));
            }
            if ((index == 3))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo3(ctx, list.Get<AstLoginId>(0));
            }
            if ((index == 4))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo4(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstUserId userId)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo1 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo1(ctx, userId);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    default_schema_set 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo2 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo2(ctx, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo3 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo3(ctx, loginId);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo4 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo4(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// workload_group_name
    /// 	 : workload_group_group_id
    /// 	 | DEFAULT_DOUBLE_QUOTE
    /// </summary>
    public abstract partial class AstWorkloadGroupName : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWorkloadGroupGroupId), false, false, "workload_group_group_id"))));
        
        private static string _ruleValue = "workload_group_group_id\r\n | DEFAULT_DOUBLE_QUOTE\r\n";
        
        private static string _ruleName = "workload_group_name";
        
        /// <summary>
        /// workload_group_name : workload_group_group_id 
        /// </summary>
        public partial class AstWorkloadGroupName1 : AstWorkloadGroupName
        {
            
            private static string _ruleName1 = "workload_group_name";
            
            private AstWorkloadGroupGroupId _workloadGroupGroupId;
            
            internal AstWorkloadGroupName1(ParserRuleContext ctx, AstWorkloadGroupGroupId workloadGroupGroupId) : 
                    base(ctx)
            {
                _workloadGroupGroupId = workloadGroupGroupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWorkloadGroupGroupId WorkloadGroupGroupId
            {
                get
                {
                    return _workloadGroupGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupName(this);
            }
        }
        /// <summary>
        /// workload_group_name : DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstWorkloadGroupName2 : AstWorkloadGroupName
        {
            
            private static string _ruleName1 = "workload_group_name";
            
            internal AstWorkloadGroupName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupName(this);
            }
        }
        

        
        internal AstWorkloadGroupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWorkloadGroupName(Position p) : 
                base(p)
        {
        }
        
        internal AstWorkloadGroupName(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWorkloadGroupName Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWorkloadGroupName.AstWorkloadGroupName1(ctx, list.Get<AstWorkloadGroupGroupId>(0));
            }
            if ((index == 2))
            {
                return new AstWorkloadGroupName.AstWorkloadGroupName2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// workload_group_name : 
        ///    workload_group_group_id 
        /// </summary>
        public static AstWorkloadGroupName WorkloadGroupName(ParserRuleContext ctx, AstWorkloadGroupGroupId workloadGroupGroupId)
        {
            AstWorkloadGroupName.AstWorkloadGroupName1 result = new AstWorkloadGroupName.AstWorkloadGroupName1(ctx, workloadGroupGroupId);
            return result;
        }
        
        /// <summary>
        /// workload_group_name : 
        ///    DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstWorkloadGroupName WorkloadGroupName(ParserRuleContext ctx)
        {
            AstWorkloadGroupName.AstWorkloadGroupName2 result = new AstWorkloadGroupName.AstWorkloadGroupName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_workload_group_using
    /// 	 : USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public abstract partial class AstAlterWorkloadGroupUsing : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWorkloadGroupPoolId), false, false, "workload_group_pool_id"))));
        
        private static string _ruleValue = "USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)\r\n";
        
        private static string _ruleName = "alter_workload_group_using";
        
        /// <summary>
        /// alter_workload_group_using : USING workload_group_pool_id 
        /// </summary>
        public partial class AstAlterWorkloadGroupUsing1 : AstAlterWorkloadGroupUsing
        {
            
            private static string _ruleName1 = "alter_workload_group_using";
            
            private AstWorkloadGroupPoolId _workloadGroupPoolId;
            
            internal AstAlterWorkloadGroupUsing1(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId) : 
                    base(ctx)
            {
                _workloadGroupPoolId = workloadGroupPoolId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWorkloadGroupPoolId WorkloadGroupPoolId
            {
                get
                {
                    return _workloadGroupPoolId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterWorkloadGroupUsing(this);
            }
        }
        /// <summary>
        /// alter_workload_group_using : USING DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstAlterWorkloadGroupUsing2 : AstAlterWorkloadGroupUsing
        {
            
            private static string _ruleName1 = "alter_workload_group_using";
            
            internal AstAlterWorkloadGroupUsing2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterWorkloadGroupUsing(this);
            }
        }
        

        
        internal AstAlterWorkloadGroupUsing(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterWorkloadGroupUsing Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing1(ctx, list.Get<AstWorkloadGroupPoolId>(0));
            }
            if ((index == 2))
            {
                return new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// alter_workload_group_using : 
        ///    USING workload_group_pool_id 
        /// </summary>
        public static AstAlterWorkloadGroupUsing AlterWorkloadGroupUsing(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing1 result = new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing1(ctx, workloadGroupPoolId);
            return result;
        }
        
        /// <summary>
        /// alter_workload_group_using : 
        ///    USING DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstAlterWorkloadGroupUsing AlterWorkloadGroupUsing(ParserRuleContext ctx)
        {
            AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing2 result = new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// workload_option_item
    /// 	 : (IMPORTANCE  EQUAL  importance_level)?  (COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = decimal)?  (COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = decimal)?  (COMMA?  REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = decimal)?  (COMMA?  MAX_DOP  EQUAL  max_dop = decimal)?  (COMMA?  GROUP_MAX_REQUESTS  EQUAL  group_max_requests = decimal)?
    /// </summary>
    public partial class AstWorkloadOptionItem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstImportanceLevel), false, false, "importance_level"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstImportanceLevel _importanceLevel;
        
        private AstDecimal _requestMaxMemoryGrant;
        
        private AstDecimal _requestMaxCpuTimeSec;
        
        private AstDecimal _requestMemoryGrantTimeoutSec;
        
        private AstDecimal _maxDop;
        
        private AstDecimal _groupMaxRequests;
        
        private static string _ruleValue = @"(IMPORTANCE  EQUAL  importance_level)?  (COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = decimal)?  (COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = decimal)?  (COMMA?  REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = decimal)?  (COMMA?  MAX_DOP  EQUAL  max_dop = decimal)?  (COMMA?  GROUP_MAX_REQUESTS  EQUAL  group_max_requests = decimal)?
";
        
        private static string _ruleName = "workload_option_item";
        
        internal AstWorkloadOptionItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWorkloadOptionItem(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstWorkloadOptionItem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstWorkloadOptionItem(ParserRuleContext ctx, AstImportanceLevel importanceLevel, AstDecimal requestMaxMemoryGrant, AstDecimal requestMaxCpuTimeSec, AstDecimal requestMemoryGrantTimeoutSec, AstDecimal maxDop, AstDecimal groupMaxRequests) : 
                base(ctx)
        {
            _importanceLevel = importanceLevel;
            _requestMaxMemoryGrant = requestMaxMemoryGrant;
            _requestMaxCpuTimeSec = requestMaxCpuTimeSec;
            _requestMemoryGrantTimeoutSec = requestMemoryGrantTimeoutSec;
            _maxDop = maxDop;
            _groupMaxRequests = groupMaxRequests;
        }
        
        public virtual AstImportanceLevel ImportanceLevel
        {
            get
            {
                return _importanceLevel;
            }
        }
        
        public virtual AstDecimal RequestMaxMemoryGrant
        {
            get
            {
                return _requestMaxMemoryGrant;
            }
        }
        
        public virtual AstDecimal RequestMaxCpuTimeSec
        {
            get
            {
                return _requestMaxCpuTimeSec;
            }
        }
        
        public virtual AstDecimal RequestMemoryGrantTimeoutSec
        {
            get
            {
                return _requestMemoryGrantTimeoutSec;
            }
        }
        
        public virtual AstDecimal MaxDop
        {
            get
            {
                return _maxDop;
            }
        }
        
        public virtual AstDecimal GroupMaxRequests
        {
            get
            {
                return _groupMaxRequests;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadOptionItem(this);
        }
        
        public static AstWorkloadOptionItem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstWorkloadOptionItem(ctx, list.Get<AstImportanceLevel>(0), list.Get<AstDecimal>(1), list.Get<AstDecimal>(2), list.Get<AstDecimal>(3), list.Get<AstDecimal>(4), list.Get<AstDecimal>(5));
        }
        
        /// <summary>
        /// workload_option_item : 
        ///    IMPORTANCE EQUAL importance_level COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal COMMA? REQUEST_MAX_CPU_TIME_SEC EQUAL request_max_cpu_time_sec=decimal COMMA? REQUEST_MEMORY_GRANT_TIMEOUT_SEC EQUAL request_memory_grant_timeout_sec=decimal COMMA? MAX_DOP EQUAL max_dop=decimal COMMA? GROUP_MAX_REQUESTS EQUAL group_max_requests=decimal 
        /// </summary>
        public static AstWorkloadOptionItem WorkloadOptionItem(ParserRuleContext ctx, AstImportanceLevel importanceLevel, AstDecimal requestMaxMemoryGrant, AstDecimal requestMaxCpuTimeSec, AstDecimal requestMemoryGrantTimeoutSec, AstDecimal maxDop, AstDecimal groupMaxRequests)
        {
            AstWorkloadOptionItem result = new AstWorkloadOptionItem(ctx, importanceLevel, requestMaxMemoryGrant, requestMaxCpuTimeSec, requestMemoryGrantTimeoutSec, maxDop, groupMaxRequests);
            return result;
        }
    }
    
    /// <summary>
    /// workload_group_id_or_default
    /// 	 : workload_group_pool_id
    /// 	 | DEFAULT_DOUBLE_QUOTE
    /// </summary>
    public abstract partial class AstWorkloadGroupIdOrDefault : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWorkloadGroupPoolId), false, false, "workload_group_pool_id"))));
        
        private static string _ruleValue = "workload_group_pool_id\r\n | DEFAULT_DOUBLE_QUOTE\r\n";
        
        private static string _ruleName = "workload_group_id_or_default";
        
        /// <summary>
        /// workload_group_id_or_default : workload_group_pool_id 
        /// </summary>
        public partial class AstWorkloadGroupIdOrDefault1 : AstWorkloadGroupIdOrDefault
        {
            
            private static string _ruleName1 = "workload_group_id_or_default";
            
            private AstWorkloadGroupPoolId _workloadGroupPoolId;
            
            internal AstWorkloadGroupIdOrDefault1(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId) : 
                    base(ctx)
            {
                _workloadGroupPoolId = workloadGroupPoolId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWorkloadGroupPoolId WorkloadGroupPoolId
            {
                get
                {
                    return _workloadGroupPoolId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupIdOrDefault(this);
            }
        }
        /// <summary>
        /// workload_group_id_or_default : DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstWorkloadGroupIdOrDefault2 : AstWorkloadGroupIdOrDefault
        {
            
            private static string _ruleName1 = "workload_group_id_or_default";
            
            internal AstWorkloadGroupIdOrDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupIdOrDefault(this);
            }
        }
        

        
        internal AstWorkloadGroupIdOrDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWorkloadGroupIdOrDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstWorkloadGroupIdOrDefault(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWorkloadGroupIdOrDefault Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault1(ctx, list.Get<AstWorkloadGroupPoolId>(0));
            }
            if ((index == 2))
            {
                return new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// workload_group_id_or_default : 
        ///    workload_group_pool_id 
        /// </summary>
        public static AstWorkloadGroupIdOrDefault WorkloadGroupIdOrDefault(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault1 result = new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault1(ctx, workloadGroupPoolId);
            return result;
        }
        
        /// <summary>
        /// workload_group_id_or_default : 
        ///    DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstWorkloadGroupIdOrDefault WorkloadGroupIdOrDefault(ParserRuleContext ctx)
        {
            AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault2 result = new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// queue_settings
    /// 	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstQueueSettings : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFuncProcNameDatabaseSchemaRef), false, false, "func_proc_name_database_schema_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFuncProcNameDatabaseSchemaRef), false, false, "func_proc_name_database_schema_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFuncProcNameDatabaseSchemaRef), false, false, "func_proc_name_database_schema_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = @"WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
";
        
        private static string _ruleName = "queue_settings";
        
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS SELF COMMA? RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings1 : AstQueueSettings
        {
            
            private static string _ruleName1 = "queue_settings";
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _activationStatus;
            
            private AstFuncProcNameDatabaseSchemaRef _funcProcNameDatabaseSchemaRef;
            
            private AstDecimal _maxReaders;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings1(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _activationStatus = activationStatus;
                _funcProcNameDatabaseSchemaRef = funcProcNameDatabaseSchemaRef;
                _maxReaders = maxReaders;
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff ActivationStatus
            {
                get
                {
                    return _activationStatus;
                }
            }
            
            public virtual AstFuncProcNameDatabaseSchemaRef FuncProcNameDatabaseSchemaRef
            {
                get
                {
                    return _funcProcNameDatabaseSchemaRef;
                }
            }
            
            public virtual AstDecimal MaxReaders
            {
                get
                {
                    return _maxReaders;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS username=stringtext COMMA? RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings2 : AstQueueSettings
        {
            
            private static string _ruleName1 = "queue_settings";
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _activationStatus;
            
            private AstFuncProcNameDatabaseSchemaRef _funcProcNameDatabaseSchemaRef;
            
            private AstDecimal _maxReaders;
            
            private AstStringtext _username;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings2(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstStringtext username, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _activationStatus = activationStatus;
                _funcProcNameDatabaseSchemaRef = funcProcNameDatabaseSchemaRef;
                _maxReaders = maxReaders;
                _username = username;
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff ActivationStatus
            {
                get
                {
                    return _activationStatus;
                }
            }
            
            public virtual AstFuncProcNameDatabaseSchemaRef FuncProcNameDatabaseSchemaRef
            {
                get
                {
                    return _funcProcNameDatabaseSchemaRef;
                }
            }
            
            public virtual AstDecimal MaxReaders
            {
                get
                {
                    return _maxReaders;
                }
            }
            
            public virtual AstStringtext Username
            {
                get
                {
                    return _username;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS OWNER COMMA? RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings3 : AstQueueSettings
        {
            
            private static string _ruleName1 = "queue_settings";
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _activationStatus;
            
            private AstFuncProcNameDatabaseSchemaRef _funcProcNameDatabaseSchemaRef;
            
            private AstDecimal _maxReaders;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings3(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _activationStatus = activationStatus;
                _funcProcNameDatabaseSchemaRef = funcProcNameDatabaseSchemaRef;
                _maxReaders = maxReaders;
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff ActivationStatus
            {
                get
                {
                    return _activationStatus;
                }
            }
            
            public virtual AstFuncProcNameDatabaseSchemaRef FuncProcNameDatabaseSchemaRef
            {
                get
                {
                    return _funcProcNameDatabaseSchemaRef;
                }
            }
            
            public virtual AstDecimal MaxReaders
            {
                get
                {
                    return _maxReaders;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET DROP RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings4 : AstQueueSettings
        {
            
            private static string _ruleName1 = "queue_settings";
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings4(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        

        
        internal AstQueueSettings(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueueSettings(Position p) : 
                base(p)
        {
        }
        
        internal AstQueueSettings(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstQueueSettings Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstQueueSettings.AstQueueSettings1(ctx, list.Get<AstOnOff>(0), list.Get<AstOnOff>(1), list.Get<AstOnOff>(2), list.Get<AstFuncProcNameDatabaseSchemaRef>(3), list.Get<AstDecimal>(4), list.Get<AstOnOff>(5));
            }
            if ((index == 2))
            {
                return new AstQueueSettings.AstQueueSettings2(ctx, list.Get<AstOnOff>(0), list.Get<AstOnOff>(1), list.Get<AstOnOff>(2), list.Get<AstFuncProcNameDatabaseSchemaRef>(3), list.Get<AstDecimal>(4), list.Get<AstStringtext>(5), list.Get<AstOnOff>(6));
            }
            if ((index == 3))
            {
                return new AstQueueSettings.AstQueueSettings3(ctx, list.Get<AstOnOff>(0), list.Get<AstOnOff>(1), list.Get<AstOnOff>(2), list.Get<AstFuncProcNameDatabaseSchemaRef>(3), list.Get<AstDecimal>(4), list.Get<AstOnOff>(5));
            }
            if ((index == 4))
            {
                return new AstQueueSettings.AstQueueSettings4(ctx, list.Get<AstOnOff>(0), list.Get<AstOnOff>(1), list.Get<AstOnOff>(2));
            }
            return null;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS SELF COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff)
        {
            AstQueueSettings.AstQueueSettings1 result = new AstQueueSettings.AstQueueSettings1(ctx, status, retention, activationStatus, funcProcNameDatabaseSchemaRef, maxReaders, onOff);
            return result;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS username=stringtext COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstStringtext username, AstOnOff onOff)
        {
            AstQueueSettings.AstQueueSettings2 result = new AstQueueSettings.AstQueueSettings2(ctx, status, retention, activationStatus, funcProcNameDatabaseSchemaRef, maxReaders, username, onOff);
            return result;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( DROP ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff onOff)
        {
            AstQueueSettings.AstQueueSettings4 result = new AstQueueSettings.AstQueueSettings4(ctx, status, retention, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// table_or_queue
    /// 	 : complete_table_ref
    /// 	 | queue_id
    /// </summary>
    public abstract partial class AstTableOrQueue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCompleteTableRef), false, false, "complete_table_ref")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueueId), false, false, "queue_id"))));
        
        private static string _ruleValue = "complete_table_ref\r\n | queue_id\r\n";
        
        private static string _ruleName = "table_or_queue";
        
        /// <summary>
        /// table_or_queue : complete_table_ref 
        /// </summary>
        public partial class AstTableOrQueue1 : AstTableOrQueue
        {
            
            private static string _ruleName1 = "table_or_queue";
            
            private AstCompleteTableRef _completeTableRef;
            
            internal AstTableOrQueue1(ParserRuleContext ctx, AstCompleteTableRef completeTableRef) : 
                    base(ctx)
            {
                _completeTableRef = completeTableRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCompleteTableRef CompleteTableRef
            {
                get
                {
                    return _completeTableRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOrQueue(this);
            }
        }
        /// <summary>
        /// table_or_queue : queue_id 
        /// </summary>
        public partial class AstTableOrQueue2 : AstTableOrQueue
        {
            
            private static string _ruleName1 = "table_or_queue";
            
            private AstQueueId _queueId;
            
            internal AstTableOrQueue2(ParserRuleContext ctx, AstQueueId queueId) : 
                    base(ctx)
            {
                _queueId = queueId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueueId QueueId
            {
                get
                {
                    return _queueId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOrQueue(this);
            }
        }
        

        
        internal AstTableOrQueue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableOrQueue(Position p) : 
                base(p)
        {
        }
        
        internal AstTableOrQueue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableOrQueue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableOrQueue.AstTableOrQueue1(ctx, list.Get<AstCompleteTableRef>(0));
            }
            if ((index == 2))
            {
                return new AstTableOrQueue.AstTableOrQueue2(ctx, list.Get<AstQueueId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// table_or_queue : 
        ///    complete_table_ref 
        /// </summary>
        public static AstTableOrQueue TableOrQueue(ParserRuleContext ctx, AstCompleteTableRef completeTableRef)
        {
            AstTableOrQueue.AstTableOrQueue1 result = new AstTableOrQueue.AstTableOrQueue1(ctx, completeTableRef);
            return result;
        }
        
        /// <summary>
        /// table_or_queue : 
        ///    queue_id 
        /// </summary>
        public static AstTableOrQueue TableOrQueue(ParserRuleContext ctx, AstQueueId queueId)
        {
            AstTableOrQueue.AstTableOrQueue2 result = new AstTableOrQueue.AstTableOrQueue2(ctx, queueId);
            return result;
        }
    }
    
    /// <summary>
    /// queue_action
    /// 	 : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?
    /// 	 | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?
    /// 	 | MOVE  TO  id1 = id_default  id2 = id_default
    /// </summary>
    public abstract partial class AstQueueAction : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstIdDefault), false, false, "id_default"), new Bb.Asts.AstRuleMatcherItem(typeof(AstIdDefault), false, false, "id_default")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueueRebuildOptions), false, false, "queue_rebuild_options")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?\r\n | REORGANIZE  (" +
            "WITH  LOB_COMPACTION  EQUAL  on_off)?\r\n | MOVE  TO  id1 = id_default  id2 = id_d" +
            "efault\r\n";
        
        private static string _ruleName = "queue_action";
        
        /// <summary>
        /// queue_action : REBUILD WITH LR_BRACKET queue_rebuild_options RR_BRACKET 
        /// </summary>
        public partial class AstQueueAction1 : AstQueueAction
        {
            
            private static string _ruleName1 = "queue_action";
            
            private AstQueueRebuildOptions _queueRebuildOptions;
            
            internal AstQueueAction1(ParserRuleContext ctx, AstQueueRebuildOptions queueRebuildOptions) : 
                    base(ctx)
            {
                _queueRebuildOptions = queueRebuildOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueueRebuildOptions QueueRebuildOptions
            {
                get
                {
                    return _queueRebuildOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        /// <summary>
        /// queue_action : REORGANIZE WITH LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public partial class AstQueueAction2 : AstQueueAction
        {
            
            private static string _ruleName1 = "queue_action";
            
            private AstOnOff _onOff;
            
            internal AstQueueAction2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        /// <summary>
        /// queue_action : MOVE TO id1=id_default id2=id_default 
        /// </summary>
        public partial class AstQueueAction3 : AstQueueAction
        {
            
            private static string _ruleName1 = "queue_action";
            
            private AstIdDefault _id1;
            
            private AstIdDefault _id2;
            
            internal AstQueueAction3(ParserRuleContext ctx, AstIdDefault id1, AstIdDefault id2) : 
                    base(ctx)
            {
                _id1 = id1;
                _id2 = id2;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIdDefault Id1
            {
                get
                {
                    return _id1;
                }
            }
            
            public virtual AstIdDefault Id2
            {
                get
                {
                    return _id2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        

        
        internal AstQueueAction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueueAction(Position p) : 
                base(p)
        {
        }
        
        internal AstQueueAction(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstQueueAction Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstQueueAction.AstQueueAction1(ctx, list.Get<AstQueueRebuildOptions>(0));
            }
            if ((index == 2))
            {
                return new AstQueueAction.AstQueueAction2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstQueueAction.AstQueueAction3(ctx, list.Get<AstIdDefault>(0), list.Get<AstIdDefault>(1));
            }
            return null;
        }
        
        /// <summary>
        /// queue_action : 
        ///    REBUILD WITH ( queue_rebuild_options ) 
        /// </summary>
        public static AstQueueAction QueueAction(ParserRuleContext ctx, AstQueueRebuildOptions queueRebuildOptions)
        {
            AstQueueAction.AstQueueAction1 result = new AstQueueAction.AstQueueAction1(ctx, queueRebuildOptions);
            return result;
        }
        
        /// <summary>
        /// queue_action : 
        ///    REORGANIZE WITH LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstQueueAction QueueAction(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstQueueAction.AstQueueAction2 result = new AstQueueAction.AstQueueAction2(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// queue_action : 
        ///    MOVE TO id1=id_default id2=id_default 
        /// </summary>
        public static AstQueueAction QueueAction(ParserRuleContext ctx, AstIdDefault id1, AstIdDefault id2)
        {
            AstQueueAction.AstQueueAction3 result = new AstQueueAction.AstQueueAction3(ctx, id1, id2);
            return result;
        }
    }
    
    /// <summary>
    /// id_default
    /// 	 : id_
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstIdDefault : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "id_\r\n | DEFAULT\r\n";
        
        private static string _ruleName = "id_default";
        
        /// <summary>
        /// id_default : id_ 
        /// </summary>
        public partial class AstIdDefault1 : AstIdDefault
        {
            
            private static string _ruleName1 = "id_default";
            
            private AstId _id;
            
            internal AstIdDefault1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdDefault(this);
            }
        }
        /// <summary>
        /// id_default : DEFAULT 
        /// </summary>
        public partial class AstIdDefault2 : AstIdDefault
        {
            
            private static string _ruleName1 = "id_default";
            
            internal AstIdDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdDefault(this);
            }
        }
        

        
        internal AstIdDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIdDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstIdDefault(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIdDefault Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIdDefault.AstIdDefault1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstIdDefault.AstIdDefault2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// id_default : 
        ///    id_ 
        /// </summary>
        public static AstIdDefault IdDefault(ParserRuleContext ctx, AstId id)
        {
            AstIdDefault.AstIdDefault1 result = new AstIdDefault.AstIdDefault1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// id_default : 
        ///    DEFAULT 
        /// </summary>
        public static AstIdDefault IdDefault(ParserRuleContext ctx)
        {
            AstIdDefault.AstIdDefault2 result = new AstIdDefault.AstIdDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// contract_item_target
    /// 	 : message_type_id
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstContractItemTarget : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstMessageTypeId), false, false, "message_type_id"))));
        
        private static string _ruleValue = "message_type_id\r\n | DEFAULT\r\n";
        
        private static string _ruleName = "contract_item_target";
        
        /// <summary>
        /// contract_item_target : message_type_id 
        /// </summary>
        public partial class AstContractItemTarget1 : AstContractItemTarget
        {
            
            private static string _ruleName1 = "contract_item_target";
            
            private AstMessageTypeId _messageTypeId;
            
            internal AstContractItemTarget1(ParserRuleContext ctx, AstMessageTypeId messageTypeId) : 
                    base(ctx)
            {
                _messageTypeId = messageTypeId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMessageTypeId MessageTypeId
            {
                get
                {
                    return _messageTypeId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractItemTarget(this);
            }
        }
        /// <summary>
        /// contract_item_target : DEFAULT 
        /// </summary>
        public partial class AstContractItemTarget2 : AstContractItemTarget
        {
            
            private static string _ruleName1 = "contract_item_target";
            
            internal AstContractItemTarget2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractItemTarget(this);
            }
        }
        

        
        internal AstContractItemTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstContractItemTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstContractItemTarget(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstContractItemTarget Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstContractItemTarget.AstContractItemTarget1(ctx, list.Get<AstMessageTypeId>(0));
            }
            if ((index == 2))
            {
                return new AstContractItemTarget.AstContractItemTarget2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// contract_item_target : 
        ///    message_type_id 
        /// </summary>
        public static AstContractItemTarget ContractItemTarget(ParserRuleContext ctx, AstMessageTypeId messageTypeId)
        {
            AstContractItemTarget.AstContractItemTarget1 result = new AstContractItemTarget.AstContractItemTarget1(ctx, messageTypeId);
            return result;
        }
        
        /// <summary>
        /// contract_item_target : 
        ///    DEFAULT 
        /// </summary>
        public static AstContractItemTarget ContractItemTarget(ParserRuleContext ctx)
        {
            AstContractItemTarget.AstContractItemTarget2 result = new AstContractItemTarget.AstContractItemTarget2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// when_matche
    /// 	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
    /// 	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
    /// 	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
    /// </summary>
    public abstract partial class AstWhenMatche : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"), new Bb.Asts.AstRuleMatcherItem(typeof(AstMergeMatched), false, false, "merge_matched")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"), new Bb.Asts.AstRuleMatcherItem(typeof(AstMergeNotMatched), false, false, "merge_not_matched")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"), new Bb.Asts.AstRuleMatcherItem(typeof(AstMergeMatched), false, false, "merge_matched"))));
        
        private static string _ruleValue = "(WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+\r\n | (WHEN  NOT  M" +
            "ATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)\r\n | (W" +
            "HEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+\r\n" +
            "";
        
        private static string _ruleName = "when_matche";
        
        /// <summary>
        /// when_matche : WHEN MATCHED AND search_condition THEN merge_matched 
        /// </summary>
        public partial class AstWhenMatche1 : AstWhenMatche
        {
            
            private static string _ruleName1 = "when_matche";
            
            private AstSearchCondition _searchCondition;
            
            private AstMergeMatched _mergeMatched;
            
            internal AstWhenMatche1(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeMatched mergeMatched) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
                _mergeMatched = mergeMatched;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public virtual AstMergeMatched MergeMatched
            {
                get
                {
                    return _mergeMatched;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        /// <summary>
        /// when_matche : WHEN NOT MATCHED BY TARGET AND search_condition THEN merge_not_matched 
        /// </summary>
        public partial class AstWhenMatche2 : AstWhenMatche
        {
            
            private static string _ruleName1 = "when_matche";
            
            private AstSearchCondition _searchCondition;
            
            private AstMergeNotMatched _mergeNotMatched;
            
            internal AstWhenMatche2(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeNotMatched mergeNotMatched) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
                _mergeNotMatched = mergeNotMatched;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public virtual AstMergeNotMatched MergeNotMatched
            {
                get
                {
                    return _mergeNotMatched;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        /// <summary>
        /// when_matche : WHEN NOT MATCHED BY SOURCE AND search_condition THEN merge_matched 
        /// </summary>
        public partial class AstWhenMatche3 : AstWhenMatche
        {
            
            private static string _ruleName1 = "when_matche";
            
            private AstSearchCondition _searchCondition;
            
            private AstMergeMatched _mergeMatched;
            
            internal AstWhenMatche3(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeMatched mergeMatched) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
                _mergeMatched = mergeMatched;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public virtual AstMergeMatched MergeMatched
            {
                get
                {
                    return _mergeMatched;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        

        
        internal AstWhenMatche(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWhenMatche(Position p) : 
                base(p)
        {
        }
        
        internal AstWhenMatche(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWhenMatche Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWhenMatche.AstWhenMatche1(ctx, list.Get<AstSearchCondition>(0), list.Get<AstMergeMatched>(1));
            }
            if ((index == 2))
            {
                return new AstWhenMatche.AstWhenMatche2(ctx, list.Get<AstSearchCondition>(0), list.Get<AstMergeNotMatched>(1));
            }
            if ((index == 3))
            {
                return new AstWhenMatche.AstWhenMatche3(ctx, list.Get<AstSearchCondition>(0), list.Get<AstMergeMatched>(1));
            }
            return null;
        }
        
        /// <summary>
        /// when_matche : 
        ///    WHEN MATCHED AND search_condition THEN merge_matched 
        /// </summary>
        public static AstWhenMatche WhenMatche(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeMatched mergeMatched)
        {
            AstWhenMatche.AstWhenMatche1 result = new AstWhenMatche.AstWhenMatche1(ctx, searchCondition, mergeMatched);
            return result;
        }
        
        /// <summary>
        /// when_matche : 
        ///    WHEN NOT MATCHED BY TARGET AND search_condition THEN merge_not_matched 
        /// </summary>
        public static AstWhenMatche WhenMatche(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeNotMatched mergeNotMatched)
        {
            AstWhenMatche.AstWhenMatche2 result = new AstWhenMatche.AstWhenMatche2(ctx, searchCondition, mergeNotMatched);
            return result;
        }
    }
    
    /// <summary>
    /// merge_matched
    /// 	 : UPDATE  SET  update_elem_merges
    /// 	 | DELETE
    /// </summary>
    public abstract partial class AstMergeMatched : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateElemMerges), false, false, "update_elem_merges"))));
        
        private static string _ruleValue = "UPDATE  SET  update_elem_merges\r\n | DELETE\r\n";
        
        private static string _ruleName = "merge_matched";
        
        /// <summary>
        /// merge_matched : UPDATE SET update_elem_merges 
        /// </summary>
        public partial class AstMergeMatched1 : AstMergeMatched
        {
            
            private static string _ruleName1 = "merge_matched";
            
            private AstUpdateElemMerges _updateElemMerges;
            
            internal AstMergeMatched1(ParserRuleContext ctx, AstUpdateElemMerges updateElemMerges) : 
                    base(ctx)
            {
                _updateElemMerges = updateElemMerges;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUpdateElemMerges UpdateElemMerges
            {
                get
                {
                    return _updateElemMerges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeMatched(this);
            }
        }
        /// <summary>
        /// merge_matched : DELETE 
        /// </summary>
        public partial class AstMergeMatched2 : AstMergeMatched
        {
            
            private static string _ruleName1 = "merge_matched";
            
            internal AstMergeMatched2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeMatched(this);
            }
        }
        

        
        internal AstMergeMatched(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMergeMatched(Position p) : 
                base(p)
        {
        }
        
        internal AstMergeMatched(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstMergeMatched Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstMergeMatched.AstMergeMatched1(ctx, list.Get<AstUpdateElemMerges>(0));
            }
            if ((index == 2))
            {
                return new AstMergeMatched.AstMergeMatched2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// merge_matched : 
        ///    UPDATE SET update_elem_merges 
        /// </summary>
        public static AstMergeMatched MergeMatched(ParserRuleContext ctx, AstUpdateElemMerges updateElemMerges)
        {
            AstMergeMatched.AstMergeMatched1 result = new AstMergeMatched.AstMergeMatched1(ctx, updateElemMerges);
            return result;
        }
        
        /// <summary>
        /// merge_matched : 
        ///    DELETE 
        /// </summary>
        public static AstMergeMatched MergeMatched(ParserRuleContext ctx)
        {
            AstMergeMatched.AstMergeMatched2 result = new AstMergeMatched.AstMergeMatched2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// merge_not_matched
    /// 	 : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | DEFAULT  VALUES)
    /// </summary>
    public abstract partial class AstMergeNotMatched : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTableValueConstructor), false, false, "table_value_constructor")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list"))));
        
        private static string _ruleValue = "INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | D" +
            "EFAULT  VALUES)\r\n";
        
        private static string _ruleName = "merge_not_matched";
        
        /// <summary>
        /// merge_not_matched : INSERT LR_BRACKET column_name_list RR_BRACKET table_value_constructor 
        /// </summary>
        public partial class AstMergeNotMatched1 : AstMergeNotMatched
        {
            
            private static string _ruleName1 = "merge_not_matched";
            
            private AstColumnNameList _columnNameList;
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstMergeNotMatched1(ParserRuleContext ctx, AstColumnNameList columnNameList, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _columnNameList = columnNameList;
                _tableValueConstructor = tableValueConstructor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeNotMatched(this);
            }
        }
        /// <summary>
        /// merge_not_matched : INSERT LR_BRACKET column_name_list RR_BRACKET DEFAULT VALUES 
        /// </summary>
        public partial class AstMergeNotMatched2 : AstMergeNotMatched
        {
            
            private static string _ruleName1 = "merge_not_matched";
            
            private AstColumnNameList _columnNameList;
            
            internal AstMergeNotMatched2(ParserRuleContext ctx, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _columnNameList = columnNameList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeNotMatched(this);
            }
        }
        

        
        internal AstMergeNotMatched(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMergeNotMatched(Position p) : 
                base(p)
        {
        }
        
        internal AstMergeNotMatched(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstMergeNotMatched Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstMergeNotMatched.AstMergeNotMatched1(ctx, list.Get<AstColumnNameList>(0), list.Get<AstTableValueConstructor>(1));
            }
            if ((index == 2))
            {
                return new AstMergeNotMatched.AstMergeNotMatched2(ctx, list.Get<AstColumnNameList>(0));
            }
            return null;
        }
        
        /// <summary>
        /// merge_not_matched : 
        ///    INSERT ( column_name_list ) table_value_constructor 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(ParserRuleContext ctx, AstColumnNameList columnNameList, AstTableValueConstructor tableValueConstructor)
        {
            AstMergeNotMatched.AstMergeNotMatched1 result = new AstMergeNotMatched.AstMergeNotMatched1(ctx, columnNameList, tableValueConstructor);
            return result;
        }
        
        /// <summary>
        /// merge_not_matched : 
        ///    INSERT ( column_name_list ) DEFAULT VALUES 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(ParserRuleContext ctx, AstColumnNameList columnNameList)
        {
            AstMergeNotMatched.AstMergeNotMatched2 result = new AstMergeNotMatched.AstMergeNotMatched2(ctx, columnNameList);
            return result;
        }
    }
    
    /// <summary>
    /// delete_statement_from
    /// 	 : ddl_object
    /// 	 | rowset_function_limited
    /// 	 | table_var = local_id
    /// </summary>
    public abstract partial class AstDeleteStatementFrom : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDdlObject), false, false, "ddl_object")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstRowsetFunctionLimited), false, false, "rowset_function_limited")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"))));
        
        private static string _ruleValue = "ddl_object\r\n | rowset_function_limited\r\n | table_var = local_id\r\n";
        
        private static string _ruleName = "delete_statement_from";
        
        /// <summary>
        /// delete_statement_from : ddl_object 
        /// </summary>
        public partial class AstDeleteStatementFrom1 : AstDeleteStatementFrom
        {
            
            private static string _ruleName1 = "delete_statement_from";
            
            private AstDdlObject _ddlObject;
            
            internal AstDeleteStatementFrom1(ParserRuleContext ctx, AstDdlObject ddlObject) : 
                    base(ctx)
            {
                _ddlObject = ddlObject;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDdlObject DdlObject
            {
                get
                {
                    return _ddlObject;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        /// <summary>
        /// delete_statement_from : rowset_function_limited 
        /// </summary>
        public partial class AstDeleteStatementFrom2 : AstDeleteStatementFrom
        {
            
            private static string _ruleName1 = "delete_statement_from";
            
            private AstRowsetFunctionLimited _rowsetFunctionLimited;
            
            internal AstDeleteStatementFrom2(ParserRuleContext ctx, AstRowsetFunctionLimited rowsetFunctionLimited) : 
                    base(ctx)
            {
                _rowsetFunctionLimited = rowsetFunctionLimited;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRowsetFunctionLimited RowsetFunctionLimited
            {
                get
                {
                    return _rowsetFunctionLimited;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        /// <summary>
        /// delete_statement_from : table_var=local_id 
        /// </summary>
        public partial class AstDeleteStatementFrom3 : AstDeleteStatementFrom
        {
            
            private static string _ruleName1 = "delete_statement_from";
            
            private AstLocalId _tableVar;
            
            internal AstDeleteStatementFrom3(ParserRuleContext ctx, AstLocalId tableVar) : 
                    base(ctx)
            {
                _tableVar = tableVar;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId TableVar
            {
                get
                {
                    return _tableVar;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        

        
        internal AstDeleteStatementFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeleteStatementFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstDeleteStatementFrom(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDeleteStatementFrom Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDeleteStatementFrom.AstDeleteStatementFrom1(ctx, list.Get<AstDdlObject>(0));
            }
            if ((index == 2))
            {
                return new AstDeleteStatementFrom.AstDeleteStatementFrom2(ctx, list.Get<AstRowsetFunctionLimited>(0));
            }
            if ((index == 3))
            {
                return new AstDeleteStatementFrom.AstDeleteStatementFrom3(ctx, list.Get<AstLocalId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    ddl_object 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(ParserRuleContext ctx, AstDdlObject ddlObject)
        {
            AstDeleteStatementFrom.AstDeleteStatementFrom1 result = new AstDeleteStatementFrom.AstDeleteStatementFrom1(ctx, ddlObject);
            return result;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    rowset_function_limited 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(ParserRuleContext ctx, AstRowsetFunctionLimited rowsetFunctionLimited)
        {
            AstDeleteStatementFrom.AstDeleteStatementFrom2 result = new AstDeleteStatementFrom.AstDeleteStatementFrom2(ctx, rowsetFunctionLimited);
            return result;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    table_var=local_id 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(ParserRuleContext ctx, AstLocalId tableVar)
        {
            AstDeleteStatementFrom.AstDeleteStatementFrom3 result = new AstDeleteStatementFrom.AstDeleteStatementFrom3(ctx, tableVar);
            return result;
        }
    }
    
    /// <summary>
    /// insert_statement_value
    /// 	 : table_value_constructor
    /// 	 | derived_table
    /// 	 | execute_statement
    /// 	 | DEFAULT  VALUES
    /// </summary>
    public abstract partial class AstInsertStatementValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableValueConstructor), false, false, "table_value_constructor")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDerivedTable), false, false, "derived_table")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteStatement), false, false, "execute_statement"))));
        
        private static string _ruleValue = "table_value_constructor\r\n | derived_table\r\n | execute_statement\r\n | DEFAULT  VALU" +
            "ES\r\n";
        
        private static string _ruleName = "insert_statement_value";
        
        /// <summary>
        /// insert_statement_value : table_value_constructor 
        /// </summary>
        public partial class AstInsertStatementValue1 : AstInsertStatementValue
        {
            
            private static string _ruleName1 = "insert_statement_value";
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstInsertStatementValue1(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _tableValueConstructor = tableValueConstructor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : derived_table 
        /// </summary>
        public partial class AstInsertStatementValue2 : AstInsertStatementValue
        {
            
            private static string _ruleName1 = "insert_statement_value";
            
            private AstDerivedTable _derivedTable;
            
            internal AstInsertStatementValue2(ParserRuleContext ctx, AstDerivedTable derivedTable) : 
                    base(ctx)
            {
                _derivedTable = derivedTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDerivedTable DerivedTable
            {
                get
                {
                    return _derivedTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : execute_statement 
        /// </summary>
        public partial class AstInsertStatementValue3 : AstInsertStatementValue
        {
            
            private static string _ruleName1 = "insert_statement_value";
            
            private AstExecuteStatement _executeStatement;
            
            internal AstInsertStatementValue3(ParserRuleContext ctx, AstExecuteStatement executeStatement) : 
                    base(ctx)
            {
                _executeStatement = executeStatement;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteStatement ExecuteStatement
            {
                get
                {
                    return _executeStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : DEFAULT VALUES 
        /// </summary>
        public partial class AstInsertStatementValue4 : AstInsertStatementValue
        {
            
            private static string _ruleName1 = "insert_statement_value";
            
            internal AstInsertStatementValue4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        

        
        internal AstInsertStatementValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstInsertStatementValue(Position p) : 
                base(p)
        {
        }
        
        internal AstInsertStatementValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstInsertStatementValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstInsertStatementValue.AstInsertStatementValue1(ctx, list.Get<AstTableValueConstructor>(0));
            }
            if ((index == 2))
            {
                return new AstInsertStatementValue.AstInsertStatementValue2(ctx, list.Get<AstDerivedTable>(0));
            }
            if ((index == 3))
            {
                return new AstInsertStatementValue.AstInsertStatementValue3(ctx, list.Get<AstExecuteStatement>(0));
            }
            if ((index == 4))
            {
                return new AstInsertStatementValue.AstInsertStatementValue4(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    table_value_constructor 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor)
        {
            AstInsertStatementValue.AstInsertStatementValue1 result = new AstInsertStatementValue.AstInsertStatementValue1(ctx, tableValueConstructor);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    derived_table 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx, AstDerivedTable derivedTable)
        {
            AstInsertStatementValue.AstInsertStatementValue2 result = new AstInsertStatementValue.AstInsertStatementValue2(ctx, derivedTable);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    execute_statement 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx, AstExecuteStatement executeStatement)
        {
            AstInsertStatementValue.AstInsertStatementValue3 result = new AstInsertStatementValue.AstInsertStatementValue3(ctx, executeStatement);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    DEFAULT VALUES 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx)
        {
            AstInsertStatementValue.AstInsertStatementValue4 result = new AstInsertStatementValue.AstInsertStatementValue4(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// receive_mode
    /// 	 : receive_mode_enum
    /// 	 | top_clause
    /// </summary>
    public abstract partial class AstReceiveMode : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstReceiveModeEnum), false, false, "receive_mode_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstTopClause), false, false, "top_clause"))));
        
        private static string _ruleValue = "receive_mode_enum\r\n | top_clause\r\n";
        
        private static string _ruleName = "receive_mode";
        
        /// <summary>
        /// receive_mode : receive_mode_enum 
        /// </summary>
        public partial class AstReceiveMode1 : AstReceiveMode
        {
            
            private static string _ruleName1 = "receive_mode";
            
            private AstReceiveModeEnum _receiveModeEnum;
            
            internal AstReceiveMode1(ParserRuleContext ctx, AstReceiveModeEnum receiveModeEnum) : 
                    base(ctx)
            {
                _receiveModeEnum = receiveModeEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReceiveModeEnum ReceiveModeEnum
            {
                get
                {
                    return _receiveModeEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReceiveMode(this);
            }
        }
        /// <summary>
        /// receive_mode : top_clause 
        /// </summary>
        public partial class AstReceiveMode2 : AstReceiveMode
        {
            
            private static string _ruleName1 = "receive_mode";
            
            private AstTopClause _topClause;
            
            internal AstReceiveMode2(ParserRuleContext ctx, AstTopClause topClause) : 
                    base(ctx)
            {
                _topClause = topClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTopClause TopClause
            {
                get
                {
                    return _topClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReceiveMode(this);
            }
        }
        

        
        internal AstReceiveMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReceiveMode(Position p) : 
                base(p)
        {
        }
        
        internal AstReceiveMode(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstReceiveMode Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstReceiveMode.AstReceiveMode1(ctx, list.Get<AstReceiveModeEnum>(0));
            }
            if ((index == 2))
            {
                return new AstReceiveMode.AstReceiveMode2(ctx, list.Get<AstTopClause>(0));
            }
            return null;
        }
        
        /// <summary>
        /// receive_mode : 
        ///    receive_mode_enum 
        /// </summary>
        public static AstReceiveMode ReceiveMode(ParserRuleContext ctx, AstReceiveModeEnum receiveModeEnum)
        {
            AstReceiveMode.AstReceiveMode1 result = new AstReceiveMode.AstReceiveMode1(ctx, receiveModeEnum);
            return result;
        }
        
        /// <summary>
        /// receive_mode : 
        ///    top_clause 
        /// </summary>
        public static AstReceiveMode ReceiveMode(ParserRuleContext ctx, AstTopClause topClause)
        {
            AstReceiveMode.AstReceiveMode2 result = new AstReceiveMode.AstReceiveMode2(ctx, topClause);
            return result;
        }
    }
    
    /// <summary>
    /// timespan
    /// 	 : (local_id | constant)
    /// </summary>
    public abstract partial class AstTimespan : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstant), false, false, "constant"))));
        
        private static string _ruleValue = "(local_id | constant)\r\n";
        
        private static string _ruleName = "timespan";
        
        /// <summary>
        /// timespan : local_id 
        /// </summary>
        public partial class AstTimespan1 : AstTimespan
        {
            
            private static string _ruleName1 = "timespan";
            
            private AstLocalId _localId;
            
            internal AstTimespan1(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTimespan(this);
            }
        }
        /// <summary>
        /// timespan : constant 
        /// </summary>
        public partial class AstTimespan2 : AstTimespan
        {
            
            private static string _ruleName1 = "timespan";
            
            private AstConstant _constant;
            
            internal AstTimespan2(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTimespan(this);
            }
        }
        

        
        internal AstTimespan(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTimespan(Position p) : 
                base(p)
        {
        }
        
        internal AstTimespan(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTimespan Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTimespan.AstTimespan1(ctx, list.Get<AstLocalId>(0));
            }
            if ((index == 2))
            {
                return new AstTimespan.AstTimespan2(ctx, list.Get<AstConstant>(0));
            }
            return null;
        }
        
        /// <summary>
        /// timespan : 
        ///    local_id 
        /// </summary>
        public static AstTimespan Timespan(ParserRuleContext ctx, AstLocalId localId)
        {
            AstTimespan.AstTimespan1 result = new AstTimespan.AstTimespan1(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// timespan : 
        ///    constant 
        /// </summary>
        public static AstTimespan Timespan(ParserRuleContext ctx, AstConstant constant)
        {
            AstTimespan.AstTimespan2 result = new AstTimespan.AstTimespan2(ctx, constant);
            return result;
        }
    }
    
    /// <summary>
    /// relational_index_option
    /// 	 : rebuild_index_option
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// </summary>
    public abstract partial class AstRelationalIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRebuildIndexOption), false, false, "rebuild_index_option")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "rebuild_index_option\r\n | DROP_EXISTING  EQUAL  on_off\r\n | OPTIMIZE_FOR_SEQUENTIAL" +
            "_KEY  EQUAL  on_off\r\n";
        
        private static string _ruleName = "relational_index_option";
        
        /// <summary>
        /// relational_index_option : rebuild_index_option 
        /// </summary>
        public partial class AstRelationalIndexOption1 : AstRelationalIndexOption
        {
            
            private static string _ruleName1 = "relational_index_option";
            
            private AstRebuildIndexOption _rebuildIndexOption;
            
            internal AstRelationalIndexOption1(ParserRuleContext ctx, AstRebuildIndexOption rebuildIndexOption) : 
                    base(ctx)
            {
                _rebuildIndexOption = rebuildIndexOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRebuildIndexOption RebuildIndexOption
            {
                get
                {
                    return _rebuildIndexOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        /// <summary>
        /// relational_index_option : DROP_EXISTING EQUAL on_off 
        /// </summary>
        public partial class AstRelationalIndexOption2 : AstRelationalIndexOption
        {
            
            private static string _ruleName1 = "relational_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRelationalIndexOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        /// <summary>
        /// relational_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY EQUAL on_off 
        /// </summary>
        public partial class AstRelationalIndexOption3 : AstRelationalIndexOption
        {
            
            private static string _ruleName1 = "relational_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRelationalIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        

        
        internal AstRelationalIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRelationalIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRelationalIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRelationalIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRelationalIndexOption.AstRelationalIndexOption1(ctx, list.Get<AstRebuildIndexOption>(0));
            }
            if ((index == 2))
            {
                return new AstRelationalIndexOption.AstRelationalIndexOption2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstRelationalIndexOption.AstRelationalIndexOption3(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// relational_index_option : 
        ///    rebuild_index_option 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(ParserRuleContext ctx, AstRebuildIndexOption rebuildIndexOption)
        {
            AstRelationalIndexOption.AstRelationalIndexOption1 result = new AstRelationalIndexOption.AstRelationalIndexOption1(ctx, rebuildIndexOption);
            return result;
        }
        
        /// <summary>
        /// relational_index_option : 
        ///    DROP_EXISTING EQUAL on_off 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstRelationalIndexOption.AstRelationalIndexOption2 result = new AstRelationalIndexOption.AstRelationalIndexOption2(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// index_status
    /// 	 : index_status_enum
    /// 	 | RESUME  resumable_index_options?
    /// 	 | reorganize_partition
    /// 	 | set_index_options
    /// 	 | rebuild_partition
    /// </summary>
    public abstract partial class AstIndexStatus : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndexStatusEnum), false, false, "index_status_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstResumableIndexOptions), true, false, "resumable_index_options")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstReorganizePartition), false, false, "reorganize_partition")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstSetIndexOptions), false, false, "set_index_options")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstRebuildPartition), false, false, "rebuild_partition"))));
        
        private static string _ruleValue = "index_status_enum\r\n | RESUME  resumable_index_options?\r\n | reorganize_partition\r\n" +
            " | set_index_options\r\n | rebuild_partition\r\n";
        
        private static string _ruleName = "index_status";
        
        /// <summary>
        /// index_status : index_status_enum 
        /// </summary>
        public partial class AstIndexStatus1 : AstIndexStatus
        {
            
            private static string _ruleName1 = "index_status";
            
            private AstIndexStatusEnum _indexStatusEnum;
            
            internal AstIndexStatus1(ParserRuleContext ctx, AstIndexStatusEnum indexStatusEnum) : 
                    base(ctx)
            {
                _indexStatusEnum = indexStatusEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndexStatusEnum IndexStatusEnum
            {
                get
                {
                    return _indexStatusEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : RESUME resumable_index_options? 
        /// </summary>
        public partial class AstIndexStatus2 : AstIndexStatus
        {
            
            private static string _ruleName1 = "index_status";
            
            private AstResumableIndexOptions? _resumableIndexOptions;
            
            internal AstIndexStatus2(ParserRuleContext ctx, AstResumableIndexOptions? resumableIndexOptions) : 
                    base(ctx)
            {
                _resumableIndexOptions = resumableIndexOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstResumableIndexOptions? ResumableIndexOptions
            {
                get
                {
                    return _resumableIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : reorganize_partition 
        /// </summary>
        public partial class AstIndexStatus3 : AstIndexStatus
        {
            
            private static string _ruleName1 = "index_status";
            
            private AstReorganizePartition _reorganizePartition;
            
            internal AstIndexStatus3(ParserRuleContext ctx, AstReorganizePartition reorganizePartition) : 
                    base(ctx)
            {
                _reorganizePartition = reorganizePartition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReorganizePartition ReorganizePartition
            {
                get
                {
                    return _reorganizePartition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : set_index_options 
        /// </summary>
        public partial class AstIndexStatus4 : AstIndexStatus
        {
            
            private static string _ruleName1 = "index_status";
            
            private AstSetIndexOptions _setIndexOptions;
            
            internal AstIndexStatus4(ParserRuleContext ctx, AstSetIndexOptions setIndexOptions) : 
                    base(ctx)
            {
                _setIndexOptions = setIndexOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSetIndexOptions SetIndexOptions
            {
                get
                {
                    return _setIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : rebuild_partition 
        /// </summary>
        public partial class AstIndexStatus5 : AstIndexStatus
        {
            
            private static string _ruleName1 = "index_status";
            
            private AstRebuildPartition _rebuildPartition;
            
            internal AstIndexStatus5(ParserRuleContext ctx, AstRebuildPartition rebuildPartition) : 
                    base(ctx)
            {
                _rebuildPartition = rebuildPartition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRebuildPartition RebuildPartition
            {
                get
                {
                    return _rebuildPartition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        

        
        internal AstIndexStatus(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexStatus(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexStatus(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIndexStatus Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIndexStatus.AstIndexStatus1(ctx, list.Get<AstIndexStatusEnum>(0));
            }
            if ((index == 2))
            {
                return new AstIndexStatus.AstIndexStatus2(ctx, list.Get<AstResumableIndexOptions?>(0));
            }
            if ((index == 3))
            {
                return new AstIndexStatus.AstIndexStatus3(ctx, list.Get<AstReorganizePartition>(0));
            }
            if ((index == 4))
            {
                return new AstIndexStatus.AstIndexStatus4(ctx, list.Get<AstSetIndexOptions>(0));
            }
            if ((index == 5))
            {
                return new AstIndexStatus.AstIndexStatus5(ctx, list.Get<AstRebuildPartition>(0));
            }
            return null;
        }
        
        /// <summary>
        /// index_status : 
        ///    index_status_enum 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstIndexStatusEnum indexStatusEnum)
        {
            AstIndexStatus.AstIndexStatus1 result = new AstIndexStatus.AstIndexStatus1(ctx, indexStatusEnum);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    RESUME resumable_index_options? 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstResumableIndexOptions resumableIndexOptions)
        {
            AstIndexStatus.AstIndexStatus2 result = new AstIndexStatus.AstIndexStatus2(ctx, resumableIndexOptions);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    reorganize_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstReorganizePartition reorganizePartition)
        {
            AstIndexStatus.AstIndexStatus3 result = new AstIndexStatus.AstIndexStatus3(ctx, reorganizePartition);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    set_index_options 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstSetIndexOptions setIndexOptions)
        {
            AstIndexStatus.AstIndexStatus4 result = new AstIndexStatus.AstIndexStatus4(ctx, setIndexOptions);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    rebuild_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstRebuildPartition rebuildPartition)
        {
            AstIndexStatus.AstIndexStatus5 result = new AstIndexStatus.AstIndexStatus5(ctx, rebuildPartition);
            return result;
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : (id_ | ALL)
    /// </summary>
    public abstract partial class AstIndexName : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "(id_ | ALL)\r\n";
        
        private static string _ruleName = "index_name";
        
        /// <summary>
        /// index_name : id_ 
        /// </summary>
        public partial class AstIndexName1 : AstIndexName
        {
            
            private static string _ruleName1 = "index_name";
            
            private AstId _id;
            
            internal AstIndexName1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexName(this);
            }
        }
        /// <summary>
        /// index_name : ALL 
        /// </summary>
        public partial class AstIndexName2 : AstIndexName
        {
            
            private static string _ruleName1 = "index_name";
            
            internal AstIndexName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexName(this);
            }
        }
        

        
        internal AstIndexName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexName(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexName(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIndexName Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIndexName.AstIndexName1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstIndexName.AstIndexName2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// index_name : 
        ///    id_ 
        /// </summary>
        public static AstIndexName IndexName(ParserRuleContext ctx, AstId id)
        {
            AstIndexName.AstIndexName1 result = new AstIndexName.AstIndexName1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// index_name : 
        ///    ALL 
        /// </summary>
        public static AstIndexName IndexName(ParserRuleContext ctx)
        {
            AstIndexName.AstIndexName2 result = new AstIndexName.AstIndexName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// resumable_index_option
    /// 	 : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?
    /// 	 | low_priority_lock_wait
    /// </summary>
    public abstract partial class AstResumableIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLowPriorityLockWait), false, false, "low_priority_lock_wait"))));
        
        private static string _ruleValue = "MAXDOP  EQUAL  max_degree_of_parallelism = decimal\r\n | MAX_DURATION  EQUAL  max_d" +
            "uration = decimal  MINUTES?\r\n | low_priority_lock_wait\r\n";
        
        private static string _ruleName = "resumable_index_option";
        
        /// <summary>
        /// resumable_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstResumableIndexOption1 : AstResumableIndexOption
        {
            
            private static string _ruleName1 = "resumable_index_option";
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstResumableIndexOption1(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        /// <summary>
        /// resumable_index_option : MAX_DURATION EQUAL max_duration=decimal MINUTES? 
        /// </summary>
        public partial class AstResumableIndexOption2 : AstResumableIndexOption
        {
            
            private static string _ruleName1 = "resumable_index_option";
            
            private AstDecimal _maxDuration;
            
            internal AstResumableIndexOption2(ParserRuleContext ctx, AstDecimal maxDuration) : 
                    base(ctx)
            {
                _maxDuration = maxDuration;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDuration
            {
                get
                {
                    return _maxDuration;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        /// <summary>
        /// resumable_index_option : low_priority_lock_wait 
        /// </summary>
        public partial class AstResumableIndexOption3 : AstResumableIndexOption
        {
            
            private static string _ruleName1 = "resumable_index_option";
            
            private AstLowPriorityLockWait _lowPriorityLockWait;
            
            internal AstResumableIndexOption3(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait) : 
                    base(ctx)
            {
                _lowPriorityLockWait = lowPriorityLockWait;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLowPriorityLockWait LowPriorityLockWait
            {
                get
                {
                    return _lowPriorityLockWait;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        

        
        internal AstResumableIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstResumableIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstResumableIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstResumableIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstResumableIndexOption.AstResumableIndexOption1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstResumableIndexOption.AstResumableIndexOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstResumableIndexOption.AstResumableIndexOption3(ctx, list.Get<AstLowPriorityLockWait>(0));
            }
            return null;
        }
        
        /// <summary>
        /// resumable_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism)
        {
            AstResumableIndexOption.AstResumableIndexOption1 result = new AstResumableIndexOption.AstResumableIndexOption1(ctx, maxDegreeOfParallelism);
            return result;
        }
        
        /// <summary>
        /// resumable_index_option : 
        ///    low_priority_lock_wait 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait)
        {
            AstResumableIndexOption.AstResumableIndexOption3 result = new AstResumableIndexOption.AstResumableIndexOption3(ctx, lowPriorityLockWait);
            return result;
        }
    }
    
    /// <summary>
    /// reorganize_option
    /// 	 : LOB_COMPACTION  EQUAL  on_off
    /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstReorganizeOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "LOB_COMPACTION  EQUAL  on_off\r\n | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off\r\n";
        
        private static string _ruleName = "reorganize_option";
        
        /// <summary>
        /// reorganize_option : LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public partial class AstReorganizeOption1 : AstReorganizeOption
        {
            
            private static string _ruleName1 = "reorganize_option";
            
            private AstOnOff _onOff;
            
            internal AstReorganizeOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReorganizeOption(this);
            }
        }
        /// <summary>
        /// reorganize_option : COMPRESS_ALL_ROW_GROUPS EQUAL on_off 
        /// </summary>
        public partial class AstReorganizeOption2 : AstReorganizeOption
        {
            
            private static string _ruleName1 = "reorganize_option";
            
            private AstOnOff _onOff;
            
            internal AstReorganizeOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReorganizeOption(this);
            }
        }
        

        
        internal AstReorganizeOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReorganizeOption(Position p) : 
                base(p)
        {
        }
        
        internal AstReorganizeOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstReorganizeOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstReorganizeOption.AstReorganizeOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstReorganizeOption.AstReorganizeOption2(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// reorganize_option : 
        ///    LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstReorganizeOption ReorganizeOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstReorganizeOption.AstReorganizeOption1 result = new AstReorganizeOption.AstReorganizeOption1(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// set_index_option
    /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// </summary>
    public abstract partial class AstSetIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "ALLOW_ROW_LOCKS  EQUAL  on_off\r\n | ALLOW_PAGE_LOCKS  EQUAL  on_off\r\n | OPTIMIZE_F" +
            "OR_SEQUENTIAL_KEY  EQUAL  on_off\r\n | IGNORE_DUP_KEY  EQUAL  on_off\r\n | STATISTIC" +
            "S_NORECOMPUTE  EQUAL  on_off\r\n | COMPRESSION_DELAY  EQUAL  delay = decimal  MINU" +
            "TES?\r\n";
        
        private static string _ruleName = "set_index_option";
        
        /// <summary>
        /// set_index_option : ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption1 : AstSetIndexOption
        {
            
            private static string _ruleName1 = "set_index_option";
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : ALLOW_PAGE_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption2 : AstSetIndexOption
        {
            
            private static string _ruleName1 = "set_index_option";
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption3 : AstSetIndexOption
        {
            
            private static string _ruleName1 = "set_index_option";
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : IGNORE_DUP_KEY EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption4 : AstSetIndexOption
        {
            
            private static string _ruleName1 = "set_index_option";
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : STATISTICS_NORECOMPUTE EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption5 : AstSetIndexOption
        {
            
            private static string _ruleName1 = "set_index_option";
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public partial class AstSetIndexOption6 : AstSetIndexOption
        {
            
            private static string _ruleName1 = "set_index_option";
            
            private AstDecimal _delay;
            
            internal AstSetIndexOption6(ParserRuleContext ctx, AstDecimal delay) : 
                    base(ctx)
            {
                _delay = delay;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Delay
            {
                get
                {
                    return _delay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        

        
        internal AstSetIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSetIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSetIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSetIndexOption.AstSetIndexOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstSetIndexOption.AstSetIndexOption2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstSetIndexOption.AstSetIndexOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstSetIndexOption.AstSetIndexOption4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstSetIndexOption.AstSetIndexOption5(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 6))
            {
                return new AstSetIndexOption.AstSetIndexOption6(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// set_index_option : 
        ///    ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSetIndexOption.AstSetIndexOption1 result = new AstSetIndexOption.AstSetIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// set_index_option : 
        ///    COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(ParserRuleContext ctx, AstDecimal delay)
        {
            AstSetIndexOption.AstSetIndexOption6 result = new AstSetIndexOption.AstSetIndexOption6(ctx, delay);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_partition
    /// 	 : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?
    /// 	 | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?
    /// </summary>
    public abstract partial class AstRebuildPartition : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSinglePartitionRebuildIndexOptions), true, false, "single_partition_rebuild_index_options")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRebuildIndexOptions), true, false, "rebuild_index_options"))));
        
        private static string _ruleValue = "REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?\r\n | REBUILD  PARTITION " +
            " EQUAL  decimal  single_partition_rebuild_index_options?\r\n";
        
        private static string _ruleName = "rebuild_partition";
        
        /// <summary>
        /// rebuild_partition : REBUILD PARTITION EQUAL ALL rebuild_index_options? 
        /// </summary>
        public partial class AstRebuildPartition1 : AstRebuildPartition
        {
            
            private static string _ruleName1 = "rebuild_partition";
            
            private AstRebuildIndexOptions? _rebuildIndexOptions;
            
            internal AstRebuildPartition1(ParserRuleContext ctx, AstRebuildIndexOptions? rebuildIndexOptions) : 
                    base(ctx)
            {
                _rebuildIndexOptions = rebuildIndexOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRebuildIndexOptions? RebuildIndexOptions
            {
                get
                {
                    return _rebuildIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildPartition(this);
            }
        }
        /// <summary>
        /// rebuild_partition : REBUILD PARTITION EQUAL decimal single_partition_rebuild_index_options? 
        /// </summary>
        public partial class AstRebuildPartition2 : AstRebuildPartition
        {
            
            private static string _ruleName1 = "rebuild_partition";
            
            private AstDecimal _decimal;
            
            private AstSinglePartitionRebuildIndexOptions? _singlePartitionRebuildIndexOptions;
            
            internal AstRebuildPartition2(ParserRuleContext ctx, AstDecimal @decimal, AstSinglePartitionRebuildIndexOptions? singlePartitionRebuildIndexOptions) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _singlePartitionRebuildIndexOptions = singlePartitionRebuildIndexOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstSinglePartitionRebuildIndexOptions? SinglePartitionRebuildIndexOptions
            {
                get
                {
                    return _singlePartitionRebuildIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildPartition(this);
            }
        }
        

        
        internal AstRebuildPartition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRebuildPartition(Position p) : 
                base(p)
        {
        }
        
        internal AstRebuildPartition(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRebuildPartition Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRebuildPartition.AstRebuildPartition1(ctx, list.Get<AstRebuildIndexOptions?>(0));
            }
            if ((index == 2))
            {
                return new AstRebuildPartition.AstRebuildPartition2(ctx, list.Get<AstDecimal>(0), list.Get<AstSinglePartitionRebuildIndexOptions?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// rebuild_partition : 
        ///    REBUILD PARTITION EQUAL ALL rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(ParserRuleContext ctx, AstRebuildIndexOptions rebuildIndexOptions)
        {
            AstRebuildPartition.AstRebuildPartition1 result = new AstRebuildPartition.AstRebuildPartition1(ctx, rebuildIndexOptions);
            return result;
        }
        
        /// <summary>
        /// rebuild_partition : 
        ///    REBUILD PARTITION EQUAL decimal single_partition_rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(ParserRuleContext ctx, AstDecimal @decimal, AstSinglePartitionRebuildIndexOptions singlePartitionRebuildIndexOptions)
        {
            AstRebuildPartition.AstRebuildPartition2 result = new AstRebuildPartition.AstRebuildPartition2(ctx, @decimal, singlePartitionRebuildIndexOptions);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  online_value
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public abstract partial class AstRebuildIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(13, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatacompressionMode), false, false, "datacompression_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(14, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnlineValue), false, false, "online_value")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = @"PAD_INDEX  EQUAL  on_off
 | FILLFACTOR  EQUAL  decimal
 | SORT_IN_TEMPDB  EQUAL  on_off
 | IGNORE_DUP_KEY  EQUAL  on_off
 | STATISTICS_NORECOMPUTE  EQUAL  on_off
 | STATISTICS_INCREMENTAL  EQUAL  on_off
 | ONLINE  EQUAL  online_value
 | RESUMABLE  EQUAL  on_off
 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
 | ALLOW_ROW_LOCKS  EQUAL  on_off
 | ALLOW_PAGE_LOCKS  EQUAL  on_off
 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
";
        
        private static string _ruleName = "rebuild_index_option";
        
        /// <summary>
        /// rebuild_index_option : PAD_INDEX EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption1 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : FILLFACTOR EQUAL decimal 
        /// </summary>
        public partial class AstRebuildIndexOption2 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstDecimal _decimal;
            
            internal AstRebuildIndexOption2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption3 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : IGNORE_DUP_KEY EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption4 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : STATISTICS_NORECOMPUTE EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption5 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : STATISTICS_INCREMENTAL EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption6 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstRebuildIndexOption7 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnlineValue _onlineValue;
            
            internal AstRebuildIndexOption7(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : RESUMABLE EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption8 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : MAX_DURATION EQUAL times=decimal MINUTES? 
        /// </summary>
        public partial class AstRebuildIndexOption9 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstDecimal _times;
            
            internal AstRebuildIndexOption9(ParserRuleContext ctx, AstDecimal times) : 
                    base(ctx)
            {
                _times = times;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Times
            {
                get
                {
                    return _times;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption10 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption10(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ALLOW_PAGE_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption11 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption11(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstRebuildIndexOption12 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstRebuildIndexOption12(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public partial class AstRebuildIndexOption13 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstDatacompressionMode _datacompressionMode;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstRebuildIndexOption13(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _datacompressionMode = datacompressionMode;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatacompressionMode DatacompressionMode
            {
                get
                {
                    return _datacompressionMode;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstRebuildIndexOption14 : AstRebuildIndexOption
        {
            
            private static string _ruleName1 = "rebuild_index_option";
            
            private AstOnOff _onOff;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstRebuildIndexOption14(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        

        
        internal AstRebuildIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRebuildIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRebuildIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRebuildIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption5(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 6))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption6(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 7))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption7(ctx, list.Get<AstOnlineValue>(0));
            }
            if ((index == 8))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption8(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 9))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption9(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 10))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption10(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 11))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption11(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 12))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption12(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 13))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption13(ctx, list.Get<AstDatacompressionMode>(0), list.Get<AstOnPartitions?>(1));
            }
            if ((index == 14))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption14(ctx, list.Get<AstOnOff>(0), list.Get<AstOnPartitions?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstRebuildIndexOption.AstRebuildIndexOption1 result = new AstRebuildIndexOption.AstRebuildIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstRebuildIndexOption.AstRebuildIndexOption2 result = new AstRebuildIndexOption.AstRebuildIndexOption2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstRebuildIndexOption.AstRebuildIndexOption7 result = new AstRebuildIndexOption.AstRebuildIndexOption7(ctx, onlineValue);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            AstRebuildIndexOption.AstRebuildIndexOption13 result = new AstRebuildIndexOption.AstRebuildIndexOption13(ctx, datacompressionMode, onPartitions);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstRebuildIndexOption.AstRebuildIndexOption14 result = new AstRebuildIndexOption.AstRebuildIndexOption14(ctx, onOff, onPartitions);
            return result;
        }
    }
    
    /// <summary>
    /// online_value
    /// 	 : ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)?
    /// 	 | OFF
    /// </summary>
    public abstract partial class AstOnlineValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLowPriorityLockWait), false, false, "low_priority_lock_wait"))));
        
        private static string _ruleValue = "ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)?\r\n | OFF\r\n";
        
        private static string _ruleName = "online_value";
        
        /// <summary>
        /// online_value : ON LR_BRACKET low_priority_lock_wait RR_BRACKET 
        /// </summary>
        public partial class AstOnlineValue1 : AstOnlineValue
        {
            
            private static string _ruleName1 = "online_value";
            
            private AstLowPriorityLockWait _lowPriorityLockWait;
            
            internal AstOnlineValue1(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait) : 
                    base(ctx)
            {
                _lowPriorityLockWait = lowPriorityLockWait;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLowPriorityLockWait LowPriorityLockWait
            {
                get
                {
                    return _lowPriorityLockWait;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnlineValue(this);
            }
        }
        /// <summary>
        /// online_value : OFF 
        /// </summary>
        public partial class AstOnlineValue2 : AstOnlineValue
        {
            
            private static string _ruleName1 = "online_value";
            
            internal AstOnlineValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnlineValue(this);
            }
        }
        

        
        internal AstOnlineValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnlineValue(Position p) : 
                base(p)
        {
        }
        
        internal AstOnlineValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstOnlineValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstOnlineValue.AstOnlineValue1(ctx, list.Get<AstLowPriorityLockWait>(0));
            }
            if ((index == 2))
            {
                return new AstOnlineValue.AstOnlineValue2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// online_value : 
        ///    ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstOnlineValue OnlineValue(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait)
        {
            AstOnlineValue.AstOnlineValue1 result = new AstOnlineValue.AstOnlineValue1(ctx, lowPriorityLockWait);
            return result;
        }
        
        /// <summary>
        /// online_value : 
        ///    OFF 
        /// </summary>
        public static AstOnlineValue OnlineValue(ParserRuleContext ctx)
        {
            AstOnlineValue.AstOnlineValue2 result = new AstOnlineValue.AstOnlineValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_option
    /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | ONLINE  EQUAL  online_value
    /// </summary>
    public abstract partial class AstSinglePartitionRebuildIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatacompressionMode), false, false, "datacompression_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnlineValue), false, false, "online_value"))));
        
        private static string _ruleValue = @"SORT_IN_TEMPDB  EQUAL  on_off
 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
 | RESUMABLE  EQUAL  on_off
 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
 | ONLINE  EQUAL  online_value
";
        
        private static string _ruleName = "single_partition_rebuild_index_option";
        
        /// <summary>
        /// single_partition_rebuild_index_option : SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption1 : AstSinglePartitionRebuildIndexOption
        {
            
            private static string _ruleName1 = "single_partition_rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstSinglePartitionRebuildIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption2 : AstSinglePartitionRebuildIndexOption
        {
            
            private static string _ruleName1 = "single_partition_rebuild_index_option";
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstSinglePartitionRebuildIndexOption2(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : RESUMABLE EQUAL on_off 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption3 : AstSinglePartitionRebuildIndexOption
        {
            
            private static string _ruleName1 = "single_partition_rebuild_index_option";
            
            private AstOnOff _onOff;
            
            internal AstSinglePartitionRebuildIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption4 : AstSinglePartitionRebuildIndexOption
        {
            
            private static string _ruleName1 = "single_partition_rebuild_index_option";
            
            private AstDatacompressionMode _datacompressionMode;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstSinglePartitionRebuildIndexOption4(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _datacompressionMode = datacompressionMode;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatacompressionMode DatacompressionMode
            {
                get
                {
                    return _datacompressionMode;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption5 : AstSinglePartitionRebuildIndexOption
        {
            
            private static string _ruleName1 = "single_partition_rebuild_index_option";
            
            private AstOnOff _onOff;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstSinglePartitionRebuildIndexOption5(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption6 : AstSinglePartitionRebuildIndexOption
        {
            
            private static string _ruleName1 = "single_partition_rebuild_index_option";
            
            private AstOnlineValue _onlineValue;
            
            internal AstSinglePartitionRebuildIndexOption6(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        

        
        internal AstSinglePartitionRebuildIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSinglePartitionRebuildIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4(ctx, list.Get<AstDatacompressionMode>(0), list.Get<AstOnPartitions?>(1));
            }
            if ((index == 5))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5(ctx, list.Get<AstOnOff>(0), list.Get<AstOnPartitions?>(1));
            }
            if ((index == 6))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6(ctx, list.Get<AstOnlineValue>(0));
            }
            return null;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2(ctx, maxDegreeOfParallelism);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4(ctx, datacompressionMode, onPartitions);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5(ctx, onOff, onPartitions);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6(ctx, onlineValue);
            return result;
        }
    }
    
    /// <summary>
    /// partition_nums
    /// 	 : partition_number = decimal  (TO  to_partition_number = decimal)?
    /// </summary>
    public partial class AstPartitionNums : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstDecimal _partitionNumber;
        
        private AstDecimal _toPartitionNumber;
        
        private static string _ruleValue = "partition_number = decimal  (TO  to_partition_number = decimal)?\r\n";
        
        private static string _ruleName = "partition_nums";
        
        internal AstPartitionNums(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPartitionNums(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartitionNums(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstPartitionNums(ParserRuleContext ctx, AstDecimal partitionNumber, AstDecimal toPartitionNumber) : 
                base(ctx)
        {
            _partitionNumber = partitionNumber;
            _toPartitionNumber = toPartitionNumber;
        }
        
        public virtual AstDecimal PartitionNumber
        {
            get
            {
                return _partitionNumber;
            }
        }
        
        public virtual AstDecimal ToPartitionNumber
        {
            get
            {
                return _toPartitionNumber;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionNums(this);
        }
        
        public static AstPartitionNums Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstPartitionNums(ctx, list.Get<AstDecimal>(0), list.Get<AstDecimal>(1));
        }
        
        /// <summary>
        /// partition_nums : 
        ///    partition_number=decimal TO to_partition_number=decimal 
        /// </summary>
        public static AstPartitionNums PartitionNums(ParserRuleContext ctx, AstDecimal partitionNumber, AstDecimal toPartitionNumber)
        {
            AstPartitionNums result = new AstPartitionNums(ctx, partitionNumber, toPartitionNumber);
            return result;
        }
    }
    
    /// <summary>
    /// columnstore_index_option
    /// 	 : DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | ONLINE  EQUAL  online = on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
    /// </summary>
    public abstract partial class AstColumnstoreIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatacompressionColumnMode), false, false, "datacompression_column_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = @"DROP_EXISTING  EQUAL  drop_existing = on_off
 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
 | ONLINE  EQUAL  online = on_off
 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
";
        
        private static string _ruleName = "columnstore_index_option";
        
        /// <summary>
        /// columnstore_index_option : DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public partial class AstColumnstoreIndexOption1 : AstColumnstoreIndexOption
        {
            
            private static string _ruleName1 = "columnstore_index_option";
            
            private AstOnOff _dropExisting;
            
            internal AstColumnstoreIndexOption1(ParserRuleContext ctx, AstOnOff dropExisting) : 
                    base(ctx)
            {
                _dropExisting = dropExisting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff DropExisting
            {
                get
                {
                    return _dropExisting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstColumnstoreIndexOption2 : AstColumnstoreIndexOption
        {
            
            private static string _ruleName1 = "columnstore_index_option";
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstColumnstoreIndexOption2(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : ONLINE EQUAL online=on_off 
        /// </summary>
        public partial class AstColumnstoreIndexOption3 : AstColumnstoreIndexOption
        {
            
            private static string _ruleName1 = "columnstore_index_option";
            
            private AstOnOff _online;
            
            internal AstColumnstoreIndexOption3(ParserRuleContext ctx, AstOnOff online) : 
                    base(ctx)
            {
                _online = online;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff Online
            {
                get
                {
                    return _online;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public partial class AstColumnstoreIndexOption4 : AstColumnstoreIndexOption
        {
            
            private static string _ruleName1 = "columnstore_index_option";
            
            private AstDecimal _delay;
            
            internal AstColumnstoreIndexOption4(ParserRuleContext ctx, AstDecimal delay) : 
                    base(ctx)
            {
                _delay = delay;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Delay
            {
                get
                {
                    return _delay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : DATA_COMPRESSION EQUAL datacompression_column_mode on_partitions? 
        /// </summary>
        public partial class AstColumnstoreIndexOption5 : AstColumnstoreIndexOption
        {
            
            private static string _ruleName1 = "columnstore_index_option";
            
            private AstDatacompressionColumnMode _datacompressionColumnMode;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstColumnstoreIndexOption5(ParserRuleContext ctx, AstDatacompressionColumnMode datacompressionColumnMode, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _datacompressionColumnMode = datacompressionColumnMode;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatacompressionColumnMode DatacompressionColumnMode
            {
                get
                {
                    return _datacompressionColumnMode;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        

        
        internal AstColumnstoreIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnstoreIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnstoreIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstColumnstoreIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption4(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 5))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption5(ctx, list.Get<AstDatacompressionColumnMode>(0), list.Get<AstOnPartitions?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(ParserRuleContext ctx, AstOnOff dropExisting)
        {
            AstColumnstoreIndexOption.AstColumnstoreIndexOption1 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption1(ctx, dropExisting);
            return result;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism)
        {
            AstColumnstoreIndexOption.AstColumnstoreIndexOption2 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption2(ctx, maxDegreeOfParallelism);
            return result;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_column_mode on_partitions? 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(ParserRuleContext ctx, AstDatacompressionColumnMode datacompressionColumnMode, AstOnPartitions onPartitions)
        {
            AstColumnstoreIndexOption.AstColumnstoreIndexOption5 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption5(ctx, datacompressionColumnMode, onPartitions);
            return result;
        }
    }
    
    /// <summary>
    /// xml_index_option
    /// 	 : PAD_INDEX  EQUAL  pad_index = on_off
    /// 	 | FILLFACTOR  EQUAL  fillfactor = decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
    /// 	 | DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | ONLINE  EQUAL  online_value
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | XML_COMPRESSION  EQUAL  xml_compression = on_off
    /// </summary>
    public abstract partial class AstXmlIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnlineValue), false, false, "online_value")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = @"PAD_INDEX  EQUAL  pad_index = on_off
 | FILLFACTOR  EQUAL  fillfactor = decimal
 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
 | DROP_EXISTING  EQUAL  drop_existing = on_off
 | ONLINE  EQUAL  online_value
 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
 | XML_COMPRESSION  EQUAL  xml_compression = on_off
";
        
        private static string _ruleName = "xml_index_option";
        
        /// <summary>
        /// xml_index_option : PAD_INDEX EQUAL pad_index=on_off 
        /// </summary>
        public partial class AstXmlIndexOption1 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnOff _padIndex;
            
            internal AstXmlIndexOption1(ParserRuleContext ctx, AstOnOff padIndex) : 
                    base(ctx)
            {
                _padIndex = padIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff PadIndex
            {
                get
                {
                    return _padIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : FILLFACTOR EQUAL fillfactor=decimal 
        /// </summary>
        public partial class AstXmlIndexOption2 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstDecimal _fillfactor;
            
            internal AstXmlIndexOption2(ParserRuleContext ctx, AstDecimal fillfactor) : 
                    base(ctx)
            {
                _fillfactor = fillfactor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Fillfactor
            {
                get
                {
                    return _fillfactor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : SORT_IN_TEMPDB EQUAL sort_in_tempdb=on_off 
        /// </summary>
        public partial class AstXmlIndexOption3 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnOff _sortInTempdb;
            
            internal AstXmlIndexOption3(ParserRuleContext ctx, AstOnOff sortInTempdb) : 
                    base(ctx)
            {
                _sortInTempdb = sortInTempdb;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff SortInTempdb
            {
                get
                {
                    return _sortInTempdb;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : IGNORE_DUP_KEY EQUAL ignore_dup_key=on_off 
        /// </summary>
        public partial class AstXmlIndexOption4 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnOff _ignoreDupKey;
            
            internal AstXmlIndexOption4(ParserRuleContext ctx, AstOnOff ignoreDupKey) : 
                    base(ctx)
            {
                _ignoreDupKey = ignoreDupKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff IgnoreDupKey
            {
                get
                {
                    return _ignoreDupKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public partial class AstXmlIndexOption5 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnOff _dropExisting;
            
            internal AstXmlIndexOption5(ParserRuleContext ctx, AstOnOff dropExisting) : 
                    base(ctx)
            {
                _dropExisting = dropExisting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff DropExisting
            {
                get
                {
                    return _dropExisting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstXmlIndexOption6 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnlineValue _onlineValue;
            
            internal AstXmlIndexOption6(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ALLOW_ROW_LOCKS EQUAL allow_row_loks=on_off 
        /// </summary>
        public partial class AstXmlIndexOption7 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnOff _allowRowLoks;
            
            internal AstXmlIndexOption7(ParserRuleContext ctx, AstOnOff allowRowLoks) : 
                    base(ctx)
            {
                _allowRowLoks = allowRowLoks;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff AllowRowLoks
            {
                get
                {
                    return _allowRowLoks;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ALLOW_PAGE_LOCKS EQUAL allow_page_locks=on_off 
        /// </summary>
        public partial class AstXmlIndexOption8 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnOff _allowPageLocks;
            
            internal AstXmlIndexOption8(ParserRuleContext ctx, AstOnOff allowPageLocks) : 
                    base(ctx)
            {
                _allowPageLocks = allowPageLocks;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff AllowPageLocks
            {
                get
                {
                    return _allowPageLocks;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstXmlIndexOption9 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstXmlIndexOption9(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : XML_COMPRESSION EQUAL xml_compression=on_off 
        /// </summary>
        public partial class AstXmlIndexOption10 : AstXmlIndexOption
        {
            
            private static string _ruleName1 = "xml_index_option";
            
            private AstOnOff _xmlCompression;
            
            internal AstXmlIndexOption10(ParserRuleContext ctx, AstOnOff xmlCompression) : 
                    base(ctx)
            {
                _xmlCompression = xmlCompression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff XmlCompression
            {
                get
                {
                    return _xmlCompression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        

        
        internal AstXmlIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstXmlIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstXmlIndexOption.AstXmlIndexOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstXmlIndexOption.AstXmlIndexOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstXmlIndexOption.AstXmlIndexOption4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstXmlIndexOption.AstXmlIndexOption5(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 6))
            {
                return new AstXmlIndexOption.AstXmlIndexOption6(ctx, list.Get<AstOnlineValue>(0));
            }
            if ((index == 7))
            {
                return new AstXmlIndexOption.AstXmlIndexOption7(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 8))
            {
                return new AstXmlIndexOption.AstXmlIndexOption8(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 9))
            {
                return new AstXmlIndexOption.AstXmlIndexOption9(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 10))
            {
                return new AstXmlIndexOption.AstXmlIndexOption10(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    PAD_INDEX EQUAL pad_index=on_off 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(ParserRuleContext ctx, AstOnOff padIndex)
        {
            AstXmlIndexOption.AstXmlIndexOption1 result = new AstXmlIndexOption.AstXmlIndexOption1(ctx, padIndex);
            return result;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    FILLFACTOR EQUAL fillfactor=decimal 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(ParserRuleContext ctx, AstDecimal fillfactor)
        {
            AstXmlIndexOption.AstXmlIndexOption2 result = new AstXmlIndexOption.AstXmlIndexOption2(ctx, fillfactor);
            return result;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstXmlIndexOption.AstXmlIndexOption6 result = new AstXmlIndexOption.AstXmlIndexOption6(ctx, onlineValue);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_declaration_arguments
    /// 	 : procedure_params
    /// 	 | LR_BRACKET  procedure_params  RR_BRACKET
    /// </summary>
    public abstract partial class AstProcedureDeclarationArguments : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstProcedureParams), false, false, "procedure_params")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstProcedureParams), false, false, "procedure_params"))));
        
        private static string _ruleValue = "procedure_params\r\n | LR_BRACKET  procedure_params  RR_BRACKET\r\n";
        
        private static string _ruleName = "procedure_declaration_arguments";
        
        /// <summary>
        /// procedure_declaration_arguments : procedure_params 
        /// </summary>
        public partial class AstProcedureDeclarationArguments1 : AstProcedureDeclarationArguments
        {
            
            private static string _ruleName1 = "procedure_declaration_arguments";
            
            private AstProcedureParams _procedureParams;
            
            internal AstProcedureDeclarationArguments1(ParserRuleContext ctx, AstProcedureParams procedureParams) : 
                    base(ctx)
            {
                _procedureParams = procedureParams;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstProcedureParams ProcedureParams
            {
                get
                {
                    return _procedureParams;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclarationArguments(this);
            }
        }
        /// <summary>
        /// procedure_declaration_arguments : LR_BRACKET procedure_params RR_BRACKET 
        /// </summary>
        public partial class AstProcedureDeclarationArguments2 : AstProcedureDeclarationArguments
        {
            
            private static string _ruleName1 = "procedure_declaration_arguments";
            
            private AstProcedureParams _procedureParams;
            
            internal AstProcedureDeclarationArguments2(ParserRuleContext ctx, AstProcedureParams procedureParams) : 
                    base(ctx)
            {
                _procedureParams = procedureParams;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstProcedureParams ProcedureParams
            {
                get
                {
                    return _procedureParams;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclarationArguments(this);
            }
        }
        

        
        internal AstProcedureDeclarationArguments(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureDeclarationArguments(Position p) : 
                base(p)
        {
        }
        
        internal AstProcedureDeclarationArguments(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstProcedureDeclarationArguments Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstProcedureDeclarationArguments.AstProcedureDeclarationArguments1(ctx, list.Get<AstProcedureParams>(0));
            }
            if ((index == 2))
            {
                return new AstProcedureDeclarationArguments.AstProcedureDeclarationArguments2(ctx, list.Get<AstProcedureParams>(0));
            }
            return null;
        }
        
        /// <summary>
        /// procedure_declaration_arguments : 
        ///    procedure_params 
        /// </summary>
        public static AstProcedureDeclarationArguments ProcedureDeclarationArguments(ParserRuleContext ctx, AstProcedureParams procedureParams)
        {
            AstProcedureDeclarationArguments.AstProcedureDeclarationArguments1 result = new AstProcedureDeclarationArguments.AstProcedureDeclarationArguments1(ctx, procedureParams);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_declaration
    /// 	 : procedure_declaration_create
    /// 	 | ALTER
    /// </summary>
    public abstract partial class AstProcedureDeclaration : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstProcedureDeclarationCreate), false, false, "procedure_declaration_create"))));
        
        private static string _ruleValue = "procedure_declaration_create\r\n | ALTER\r\n";
        
        private static string _ruleName = "procedure_declaration";
        
        /// <summary>
        /// procedure_declaration : procedure_declaration_create 
        /// </summary>
        public partial class AstProcedureDeclaration1 : AstProcedureDeclaration
        {
            
            private static string _ruleName1 = "procedure_declaration";
            
            private AstProcedureDeclarationCreate _procedureDeclarationCreate;
            
            internal AstProcedureDeclaration1(ParserRuleContext ctx, AstProcedureDeclarationCreate procedureDeclarationCreate) : 
                    base(ctx)
            {
                _procedureDeclarationCreate = procedureDeclarationCreate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstProcedureDeclarationCreate ProcedureDeclarationCreate
            {
                get
                {
                    return _procedureDeclarationCreate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclaration(this);
            }
        }
        /// <summary>
        /// procedure_declaration : ALTER 
        /// </summary>
        public partial class AstProcedureDeclaration2 : AstProcedureDeclaration
        {
            
            private static string _ruleName1 = "procedure_declaration";
            
            internal AstProcedureDeclaration2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclaration(this);
            }
        }
        

        
        internal AstProcedureDeclaration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureDeclaration(Position p) : 
                base(p)
        {
        }
        
        internal AstProcedureDeclaration(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstProcedureDeclaration Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstProcedureDeclaration.AstProcedureDeclaration1(ctx, list.Get<AstProcedureDeclarationCreate>(0));
            }
            if ((index == 2))
            {
                return new AstProcedureDeclaration.AstProcedureDeclaration2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// procedure_declaration : 
        ///    procedure_declaration_create 
        /// </summary>
        public static AstProcedureDeclaration ProcedureDeclaration(ParserRuleContext ctx, AstProcedureDeclarationCreate procedureDeclarationCreate)
        {
            AstProcedureDeclaration.AstProcedureDeclaration1 result = new AstProcedureDeclaration.AstProcedureDeclaration1(ctx, procedureDeclarationCreate);
            return result;
        }
        
        /// <summary>
        /// procedure_declaration : 
        ///    ALTER 
        /// </summary>
        public static AstProcedureDeclaration ProcedureDeclaration(ParserRuleContext ctx)
        {
            AstProcedureDeclaration.AstProcedureDeclaration2 result = new AstProcedureDeclaration.AstProcedureDeclaration2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_declaration_create
    /// 	 : CREATE  (OR  alter_replace)?
    /// </summary>
    public partial class AstProcedureDeclarationCreate : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterReplace), false, false, "alter_replace"))));
        
        private AstAlterReplace _alterReplace;
        
        private static string _ruleValue = "CREATE  (OR  alter_replace)?\r\n";
        
        private static string _ruleName = "procedure_declaration_create";
        
        internal AstProcedureDeclarationCreate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureDeclarationCreate(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstProcedureDeclarationCreate(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstProcedureDeclarationCreate(ParserRuleContext ctx, AstAlterReplace alterReplace) : 
                base(ctx)
        {
            _alterReplace = alterReplace;
        }
        
        public virtual AstAlterReplace AlterReplace
        {
            get
            {
                return _alterReplace;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureDeclarationCreate(this);
        }
        
        public static AstProcedureDeclarationCreate Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstProcedureDeclarationCreate(ctx, list.Get<AstAlterReplace>(0));
        }
        
        /// <summary>
        /// procedure_declaration_create : 
        ///    CREATE OR alter_replace 
        /// </summary>
        public static AstProcedureDeclarationCreate ProcedureDeclarationCreate(ParserRuleContext ctx, AstAlterReplace alterReplace)
        {
            AstProcedureDeclarationCreate result = new AstProcedureDeclarationCreate(ctx, alterReplace);
            return result;
        }
    }
    
    /// <summary>
    /// replication_alias
    /// 	 : as_external_name
    /// 	 | sql_clause
    /// </summary>
    public abstract partial class AstReplicationAlias : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAsExternalName), false, false, "as_external_name")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSqlClause), false, false, "sql_clause"))));
        
        private static string _ruleValue = "as_external_name\r\n | sql_clause\r\n";
        
        private static string _ruleName = "replication_alias";
        
        /// <summary>
        /// replication_alias : as_external_name 
        /// </summary>
        public partial class AstReplicationAlias1 : AstReplicationAlias
        {
            
            private static string _ruleName1 = "replication_alias";
            
            private AstAsExternalName _asExternalName;
            
            internal AstReplicationAlias1(ParserRuleContext ctx, AstAsExternalName asExternalName) : 
                    base(ctx)
            {
                _asExternalName = asExternalName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAsExternalName AsExternalName
            {
                get
                {
                    return _asExternalName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReplicationAlias(this);
            }
        }
        /// <summary>
        /// replication_alias : sql_clause 
        /// </summary>
        public partial class AstReplicationAlias2 : AstReplicationAlias
        {
            
            private static string _ruleName1 = "replication_alias";
            
            private AstSqlClause _sqlClause;
            
            internal AstReplicationAlias2(ParserRuleContext ctx, AstSqlClause sqlClause) : 
                    base(ctx)
            {
                _sqlClause = sqlClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSqlClause SqlClause
            {
                get
                {
                    return _sqlClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReplicationAlias(this);
            }
        }
        

        
        internal AstReplicationAlias(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReplicationAlias(Position p) : 
                base(p)
        {
        }
        
        internal AstReplicationAlias(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstReplicationAlias Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstReplicationAlias.AstReplicationAlias1(ctx, list.Get<AstAsExternalName>(0));
            }
            if ((index == 2))
            {
                return new AstReplicationAlias.AstReplicationAlias2(ctx, list.Get<AstSqlClause>(0));
            }
            return null;
        }
        
        /// <summary>
        /// replication_alias : 
        ///    as_external_name 
        /// </summary>
        public static AstReplicationAlias ReplicationAlias(ParserRuleContext ctx, AstAsExternalName asExternalName)
        {
            AstReplicationAlias.AstReplicationAlias1 result = new AstReplicationAlias.AstReplicationAlias1(ctx, asExternalName);
            return result;
        }
        
        /// <summary>
        /// replication_alias : 
        ///    sql_clause 
        /// </summary>
        public static AstReplicationAlias ReplicationAlias(ParserRuleContext ctx, AstSqlClause sqlClause)
        {
            AstReplicationAlias.AstReplicationAlias2 result = new AstReplicationAlias.AstReplicationAlias2(ctx, sqlClause);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_trigger
    /// 	 : create_or_alter_dml_trigger
    /// 	 | create_or_alter_ddl_trigger
    /// </summary>
    public abstract partial class AstCreateOrAlterTrigger : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateOrAlterDmlTrigger), false, false, "create_or_alter_dml_trigger")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateOrAlterDdlTrigger), false, false, "create_or_alter_ddl_trigger"))));
        
        private static string _ruleValue = "create_or_alter_dml_trigger\r\n | create_or_alter_ddl_trigger\r\n";
        
        private static string _ruleName = "create_or_alter_trigger";
        
        /// <summary>
        /// create_or_alter_trigger : create_or_alter_dml_trigger 
        /// </summary>
        public partial class AstCreateOrAlterTrigger1 : AstCreateOrAlterTrigger
        {
            
            private static string _ruleName1 = "create_or_alter_trigger";
            
            private AstCreateOrAlterDmlTrigger _createOrAlterDmlTrigger;
            
            internal AstCreateOrAlterTrigger1(ParserRuleContext ctx, AstCreateOrAlterDmlTrigger createOrAlterDmlTrigger) : 
                    base(ctx)
            {
                _createOrAlterDmlTrigger = createOrAlterDmlTrigger;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateOrAlterDmlTrigger CreateOrAlterDmlTrigger
            {
                get
                {
                    return _createOrAlterDmlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlterTrigger(this);
            }
        }
        /// <summary>
        /// create_or_alter_trigger : create_or_alter_ddl_trigger 
        /// </summary>
        public partial class AstCreateOrAlterTrigger2 : AstCreateOrAlterTrigger
        {
            
            private static string _ruleName1 = "create_or_alter_trigger";
            
            private AstCreateOrAlterDdlTrigger _createOrAlterDdlTrigger;
            
            internal AstCreateOrAlterTrigger2(ParserRuleContext ctx, AstCreateOrAlterDdlTrigger createOrAlterDdlTrigger) : 
                    base(ctx)
            {
                _createOrAlterDdlTrigger = createOrAlterDdlTrigger;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateOrAlterDdlTrigger CreateOrAlterDdlTrigger
            {
                get
                {
                    return _createOrAlterDdlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlterTrigger(this);
            }
        }
        

        
        internal AstCreateOrAlterTrigger(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterTrigger(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterTrigger(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateOrAlterTrigger Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1(ctx, list.Get<AstCreateOrAlterDmlTrigger>(0));
            }
            if ((index == 2))
            {
                return new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2(ctx, list.Get<AstCreateOrAlterDdlTrigger>(0));
            }
            return null;
        }
        
        /// <summary>
        /// create_or_alter_trigger : 
        ///    create_or_alter_dml_trigger 
        /// </summary>
        public static AstCreateOrAlterTrigger CreateOrAlterTrigger(ParserRuleContext ctx, AstCreateOrAlterDmlTrigger createOrAlterDmlTrigger)
        {
            AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1 result = new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1(ctx, createOrAlterDmlTrigger);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_trigger : 
        ///    create_or_alter_ddl_trigger 
        /// </summary>
        public static AstCreateOrAlterTrigger CreateOrAlterTrigger(ParserRuleContext ctx, AstCreateOrAlterDdlTrigger createOrAlterDdlTrigger)
        {
            AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2 result = new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2(ctx, createOrAlterDdlTrigger);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter
    /// 	 : CREATE  (OR  ALTER)?
    /// 	 | ALTER
    /// </summary>
    public abstract partial class AstCreateOrAlter : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "CREATE  (OR  ALTER)?\r\n | ALTER\r\n";
        
        private static string _ruleName = "create_or_alter";
        
        /// <summary>
        /// create_or_alter : CREATE OR ALTER 
        /// </summary>
        public partial class AstCreateOrAlter1 : AstCreateOrAlter
        {
            
            private static string _ruleName1 = "create_or_alter";
            
            internal AstCreateOrAlter1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlter(this);
            }
        }
        /// <summary>
        /// create_or_alter : ALTER 
        /// </summary>
        public partial class AstCreateOrAlter2 : AstCreateOrAlter
        {
            
            private static string _ruleName1 = "create_or_alter";
            
            internal AstCreateOrAlter2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlter(this);
            }
        }
        

        
        internal AstCreateOrAlter(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlter(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlter(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateOrAlter Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateOrAlter.AstCreateOrAlter1(ctx);
            }
            if ((index == 2))
            {
                return new AstCreateOrAlter.AstCreateOrAlter2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// create_or_alter : 
        ///    CREATE OR ALTER 
        /// </summary>
        public static AstCreateOrAlter CreateOrAlter(ParserRuleContext ctx)
        {
            AstCreateOrAlter.AstCreateOrAlter1 result = new AstCreateOrAlter.AstCreateOrAlter1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// for_after_instead
    /// 	 : FOR
    /// 	 | AFTER
    /// 	 | INSTEAD  OF
    /// </summary>
    public abstract partial class AstForAfterInstead : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "FOR\r\n | AFTER\r\n | INSTEAD  OF\r\n";
        
        private static string _ruleName = "for_after_instead";
        
        /// <summary>
        /// for_after_instead : FOR 
        /// </summary>
        public partial class AstForAfterInstead1 : AstForAfterInstead
        {
            
            private static string _ruleName1 = "for_after_instead";
            
            internal AstForAfterInstead1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        /// <summary>
        /// for_after_instead : AFTER 
        /// </summary>
        public partial class AstForAfterInstead2 : AstForAfterInstead
        {
            
            private static string _ruleName1 = "for_after_instead";
            
            internal AstForAfterInstead2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        /// <summary>
        /// for_after_instead : INSTEAD OF 
        /// </summary>
        public partial class AstForAfterInstead3 : AstForAfterInstead
        {
            
            private static string _ruleName1 = "for_after_instead";
            
            internal AstForAfterInstead3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        

        
        internal AstForAfterInstead(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstForAfterInstead(Position p) : 
                base(p)
        {
        }
        
        internal AstForAfterInstead(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstForAfterInstead Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstForAfterInstead.AstForAfterInstead1(ctx);
            }
            if ((index == 2))
            {
                return new AstForAfterInstead.AstForAfterInstead2(ctx);
            }
            if ((index == 3))
            {
                return new AstForAfterInstead.AstForAfterInstead3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// for_after_instead : 
        ///    FOR 
        /// </summary>
        public static AstForAfterInstead ForAfterInstead(ParserRuleContext ctx)
        {
            AstForAfterInstead.AstForAfterInstead1 result = new AstForAfterInstead.AstForAfterInstead1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// dml_trigger_option
    /// 	 : ENCRYPTION
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstDmlTriggerOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteClause), false, false, "execute_clause"))));
        
        private static string _ruleValue = "ENCRYPTION\r\n | execute_clause\r\n";
        
        private static string _ruleName = "dml_trigger_option";
        
        /// <summary>
        /// dml_trigger_option : ENCRYPTION 
        /// </summary>
        public partial class AstDmlTriggerOption1 : AstDmlTriggerOption
        {
            
            private static string _ruleName1 = "dml_trigger_option";
            
            internal AstDmlTriggerOption1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlTriggerOption(this);
            }
        }
        /// <summary>
        /// dml_trigger_option : execute_clause 
        /// </summary>
        public partial class AstDmlTriggerOption2 : AstDmlTriggerOption
        {
            
            private static string _ruleName1 = "dml_trigger_option";
            
            private AstExecuteClause _executeClause;
            
            internal AstDmlTriggerOption2(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlTriggerOption(this);
            }
        }
        

        
        internal AstDmlTriggerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDmlTriggerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstDmlTriggerOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDmlTriggerOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDmlTriggerOption.AstDmlTriggerOption1(ctx);
            }
            if ((index == 2))
            {
                return new AstDmlTriggerOption.AstDmlTriggerOption2(ctx, list.Get<AstExecuteClause>(0));
            }
            return null;
        }
        
        /// <summary>
        /// dml_trigger_option : 
        ///    ENCRYPTION 
        /// </summary>
        public static AstDmlTriggerOption DmlTriggerOption(ParserRuleContext ctx)
        {
            AstDmlTriggerOption.AstDmlTriggerOption1 result = new AstDmlTriggerOption.AstDmlTriggerOption1(ctx);
            return result;
        }
        
        /// <summary>
        /// dml_trigger_option : 
        ///    execute_clause 
        /// </summary>
        public static AstDmlTriggerOption DmlTriggerOption(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstDmlTriggerOption.AstDmlTriggerOption2 result = new AstDmlTriggerOption.AstDmlTriggerOption2(ctx, executeClause);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_option
    /// 	 : procedure_option_enum
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstProcedureOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstProcedureOptionEnum), false, false, "procedure_option_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteClause), false, false, "execute_clause"))));
        
        private static string _ruleValue = "procedure_option_enum\r\n | execute_clause\r\n";
        
        private static string _ruleName = "procedure_option";
        
        /// <summary>
        /// procedure_option : procedure_option_enum 
        /// </summary>
        public partial class AstProcedureOption1 : AstProcedureOption
        {
            
            private static string _ruleName1 = "procedure_option";
            
            private AstProcedureOptionEnum _procedureOptionEnum;
            
            internal AstProcedureOption1(ParserRuleContext ctx, AstProcedureOptionEnum procedureOptionEnum) : 
                    base(ctx)
            {
                _procedureOptionEnum = procedureOptionEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstProcedureOptionEnum ProcedureOptionEnum
            {
                get
                {
                    return _procedureOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureOption(this);
            }
        }
        /// <summary>
        /// procedure_option : execute_clause 
        /// </summary>
        public partial class AstProcedureOption2 : AstProcedureOption
        {
            
            private static string _ruleName1 = "procedure_option";
            
            private AstExecuteClause _executeClause;
            
            internal AstProcedureOption2(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureOption(this);
            }
        }
        

        
        internal AstProcedureOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureOption(Position p) : 
                base(p)
        {
        }
        
        internal AstProcedureOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstProcedureOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstProcedureOption.AstProcedureOption1(ctx, list.Get<AstProcedureOptionEnum>(0));
            }
            if ((index == 2))
            {
                return new AstProcedureOption.AstProcedureOption2(ctx, list.Get<AstExecuteClause>(0));
            }
            return null;
        }
        
        /// <summary>
        /// procedure_option : 
        ///    procedure_option_enum 
        /// </summary>
        public static AstProcedureOption ProcedureOption(ParserRuleContext ctx, AstProcedureOptionEnum procedureOptionEnum)
        {
            AstProcedureOption.AstProcedureOption1 result = new AstProcedureOption.AstProcedureOption1(ctx, procedureOptionEnum);
            return result;
        }
        
        /// <summary>
        /// procedure_option : 
        ///    execute_clause 
        /// </summary>
        public static AstProcedureOption ProcedureOption(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstProcedureOption.AstProcedureOption2 result = new AstProcedureOption.AstProcedureOption2(ctx, executeClause);
            return result;
        }
    }
    
    /// <summary>
    /// function_option
    /// 	 : function_option_enum
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstFunctionOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFunctionOptionEnum), false, false, "function_option_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteClause), false, false, "execute_clause"))));
        
        private static string _ruleValue = "function_option_enum\r\n | execute_clause\r\n";
        
        private static string _ruleName = "function_option";
        
        /// <summary>
        /// function_option : function_option_enum 
        /// </summary>
        public partial class AstFunctionOption1 : AstFunctionOption
        {
            
            private static string _ruleName1 = "function_option";
            
            private AstFunctionOptionEnum _functionOptionEnum;
            
            internal AstFunctionOption1(ParserRuleContext ctx, AstFunctionOptionEnum functionOptionEnum) : 
                    base(ctx)
            {
                _functionOptionEnum = functionOptionEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFunctionOptionEnum FunctionOptionEnum
            {
                get
                {
                    return _functionOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionOption(this);
            }
        }
        /// <summary>
        /// function_option : execute_clause 
        /// </summary>
        public partial class AstFunctionOption2 : AstFunctionOption
        {
            
            private static string _ruleName1 = "function_option";
            
            private AstExecuteClause _executeClause;
            
            internal AstFunctionOption2(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionOption(this);
            }
        }
        

        
        internal AstFunctionOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFunctionOption(Position p) : 
                base(p)
        {
        }
        
        internal AstFunctionOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstFunctionOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstFunctionOption.AstFunctionOption1(ctx, list.Get<AstFunctionOptionEnum>(0));
            }
            if ((index == 2))
            {
                return new AstFunctionOption.AstFunctionOption2(ctx, list.Get<AstExecuteClause>(0));
            }
            return null;
        }
        
        /// <summary>
        /// function_option : 
        ///    function_option_enum 
        /// </summary>
        public static AstFunctionOption FunctionOption(ParserRuleContext ctx, AstFunctionOptionEnum functionOptionEnum)
        {
            AstFunctionOption.AstFunctionOption1 result = new AstFunctionOption.AstFunctionOption1(ctx, functionOptionEnum);
            return result;
        }
        
        /// <summary>
        /// function_option : 
        ///    execute_clause 
        /// </summary>
        public static AstFunctionOption FunctionOption(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstFunctionOption.AstFunctionOption2 result = new AstFunctionOption.AstFunctionOption2(ctx, executeClause);
            return result;
        }
    }
    
    /// <summary>
    /// statistics_with
    /// 	 : FULLSCAN
    /// 	 | SAMPLE  decimal  percent_row
    /// 	 | STATS_STREAM
    /// </summary>
    public abstract partial class AstStatisticsWith : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPercentRow), false, false, "percent_row"))));
        
        private static string _ruleValue = "FULLSCAN\r\n | SAMPLE  decimal  percent_row\r\n | STATS_STREAM\r\n";
        
        private static string _ruleName = "statistics_with";
        
        /// <summary>
        /// statistics_with : FULLSCAN 
        /// </summary>
        public partial class AstStatisticsWith1 : AstStatisticsWith
        {
            
            private static string _ruleName1 = "statistics_with";
            
            internal AstStatisticsWith1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        /// <summary>
        /// statistics_with : SAMPLE decimal percent_row 
        /// </summary>
        public partial class AstStatisticsWith2 : AstStatisticsWith
        {
            
            private static string _ruleName1 = "statistics_with";
            
            private AstDecimal _decimal;
            
            private AstPercentRow _percentRow;
            
            internal AstStatisticsWith2(ParserRuleContext ctx, AstDecimal @decimal, AstPercentRow percentRow) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _percentRow = percentRow;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstPercentRow PercentRow
            {
                get
                {
                    return _percentRow;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        /// <summary>
        /// statistics_with : STATS_STREAM 
        /// </summary>
        public partial class AstStatisticsWith3 : AstStatisticsWith
        {
            
            private static string _ruleName1 = "statistics_with";
            
            internal AstStatisticsWith3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        

        
        internal AstStatisticsWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStatisticsWith(Position p) : 
                base(p)
        {
        }
        
        internal AstStatisticsWith(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstStatisticsWith Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstStatisticsWith.AstStatisticsWith1(ctx);
            }
            if ((index == 2))
            {
                return new AstStatisticsWith.AstStatisticsWith2(ctx, list.Get<AstDecimal>(0), list.Get<AstPercentRow>(1));
            }
            if ((index == 3))
            {
                return new AstStatisticsWith.AstStatisticsWith3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// statistics_with : 
        ///    FULLSCAN 
        /// </summary>
        public static AstStatisticsWith StatisticsWith(ParserRuleContext ctx)
        {
            AstStatisticsWith.AstStatisticsWith1 result = new AstStatisticsWith.AstStatisticsWith1(ctx);
            return result;
        }
        
        /// <summary>
        /// statistics_with : 
        ///    SAMPLE decimal percent_row 
        /// </summary>
        public static AstStatisticsWith StatisticsWith(ParserRuleContext ctx, AstDecimal @decimal, AstPercentRow percentRow)
        {
            AstStatisticsWith.AstStatisticsWith2 result = new AstStatisticsWith.AstStatisticsWith2(ctx, @decimal, percentRow);
            return result;
        }
    }
    
    /// <summary>
    /// update_statistics_option
    /// 	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | RESAMPLE  on_partitions?
    /// 	 | STATS_STREAM  EQUAL  stats_stream_ = expression
    /// 	 | ROWCOUNT  EQUAL  decimal
    /// 	 | PAGECOUNT  EQUAL  decimal
    /// 	 | ALL
    /// 	 | COLUMNS
    /// 	 | INDEX
    /// 	 | NORECOMPUTE
    /// 	 | INCREMENTAL  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
    /// 	 | AUTO_DROP  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUpdateStatisticsOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPercentRow), false, false, "percent_row"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(13, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = @"(FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
 | RESAMPLE  on_partitions?
 | STATS_STREAM  EQUAL  stats_stream_ = expression
 | ROWCOUNT  EQUAL  decimal
 | PAGECOUNT  EQUAL  decimal
 | ALL
 | COLUMNS
 | INDEX
 | NORECOMPUTE
 | INCREMENTAL  EQUAL  on_off
 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
 | AUTO_DROP  EQUAL  on_off
";
        
        private static string _ruleName = "update_statistics_option";
        
        /// <summary>
        /// update_statistics_option : FULLSCAN COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption1 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : SAMPLE number=decimal percent_row COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption2 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstDecimal _number;
            
            private AstPercentRow _percentRow;
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption2(ParserRuleContext ctx, AstDecimal number, AstPercentRow percentRow, AstOnOff onOff) : 
                    base(ctx)
            {
                _number = number;
                _percentRow = percentRow;
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Number
            {
                get
                {
                    return _number;
                }
            }
            
            public virtual AstPercentRow PercentRow
            {
                get
                {
                    return _percentRow;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : RESAMPLE on_partitions? 
        /// </summary>
        public partial class AstUpdateStatisticsOption3 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstOnPartitions? _onPartitions;
            
            internal AstUpdateStatisticsOption3(ParserRuleContext ctx, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : STATS_STREAM EQUAL stats_stream_=expression 
        /// </summary>
        public partial class AstUpdateStatisticsOption4 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstExpression _statsStream;
            
            internal AstUpdateStatisticsOption4(ParserRuleContext ctx, AstExpression statsStream) : 
                    base(ctx)
            {
                _statsStream = statsStream;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression StatsStream
            {
                get
                {
                    return _statsStream;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : ROWCOUNT EQUAL decimal 
        /// </summary>
        public partial class AstUpdateStatisticsOption5 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstDecimal _decimal;
            
            internal AstUpdateStatisticsOption5(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : PAGECOUNT EQUAL decimal 
        /// </summary>
        public partial class AstUpdateStatisticsOption6 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstDecimal _decimal;
            
            internal AstUpdateStatisticsOption6(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : ALL 
        /// </summary>
        public partial class AstUpdateStatisticsOption7 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            internal AstUpdateStatisticsOption7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : COLUMNS 
        /// </summary>
        public partial class AstUpdateStatisticsOption8 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            internal AstUpdateStatisticsOption8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : INDEX 
        /// </summary>
        public partial class AstUpdateStatisticsOption9 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            internal AstUpdateStatisticsOption9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : NORECOMPUTE 
        /// </summary>
        public partial class AstUpdateStatisticsOption10 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            internal AstUpdateStatisticsOption10(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : INCREMENTAL EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption11 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption11(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : MAXDOP EQUAL max_dregree_of_parallelism=decimal 
        /// </summary>
        public partial class AstUpdateStatisticsOption12 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstDecimal _maxDregreeOfParallelism;
            
            internal AstUpdateStatisticsOption12(ParserRuleContext ctx, AstDecimal maxDregreeOfParallelism) : 
                    base(ctx)
            {
                _maxDregreeOfParallelism = maxDregreeOfParallelism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDregreeOfParallelism
            {
                get
                {
                    return _maxDregreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : AUTO_DROP EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption13 : AstUpdateStatisticsOption
        {
            
            private static string _ruleName1 = "update_statistics_option";
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption13(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        

        
        internal AstUpdateStatisticsOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateStatisticsOption(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateStatisticsOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUpdateStatisticsOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption2(ctx, list.Get<AstDecimal>(0), list.Get<AstPercentRow>(1), list.Get<AstOnOff>(2));
            }
            if ((index == 3))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption3(ctx, list.Get<AstOnPartitions?>(0));
            }
            if ((index == 4))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption4(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 5))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption5(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 6))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption6(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 7))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption7(ctx);
            }
            if ((index == 8))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption8(ctx);
            }
            if ((index == 9))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption9(ctx);
            }
            if ((index == 10))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption10(ctx);
            }
            if ((index == 11))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption11(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 12))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption12(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 13))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption13(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    FULLSCAN COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption1 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    SAMPLE number=decimal percent_row COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstDecimal number, AstPercentRow percentRow, AstOnOff onOff)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption2 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption2(ctx, number, percentRow, onOff);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    RESAMPLE on_partitions? 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstOnPartitions onPartitions)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption3 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption3(ctx, onPartitions);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    STATS_STREAM EQUAL stats_stream_=expression 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstExpression statsStream)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption4 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption4(ctx, statsStream);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    ROWCOUNT EQUAL decimal 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption5 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption5(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    ALL 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption7 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption7(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// table_indices
    /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
    /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
    /// </summary>
    public abstract partial class AstTableIndices : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateTableIndexOptions), true, false, "create_table_index_options"), new Bb.Asts.AstRuleMatcherItem(typeof(AstGroupId), false, false, "group_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstClustered), true, false, "clustered"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameListWithOrder), false, false, "column_name_list_with_order")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = @"INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
 | INDEX  id_  CLUSTERED  COLUMNSTORE
 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
";
        
        private static string _ruleName = "table_indices";
        
        /// <summary>
        /// table_indices : INDEX id_ UNIQUE? clustered? LR_BRACKET column_name_list_with_order RR_BRACKET 
        /// </summary>
        public partial class AstTableIndices1 : AstTableIndices
        {
            
            private static string _ruleName1 = "table_indices";
            
            private AstId _id;
            
            private AstClustered? _clustered;
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            internal AstTableIndices1(ParserRuleContext ctx, AstId id, AstClustered? clustered, AstColumnNameListWithOrder columnNameListWithOrder) : 
                    base(ctx)
            {
                _id = id;
                _clustered = clustered;
                _columnNameListWithOrder = columnNameListWithOrder;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public virtual AstClustered? Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        /// <summary>
        /// table_indices : INDEX id_ CLUSTERED COLUMNSTORE 
        /// </summary>
        public partial class AstTableIndices2 : AstTableIndices
        {
            
            private static string _ruleName1 = "table_indices";
            
            private AstId _id;
            
            internal AstTableIndices2(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        /// <summary>
        /// table_indices : INDEX id_ NONCLUSTERED? COLUMNSTORE LR_BRACKET column_name_list RR_BRACKET create_table_index_options? ON group_id 
        /// </summary>
        public partial class AstTableIndices3 : AstTableIndices
        {
            
            private static string _ruleName1 = "table_indices";
            
            private AstId _id;
            
            private AstColumnNameList _columnNameList;
            
            private AstCreateTableIndexOptions? _createTableIndexOptions;
            
            private AstGroupId _groupId;
            
            internal AstTableIndices3(ParserRuleContext ctx, AstId id, AstColumnNameList columnNameList, AstCreateTableIndexOptions? createTableIndexOptions, AstGroupId groupId) : 
                    base(ctx)
            {
                _id = id;
                _columnNameList = columnNameList;
                _createTableIndexOptions = createTableIndexOptions;
                _groupId = groupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public virtual AstCreateTableIndexOptions? CreateTableIndexOptions
            {
                get
                {
                    return _createTableIndexOptions;
                }
            }
            
            public virtual AstGroupId GroupId
            {
                get
                {
                    return _groupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        

        
        internal AstTableIndices(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableIndices(Position p) : 
                base(p)
        {
        }
        
        internal AstTableIndices(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableIndices Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableIndices.AstTableIndices1(ctx, list.Get<AstId>(0), list.Get<AstClustered?>(1), list.Get<AstColumnNameListWithOrder>(2));
            }
            if ((index == 2))
            {
                return new AstTableIndices.AstTableIndices2(ctx, list.Get<AstId>(0));
            }
            if ((index == 3))
            {
                return new AstTableIndices.AstTableIndices3(ctx, list.Get<AstId>(0), list.Get<AstColumnNameList>(1), list.Get<AstCreateTableIndexOptions?>(2), list.Get<AstGroupId>(3));
            }
            return null;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ UNIQUE? clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableIndices TableIndices(ParserRuleContext ctx, AstId id, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            AstTableIndices.AstTableIndices1 result = new AstTableIndices.AstTableIndices1(ctx, id, clustered, columnNameListWithOrder);
            return result;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ CLUSTERED COLUMNSTORE 
        /// </summary>
        public static AstTableIndices TableIndices(ParserRuleContext ctx, AstId id)
        {
            AstTableIndices.AstTableIndices2 result = new AstTableIndices.AstTableIndices2(ctx, id);
            return result;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ NONCLUSTERED? COLUMNSTORE ( column_name_list ) create_table_index_options? ON group_id 
        /// </summary>
        public static AstTableIndices TableIndices(ParserRuleContext ctx, AstId id, AstColumnNameList columnNameList, AstCreateTableIndexOptions createTableIndexOptions, AstGroupId groupId)
        {
            AstTableIndices.AstTableIndices3 result = new AstTableIndices.AstTableIndices3(ctx, id, columnNameList, createTableIndexOptions, groupId);
            return result;
        }
    }
    
    /// <summary>
    /// tbl_option
    /// 	 : WITH  LR_BRACKET  tableoptions  RR_BRACKET
    /// 	 | tableoptions
    /// </summary>
    public abstract partial class AstTblOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableoptions), false, false, "tableoptions")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableoptions), false, false, "tableoptions"))));
        
        private static string _ruleValue = "WITH  LR_BRACKET  tableoptions  RR_BRACKET\r\n | tableoptions\r\n";
        
        private static string _ruleName = "tbl_option";
        
        /// <summary>
        /// tbl_option : WITH LR_BRACKET tableoptions RR_BRACKET 
        /// </summary>
        public partial class AstTblOption1 : AstTblOption
        {
            
            private static string _ruleName1 = "tbl_option";
            
            private AstTableoptions _tableoptions;
            
            internal AstTblOption1(ParserRuleContext ctx, AstTableoptions tableoptions) : 
                    base(ctx)
            {
                _tableoptions = tableoptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableoptions Tableoptions
            {
                get
                {
                    return _tableoptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTblOption(this);
            }
        }
        /// <summary>
        /// tbl_option : tableoptions 
        /// </summary>
        public partial class AstTblOption2 : AstTblOption
        {
            
            private static string _ruleName1 = "tbl_option";
            
            private AstTableoptions _tableoptions;
            
            internal AstTblOption2(ParserRuleContext ctx, AstTableoptions tableoptions) : 
                    base(ctx)
            {
                _tableoptions = tableoptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableoptions Tableoptions
            {
                get
                {
                    return _tableoptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTblOption(this);
            }
        }
        

        
        internal AstTblOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTblOption(Position p) : 
                base(p)
        {
        }
        
        internal AstTblOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTblOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTblOption.AstTblOption1(ctx, list.Get<AstTableoptions>(0));
            }
            if ((index == 2))
            {
                return new AstTblOption.AstTblOption2(ctx, list.Get<AstTableoptions>(0));
            }
            return null;
        }
        
        /// <summary>
        /// tbl_option : 
        ///    WITH ( tableoptions ) 
        /// </summary>
        public static AstTblOption TblOption(ParserRuleContext ctx, AstTableoptions tableoptions)
        {
            AstTblOption.AstTblOption1 result = new AstTblOption.AstTblOption1(ctx, tableoptions);
            return result;
        }
    }
    
    /// <summary>
    /// tableoption
    /// 	 : table_opt_varname  EQUAL  table_opt_var_value
    /// 	 | tableoption_cluster_mode
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | table_distribution
    /// 	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public abstract partial class AstTableoption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableOptVarname), false, false, "table_opt_varname"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTableOptVarValue), false, false, "table_opt_var_value")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstCompressionMode), false, false, "compression_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableoptionClusterMode), false, false, "tableoption_cluster_mode")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableDistribution), false, false, "table_distribution"))));
        
        private static string _ruleValue = "table_opt_varname  EQUAL  table_opt_var_value\r\n | tableoption_cluster_mode\r\n | FI" +
            "LLFACTOR  EQUAL  decimal\r\n | table_distribution\r\n | DATA_COMPRESSION  EQUAL  com" +
            "pression_mode  on_partitions?\r\n | XML_COMPRESSION  EQUAL  on_off  on_partitions?" +
            "\r\n";
        
        private static string _ruleName = "tableoption";
        
        /// <summary>
        /// tableoption : table_opt_varname EQUAL table_opt_var_value 
        /// </summary>
        public partial class AstTableoption1 : AstTableoption
        {
            
            private static string _ruleName1 = "tableoption";
            
            private AstTableOptVarname _tableOptVarname;
            
            private AstTableOptVarValue _tableOptVarValue;
            
            internal AstTableoption1(ParserRuleContext ctx, AstTableOptVarname tableOptVarname, AstTableOptVarValue tableOptVarValue) : 
                    base(ctx)
            {
                _tableOptVarname = tableOptVarname;
                _tableOptVarValue = tableOptVarValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableOptVarname TableOptVarname
            {
                get
                {
                    return _tableOptVarname;
                }
            }
            
            public virtual AstTableOptVarValue TableOptVarValue
            {
                get
                {
                    return _tableOptVarValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : tableoption_cluster_mode 
        /// </summary>
        public partial class AstTableoption2 : AstTableoption
        {
            
            private static string _ruleName1 = "tableoption";
            
            private AstTableoptionClusterMode _tableoptionClusterMode;
            
            internal AstTableoption2(ParserRuleContext ctx, AstTableoptionClusterMode tableoptionClusterMode) : 
                    base(ctx)
            {
                _tableoptionClusterMode = tableoptionClusterMode;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableoptionClusterMode TableoptionClusterMode
            {
                get
                {
                    return _tableoptionClusterMode;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : FILLFACTOR EQUAL decimal 
        /// </summary>
        public partial class AstTableoption3 : AstTableoption
        {
            
            private static string _ruleName1 = "tableoption";
            
            private AstDecimal _decimal;
            
            internal AstTableoption3(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : table_distribution 
        /// </summary>
        public partial class AstTableoption4 : AstTableoption
        {
            
            private static string _ruleName1 = "tableoption";
            
            private AstTableDistribution _tableDistribution;
            
            internal AstTableoption4(ParserRuleContext ctx, AstTableDistribution tableDistribution) : 
                    base(ctx)
            {
                _tableDistribution = tableDistribution;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableDistribution TableDistribution
            {
                get
                {
                    return _tableDistribution;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : DATA_COMPRESSION EQUAL compression_mode on_partitions? 
        /// </summary>
        public partial class AstTableoption5 : AstTableoption
        {
            
            private static string _ruleName1 = "tableoption";
            
            private AstCompressionMode _compressionMode;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstTableoption5(ParserRuleContext ctx, AstCompressionMode compressionMode, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _compressionMode = compressionMode;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCompressionMode CompressionMode
            {
                get
                {
                    return _compressionMode;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstTableoption6 : AstTableoption
        {
            
            private static string _ruleName1 = "tableoption";
            
            private AstOnOff _onOff;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstTableoption6(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        

        
        internal AstTableoption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableoption(Position p) : 
                base(p)
        {
        }
        
        internal AstTableoption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableoption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableoption.AstTableoption1(ctx, list.Get<AstTableOptVarname>(0), list.Get<AstTableOptVarValue>(1));
            }
            if ((index == 2))
            {
                return new AstTableoption.AstTableoption2(ctx, list.Get<AstTableoptionClusterMode>(0));
            }
            if ((index == 3))
            {
                return new AstTableoption.AstTableoption3(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 4))
            {
                return new AstTableoption.AstTableoption4(ctx, list.Get<AstTableDistribution>(0));
            }
            if ((index == 5))
            {
                return new AstTableoption.AstTableoption5(ctx, list.Get<AstCompressionMode>(0), list.Get<AstOnPartitions?>(1));
            }
            if ((index == 6))
            {
                return new AstTableoption.AstTableoption6(ctx, list.Get<AstOnOff>(0), list.Get<AstOnPartitions?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// tableoption : 
        ///    table_opt_varname EQUAL table_opt_var_value 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstTableOptVarname tableOptVarname, AstTableOptVarValue tableOptVarValue)
        {
            AstTableoption.AstTableoption1 result = new AstTableoption.AstTableoption1(ctx, tableOptVarname, tableOptVarValue);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    tableoption_cluster_mode 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstTableoptionClusterMode tableoptionClusterMode)
        {
            AstTableoption.AstTableoption2 result = new AstTableoption.AstTableoption2(ctx, tableoptionClusterMode);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTableoption.AstTableoption3 result = new AstTableoption.AstTableoption3(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    table_distribution 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstTableDistribution tableDistribution)
        {
            AstTableoption.AstTableoption4 result = new AstTableoption.AstTableoption4(ctx, tableDistribution);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    DATA_COMPRESSION EQUAL compression_mode on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstCompressionMode compressionMode, AstOnPartitions onPartitions)
        {
            AstTableoption.AstTableoption5 result = new AstTableoption.AstTableoption5(ctx, compressionMode, onPartitions);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstTableoption.AstTableoption6 result = new AstTableoption.AstTableoption6(ctx, onOff, onPartitions);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_varname
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    public abstract partial class AstTableOptVarname : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSimpleId), false, false, "simple_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstKeyword), false, false, "keyword"))));
        
        private static string _ruleValue = "simple_id\r\n | keyword\r\n";
        
        private static string _ruleName = "table_opt_varname";
        
        /// <summary>
        /// table_opt_varname : simple_id 
        /// </summary>
        public partial class AstTableOptVarname1 : AstTableOptVarname
        {
            
            private static string _ruleName1 = "table_opt_varname";
            
            private AstSimpleId _simpleId;
            
            internal AstTableOptVarname1(ParserRuleContext ctx, AstSimpleId simpleId) : 
                    base(ctx)
            {
                _simpleId = simpleId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSimpleId SimpleId
            {
                get
                {
                    return _simpleId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarname(this);
            }
        }
        /// <summary>
        /// table_opt_varname : keyword 
        /// </summary>
        public partial class AstTableOptVarname2 : AstTableOptVarname
        {
            
            private static string _ruleName1 = "table_opt_varname";
            
            private AstKeyword _keyword;
            
            internal AstTableOptVarname2(ParserRuleContext ctx, AstKeyword keyword) : 
                    base(ctx)
            {
                _keyword = keyword;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKeyword Keyword
            {
                get
                {
                    return _keyword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarname(this);
            }
        }
        

        
        internal AstTableOptVarname(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarname(Position p) : 
                base(p)
        {
        }
        
        internal AstTableOptVarname(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableOptVarname Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableOptVarname.AstTableOptVarname1(ctx, list.Get<AstSimpleId>(0));
            }
            if ((index == 2))
            {
                return new AstTableOptVarname.AstTableOptVarname2(ctx, list.Get<AstKeyword>(0));
            }
            return null;
        }
        
        /// <summary>
        /// table_opt_varname : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(ParserRuleContext ctx, AstSimpleId simpleId)
        {
            AstTableOptVarname.AstTableOptVarname1 result = new AstTableOptVarname.AstTableOptVarname1(ctx, simpleId);
            return result;
        }
        
        /// <summary>
        /// table_opt_varname : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(ParserRuleContext ctx, AstKeyword keyword)
        {
            AstTableOptVarname.AstTableOptVarname2 result = new AstTableOptVarname.AstTableOptVarname2(ctx, keyword);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_var_value
    /// 	 : simple_id
    /// 	 | keyword
    /// 	 | on_off
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstTableOptVarValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSimpleId), false, false, "simple_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstKeyword), false, false, "keyword")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "simple_id\r\n | keyword\r\n | on_off\r\n | decimal\r\n";
        
        private static string _ruleName = "table_opt_var_value";
        
        /// <summary>
        /// table_opt_var_value : simple_id 
        /// </summary>
        public partial class AstTableOptVarValue1 : AstTableOptVarValue
        {
            
            private static string _ruleName1 = "table_opt_var_value";
            
            private AstSimpleId _simpleId;
            
            internal AstTableOptVarValue1(ParserRuleContext ctx, AstSimpleId simpleId) : 
                    base(ctx)
            {
                _simpleId = simpleId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSimpleId SimpleId
            {
                get
                {
                    return _simpleId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        /// <summary>
        /// table_opt_var_value : keyword 
        /// </summary>
        public partial class AstTableOptVarValue2 : AstTableOptVarValue
        {
            
            private static string _ruleName1 = "table_opt_var_value";
            
            private AstKeyword _keyword;
            
            internal AstTableOptVarValue2(ParserRuleContext ctx, AstKeyword keyword) : 
                    base(ctx)
            {
                _keyword = keyword;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKeyword Keyword
            {
                get
                {
                    return _keyword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        /// <summary>
        /// table_opt_var_value : on_off 
        /// </summary>
        public partial class AstTableOptVarValue3 : AstTableOptVarValue
        {
            
            private static string _ruleName1 = "table_opt_var_value";
            
            private AstOnOff _onOff;
            
            internal AstTableOptVarValue3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        /// <summary>
        /// table_opt_var_value : decimal 
        /// </summary>
        public partial class AstTableOptVarValue4 : AstTableOptVarValue
        {
            
            private static string _ruleName1 = "table_opt_var_value";
            
            private AstDecimal _decimal;
            
            internal AstTableOptVarValue4(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        

        
        internal AstTableOptVarValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarValue(Position p) : 
                base(p)
        {
        }
        
        internal AstTableOptVarValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableOptVarValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableOptVarValue.AstTableOptVarValue1(ctx, list.Get<AstSimpleId>(0));
            }
            if ((index == 2))
            {
                return new AstTableOptVarValue.AstTableOptVarValue2(ctx, list.Get<AstKeyword>(0));
            }
            if ((index == 3))
            {
                return new AstTableOptVarValue.AstTableOptVarValue3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstTableOptVarValue.AstTableOptVarValue4(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstSimpleId simpleId)
        {
            AstTableOptVarValue.AstTableOptVarValue1 result = new AstTableOptVarValue.AstTableOptVarValue1(ctx, simpleId);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstKeyword keyword)
        {
            AstTableOptVarValue.AstTableOptVarValue2 result = new AstTableOptVarValue.AstTableOptVarValue2(ctx, keyword);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    on_off 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstTableOptVarValue.AstTableOptVarValue3 result = new AstTableOptVarValue.AstTableOptVarValue3(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    decimal 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTableOptVarValue.AstTableOptVarValue4 result = new AstTableOptVarValue.AstTableOptVarValue4(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// table_distribution
    /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
    /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// </summary>
    public abstract partial class AstTableDistribution : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameListWithOrder), false, false, "column_name_list_with_order"))));
        
        private static string _ruleValue = "DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET\r\n | CLUSTERED  INDEX  LR_B" +
            "RACKET  column_name_list_with_order  RR_BRACKET\r\n";
        
        private static string _ruleName = "table_distribution";
        
        /// <summary>
        /// table_distribution : DISTRIBUTION EQUAL HASH LR_BRACKET id_ RR_BRACKET 
        /// </summary>
        public partial class AstTableDistribution1 : AstTableDistribution
        {
            
            private static string _ruleName1 = "table_distribution";
            
            private AstId _id;
            
            internal AstTableDistribution1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableDistribution(this);
            }
        }
        /// <summary>
        /// table_distribution : CLUSTERED INDEX LR_BRACKET column_name_list_with_order RR_BRACKET 
        /// </summary>
        public partial class AstTableDistribution2 : AstTableDistribution
        {
            
            private static string _ruleName1 = "table_distribution";
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            internal AstTableDistribution2(ParserRuleContext ctx, AstColumnNameListWithOrder columnNameListWithOrder) : 
                    base(ctx)
            {
                _columnNameListWithOrder = columnNameListWithOrder;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableDistribution(this);
            }
        }
        

        
        internal AstTableDistribution(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableDistribution(Position p) : 
                base(p)
        {
        }
        
        internal AstTableDistribution(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableDistribution Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableDistribution.AstTableDistribution1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstTableDistribution.AstTableDistribution2(ctx, list.Get<AstColumnNameListWithOrder>(0));
            }
            return null;
        }
        
        /// <summary>
        /// table_distribution : 
        ///    DISTRIBUTION EQUAL HASH ( id_ ) 
        /// </summary>
        public static AstTableDistribution TableDistribution(ParserRuleContext ctx, AstId id)
        {
            AstTableDistribution.AstTableDistribution1 result = new AstTableDistribution.AstTableDistribution1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// table_distribution : 
        ///    CLUSTERED INDEX ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableDistribution TableDistribution(ParserRuleContext ctx, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            AstTableDistribution.AstTableDistribution2 result = new AstTableDistribution.AstTableDistribution2(ctx, columnNameListWithOrder);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  alter_table_constraint_foreign
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterTableConstraint : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAlterTableConstraintForeign), false, false, "alter_table_constraint_foreign")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"))));
        
        private static string _ruleValue = "(CONSTRAINT  constraint_id)?  alter_table_constraint_foreign\r\n | CHECK  LR_BRACKE" +
            "T  search_condition  RR_BRACKET\r\n";
        
        private static string _ruleName = "alter_table_constraint";
        
        /// <summary>
        /// alter_table_constraint : CONSTRAINT constraint_id alter_table_constraint_foreign 
        /// </summary>
        public partial class AstAlterTableConstraint1 : AstAlterTableConstraint
        {
            
            private static string _ruleName1 = "alter_table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstAlterTableConstraintForeign _alterTableConstraintForeign;
            
            internal AstAlterTableConstraint1(ParserRuleContext ctx, AstConstraintId constraintId, AstAlterTableConstraintForeign alterTableConstraintForeign) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _alterTableConstraintForeign = alterTableConstraintForeign;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstAlterTableConstraintForeign AlterTableConstraintForeign
            {
                get
                {
                    return _alterTableConstraintForeign;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableConstraint(this);
            }
        }
        /// <summary>
        /// alter_table_constraint : CHECK LR_BRACKET search_condition RR_BRACKET 
        /// </summary>
        public partial class AstAlterTableConstraint2 : AstAlterTableConstraint
        {
            
            private static string _ruleName1 = "alter_table_constraint";
            
            private AstSearchCondition _searchCondition;
            
            internal AstAlterTableConstraint2(ParserRuleContext ctx, AstSearchCondition searchCondition) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableConstraint(this);
            }
        }
        

        
        internal AstAlterTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterTableConstraint(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterTableConstraint Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterTableConstraint.AstAlterTableConstraint1(ctx, list.Get<AstConstraintId>(0), list.Get<AstAlterTableConstraintForeign>(1));
            }
            if ((index == 2))
            {
                return new AstAlterTableConstraint.AstAlterTableConstraint2(ctx, list.Get<AstSearchCondition>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_table_constraint : 
        ///    CONSTRAINT constraint_id alter_table_constraint_foreign 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstAlterTableConstraintForeign alterTableConstraintForeign)
        {
            AstAlterTableConstraint.AstAlterTableConstraint1 result = new AstAlterTableConstraint.AstAlterTableConstraint1(ctx, constraintId, alterTableConstraintForeign);
            return result;
        }
        
        /// <summary>
        /// alter_table_constraint : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(ParserRuleContext ctx, AstSearchCondition searchCondition)
        {
            AstAlterTableConstraint.AstAlterTableConstraint2 result = new AstAlterTableConstraint.AstAlterTableConstraint2(ctx, searchCondition);
            return result;
        }
    }
    
    /// <summary>
    /// constraint_delete_or_update
    /// 	 : on_delete
    /// 	 | on_update
    /// </summary>
    public abstract partial class AstConstraintDeleteOrUpdate : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnDelete), false, false, "on_delete")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnUpdate), false, false, "on_update"))));
        
        private static string _ruleValue = "on_delete\r\n | on_update\r\n";
        
        private static string _ruleName = "constraint_delete_or_update";
        
        /// <summary>
        /// constraint_delete_or_update : on_delete 
        /// </summary>
        public partial class AstConstraintDeleteOrUpdate1 : AstConstraintDeleteOrUpdate
        {
            
            private static string _ruleName1 = "constraint_delete_or_update";
            
            private AstOnDelete _onDelete;
            
            internal AstConstraintDeleteOrUpdate1(ParserRuleContext ctx, AstOnDelete onDelete) : 
                    base(ctx)
            {
                _onDelete = onDelete;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnDelete OnDelete
            {
                get
                {
                    return _onDelete;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstraintDeleteOrUpdate(this);
            }
        }
        /// <summary>
        /// constraint_delete_or_update : on_update 
        /// </summary>
        public partial class AstConstraintDeleteOrUpdate2 : AstConstraintDeleteOrUpdate
        {
            
            private static string _ruleName1 = "constraint_delete_or_update";
            
            private AstOnUpdate _onUpdate;
            
            internal AstConstraintDeleteOrUpdate2(ParserRuleContext ctx, AstOnUpdate onUpdate) : 
                    base(ctx)
            {
                _onUpdate = onUpdate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnUpdate OnUpdate
            {
                get
                {
                    return _onUpdate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstraintDeleteOrUpdate(this);
            }
        }
        

        
        internal AstConstraintDeleteOrUpdate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstraintDeleteOrUpdate(Position p) : 
                base(p)
        {
        }
        
        internal AstConstraintDeleteOrUpdate(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstConstraintDeleteOrUpdate Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1(ctx, list.Get<AstOnDelete>(0));
            }
            if ((index == 2))
            {
                return new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2(ctx, list.Get<AstOnUpdate>(0));
            }
            return null;
        }
        
        /// <summary>
        /// constraint_delete_or_update : 
        ///    on_delete 
        /// </summary>
        public static AstConstraintDeleteOrUpdate ConstraintDeleteOrUpdate(ParserRuleContext ctx, AstOnDelete onDelete)
        {
            AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1 result = new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1(ctx, onDelete);
            return result;
        }
        
        /// <summary>
        /// constraint_delete_or_update : 
        ///    on_update 
        /// </summary>
        public static AstConstraintDeleteOrUpdate ConstraintDeleteOrUpdate(ParserRuleContext ctx, AstOnUpdate onUpdate)
        {
            AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2 result = new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2(ctx, onUpdate);
            return result;
        }
    }
    
    /// <summary>
    /// switch_partition
    /// 	 : (PARTITION?  source_partition_number_expression = expression)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expression = expression)?  (WITH  low_priority_lock_wait)?
    /// </summary>
    public partial class AstSwitchPartition : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLowPriorityLockWait), false, false, "low_priority_lock_wait"))));
        
        private AstExpression _sourcePartitionNumberExpression;
        
        private AstFullTableRef _targetTable;
        
        private AstExpression _targetPartitionNumberExpression;
        
        private AstLowPriorityLockWait _lowPriorityLockWait;
        
        private static string _ruleValue = "(PARTITION?  source_partition_number_expression = expression)?  TO  target_table " +
            "= full_table_ref  (PARTITION  target_partition_number_expression = expression)? " +
            " (WITH  low_priority_lock_wait)?\r\n";
        
        private static string _ruleName = "switch_partition";
        
        internal AstSwitchPartition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSwitchPartition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSwitchPartition(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstSwitchPartition(ParserRuleContext ctx, AstExpression sourcePartitionNumberExpression, AstFullTableRef targetTable, AstExpression targetPartitionNumberExpression, AstLowPriorityLockWait lowPriorityLockWait) : 
                base(ctx)
        {
            _sourcePartitionNumberExpression = sourcePartitionNumberExpression;
            _targetTable = targetTable;
            _targetPartitionNumberExpression = targetPartitionNumberExpression;
            _lowPriorityLockWait = lowPriorityLockWait;
        }
        
        public virtual AstExpression SourcePartitionNumberExpression
        {
            get
            {
                return _sourcePartitionNumberExpression;
            }
        }
        
        public virtual AstFullTableRef TargetTable
        {
            get
            {
                return _targetTable;
            }
        }
        
        public virtual AstExpression TargetPartitionNumberExpression
        {
            get
            {
                return _targetPartitionNumberExpression;
            }
        }
        
        public virtual AstLowPriorityLockWait LowPriorityLockWait
        {
            get
            {
                return _lowPriorityLockWait;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchPartition(this);
        }
        
        public static AstSwitchPartition Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstSwitchPartition(ctx, list.Get<AstExpression>(0), list.Get<AstFullTableRef>(1), list.Get<AstExpression>(2), list.Get<AstLowPriorityLockWait>(3));
        }
        
        /// <summary>
        /// switch_partition : 
        ///    PARTITION? source_partition_number_expression=expression TO target_table=full_table_ref PARTITION target_partition_number_expression=expression WITH low_priority_lock_wait 
        /// </summary>
        public static AstSwitchPartition SwitchPartition(ParserRuleContext ctx, AstExpression sourcePartitionNumberExpression, AstFullTableRef targetTable, AstExpression targetPartitionNumberExpression, AstLowPriorityLockWait lowPriorityLockWait)
        {
            AstSwitchPartition result = new AstSwitchPartition(ctx, sourcePartitionNumberExpression, targetTable, targetPartitionNumberExpression, lowPriorityLockWait);
            return result;
        }
    }
    
    /// <summary>
    /// low_priority_lock_wait
    /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = timespan  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = abord_after_mode  RR_BRACKET
    /// </summary>
    public partial class AstLowPriorityLockWait : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTimespan), false, false, "timespan"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAbordAfterMode), false, false, "abord_after_mode"))));
        
        private AstTimespan _maxDuration;
        
        private AstAbordAfterMode _abortAfterWait;
        
        private static string _ruleValue = "WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = timespan  M" +
            "INUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = abord_after_mode  RR" +
            "_BRACKET\r\n";
        
        private static string _ruleName = "low_priority_lock_wait";
        
        internal AstLowPriorityLockWait(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLowPriorityLockWait(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstLowPriorityLockWait(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstLowPriorityLockWait(ParserRuleContext ctx, AstTimespan maxDuration, AstAbordAfterMode abortAfterWait) : 
                base(ctx)
        {
            _maxDuration = maxDuration;
            _abortAfterWait = abortAfterWait;
        }
        
        public virtual AstTimespan MaxDuration
        {
            get
            {
                return _maxDuration;
            }
        }
        
        public virtual AstAbordAfterMode AbortAfterWait
        {
            get
            {
                return _abortAfterWait;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLowPriorityLockWait(this);
        }
        
        public static AstLowPriorityLockWait Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstLowPriorityLockWait(ctx, list.Get<AstTimespan>(0), list.Get<AstAbordAfterMode>(1));
        }
        
        /// <summary>
        /// low_priority_lock_wait : 
        ///    WAIT_AT_LOW_PRIORITY ( MAX_DURATION EQUAL max_duration=timespan MINUTES? , ABORT_AFTER_WAIT EQUAL abort_after_wait=abord_after_mode ) 
        /// </summary>
        public static AstLowPriorityLockWait LowPriorityLockWait(ParserRuleContext ctx, AstTimespan maxDuration, AstAbordAfterMode abortAfterWait)
        {
            AstLowPriorityLockWait result = new AstLowPriorityLockWait(ctx, maxDuration, abortAfterWait);
            return result;
        }
    }
    
    /// <summary>
    /// alter_database_new_infos
    /// 	 : MODIFY  NAME  EQUAL  database_id
    /// 	 | COLLATE  collation_id
    /// 	 | SET  database_optionspec  (WITH  termination)?
    /// 	 | add_or_modify_files
    /// 	 | add_or_modify_filegroups
    /// </summary>
    public abstract partial class AstAlterDatabaseNewInfos : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseOptionspec), false, false, "database_optionspec"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTermination), false, false, "termination")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseId), false, false, "database_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCollationId), false, false, "collation_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstAddOrModifyFiles), false, false, "add_or_modify_files")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstAddOrModifyFilegroups), false, false, "add_or_modify_filegroups"))));
        
        private static string _ruleValue = "MODIFY  NAME  EQUAL  database_id\r\n | COLLATE  collation_id\r\n | SET  database_opti" +
            "onspec  (WITH  termination)?\r\n | add_or_modify_files\r\n | add_or_modify_filegroup" +
            "s\r\n";
        
        private static string _ruleName = "alter_database_new_infos";
        
        /// <summary>
        /// alter_database_new_infos : MODIFY NAME EQUAL database_id 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos1 : AstAlterDatabaseNewInfos
        {
            
            private static string _ruleName1 = "alter_database_new_infos";
            
            private AstDatabaseId _databaseId;
            
            internal AstAlterDatabaseNewInfos1(ParserRuleContext ctx, AstDatabaseId databaseId) : 
                    base(ctx)
            {
                _databaseId = databaseId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatabaseId DatabaseId
            {
                get
                {
                    return _databaseId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : COLLATE collation_id 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos2 : AstAlterDatabaseNewInfos
        {
            
            private static string _ruleName1 = "alter_database_new_infos";
            
            private AstCollationId _collationId;
            
            internal AstAlterDatabaseNewInfos2(ParserRuleContext ctx, AstCollationId collationId) : 
                    base(ctx)
            {
                _collationId = collationId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCollationId CollationId
            {
                get
                {
                    return _collationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : SET database_optionspec WITH termination 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos3 : AstAlterDatabaseNewInfos
        {
            
            private static string _ruleName1 = "alter_database_new_infos";
            
            private AstDatabaseOptionspec _databaseOptionspec;
            
            private AstTermination _termination;
            
            internal AstAlterDatabaseNewInfos3(ParserRuleContext ctx, AstDatabaseOptionspec databaseOptionspec, AstTermination termination) : 
                    base(ctx)
            {
                _databaseOptionspec = databaseOptionspec;
                _termination = termination;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatabaseOptionspec DatabaseOptionspec
            {
                get
                {
                    return _databaseOptionspec;
                }
            }
            
            public virtual AstTermination Termination
            {
                get
                {
                    return _termination;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : add_or_modify_files 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos4 : AstAlterDatabaseNewInfos
        {
            
            private static string _ruleName1 = "alter_database_new_infos";
            
            private AstAddOrModifyFiles _addOrModifyFiles;
            
            internal AstAlterDatabaseNewInfos4(ParserRuleContext ctx, AstAddOrModifyFiles addOrModifyFiles) : 
                    base(ctx)
            {
                _addOrModifyFiles = addOrModifyFiles;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAddOrModifyFiles AddOrModifyFiles
            {
                get
                {
                    return _addOrModifyFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : add_or_modify_filegroups 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos5 : AstAlterDatabaseNewInfos
        {
            
            private static string _ruleName1 = "alter_database_new_infos";
            
            private AstAddOrModifyFilegroups _addOrModifyFilegroups;
            
            internal AstAlterDatabaseNewInfos5(ParserRuleContext ctx, AstAddOrModifyFilegroups addOrModifyFilegroups) : 
                    base(ctx)
            {
                _addOrModifyFilegroups = addOrModifyFilegroups;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAddOrModifyFilegroups AddOrModifyFilegroups
            {
                get
                {
                    return _addOrModifyFilegroups;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        

        
        internal AstAlterDatabaseNewInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterDatabaseNewInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterDatabaseNewInfos(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterDatabaseNewInfos Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1(ctx, list.Get<AstDatabaseId>(0));
            }
            if ((index == 2))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2(ctx, list.Get<AstCollationId>(0));
            }
            if ((index == 3))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3(ctx, list.Get<AstDatabaseOptionspec>(0), list.Get<AstTermination>(1));
            }
            if ((index == 4))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4(ctx, list.Get<AstAddOrModifyFiles>(0));
            }
            if ((index == 5))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5(ctx, list.Get<AstAddOrModifyFilegroups>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    MODIFY NAME EQUAL database_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstDatabaseId databaseId)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1(ctx, databaseId);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstCollationId collationId)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2(ctx, collationId);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    SET database_optionspec WITH termination 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstDatabaseOptionspec databaseOptionspec, AstTermination termination)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3(ctx, databaseOptionspec, termination);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    add_or_modify_files 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstAddOrModifyFiles addOrModifyFiles)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4(ctx, addOrModifyFiles);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    add_or_modify_filegroups 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstAddOrModifyFilegroups addOrModifyFilegroups)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5(ctx, addOrModifyFilegroups);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_files
    /// 	 : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?
    /// 	 | ADD  LOG  FILE  filespecs
    /// 	 | REMOVE  FILE  file_group_id
    /// 	 | MODIFY  FILE  filespec
    /// </summary>
    public abstract partial class AstAddOrModifyFiles : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFilespecs), false, false, "filespecs"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroupId), false, false, "file_group_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFilespecs), false, false, "filespecs")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroupId), false, false, "file_group_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstFilespec), false, false, "filespec"))));
        
        private static string _ruleValue = "ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?\r\n | ADD  LOG  FILE  filespe" +
            "cs\r\n | REMOVE  FILE  file_group_id\r\n | MODIFY  FILE  filespec\r\n";
        
        private static string _ruleName = "add_or_modify_files";
        
        /// <summary>
        /// add_or_modify_files : ADD FILE filespecs TO FILEGROUP file_group_id 
        /// </summary>
        public partial class AstAddOrModifyFiles1 : AstAddOrModifyFiles
        {
            
            private static string _ruleName1 = "add_or_modify_files";
            
            private AstFilespecs _filespecs;
            
            private AstFileGroupId _fileGroupId;
            
            internal AstAddOrModifyFiles1(ParserRuleContext ctx, AstFilespecs filespecs, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _filespecs = filespecs;
                _fileGroupId = fileGroupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFilespecs Filespecs
            {
                get
                {
                    return _filespecs;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : ADD LOG FILE filespecs 
        /// </summary>
        public partial class AstAddOrModifyFiles2 : AstAddOrModifyFiles
        {
            
            private static string _ruleName1 = "add_or_modify_files";
            
            private AstFilespecs _filespecs;
            
            internal AstAddOrModifyFiles2(ParserRuleContext ctx, AstFilespecs filespecs) : 
                    base(ctx)
            {
                _filespecs = filespecs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFilespecs Filespecs
            {
                get
                {
                    return _filespecs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : REMOVE FILE file_group_id 
        /// </summary>
        public partial class AstAddOrModifyFiles3 : AstAddOrModifyFiles
        {
            
            private static string _ruleName1 = "add_or_modify_files";
            
            private AstFileGroupId _fileGroupId;
            
            internal AstAddOrModifyFiles3(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : MODIFY FILE filespec 
        /// </summary>
        public partial class AstAddOrModifyFiles4 : AstAddOrModifyFiles
        {
            
            private static string _ruleName1 = "add_or_modify_files";
            
            private AstFilespec _filespec;
            
            internal AstAddOrModifyFiles4(ParserRuleContext ctx, AstFilespec filespec) : 
                    base(ctx)
            {
                _filespec = filespec;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFilespec Filespec
            {
                get
                {
                    return _filespec;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        

        
        internal AstAddOrModifyFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFiles(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAddOrModifyFiles Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles1(ctx, list.Get<AstFilespecs>(0), list.Get<AstFileGroupId>(1));
            }
            if ((index == 2))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles2(ctx, list.Get<AstFilespecs>(0));
            }
            if ((index == 3))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles3(ctx, list.Get<AstFileGroupId>(0));
            }
            if ((index == 4))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles4(ctx, list.Get<AstFilespec>(0));
            }
            return null;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    ADD FILE filespecs TO FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFilespecs filespecs, AstFileGroupId fileGroupId)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles1 result = new AstAddOrModifyFiles.AstAddOrModifyFiles1(ctx, filespecs, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    ADD LOG FILE filespecs 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFilespecs filespecs)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles2 result = new AstAddOrModifyFiles.AstAddOrModifyFiles2(ctx, filespecs);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    REMOVE FILE file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles3 result = new AstAddOrModifyFiles.AstAddOrModifyFiles3(ctx, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    MODIFY FILE filespec 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFilespec filespec)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles4 result = new AstAddOrModifyFiles.AstAddOrModifyFiles4(ctx, filespec);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_filegroups
    /// 	 : ADD  FILEGROUP  file_group_id  filegroup_predicate?
    /// 	 | REMOVE  FILEGROUP  file_group_id
    /// 	 | MODIFY  FILEGROUP  file_group_id  modify_filegroups_options
    /// </summary>
    public abstract partial class AstAddOrModifyFilegroups : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroupId), false, false, "file_group_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFilegroupPredicate), true, false, "filegroup_predicate")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroupId), false, false, "file_group_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstModifyFilegroupsOptions), false, false, "modify_filegroups_options")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroupId), false, false, "file_group_id"))));
        
        private static string _ruleValue = "ADD  FILEGROUP  file_group_id  filegroup_predicate?\r\n | REMOVE  FILEGROUP  file_g" +
            "roup_id\r\n | MODIFY  FILEGROUP  file_group_id  modify_filegroups_options\r\n";
        
        private static string _ruleName = "add_or_modify_filegroups";
        
        /// <summary>
        /// add_or_modify_filegroups : ADD FILEGROUP file_group_id filegroup_predicate? 
        /// </summary>
        public partial class AstAddOrModifyFilegroups1 : AstAddOrModifyFilegroups
        {
            
            private static string _ruleName1 = "add_or_modify_filegroups";
            
            private AstFileGroupId _fileGroupId;
            
            private AstFilegroupPredicate? _filegroupPredicate;
            
            internal AstAddOrModifyFilegroups1(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstFilegroupPredicate? filegroupPredicate) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
                _filegroupPredicate = filegroupPredicate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public virtual AstFilegroupPredicate? FilegroupPredicate
            {
                get
                {
                    return _filegroupPredicate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        /// <summary>
        /// add_or_modify_filegroups : REMOVE FILEGROUP file_group_id 
        /// </summary>
        public partial class AstAddOrModifyFilegroups2 : AstAddOrModifyFilegroups
        {
            
            private static string _ruleName1 = "add_or_modify_filegroups";
            
            private AstFileGroupId _fileGroupId;
            
            internal AstAddOrModifyFilegroups2(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        /// <summary>
        /// add_or_modify_filegroups : MODIFY FILEGROUP file_group_id modify_filegroups_options 
        /// </summary>
        public partial class AstAddOrModifyFilegroups3 : AstAddOrModifyFilegroups
        {
            
            private static string _ruleName1 = "add_or_modify_filegroups";
            
            private AstFileGroupId _fileGroupId;
            
            private AstModifyFilegroupsOptions _modifyFilegroupsOptions;
            
            internal AstAddOrModifyFilegroups3(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstModifyFilegroupsOptions modifyFilegroupsOptions) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
                _modifyFilegroupsOptions = modifyFilegroupsOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public virtual AstModifyFilegroupsOptions ModifyFilegroupsOptions
            {
                get
                {
                    return _modifyFilegroupsOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        

        
        internal AstAddOrModifyFilegroups(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFilegroups(Position p) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFilegroups(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAddOrModifyFilegroups Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1(ctx, list.Get<AstFileGroupId>(0), list.Get<AstFilegroupPredicate?>(1));
            }
            if ((index == 2))
            {
                return new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2(ctx, list.Get<AstFileGroupId>(0));
            }
            if ((index == 3))
            {
                return new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3(ctx, list.Get<AstFileGroupId>(0), list.Get<AstModifyFilegroupsOptions>(1));
            }
            return null;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    ADD FILEGROUP file_group_id filegroup_predicate? 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstFilegroupPredicate filegroupPredicate)
        {
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1(ctx, fileGroupId, filegroupPredicate);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    REMOVE FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2(ctx, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    MODIFY FILEGROUP file_group_id modify_filegroups_options 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstModifyFilegroupsOptions modifyFilegroupsOptions)
        {
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3(ctx, fileGroupId, modifyFilegroupsOptions);
            return result;
        }
    }
    
    /// <summary>
    /// modify_filegroups_options
    /// 	 : filegroup_updatability_option
    /// 	 | DEFAULT
    /// 	 | NAME  EQUAL  file_group_id
    /// 	 | AUTOGROW_SINGLE_FILE
    /// 	 | AUTOGROW_ALL_FILES
    /// </summary>
    public abstract partial class AstModifyFilegroupsOptions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFilegroupUpdatabilityOption), false, false, "filegroup_updatability_option")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroupId), false, false, "file_group_id"))));
        
        private static string _ruleValue = "filegroup_updatability_option\r\n | DEFAULT\r\n | NAME  EQUAL  file_group_id\r\n | AUTO" +
            "GROW_SINGLE_FILE\r\n | AUTOGROW_ALL_FILES\r\n";
        
        private static string _ruleName = "modify_filegroups_options";
        
        /// <summary>
        /// modify_filegroups_options : filegroup_updatability_option 
        /// </summary>
        public partial class AstModifyFilegroupsOptions1 : AstModifyFilegroupsOptions
        {
            
            private static string _ruleName1 = "modify_filegroups_options";
            
            private AstFilegroupUpdatabilityOption _filegroupUpdatabilityOption;
            
            internal AstModifyFilegroupsOptions1(ParserRuleContext ctx, AstFilegroupUpdatabilityOption filegroupUpdatabilityOption) : 
                    base(ctx)
            {
                _filegroupUpdatabilityOption = filegroupUpdatabilityOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFilegroupUpdatabilityOption FilegroupUpdatabilityOption
            {
                get
                {
                    return _filegroupUpdatabilityOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : DEFAULT 
        /// </summary>
        public partial class AstModifyFilegroupsOptions2 : AstModifyFilegroupsOptions
        {
            
            private static string _ruleName1 = "modify_filegroups_options";
            
            internal AstModifyFilegroupsOptions2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : NAME EQUAL file_group_id 
        /// </summary>
        public partial class AstModifyFilegroupsOptions3 : AstModifyFilegroupsOptions
        {
            
            private static string _ruleName1 = "modify_filegroups_options";
            
            private AstFileGroupId _fileGroupId;
            
            internal AstModifyFilegroupsOptions3(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : AUTOGROW_SINGLE_FILE 
        /// </summary>
        public partial class AstModifyFilegroupsOptions4 : AstModifyFilegroupsOptions
        {
            
            private static string _ruleName1 = "modify_filegroups_options";
            
            internal AstModifyFilegroupsOptions4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : AUTOGROW_ALL_FILES 
        /// </summary>
        public partial class AstModifyFilegroupsOptions5 : AstModifyFilegroupsOptions
        {
            
            private static string _ruleName1 = "modify_filegroups_options";
            
            internal AstModifyFilegroupsOptions5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        

        
        internal AstModifyFilegroupsOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstModifyFilegroupsOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstModifyFilegroupsOptions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstModifyFilegroupsOptions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions1(ctx, list.Get<AstFilegroupUpdatabilityOption>(0));
            }
            if ((index == 2))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions2(ctx);
            }
            if ((index == 3))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions3(ctx, list.Get<AstFileGroupId>(0));
            }
            if ((index == 4))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions4(ctx);
            }
            if ((index == 5))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions5(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// modify_filegroups_options : 
        ///    filegroup_updatability_option 
        /// </summary>
        public static AstModifyFilegroupsOptions ModifyFilegroupsOptions(ParserRuleContext ctx, AstFilegroupUpdatabilityOption filegroupUpdatabilityOption)
        {
            AstModifyFilegroupsOptions.AstModifyFilegroupsOptions1 result = new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions1(ctx, filegroupUpdatabilityOption);
            return result;
        }
        
        /// <summary>
        /// modify_filegroups_options : 
        ///    DEFAULT 
        /// </summary>
        public static AstModifyFilegroupsOptions ModifyFilegroupsOptions(ParserRuleContext ctx)
        {
            AstModifyFilegroupsOptions.AstModifyFilegroupsOptions2 result = new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions2(ctx);
            return result;
        }
        
        /// <summary>
        /// modify_filegroups_options : 
        ///    NAME EQUAL file_group_id 
        /// </summary>
        public static AstModifyFilegroupsOptions ModifyFilegroupsOptions(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstModifyFilegroupsOptions.AstModifyFilegroupsOptions3 result = new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions3(ctx, fileGroupId);
            return result;
        }
    }
    
    /// <summary>
    /// database_optionspec
    /// 	 : auto_option
    /// 	 | change_tracking_set
    /// 	 | containment_option
    /// 	 | cursor_option
    /// 	 | database_mirroring_option
    /// 	 | date_correlation_optimization_option
    /// 	 | db_encryption_option
    /// 	 | db_state_option
    /// 	 | db_update_option
    /// 	 | db_user_access_option
    /// 	 | delayed_durability_option
    /// 	 | external_access_option
    /// 	 | database_filestream
    /// 	 | hadr_options
    /// 	 | mixed_page_allocation_option
    /// 	 | parameterization_option
    /// 	 | recovery_option
    /// 	 | service_broker_option
    /// 	 | snapshot_option
    /// 	 | sql_option
    /// 	 | target_recovery_time_option
    /// 	 | termination
    /// </summary>
    public abstract partial class AstDatabaseOptionspec : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAutoOption), false, false, "auto_option")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstChangeTrackingSet), false, false, "change_tracking_set")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstContainmentOption), false, false, "containment_option")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstCursorOption), false, false, "cursor_option")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseMirroringOption), false, false, "database_mirroring_option")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstDateCorrelationOptimizationOption), false, false, "date_correlation_optimization_option")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbEncryptionOption), false, false, "db_encryption_option")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbStateOption), false, false, "db_state_option")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbUpdateOption), false, false, "db_update_option")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbUserAccessOption), false, false, "db_user_access_option")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstDelayedDurabilityOption), false, false, "delayed_durability_option")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstExternalAccessOption), false, false, "external_access_option")), new Bb.Asts.AstRuleMatcherItems(13, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseFilestream), false, false, "database_filestream")), new Bb.Asts.AstRuleMatcherItems(14, new Bb.Asts.AstRuleMatcherItem(typeof(AstHadrOptions), false, false, "hadr_options")), new Bb.Asts.AstRuleMatcherItems(15, new Bb.Asts.AstRuleMatcherItem(typeof(AstMixedPageAllocationOption), false, false, "mixed_page_allocation_option")), new Bb.Asts.AstRuleMatcherItems(16, new Bb.Asts.AstRuleMatcherItem(typeof(AstParameterizationOption), false, false, "parameterization_option")), new Bb.Asts.AstRuleMatcherItems(17, new Bb.Asts.AstRuleMatcherItem(typeof(AstRecoveryOption), false, false, "recovery_option")), new Bb.Asts.AstRuleMatcherItems(18, new Bb.Asts.AstRuleMatcherItem(typeof(AstServiceBrokerOption), false, false, "service_broker_option")), new Bb.Asts.AstRuleMatcherItems(19, new Bb.Asts.AstRuleMatcherItem(typeof(AstSnapshotOption), false, false, "snapshot_option")), new Bb.Asts.AstRuleMatcherItems(20, new Bb.Asts.AstRuleMatcherItem(typeof(AstSqlOption), false, false, "sql_option")), new Bb.Asts.AstRuleMatcherItems(21, new Bb.Asts.AstRuleMatcherItem(typeof(AstTargetRecoveryTimeOption), false, false, "target_recovery_time_option")), new Bb.Asts.AstRuleMatcherItems(22, new Bb.Asts.AstRuleMatcherItem(typeof(AstTermination), false, false, "termination"))));
        
        private static string _ruleValue = @"auto_option
 | change_tracking_set
 | containment_option
 | cursor_option
 | database_mirroring_option
 | date_correlation_optimization_option
 | db_encryption_option
 | db_state_option
 | db_update_option
 | db_user_access_option
 | delayed_durability_option
 | external_access_option
 | database_filestream
 | hadr_options
 | mixed_page_allocation_option
 | parameterization_option
 | recovery_option
 | service_broker_option
 | snapshot_option
 | sql_option
 | target_recovery_time_option
 | termination
";
        
        private static string _ruleName = "database_optionspec";
        
        /// <summary>
        /// database_optionspec : auto_option 
        /// </summary>
        public partial class AstDatabaseOptionspec1 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstAutoOption _autoOption;
            
            internal AstDatabaseOptionspec1(ParserRuleContext ctx, AstAutoOption autoOption) : 
                    base(ctx)
            {
                _autoOption = autoOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAutoOption AutoOption
            {
                get
                {
                    return _autoOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : change_tracking_set 
        /// </summary>
        public partial class AstDatabaseOptionspec2 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstChangeTrackingSet _changeTrackingSet;
            
            internal AstDatabaseOptionspec2(ParserRuleContext ctx, AstChangeTrackingSet changeTrackingSet) : 
                    base(ctx)
            {
                _changeTrackingSet = changeTrackingSet;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstChangeTrackingSet ChangeTrackingSet
            {
                get
                {
                    return _changeTrackingSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : containment_option 
        /// </summary>
        public partial class AstDatabaseOptionspec3 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstContainmentOption _containmentOption;
            
            internal AstDatabaseOptionspec3(ParserRuleContext ctx, AstContainmentOption containmentOption) : 
                    base(ctx)
            {
                _containmentOption = containmentOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstContainmentOption ContainmentOption
            {
                get
                {
                    return _containmentOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : cursor_option 
        /// </summary>
        public partial class AstDatabaseOptionspec4 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstCursorOption _cursorOption;
            
            internal AstDatabaseOptionspec4(ParserRuleContext ctx, AstCursorOption cursorOption) : 
                    base(ctx)
            {
                _cursorOption = cursorOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCursorOption CursorOption
            {
                get
                {
                    return _cursorOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : database_mirroring_option 
        /// </summary>
        public partial class AstDatabaseOptionspec5 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDatabaseMirroringOption _databaseMirroringOption;
            
            internal AstDatabaseOptionspec5(ParserRuleContext ctx, AstDatabaseMirroringOption databaseMirroringOption) : 
                    base(ctx)
            {
                _databaseMirroringOption = databaseMirroringOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatabaseMirroringOption DatabaseMirroringOption
            {
                get
                {
                    return _databaseMirroringOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : date_correlation_optimization_option 
        /// </summary>
        public partial class AstDatabaseOptionspec6 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDateCorrelationOptimizationOption _dateCorrelationOptimizationOption;
            
            internal AstDatabaseOptionspec6(ParserRuleContext ctx, AstDateCorrelationOptimizationOption dateCorrelationOptimizationOption) : 
                    base(ctx)
            {
                _dateCorrelationOptimizationOption = dateCorrelationOptimizationOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDateCorrelationOptimizationOption DateCorrelationOptimizationOption
            {
                get
                {
                    return _dateCorrelationOptimizationOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_encryption_option 
        /// </summary>
        public partial class AstDatabaseOptionspec7 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDbEncryptionOption _dbEncryptionOption;
            
            internal AstDatabaseOptionspec7(ParserRuleContext ctx, AstDbEncryptionOption dbEncryptionOption) : 
                    base(ctx)
            {
                _dbEncryptionOption = dbEncryptionOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDbEncryptionOption DbEncryptionOption
            {
                get
                {
                    return _dbEncryptionOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_state_option 
        /// </summary>
        public partial class AstDatabaseOptionspec8 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDbStateOption _dbStateOption;
            
            internal AstDatabaseOptionspec8(ParserRuleContext ctx, AstDbStateOption dbStateOption) : 
                    base(ctx)
            {
                _dbStateOption = dbStateOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDbStateOption DbStateOption
            {
                get
                {
                    return _dbStateOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_update_option 
        /// </summary>
        public partial class AstDatabaseOptionspec9 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDbUpdateOption _dbUpdateOption;
            
            internal AstDatabaseOptionspec9(ParserRuleContext ctx, AstDbUpdateOption dbUpdateOption) : 
                    base(ctx)
            {
                _dbUpdateOption = dbUpdateOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDbUpdateOption DbUpdateOption
            {
                get
                {
                    return _dbUpdateOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_user_access_option 
        /// </summary>
        public partial class AstDatabaseOptionspec10 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDbUserAccessOption _dbUserAccessOption;
            
            internal AstDatabaseOptionspec10(ParserRuleContext ctx, AstDbUserAccessOption dbUserAccessOption) : 
                    base(ctx)
            {
                _dbUserAccessOption = dbUserAccessOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDbUserAccessOption DbUserAccessOption
            {
                get
                {
                    return _dbUserAccessOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : delayed_durability_option 
        /// </summary>
        public partial class AstDatabaseOptionspec11 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDelayedDurabilityOption _delayedDurabilityOption;
            
            internal AstDatabaseOptionspec11(ParserRuleContext ctx, AstDelayedDurabilityOption delayedDurabilityOption) : 
                    base(ctx)
            {
                _delayedDurabilityOption = delayedDurabilityOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDelayedDurabilityOption DelayedDurabilityOption
            {
                get
                {
                    return _delayedDurabilityOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : external_access_option 
        /// </summary>
        public partial class AstDatabaseOptionspec12 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstExternalAccessOption _externalAccessOption;
            
            internal AstDatabaseOptionspec12(ParserRuleContext ctx, AstExternalAccessOption externalAccessOption) : 
                    base(ctx)
            {
                _externalAccessOption = externalAccessOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExternalAccessOption ExternalAccessOption
            {
                get
                {
                    return _externalAccessOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : database_filestream 
        /// </summary>
        public partial class AstDatabaseOptionspec13 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstDatabaseFilestream _databaseFilestream;
            
            internal AstDatabaseOptionspec13(ParserRuleContext ctx, AstDatabaseFilestream databaseFilestream) : 
                    base(ctx)
            {
                _databaseFilestream = databaseFilestream;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatabaseFilestream DatabaseFilestream
            {
                get
                {
                    return _databaseFilestream;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : hadr_options 
        /// </summary>
        public partial class AstDatabaseOptionspec14 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstHadrOptions _hadrOptions;
            
            internal AstDatabaseOptionspec14(ParserRuleContext ctx, AstHadrOptions hadrOptions) : 
                    base(ctx)
            {
                _hadrOptions = hadrOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstHadrOptions HadrOptions
            {
                get
                {
                    return _hadrOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : mixed_page_allocation_option 
        /// </summary>
        public partial class AstDatabaseOptionspec15 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstMixedPageAllocationOption _mixedPageAllocationOption;
            
            internal AstDatabaseOptionspec15(ParserRuleContext ctx, AstMixedPageAllocationOption mixedPageAllocationOption) : 
                    base(ctx)
            {
                _mixedPageAllocationOption = mixedPageAllocationOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMixedPageAllocationOption MixedPageAllocationOption
            {
                get
                {
                    return _mixedPageAllocationOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : parameterization_option 
        /// </summary>
        public partial class AstDatabaseOptionspec16 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstParameterizationOption _parameterizationOption;
            
            internal AstDatabaseOptionspec16(ParserRuleContext ctx, AstParameterizationOption parameterizationOption) : 
                    base(ctx)
            {
                _parameterizationOption = parameterizationOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstParameterizationOption ParameterizationOption
            {
                get
                {
                    return _parameterizationOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : recovery_option 
        /// </summary>
        public partial class AstDatabaseOptionspec17 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstRecoveryOption _recoveryOption;
            
            internal AstDatabaseOptionspec17(ParserRuleContext ctx, AstRecoveryOption recoveryOption) : 
                    base(ctx)
            {
                _recoveryOption = recoveryOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRecoveryOption RecoveryOption
            {
                get
                {
                    return _recoveryOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : service_broker_option 
        /// </summary>
        public partial class AstDatabaseOptionspec18 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstServiceBrokerOption _serviceBrokerOption;
            
            internal AstDatabaseOptionspec18(ParserRuleContext ctx, AstServiceBrokerOption serviceBrokerOption) : 
                    base(ctx)
            {
                _serviceBrokerOption = serviceBrokerOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstServiceBrokerOption ServiceBrokerOption
            {
                get
                {
                    return _serviceBrokerOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : snapshot_option 
        /// </summary>
        public partial class AstDatabaseOptionspec19 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstSnapshotOption _snapshotOption;
            
            internal AstDatabaseOptionspec19(ParserRuleContext ctx, AstSnapshotOption snapshotOption) : 
                    base(ctx)
            {
                _snapshotOption = snapshotOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSnapshotOption SnapshotOption
            {
                get
                {
                    return _snapshotOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : sql_option 
        /// </summary>
        public partial class AstDatabaseOptionspec20 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstSqlOption _sqlOption;
            
            internal AstDatabaseOptionspec20(ParserRuleContext ctx, AstSqlOption sqlOption) : 
                    base(ctx)
            {
                _sqlOption = sqlOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSqlOption SqlOption
            {
                get
                {
                    return _sqlOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : target_recovery_time_option 
        /// </summary>
        public partial class AstDatabaseOptionspec21 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstTargetRecoveryTimeOption _targetRecoveryTimeOption;
            
            internal AstDatabaseOptionspec21(ParserRuleContext ctx, AstTargetRecoveryTimeOption targetRecoveryTimeOption) : 
                    base(ctx)
            {
                _targetRecoveryTimeOption = targetRecoveryTimeOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTargetRecoveryTimeOption TargetRecoveryTimeOption
            {
                get
                {
                    return _targetRecoveryTimeOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : termination 
        /// </summary>
        public partial class AstDatabaseOptionspec22 : AstDatabaseOptionspec
        {
            
            private static string _ruleName1 = "database_optionspec";
            
            private AstTermination _termination;
            
            internal AstDatabaseOptionspec22(ParserRuleContext ctx, AstTermination termination) : 
                    base(ctx)
            {
                _termination = termination;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTermination Termination
            {
                get
                {
                    return _termination;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        

        
        internal AstDatabaseOptionspec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseOptionspec(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseOptionspec(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDatabaseOptionspec Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec1(ctx, list.Get<AstAutoOption>(0));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec2(ctx, list.Get<AstChangeTrackingSet>(0));
            }
            if ((index == 3))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec3(ctx, list.Get<AstContainmentOption>(0));
            }
            if ((index == 4))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec4(ctx, list.Get<AstCursorOption>(0));
            }
            if ((index == 5))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec5(ctx, list.Get<AstDatabaseMirroringOption>(0));
            }
            if ((index == 6))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec6(ctx, list.Get<AstDateCorrelationOptimizationOption>(0));
            }
            if ((index == 7))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec7(ctx, list.Get<AstDbEncryptionOption>(0));
            }
            if ((index == 8))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec8(ctx, list.Get<AstDbStateOption>(0));
            }
            if ((index == 9))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec9(ctx, list.Get<AstDbUpdateOption>(0));
            }
            if ((index == 10))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec10(ctx, list.Get<AstDbUserAccessOption>(0));
            }
            if ((index == 11))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec11(ctx, list.Get<AstDelayedDurabilityOption>(0));
            }
            if ((index == 12))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec12(ctx, list.Get<AstExternalAccessOption>(0));
            }
            if ((index == 13))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec13(ctx, list.Get<AstDatabaseFilestream>(0));
            }
            if ((index == 14))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec14(ctx, list.Get<AstHadrOptions>(0));
            }
            if ((index == 15))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec15(ctx, list.Get<AstMixedPageAllocationOption>(0));
            }
            if ((index == 16))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec16(ctx, list.Get<AstParameterizationOption>(0));
            }
            if ((index == 17))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec17(ctx, list.Get<AstRecoveryOption>(0));
            }
            if ((index == 18))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec18(ctx, list.Get<AstServiceBrokerOption>(0));
            }
            if ((index == 19))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec19(ctx, list.Get<AstSnapshotOption>(0));
            }
            if ((index == 20))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec20(ctx, list.Get<AstSqlOption>(0));
            }
            if ((index == 21))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec21(ctx, list.Get<AstTargetRecoveryTimeOption>(0));
            }
            if ((index == 22))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec22(ctx, list.Get<AstTermination>(0));
            }
            return null;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    auto_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstAutoOption autoOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec1 result = new AstDatabaseOptionspec.AstDatabaseOptionspec1(ctx, autoOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    change_tracking_set 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstChangeTrackingSet changeTrackingSet)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec2 result = new AstDatabaseOptionspec.AstDatabaseOptionspec2(ctx, changeTrackingSet);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    containment_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstContainmentOption containmentOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec3 result = new AstDatabaseOptionspec.AstDatabaseOptionspec3(ctx, containmentOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    cursor_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstCursorOption cursorOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec4 result = new AstDatabaseOptionspec.AstDatabaseOptionspec4(ctx, cursorOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    database_mirroring_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDatabaseMirroringOption databaseMirroringOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec5 result = new AstDatabaseOptionspec.AstDatabaseOptionspec5(ctx, databaseMirroringOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    date_correlation_optimization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDateCorrelationOptimizationOption dateCorrelationOptimizationOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec6 result = new AstDatabaseOptionspec.AstDatabaseOptionspec6(ctx, dateCorrelationOptimizationOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_encryption_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbEncryptionOption dbEncryptionOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec7 result = new AstDatabaseOptionspec.AstDatabaseOptionspec7(ctx, dbEncryptionOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_state_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbStateOption dbStateOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec8 result = new AstDatabaseOptionspec.AstDatabaseOptionspec8(ctx, dbStateOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_update_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbUpdateOption dbUpdateOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec9 result = new AstDatabaseOptionspec.AstDatabaseOptionspec9(ctx, dbUpdateOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_user_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbUserAccessOption dbUserAccessOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec10 result = new AstDatabaseOptionspec.AstDatabaseOptionspec10(ctx, dbUserAccessOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    delayed_durability_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDelayedDurabilityOption delayedDurabilityOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec11 result = new AstDatabaseOptionspec.AstDatabaseOptionspec11(ctx, delayedDurabilityOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    external_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstExternalAccessOption externalAccessOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec12 result = new AstDatabaseOptionspec.AstDatabaseOptionspec12(ctx, externalAccessOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    database_filestream 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDatabaseFilestream databaseFilestream)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec13 result = new AstDatabaseOptionspec.AstDatabaseOptionspec13(ctx, databaseFilestream);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    hadr_options 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstHadrOptions hadrOptions)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec14 result = new AstDatabaseOptionspec.AstDatabaseOptionspec14(ctx, hadrOptions);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    mixed_page_allocation_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstMixedPageAllocationOption mixedPageAllocationOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec15 result = new AstDatabaseOptionspec.AstDatabaseOptionspec15(ctx, mixedPageAllocationOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    parameterization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstParameterizationOption parameterizationOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec16 result = new AstDatabaseOptionspec.AstDatabaseOptionspec16(ctx, parameterizationOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    recovery_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstRecoveryOption recoveryOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec17 result = new AstDatabaseOptionspec.AstDatabaseOptionspec17(ctx, recoveryOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    service_broker_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstServiceBrokerOption serviceBrokerOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec18 result = new AstDatabaseOptionspec.AstDatabaseOptionspec18(ctx, serviceBrokerOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    snapshot_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstSnapshotOption snapshotOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec19 result = new AstDatabaseOptionspec.AstDatabaseOptionspec19(ctx, snapshotOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    sql_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstSqlOption sqlOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec20 result = new AstDatabaseOptionspec.AstDatabaseOptionspec20(ctx, sqlOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    target_recovery_time_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstTargetRecoveryTimeOption targetRecoveryTimeOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec21 result = new AstDatabaseOptionspec.AstDatabaseOptionspec21(ctx, targetRecoveryTimeOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    termination 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstTermination termination)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec22 result = new AstDatabaseOptionspec.AstDatabaseOptionspec22(ctx, termination);
            return result;
        }
    }
    
    /// <summary>
    /// auto_option
    /// 	 : AUTO_CLOSE  on_off
    /// 	 | AUTO_CREATE_STATISTICS  statistic_value
    /// 	 | AUTO_SHRINK  on_off
    /// 	 | AUTO_UPDATE_STATISTICS  on_off
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
    /// </summary>
    public abstract partial class AstAutoOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStatisticValue), false, false, "statistic_value")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "AUTO_CLOSE  on_off\r\n | AUTO_CREATE_STATISTICS  statistic_value\r\n | AUTO_SHRINK  o" +
            "n_off\r\n | AUTO_UPDATE_STATISTICS  on_off\r\n | AUTO_UPDATE_STATISTICS_ASYNC  on_of" +
            "f\r\n";
        
        private static string _ruleName = "auto_option";
        
        /// <summary>
        /// auto_option : AUTO_CLOSE on_off 
        /// </summary>
        public partial class AstAutoOption1 : AstAutoOption
        {
            
            private static string _ruleName1 = "auto_option";
            
            private AstOnOff _onOff;
            
            internal AstAutoOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_CREATE_STATISTICS statistic_value 
        /// </summary>
        public partial class AstAutoOption2 : AstAutoOption
        {
            
            private static string _ruleName1 = "auto_option";
            
            private AstStatisticValue _statisticValue;
            
            internal AstAutoOption2(ParserRuleContext ctx, AstStatisticValue statisticValue) : 
                    base(ctx)
            {
                _statisticValue = statisticValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStatisticValue StatisticValue
            {
                get
                {
                    return _statisticValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_SHRINK on_off 
        /// </summary>
        public partial class AstAutoOption3 : AstAutoOption
        {
            
            private static string _ruleName1 = "auto_option";
            
            private AstOnOff _onOff;
            
            internal AstAutoOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_UPDATE_STATISTICS on_off 
        /// </summary>
        public partial class AstAutoOption4 : AstAutoOption
        {
            
            private static string _ruleName1 = "auto_option";
            
            private AstOnOff _onOff;
            
            internal AstAutoOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_UPDATE_STATISTICS_ASYNC on_off 
        /// </summary>
        public partial class AstAutoOption5 : AstAutoOption
        {
            
            private static string _ruleName1 = "auto_option";
            
            private AstOnOff _onOff;
            
            internal AstAutoOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        

        
        internal AstAutoOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAutoOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAutoOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAutoOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAutoOption.AstAutoOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstAutoOption.AstAutoOption2(ctx, list.Get<AstStatisticValue>(0));
            }
            if ((index == 3))
            {
                return new AstAutoOption.AstAutoOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstAutoOption.AstAutoOption4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstAutoOption.AstAutoOption5(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// auto_option : 
        ///    AUTO_CLOSE on_off 
        /// </summary>
        public static AstAutoOption AutoOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAutoOption.AstAutoOption1 result = new AstAutoOption.AstAutoOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// auto_option : 
        ///    AUTO_CREATE_STATISTICS statistic_value 
        /// </summary>
        public static AstAutoOption AutoOption(ParserRuleContext ctx, AstStatisticValue statisticValue)
        {
            AstAutoOption.AstAutoOption2 result = new AstAutoOption.AstAutoOption2(ctx, statisticValue);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking_set
    /// 	 : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_list)
    /// </summary>
    public abstract partial class AstChangeTrackingSet : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstChangeTrackingOptionList), false, false, "change_tracking_option_list"))));
        
        private static string _ruleValue = "CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_list)\r\n";
        
        private static string _ruleName = "change_tracking_set";
        
        /// <summary>
        /// change_tracking_set : CHANGE_TRACKING EQUAL OFF 
        /// </summary>
        public partial class AstChangeTrackingSet1 : AstChangeTrackingSet
        {
            
            private static string _ruleName1 = "change_tracking_set";
            
            internal AstChangeTrackingSet1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingSet(this);
            }
        }
        /// <summary>
        /// change_tracking_set : CHANGE_TRACKING EQUAL ON change_tracking_option_list 
        /// </summary>
        public partial class AstChangeTrackingSet2 : AstChangeTrackingSet
        {
            
            private static string _ruleName1 = "change_tracking_set";
            
            private AstChangeTrackingOptionList _changeTrackingOptionList;
            
            internal AstChangeTrackingSet2(ParserRuleContext ctx, AstChangeTrackingOptionList changeTrackingOptionList) : 
                    base(ctx)
            {
                _changeTrackingOptionList = changeTrackingOptionList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstChangeTrackingOptionList ChangeTrackingOptionList
            {
                get
                {
                    return _changeTrackingOptionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingSet(this);
            }
        }
        

        
        internal AstChangeTrackingSet(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTrackingSet(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTrackingSet(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstChangeTrackingSet Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstChangeTrackingSet.AstChangeTrackingSet1(ctx);
            }
            if ((index == 2))
            {
                return new AstChangeTrackingSet.AstChangeTrackingSet2(ctx, list.Get<AstChangeTrackingOptionList>(0));
            }
            return null;
        }
        
        /// <summary>
        /// change_tracking_set : 
        ///    CHANGE_TRACKING EQUAL OFF 
        /// </summary>
        public static AstChangeTrackingSet ChangeTrackingSet(ParserRuleContext ctx)
        {
            AstChangeTrackingSet.AstChangeTrackingSet1 result = new AstChangeTrackingSet.AstChangeTrackingSet1(ctx);
            return result;
        }
        
        /// <summary>
        /// change_tracking_set : 
        ///    CHANGE_TRACKING EQUAL ON change_tracking_option_list 
        /// </summary>
        public static AstChangeTrackingSet ChangeTrackingSet(ParserRuleContext ctx, AstChangeTrackingOptionList changeTrackingOptionList)
        {
            AstChangeTrackingSet.AstChangeTrackingSet2 result = new AstChangeTrackingSet.AstChangeTrackingSet2(ctx, changeTrackingOptionList);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking_option_list
    /// 	 : AUTO_CLEANUP  EQUAL  on_off
    /// 	 | CHANGE_RETENTION  EQUAL  period
    /// </summary>
    public abstract partial class AstChangeTrackingOptionList : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstPeriod), false, false, "period"))));
        
        private static string _ruleValue = "AUTO_CLEANUP  EQUAL  on_off\r\n | CHANGE_RETENTION  EQUAL  period\r\n";
        
        private static string _ruleName = "change_tracking_option_list";
        
        /// <summary>
        /// change_tracking_option_list : AUTO_CLEANUP EQUAL on_off 
        /// </summary>
        public partial class AstChangeTrackingOptionList1 : AstChangeTrackingOptionList
        {
            
            private static string _ruleName1 = "change_tracking_option_list";
            
            private AstOnOff _onOff;
            
            internal AstChangeTrackingOptionList1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingOptionList(this);
            }
        }
        /// <summary>
        /// change_tracking_option_list : CHANGE_RETENTION EQUAL period 
        /// </summary>
        public partial class AstChangeTrackingOptionList2 : AstChangeTrackingOptionList
        {
            
            private static string _ruleName1 = "change_tracking_option_list";
            
            private AstPeriod _period;
            
            internal AstChangeTrackingOptionList2(ParserRuleContext ctx, AstPeriod period) : 
                    base(ctx)
            {
                _period = period;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPeriod Period
            {
                get
                {
                    return _period;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingOptionList(this);
            }
        }
        

        
        internal AstChangeTrackingOptionList(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTrackingOptionList(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTrackingOptionList(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstChangeTrackingOptionList Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstChangeTrackingOptionList.AstChangeTrackingOptionList1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstChangeTrackingOptionList.AstChangeTrackingOptionList2(ctx, list.Get<AstPeriod>(0));
            }
            return null;
        }
        
        /// <summary>
        /// change_tracking_option_list : 
        ///    AUTO_CLEANUP EQUAL on_off 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstChangeTrackingOptionList.AstChangeTrackingOptionList1 result = new AstChangeTrackingOptionList.AstChangeTrackingOptionList1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// change_tracking_option_list : 
        ///    CHANGE_RETENTION EQUAL period 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(ParserRuleContext ctx, AstPeriod period)
        {
            AstChangeTrackingOptionList.AstChangeTrackingOptionList2 result = new AstChangeTrackingOptionList.AstChangeTrackingOptionList2(ctx, period);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_option
    /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
    /// 	 | CURSOR_DEFAULT  local_global
    /// </summary>
    public abstract partial class AstCursorOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalGlobal), false, false, "local_global"))));
        
        private static string _ruleValue = "CURSOR_CLOSE_ON_COMMIT  on_off\r\n | CURSOR_DEFAULT  local_global\r\n";
        
        private static string _ruleName = "cursor_option";
        
        /// <summary>
        /// cursor_option : CURSOR_CLOSE_ON_COMMIT on_off 
        /// </summary>
        public partial class AstCursorOption1 : AstCursorOption
        {
            
            private static string _ruleName1 = "cursor_option";
            
            private AstOnOff _onOff;
            
            internal AstCursorOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorOption(this);
            }
        }
        /// <summary>
        /// cursor_option : CURSOR_DEFAULT local_global 
        /// </summary>
        public partial class AstCursorOption2 : AstCursorOption
        {
            
            private static string _ruleName1 = "cursor_option";
            
            private AstLocalGlobal _localGlobal;
            
            internal AstCursorOption2(ParserRuleContext ctx, AstLocalGlobal localGlobal) : 
                    base(ctx)
            {
                _localGlobal = localGlobal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalGlobal LocalGlobal
            {
                get
                {
                    return _localGlobal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorOption(this);
            }
        }
        

        
        internal AstCursorOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCursorOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCursorOption.AstCursorOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstCursorOption.AstCursorOption2(ctx, list.Get<AstLocalGlobal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// cursor_option : 
        ///    CURSOR_CLOSE_ON_COMMIT on_off 
        /// </summary>
        public static AstCursorOption CursorOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstCursorOption.AstCursorOption1 result = new AstCursorOption.AstCursorOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// cursor_option : 
        ///    CURSOR_DEFAULT local_global 
        /// </summary>
        public static AstCursorOption CursorOption(ParserRuleContext ctx, AstLocalGlobal localGlobal)
        {
            AstCursorOption.AstCursorOption2 result = new AstCursorOption.AstCursorOption2(ctx, localGlobal);
            return result;
        }
    }
    
    /// <summary>
    /// listener_ip_addr
    /// 	 : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)
    /// </summary>
    public abstract partial class AstListenerIpAddr : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstIpv4), false, false, "ipv4")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstIpv6), false, false, "ipv6")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)\r\n";
        
        private static string _ruleName = "listener_ip_addr";
        
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL ALL 
        /// </summary>
        public partial class AstListenerIpAddr1 : AstListenerIpAddr
        {
            
            private static string _ruleName1 = "listener_ip_addr";
            
            internal AstListenerIpAddr1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL ipv4 
        /// </summary>
        public partial class AstListenerIpAddr2 : AstListenerIpAddr
        {
            
            private static string _ruleName1 = "listener_ip_addr";
            
            private AstIpv4 _ipv4;
            
            internal AstListenerIpAddr2(ParserRuleContext ctx, AstIpv4 ipv4) : 
                    base(ctx)
            {
                _ipv4 = ipv4;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIpv4 Ipv4
            {
                get
                {
                    return _ipv4;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL ipv6 
        /// </summary>
        public partial class AstListenerIpAddr3 : AstListenerIpAddr
        {
            
            private static string _ruleName1 = "listener_ip_addr";
            
            private AstIpv6 _ipv6;
            
            internal AstListenerIpAddr3(ParserRuleContext ctx, AstIpv6 ipv6) : 
                    base(ctx)
            {
                _ipv6 = ipv6;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIpv6 Ipv6
            {
                get
                {
                    return _ipv6;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL stringtext 
        /// </summary>
        public partial class AstListenerIpAddr4 : AstListenerIpAddr
        {
            
            private static string _ruleName1 = "listener_ip_addr";
            
            private AstStringtext _stringtext;
            
            internal AstListenerIpAddr4(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        

        
        internal AstListenerIpAddr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstListenerIpAddr(Position p) : 
                base(p)
        {
        }
        
        internal AstListenerIpAddr(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstListenerIpAddr Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstListenerIpAddr.AstListenerIpAddr1(ctx);
            }
            if ((index == 2))
            {
                return new AstListenerIpAddr.AstListenerIpAddr2(ctx, list.Get<AstIpv4>(0));
            }
            if ((index == 3))
            {
                return new AstListenerIpAddr.AstListenerIpAddr3(ctx, list.Get<AstIpv6>(0));
            }
            if ((index == 4))
            {
                return new AstListenerIpAddr.AstListenerIpAddr4(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL ALL 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx)
        {
            AstListenerIpAddr.AstListenerIpAddr1 result = new AstListenerIpAddr.AstListenerIpAddr1(ctx);
            return result;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL ipv4 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx, AstIpv4 ipv4)
        {
            AstListenerIpAddr.AstListenerIpAddr2 result = new AstListenerIpAddr.AstListenerIpAddr2(ctx, ipv4);
            return result;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL ipv6 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx, AstIpv6 ipv6)
        {
            AstListenerIpAddr.AstListenerIpAddr3 result = new AstListenerIpAddr.AstListenerIpAddr3(ctx, ipv6);
            return result;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL stringtext 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstListenerIpAddr.AstListenerIpAddr4 result = new AstListenerIpAddr.AstListenerIpAddr4(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// authentication_configuration
    /// 	 : AUTHENTICATION  EQUAL  (WINDOWS  authentication_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  authentication_mode?)
    /// </summary>
    public abstract partial class AstAuthenticationConfiguration : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAuthenticationMode), true, false, "authentication_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCertificateId), false, false, "certificate_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCertificateId), false, false, "certificate_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAuthenticationMode), true, false, "authentication_mode"))));
        
        private static string _ruleValue = "AUTHENTICATION  EQUAL  (WINDOWS  authentication_mode?  (CERTIFICATE  certificate_" +
            "id)? | CERTIFICATE  certificate_id  WINDOWS?  authentication_mode?)\r\n";
        
        private static string _ruleName = "authentication_configuration";
        
        /// <summary>
        /// authentication_configuration : AUTHENTICATION EQUAL WINDOWS authentication_mode? CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstAuthenticationConfiguration1 : AstAuthenticationConfiguration
        {
            
            private static string _ruleName1 = "authentication_configuration";
            
            private AstAuthenticationMode? _authenticationMode;
            
            private AstCertificateId _certificateId;
            
            internal AstAuthenticationConfiguration1(ParserRuleContext ctx, AstAuthenticationMode? authenticationMode, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _authenticationMode = authenticationMode;
                _certificateId = certificateId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAuthenticationMode? AuthenticationMode
            {
                get
                {
                    return _authenticationMode;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthenticationConfiguration(this);
            }
        }
        /// <summary>
        /// authentication_configuration : AUTHENTICATION EQUAL CERTIFICATE certificate_id WINDOWS? authentication_mode? 
        /// </summary>
        public partial class AstAuthenticationConfiguration2 : AstAuthenticationConfiguration
        {
            
            private static string _ruleName1 = "authentication_configuration";
            
            private AstCertificateId _certificateId;
            
            private AstAuthenticationMode? _authenticationMode;
            
            internal AstAuthenticationConfiguration2(ParserRuleContext ctx, AstCertificateId certificateId, AstAuthenticationMode? authenticationMode) : 
                    base(ctx)
            {
                _certificateId = certificateId;
                _authenticationMode = authenticationMode;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public virtual AstAuthenticationMode? AuthenticationMode
            {
                get
                {
                    return _authenticationMode;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthenticationConfiguration(this);
            }
        }
        

        
        internal AstAuthenticationConfiguration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAuthenticationConfiguration(Position p) : 
                base(p)
        {
        }
        
        internal AstAuthenticationConfiguration(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAuthenticationConfiguration Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAuthenticationConfiguration.AstAuthenticationConfiguration1(ctx, list.Get<AstAuthenticationMode?>(0), list.Get<AstCertificateId>(1));
            }
            if ((index == 2))
            {
                return new AstAuthenticationConfiguration.AstAuthenticationConfiguration2(ctx, list.Get<AstCertificateId>(0), list.Get<AstAuthenticationMode?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// authentication_configuration : 
        ///    AUTHENTICATION EQUAL WINDOWS authentication_mode? CERTIFICATE certificate_id 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(ParserRuleContext ctx, AstAuthenticationMode authenticationMode, AstCertificateId certificateId)
        {
            AstAuthenticationConfiguration.AstAuthenticationConfiguration1 result = new AstAuthenticationConfiguration.AstAuthenticationConfiguration1(ctx, authenticationMode, certificateId);
            return result;
        }
        
        /// <summary>
        /// authentication_configuration : 
        ///    AUTHENTICATION EQUAL CERTIFICATE certificate_id WINDOWS? authentication_mode? 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(ParserRuleContext ctx, AstCertificateId certificateId, AstAuthenticationMode authenticationMode)
        {
            AstAuthenticationConfiguration.AstAuthenticationConfiguration2 result = new AstAuthenticationConfiguration.AstAuthenticationConfiguration2(ctx, certificateId, authenticationMode);
            return result;
        }
    }
    
    /// <summary>
    /// mirroring_set_option
    /// 	 : mirroring_partner  partner_option
    /// 	 | mirroring_witness  witness_option
    /// </summary>
    public abstract partial class AstMirroringSetOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstMirroringPartner), false, false, "mirroring_partner"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPartnerOption), false, false, "partner_option")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstMirroringWitness), false, false, "mirroring_witness"), new Bb.Asts.AstRuleMatcherItem(typeof(AstWitnessOption), false, false, "witness_option"))));
        
        private static string _ruleValue = "mirroring_partner  partner_option\r\n | mirroring_witness  witness_option\r\n";
        
        private static string _ruleName = "mirroring_set_option";
        
        /// <summary>
        /// mirroring_set_option : mirroring_partner partner_option 
        /// </summary>
        public partial class AstMirroringSetOption1 : AstMirroringSetOption
        {
            
            private static string _ruleName1 = "mirroring_set_option";
            
            private AstMirroringPartner _mirroringPartner;
            
            private AstPartnerOption _partnerOption;
            
            internal AstMirroringSetOption1(ParserRuleContext ctx, AstMirroringPartner mirroringPartner, AstPartnerOption partnerOption) : 
                    base(ctx)
            {
                _mirroringPartner = mirroringPartner;
                _partnerOption = partnerOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMirroringPartner MirroringPartner
            {
                get
                {
                    return _mirroringPartner;
                }
            }
            
            public virtual AstPartnerOption PartnerOption
            {
                get
                {
                    return _partnerOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMirroringSetOption(this);
            }
        }
        /// <summary>
        /// mirroring_set_option : mirroring_witness witness_option 
        /// </summary>
        public partial class AstMirroringSetOption2 : AstMirroringSetOption
        {
            
            private static string _ruleName1 = "mirroring_set_option";
            
            private AstMirroringWitness _mirroringWitness;
            
            private AstWitnessOption _witnessOption;
            
            internal AstMirroringSetOption2(ParserRuleContext ctx, AstMirroringWitness mirroringWitness, AstWitnessOption witnessOption) : 
                    base(ctx)
            {
                _mirroringWitness = mirroringWitness;
                _witnessOption = witnessOption;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMirroringWitness MirroringWitness
            {
                get
                {
                    return _mirroringWitness;
                }
            }
            
            public virtual AstWitnessOption WitnessOption
            {
                get
                {
                    return _witnessOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMirroringSetOption(this);
            }
        }
        

        
        internal AstMirroringSetOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMirroringSetOption(Position p) : 
                base(p)
        {
        }
        
        internal AstMirroringSetOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstMirroringSetOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstMirroringSetOption.AstMirroringSetOption1(ctx, list.Get<AstMirroringPartner>(0), list.Get<AstPartnerOption>(1));
            }
            if ((index == 2))
            {
                return new AstMirroringSetOption.AstMirroringSetOption2(ctx, list.Get<AstMirroringWitness>(0), list.Get<AstWitnessOption>(1));
            }
            return null;
        }
        
        /// <summary>
        /// mirroring_set_option : 
        ///    mirroring_partner partner_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(ParserRuleContext ctx, AstMirroringPartner mirroringPartner, AstPartnerOption partnerOption)
        {
            AstMirroringSetOption.AstMirroringSetOption1 result = new AstMirroringSetOption.AstMirroringSetOption1(ctx, mirroringPartner, partnerOption);
            return result;
        }
        
        /// <summary>
        /// mirroring_set_option : 
        ///    mirroring_witness witness_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(ParserRuleContext ctx, AstMirroringWitness mirroringWitness, AstWitnessOption witnessOption)
        {
            AstMirroringSetOption.AstMirroringSetOption2 result = new AstMirroringSetOption.AstMirroringSetOption2(ctx, mirroringWitness, witnessOption);
            return result;
        }
    }
    
    /// <summary>
    /// partner_option
    /// 	 : witness_partner_equal  partner_server
    /// 	 | TIMEOUT  decimal
    /// 	 | partner_option_enum
    /// </summary>
    public abstract partial class AstPartnerOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWitnessPartnerEqual), false, false, "witness_partner_equal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPartnerServer), false, false, "partner_server")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstPartnerOptionEnum), false, false, "partner_option_enum"))));
        
        private static string _ruleValue = "witness_partner_equal  partner_server\r\n | TIMEOUT  decimal\r\n | partner_option_enu" +
            "m\r\n";
        
        private static string _ruleName = "partner_option";
        
        /// <summary>
        /// partner_option : witness_partner_equal partner_server 
        /// </summary>
        public partial class AstPartnerOption1 : AstPartnerOption
        {
            
            private static string _ruleName1 = "partner_option";
            
            private AstWitnessPartnerEqual _witnessPartnerEqual;
            
            private AstPartnerServer _partnerServer;
            
            internal AstPartnerOption1(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstPartnerServer partnerServer) : 
                    base(ctx)
            {
                _witnessPartnerEqual = witnessPartnerEqual;
                _partnerServer = partnerServer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWitnessPartnerEqual WitnessPartnerEqual
            {
                get
                {
                    return _witnessPartnerEqual;
                }
            }
            
            public virtual AstPartnerServer PartnerServer
            {
                get
                {
                    return _partnerServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        /// <summary>
        /// partner_option : TIMEOUT decimal 
        /// </summary>
        public partial class AstPartnerOption2 : AstPartnerOption
        {
            
            private static string _ruleName1 = "partner_option";
            
            private AstDecimal _decimal;
            
            internal AstPartnerOption2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        /// <summary>
        /// partner_option : partner_option_enum 
        /// </summary>
        public partial class AstPartnerOption3 : AstPartnerOption
        {
            
            private static string _ruleName1 = "partner_option";
            
            private AstPartnerOptionEnum _partnerOptionEnum;
            
            internal AstPartnerOption3(ParserRuleContext ctx, AstPartnerOptionEnum partnerOptionEnum) : 
                    base(ctx)
            {
                _partnerOptionEnum = partnerOptionEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPartnerOptionEnum PartnerOptionEnum
            {
                get
                {
                    return _partnerOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        

        
        internal AstPartnerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPartnerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstPartnerOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPartnerOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPartnerOption.AstPartnerOption1(ctx, list.Get<AstWitnessPartnerEqual>(0), list.Get<AstPartnerServer>(1));
            }
            if ((index == 2))
            {
                return new AstPartnerOption.AstPartnerOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstPartnerOption.AstPartnerOption3(ctx, list.Get<AstPartnerOptionEnum>(0));
            }
            return null;
        }
        
        /// <summary>
        /// partner_option : 
        ///    witness_partner_equal partner_server 
        /// </summary>
        public static AstPartnerOption PartnerOption(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstPartnerServer partnerServer)
        {
            AstPartnerOption.AstPartnerOption1 result = new AstPartnerOption.AstPartnerOption1(ctx, witnessPartnerEqual, partnerServer);
            return result;
        }
        
        /// <summary>
        /// partner_option : 
        ///    TIMEOUT decimal 
        /// </summary>
        public static AstPartnerOption PartnerOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstPartnerOption.AstPartnerOption2 result = new AstPartnerOption.AstPartnerOption2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// partner_option : 
        ///    partner_option_enum 
        /// </summary>
        public static AstPartnerOption PartnerOption(ParserRuleContext ctx, AstPartnerOptionEnum partnerOptionEnum)
        {
            AstPartnerOption.AstPartnerOption3 result = new AstPartnerOption.AstPartnerOption3(ctx, partnerOptionEnum);
            return result;
        }
    }
    
    /// <summary>
    /// witness_option
    /// 	 : witness_partner_equal  witness_server
    /// 	 | OFF
    /// </summary>
    public abstract partial class AstWitnessOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWitnessPartnerEqual), false, false, "witness_partner_equal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstWitnessServer), false, false, "witness_server"))));
        
        private static string _ruleValue = "witness_partner_equal  witness_server\r\n | OFF\r\n";
        
        private static string _ruleName = "witness_option";
        
        /// <summary>
        /// witness_option : witness_partner_equal witness_server 
        /// </summary>
        public partial class AstWitnessOption1 : AstWitnessOption
        {
            
            private static string _ruleName1 = "witness_option";
            
            private AstWitnessPartnerEqual _witnessPartnerEqual;
            
            private AstWitnessServer _witnessServer;
            
            internal AstWitnessOption1(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstWitnessServer witnessServer) : 
                    base(ctx)
            {
                _witnessPartnerEqual = witnessPartnerEqual;
                _witnessServer = witnessServer;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWitnessPartnerEqual WitnessPartnerEqual
            {
                get
                {
                    return _witnessPartnerEqual;
                }
            }
            
            public virtual AstWitnessServer WitnessServer
            {
                get
                {
                    return _witnessServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWitnessOption(this);
            }
        }
        /// <summary>
        /// witness_option : OFF 
        /// </summary>
        public partial class AstWitnessOption2 : AstWitnessOption
        {
            
            private static string _ruleName1 = "witness_option";
            
            internal AstWitnessOption2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWitnessOption(this);
            }
        }
        

        
        internal AstWitnessOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWitnessOption(Position p) : 
                base(p)
        {
        }
        
        internal AstWitnessOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWitnessOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWitnessOption.AstWitnessOption1(ctx, list.Get<AstWitnessPartnerEqual>(0), list.Get<AstWitnessServer>(1));
            }
            if ((index == 2))
            {
                return new AstWitnessOption.AstWitnessOption2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// witness_option : 
        ///    witness_partner_equal witness_server 
        /// </summary>
        public static AstWitnessOption WitnessOption(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstWitnessServer witnessServer)
        {
            AstWitnessOption.AstWitnessOption1 result = new AstWitnessOption.AstWitnessOption1(ctx, witnessPartnerEqual, witnessServer);
            return result;
        }
        
        /// <summary>
        /// witness_option : 
        ///    OFF 
        /// </summary>
        public static AstWitnessOption WitnessOption(ParserRuleContext ctx)
        {
            AstWitnessOption.AstWitnessOption2 result = new AstWitnessOption.AstWitnessOption2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// partner_server_tcp_prefix
    /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
    /// </summary>
    public partial class AstPartnerServerTcpPrefix : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "TCP  COLON  DOUBLE_FORWARD_SLASH\r\n";
        
        private static string _ruleName = "partner_server_tcp_prefix";
        
        internal AstPartnerServerTcpPrefix(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPartnerServerTcpPrefix(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartnerServerTcpPrefix(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServerTcpPrefix(this);
        }
        
        public static AstPartnerServerTcpPrefix Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstPartnerServerTcpPrefix(ctx);
        }
        
        /// <summary>
        /// partner_server_tcp_prefix : 
        ///    TCP : DOUBLE_FORWARD_SLASH 
        /// </summary>
        public static AstPartnerServerTcpPrefix PartnerServerTcpPrefix(ParserRuleContext ctx)
        {
            AstPartnerServerTcpPrefix result = new AstPartnerServerTcpPrefix(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// external_access_option
    /// 	 : DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// 	 | DEFAULT_LANGUAGE  EQUAL  language_setting
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  language_setting
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// </summary>
    public abstract partial class AstExternalAccessOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLanguageSetting), false, false, "language_setting")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstLanguageSetting), false, false, "language_setting")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = @"DB_CHAINING  on_off
 | TRUSTWORTHY  on_off
 | DEFAULT_LANGUAGE  EQUAL  language_setting
 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  language_setting
 | NESTED_TRIGGERS  EQUAL  on_off
 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
";
        
        private static string _ruleName = "external_access_option";
        
        /// <summary>
        /// external_access_option : DB_CHAINING on_off 
        /// </summary>
        public partial class AstExternalAccessOption1 : AstExternalAccessOption
        {
            
            private static string _ruleName1 = "external_access_option";
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TRUSTWORTHY on_off 
        /// </summary>
        public partial class AstExternalAccessOption2 : AstExternalAccessOption
        {
            
            private static string _ruleName1 = "external_access_option";
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : DEFAULT_LANGUAGE EQUAL language_setting 
        /// </summary>
        public partial class AstExternalAccessOption3 : AstExternalAccessOption
        {
            
            private static string _ruleName1 = "external_access_option";
            
            private AstLanguageSetting _languageSetting;
            
            internal AstExternalAccessOption3(ParserRuleContext ctx, AstLanguageSetting languageSetting) : 
                    base(ctx)
            {
                _languageSetting = languageSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLanguageSetting LanguageSetting
            {
                get
                {
                    return _languageSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : DEFAULT_FULLTEXT_LANGUAGE EQUAL language_setting 
        /// </summary>
        public partial class AstExternalAccessOption4 : AstExternalAccessOption
        {
            
            private static string _ruleName1 = "external_access_option";
            
            private AstLanguageSetting _languageSetting;
            
            internal AstExternalAccessOption4(ParserRuleContext ctx, AstLanguageSetting languageSetting) : 
                    base(ctx)
            {
                _languageSetting = languageSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLanguageSetting LanguageSetting
            {
                get
                {
                    return _languageSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public partial class AstExternalAccessOption5 : AstExternalAccessOption
        {
            
            private static string _ruleName1 = "external_access_option";
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TRANSFORM_NOISE_WORDS EQUAL on_off 
        /// </summary>
        public partial class AstExternalAccessOption6 : AstExternalAccessOption
        {
            
            private static string _ruleName1 = "external_access_option";
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public partial class AstExternalAccessOption7 : AstExternalAccessOption
        {
            
            private static string _ruleName1 = "external_access_option";
            
            private AstDecimal _decimal;
            
            internal AstExternalAccessOption7(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        

        
        internal AstExternalAccessOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExternalAccessOption(Position p) : 
                base(p)
        {
        }
        
        internal AstExternalAccessOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExternalAccessOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExternalAccessOption.AstExternalAccessOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstExternalAccessOption.AstExternalAccessOption3(ctx, list.Get<AstLanguageSetting>(0));
            }
            if ((index == 4))
            {
                return new AstExternalAccessOption.AstExternalAccessOption4(ctx, list.Get<AstLanguageSetting>(0));
            }
            if ((index == 5))
            {
                return new AstExternalAccessOption.AstExternalAccessOption5(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 6))
            {
                return new AstExternalAccessOption.AstExternalAccessOption6(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 7))
            {
                return new AstExternalAccessOption.AstExternalAccessOption7(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    DB_CHAINING on_off 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstExternalAccessOption.AstExternalAccessOption1 result = new AstExternalAccessOption.AstExternalAccessOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    DEFAULT_LANGUAGE EQUAL language_setting 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(ParserRuleContext ctx, AstLanguageSetting languageSetting)
        {
            AstExternalAccessOption.AstExternalAccessOption3 result = new AstExternalAccessOption.AstExternalAccessOption3(ctx, languageSetting);
            return result;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstExternalAccessOption.AstExternalAccessOption7 result = new AstExternalAccessOption.AstExternalAccessOption7(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// language_setting_value
    /// 	 : NONE
    /// 	 | lcid = decimal
    /// 	 | language_id
    /// </summary>
    public abstract partial class AstLanguageSettingValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLanguageId), false, false, "language_id"))));
        
        private static string _ruleValue = "NONE\r\n | lcid = decimal\r\n | language_id\r\n";
        
        private static string _ruleName = "language_setting_value";
        
        /// <summary>
        /// language_setting_value : NONE 
        /// </summary>
        public partial class AstLanguageSettingValue1 : AstLanguageSettingValue
        {
            
            private static string _ruleName1 = "language_setting_value";
            
            internal AstLanguageSettingValue1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLanguageSettingValue(this);
            }
        }
        /// <summary>
        /// language_setting_value : lcid=decimal 
        /// </summary>
        public partial class AstLanguageSettingValue2 : AstLanguageSettingValue
        {
            
            private static string _ruleName1 = "language_setting_value";
            
            private AstDecimal _lcid;
            
            internal AstLanguageSettingValue2(ParserRuleContext ctx, AstDecimal lcid) : 
                    base(ctx)
            {
                _lcid = lcid;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Lcid
            {
                get
                {
                    return _lcid;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLanguageSettingValue(this);
            }
        }
        /// <summary>
        /// language_setting_value : language_id 
        /// </summary>
        public partial class AstLanguageSettingValue3 : AstLanguageSettingValue
        {
            
            private static string _ruleName1 = "language_setting_value";
            
            private AstLanguageId _languageId;
            
            internal AstLanguageSettingValue3(ParserRuleContext ctx, AstLanguageId languageId) : 
                    base(ctx)
            {
                _languageId = languageId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLanguageId LanguageId
            {
                get
                {
                    return _languageId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLanguageSettingValue(this);
            }
        }
        

        
        internal AstLanguageSettingValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLanguageSettingValue(Position p) : 
                base(p)
        {
        }
        
        internal AstLanguageSettingValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstLanguageSettingValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstLanguageSettingValue.AstLanguageSettingValue1(ctx);
            }
            if ((index == 2))
            {
                return new AstLanguageSettingValue.AstLanguageSettingValue2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstLanguageSettingValue.AstLanguageSettingValue3(ctx, list.Get<AstLanguageId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// language_setting_value : 
        ///    NONE 
        /// </summary>
        public static AstLanguageSettingValue LanguageSettingValue(ParserRuleContext ctx)
        {
            AstLanguageSettingValue.AstLanguageSettingValue1 result = new AstLanguageSettingValue.AstLanguageSettingValue1(ctx);
            return result;
        }
        
        /// <summary>
        /// language_setting_value : 
        ///    lcid=decimal 
        /// </summary>
        public static AstLanguageSettingValue LanguageSettingValue(ParserRuleContext ctx, AstDecimal lcid)
        {
            AstLanguageSettingValue.AstLanguageSettingValue2 result = new AstLanguageSettingValue.AstLanguageSettingValue2(ctx, lcid);
            return result;
        }
        
        /// <summary>
        /// language_setting_value : 
        ///    language_id 
        /// </summary>
        public static AstLanguageSettingValue LanguageSettingValue(ParserRuleContext ctx, AstLanguageId languageId)
        {
            AstLanguageSettingValue.AstLanguageSettingValue3 result = new AstLanguageSettingValue.AstLanguageSettingValue3(ctx, languageId);
            return result;
        }
    }
    
    /// <summary>
    /// hadr_options
    /// 	 : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_resume)
    /// </summary>
    public abstract partial class AstHadrOptions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstGroupId), false, false, "group_id")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSuspendResume), false, false, "suspend_resume"))));
        
        private static string _ruleValue = "HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_resume)\r\n";
        
        private static string _ruleName = "hadr_options";
        
        /// <summary>
        /// hadr_options : HADR AVAILABILITY GROUP EQUAL group_id 
        /// </summary>
        public partial class AstHadrOptions1 : AstHadrOptions
        {
            
            private static string _ruleName1 = "hadr_options";
            
            private AstGroupId _groupId;
            
            internal AstHadrOptions1(ParserRuleContext ctx, AstGroupId groupId) : 
                    base(ctx)
            {
                _groupId = groupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGroupId GroupId
            {
                get
                {
                    return _groupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHadrOptions(this);
            }
        }
        /// <summary>
        /// hadr_options : HADR OFF 
        /// </summary>
        public partial class AstHadrOptions2 : AstHadrOptions
        {
            
            private static string _ruleName1 = "hadr_options";
            
            internal AstHadrOptions2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHadrOptions(this);
            }
        }
        /// <summary>
        /// hadr_options : HADR suspend_resume 
        /// </summary>
        public partial class AstHadrOptions3 : AstHadrOptions
        {
            
            private static string _ruleName1 = "hadr_options";
            
            private AstSuspendResume _suspendResume;
            
            internal AstHadrOptions3(ParserRuleContext ctx, AstSuspendResume suspendResume) : 
                    base(ctx)
            {
                _suspendResume = suspendResume;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSuspendResume SuspendResume
            {
                get
                {
                    return _suspendResume;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHadrOptions(this);
            }
        }
        

        
        internal AstHadrOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHadrOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstHadrOptions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstHadrOptions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstHadrOptions.AstHadrOptions1(ctx, list.Get<AstGroupId>(0));
            }
            if ((index == 2))
            {
                return new AstHadrOptions.AstHadrOptions2(ctx);
            }
            if ((index == 3))
            {
                return new AstHadrOptions.AstHadrOptions3(ctx, list.Get<AstSuspendResume>(0));
            }
            return null;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR AVAILABILITY GROUP EQUAL group_id 
        /// </summary>
        public static AstHadrOptions HadrOptions(ParserRuleContext ctx, AstGroupId groupId)
        {
            AstHadrOptions.AstHadrOptions1 result = new AstHadrOptions.AstHadrOptions1(ctx, groupId);
            return result;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR OFF 
        /// </summary>
        public static AstHadrOptions HadrOptions(ParserRuleContext ctx)
        {
            AstHadrOptions.AstHadrOptions2 result = new AstHadrOptions.AstHadrOptions2(ctx);
            return result;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR suspend_resume 
        /// </summary>
        public static AstHadrOptions HadrOptions(ParserRuleContext ctx, AstSuspendResume suspendResume)
        {
            AstHadrOptions.AstHadrOptions3 result = new AstHadrOptions.AstHadrOptions3(ctx, suspendResume);
            return result;
        }
    }
    
    /// <summary>
    /// recovery_option
    /// 	 : recovery_option_enum
    /// 	 | TORN_PAGE_DETECTION  on_off
    /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
    /// </summary>
    public abstract partial class AstRecoveryOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRecoveryOptionEnum), false, false, "recovery_option_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "recovery_option_enum\r\n | TORN_PAGE_DETECTION  on_off\r\n | ACCELERATED_DATABASE_REC" +
            "OVERY  EQUAL  on_off\r\n";
        
        private static string _ruleName = "recovery_option";
        
        /// <summary>
        /// recovery_option : recovery_option_enum 
        /// </summary>
        public partial class AstRecoveryOption1 : AstRecoveryOption
        {
            
            private static string _ruleName1 = "recovery_option";
            
            private AstRecoveryOptionEnum _recoveryOptionEnum;
            
            internal AstRecoveryOption1(ParserRuleContext ctx, AstRecoveryOptionEnum recoveryOptionEnum) : 
                    base(ctx)
            {
                _recoveryOptionEnum = recoveryOptionEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRecoveryOptionEnum RecoveryOptionEnum
            {
                get
                {
                    return _recoveryOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        /// <summary>
        /// recovery_option : TORN_PAGE_DETECTION on_off 
        /// </summary>
        public partial class AstRecoveryOption2 : AstRecoveryOption
        {
            
            private static string _ruleName1 = "recovery_option";
            
            private AstOnOff _onOff;
            
            internal AstRecoveryOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        /// <summary>
        /// recovery_option : ACCELERATED_DATABASE_RECOVERY EQUAL on_off 
        /// </summary>
        public partial class AstRecoveryOption3 : AstRecoveryOption
        {
            
            private static string _ruleName1 = "recovery_option";
            
            private AstOnOff _onOff;
            
            internal AstRecoveryOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        

        
        internal AstRecoveryOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRecoveryOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRecoveryOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRecoveryOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRecoveryOption.AstRecoveryOption1(ctx, list.Get<AstRecoveryOptionEnum>(0));
            }
            if ((index == 2))
            {
                return new AstRecoveryOption.AstRecoveryOption2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstRecoveryOption.AstRecoveryOption3(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// recovery_option : 
        ///    recovery_option_enum 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(ParserRuleContext ctx, AstRecoveryOptionEnum recoveryOptionEnum)
        {
            AstRecoveryOption.AstRecoveryOption1 result = new AstRecoveryOption.AstRecoveryOption1(ctx, recoveryOptionEnum);
            return result;
        }
        
        /// <summary>
        /// recovery_option : 
        ///    TORN_PAGE_DETECTION on_off 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstRecoveryOption.AstRecoveryOption2 result = new AstRecoveryOption.AstRecoveryOption2(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// service_broker_option
    /// 	 : ENABLE_BROKER
    /// 	 | DISABLE_BROKER
    /// 	 | NEW_BROKER
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | HONOR_BROKER_PRIORITY  on_off
    /// </summary>
    public abstract partial class AstServiceBrokerOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "ENABLE_BROKER\r\n | DISABLE_BROKER\r\n | NEW_BROKER\r\n | ERROR_BROKER_CONVERSATIONS\r\n " +
            "| HONOR_BROKER_PRIORITY  on_off\r\n";
        
        private static string _ruleName = "service_broker_option";
        
        /// <summary>
        /// service_broker_option : ENABLE_BROKER 
        /// </summary>
        public partial class AstServiceBrokerOption1 : AstServiceBrokerOption
        {
            
            private static string _ruleName1 = "service_broker_option";
            
            internal AstServiceBrokerOption1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : DISABLE_BROKER 
        /// </summary>
        public partial class AstServiceBrokerOption2 : AstServiceBrokerOption
        {
            
            private static string _ruleName1 = "service_broker_option";
            
            internal AstServiceBrokerOption2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : NEW_BROKER 
        /// </summary>
        public partial class AstServiceBrokerOption3 : AstServiceBrokerOption
        {
            
            private static string _ruleName1 = "service_broker_option";
            
            internal AstServiceBrokerOption3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : ERROR_BROKER_CONVERSATIONS 
        /// </summary>
        public partial class AstServiceBrokerOption4 : AstServiceBrokerOption
        {
            
            private static string _ruleName1 = "service_broker_option";
            
            internal AstServiceBrokerOption4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : HONOR_BROKER_PRIORITY on_off 
        /// </summary>
        public partial class AstServiceBrokerOption5 : AstServiceBrokerOption
        {
            
            private static string _ruleName1 = "service_broker_option";
            
            private AstOnOff _onOff;
            
            internal AstServiceBrokerOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        

        
        internal AstServiceBrokerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServiceBrokerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstServiceBrokerOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServiceBrokerOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption1(ctx);
            }
            if ((index == 2))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption2(ctx);
            }
            if ((index == 3))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption3(ctx);
            }
            if ((index == 4))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption4(ctx);
            }
            if ((index == 5))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption5(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// service_broker_option : 
        ///    ENABLE_BROKER 
        /// </summary>
        public static AstServiceBrokerOption ServiceBrokerOption(ParserRuleContext ctx)
        {
            AstServiceBrokerOption.AstServiceBrokerOption1 result = new AstServiceBrokerOption.AstServiceBrokerOption1(ctx);
            return result;
        }
        
        /// <summary>
        /// service_broker_option : 
        ///    HONOR_BROKER_PRIORITY on_off 
        /// </summary>
        public static AstServiceBrokerOption ServiceBrokerOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServiceBrokerOption.AstServiceBrokerOption5 result = new AstServiceBrokerOption.AstServiceBrokerOption5(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// snapshot_option
    /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
    /// 	 | READ_COMMITTED_SNAPSHOT  on_off
    /// 	 | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
    /// </summary>
    public abstract partial class AstSnapshotOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "ALLOW_SNAPSHOT_ISOLATION  on_off\r\n | READ_COMMITTED_SNAPSHOT  on_off\r\n | MEMORY_O" +
            "PTIMIZED_ELEVATE_TO_SNAPSHOT = on_off\r\n";
        
        private static string _ruleName = "snapshot_option";
        
        /// <summary>
        /// snapshot_option : ALLOW_SNAPSHOT_ISOLATION on_off 
        /// </summary>
        public partial class AstSnapshotOption1 : AstSnapshotOption
        {
            
            private static string _ruleName1 = "snapshot_option";
            
            private AstOnOff _onOff;
            
            internal AstSnapshotOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        /// <summary>
        /// snapshot_option : READ_COMMITTED_SNAPSHOT on_off 
        /// </summary>
        public partial class AstSnapshotOption2 : AstSnapshotOption
        {
            
            private static string _ruleName1 = "snapshot_option";
            
            private AstOnOff _onOff;
            
            internal AstSnapshotOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        /// <summary>
        /// snapshot_option : MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT=on_off 
        /// </summary>
        public partial class AstSnapshotOption3 : AstSnapshotOption
        {
            
            private static string _ruleName1 = "snapshot_option";
            
            private AstOnOff _MEMORYOPTIMIZEDELEVATETOSNAPSHOT;
            
            internal AstSnapshotOption3(ParserRuleContext ctx, AstOnOff mEMORYOPTIMIZEDELEVATETOSNAPSHOT) : 
                    base(ctx)
            {
                _MEMORYOPTIMIZEDELEVATETOSNAPSHOT = mEMORYOPTIMIZEDELEVATETOSNAPSHOT;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff MemoryOptimizedElevateToSnapshot
            {
                get
                {
                    return _MEMORYOPTIMIZEDELEVATETOSNAPSHOT;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        

        
        internal AstSnapshotOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSnapshotOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSnapshotOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSnapshotOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSnapshotOption.AstSnapshotOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstSnapshotOption.AstSnapshotOption2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstSnapshotOption.AstSnapshotOption3(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// snapshot_option : 
        ///    ALLOW_SNAPSHOT_ISOLATION on_off 
        /// </summary>
        public static AstSnapshotOption SnapshotOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSnapshotOption.AstSnapshotOption1 result = new AstSnapshotOption.AstSnapshotOption1(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// sql_option
    /// 	 : ANSI_NULL_DEFAULT  on_off
    /// 	 | ANSI_NULLS  on_off
    /// 	 | ANSI_PADDING  on_off
    /// 	 | ANSI_WARNINGS  on_off
    /// 	 | ARITHABORT  on_off
    /// 	 | COMPATIBILITY_LEVEL  EQUAL  decimal
    /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
    /// 	 | NUMERIC_ROUNDABORT  on_off
    /// 	 | QUOTED_IDENTIFIER  on_off
    /// 	 | RECURSIVE_TRIGGERS  on_off
    /// </summary>
    public abstract partial class AstSqlOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = @"ANSI_NULL_DEFAULT  on_off
 | ANSI_NULLS  on_off
 | ANSI_PADDING  on_off
 | ANSI_WARNINGS  on_off
 | ARITHABORT  on_off
 | COMPATIBILITY_LEVEL  EQUAL  decimal
 | CONCAT_NULL_YIELDS_NULL  on_off
 | NUMERIC_ROUNDABORT  on_off
 | QUOTED_IDENTIFIER  on_off
 | RECURSIVE_TRIGGERS  on_off
";
        
        private static string _ruleName = "sql_option";
        
        /// <summary>
        /// sql_option : ANSI_NULL_DEFAULT on_off 
        /// </summary>
        public partial class AstSqlOption1 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_NULLS on_off 
        /// </summary>
        public partial class AstSqlOption2 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_PADDING on_off 
        /// </summary>
        public partial class AstSqlOption3 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_WARNINGS on_off 
        /// </summary>
        public partial class AstSqlOption4 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ARITHABORT on_off 
        /// </summary>
        public partial class AstSqlOption5 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : COMPATIBILITY_LEVEL EQUAL decimal 
        /// </summary>
        public partial class AstSqlOption6 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstDecimal _decimal;
            
            internal AstSqlOption6(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : CONCAT_NULL_YIELDS_NULL on_off 
        /// </summary>
        public partial class AstSqlOption7 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : NUMERIC_ROUNDABORT on_off 
        /// </summary>
        public partial class AstSqlOption8 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : QUOTED_IDENTIFIER on_off 
        /// </summary>
        public partial class AstSqlOption9 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption9(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : RECURSIVE_TRIGGERS on_off 
        /// </summary>
        public partial class AstSqlOption10 : AstSqlOption
        {
            
            private static string _ruleName1 = "sql_option";
            
            private AstOnOff _onOff;
            
            internal AstSqlOption10(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        

        
        internal AstSqlOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSqlOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSqlOption.AstSqlOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption2(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 3))
            {
                return new AstSqlOption.AstSqlOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstSqlOption.AstSqlOption4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstSqlOption.AstSqlOption5(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 6))
            {
                return new AstSqlOption.AstSqlOption6(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 7))
            {
                return new AstSqlOption.AstSqlOption7(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 8))
            {
                return new AstSqlOption.AstSqlOption8(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 9))
            {
                return new AstSqlOption.AstSqlOption9(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 10))
            {
                return new AstSqlOption.AstSqlOption10(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// sql_option : 
        ///    ANSI_NULL_DEFAULT on_off 
        /// </summary>
        public static AstSqlOption SqlOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSqlOption.AstSqlOption1 result = new AstSqlOption.AstSqlOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// sql_option : 
        ///    COMPATIBILITY_LEVEL EQUAL decimal 
        /// </summary>
        public static AstSqlOption SqlOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSqlOption.AstSqlOption6 result = new AstSqlOption.AstSqlOption6(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// termination
    /// 	 : ROLLBACK  AFTER  seconds = decimal
    /// 	 | ROLLBACK  IMMEDIATE
    /// 	 | NO_WAIT
    /// </summary>
    public abstract partial class AstTermination : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "ROLLBACK  AFTER  seconds = decimal\r\n | ROLLBACK  IMMEDIATE\r\n | NO_WAIT\r\n";
        
        private static string _ruleName = "termination";
        
        /// <summary>
        /// termination : ROLLBACK AFTER seconds=decimal 
        /// </summary>
        public partial class AstTermination1 : AstTermination
        {
            
            private static string _ruleName1 = "termination";
            
            private AstDecimal _seconds;
            
            internal AstTermination1(ParserRuleContext ctx, AstDecimal seconds) : 
                    base(ctx)
            {
                _seconds = seconds;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Seconds
            {
                get
                {
                    return _seconds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        /// <summary>
        /// termination : ROLLBACK IMMEDIATE 
        /// </summary>
        public partial class AstTermination2 : AstTermination
        {
            
            private static string _ruleName1 = "termination";
            
            internal AstTermination2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        /// <summary>
        /// termination : NO_WAIT 
        /// </summary>
        public partial class AstTermination3 : AstTermination
        {
            
            private static string _ruleName1 = "termination";
            
            internal AstTermination3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        

        
        internal AstTermination(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTermination(Position p) : 
                base(p)
        {
        }
        
        internal AstTermination(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTermination Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTermination.AstTermination1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstTermination.AstTermination2(ctx);
            }
            if ((index == 3))
            {
                return new AstTermination.AstTermination3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// termination : 
        ///    ROLLBACK AFTER seconds=decimal 
        /// </summary>
        public static AstTermination Termination(ParserRuleContext ctx, AstDecimal seconds)
        {
            AstTermination.AstTermination1 result = new AstTermination.AstTermination1(ctx, seconds);
            return result;
        }
        
        /// <summary>
        /// termination : 
        ///    ROLLBACK IMMEDIATE 
        /// </summary>
        public static AstTermination Termination(ParserRuleContext ctx)
        {
            AstTermination.AstTermination2 result = new AstTermination.AstTermination2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// if_exists
    /// 	 : IF  EXISTS
    /// </summary>
    public partial class AstIfExists : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "IF  EXISTS\r\n";
        
        private static string _ruleName = "if_exists";
        
        internal AstIfExists(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIfExists(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIfExists(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfExists(this);
        }
        
        public static AstIfExists Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstIfExists(ctx);
        }
        
        /// <summary>
        /// if_exists : 
        ///    IF EXISTS 
        /// </summary>
        public static AstIfExists IfExists(ParserRuleContext ctx)
        {
            AstIfExists result = new AstIfExists(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_type
    /// 	 : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateType : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaTypeRef), false, false, "schema_type_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDataType), false, false, "data_type"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDefaultValue), false, false, "default_value"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnDefTableConstraints), false, false, "column_def_table_constraints"))));
        
        private AstSchemaTypeRef _name;
        
        private AstDataType _dataType;
        
        private AstDefaultValue _defaultValue;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private static string _ruleValue = "CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_value)?  (AS  TAB" +
            "LE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?\r\n";
        
        private static string _ruleName = "create_type";
        
        internal AstCreateType(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateType(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateType(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateType(ParserRuleContext ctx, AstSchemaTypeRef name, AstDataType dataType, AstDefaultValue defaultValue, AstColumnDefTableConstraints columnDefTableConstraints) : 
                base(ctx)
        {
            _name = name;
            _dataType = dataType;
            _defaultValue = defaultValue;
            _columnDefTableConstraints = columnDefTableConstraints;
        }
        
        public virtual AstSchemaTypeRef Name
        {
            get
            {
                return _name;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return _dataType;
            }
        }
        
        public virtual AstDefaultValue DefaultValue
        {
            get
            {
                return _defaultValue;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return _columnDefTableConstraints;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateType(this);
        }
        
        public static AstCreateType Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCreateType(ctx, list.Get<AstSchemaTypeRef>(0), list.Get<AstDataType>(1), list.Get<AstDefaultValue>(2), list.Get<AstColumnDefTableConstraints>(3));
        }
        
        /// <summary>
        /// create_type : 
        ///    CREATE TYPE name=schema_type_ref FROM data_type default_value AS TABLE ( column_def_table_constraints ) 
        /// </summary>
        public static AstCreateType CreateType(ParserRuleContext ctx, AstSchemaTypeRef name, AstDataType dataType, AstDefaultValue defaultValue, AstColumnDefTableConstraints columnDefTableConstraints)
        {
            AstCreateType result = new AstCreateType(ctx, name, dataType, defaultValue, columnDefTableConstraints);
            return result;
        }
    }
    
    /// <summary>
    /// drop_type
    /// 	 : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref
    /// </summary>
    public partial class AstDropType : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSchemaTypeRef), false, false, "schema_type_ref"))));
        
        private AstSchemaTypeRef _name;
        
        private static string _ruleValue = "DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref\r\n";
        
        private static string _ruleName = "drop_type";
        
        internal AstDropType(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropType(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropType(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropType(ParserRuleContext ctx, AstSchemaTypeRef name) : 
                base(ctx)
        {
            _name = name;
        }
        
        public virtual AstSchemaTypeRef Name
        {
            get
            {
                return _name;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropType(this);
        }
        
        public static AstDropType Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDropType(ctx, list.Get<AstSchemaTypeRef>(0));
        }
        
        /// <summary>
        /// drop_type : 
        ///    DROP TYPE IF EXISTS name=schema_type_ref 
        /// </summary>
        public static AstDropType DropType(ParserRuleContext ctx, AstSchemaTypeRef name)
        {
            AstDropType result = new AstDropType(ctx, name);
            return result;
        }
    }
    
    /// <summary>
    /// rowset_function_limited
    /// 	 : openquery_args
    /// 	 | open_data_source
    /// </summary>
    public abstract partial class AstRowsetFunctionLimited : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOpenqueryArgs), false, false, "openquery_args")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstOpenDataSource), false, false, "open_data_source"))));
        
        private static string _ruleValue = "openquery_args\r\n | open_data_source\r\n";
        
        private static string _ruleName = "rowset_function_limited";
        
        /// <summary>
        /// rowset_function_limited : openquery_args 
        /// </summary>
        public partial class AstRowsetFunctionLimited1 : AstRowsetFunctionLimited
        {
            
            private static string _ruleName1 = "rowset_function_limited";
            
            private AstOpenqueryArgs _openqueryArgs;
            
            internal AstRowsetFunctionLimited1(ParserRuleContext ctx, AstOpenqueryArgs openqueryArgs) : 
                    base(ctx)
            {
                _openqueryArgs = openqueryArgs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOpenqueryArgs OpenqueryArgs
            {
                get
                {
                    return _openqueryArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunctionLimited(this);
            }
        }
        /// <summary>
        /// rowset_function_limited : open_data_source 
        /// </summary>
        public partial class AstRowsetFunctionLimited2 : AstRowsetFunctionLimited
        {
            
            private static string _ruleName1 = "rowset_function_limited";
            
            private AstOpenDataSource _openDataSource;
            
            internal AstRowsetFunctionLimited2(ParserRuleContext ctx, AstOpenDataSource openDataSource) : 
                    base(ctx)
            {
                _openDataSource = openDataSource;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOpenDataSource OpenDataSource
            {
                get
                {
                    return _openDataSource;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunctionLimited(this);
            }
        }
        

        
        internal AstRowsetFunctionLimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRowsetFunctionLimited(Position p) : 
                base(p)
        {
        }
        
        internal AstRowsetFunctionLimited(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRowsetFunctionLimited Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRowsetFunctionLimited.AstRowsetFunctionLimited1(ctx, list.Get<AstOpenqueryArgs>(0));
            }
            if ((index == 2))
            {
                return new AstRowsetFunctionLimited.AstRowsetFunctionLimited2(ctx, list.Get<AstOpenDataSource>(0));
            }
            return null;
        }
        
        /// <summary>
        /// rowset_function_limited : 
        ///    openquery_args 
        /// </summary>
        public static AstRowsetFunctionLimited RowsetFunctionLimited(ParserRuleContext ctx, AstOpenqueryArgs openqueryArgs)
        {
            AstRowsetFunctionLimited.AstRowsetFunctionLimited1 result = new AstRowsetFunctionLimited.AstRowsetFunctionLimited1(ctx, openqueryArgs);
            return result;
        }
        
        /// <summary>
        /// rowset_function_limited : 
        ///    open_data_source 
        /// </summary>
        public static AstRowsetFunctionLimited RowsetFunctionLimited(ParserRuleContext ctx, AstOpenDataSource openDataSource)
        {
            AstRowsetFunctionLimited.AstRowsetFunctionLimited2 result = new AstRowsetFunctionLimited.AstRowsetFunctionLimited2(ctx, openDataSource);
            return result;
        }
    }
    
    /// <summary>
    /// declare_statement
    /// 	 : DECLARE  local_id  AS?  declare_object_table
    /// 	 | DECLARE  declare_locals
    /// 	 | DECLARE  local_id  AS?  xml_type_definition
    /// 	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_declarations  RR_BRACKET
    /// </summary>
    public abstract partial class AstDeclareStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDeclareObjectTable), false, false, "declare_object_table")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstXmlTypeDefinition), false, false, "xml_type_definition")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDeclareLocals), false, false, "declare_locals")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstXmlDeclarations), false, false, "xml_declarations"))));
        
        private static string _ruleValue = "DECLARE  local_id  AS?  declare_object_table\r\n | DECLARE  declare_locals\r\n | DECL" +
            "ARE  local_id  AS?  xml_type_definition\r\n | WITH  XMLNAMESPACES  LR_BRACKET  xml" +
            "_declarations  RR_BRACKET\r\n";
        
        private static string _ruleName = "declare_statement";
        
        /// <summary>
        /// declare_statement : DECLARE local_id AS? declare_object_table 
        /// </summary>
        public partial class AstDeclareStatement1 : AstDeclareStatement
        {
            
            private static string _ruleName1 = "declare_statement";
            
            private AstLocalId _localId;
            
            private AstDeclareObjectTable _declareObjectTable;
            
            internal AstDeclareStatement1(ParserRuleContext ctx, AstLocalId localId, AstDeclareObjectTable declareObjectTable) : 
                    base(ctx)
            {
                _localId = localId;
                _declareObjectTable = declareObjectTable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstDeclareObjectTable DeclareObjectTable
            {
                get
                {
                    return _declareObjectTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : DECLARE declare_locals 
        /// </summary>
        public partial class AstDeclareStatement2 : AstDeclareStatement
        {
            
            private static string _ruleName1 = "declare_statement";
            
            private AstDeclareLocals _declareLocals;
            
            internal AstDeclareStatement2(ParserRuleContext ctx, AstDeclareLocals declareLocals) : 
                    base(ctx)
            {
                _declareLocals = declareLocals;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDeclareLocals DeclareLocals
            {
                get
                {
                    return _declareLocals;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : DECLARE local_id AS? xml_type_definition 
        /// </summary>
        public partial class AstDeclareStatement3 : AstDeclareStatement
        {
            
            private static string _ruleName1 = "declare_statement";
            
            private AstLocalId _localId;
            
            private AstXmlTypeDefinition _xmlTypeDefinition;
            
            internal AstDeclareStatement3(ParserRuleContext ctx, AstLocalId localId, AstXmlTypeDefinition xmlTypeDefinition) : 
                    base(ctx)
            {
                _localId = localId;
                _xmlTypeDefinition = xmlTypeDefinition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstXmlTypeDefinition XmlTypeDefinition
            {
                get
                {
                    return _xmlTypeDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : WITH XMLNAMESPACES LR_BRACKET xml_declarations RR_BRACKET 
        /// </summary>
        public partial class AstDeclareStatement4 : AstDeclareStatement
        {
            
            private static string _ruleName1 = "declare_statement";
            
            private AstXmlDeclarations _xmlDeclarations;
            
            internal AstDeclareStatement4(ParserRuleContext ctx, AstXmlDeclarations xmlDeclarations) : 
                    base(ctx)
            {
                _xmlDeclarations = xmlDeclarations;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstXmlDeclarations XmlDeclarations
            {
                get
                {
                    return _xmlDeclarations;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        

        
        internal AstDeclareStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDeclareStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDeclareStatement.AstDeclareStatement1(ctx, list.Get<AstLocalId>(0), list.Get<AstDeclareObjectTable>(1));
            }
            if ((index == 2))
            {
                return new AstDeclareStatement.AstDeclareStatement2(ctx, list.Get<AstDeclareLocals>(0));
            }
            if ((index == 3))
            {
                return new AstDeclareStatement.AstDeclareStatement3(ctx, list.Get<AstLocalId>(0), list.Get<AstXmlTypeDefinition>(1));
            }
            if ((index == 4))
            {
                return new AstDeclareStatement.AstDeclareStatement4(ctx, list.Get<AstXmlDeclarations>(0));
            }
            return null;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE local_id AS? declare_object_table 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstLocalId localId, AstDeclareObjectTable declareObjectTable)
        {
            AstDeclareStatement.AstDeclareStatement1 result = new AstDeclareStatement.AstDeclareStatement1(ctx, localId, declareObjectTable);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE declare_locals 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstDeclareLocals declareLocals)
        {
            AstDeclareStatement.AstDeclareStatement2 result = new AstDeclareStatement.AstDeclareStatement2(ctx, declareLocals);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE local_id AS? xml_type_definition 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstLocalId localId, AstXmlTypeDefinition xmlTypeDefinition)
        {
            AstDeclareStatement.AstDeclareStatement3 result = new AstDeclareStatement.AstDeclareStatement3(ctx, localId, xmlTypeDefinition);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    WITH XMLNAMESPACES ( xml_declarations ) 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstXmlDeclarations xmlDeclarations)
        {
            AstDeclareStatement.AstDeclareStatement4 result = new AstDeclareStatement.AstDeclareStatement4(ctx, xmlDeclarations);
            return result;
        }
    }
    
    /// <summary>
    /// declare_object_table
    /// 	 : table_type_definition
    /// 	 | full_table_ref
    /// </summary>
    public abstract partial class AstDeclareObjectTable : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableTypeDefinition), false, false, "table_type_definition")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"))));
        
        private static string _ruleValue = "table_type_definition\r\n | full_table_ref\r\n";
        
        private static string _ruleName = "declare_object_table";
        
        /// <summary>
        /// declare_object_table : table_type_definition 
        /// </summary>
        public partial class AstDeclareObjectTable1 : AstDeclareObjectTable
        {
            
            private static string _ruleName1 = "declare_object_table";
            
            private AstTableTypeDefinition _tableTypeDefinition;
            
            internal AstDeclareObjectTable1(ParserRuleContext ctx, AstTableTypeDefinition tableTypeDefinition) : 
                    base(ctx)
            {
                _tableTypeDefinition = tableTypeDefinition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableTypeDefinition TableTypeDefinition
            {
                get
                {
                    return _tableTypeDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareObjectTable(this);
            }
        }
        /// <summary>
        /// declare_object_table : full_table_ref 
        /// </summary>
        public partial class AstDeclareObjectTable2 : AstDeclareObjectTable
        {
            
            private static string _ruleName1 = "declare_object_table";
            
            private AstFullTableRef _fullTableRef;
            
            internal AstDeclareObjectTable2(ParserRuleContext ctx, AstFullTableRef fullTableRef) : 
                    base(ctx)
            {
                _fullTableRef = fullTableRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareObjectTable(this);
            }
        }
        

        
        internal AstDeclareObjectTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareObjectTable(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareObjectTable(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDeclareObjectTable Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDeclareObjectTable.AstDeclareObjectTable1(ctx, list.Get<AstTableTypeDefinition>(0));
            }
            if ((index == 2))
            {
                return new AstDeclareObjectTable.AstDeclareObjectTable2(ctx, list.Get<AstFullTableRef>(0));
            }
            return null;
        }
        
        /// <summary>
        /// declare_object_table : 
        ///    table_type_definition 
        /// </summary>
        public static AstDeclareObjectTable DeclareObjectTable(ParserRuleContext ctx, AstTableTypeDefinition tableTypeDefinition)
        {
            AstDeclareObjectTable.AstDeclareObjectTable1 result = new AstDeclareObjectTable.AstDeclareObjectTable1(ctx, tableTypeDefinition);
            return result;
        }
        
        /// <summary>
        /// declare_object_table : 
        ///    full_table_ref 
        /// </summary>
        public static AstDeclareObjectTable DeclareObjectTable(ParserRuleContext ctx, AstFullTableRef fullTableRef)
        {
            AstDeclareObjectTable.AstDeclareObjectTable2 result = new AstDeclareObjectTable.AstDeclareObjectTable2(ctx, fullTableRef);
            return result;
        }
    }
    
    /// <summary>
    /// xml_declaration
    /// 	 : xml_namespace_uri = stringtext  AS  id_
    /// 	 | DEFAULT  stringtext
    /// </summary>
    public abstract partial class AstXmlDeclaration : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "xml_namespace_uri = stringtext  AS  id_\r\n | DEFAULT  stringtext\r\n";
        
        private static string _ruleName = "xml_declaration";
        
        /// <summary>
        /// xml_declaration : xml_namespace_uri=stringtext AS id_ 
        /// </summary>
        public partial class AstXmlDeclaration1 : AstXmlDeclaration
        {
            
            private static string _ruleName1 = "xml_declaration";
            
            private AstStringtext _xmlNamespaceUri;
            
            private AstId _id;
            
            internal AstXmlDeclaration1(ParserRuleContext ctx, AstStringtext xmlNamespaceUri, AstId id) : 
                    base(ctx)
            {
                _xmlNamespaceUri = xmlNamespaceUri;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext XmlNamespaceUri
            {
                get
                {
                    return _xmlNamespaceUri;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDeclaration(this);
            }
        }
        /// <summary>
        /// xml_declaration : DEFAULT stringtext 
        /// </summary>
        public partial class AstXmlDeclaration2 : AstXmlDeclaration
        {
            
            private static string _ruleName1 = "xml_declaration";
            
            private AstStringtext _stringtext;
            
            internal AstXmlDeclaration2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDeclaration(this);
            }
        }
        

        
        internal AstXmlDeclaration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlDeclaration(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlDeclaration(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstXmlDeclaration Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstXmlDeclaration.AstXmlDeclaration1(ctx, list.Get<AstStringtext>(0), list.Get<AstId>(1));
            }
            if ((index == 2))
            {
                return new AstXmlDeclaration.AstXmlDeclaration2(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// xml_declaration : 
        ///    xml_namespace_uri=stringtext AS id_ 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(ParserRuleContext ctx, AstStringtext xmlNamespaceUri, AstId id)
        {
            AstXmlDeclaration.AstXmlDeclaration1 result = new AstXmlDeclaration.AstXmlDeclaration1(ctx, xmlNamespaceUri, id);
            return result;
        }
        
        /// <summary>
        /// xml_declaration : 
        ///    DEFAULT stringtext 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstXmlDeclaration.AstXmlDeclaration2 result = new AstXmlDeclaration.AstXmlDeclaration2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_statement
    /// 	 : CLOSE  GLOBAL?  cursor_name
    /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name
    /// 	 | declare_cursor
    /// 	 | fetch_cursor
    /// 	 | OPEN  GLOBAL?  cursor_name
    /// </summary>
    public abstract partial class AstCursorStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCursorName), false, false, "cursor_name")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCursorName), false, false, "cursor_name")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDeclareCursor), false, false, "declare_cursor")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstFetchCursor), false, false, "fetch_cursor")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstCursorName), false, false, "cursor_name"))));
        
        private static string _ruleValue = "CLOSE  GLOBAL?  cursor_name\r\n | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name\r\n | dec" +
            "lare_cursor\r\n | fetch_cursor\r\n | OPEN  GLOBAL?  cursor_name\r\n";
        
        private static string _ruleName = "cursor_statement";
        
        /// <summary>
        /// cursor_statement : CLOSE GLOBAL? cursor_name 
        /// </summary>
        public partial class AstCursorStatement1 : AstCursorStatement
        {
            
            private static string _ruleName1 = "cursor_statement";
            
            private AstCursorName _cursorName;
            
            internal AstCursorStatement1(ParserRuleContext ctx, AstCursorName cursorName) : 
                    base(ctx)
            {
                _cursorName = cursorName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCursorName CursorName
            {
                get
                {
                    return _cursorName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : DEALLOCATE GLOBAL? CURSOR? cursor_name 
        /// </summary>
        public partial class AstCursorStatement2 : AstCursorStatement
        {
            
            private static string _ruleName1 = "cursor_statement";
            
            private AstCursorName _cursorName;
            
            internal AstCursorStatement2(ParserRuleContext ctx, AstCursorName cursorName) : 
                    base(ctx)
            {
                _cursorName = cursorName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCursorName CursorName
            {
                get
                {
                    return _cursorName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : declare_cursor 
        /// </summary>
        public partial class AstCursorStatement3 : AstCursorStatement
        {
            
            private static string _ruleName1 = "cursor_statement";
            
            private AstDeclareCursor _declareCursor;
            
            internal AstCursorStatement3(ParserRuleContext ctx, AstDeclareCursor declareCursor) : 
                    base(ctx)
            {
                _declareCursor = declareCursor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDeclareCursor DeclareCursor
            {
                get
                {
                    return _declareCursor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : fetch_cursor 
        /// </summary>
        public partial class AstCursorStatement4 : AstCursorStatement
        {
            
            private static string _ruleName1 = "cursor_statement";
            
            private AstFetchCursor _fetchCursor;
            
            internal AstCursorStatement4(ParserRuleContext ctx, AstFetchCursor fetchCursor) : 
                    base(ctx)
            {
                _fetchCursor = fetchCursor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFetchCursor FetchCursor
            {
                get
                {
                    return _fetchCursor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : OPEN GLOBAL? cursor_name 
        /// </summary>
        public partial class AstCursorStatement5 : AstCursorStatement
        {
            
            private static string _ruleName1 = "cursor_statement";
            
            private AstCursorName _cursorName;
            
            internal AstCursorStatement5(ParserRuleContext ctx, AstCursorName cursorName) : 
                    base(ctx)
            {
                _cursorName = cursorName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCursorName CursorName
            {
                get
                {
                    return _cursorName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        

        
        internal AstCursorStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCursorStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCursorStatement.AstCursorStatement1(ctx, list.Get<AstCursorName>(0));
            }
            if ((index == 2))
            {
                return new AstCursorStatement.AstCursorStatement2(ctx, list.Get<AstCursorName>(0));
            }
            if ((index == 3))
            {
                return new AstCursorStatement.AstCursorStatement3(ctx, list.Get<AstDeclareCursor>(0));
            }
            if ((index == 4))
            {
                return new AstCursorStatement.AstCursorStatement4(ctx, list.Get<AstFetchCursor>(0));
            }
            if ((index == 5))
            {
                return new AstCursorStatement.AstCursorStatement5(ctx, list.Get<AstCursorName>(0));
            }
            return null;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    CLOSE GLOBAL? cursor_name 
        /// </summary>
        public static AstCursorStatement CursorStatement(ParserRuleContext ctx, AstCursorName cursorName)
        {
            AstCursorStatement.AstCursorStatement1 result = new AstCursorStatement.AstCursorStatement1(ctx, cursorName);
            return result;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    declare_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(ParserRuleContext ctx, AstDeclareCursor declareCursor)
        {
            AstCursorStatement.AstCursorStatement3 result = new AstCursorStatement.AstCursorStatement3(ctx, declareCursor);
            return result;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    fetch_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(ParserRuleContext ctx, AstFetchCursor fetchCursor)
        {
            AstCursorStatement.AstCursorStatement4 result = new AstCursorStatement.AstCursorStatement4(ctx, fetchCursor);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to
    /// 	 : TO  (logical_device_ids  TO  disk_tape_url_values)
    /// </summary>
    public partial class AstBackupTo : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLogicalDeviceIds), false, false, "logical_device_ids"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDiskTapeUrlValues), false, false, "disk_tape_url_values"))));
        
        private AstLogicalDeviceIds _logicalDeviceIds;
        
        private AstDiskTapeUrlValues _diskTapeUrlValues;
        
        private static string _ruleValue = "TO  (logical_device_ids  TO  disk_tape_url_values)\r\n";
        
        private static string _ruleName = "backup_to";
        
        internal AstBackupTo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupTo(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupTo(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstBackupTo(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds, AstDiskTapeUrlValues diskTapeUrlValues) : 
                base(ctx)
        {
            _logicalDeviceIds = logicalDeviceIds;
            _diskTapeUrlValues = diskTapeUrlValues;
        }
        
        public virtual AstLogicalDeviceIds LogicalDeviceIds
        {
            get
            {
                return _logicalDeviceIds;
            }
        }
        
        public virtual AstDiskTapeUrlValues DiskTapeUrlValues
        {
            get
            {
                return _diskTapeUrlValues;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupTo(this);
        }
        
        public static AstBackupTo Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstBackupTo(ctx, list.Get<AstLogicalDeviceIds>(0), list.Get<AstDiskTapeUrlValues>(1));
        }
        
        /// <summary>
        /// backup_to : 
        ///    TO logical_device_ids TO disk_tape_url_values 
        /// </summary>
        public static AstBackupTo BackupTo(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds, AstDiskTapeUrlValues diskTapeUrlValues)
        {
            AstBackupTo result = new AstBackupTo(ctx, logicalDeviceIds, diskTapeUrlValues);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to_mirror
    /// 	 : MIRROR  TO  (logical_device_ids | disk_tape_url_values)
    /// </summary>
    public abstract partial class AstBackupToMirror : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLogicalDeviceIds), false, false, "logical_device_ids")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDiskTapeUrlValues), false, false, "disk_tape_url_values"))));
        
        private static string _ruleValue = "MIRROR  TO  (logical_device_ids | disk_tape_url_values)\r\n";
        
        private static string _ruleName = "backup_to_mirror";
        
        /// <summary>
        /// backup_to_mirror : MIRROR TO logical_device_ids 
        /// </summary>
        public partial class AstBackupToMirror1 : AstBackupToMirror
        {
            
            private static string _ruleName1 = "backup_to_mirror";
            
            private AstLogicalDeviceIds _logicalDeviceIds;
            
            internal AstBackupToMirror1(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds) : 
                    base(ctx)
            {
                _logicalDeviceIds = logicalDeviceIds;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLogicalDeviceIds LogicalDeviceIds
            {
                get
                {
                    return _logicalDeviceIds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupToMirror(this);
            }
        }
        /// <summary>
        /// backup_to_mirror : MIRROR TO disk_tape_url_values 
        /// </summary>
        public partial class AstBackupToMirror2 : AstBackupToMirror
        {
            
            private static string _ruleName1 = "backup_to_mirror";
            
            private AstDiskTapeUrlValues _diskTapeUrlValues;
            
            internal AstBackupToMirror2(ParserRuleContext ctx, AstDiskTapeUrlValues diskTapeUrlValues) : 
                    base(ctx)
            {
                _diskTapeUrlValues = diskTapeUrlValues;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDiskTapeUrlValues DiskTapeUrlValues
            {
                get
                {
                    return _diskTapeUrlValues;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupToMirror(this);
            }
        }
        

        
        internal AstBackupToMirror(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupToMirror(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupToMirror(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBackupToMirror Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBackupToMirror.AstBackupToMirror1(ctx, list.Get<AstLogicalDeviceIds>(0));
            }
            if ((index == 2))
            {
                return new AstBackupToMirror.AstBackupToMirror2(ctx, list.Get<AstDiskTapeUrlValues>(0));
            }
            return null;
        }
        
        /// <summary>
        /// backup_to_mirror : 
        ///    MIRROR TO logical_device_ids 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds)
        {
            AstBackupToMirror.AstBackupToMirror1 result = new AstBackupToMirror.AstBackupToMirror1(ctx, logicalDeviceIds);
            return result;
        }
        
        /// <summary>
        /// backup_to_mirror : 
        ///    MIRROR TO disk_tape_url_values 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(ParserRuleContext ctx, AstDiskTapeUrlValues diskTapeUrlValues)
        {
            AstBackupToMirror.AstBackupToMirror2 result = new AstBackupToMirror.AstBackupToMirror2(ctx, diskTapeUrlValues);
            return result;
        }
    }
    
    /// <summary>
    /// backup_certificate_private_key
    /// 	 : FILE  EQUAL  private_key_file = stringtext
    /// 	 | by_password_crypt
    /// </summary>
    public abstract partial class AstBackupCertificatePrivateKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstByPasswordCrypt), false, false, "by_password_crypt"))));
        
        private static string _ruleValue = "FILE  EQUAL  private_key_file = stringtext\r\n | by_password_crypt\r\n";
        
        private static string _ruleName = "backup_certificate_private_key";
        
        /// <summary>
        /// backup_certificate_private_key : FILE EQUAL private_key_file=stringtext 
        /// </summary>
        public partial class AstBackupCertificatePrivateKey1 : AstBackupCertificatePrivateKey
        {
            
            private static string _ruleName1 = "backup_certificate_private_key";
            
            private AstStringtext _privateKeyFile;
            
            internal AstBackupCertificatePrivateKey1(ParserRuleContext ctx, AstStringtext privateKeyFile) : 
                    base(ctx)
            {
                _privateKeyFile = privateKeyFile;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext PrivateKeyFile
            {
                get
                {
                    return _privateKeyFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupCertificatePrivateKey(this);
            }
        }
        /// <summary>
        /// backup_certificate_private_key : by_password_crypt 
        /// </summary>
        public partial class AstBackupCertificatePrivateKey2 : AstBackupCertificatePrivateKey
        {
            
            private static string _ruleName1 = "backup_certificate_private_key";
            
            private AstByPasswordCrypt _byPasswordCrypt;
            
            internal AstBackupCertificatePrivateKey2(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt) : 
                    base(ctx)
            {
                _byPasswordCrypt = byPasswordCrypt;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstByPasswordCrypt ByPasswordCrypt
            {
                get
                {
                    return _byPasswordCrypt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupCertificatePrivateKey(this);
            }
        }
        

        
        internal AstBackupCertificatePrivateKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupCertificatePrivateKey(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupCertificatePrivateKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBackupCertificatePrivateKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2(ctx, list.Get<AstByPasswordCrypt>(0));
            }
            return null;
        }
        
        /// <summary>
        /// backup_certificate_private_key : 
        ///    FILE EQUAL private_key_file=stringtext 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(ParserRuleContext ctx, AstStringtext privateKeyFile)
        {
            AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1 result = new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1(ctx, privateKeyFile);
            return result;
        }
        
        /// <summary>
        /// backup_certificate_private_key : 
        ///    by_password_crypt 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt)
        {
            AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2 result = new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2(ctx, byPasswordCrypt);
            return result;
        }
    }
    
    /// <summary>
    /// backup_setting
    /// 	 : DIFFERENTIAL
    /// 	 | COPY_ONLY
    /// 	 | CREDENTIAL
    /// 	 | FILE_SNAPSHOT
    /// 	 | NO_CHECKSUM
    /// 	 | CHECKSUM
    /// 	 | STOP_ON_ERROR
    /// 	 | CONTINUE_AFTER_ERROR
    /// 	 | RESTART
    /// 	 | DESCRIPTION  EQUAL  string_id
    /// 	 | NAME  EQUAL  backup_id
    /// 	 | EXPIREDATE  EQUAL  string_id
    /// 	 | RETAINDAYS  EQUAL  decimal_id
    /// 	 | MEDIADESCRIPTION  EQUAL  string_id
    /// 	 | MEDIANAME  EQUAL  stringtext
    /// 	 | BLOCKSIZE  EQUAL  decimal_id
    /// 	 | BUFFERCOUNT  EQUAL  decimal_id
    /// 	 | MAXTRANSFER  EQUAL  decimal_id
    /// 	 | STATS  (EQUAL  decimal)?
    /// 	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  server_certificate_value  RR_BRACKET
    /// 	 | compression
    /// 	 | rewind
    /// 	 | load_moun_load
    /// 	 | init_no_init
    /// 	 | no_skip
    /// 	 | format_noformat
    /// </summary>
    public abstract partial class AstBackupSetting : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(20, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlgorithmShort), false, false, "algorithm_short"), new Bb.Asts.AstRuleMatcherItem(typeof(AstServerCertificateValue), false, false, "server_certificate_value")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringId), false, false, "string_id")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstBackupId), false, false, "backup_id")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringId), false, false, "string_id")), new Bb.Asts.AstRuleMatcherItems(13, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalId), false, false, "decimal_id")), new Bb.Asts.AstRuleMatcherItems(14, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringId), false, false, "string_id")), new Bb.Asts.AstRuleMatcherItems(15, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(16, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalId), false, false, "decimal_id")), new Bb.Asts.AstRuleMatcherItems(17, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalId), false, false, "decimal_id")), new Bb.Asts.AstRuleMatcherItems(18, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalId), false, false, "decimal_id")), new Bb.Asts.AstRuleMatcherItems(19, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(21, new Bb.Asts.AstRuleMatcherItem(typeof(AstCompression), false, false, "compression")), new Bb.Asts.AstRuleMatcherItems(22, new Bb.Asts.AstRuleMatcherItem(typeof(AstRewind), false, false, "rewind")), new Bb.Asts.AstRuleMatcherItems(23, new Bb.Asts.AstRuleMatcherItem(typeof(AstLoadMounLoad), false, false, "load_moun_load")), new Bb.Asts.AstRuleMatcherItems(24, new Bb.Asts.AstRuleMatcherItem(typeof(AstInitNoInit), false, false, "init_no_init")), new Bb.Asts.AstRuleMatcherItems(25, new Bb.Asts.AstRuleMatcherItem(typeof(AstNoSkip), false, false, "no_skip")), new Bb.Asts.AstRuleMatcherItems(26, new Bb.Asts.AstRuleMatcherItem(typeof(AstFormatNoformat), false, false, "format_noformat"))));
        
        private static string _ruleValue = @"DIFFERENTIAL
 | COPY_ONLY
 | CREDENTIAL
 | FILE_SNAPSHOT
 | NO_CHECKSUM
 | CHECKSUM
 | STOP_ON_ERROR
 | CONTINUE_AFTER_ERROR
 | RESTART
 | DESCRIPTION  EQUAL  string_id
 | NAME  EQUAL  backup_id
 | EXPIREDATE  EQUAL  string_id
 | RETAINDAYS  EQUAL  decimal_id
 | MEDIADESCRIPTION  EQUAL  string_id
 | MEDIANAME  EQUAL  stringtext
 | BLOCKSIZE  EQUAL  decimal_id
 | BUFFERCOUNT  EQUAL  decimal_id
 | MAXTRANSFER  EQUAL  decimal_id
 | STATS  (EQUAL  decimal)?
 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  server_certificate_value  RR_BRACKET
 | compression
 | rewind
 | load_moun_load
 | init_no_init
 | no_skip
 | format_noformat
";
        
        private static string _ruleName = "backup_setting";
        
        /// <summary>
        /// backup_setting : DIFFERENTIAL 
        /// </summary>
        public partial class AstBackupSetting1 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : COPY_ONLY 
        /// </summary>
        public partial class AstBackupSetting2 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CREDENTIAL 
        /// </summary>
        public partial class AstBackupSetting3 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : FILE_SNAPSHOT 
        /// </summary>
        public partial class AstBackupSetting4 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : NO_CHECKSUM 
        /// </summary>
        public partial class AstBackupSetting5 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CHECKSUM 
        /// </summary>
        public partial class AstBackupSetting6 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : STOP_ON_ERROR 
        /// </summary>
        public partial class AstBackupSetting7 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CONTINUE_AFTER_ERROR 
        /// </summary>
        public partial class AstBackupSetting8 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : RESTART 
        /// </summary>
        public partial class AstBackupSetting9 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            internal AstBackupSetting9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : DESCRIPTION EQUAL string_id 
        /// </summary>
        public partial class AstBackupSetting10 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstStringId _stringId;
            
            internal AstBackupSetting10(ParserRuleContext ctx, AstStringId stringId) : 
                    base(ctx)
            {
                _stringId = stringId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringId StringId
            {
                get
                {
                    return _stringId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : NAME EQUAL backup_id 
        /// </summary>
        public partial class AstBackupSetting11 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstBackupId _backupId;
            
            internal AstBackupSetting11(ParserRuleContext ctx, AstBackupId backupId) : 
                    base(ctx)
            {
                _backupId = backupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBackupId BackupId
            {
                get
                {
                    return _backupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : EXPIREDATE EQUAL string_id 
        /// </summary>
        public partial class AstBackupSetting12 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstStringId _stringId;
            
            internal AstBackupSetting12(ParserRuleContext ctx, AstStringId stringId) : 
                    base(ctx)
            {
                _stringId = stringId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringId StringId
            {
                get
                {
                    return _stringId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : RETAINDAYS EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting13 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting13(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MEDIADESCRIPTION EQUAL string_id 
        /// </summary>
        public partial class AstBackupSetting14 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstStringId _stringId;
            
            internal AstBackupSetting14(ParserRuleContext ctx, AstStringId stringId) : 
                    base(ctx)
            {
                _stringId = stringId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringId StringId
            {
                get
                {
                    return _stringId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MEDIANAME EQUAL stringtext 
        /// </summary>
        public partial class AstBackupSetting15 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstStringtext _stringtext;
            
            internal AstBackupSetting15(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : BLOCKSIZE EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting16 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting16(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : BUFFERCOUNT EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting17 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting17(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MAXTRANSFER EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting18 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting18(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : STATS EQUAL decimal 
        /// </summary>
        public partial class AstBackupSetting19 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstDecimal _decimal;
            
            internal AstBackupSetting19(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : ENCRYPTION LR_BRACKET ALGORITHM EQUAL algorithm_short COMMA SERVER CERTIFICATE EQUAL server_certificate_value RR_BRACKET 
        /// </summary>
        public partial class AstBackupSetting20 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstAlgorithmShort _algorithmShort;
            
            private AstServerCertificateValue _serverCertificateValue;
            
            internal AstBackupSetting20(ParserRuleContext ctx, AstAlgorithmShort algorithmShort, AstServerCertificateValue serverCertificateValue) : 
                    base(ctx)
            {
                _algorithmShort = algorithmShort;
                _serverCertificateValue = serverCertificateValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlgorithmShort AlgorithmShort
            {
                get
                {
                    return _algorithmShort;
                }
            }
            
            public virtual AstServerCertificateValue ServerCertificateValue
            {
                get
                {
                    return _serverCertificateValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : compression 
        /// </summary>
        public partial class AstBackupSetting21 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstCompression _compression;
            
            internal AstBackupSetting21(ParserRuleContext ctx, AstCompression compression) : 
                    base(ctx)
            {
                _compression = compression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCompression Compression
            {
                get
                {
                    return _compression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : rewind 
        /// </summary>
        public partial class AstBackupSetting22 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstRewind _rewind;
            
            internal AstBackupSetting22(ParserRuleContext ctx, AstRewind rewind) : 
                    base(ctx)
            {
                _rewind = rewind;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRewind Rewind
            {
                get
                {
                    return _rewind;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : load_moun_load 
        /// </summary>
        public partial class AstBackupSetting23 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstLoadMounLoad _loadMounLoad;
            
            internal AstBackupSetting23(ParserRuleContext ctx, AstLoadMounLoad loadMounLoad) : 
                    base(ctx)
            {
                _loadMounLoad = loadMounLoad;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLoadMounLoad LoadMounLoad
            {
                get
                {
                    return _loadMounLoad;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : init_no_init 
        /// </summary>
        public partial class AstBackupSetting24 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstInitNoInit _initNoInit;
            
            internal AstBackupSetting24(ParserRuleContext ctx, AstInitNoInit initNoInit) : 
                    base(ctx)
            {
                _initNoInit = initNoInit;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstInitNoInit InitNoInit
            {
                get
                {
                    return _initNoInit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : no_skip 
        /// </summary>
        public partial class AstBackupSetting25 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstNoSkip _noSkip;
            
            internal AstBackupSetting25(ParserRuleContext ctx, AstNoSkip noSkip) : 
                    base(ctx)
            {
                _noSkip = noSkip;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstNoSkip NoSkip
            {
                get
                {
                    return _noSkip;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : format_noformat 
        /// </summary>
        public partial class AstBackupSetting26 : AstBackupSetting
        {
            
            private static string _ruleName1 = "backup_setting";
            
            private AstFormatNoformat _formatNoformat;
            
            internal AstBackupSetting26(ParserRuleContext ctx, AstFormatNoformat formatNoformat) : 
                    base(ctx)
            {
                _formatNoformat = formatNoformat;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFormatNoformat FormatNoformat
            {
                get
                {
                    return _formatNoformat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        

        
        internal AstBackupSetting(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupSetting(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupSetting(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBackupSetting Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting1(ctx);
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting2(ctx);
            }
            if ((index == 3))
            {
                return new AstBackupSetting.AstBackupSetting3(ctx);
            }
            if ((index == 4))
            {
                return new AstBackupSetting.AstBackupSetting4(ctx);
            }
            if ((index == 5))
            {
                return new AstBackupSetting.AstBackupSetting5(ctx);
            }
            if ((index == 6))
            {
                return new AstBackupSetting.AstBackupSetting6(ctx);
            }
            if ((index == 7))
            {
                return new AstBackupSetting.AstBackupSetting7(ctx);
            }
            if ((index == 8))
            {
                return new AstBackupSetting.AstBackupSetting8(ctx);
            }
            if ((index == 9))
            {
                return new AstBackupSetting.AstBackupSetting9(ctx);
            }
            if ((index == 10))
            {
                return new AstBackupSetting.AstBackupSetting10(ctx, list.Get<AstStringId>(0));
            }
            if ((index == 11))
            {
                return new AstBackupSetting.AstBackupSetting11(ctx, list.Get<AstBackupId>(0));
            }
            if ((index == 12))
            {
                return new AstBackupSetting.AstBackupSetting12(ctx, list.Get<AstStringId>(0));
            }
            if ((index == 13))
            {
                return new AstBackupSetting.AstBackupSetting13(ctx, list.Get<AstDecimalId>(0));
            }
            if ((index == 14))
            {
                return new AstBackupSetting.AstBackupSetting14(ctx, list.Get<AstStringId>(0));
            }
            if ((index == 15))
            {
                return new AstBackupSetting.AstBackupSetting15(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 16))
            {
                return new AstBackupSetting.AstBackupSetting16(ctx, list.Get<AstDecimalId>(0));
            }
            if ((index == 17))
            {
                return new AstBackupSetting.AstBackupSetting17(ctx, list.Get<AstDecimalId>(0));
            }
            if ((index == 18))
            {
                return new AstBackupSetting.AstBackupSetting18(ctx, list.Get<AstDecimalId>(0));
            }
            if ((index == 19))
            {
                return new AstBackupSetting.AstBackupSetting19(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 20))
            {
                return new AstBackupSetting.AstBackupSetting20(ctx, list.Get<AstAlgorithmShort>(0), list.Get<AstServerCertificateValue>(1));
            }
            if ((index == 21))
            {
                return new AstBackupSetting.AstBackupSetting21(ctx, list.Get<AstCompression>(0));
            }
            if ((index == 22))
            {
                return new AstBackupSetting.AstBackupSetting22(ctx, list.Get<AstRewind>(0));
            }
            if ((index == 23))
            {
                return new AstBackupSetting.AstBackupSetting23(ctx, list.Get<AstLoadMounLoad>(0));
            }
            if ((index == 24))
            {
                return new AstBackupSetting.AstBackupSetting24(ctx, list.Get<AstInitNoInit>(0));
            }
            if ((index == 25))
            {
                return new AstBackupSetting.AstBackupSetting25(ctx, list.Get<AstNoSkip>(0));
            }
            if ((index == 26))
            {
                return new AstBackupSetting.AstBackupSetting26(ctx, list.Get<AstFormatNoformat>(0));
            }
            return null;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    DIFFERENTIAL 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx)
        {
            AstBackupSetting.AstBackupSetting1 result = new AstBackupSetting.AstBackupSetting1(ctx);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    DESCRIPTION EQUAL string_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstStringId stringId)
        {
            AstBackupSetting.AstBackupSetting10 result = new AstBackupSetting.AstBackupSetting10(ctx, stringId);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    NAME EQUAL backup_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstBackupId backupId)
        {
            AstBackupSetting.AstBackupSetting11 result = new AstBackupSetting.AstBackupSetting11(ctx, backupId);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    RETAINDAYS EQUAL decimal_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstDecimalId decimalId)
        {
            AstBackupSetting.AstBackupSetting13 result = new AstBackupSetting.AstBackupSetting13(ctx, decimalId);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    MEDIANAME EQUAL stringtext 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstBackupSetting.AstBackupSetting15 result = new AstBackupSetting.AstBackupSetting15(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    STATS EQUAL decimal 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstBackupSetting.AstBackupSetting19 result = new AstBackupSetting.AstBackupSetting19(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    ENCRYPTION ( ALGORITHM EQUAL algorithm_short , SERVER CERTIFICATE EQUAL server_certificate_value ) 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstAlgorithmShort algorithmShort, AstServerCertificateValue serverCertificateValue)
        {
            AstBackupSetting.AstBackupSetting20 result = new AstBackupSetting.AstBackupSetting20(ctx, algorithmShort, serverCertificateValue);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    compression 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstCompression compression)
        {
            AstBackupSetting.AstBackupSetting21 result = new AstBackupSetting.AstBackupSetting21(ctx, compression);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    rewind 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstRewind rewind)
        {
            AstBackupSetting.AstBackupSetting22 result = new AstBackupSetting.AstBackupSetting22(ctx, rewind);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    load_moun_load 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstLoadMounLoad loadMounLoad)
        {
            AstBackupSetting.AstBackupSetting23 result = new AstBackupSetting.AstBackupSetting23(ctx, loadMounLoad);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    init_no_init 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstInitNoInit initNoInit)
        {
            AstBackupSetting.AstBackupSetting24 result = new AstBackupSetting.AstBackupSetting24(ctx, initNoInit);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    no_skip 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstNoSkip noSkip)
        {
            AstBackupSetting.AstBackupSetting25 result = new AstBackupSetting.AstBackupSetting25(ctx, noSkip);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    format_noformat 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstFormatNoformat formatNoformat)
        {
            AstBackupSetting.AstBackupSetting26 result = new AstBackupSetting.AstBackupSetting26(ctx, formatNoformat);
            return result;
        }
    }
    
    /// <summary>
    /// server_certificate_value
    /// 	 : encryptor_id
    /// 	 | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id
    /// </summary>
    public abstract partial class AstServerCertificateValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptorId), false, false, "encryptor_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptorId), false, false, "encryptor_id"))));
        
        private static string _ruleValue = "encryptor_id\r\n | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id\r\n";
        
        private static string _ruleName = "server_certificate_value";
        
        /// <summary>
        /// server_certificate_value : encryptor_id 
        /// </summary>
        public partial class AstServerCertificateValue1 : AstServerCertificateValue
        {
            
            private static string _ruleName1 = "server_certificate_value";
            
            private AstEncryptorId _encryptorId;
            
            internal AstServerCertificateValue1(ParserRuleContext ctx, AstEncryptorId encryptorId) : 
                    base(ctx)
            {
                _encryptorId = encryptorId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEncryptorId EncryptorId
            {
                get
                {
                    return _encryptorId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerCertificateValue(this);
            }
        }
        /// <summary>
        /// server_certificate_value : SERVER ASYMMETRIC KEY EQUAL encryptor_id 
        /// </summary>
        public partial class AstServerCertificateValue2 : AstServerCertificateValue
        {
            
            private static string _ruleName1 = "server_certificate_value";
            
            private AstEncryptorId _encryptorId;
            
            internal AstServerCertificateValue2(ParserRuleContext ctx, AstEncryptorId encryptorId) : 
                    base(ctx)
            {
                _encryptorId = encryptorId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEncryptorId EncryptorId
            {
                get
                {
                    return _encryptorId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerCertificateValue(this);
            }
        }
        

        
        internal AstServerCertificateValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerCertificateValue(Position p) : 
                base(p)
        {
        }
        
        internal AstServerCertificateValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServerCertificateValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServerCertificateValue.AstServerCertificateValue1(ctx, list.Get<AstEncryptorId>(0));
            }
            if ((index == 2))
            {
                return new AstServerCertificateValue.AstServerCertificateValue2(ctx, list.Get<AstEncryptorId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// server_certificate_value : 
        ///    encryptor_id 
        /// </summary>
        public static AstServerCertificateValue ServerCertificateValue(ParserRuleContext ctx, AstEncryptorId encryptorId)
        {
            AstServerCertificateValue.AstServerCertificateValue1 result = new AstServerCertificateValue.AstServerCertificateValue1(ctx, encryptorId);
            return result;
        }
    }
    
    /// <summary>
    /// kill_statement
    /// 	 : KILL  (kill_process | kill_query_notification | kill_stats_job)
    /// </summary>
    public abstract partial class AstKillStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstKillProcess), false, false, "kill_process")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstKillQueryNotification), false, false, "kill_query_notification")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstKillStatsJob), false, false, "kill_stats_job"))));
        
        private static string _ruleValue = "KILL  (kill_process | kill_query_notification | kill_stats_job)\r\n";
        
        private static string _ruleName = "kill_statement";
        
        /// <summary>
        /// kill_statement : KILL kill_process 
        /// </summary>
        public partial class AstKillStatement1 : AstKillStatement
        {
            
            private static string _ruleName1 = "kill_statement";
            
            private AstKillProcess _killProcess;
            
            internal AstKillStatement1(ParserRuleContext ctx, AstKillProcess killProcess) : 
                    base(ctx)
            {
                _killProcess = killProcess;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKillProcess KillProcess
            {
                get
                {
                    return _killProcess;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillStatement(this);
            }
        }
        /// <summary>
        /// kill_statement : KILL kill_query_notification 
        /// </summary>
        public partial class AstKillStatement2 : AstKillStatement
        {
            
            private static string _ruleName1 = "kill_statement";
            
            private AstKillQueryNotification _killQueryNotification;
            
            internal AstKillStatement2(ParserRuleContext ctx, AstKillQueryNotification killQueryNotification) : 
                    base(ctx)
            {
                _killQueryNotification = killQueryNotification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKillQueryNotification KillQueryNotification
            {
                get
                {
                    return _killQueryNotification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillStatement(this);
            }
        }
        /// <summary>
        /// kill_statement : KILL kill_stats_job 
        /// </summary>
        public partial class AstKillStatement3 : AstKillStatement
        {
            
            private static string _ruleName1 = "kill_statement";
            
            private AstKillStatsJob _killStatsJob;
            
            internal AstKillStatement3(ParserRuleContext ctx, AstKillStatsJob killStatsJob) : 
                    base(ctx)
            {
                _killStatsJob = killStatsJob;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKillStatsJob KillStatsJob
            {
                get
                {
                    return _killStatsJob;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillStatement(this);
            }
        }
        

        
        internal AstKillStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKillStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstKillStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstKillStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstKillStatement.AstKillStatement1(ctx, list.Get<AstKillProcess>(0));
            }
            if ((index == 2))
            {
                return new AstKillStatement.AstKillStatement2(ctx, list.Get<AstKillQueryNotification>(0));
            }
            if ((index == 3))
            {
                return new AstKillStatement.AstKillStatement3(ctx, list.Get<AstKillStatsJob>(0));
            }
            return null;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_process 
        /// </summary>
        public static AstKillStatement KillStatement(ParserRuleContext ctx, AstKillProcess killProcess)
        {
            AstKillStatement.AstKillStatement1 result = new AstKillStatement.AstKillStatement1(ctx, killProcess);
            return result;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_query_notification 
        /// </summary>
        public static AstKillStatement KillStatement(ParserRuleContext ctx, AstKillQueryNotification killQueryNotification)
        {
            AstKillStatement.AstKillStatement2 result = new AstKillStatement.AstKillStatement2(ctx, killQueryNotification);
            return result;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_stats_job 
        /// </summary>
        public static AstKillStatement KillStatement(ParserRuleContext ctx, AstKillStatsJob killStatsJob)
        {
            AstKillStatement.AstKillStatement3 result = new AstKillStatement.AstKillStatement3(ctx, killStatsJob);
            return result;
        }
    }
    
    /// <summary>
    /// kill_process
    /// 	 : (session = decimal_string | UOW)  (WITH  STATUSONLY)?
    /// </summary>
    public abstract partial class AstKillProcess : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalString), false, false, "decimal_string"))));
        
        private static string _ruleValue = "(session = decimal_string | UOW)  (WITH  STATUSONLY)?\r\n";
        
        private static string _ruleName = "kill_process";
        
        /// <summary>
        /// kill_process : session=decimal_string WITH STATUSONLY 
        /// </summary>
        public partial class AstKillProcess1 : AstKillProcess
        {
            
            private static string _ruleName1 = "kill_process";
            
            private AstDecimalString _session;
            
            internal AstKillProcess1(ParserRuleContext ctx, AstDecimalString session) : 
                    base(ctx)
            {
                _session = session;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimalString Session
            {
                get
                {
                    return _session;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillProcess(this);
            }
        }
        /// <summary>
        /// kill_process : UOW WITH STATUSONLY 
        /// </summary>
        public partial class AstKillProcess2 : AstKillProcess
        {
            
            private static string _ruleName1 = "kill_process";
            
            internal AstKillProcess2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillProcess(this);
            }
        }
        

        
        internal AstKillProcess(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKillProcess(Position p) : 
                base(p)
        {
        }
        
        internal AstKillProcess(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstKillProcess Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstKillProcess.AstKillProcess1(ctx, list.Get<AstDecimalString>(0));
            }
            if ((index == 2))
            {
                return new AstKillProcess.AstKillProcess2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// kill_process : 
        ///    session=decimal_string WITH STATUSONLY 
        /// </summary>
        public static AstKillProcess KillProcess(ParserRuleContext ctx, AstDecimalString session)
        {
            AstKillProcess.AstKillProcess1 result = new AstKillProcess.AstKillProcess1(ctx, session);
            return result;
        }
        
        /// <summary>
        /// kill_process : 
        ///    UOW WITH STATUSONLY 
        /// </summary>
        public static AstKillProcess KillProcess(ParserRuleContext ctx)
        {
            AstKillProcess.AstKillProcess2 result = new AstKillProcess.AstKillProcess2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// kill_query_notification
    /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription = decimal)
    /// </summary>
    public abstract partial class AstKillQueryNotification : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription = decimal)\r\n";
        
        private static string _ruleName = "kill_query_notification";
        
        /// <summary>
        /// kill_query_notification : QUERY NOTIFICATION SUBSCRIPTION ALL 
        /// </summary>
        public partial class AstKillQueryNotification1 : AstKillQueryNotification
        {
            
            private static string _ruleName1 = "kill_query_notification";
            
            internal AstKillQueryNotification1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillQueryNotification(this);
            }
        }
        /// <summary>
        /// kill_query_notification : QUERY NOTIFICATION SUBSCRIPTION subscription=decimal 
        /// </summary>
        public partial class AstKillQueryNotification2 : AstKillQueryNotification
        {
            
            private static string _ruleName1 = "kill_query_notification";
            
            private AstDecimal _subscription;
            
            internal AstKillQueryNotification2(ParserRuleContext ctx, AstDecimal subscription) : 
                    base(ctx)
            {
                _subscription = subscription;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Subscription
            {
                get
                {
                    return _subscription;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillQueryNotification(this);
            }
        }
        

        
        internal AstKillQueryNotification(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKillQueryNotification(Position p) : 
                base(p)
        {
        }
        
        internal AstKillQueryNotification(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstKillQueryNotification Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstKillQueryNotification.AstKillQueryNotification1(ctx);
            }
            if ((index == 2))
            {
                return new AstKillQueryNotification.AstKillQueryNotification2(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// kill_query_notification : 
        ///    QUERY NOTIFICATION SUBSCRIPTION ALL 
        /// </summary>
        public static AstKillQueryNotification KillQueryNotification(ParserRuleContext ctx)
        {
            AstKillQueryNotification.AstKillQueryNotification1 result = new AstKillQueryNotification.AstKillQueryNotification1(ctx);
            return result;
        }
        
        /// <summary>
        /// kill_query_notification : 
        ///    QUERY NOTIFICATION SUBSCRIPTION subscription=decimal 
        /// </summary>
        public static AstKillQueryNotification KillQueryNotification(ParserRuleContext ctx, AstDecimal subscription)
        {
            AstKillQueryNotification.AstKillQueryNotification2 result = new AstKillQueryNotification.AstKillQueryNotification2(ctx, subscription);
            return result;
        }
    }
    
    /// <summary>
    /// kill_stats_job
    /// 	 : STATS  JOB  job = decimal
    /// </summary>
    public partial class AstKillStatsJob : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstDecimal _job;
        
        private static string _ruleValue = "STATS  JOB  job = decimal\r\n";
        
        private static string _ruleName = "kill_stats_job";
        
        internal AstKillStatsJob(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKillStatsJob(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillStatsJob(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstKillStatsJob(ParserRuleContext ctx, AstDecimal job) : 
                base(ctx)
        {
            _job = job;
        }
        
        public virtual AstDecimal Job
        {
            get
            {
                return _job;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatsJob(this);
        }
        
        public static AstKillStatsJob Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstKillStatsJob(ctx, list.Get<AstDecimal>(0));
        }
        
        /// <summary>
        /// kill_stats_job : 
        ///    STATS JOB job=decimal 
        /// </summary>
        public static AstKillStatsJob KillStatsJob(ParserRuleContext ctx, AstDecimal job)
        {
            AstKillStatsJob result = new AstKillStatsJob(ctx, job);
            return result;
        }
    }
    
    /// <summary>
    /// execute_body
    /// 	 : (return_status = local_id  EQUAL)?  body_kind  execute_statement_arg?
    /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  server_id)?
    /// </summary>
    public abstract partial class AstExecuteBody : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteVarStrings), false, false, "execute_var_strings"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLoginUser), false, false, "login_user"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstServerId), false, false, "server_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstBodyKind), false, false, "body_kind"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteStatementArg), true, false, "execute_statement_arg"))));
        
        private static string _ruleValue = "(return_status = local_id  EQUAL)?  body_kind  execute_statement_arg?\r\n | LR_BRAC" +
            "KET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT" +
            "_KEYWORD  server_id)?\r\n";
        
        private static string _ruleName = "execute_body";
        
        /// <summary>
        /// execute_body : return_status=local_id EQUAL body_kind execute_statement_arg? 
        /// </summary>
        public partial class AstExecuteBody1 : AstExecuteBody
        {
            
            private static string _ruleName1 = "execute_body";
            
            private AstLocalId _returnStatus;
            
            private AstBodyKind _bodyKind;
            
            private AstExecuteStatementArg? _executeStatementArg;
            
            internal AstExecuteBody1(ParserRuleContext ctx, AstLocalId returnStatus, AstBodyKind bodyKind, AstExecuteStatementArg? executeStatementArg) : 
                    base(ctx)
            {
                _returnStatus = returnStatus;
                _bodyKind = bodyKind;
                _executeStatementArg = executeStatementArg;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId ReturnStatus
            {
                get
                {
                    return _returnStatus;
                }
            }
            
            public virtual AstBodyKind BodyKind
            {
                get
                {
                    return _bodyKind;
                }
            }
            
            public virtual AstExecuteStatementArg? ExecuteStatementArg
            {
                get
                {
                    return _executeStatementArg;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteBody(this);
            }
        }
        /// <summary>
        /// execute_body : LR_BRACKET execute_var_strings RR_BRACKET AS? login_user EQUAL stringtext AT_KEYWORD server_id 
        /// </summary>
        public partial class AstExecuteBody2 : AstExecuteBody
        {
            
            private static string _ruleName1 = "execute_body";
            
            private AstExecuteVarStrings _executeVarStrings;
            
            private AstLoginUser _loginUser;
            
            private AstStringtext _stringtext;
            
            private AstServerId _serverId;
            
            internal AstExecuteBody2(ParserRuleContext ctx, AstExecuteVarStrings executeVarStrings, AstLoginUser loginUser, AstStringtext stringtext, AstServerId serverId) : 
                    base(ctx)
            {
                _executeVarStrings = executeVarStrings;
                _loginUser = loginUser;
                _stringtext = stringtext;
                _serverId = serverId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteVarStrings ExecuteVarStrings
            {
                get
                {
                    return _executeVarStrings;
                }
            }
            
            public virtual AstLoginUser LoginUser
            {
                get
                {
                    return _loginUser;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstServerId ServerId
            {
                get
                {
                    return _serverId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteBody(this);
            }
        }
        

        
        internal AstExecuteBody(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteBody(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteBody(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExecuteBody Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExecuteBody.AstExecuteBody1(ctx, list.Get<AstLocalId>(0), list.Get<AstBodyKind>(1), list.Get<AstExecuteStatementArg?>(2));
            }
            if ((index == 2))
            {
                return new AstExecuteBody.AstExecuteBody2(ctx, list.Get<AstExecuteVarStrings>(0), list.Get<AstLoginUser>(1), list.Get<AstStringtext>(2), list.Get<AstServerId>(3));
            }
            return null;
        }
        
        /// <summary>
        /// execute_body : 
        ///    return_status=local_id EQUAL body_kind execute_statement_arg? 
        /// </summary>
        public static AstExecuteBody ExecuteBody(ParserRuleContext ctx, AstLocalId returnStatus, AstBodyKind bodyKind, AstExecuteStatementArg executeStatementArg)
        {
            AstExecuteBody.AstExecuteBody1 result = new AstExecuteBody.AstExecuteBody1(ctx, returnStatus, bodyKind, executeStatementArg);
            return result;
        }
        
        /// <summary>
        /// execute_body : 
        ///    ( execute_var_strings ) AS? login_user EQUAL stringtext AT_KEYWORD server_id 
        /// </summary>
        public static AstExecuteBody ExecuteBody(ParserRuleContext ctx, AstExecuteVarStrings executeVarStrings, AstLoginUser loginUser, AstStringtext stringtext, AstServerId serverId)
        {
            AstExecuteBody.AstExecuteBody2 result = new AstExecuteBody.AstExecuteBody2(ctx, executeVarStrings, loginUser, stringtext, serverId);
            return result;
        }
    }
    
    /// <summary>
    /// body_kind
    /// 	 : func_proc_name_server_database_schema
    /// 	 | execute_var_string
    /// </summary>
    public abstract partial class AstBodyKind : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFuncProcNameServerDatabaseSchema), false, false, "func_proc_name_server_database_schema")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteVarString), false, false, "execute_var_string"))));
        
        private static string _ruleValue = "func_proc_name_server_database_schema\r\n | execute_var_string\r\n";
        
        private static string _ruleName = "body_kind";
        
        /// <summary>
        /// body_kind : func_proc_name_server_database_schema 
        /// </summary>
        public partial class AstBodyKind1 : AstBodyKind
        {
            
            private static string _ruleName1 = "body_kind";
            
            private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
            
            internal AstBodyKind1(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema) : 
                    base(ctx)
            {
                _funcProcNameServerDatabaseSchema = funcProcNameServerDatabaseSchema;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
            {
                get
                {
                    return _funcProcNameServerDatabaseSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBodyKind(this);
            }
        }
        /// <summary>
        /// body_kind : execute_var_string 
        /// </summary>
        public partial class AstBodyKind2 : AstBodyKind
        {
            
            private static string _ruleName1 = "body_kind";
            
            private AstExecuteVarString _executeVarString;
            
            internal AstBodyKind2(ParserRuleContext ctx, AstExecuteVarString executeVarString) : 
                    base(ctx)
            {
                _executeVarString = executeVarString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteVarString ExecuteVarString
            {
                get
                {
                    return _executeVarString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBodyKind(this);
            }
        }
        

        
        internal AstBodyKind(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBodyKind(Position p) : 
                base(p)
        {
        }
        
        internal AstBodyKind(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBodyKind Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBodyKind.AstBodyKind1(ctx, list.Get<AstFuncProcNameServerDatabaseSchema>(0));
            }
            if ((index == 2))
            {
                return new AstBodyKind.AstBodyKind2(ctx, list.Get<AstExecuteVarString>(0));
            }
            return null;
        }
        
        /// <summary>
        /// body_kind : 
        ///    func_proc_name_server_database_schema 
        /// </summary>
        public static AstBodyKind BodyKind(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema)
        {
            AstBodyKind.AstBodyKind1 result = new AstBodyKind.AstBodyKind1(ctx, funcProcNameServerDatabaseSchema);
            return result;
        }
        
        /// <summary>
        /// body_kind : 
        ///    execute_var_string 
        /// </summary>
        public static AstBodyKind BodyKind(ParserRuleContext ctx, AstExecuteVarString executeVarString)
        {
            AstBodyKind.AstBodyKind2 result = new AstBodyKind.AstBodyKind2(ctx, executeVarString);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg
    /// 	 : execute_statement_arg_unnamed  execute_statement_args?
    /// 	 | execute_statement_arg_nameds
    /// </summary>
    public abstract partial class AstExecuteStatementArg : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteStatementArgUnnamed), false, false, "execute_statement_arg_unnamed"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteStatementArgs), true, false, "execute_statement_args")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteStatementArgNameds), false, false, "execute_statement_arg_nameds"))));
        
        private static string _ruleValue = "execute_statement_arg_unnamed  execute_statement_args?\r\n | execute_statement_arg_" +
            "nameds\r\n";
        
        private static string _ruleName = "execute_statement_arg";
        
        /// <summary>
        /// execute_statement_arg : execute_statement_arg_unnamed execute_statement_args? 
        /// </summary>
        public partial class AstExecuteStatementArg1 : AstExecuteStatementArg
        {
            
            private static string _ruleName1 = "execute_statement_arg";
            
            private AstExecuteStatementArgUnnamed _executeStatementArgUnnamed;
            
            private AstExecuteStatementArgs? _executeStatementArgs;
            
            internal AstExecuteStatementArg1(ParserRuleContext ctx, AstExecuteStatementArgUnnamed executeStatementArgUnnamed, AstExecuteStatementArgs? executeStatementArgs) : 
                    base(ctx)
            {
                _executeStatementArgUnnamed = executeStatementArgUnnamed;
                _executeStatementArgs = executeStatementArgs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteStatementArgUnnamed ExecuteStatementArgUnnamed
            {
                get
                {
                    return _executeStatementArgUnnamed;
                }
            }
            
            public virtual AstExecuteStatementArgs? ExecuteStatementArgs
            {
                get
                {
                    return _executeStatementArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteStatementArg(this);
            }
        }
        /// <summary>
        /// execute_statement_arg : execute_statement_arg_nameds 
        /// </summary>
        public partial class AstExecuteStatementArg2 : AstExecuteStatementArg
        {
            
            private static string _ruleName1 = "execute_statement_arg";
            
            private AstExecuteStatementArgNameds _executeStatementArgNameds;
            
            internal AstExecuteStatementArg2(ParserRuleContext ctx, AstExecuteStatementArgNameds executeStatementArgNameds) : 
                    base(ctx)
            {
                _executeStatementArgNameds = executeStatementArgNameds;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteStatementArgNameds ExecuteStatementArgNameds
            {
                get
                {
                    return _executeStatementArgNameds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteStatementArg(this);
            }
        }
        

        
        internal AstExecuteStatementArg(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArg(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArg(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExecuteStatementArg Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExecuteStatementArg.AstExecuteStatementArg1(ctx, list.Get<AstExecuteStatementArgUnnamed>(0), list.Get<AstExecuteStatementArgs?>(1));
            }
            if ((index == 2))
            {
                return new AstExecuteStatementArg.AstExecuteStatementArg2(ctx, list.Get<AstExecuteStatementArgNameds>(0));
            }
            return null;
        }
        
        /// <summary>
        /// execute_statement_arg : 
        ///    execute_statement_arg_unnamed execute_statement_args? 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(ParserRuleContext ctx, AstExecuteStatementArgUnnamed executeStatementArgUnnamed, AstExecuteStatementArgs executeStatementArgs)
        {
            AstExecuteStatementArg.AstExecuteStatementArg1 result = new AstExecuteStatementArg.AstExecuteStatementArg1(ctx, executeStatementArgUnnamed, executeStatementArgs);
            return result;
        }
        
        /// <summary>
        /// execute_statement_arg : 
        ///    execute_statement_arg_nameds 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(ParserRuleContext ctx, AstExecuteStatementArgNameds executeStatementArgNameds)
        {
            AstExecuteStatementArg.AstExecuteStatementArg2 result = new AstExecuteStatementArg.AstExecuteStatementArg2(ctx, executeStatementArgNameds);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_named
    /// 	 : name = local_id  EQUAL  value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgNamed : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteParameter), false, false, "execute_parameter"))));
        
        private AstLocalId _name;
        
        private AstExecuteParameter _value;
        
        private static string _ruleValue = "name = local_id  EQUAL  value = execute_parameter\r\n";
        
        private static string _ruleName = "execute_statement_arg_named";
        
        internal AstExecuteStatementArgNamed(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgNamed(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgNamed(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstExecuteStatementArgNamed(ParserRuleContext ctx, AstLocalId name, AstExecuteParameter value) : 
                base(ctx)
        {
            _name = name;
            _value = value;
        }
        
        public virtual AstLocalId Name
        {
            get
            {
                return _name;
            }
        }
        
        public virtual AstExecuteParameter Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNamed(this);
        }
        
        public static AstExecuteStatementArgNamed Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstExecuteStatementArgNamed(ctx, list.Get<AstLocalId>(0), list.Get<AstExecuteParameter>(1));
        }
        
        /// <summary>
        /// execute_statement_arg_named : 
        ///    name=local_id EQUAL value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgNamed ExecuteStatementArgNamed(ParserRuleContext ctx, AstLocalId name, AstExecuteParameter value)
        {
            AstExecuteStatementArgNamed result = new AstExecuteStatementArgNamed(ctx, name, value);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_unnamed
    /// 	 : value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgUnnamed : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteParameter), false, false, "execute_parameter"))));
        
        private AstExecuteParameter _value;
        
        private static string _ruleValue = "value = execute_parameter\r\n";
        
        private static string _ruleName = "execute_statement_arg_unnamed";
        
        internal AstExecuteStatementArgUnnamed(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(ParserRuleContext ctx, AstExecuteParameter value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public virtual AstExecuteParameter Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgUnnamed(this);
        }
        
        public static AstExecuteStatementArgUnnamed Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstExecuteStatementArgUnnamed(ctx, list.Get<AstExecuteParameter>(0));
        }
        
        /// <summary>
        /// execute_statement_arg_unnamed : 
        ///    value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgUnnamed ExecuteStatementArgUnnamed(ParserRuleContext ctx, AstExecuteParameter value)
        {
            AstExecuteStatementArgUnnamed result = new AstExecuteStatementArgUnnamed(ctx, value);
            return result;
        }
    }
    
    /// <summary>
    /// execute_parameter
    /// 	 : constant
    /// 	 | local_id  output_out?
    /// 	 | id_
    /// 	 | DEFAULT
    /// 	 | NULL_
    /// </summary>
    public abstract partial class AstExecuteParameter : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOutputOut), true, false, "output_out")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstant), false, false, "constant")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "constant\r\n | local_id  output_out?\r\n | id_\r\n | DEFAULT\r\n | NULL_\r\n";
        
        private static string _ruleName = "execute_parameter";
        
        /// <summary>
        /// execute_parameter : constant 
        /// </summary>
        public partial class AstExecuteParameter1 : AstExecuteParameter
        {
            
            private static string _ruleName1 = "execute_parameter";
            
            private AstConstant _constant;
            
            internal AstExecuteParameter1(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : local_id output_out? 
        /// </summary>
        public partial class AstExecuteParameter2 : AstExecuteParameter
        {
            
            private static string _ruleName1 = "execute_parameter";
            
            private AstLocalId _localId;
            
            private AstOutputOut? _outputOut;
            
            internal AstExecuteParameter2(ParserRuleContext ctx, AstLocalId localId, AstOutputOut? outputOut) : 
                    base(ctx)
            {
                _localId = localId;
                _outputOut = outputOut;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstOutputOut? OutputOut
            {
                get
                {
                    return _outputOut;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : id_ 
        /// </summary>
        public partial class AstExecuteParameter3 : AstExecuteParameter
        {
            
            private static string _ruleName1 = "execute_parameter";
            
            private AstId _id;
            
            internal AstExecuteParameter3(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : DEFAULT 
        /// </summary>
        public partial class AstExecuteParameter4 : AstExecuteParameter
        {
            
            private static string _ruleName1 = "execute_parameter";
            
            internal AstExecuteParameter4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : NULL_ 
        /// </summary>
        public partial class AstExecuteParameter5 : AstExecuteParameter
        {
            
            private static string _ruleName1 = "execute_parameter";
            
            internal AstExecuteParameter5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        

        
        internal AstExecuteParameter(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteParameter(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteParameter(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExecuteParameter Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExecuteParameter.AstExecuteParameter1(ctx, list.Get<AstConstant>(0));
            }
            if ((index == 2))
            {
                return new AstExecuteParameter.AstExecuteParameter2(ctx, list.Get<AstLocalId>(0), list.Get<AstOutputOut?>(1));
            }
            if ((index == 3))
            {
                return new AstExecuteParameter.AstExecuteParameter3(ctx, list.Get<AstId>(0));
            }
            if ((index == 4))
            {
                return new AstExecuteParameter.AstExecuteParameter4(ctx);
            }
            if ((index == 5))
            {
                return new AstExecuteParameter.AstExecuteParameter5(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    constant 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx, AstConstant constant)
        {
            AstExecuteParameter.AstExecuteParameter1 result = new AstExecuteParameter.AstExecuteParameter1(ctx, constant);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    local_id output_out? 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx, AstLocalId localId, AstOutputOut outputOut)
        {
            AstExecuteParameter.AstExecuteParameter2 result = new AstExecuteParameter.AstExecuteParameter2(ctx, localId, outputOut);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    id_ 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx, AstId id)
        {
            AstExecuteParameter.AstExecuteParameter3 result = new AstExecuteParameter.AstExecuteParameter3(ctx, id);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    DEFAULT 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx)
        {
            AstExecuteParameter.AstExecuteParameter4 result = new AstExecuteParameter.AstExecuteParameter4(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// execute_var_string
    /// 	 : source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string)?)?
    /// 	 | stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?
    /// </summary>
    public abstract partial class AstExecuteVarString : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOutputOut), true, false, "output_out"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteVarString), false, false, "execute_var_string")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteVarString), false, false, "execute_var_string"))));
        
        private static string _ruleValue = "source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string" +
            ")?)?\r\n | stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?\r\n";
        
        private static string _ruleName = "execute_var_string";
        
        /// <summary>
        /// execute_var_string : source=local_id output_out? PLUS more=local_id PLUS execute_var_string 
        /// </summary>
        public partial class AstExecuteVarString1 : AstExecuteVarString
        {
            
            private static string _ruleName1 = "execute_var_string";
            
            private AstLocalId _source;
            
            private AstOutputOut? _outputOut;
            
            private AstLocalId _more;
            
            private AstExecuteVarString _executeVarString;
            
            internal AstExecuteVarString1(ParserRuleContext ctx, AstLocalId source, AstOutputOut? outputOut, AstLocalId more, AstExecuteVarString executeVarString) : 
                    base(ctx)
            {
                _source = source;
                _outputOut = outputOut;
                _more = more;
                _executeVarString = executeVarString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId Source
            {
                get
                {
                    return _source;
                }
            }
            
            public virtual AstOutputOut? OutputOut
            {
                get
                {
                    return _outputOut;
                }
            }
            
            public virtual AstLocalId More
            {
                get
                {
                    return _more;
                }
            }
            
            public virtual AstExecuteVarString ExecuteVarString
            {
                get
                {
                    return _executeVarString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteVarString(this);
            }
        }
        /// <summary>
        /// execute_var_string : stringtext PLUS local_id PLUS execute_var_string 
        /// </summary>
        public partial class AstExecuteVarString2 : AstExecuteVarString
        {
            
            private static string _ruleName1 = "execute_var_string";
            
            private AstStringtext _stringtext;
            
            private AstLocalId _localId;
            
            private AstExecuteVarString _executeVarString;
            
            internal AstExecuteVarString2(ParserRuleContext ctx, AstStringtext stringtext, AstLocalId localId, AstExecuteVarString executeVarString) : 
                    base(ctx)
            {
                _stringtext = stringtext;
                _localId = localId;
                _executeVarString = executeVarString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstExecuteVarString ExecuteVarString
            {
                get
                {
                    return _executeVarString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteVarString(this);
            }
        }
        

        
        internal AstExecuteVarString(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteVarString(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteVarString(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExecuteVarString Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExecuteVarString.AstExecuteVarString1(ctx, list.Get<AstLocalId>(0), list.Get<AstOutputOut?>(1), list.Get<AstLocalId>(2), list.Get<AstExecuteVarString>(3));
            }
            if ((index == 2))
            {
                return new AstExecuteVarString.AstExecuteVarString2(ctx, list.Get<AstStringtext>(0), list.Get<AstLocalId>(1), list.Get<AstExecuteVarString>(2));
            }
            return null;
        }
        
        /// <summary>
        /// execute_var_string : 
        ///    source=local_id output_out? PLUS more=local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(ParserRuleContext ctx, AstLocalId source, AstOutputOut outputOut, AstLocalId more, AstExecuteVarString executeVarString)
        {
            AstExecuteVarString.AstExecuteVarString1 result = new AstExecuteVarString.AstExecuteVarString1(ctx, source, outputOut, more, executeVarString);
            return result;
        }
        
        /// <summary>
        /// execute_var_string : 
        ///    stringtext PLUS local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(ParserRuleContext ctx, AstStringtext stringtext, AstLocalId localId, AstExecuteVarString executeVarString)
        {
            AstExecuteVarString.AstExecuteVarString2 result = new AstExecuteVarString.AstExecuteVarString2(ctx, stringtext, localId, executeVarString);
            return result;
        }
    }
    
    /// <summary>
    /// security_statement
    /// 	 : execute_clause
    /// 	 | GRANT  grant_mode  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?
    /// 	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?
    /// 	 | open_key
    /// 	 | close_key
    /// 	 | create_key
    /// 	 | create_certificate
    /// </summary>
    public abstract partial class AstSecurityStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstGrantMode), false, false, "grant_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstClassTypeForGrant), false, false, "class_type_for_grant"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstToPrincipalRincipalIds), false, false, "to_principal_rincipal_ids"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPrincipalId), false, false, "principal_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteClause), false, false, "execute_clause")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOpenKey), false, false, "open_key")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstCloseKey), false, false, "close_key")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateKey), false, false, "create_key")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateCertificate), false, false, "create_certificate"))));
        
        private static string _ruleValue = @"execute_clause
 | GRANT  grant_mode  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?
 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?
 | open_key
 | close_key
 | create_key
 | create_certificate
";
        
        private static string _ruleName = "security_statement";
        
        /// <summary>
        /// security_statement : execute_clause 
        /// </summary>
        public partial class AstSecurityStatement1 : AstSecurityStatement
        {
            
            private static string _ruleName1 = "security_statement";
            
            private AstExecuteClause _executeClause;
            
            internal AstSecurityStatement1(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : GRANT grant_mode ON class_type_for_grant DOUBLE_COLON table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id 
        /// </summary>
        public partial class AstSecurityStatement2 : AstSecurityStatement
        {
            
            private static string _ruleName1 = "security_statement";
            
            private AstGrantMode _grantMode;
            
            private AstClassTypeForGrant _classTypeForGrant;
            
            private AstFullTableRef _table;
            
            private AstToPrincipalRincipalIds _toPrincipalRincipalIds;
            
            private AstPrincipalId _asPrincipal;
            
            internal AstSecurityStatement2(ParserRuleContext ctx, AstGrantMode grantMode, AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal) : 
                    base(ctx)
            {
                _grantMode = grantMode;
                _classTypeForGrant = classTypeForGrant;
                _table = table;
                _toPrincipalRincipalIds = toPrincipalRincipalIds;
                _asPrincipal = asPrincipal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGrantMode GrantMode
            {
                get
                {
                    return _grantMode;
                }
            }
            
            public virtual AstClassTypeForGrant ClassTypeForGrant
            {
                get
                {
                    return _classTypeForGrant;
                }
            }
            
            public virtual AstFullTableRef Table
            {
                get
                {
                    return _table;
                }
            }
            
            public virtual AstToPrincipalRincipalIds ToPrincipalRincipalIds
            {
                get
                {
                    return _toPrincipalRincipalIds;
                }
            }
            
            public virtual AstPrincipalId AsPrincipal
            {
                get
                {
                    return _asPrincipal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : REVERT LR_BRACKET WITH COOKIE EQUAL local_id RR_BRACKET 
        /// </summary>
        public partial class AstSecurityStatement3 : AstSecurityStatement
        {
            
            private static string _ruleName1 = "security_statement";
            
            private AstLocalId _localId;
            
            internal AstSecurityStatement3(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : open_key 
        /// </summary>
        public partial class AstSecurityStatement4 : AstSecurityStatement
        {
            
            private static string _ruleName1 = "security_statement";
            
            private AstOpenKey _openKey;
            
            internal AstSecurityStatement4(ParserRuleContext ctx, AstOpenKey openKey) : 
                    base(ctx)
            {
                _openKey = openKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOpenKey OpenKey
            {
                get
                {
                    return _openKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : close_key 
        /// </summary>
        public partial class AstSecurityStatement5 : AstSecurityStatement
        {
            
            private static string _ruleName1 = "security_statement";
            
            private AstCloseKey _closeKey;
            
            internal AstSecurityStatement5(ParserRuleContext ctx, AstCloseKey closeKey) : 
                    base(ctx)
            {
                _closeKey = closeKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCloseKey CloseKey
            {
                get
                {
                    return _closeKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : create_key 
        /// </summary>
        public partial class AstSecurityStatement6 : AstSecurityStatement
        {
            
            private static string _ruleName1 = "security_statement";
            
            private AstCreateKey _createKey;
            
            internal AstSecurityStatement6(ParserRuleContext ctx, AstCreateKey createKey) : 
                    base(ctx)
            {
                _createKey = createKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateKey CreateKey
            {
                get
                {
                    return _createKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : create_certificate 
        /// </summary>
        public partial class AstSecurityStatement7 : AstSecurityStatement
        {
            
            private static string _ruleName1 = "security_statement";
            
            private AstCreateCertificate _createCertificate;
            
            internal AstSecurityStatement7(ParserRuleContext ctx, AstCreateCertificate createCertificate) : 
                    base(ctx)
            {
                _createCertificate = createCertificate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreateCertificate CreateCertificate
            {
                get
                {
                    return _createCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        

        
        internal AstSecurityStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSecurityStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstSecurityStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSecurityStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSecurityStatement.AstSecurityStatement1(ctx, list.Get<AstExecuteClause>(0));
            }
            if ((index == 2))
            {
                return new AstSecurityStatement.AstSecurityStatement2(ctx, list.Get<AstGrantMode>(0), list.Get<AstClassTypeForGrant>(1), list.Get<AstFullTableRef>(2), list.Get<AstToPrincipalRincipalIds>(3), list.Get<AstPrincipalId>(4));
            }
            if ((index == 3))
            {
                return new AstSecurityStatement.AstSecurityStatement3(ctx, list.Get<AstLocalId>(0));
            }
            if ((index == 4))
            {
                return new AstSecurityStatement.AstSecurityStatement4(ctx, list.Get<AstOpenKey>(0));
            }
            if ((index == 5))
            {
                return new AstSecurityStatement.AstSecurityStatement5(ctx, list.Get<AstCloseKey>(0));
            }
            if ((index == 6))
            {
                return new AstSecurityStatement.AstSecurityStatement6(ctx, list.Get<AstCreateKey>(0));
            }
            if ((index == 7))
            {
                return new AstSecurityStatement.AstSecurityStatement7(ctx, list.Get<AstCreateCertificate>(0));
            }
            return null;
        }
        
        /// <summary>
        /// security_statement : 
        ///    execute_clause 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstSecurityStatement.AstSecurityStatement1 result = new AstSecurityStatement.AstSecurityStatement1(ctx, executeClause);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    GRANT grant_mode ON class_type_for_grant :: table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstGrantMode grantMode, AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal)
        {
            AstSecurityStatement.AstSecurityStatement2 result = new AstSecurityStatement.AstSecurityStatement2(ctx, grantMode, classTypeForGrant, table, toPrincipalRincipalIds, asPrincipal);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    REVERT ( WITH COOKIE EQUAL local_id ) 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstLocalId localId)
        {
            AstSecurityStatement.AstSecurityStatement3 result = new AstSecurityStatement.AstSecurityStatement3(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    open_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstOpenKey openKey)
        {
            AstSecurityStatement.AstSecurityStatement4 result = new AstSecurityStatement.AstSecurityStatement4(ctx, openKey);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    close_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstCloseKey closeKey)
        {
            AstSecurityStatement.AstSecurityStatement5 result = new AstSecurityStatement.AstSecurityStatement5(ctx, closeKey);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    create_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstCreateKey createKey)
        {
            AstSecurityStatement.AstSecurityStatement6 result = new AstSecurityStatement.AstSecurityStatement6(ctx, createKey);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    create_certificate 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstCreateCertificate createCertificate)
        {
            AstSecurityStatement.AstSecurityStatement7 result = new AstSecurityStatement.AstSecurityStatement7(ctx, createCertificate);
            return result;
        }
    }
    
    /// <summary>
    /// grant_mode
    /// 	 : ALL  PRIVILEGES?
    /// 	 | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstGrantMode : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstGrantPermission), false, false, "grant_permission"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list"))));
        
        private static string _ruleValue = "ALL  PRIVILEGES?\r\n | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)" +
            "?\r\n";
        
        private static string _ruleName = "grant_mode";
        
        /// <summary>
        /// grant_mode : ALL PRIVILEGES? 
        /// </summary>
        public partial class AstGrantMode1 : AstGrantMode
        {
            
            private static string _ruleName1 = "grant_mode";
            
            internal AstGrantMode1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantMode(this);
            }
        }
        /// <summary>
        /// grant_mode : grant_permission LR_BRACKET column_name_list RR_BRACKET 
        /// </summary>
        public partial class AstGrantMode2 : AstGrantMode
        {
            
            private static string _ruleName1 = "grant_mode";
            
            private AstGrantPermission _grantPermission;
            
            private AstColumnNameList _columnNameList;
            
            internal AstGrantMode2(ParserRuleContext ctx, AstGrantPermission grantPermission, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _grantPermission = grantPermission;
                _columnNameList = columnNameList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGrantPermission GrantPermission
            {
                get
                {
                    return _grantPermission;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantMode(this);
            }
        }
        

        
        internal AstGrantMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGrantMode(Position p) : 
                base(p)
        {
        }
        
        internal AstGrantMode(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstGrantMode Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstGrantMode.AstGrantMode1(ctx);
            }
            if ((index == 2))
            {
                return new AstGrantMode.AstGrantMode2(ctx, list.Get<AstGrantPermission>(0), list.Get<AstColumnNameList>(1));
            }
            return null;
        }
        
        /// <summary>
        /// grant_mode : 
        ///    ALL PRIVILEGES? 
        /// </summary>
        public static AstGrantMode GrantMode(ParserRuleContext ctx)
        {
            AstGrantMode.AstGrantMode1 result = new AstGrantMode.AstGrantMode1(ctx);
            return result;
        }
        
        /// <summary>
        /// grant_mode : 
        ///    grant_permission ( column_name_list ) 
        /// </summary>
        public static AstGrantMode GrantMode(ParserRuleContext ctx, AstGrantPermission grantPermission, AstColumnNameList columnNameList)
        {
            AstGrantMode.AstGrantMode2 result = new AstGrantMode.AstGrantMode2(ctx, grantPermission, columnNameList);
            return result;
        }
    }
    
    /// <summary>
    /// existing_keys
    /// 	 : ASSEMBLY  assembly_id
    /// 	 | EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstExistingKeys : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPrivateKeyOptions), false, false, "private_key_options")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAssemblyId), false, false, "assembly_id"))));
        
        private static string _ruleValue = "ASSEMBLY  assembly_id\r\n | EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (W" +
            "ITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?\r\n";
        
        private static string _ruleName = "existing_keys";
        
        /// <summary>
        /// existing_keys : ASSEMBLY assembly_id 
        /// </summary>
        public partial class AstExistingKeys1 : AstExistingKeys
        {
            
            private static string _ruleName1 = "existing_keys";
            
            private AstAssemblyId _assemblyId;
            
            internal AstExistingKeys1(ParserRuleContext ctx, AstAssemblyId assemblyId) : 
                    base(ctx)
            {
                _assemblyId = assemblyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAssemblyId AssemblyId
            {
                get
                {
                    return _assemblyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistingKeys(this);
            }
        }
        /// <summary>
        /// existing_keys : EXECUTABLE? FILE EQUAL path_to_file=stringtext WITH PRIVATE KEY LR_BRACKET private_key_options RR_BRACKET 
        /// </summary>
        public partial class AstExistingKeys2 : AstExistingKeys
        {
            
            private static string _ruleName1 = "existing_keys";
            
            private AstStringtext _pathToFile;
            
            private AstPrivateKeyOptions _privateKeyOptions;
            
            internal AstExistingKeys2(ParserRuleContext ctx, AstStringtext pathToFile, AstPrivateKeyOptions privateKeyOptions) : 
                    base(ctx)
            {
                _pathToFile = pathToFile;
                _privateKeyOptions = privateKeyOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext PathToFile
            {
                get
                {
                    return _pathToFile;
                }
            }
            
            public virtual AstPrivateKeyOptions PrivateKeyOptions
            {
                get
                {
                    return _privateKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistingKeys(this);
            }
        }
        

        
        internal AstExistingKeys(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExistingKeys(Position p) : 
                base(p)
        {
        }
        
        internal AstExistingKeys(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExistingKeys Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExistingKeys.AstExistingKeys1(ctx, list.Get<AstAssemblyId>(0));
            }
            if ((index == 2))
            {
                return new AstExistingKeys.AstExistingKeys2(ctx, list.Get<AstStringtext>(0), list.Get<AstPrivateKeyOptions>(1));
            }
            return null;
        }
        
        /// <summary>
        /// existing_keys : 
        ///    ASSEMBLY assembly_id 
        /// </summary>
        public static AstExistingKeys ExistingKeys(ParserRuleContext ctx, AstAssemblyId assemblyId)
        {
            AstExistingKeys.AstExistingKeys1 result = new AstExistingKeys.AstExistingKeys1(ctx, assemblyId);
            return result;
        }
        
        /// <summary>
        /// existing_keys : 
        ///    EXECUTABLE? FILE EQUAL path_to_file=stringtext WITH PRIVATE KEY ( private_key_options ) 
        /// </summary>
        public static AstExistingKeys ExistingKeys(ParserRuleContext ctx, AstStringtext pathToFile, AstPrivateKeyOptions privateKeyOptions)
        {
            AstExistingKeys.AstExistingKeys2 result = new AstExistingKeys.AstExistingKeys2(ctx, pathToFile, privateKeyOptions);
            return result;
        }
    }
    
    /// <summary>
    /// private_key_options
    /// 	 : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encryption_decryption  BY  password_setting)?
    /// </summary>
    public abstract partial class AstPrivateKeyOptions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionDecryption), false, false, "encryption_decryption"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionDecryption), false, false, "encryption_decryption"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"))));
        
        private static string _ruleValue = "(FILE | binary_)  EQUAL  path = stringtext  (COMMA  encryption_decryption  BY  pa" +
            "ssword_setting)?\r\n";
        
        private static string _ruleName = "private_key_options";
        
        /// <summary>
        /// private_key_options : FILE EQUAL path=stringtext COMMA encryption_decryption BY password_setting 
        /// </summary>
        public partial class AstPrivateKeyOptions1 : AstPrivateKeyOptions
        {
            
            private static string _ruleName1 = "private_key_options";
            
            private AstStringtext _path;
            
            private AstEncryptionDecryption _encryptionDecryption;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstPrivateKeyOptions1(ParserRuleContext ctx, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _path = path;
                _encryptionDecryption = encryptionDecryption;
                _passwordSetting = passwordSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Path
            {
                get
                {
                    return _path;
                }
            }
            
            public virtual AstEncryptionDecryption EncryptionDecryption
            {
                get
                {
                    return _encryptionDecryption;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivateKeyOptions(this);
            }
        }
        /// <summary>
        /// private_key_options : binary_ EQUAL path=stringtext COMMA encryption_decryption BY password_setting 
        /// </summary>
        public partial class AstPrivateKeyOptions2 : AstPrivateKeyOptions
        {
            
            private static string _ruleName1 = "private_key_options";
            
            private AstBinary _binary;
            
            private AstStringtext _path;
            
            private AstEncryptionDecryption _encryptionDecryption;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstPrivateKeyOptions2(ParserRuleContext ctx, AstBinary binary, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _binary = binary;
                _path = path;
                _encryptionDecryption = encryptionDecryption;
                _passwordSetting = passwordSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public virtual AstStringtext Path
            {
                get
                {
                    return _path;
                }
            }
            
            public virtual AstEncryptionDecryption EncryptionDecryption
            {
                get
                {
                    return _encryptionDecryption;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivateKeyOptions(this);
            }
        }
        

        
        internal AstPrivateKeyOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrivateKeyOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstPrivateKeyOptions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPrivateKeyOptions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPrivateKeyOptions.AstPrivateKeyOptions1(ctx, list.Get<AstStringtext>(0), list.Get<AstEncryptionDecryption>(1), list.Get<AstPasswordSetting>(2));
            }
            if ((index == 2))
            {
                return new AstPrivateKeyOptions.AstPrivateKeyOptions2(ctx, list.Get<AstBinary>(0), list.Get<AstStringtext>(1), list.Get<AstEncryptionDecryption>(2), list.Get<AstPasswordSetting>(3));
            }
            return null;
        }
        
        /// <summary>
        /// private_key_options : 
        ///    FILE EQUAL path=stringtext , encryption_decryption BY password_setting 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(ParserRuleContext ctx, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting)
        {
            AstPrivateKeyOptions.AstPrivateKeyOptions1 result = new AstPrivateKeyOptions.AstPrivateKeyOptions1(ctx, path, encryptionDecryption, passwordSetting);
            return result;
        }
        
        /// <summary>
        /// private_key_options : 
        ///    binary_ EQUAL path=stringtext , encryption_decryption BY password_setting 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(ParserRuleContext ctx, AstBinary binary, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting)
        {
            AstPrivateKeyOptions.AstPrivateKeyOptions2 result = new AstPrivateKeyOptions.AstPrivateKeyOptions2(ctx, binary, path, encryptionDecryption, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// open_key
    /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism
    /// 	 | OPEN  MASTER  KEY  decryption_by_pwd
    /// </summary>
    public abstract partial class AstOpenKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSymmetricKeyId), false, false, "symmetric_key_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecryptionMechanism), false, false, "decryption_mechanism")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecryptionByPwd), false, false, "decryption_by_pwd"))));
        
        private static string _ruleValue = "OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism\r\n | " +
            "OPEN  MASTER  KEY  decryption_by_pwd\r\n";
        
        private static string _ruleName = "open_key";
        
        /// <summary>
        /// open_key : OPEN SYMMETRIC KEY symmetric_key_id DECRYPTION BY decryption_mechanism 
        /// </summary>
        public partial class AstOpenKey1 : AstOpenKey
        {
            
            private static string _ruleName1 = "open_key";
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            private AstDecryptionMechanism _decryptionMechanism;
            
            internal AstOpenKey1(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstDecryptionMechanism decryptionMechanism) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
                _decryptionMechanism = decryptionMechanism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public virtual AstDecryptionMechanism DecryptionMechanism
            {
                get
                {
                    return _decryptionMechanism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOpenKey(this);
            }
        }
        /// <summary>
        /// open_key : OPEN MASTER KEY decryption_by_pwd 
        /// </summary>
        public partial class AstOpenKey2 : AstOpenKey
        {
            
            private static string _ruleName1 = "open_key";
            
            private AstDecryptionByPwd _decryptionByPwd;
            
            internal AstOpenKey2(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd) : 
                    base(ctx)
            {
                _decryptionByPwd = decryptionByPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecryptionByPwd DecryptionByPwd
            {
                get
                {
                    return _decryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOpenKey(this);
            }
        }
        

        
        internal AstOpenKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOpenKey(Position p) : 
                base(p)
        {
        }
        
        internal AstOpenKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstOpenKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstOpenKey.AstOpenKey1(ctx, list.Get<AstSymmetricKeyId>(0), list.Get<AstDecryptionMechanism>(1));
            }
            if ((index == 2))
            {
                return new AstOpenKey.AstOpenKey2(ctx, list.Get<AstDecryptionByPwd>(0));
            }
            return null;
        }
        
        /// <summary>
        /// open_key : 
        ///    OPEN SYMMETRIC KEY symmetric_key_id DECRYPTION BY decryption_mechanism 
        /// </summary>
        public static AstOpenKey OpenKey(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstDecryptionMechanism decryptionMechanism)
        {
            AstOpenKey.AstOpenKey1 result = new AstOpenKey.AstOpenKey1(ctx, symmetricKeyId, decryptionMechanism);
            return result;
        }
        
        /// <summary>
        /// open_key : 
        ///    OPEN MASTER KEY decryption_by_pwd 
        /// </summary>
        public static AstOpenKey OpenKey(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd)
        {
            AstOpenKey.AstOpenKey2 result = new AstOpenKey.AstOpenKey2(ctx, decryptionByPwd);
            return result;
        }
    }
    
    /// <summary>
    /// close_key
    /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_id
    /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
    /// 	 | CLOSE  MASTER  KEY
    /// </summary>
    public abstract partial class AstCloseKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSymmetricKeyId), false, false, "symmetric_key_id"))));
        
        private static string _ruleValue = "CLOSE  SYMMETRIC  KEY  symmetric_key_id\r\n | CLOSE  ALL  SYMMETRIC  KEYS\r\n | CLOSE" +
            "  MASTER  KEY\r\n";
        
        private static string _ruleName = "close_key";
        
        /// <summary>
        /// close_key : CLOSE SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public partial class AstCloseKey1 : AstCloseKey
        {
            
            private static string _ruleName1 = "close_key";
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            internal AstCloseKey1(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        /// <summary>
        /// close_key : CLOSE ALL SYMMETRIC KEYS 
        /// </summary>
        public partial class AstCloseKey2 : AstCloseKey
        {
            
            private static string _ruleName1 = "close_key";
            
            internal AstCloseKey2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        /// <summary>
        /// close_key : CLOSE MASTER KEY 
        /// </summary>
        public partial class AstCloseKey3 : AstCloseKey
        {
            
            private static string _ruleName1 = "close_key";
            
            internal AstCloseKey3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        

        
        internal AstCloseKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCloseKey(Position p) : 
                base(p)
        {
        }
        
        internal AstCloseKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCloseKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCloseKey.AstCloseKey1(ctx, list.Get<AstSymmetricKeyId>(0));
            }
            if ((index == 2))
            {
                return new AstCloseKey.AstCloseKey2(ctx);
            }
            if ((index == 3))
            {
                return new AstCloseKey.AstCloseKey3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// close_key : 
        ///    CLOSE SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstCloseKey CloseKey(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId)
        {
            AstCloseKey.AstCloseKey1 result = new AstCloseKey.AstCloseKey1(ctx, symmetricKeyId);
            return result;
        }
        
        /// <summary>
        /// close_key : 
        ///    CLOSE ALL SYMMETRIC KEYS 
        /// </summary>
        public static AstCloseKey CloseKey(ParserRuleContext ctx)
        {
            AstCloseKey.AstCloseKey2 result = new AstCloseKey.AstCloseKey2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_key
    /// 	 : CREATE  MASTER  KEY  encryption_by_pwd
    /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  create_key_options
    /// </summary>
    public abstract partial class AstCreateKey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSymmetricKeyId), false, false, "symmetric_key_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUserId), false, false, "user_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstProviderId), false, false, "provider_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCreateKeyOptions), false, false, "create_key_options")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionByPwd), false, false, "encryption_by_pwd"))));
        
        private static string _ruleValue = "CREATE  MASTER  KEY  encryption_by_pwd\r\n | CREATE  SYMMETRIC  KEY  symmetric_key_" +
            "id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  create_key_" +
            "options\r\n";
        
        private static string _ruleName = "create_key";
        
        /// <summary>
        /// create_key : CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public partial class AstCreateKey1 : AstCreateKey
        {
            
            private static string _ruleName1 = "create_key";
            
            private AstEncryptionByPwd _encryptionByPwd;
            
            internal AstCreateKey1(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd) : 
                    base(ctx)
            {
                _encryptionByPwd = encryptionByPwd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEncryptionByPwd EncryptionByPwd
            {
                get
                {
                    return _encryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKey(this);
            }
        }
        /// <summary>
        /// create_key : CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH create_key_options 
        /// </summary>
        public partial class AstCreateKey2 : AstCreateKey
        {
            
            private static string _ruleName1 = "create_key";
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            private AstUserId _userId;
            
            private AstProviderId _providerId;
            
            private AstCreateKeyOptions _createKeyOptions;
            
            internal AstCreateKey2(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstCreateKeyOptions createKeyOptions) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
                _userId = userId;
                _providerId = providerId;
                _createKeyOptions = createKeyOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstProviderId ProviderId
            {
                get
                {
                    return _providerId;
                }
            }
            
            public virtual AstCreateKeyOptions CreateKeyOptions
            {
                get
                {
                    return _createKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKey(this);
            }
        }
        

        
        internal AstCreateKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateKey(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateKey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateKey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateKey.AstCreateKey1(ctx, list.Get<AstEncryptionByPwd>(0));
            }
            if ((index == 2))
            {
                return new AstCreateKey.AstCreateKey2(ctx, list.Get<AstSymmetricKeyId>(0), list.Get<AstUserId>(1), list.Get<AstProviderId>(2), list.Get<AstCreateKeyOptions>(3));
            }
            return null;
        }
        
        /// <summary>
        /// create_key : 
        ///    CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public static AstCreateKey CreateKey(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd)
        {
            AstCreateKey.AstCreateKey1 result = new AstCreateKey.AstCreateKey1(ctx, encryptionByPwd);
            return result;
        }
        
        /// <summary>
        /// create_key : 
        ///    CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH create_key_options 
        /// </summary>
        public static AstCreateKey CreateKey(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstCreateKeyOptions createKeyOptions)
        {
            AstCreateKey.AstCreateKey2 result = new AstCreateKey.AstCreateKey2(ctx, symmetricKeyId, userId, providerId, createKeyOptions);
            return result;
        }
    }
    
    /// <summary>
    /// create_key_option
    /// 	 : key_options
    /// 	 | ENCRYPTION  BY  encryption_mechanism
    /// </summary>
    public abstract partial class AstCreateKeyOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstKeyOptions), false, false, "key_options")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionMechanism), false, false, "encryption_mechanism"))));
        
        private static string _ruleValue = "key_options\r\n | ENCRYPTION  BY  encryption_mechanism\r\n";
        
        private static string _ruleName = "create_key_option";
        
        /// <summary>
        /// create_key_option : key_options 
        /// </summary>
        public partial class AstCreateKeyOption1 : AstCreateKeyOption
        {
            
            private static string _ruleName1 = "create_key_option";
            
            private AstKeyOptions _keyOptions;
            
            internal AstCreateKeyOption1(ParserRuleContext ctx, AstKeyOptions keyOptions) : 
                    base(ctx)
            {
                _keyOptions = keyOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKeyOptions KeyOptions
            {
                get
                {
                    return _keyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKeyOption(this);
            }
        }
        /// <summary>
        /// create_key_option : ENCRYPTION BY encryption_mechanism 
        /// </summary>
        public partial class AstCreateKeyOption2 : AstCreateKeyOption
        {
            
            private static string _ruleName1 = "create_key_option";
            
            private AstEncryptionMechanism _encryptionMechanism;
            
            internal AstCreateKeyOption2(ParserRuleContext ctx, AstEncryptionMechanism encryptionMechanism) : 
                    base(ctx)
            {
                _encryptionMechanism = encryptionMechanism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstEncryptionMechanism EncryptionMechanism
            {
                get
                {
                    return _encryptionMechanism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKeyOption(this);
            }
        }
        

        
        internal AstCreateKeyOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateKeyOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateKeyOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateKeyOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateKeyOption.AstCreateKeyOption1(ctx, list.Get<AstKeyOptions>(0));
            }
            if ((index == 2))
            {
                return new AstCreateKeyOption.AstCreateKeyOption2(ctx, list.Get<AstEncryptionMechanism>(0));
            }
            return null;
        }
        
        /// <summary>
        /// create_key_option : 
        ///    key_options 
        /// </summary>
        public static AstCreateKeyOption CreateKeyOption(ParserRuleContext ctx, AstKeyOptions keyOptions)
        {
            AstCreateKeyOption.AstCreateKeyOption1 result = new AstCreateKeyOption.AstCreateKeyOption1(ctx, keyOptions);
            return result;
        }
        
        /// <summary>
        /// create_key_option : 
        ///    ENCRYPTION BY encryption_mechanism 
        /// </summary>
        public static AstCreateKeyOption CreateKeyOption(ParserRuleContext ctx, AstEncryptionMechanism encryptionMechanism)
        {
            AstCreateKeyOption.AstCreateKeyOption2 result = new AstCreateKeyOption.AstCreateKeyOption2(ctx, encryptionMechanism);
            return result;
        }
    }
    
    /// <summary>
    /// key_options
    /// 	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
    /// 	 | ALGORITHM  EQUAL  algorithm
    /// 	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
    /// 	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
    /// 	 | CREATION_DISPOSITION  EQUAL  creation_disposition
    /// </summary>
    public abstract partial class AstKeyOptions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAlgorithm), false, false, "algorithm")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstCreationDisposition), false, false, "creation_disposition"))));
        
        private static string _ruleValue = "KEY_SOURCE  EQUAL  pass_phrase = stringtext\r\n | ALGORITHM  EQUAL  algorithm\r\n | I" +
            "DENTITY_VALUE  EQUAL  identity_phrase = stringtext\r\n | PROVIDER_KEY_NAME  EQUAL " +
            " key_name_in_provider = stringtext\r\n | CREATION_DISPOSITION  EQUAL  creation_dis" +
            "position\r\n";
        
        private static string _ruleName = "key_options";
        
        /// <summary>
        /// key_options : KEY_SOURCE EQUAL pass_phrase=stringtext 
        /// </summary>
        public partial class AstKeyOptions1 : AstKeyOptions
        {
            
            private static string _ruleName1 = "key_options";
            
            private AstStringtext _passPhrase;
            
            internal AstKeyOptions1(ParserRuleContext ctx, AstStringtext passPhrase) : 
                    base(ctx)
            {
                _passPhrase = passPhrase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext PassPhrase
            {
                get
                {
                    return _passPhrase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : ALGORITHM EQUAL algorithm 
        /// </summary>
        public partial class AstKeyOptions2 : AstKeyOptions
        {
            
            private static string _ruleName1 = "key_options";
            
            private AstAlgorithm _algorithm;
            
            internal AstKeyOptions2(ParserRuleContext ctx, AstAlgorithm algorithm) : 
                    base(ctx)
            {
                _algorithm = algorithm;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAlgorithm Algorithm
            {
                get
                {
                    return _algorithm;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : IDENTITY_VALUE EQUAL identity_phrase=stringtext 
        /// </summary>
        public partial class AstKeyOptions3 : AstKeyOptions
        {
            
            private static string _ruleName1 = "key_options";
            
            private AstStringtext _identityPhrase;
            
            internal AstKeyOptions3(ParserRuleContext ctx, AstStringtext identityPhrase) : 
                    base(ctx)
            {
                _identityPhrase = identityPhrase;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext IdentityPhrase
            {
                get
                {
                    return _identityPhrase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : PROVIDER_KEY_NAME EQUAL key_name_in_provider=stringtext 
        /// </summary>
        public partial class AstKeyOptions4 : AstKeyOptions
        {
            
            private static string _ruleName1 = "key_options";
            
            private AstStringtext _keyNameInProvider;
            
            internal AstKeyOptions4(ParserRuleContext ctx, AstStringtext keyNameInProvider) : 
                    base(ctx)
            {
                _keyNameInProvider = keyNameInProvider;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext KeyNameInProvider
            {
                get
                {
                    return _keyNameInProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public partial class AstKeyOptions5 : AstKeyOptions
        {
            
            private static string _ruleName1 = "key_options";
            
            private AstCreationDisposition _creationDisposition;
            
            internal AstKeyOptions5(ParserRuleContext ctx, AstCreationDisposition creationDisposition) : 
                    base(ctx)
            {
                _creationDisposition = creationDisposition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCreationDisposition CreationDisposition
            {
                get
                {
                    return _creationDisposition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        

        
        internal AstKeyOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKeyOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstKeyOptions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstKeyOptions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstKeyOptions.AstKeyOptions1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstKeyOptions.AstKeyOptions2(ctx, list.Get<AstAlgorithm>(0));
            }
            if ((index == 3))
            {
                return new AstKeyOptions.AstKeyOptions3(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 4))
            {
                return new AstKeyOptions.AstKeyOptions4(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 5))
            {
                return new AstKeyOptions.AstKeyOptions5(ctx, list.Get<AstCreationDisposition>(0));
            }
            return null;
        }
        
        /// <summary>
        /// key_options : 
        ///    KEY_SOURCE EQUAL pass_phrase=stringtext 
        /// </summary>
        public static AstKeyOptions KeyOptions(ParserRuleContext ctx, AstStringtext passPhrase)
        {
            AstKeyOptions.AstKeyOptions1 result = new AstKeyOptions.AstKeyOptions1(ctx, passPhrase);
            return result;
        }
        
        /// <summary>
        /// key_options : 
        ///    ALGORITHM EQUAL algorithm 
        /// </summary>
        public static AstKeyOptions KeyOptions(ParserRuleContext ctx, AstAlgorithm algorithm)
        {
            AstKeyOptions.AstKeyOptions2 result = new AstKeyOptions.AstKeyOptions2(ctx, algorithm);
            return result;
        }
        
        /// <summary>
        /// key_options : 
        ///    CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public static AstKeyOptions KeyOptions(ParserRuleContext ctx, AstCreationDisposition creationDisposition)
        {
            AstKeyOptions.AstKeyOptions5 result = new AstKeyOptions.AstKeyOptions5(ctx, creationDisposition);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_mechanism
    /// 	 : CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | password_setting
    /// </summary>
    public abstract partial class AstEncryptionMechanism : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCertificateId), false, false, "certificate_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAsymKeyId), false, false, "asym_key_id")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSymmetricKeyId), false, false, "symmetric_key_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"))));
        
        private static string _ruleValue = "CERTIFICATE  certificate_id\r\n | ASYMMETRIC  KEY  asym_key_id\r\n | SYMMETRIC  KEY  " +
            "symmetric_key_id\r\n | password_setting\r\n";
        
        private static string _ruleName = "encryption_mechanism";
        
        /// <summary>
        /// encryption_mechanism : CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstEncryptionMechanism1 : AstEncryptionMechanism
        {
            
            private static string _ruleName1 = "encryption_mechanism";
            
            private AstCertificateId _certificateId;
            
            internal AstEncryptionMechanism1(ParserRuleContext ctx, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _certificateId = certificateId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstEncryptionMechanism2 : AstEncryptionMechanism
        {
            
            private static string _ruleName1 = "encryption_mechanism";
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstEncryptionMechanism2(ParserRuleContext ctx, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public partial class AstEncryptionMechanism3 : AstEncryptionMechanism
        {
            
            private static string _ruleName1 = "encryption_mechanism";
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            internal AstEncryptionMechanism3(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : password_setting 
        /// </summary>
        public partial class AstEncryptionMechanism4 : AstEncryptionMechanism
        {
            
            private static string _ruleName1 = "encryption_mechanism";
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstEncryptionMechanism4(ParserRuleContext ctx, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        

        
        internal AstEncryptionMechanism(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionMechanism(Position p) : 
                base(p)
        {
        }
        
        internal AstEncryptionMechanism(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEncryptionMechanism Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism1(ctx, list.Get<AstCertificateId>(0));
            }
            if ((index == 2))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism2(ctx, list.Get<AstAsymKeyId>(0));
            }
            if ((index == 3))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism3(ctx, list.Get<AstSymmetricKeyId>(0));
            }
            if ((index == 4))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism4(ctx, list.Get<AstPasswordSetting>(0));
            }
            return null;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstCertificateId certificateId)
        {
            AstEncryptionMechanism.AstEncryptionMechanism1 result = new AstEncryptionMechanism.AstEncryptionMechanism1(ctx, certificateId);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstAsymKeyId asymKeyId)
        {
            AstEncryptionMechanism.AstEncryptionMechanism2 result = new AstEncryptionMechanism.AstEncryptionMechanism2(ctx, asymKeyId);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId)
        {
            AstEncryptionMechanism.AstEncryptionMechanism3 result = new AstEncryptionMechanism.AstEncryptionMechanism3(ctx, symmetricKeyId);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    password_setting 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstPasswordSetting passwordSetting)
        {
            AstEncryptionMechanism.AstEncryptionMechanism4 result = new AstEncryptionMechanism.AstEncryptionMechanism4(ctx, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// decryption_mechanism
    /// 	 : CERTIFICATE  certificate_id  (WITH  password_setting)?
    /// 	 | ASYMMETRIC  KEY  asym_key_id  (WITH  password_setting)?
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | password_setting
    /// </summary>
    public abstract partial class AstDecryptionMechanism : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCertificateId), false, false, "certificate_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAsymKeyId), false, false, "asym_key_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSymmetricKeyId), false, false, "symmetric_key_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstPasswordSetting), false, false, "password_setting"))));
        
        private static string _ruleValue = "CERTIFICATE  certificate_id  (WITH  password_setting)?\r\n | ASYMMETRIC  KEY  asym_" +
            "key_id  (WITH  password_setting)?\r\n | SYMMETRIC  KEY  symmetric_key_id\r\n | passw" +
            "ord_setting\r\n";
        
        private static string _ruleName = "decryption_mechanism";
        
        /// <summary>
        /// decryption_mechanism : CERTIFICATE certificate_id WITH password_setting 
        /// </summary>
        public partial class AstDecryptionMechanism1 : AstDecryptionMechanism
        {
            
            private static string _ruleName1 = "decryption_mechanism";
            
            private AstCertificateId _certificateId;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstDecryptionMechanism1(ParserRuleContext ctx, AstCertificateId certificateId, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _certificateId = certificateId;
                _passwordSetting = passwordSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : ASYMMETRIC KEY asym_key_id WITH password_setting 
        /// </summary>
        public partial class AstDecryptionMechanism2 : AstDecryptionMechanism
        {
            
            private static string _ruleName1 = "decryption_mechanism";
            
            private AstAsymKeyId _asymKeyId;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstDecryptionMechanism2(ParserRuleContext ctx, AstAsymKeyId asymKeyId, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
                _passwordSetting = passwordSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public partial class AstDecryptionMechanism3 : AstDecryptionMechanism
        {
            
            private static string _ruleName1 = "decryption_mechanism";
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            internal AstDecryptionMechanism3(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : password_setting 
        /// </summary>
        public partial class AstDecryptionMechanism4 : AstDecryptionMechanism
        {
            
            private static string _ruleName1 = "decryption_mechanism";
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstDecryptionMechanism4(ParserRuleContext ctx, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        

        
        internal AstDecryptionMechanism(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecryptionMechanism(Position p) : 
                base(p)
        {
        }
        
        internal AstDecryptionMechanism(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDecryptionMechanism Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism1(ctx, list.Get<AstCertificateId>(0), list.Get<AstPasswordSetting>(1));
            }
            if ((index == 2))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism2(ctx, list.Get<AstAsymKeyId>(0), list.Get<AstPasswordSetting>(1));
            }
            if ((index == 3))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism3(ctx, list.Get<AstSymmetricKeyId>(0));
            }
            if ((index == 4))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism4(ctx, list.Get<AstPasswordSetting>(0));
            }
            return null;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    CERTIFICATE certificate_id WITH password_setting 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstCertificateId certificateId, AstPasswordSetting passwordSetting)
        {
            AstDecryptionMechanism.AstDecryptionMechanism1 result = new AstDecryptionMechanism.AstDecryptionMechanism1(ctx, certificateId, passwordSetting);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    ASYMMETRIC KEY asym_key_id WITH password_setting 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstAsymKeyId asymKeyId, AstPasswordSetting passwordSetting)
        {
            AstDecryptionMechanism.AstDecryptionMechanism2 result = new AstDecryptionMechanism.AstDecryptionMechanism2(ctx, asymKeyId, passwordSetting);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId)
        {
            AstDecryptionMechanism.AstDecryptionMechanism3 result = new AstDecryptionMechanism.AstDecryptionMechanism3(ctx, symmetricKeyId);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    password_setting 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstPasswordSetting passwordSetting)
        {
            AstDecryptionMechanism.AstDecryptionMechanism4 result = new AstDecryptionMechanism.AstDecryptionMechanism4(ctx, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// grant_permission
    /// 	 : grant_permission_enum
    /// 	 | grant_permission_alter
    /// 	 | grant_permission_create
    /// </summary>
    public abstract partial class AstGrantPermission : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstGrantPermissionEnum), false, false, "grant_permission_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstGrantPermissionAlter), false, false, "grant_permission_alter")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstGrantPermissionCreate), false, false, "grant_permission_create"))));
        
        private static string _ruleValue = "grant_permission_enum\r\n | grant_permission_alter\r\n | grant_permission_create\r\n";
        
        private static string _ruleName = "grant_permission";
        
        /// <summary>
        /// grant_permission : grant_permission_enum 
        /// </summary>
        public partial class AstGrantPermission1 : AstGrantPermission
        {
            
            private static string _ruleName1 = "grant_permission";
            
            private AstGrantPermissionEnum _grantPermissionEnum;
            
            internal AstGrantPermission1(ParserRuleContext ctx, AstGrantPermissionEnum grantPermissionEnum) : 
                    base(ctx)
            {
                _grantPermissionEnum = grantPermissionEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGrantPermissionEnum GrantPermissionEnum
            {
                get
                {
                    return _grantPermissionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        /// <summary>
        /// grant_permission : grant_permission_alter 
        /// </summary>
        public partial class AstGrantPermission2 : AstGrantPermission
        {
            
            private static string _ruleName1 = "grant_permission";
            
            private AstGrantPermissionAlter _grantPermissionAlter;
            
            internal AstGrantPermission2(ParserRuleContext ctx, AstGrantPermissionAlter grantPermissionAlter) : 
                    base(ctx)
            {
                _grantPermissionAlter = grantPermissionAlter;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGrantPermissionAlter GrantPermissionAlter
            {
                get
                {
                    return _grantPermissionAlter;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        /// <summary>
        /// grant_permission : grant_permission_create 
        /// </summary>
        public partial class AstGrantPermission3 : AstGrantPermission
        {
            
            private static string _ruleName1 = "grant_permission";
            
            private AstGrantPermissionCreate _grantPermissionCreate;
            
            internal AstGrantPermission3(ParserRuleContext ctx, AstGrantPermissionCreate grantPermissionCreate) : 
                    base(ctx)
            {
                _grantPermissionCreate = grantPermissionCreate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGrantPermissionCreate GrantPermissionCreate
            {
                get
                {
                    return _grantPermissionCreate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        

        
        internal AstGrantPermission(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGrantPermission(Position p) : 
                base(p)
        {
        }
        
        internal AstGrantPermission(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstGrantPermission Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstGrantPermission.AstGrantPermission1(ctx, list.Get<AstGrantPermissionEnum>(0));
            }
            if ((index == 2))
            {
                return new AstGrantPermission.AstGrantPermission2(ctx, list.Get<AstGrantPermissionAlter>(0));
            }
            if ((index == 3))
            {
                return new AstGrantPermission.AstGrantPermission3(ctx, list.Get<AstGrantPermissionCreate>(0));
            }
            return null;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_enum 
        /// </summary>
        public static AstGrantPermission GrantPermission(ParserRuleContext ctx, AstGrantPermissionEnum grantPermissionEnum)
        {
            AstGrantPermission.AstGrantPermission1 result = new AstGrantPermission.AstGrantPermission1(ctx, grantPermissionEnum);
            return result;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_alter 
        /// </summary>
        public static AstGrantPermission GrantPermission(ParserRuleContext ctx, AstGrantPermissionAlter grantPermissionAlter)
        {
            AstGrantPermission.AstGrantPermission2 result = new AstGrantPermission.AstGrantPermission2(ctx, grantPermissionAlter);
            return result;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_create 
        /// </summary>
        public static AstGrantPermission GrantPermission(ParserRuleContext ctx, AstGrantPermissionCreate grantPermissionCreate)
        {
            AstGrantPermission.AstGrantPermission3 result = new AstGrantPermission.AstGrantPermission3(ctx, grantPermissionCreate);
            return result;
        }
    }
    
    /// <summary>
    /// set_statement
    /// 	 : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression
    /// 	 | SET  local_id  assignment_operator  expression
    /// 	 | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  cursor_mode)?
    /// 	 | set_special
    /// </summary>
    public abstract partial class AstSetStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAssignmentOperator), false, false, "assignment_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDeclareSetCursorCommon), false, false, "declare_set_cursor_common"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCursorMode), false, false, "cursor_mode")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstSetSpecial), false, false, "set_special"))));
        
        private static string _ruleValue = "SET  local_id  (DOT  member_name = id_)?  EQUAL  expression\r\n | SET  local_id  as" +
            "signment_operator  expression\r\n | SET  local_id  EQUAL  CURSOR  declare_set_curs" +
            "or_common  (FOR  cursor_mode)?\r\n | set_special\r\n";
        
        private static string _ruleName = "set_statement";
        
        /// <summary>
        /// set_statement : SET local_id DOT member_name=id_ EQUAL expression 
        /// </summary>
        public partial class AstSetStatement1 : AstSetStatement
        {
            
            private static string _ruleName1 = "set_statement";
            
            private AstLocalId _localId;
            
            private AstId _memberName;
            
            private AstExpression _expression;
            
            internal AstSetStatement1(ParserRuleContext ctx, AstLocalId localId, AstId memberName, AstExpression expression) : 
                    base(ctx)
            {
                _localId = localId;
                _memberName = memberName;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstId MemberName
            {
                get
                {
                    return _memberName;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : SET local_id assignment_operator expression 
        /// </summary>
        public partial class AstSetStatement2 : AstSetStatement
        {
            
            private static string _ruleName1 = "set_statement";
            
            private AstLocalId _localId;
            
            private AstAssignmentOperator _assignmentOperator;
            
            private AstExpression _expression;
            
            internal AstSetStatement2(ParserRuleContext ctx, AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression) : 
                    base(ctx)
            {
                _localId = localId;
                _assignmentOperator = assignmentOperator;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstAssignmentOperator AssignmentOperator
            {
                get
                {
                    return _assignmentOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : SET local_id EQUAL CURSOR declare_set_cursor_common FOR cursor_mode 
        /// </summary>
        public partial class AstSetStatement3 : AstSetStatement
        {
            
            private static string _ruleName1 = "set_statement";
            
            private AstLocalId _localId;
            
            private AstDeclareSetCursorCommon _declareSetCursorCommon;
            
            private AstCursorMode _cursorMode;
            
            internal AstSetStatement3(ParserRuleContext ctx, AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon, AstCursorMode cursorMode) : 
                    base(ctx)
            {
                _localId = localId;
                _declareSetCursorCommon = declareSetCursorCommon;
                _cursorMode = cursorMode;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstDeclareSetCursorCommon DeclareSetCursorCommon
            {
                get
                {
                    return _declareSetCursorCommon;
                }
            }
            
            public virtual AstCursorMode CursorMode
            {
                get
                {
                    return _cursorMode;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : set_special 
        /// </summary>
        public partial class AstSetStatement4 : AstSetStatement
        {
            
            private static string _ruleName1 = "set_statement";
            
            private AstSetSpecial _setSpecial;
            
            internal AstSetStatement4(ParserRuleContext ctx, AstSetSpecial setSpecial) : 
                    base(ctx)
            {
                _setSpecial = setSpecial;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSetSpecial SetSpecial
            {
                get
                {
                    return _setSpecial;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        

        
        internal AstSetStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstSetStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSetStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSetStatement.AstSetStatement1(ctx, list.Get<AstLocalId>(0), list.Get<AstId>(1), list.Get<AstExpression>(2));
            }
            if ((index == 2))
            {
                return new AstSetStatement.AstSetStatement2(ctx, list.Get<AstLocalId>(0), list.Get<AstAssignmentOperator>(1), list.Get<AstExpression>(2));
            }
            if ((index == 3))
            {
                return new AstSetStatement.AstSetStatement3(ctx, list.Get<AstLocalId>(0), list.Get<AstDeclareSetCursorCommon>(1), list.Get<AstCursorMode>(2));
            }
            if ((index == 4))
            {
                return new AstSetStatement.AstSetStatement4(ctx, list.Get<AstSetSpecial>(0));
            }
            return null;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id . member_name=id_ EQUAL expression 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstLocalId localId, AstId memberName, AstExpression expression)
        {
            AstSetStatement.AstSetStatement1 result = new AstSetStatement.AstSetStatement1(ctx, localId, memberName, expression);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id assignment_operator expression 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            AstSetStatement.AstSetStatement2 result = new AstSetStatement.AstSetStatement2(ctx, localId, assignmentOperator, expression);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id EQUAL CURSOR declare_set_cursor_common FOR cursor_mode 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon, AstCursorMode cursorMode)
        {
            AstSetStatement.AstSetStatement3 result = new AstSetStatement.AstSetStatement3(ctx, localId, declareSetCursorCommon, cursorMode);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    set_special 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstSetSpecial setSpecial)
        {
            AstSetStatement.AstSetStatement4 result = new AstSetStatement.AstSetStatement4(ctx, setSpecial);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_mode
    /// 	 : READ  ONLY
    /// 	 | UPDATE  (OF  column_name_list)?
    /// </summary>
    public abstract partial class AstCursorMode : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list"))));
        
        private static string _ruleValue = "READ  ONLY\r\n | UPDATE  (OF  column_name_list)?\r\n";
        
        private static string _ruleName = "cursor_mode";
        
        /// <summary>
        /// cursor_mode : READ ONLY 
        /// </summary>
        public partial class AstCursorMode1 : AstCursorMode
        {
            
            private static string _ruleName1 = "cursor_mode";
            
            internal AstCursorMode1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorMode(this);
            }
        }
        /// <summary>
        /// cursor_mode : UPDATE OF column_name_list 
        /// </summary>
        public partial class AstCursorMode2 : AstCursorMode
        {
            
            private static string _ruleName1 = "cursor_mode";
            
            private AstColumnNameList _columnNameList;
            
            internal AstCursorMode2(ParserRuleContext ctx, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _columnNameList = columnNameList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorMode(this);
            }
        }
        

        
        internal AstCursorMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorMode(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorMode(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCursorMode Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCursorMode.AstCursorMode1(ctx);
            }
            if ((index == 2))
            {
                return new AstCursorMode.AstCursorMode2(ctx, list.Get<AstColumnNameList>(0));
            }
            return null;
        }
        
        /// <summary>
        /// cursor_mode : 
        ///    READ ONLY 
        /// </summary>
        public static AstCursorMode CursorMode(ParserRuleContext ctx)
        {
            AstCursorMode.AstCursorMode1 result = new AstCursorMode.AstCursorMode1(ctx);
            return result;
        }
        
        /// <summary>
        /// cursor_mode : 
        ///    UPDATE OF column_name_list 
        /// </summary>
        public static AstCursorMode CursorMode(ParserRuleContext ctx, AstColumnNameList columnNameList)
        {
            AstCursorMode.AstCursorMode2 result = new AstCursorMode.AstCursorMode2(ctx, columnNameList);
            return result;
        }
    }
    
    /// <summary>
    /// transaction_statement
    /// 	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
    /// 	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
    /// 	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
    /// 	 | COMMIT  WORK?
    /// 	 | COMMIT  transaction_identifier
    /// 	 | ROLLBACK  transaction_identifier
    /// 	 | ROLLBACK  transaction  transaction_ref?
    /// 	 | ROLLBACK  WORK?
    /// 	 | SAVE  transaction  transaction_ref?
    /// </summary>
    public abstract partial class AstTransactionStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransaction), false, false, "transaction"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionRef), false, false, "transaction_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransaction), false, false, "transaction"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionRef), false, false, "transaction_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransaction), false, false, "transaction"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionRef), true, false, "transaction_ref")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransaction), false, false, "transaction"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionRef), true, false, "transaction_ref")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransaction), false, false, "transaction"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionRef), true, false, "transaction_ref")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionIdentifier), false, false, "transaction_identifier")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionIdentifier), false, false, "transaction_identifier"))));
        
        private static string _ruleValue = @"BEGIN  DISTRIBUTED  transaction  transaction_ref?
 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
 | COMMIT  WORK?
 | COMMIT  transaction_identifier
 | ROLLBACK  transaction_identifier
 | ROLLBACK  transaction  transaction_ref?
 | ROLLBACK  WORK?
 | SAVE  transaction  transaction_ref?
";
        
        private static string _ruleName = "transaction_statement";
        
        /// <summary>
        /// transaction_statement : BEGIN DISTRIBUTED transaction transaction_ref? 
        /// </summary>
        public partial class AstTransactionStatement1 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            private AstTransaction _transaction;
            
            private AstTransactionRef? _transactionRef;
            
            internal AstTransactionStatement1(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef? transactionRef) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef? TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : BEGIN transaction transaction_ref WITH MARK mark=stringtext 
        /// </summary>
        public partial class AstTransactionStatement2 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            private AstTransaction _transaction;
            
            private AstTransactionRef _transactionRef;
            
            private AstStringtext _mark;
            
            internal AstTransactionStatement2(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstStringtext mark) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
                _mark = mark;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public virtual AstStringtext Mark
            {
                get
                {
                    return _mark;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT transaction transaction_ref WITH LR_BRACKET DELAYED_DURABILITY EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstTransactionStatement3 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            private AstTransaction _transaction;
            
            private AstTransactionRef _transactionRef;
            
            private AstOnOff _onOff;
            
            internal AstTransactionStatement3(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstOnOff onOff) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT WORK? 
        /// </summary>
        public partial class AstTransactionStatement4 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            internal AstTransactionStatement4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT transaction_identifier 
        /// </summary>
        public partial class AstTransactionStatement5 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            private AstTransactionIdentifier _transactionIdentifier;
            
            internal AstTransactionStatement5(ParserRuleContext ctx, AstTransactionIdentifier transactionIdentifier) : 
                    base(ctx)
            {
                _transactionIdentifier = transactionIdentifier;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransactionIdentifier TransactionIdentifier
            {
                get
                {
                    return _transactionIdentifier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK transaction_identifier 
        /// </summary>
        public partial class AstTransactionStatement6 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            private AstTransactionIdentifier _transactionIdentifier;
            
            internal AstTransactionStatement6(ParserRuleContext ctx, AstTransactionIdentifier transactionIdentifier) : 
                    base(ctx)
            {
                _transactionIdentifier = transactionIdentifier;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransactionIdentifier TransactionIdentifier
            {
                get
                {
                    return _transactionIdentifier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK transaction transaction_ref? 
        /// </summary>
        public partial class AstTransactionStatement7 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            private AstTransaction _transaction;
            
            private AstTransactionRef? _transactionRef;
            
            internal AstTransactionStatement7(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef? transactionRef) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef? TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK WORK? 
        /// </summary>
        public partial class AstTransactionStatement8 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            internal AstTransactionStatement8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : SAVE transaction transaction_ref? 
        /// </summary>
        public partial class AstTransactionStatement9 : AstTransactionStatement
        {
            
            private static string _ruleName1 = "transaction_statement";
            
            private AstTransaction _transaction;
            
            private AstTransactionRef? _transactionRef;
            
            internal AstTransactionStatement9(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef? transactionRef) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef? TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        

        
        internal AstTransactionStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTransactionStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstTransactionStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTransactionStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTransactionStatement.AstTransactionStatement1(ctx, list.Get<AstTransaction>(0), list.Get<AstTransactionRef?>(1));
            }
            if ((index == 2))
            {
                return new AstTransactionStatement.AstTransactionStatement2(ctx, list.Get<AstTransaction>(0), list.Get<AstTransactionRef>(1), list.Get<AstStringtext>(2));
            }
            if ((index == 3))
            {
                return new AstTransactionStatement.AstTransactionStatement3(ctx, list.Get<AstTransaction>(0), list.Get<AstTransactionRef>(1), list.Get<AstOnOff>(2));
            }
            if ((index == 4))
            {
                return new AstTransactionStatement.AstTransactionStatement4(ctx);
            }
            if ((index == 5))
            {
                return new AstTransactionStatement.AstTransactionStatement5(ctx, list.Get<AstTransactionIdentifier>(0));
            }
            if ((index == 6))
            {
                return new AstTransactionStatement.AstTransactionStatement6(ctx, list.Get<AstTransactionIdentifier>(0));
            }
            if ((index == 7))
            {
                return new AstTransactionStatement.AstTransactionStatement7(ctx, list.Get<AstTransaction>(0), list.Get<AstTransactionRef?>(1));
            }
            if ((index == 8))
            {
                return new AstTransactionStatement.AstTransactionStatement8(ctx);
            }
            if ((index == 9))
            {
                return new AstTransactionStatement.AstTransactionStatement9(ctx, list.Get<AstTransaction>(0), list.Get<AstTransactionRef?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    BEGIN DISTRIBUTED transaction transaction_ref? 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef)
        {
            AstTransactionStatement.AstTransactionStatement1 result = new AstTransactionStatement.AstTransactionStatement1(ctx, transaction, transactionRef);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    BEGIN transaction transaction_ref WITH MARK mark=stringtext 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstStringtext mark)
        {
            AstTransactionStatement.AstTransactionStatement2 result = new AstTransactionStatement.AstTransactionStatement2(ctx, transaction, transactionRef, mark);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT transaction transaction_ref WITH ( DELAYED_DURABILITY EQUAL on_off ) 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstOnOff onOff)
        {
            AstTransactionStatement.AstTransactionStatement3 result = new AstTransactionStatement.AstTransactionStatement3(ctx, transaction, transactionRef, onOff);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT WORK? 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx)
        {
            AstTransactionStatement.AstTransactionStatement4 result = new AstTransactionStatement.AstTransactionStatement4(ctx);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT transaction_identifier 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransactionIdentifier transactionIdentifier)
        {
            AstTransactionStatement.AstTransactionStatement5 result = new AstTransactionStatement.AstTransactionStatement5(ctx, transactionIdentifier);
            return result;
        }
    }
    
    /// <summary>
    /// go_statement
    /// 	 : GO  (count = decimal)?
    /// </summary>
    public partial class AstGoStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstDecimal _count;
        
        private static string _ruleValue = "GO  (count = decimal)?\r\n";
        
        private static string _ruleName = "go_statement";
        
        internal AstGoStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGoStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGoStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstGoStatement(ParserRuleContext ctx, AstDecimal count) : 
                base(ctx)
        {
            _count = count;
        }
        
        public virtual AstDecimal Count
        {
            get
            {
                return _count;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatement(this);
        }
        
        public static AstGoStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstGoStatement(ctx, list.Get<AstDecimal>(0));
        }
        
        /// <summary>
        /// go_statement : 
        ///    GO count=decimal 
        /// </summary>
        public static AstGoStatement GoStatement(ParserRuleContext ctx, AstDecimal count)
        {
            AstGoStatement result = new AstGoStatement(ctx, count);
            return result;
        }
    }
    
    /// <summary>
    /// setuser_statement
    /// 	 : SETUSER  user = stringtext
    /// </summary>
    public partial class AstSetuserStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), true, false, "stringtext"))));
        
        private AstStringtext? _user;
        
        private static string _ruleValue = "SETUSER  user = stringtext\r\n";
        
        private static string _ruleName = "setuser_statement";
        
        internal AstSetuserStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetuserStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetuserStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstSetuserStatement(ParserRuleContext ctx, AstStringtext? user) : 
                base(ctx)
        {
            _user = user;
        }
        
        public virtual AstStringtext? User
        {
            get
            {
                return _user;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetuserStatement(this);
        }
        
        public static AstSetuserStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstSetuserStatement(ctx, list.Get<AstStringtext?>(0));
        }
        
        /// <summary>
        /// setuser_statement : 
        ///    SETUSER user=stringtext? 
        /// </summary>
        public static AstSetuserStatement SetuserStatement(ParserRuleContext ctx, AstStringtext user)
        {
            AstSetuserStatement result = new AstSetuserStatement(ctx, user);
            return result;
        }
    }
    
    /// <summary>
    /// reconfigure_statement
    /// 	 : RECONFIGURE  (WITH  OVERRIDE)?
    /// </summary>
    public partial class AstReconfigureStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "RECONFIGURE  (WITH  OVERRIDE)?\r\n";
        
        private static string _ruleName = "reconfigure_statement";
        
        internal AstReconfigureStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReconfigureStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstReconfigureStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReconfigureStatement(this);
        }
        
        public static AstReconfigureStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstReconfigureStatement(ctx);
        }
        
        /// <summary>
        /// reconfigure_statement : 
        ///    RECONFIGURE WITH OVERRIDE 
        /// </summary>
        public static AstReconfigureStatement ReconfigureStatement(ParserRuleContext ctx)
        {
            AstReconfigureStatement result = new AstReconfigureStatement(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// shutdown_statement
    /// 	 : SHUTDOWN  (WITH  NOWAIT)?
    /// </summary>
    public partial class AstShutdownStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "SHUTDOWN  (WITH  NOWAIT)?\r\n";
        
        private static string _ruleName = "shutdown_statement";
        
        internal AstShutdownStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstShutdownStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstShutdownStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitShutdownStatement(this);
        }
        
        public static AstShutdownStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstShutdownStatement(ctx);
        }
        
        /// <summary>
        /// shutdown_statement : 
        ///    SHUTDOWN WITH NOWAIT 
        /// </summary>
        public static AstShutdownStatement ShutdownStatement(ParserRuleContext ctx)
        {
            AstShutdownStatement result = new AstShutdownStatement(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// checkpoint_statement
    /// 	 : CHECKPOINT  (checkPointDuration = decimal)?
    /// </summary>
    public partial class AstCheckpointStatement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private AstDecimal _checkPointDuration;
        
        private static string _ruleValue = "CHECKPOINT  (checkPointDuration = decimal)?\r\n";
        
        private static string _ruleName = "checkpoint_statement";
        
        internal AstCheckpointStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCheckpointStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCheckpointStatement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCheckpointStatement(ParserRuleContext ctx, AstDecimal checkPointDuration) : 
                base(ctx)
        {
            _checkPointDuration = checkPointDuration;
        }
        
        public virtual AstDecimal Checkpointduration
        {
            get
            {
                return _checkPointDuration;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckpointStatement(this);
        }
        
        public static AstCheckpointStatement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCheckpointStatement(ctx, list.Get<AstDecimal>(0));
        }
        
        /// <summary>
        /// checkpoint_statement : 
        ///    CHECKPOINT checkPointDuration=decimal 
        /// </summary>
        public static AstCheckpointStatement CheckpointStatement(ParserRuleContext ctx, AstDecimal checkPointDuration)
        {
            AstCheckpointStatement result = new AstCheckpointStatement(ctx, checkPointDuration);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_special
    /// 	 : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  dbcc_special_size  RR_BRACKET)?
    /// </summary>
    public partial class AstDbccSpecial : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbccSpecialSize), false, false, "dbcc_special_size"))));
        
        private AstDbccSpecialSize _dbccSpecialSize;
        
        private static string _ruleValue = "DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  dbcc_special_size  RR_BRACKET)?\r\n";
        
        private static string _ruleName = "dbcc_special";
        
        internal AstDbccSpecial(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDbccSpecial(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccSpecial(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDbccSpecial(ParserRuleContext ctx, AstDbccSpecialSize dbccSpecialSize) : 
                base(ctx)
        {
            _dbccSpecialSize = dbccSpecialSize;
        }
        
        public virtual AstDbccSpecialSize DbccSpecialSize
        {
            get
            {
                return _dbccSpecialSize;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccSpecial(this);
        }
        
        public static AstDbccSpecial Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDbccSpecial(ctx, list.Get<AstDbccSpecialSize>(0));
        }
        
        /// <summary>
        /// dbcc_special : 
        ///    DBCC SHRINKLOG ( SIZE EQUAL dbcc_special_size ) 
        /// </summary>
        public static AstDbccSpecial DbccSpecial(ParserRuleContext ctx, AstDbccSpecialSize dbccSpecialSize)
        {
            AstDbccSpecial result = new AstDbccSpecial(ctx, dbccSpecialSize);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_special_size
    /// 	 : constant_expression  id_
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstDbccSpecialSize : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstantExpression), false, false, "constant_expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "constant_expression  id_\r\n | DEFAULT\r\n";
        
        private static string _ruleName = "dbcc_special_size";
        
        /// <summary>
        /// dbcc_special_size : constant_expression id_ 
        /// </summary>
        public partial class AstDbccSpecialSize1 : AstDbccSpecialSize
        {
            
            private static string _ruleName1 = "dbcc_special_size";
            
            private AstConstantExpression _constantExpression;
            
            private AstId _id;
            
            internal AstDbccSpecialSize1(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id) : 
                    base(ctx)
            {
                _constantExpression = constantExpression;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstantExpression ConstantExpression
            {
                get
                {
                    return _constantExpression;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccSpecialSize(this);
            }
        }
        /// <summary>
        /// dbcc_special_size : DEFAULT 
        /// </summary>
        public partial class AstDbccSpecialSize2 : AstDbccSpecialSize
        {
            
            private static string _ruleName1 = "dbcc_special_size";
            
            internal AstDbccSpecialSize2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccSpecialSize(this);
            }
        }
        

        
        internal AstDbccSpecialSize(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDbccSpecialSize(Position p) : 
                base(p)
        {
        }
        
        internal AstDbccSpecialSize(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDbccSpecialSize Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDbccSpecialSize.AstDbccSpecialSize1(ctx, list.Get<AstConstantExpression>(0), list.Get<AstId>(1));
            }
            if ((index == 2))
            {
                return new AstDbccSpecialSize.AstDbccSpecialSize2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// dbcc_special_size : 
        ///    constant_expression id_ 
        /// </summary>
        public static AstDbccSpecialSize DbccSpecialSize(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id)
        {
            AstDbccSpecialSize.AstDbccSpecialSize1 result = new AstDbccSpecialSize.AstDbccSpecialSize1(ctx, constantExpression, id);
            return result;
        }
        
        /// <summary>
        /// dbcc_special_size : 
        ///    DEFAULT 
        /// </summary>
        public static AstDbccSpecialSize DbccSpecialSize(ParserRuleContext ctx)
        {
            AstDbccSpecialSize.AstDbccSpecialSize2 result = new AstDbccSpecialSize.AstDbccSpecialSize2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_clause
    /// 	 : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbcc_options)?
    /// </summary>
    public partial class AstDbccClause : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDbccCommand), false, false, "dbcc_command"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), false, false, "expression_list"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDbccOptions), false, false, "dbcc_options"))));
        
        private AstDbccCommand _name;
        
        private AstExpressionList _expressionList;
        
        private AstDbccOptions _dbccOptions;
        
        private static string _ruleValue = "DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbc" +
            "c_options)?\r\n";
        
        private static string _ruleName = "dbcc_clause";
        
        internal AstDbccClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDbccClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccClause(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDbccClause(ParserRuleContext ctx, AstDbccCommand name, AstExpressionList expressionList, AstDbccOptions dbccOptions) : 
                base(ctx)
        {
            _name = name;
            _expressionList = expressionList;
            _dbccOptions = dbccOptions;
        }
        
        public virtual AstDbccCommand Name
        {
            get
            {
                return _name;
            }
        }
        
        public virtual AstExpressionList ExpressionList
        {
            get
            {
                return _expressionList;
            }
        }
        
        public virtual AstDbccOptions DbccOptions
        {
            get
            {
                return _dbccOptions;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccClause(this);
        }
        
        public static AstDbccClause Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstDbccClause(ctx, list.Get<AstDbccCommand>(0), list.Get<AstExpressionList>(1), list.Get<AstDbccOptions>(2));
        }
        
        /// <summary>
        /// dbcc_clause : 
        ///    DBCC name=dbcc_command ( expression_list ) WITH dbcc_options 
        /// </summary>
        public static AstDbccClause DbccClause(ParserRuleContext ctx, AstDbccCommand name, AstExpressionList expressionList, AstDbccOptions dbccOptions)
        {
            AstDbccClause result = new AstDbccClause(ctx, name, expressionList, dbccOptions);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_command
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    public abstract partial class AstDbccCommand : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSimpleId), false, false, "simple_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstKeyword), false, false, "keyword"))));
        
        private static string _ruleValue = "simple_id\r\n | keyword\r\n";
        
        private static string _ruleName = "dbcc_command";
        
        /// <summary>
        /// dbcc_command : simple_id 
        /// </summary>
        public partial class AstDbccCommand1 : AstDbccCommand
        {
            
            private static string _ruleName1 = "dbcc_command";
            
            private AstSimpleId _simpleId;
            
            internal AstDbccCommand1(ParserRuleContext ctx, AstSimpleId simpleId) : 
                    base(ctx)
            {
                _simpleId = simpleId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSimpleId SimpleId
            {
                get
                {
                    return _simpleId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccCommand(this);
            }
        }
        /// <summary>
        /// dbcc_command : keyword 
        /// </summary>
        public partial class AstDbccCommand2 : AstDbccCommand
        {
            
            private static string _ruleName1 = "dbcc_command";
            
            private AstKeyword _keyword;
            
            internal AstDbccCommand2(ParserRuleContext ctx, AstKeyword keyword) : 
                    base(ctx)
            {
                _keyword = keyword;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstKeyword Keyword
            {
                get
                {
                    return _keyword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccCommand(this);
            }
        }
        

        
        internal AstDbccCommand(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDbccCommand(Position p) : 
                base(p)
        {
        }
        
        internal AstDbccCommand(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDbccCommand Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDbccCommand.AstDbccCommand1(ctx, list.Get<AstSimpleId>(0));
            }
            if ((index == 2))
            {
                return new AstDbccCommand.AstDbccCommand2(ctx, list.Get<AstKeyword>(0));
            }
            return null;
        }
        
        /// <summary>
        /// dbcc_command : 
        ///    simple_id 
        /// </summary>
        public static AstDbccCommand DbccCommand(ParserRuleContext ctx, AstSimpleId simpleId)
        {
            AstDbccCommand.AstDbccCommand1 result = new AstDbccCommand.AstDbccCommand1(ctx, simpleId);
            return result;
        }
        
        /// <summary>
        /// dbcc_command : 
        ///    keyword 
        /// </summary>
        public static AstDbccCommand DbccCommand(ParserRuleContext ctx, AstKeyword keyword)
        {
            AstDbccCommand.AstDbccCommand2 result = new AstDbccCommand.AstDbccCommand2(ctx, keyword);
            return result;
        }
    }
    
    /// <summary>
    /// execute_clause_mode
    /// 	 : execute_clause_mode_enum
    /// 	 | stringtext
    /// </summary>
    public abstract partial class AstExecuteClauseMode : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExecuteClauseModeEnum), false, false, "execute_clause_mode_enum")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "execute_clause_mode_enum\r\n | stringtext\r\n";
        
        private static string _ruleName = "execute_clause_mode";
        
        /// <summary>
        /// execute_clause_mode : execute_clause_mode_enum 
        /// </summary>
        public partial class AstExecuteClauseMode1 : AstExecuteClauseMode
        {
            
            private static string _ruleName1 = "execute_clause_mode";
            
            private AstExecuteClauseModeEnum _executeClauseModeEnum;
            
            internal AstExecuteClauseMode1(ParserRuleContext ctx, AstExecuteClauseModeEnum executeClauseModeEnum) : 
                    base(ctx)
            {
                _executeClauseModeEnum = executeClauseModeEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExecuteClauseModeEnum ExecuteClauseModeEnum
            {
                get
                {
                    return _executeClauseModeEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteClauseMode(this);
            }
        }
        /// <summary>
        /// execute_clause_mode : stringtext 
        /// </summary>
        public partial class AstExecuteClauseMode2 : AstExecuteClauseMode
        {
            
            private static string _ruleName1 = "execute_clause_mode";
            
            private AstStringtext _stringtext;
            
            internal AstExecuteClauseMode2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteClauseMode(this);
            }
        }
        

        
        internal AstExecuteClauseMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteClauseMode(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteClauseMode(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExecuteClauseMode Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExecuteClauseMode.AstExecuteClauseMode1(ctx, list.Get<AstExecuteClauseModeEnum>(0));
            }
            if ((index == 2))
            {
                return new AstExecuteClauseMode.AstExecuteClauseMode2(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// execute_clause_mode : 
        ///    execute_clause_mode_enum 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(ParserRuleContext ctx, AstExecuteClauseModeEnum executeClauseModeEnum)
        {
            AstExecuteClauseMode.AstExecuteClauseMode1 result = new AstExecuteClauseMode.AstExecuteClauseMode1(ctx, executeClauseModeEnum);
            return result;
        }
        
        /// <summary>
        /// execute_clause_mode : 
        ///    stringtext 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstExecuteClauseMode.AstExecuteClauseMode2 result = new AstExecuteClauseMode.AstExecuteClauseMode2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// table_type_indice
    /// 	 : type_indice  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstTableTypeIndice : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTypeIndice), false, false, "type_indice"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameListWithOrder), false, false, "column_name_list_with_order")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"))));
        
        private static string _ruleValue = "type_indice  LR_BRACKET  column_name_list_with_order  RR_BRACKET\r\n | CHECK  LR_BR" +
            "ACKET  search_condition  RR_BRACKET\r\n";
        
        private static string _ruleName = "table_type_indice";
        
        /// <summary>
        /// table_type_indice : type_indice LR_BRACKET column_name_list_with_order RR_BRACKET 
        /// </summary>
        public partial class AstTableTypeIndice1 : AstTableTypeIndice
        {
            
            private static string _ruleName1 = "table_type_indice";
            
            private AstTypeIndice _typeIndice;
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            internal AstTableTypeIndice1(ParserRuleContext ctx, AstTypeIndice typeIndice, AstColumnNameListWithOrder columnNameListWithOrder) : 
                    base(ctx)
            {
                _typeIndice = typeIndice;
                _columnNameListWithOrder = columnNameListWithOrder;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTypeIndice TypeIndice
            {
                get
                {
                    return _typeIndice;
                }
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableTypeIndice(this);
            }
        }
        /// <summary>
        /// table_type_indice : CHECK LR_BRACKET search_condition RR_BRACKET 
        /// </summary>
        public partial class AstTableTypeIndice2 : AstTableTypeIndice
        {
            
            private static string _ruleName1 = "table_type_indice";
            
            private AstSearchCondition _searchCondition;
            
            internal AstTableTypeIndice2(ParserRuleContext ctx, AstSearchCondition searchCondition) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableTypeIndice(this);
            }
        }
        

        
        internal AstTableTypeIndice(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableTypeIndice(Position p) : 
                base(p)
        {
        }
        
        internal AstTableTypeIndice(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableTypeIndice Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableTypeIndice.AstTableTypeIndice1(ctx, list.Get<AstTypeIndice>(0), list.Get<AstColumnNameListWithOrder>(1));
            }
            if ((index == 2))
            {
                return new AstTableTypeIndice.AstTableTypeIndice2(ctx, list.Get<AstSearchCondition>(0));
            }
            return null;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    type_indice ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(ParserRuleContext ctx, AstTypeIndice typeIndice, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            AstTableTypeIndice.AstTableTypeIndice1 result = new AstTableTypeIndice.AstTableTypeIndice1(ctx, typeIndice, columnNameListWithOrder);
            return result;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(ParserRuleContext ctx, AstSearchCondition searchCondition)
        {
            AstTableTypeIndice.AstTableTypeIndice2 result = new AstTableTypeIndice.AstTableTypeIndice2(ctx, searchCondition);
            return result;
        }
    }
    
    /// <summary>
    /// type_indice
    /// 	 : indice_name  clustered?
    /// 	 | UNIQUE
    /// </summary>
    public abstract partial class AstTypeIndice : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndiceName), false, false, "indice_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstClustered), true, false, "clustered"))));
        
        private static string _ruleValue = "indice_name  clustered?\r\n | UNIQUE\r\n";
        
        private static string _ruleName = "type_indice";
        
        /// <summary>
        /// type_indice : indice_name clustered? 
        /// </summary>
        public partial class AstTypeIndice1 : AstTypeIndice
        {
            
            private static string _ruleName1 = "type_indice";
            
            private AstIndiceName _indiceName;
            
            private AstClustered? _clustered;
            
            internal AstTypeIndice1(ParserRuleContext ctx, AstIndiceName indiceName, AstClustered? clustered) : 
                    base(ctx)
            {
                _indiceName = indiceName;
                _clustered = clustered;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndiceName IndiceName
            {
                get
                {
                    return _indiceName;
                }
            }
            
            public virtual AstClustered? Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTypeIndice(this);
            }
        }
        /// <summary>
        /// type_indice : UNIQUE 
        /// </summary>
        public partial class AstTypeIndice2 : AstTypeIndice
        {
            
            private static string _ruleName1 = "type_indice";
            
            internal AstTypeIndice2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTypeIndice(this);
            }
        }
        

        
        internal AstTypeIndice(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTypeIndice(Position p) : 
                base(p)
        {
        }
        
        internal AstTypeIndice(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTypeIndice Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTypeIndice.AstTypeIndice1(ctx, list.Get<AstIndiceName>(0), list.Get<AstClustered?>(1));
            }
            if ((index == 2))
            {
                return new AstTypeIndice.AstTypeIndice2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// type_indice : 
        ///    indice_name clustered? 
        /// </summary>
        public static AstTypeIndice TypeIndice(ParserRuleContext ctx, AstIndiceName indiceName, AstClustered clustered)
        {
            AstTypeIndice.AstTypeIndice1 result = new AstTypeIndice.AstTypeIndice1(ctx, indiceName, clustered);
            return result;
        }
        
        /// <summary>
        /// type_indice : 
        ///    UNIQUE 
        /// </summary>
        public static AstTypeIndice TypeIndice(ParserRuleContext ctx)
        {
            AstTypeIndice.AstTypeIndice2 result = new AstTypeIndice.AstTypeIndice2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// indice_name
    /// 	 : PRIMARY  KEY
    /// 	 | INDEX  index_id
    /// </summary>
    public abstract partial class AstIndiceName : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndexId), false, false, "index_id"))));
        
        private static string _ruleValue = "PRIMARY  KEY\r\n | INDEX  index_id\r\n";
        
        private static string _ruleName = "indice_name";
        
        /// <summary>
        /// indice_name : PRIMARY KEY 
        /// </summary>
        public partial class AstIndiceName1 : AstIndiceName
        {
            
            private static string _ruleName1 = "indice_name";
            
            internal AstIndiceName1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndiceName(this);
            }
        }
        /// <summary>
        /// indice_name : INDEX index_id 
        /// </summary>
        public partial class AstIndiceName2 : AstIndiceName
        {
            
            private static string _ruleName1 = "indice_name";
            
            private AstIndexId _indexId;
            
            internal AstIndiceName2(ParserRuleContext ctx, AstIndexId indexId) : 
                    base(ctx)
            {
                _indexId = indexId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndexId IndexId
            {
                get
                {
                    return _indexId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndiceName(this);
            }
        }
        

        
        internal AstIndiceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndiceName(Position p) : 
                base(p)
        {
        }
        
        internal AstIndiceName(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIndiceName Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIndiceName.AstIndiceName1(ctx);
            }
            if ((index == 2))
            {
                return new AstIndiceName.AstIndiceName2(ctx, list.Get<AstIndexId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// indice_name : 
        ///    PRIMARY KEY 
        /// </summary>
        public static AstIndiceName IndiceName(ParserRuleContext ctx)
        {
            AstIndiceName.AstIndiceName1 result = new AstIndiceName.AstIndiceName1(ctx);
            return result;
        }
        
        /// <summary>
        /// indice_name : 
        ///    INDEX index_id 
        /// </summary>
        public static AstIndiceName IndiceName(ParserRuleContext ctx, AstIndexId indexId)
        {
            AstIndiceName.AstIndiceName2 result = new AstIndiceName.AstIndiceName2(ctx, indexId);
            return result;
        }
    }
    
    /// <summary>
    /// xml_schema_collection
    /// 	 : left = simple_id  DOT  right = simple_id
    /// </summary>
    public partial class AstXmlSchemaCollection : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSimpleId), false, false, "simple_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSimpleId), false, false, "simple_id"))));
        
        private AstSimpleId _left;
        
        private AstSimpleId _right;
        
        private static string _ruleValue = "left = simple_id  DOT  right = simple_id\r\n";
        
        private static string _ruleName = "xml_schema_collection";
        
        internal AstXmlSchemaCollection(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlSchemaCollection(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstXmlSchemaCollection(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstXmlSchemaCollection(ParserRuleContext ctx, AstSimpleId left, AstSimpleId right) : 
                base(ctx)
        {
            _left = left;
            _right = right;
        }
        
        public virtual AstSimpleId Left
        {
            get
            {
                return _left;
            }
        }
        
        public virtual AstSimpleId Right
        {
            get
            {
                return _right;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlSchemaCollection(this);
        }
        
        public static AstXmlSchemaCollection Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstXmlSchemaCollection(ctx, list.Get<AstSimpleId>(0), list.Get<AstSimpleId>(1));
        }
        
        /// <summary>
        /// xml_schema_collection : 
        ///    left=simple_id . right=simple_id 
        /// </summary>
        public static AstXmlSchemaCollection XmlSchemaCollection(ParserRuleContext ctx, AstSimpleId left, AstSimpleId right)
        {
            AstXmlSchemaCollection result = new AstXmlSchemaCollection(ctx, left, right);
            return result;
        }
    }
    
    /// <summary>
    /// column_def_table_constraint
    /// 	 : column_definition
    /// 	 | materialized_column_definition
    /// 	 | table_constraint
    /// </summary>
    public abstract partial class AstColumnDefTableConstraint : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnDefinition), false, false, "column_definition")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstMaterializedColumnDefinition), false, false, "materialized_column_definition")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableConstraint), false, false, "table_constraint"))));
        
        private static string _ruleValue = "column_definition\r\n | materialized_column_definition\r\n | table_constraint\r\n";
        
        private static string _ruleName = "column_def_table_constraint";
        
        /// <summary>
        /// column_def_table_constraint : column_definition 
        /// </summary>
        public partial class AstColumnDefTableConstraint1 : AstColumnDefTableConstraint
        {
            
            private static string _ruleName1 = "column_def_table_constraint";
            
            private AstColumnDefinition _columnDefinition;
            
            internal AstColumnDefTableConstraint1(ParserRuleContext ctx, AstColumnDefinition columnDefinition) : 
                    base(ctx)
            {
                _columnDefinition = columnDefinition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnDefinition ColumnDefinition
            {
                get
                {
                    return _columnDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        /// <summary>
        /// column_def_table_constraint : materialized_column_definition 
        /// </summary>
        public partial class AstColumnDefTableConstraint2 : AstColumnDefTableConstraint
        {
            
            private static string _ruleName1 = "column_def_table_constraint";
            
            private AstMaterializedColumnDefinition _materializedColumnDefinition;
            
            internal AstColumnDefTableConstraint2(ParserRuleContext ctx, AstMaterializedColumnDefinition materializedColumnDefinition) : 
                    base(ctx)
            {
                _materializedColumnDefinition = materializedColumnDefinition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstMaterializedColumnDefinition MaterializedColumnDefinition
            {
                get
                {
                    return _materializedColumnDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        /// <summary>
        /// column_def_table_constraint : table_constraint 
        /// </summary>
        public partial class AstColumnDefTableConstraint3 : AstColumnDefTableConstraint
        {
            
            private static string _ruleName1 = "column_def_table_constraint";
            
            private AstTableConstraint _tableConstraint;
            
            internal AstColumnDefTableConstraint3(ParserRuleContext ctx, AstTableConstraint tableConstraint) : 
                    base(ctx)
            {
                _tableConstraint = tableConstraint;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableConstraint TableConstraint
            {
                get
                {
                    return _tableConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        

        
        internal AstColumnDefTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnDefTableConstraint(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstColumnDefTableConstraint Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstColumnDefTableConstraint.AstColumnDefTableConstraint1(ctx, list.Get<AstColumnDefinition>(0));
            }
            if ((index == 2))
            {
                return new AstColumnDefTableConstraint.AstColumnDefTableConstraint2(ctx, list.Get<AstMaterializedColumnDefinition>(0));
            }
            if ((index == 3))
            {
                return new AstColumnDefTableConstraint.AstColumnDefTableConstraint3(ctx, list.Get<AstTableConstraint>(0));
            }
            return null;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(ParserRuleContext ctx, AstColumnDefinition columnDefinition)
        {
            AstColumnDefTableConstraint.AstColumnDefTableConstraint1 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint1(ctx, columnDefinition);
            return result;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    materialized_column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(ParserRuleContext ctx, AstMaterializedColumnDefinition materializedColumnDefinition)
        {
            AstColumnDefTableConstraint.AstColumnDefTableConstraint2 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint2(ctx, materializedColumnDefinition);
            return result;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    table_constraint 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(ParserRuleContext ctx, AstTableConstraint tableConstraint)
        {
            AstColumnDefTableConstraint.AstColumnDefTableConstraint3 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint3(ctx, tableConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// column_definition_element
    /// 	 : FILESTREAM
    /// 	 | COLLATE  collation_id
    /// 	 | SPARSE
    /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
    /// 	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
    /// 	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
    /// 	 | NOT  FOR  REPLICATION
    /// 	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
    /// 	 | ROWGUIDCOL
    /// 	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
    /// 	 | column_constraint
    /// </summary>
    public abstract partial class AstColumnDefinitionElement : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnEncryptionKeyId), false, false, "column_encryption_key_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstEncryptionMode), false, false, "encryption_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstGenerationMode), false, false, "generation_mode"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStartEnd), false, false, "start_end")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCollationId), false, false, "collation_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnConstraint), false, false, "column_constraint"))));
        
        private static string _ruleValue = @"FILESTREAM
 | COLLATE  collation_id
 | SPARSE
 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
 | NOT  FOR  REPLICATION
 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
 | ROWGUIDCOL
 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
 | column_constraint
";
        
        private static string _ruleName = "column_definition_element";
        
        /// <summary>
        /// column_definition_element : FILESTREAM 
        /// </summary>
        public partial class AstColumnDefinitionElement1 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            internal AstColumnDefinitionElement1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : COLLATE collation_id 
        /// </summary>
        public partial class AstColumnDefinitionElement2 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            private AstCollationId _collationId;
            
            internal AstColumnDefinitionElement2(ParserRuleContext ctx, AstCollationId collationId) : 
                    base(ctx)
            {
                _collationId = collationId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCollationId CollationId
            {
                get
                {
                    return _collationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : SPARSE 
        /// </summary>
        public partial class AstColumnDefinitionElement3 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            internal AstColumnDefinitionElement3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : MASKED WITH LR_BRACKET FUNCTION EQUAL mask_function=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstColumnDefinitionElement4 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            private AstStringtext _maskFunction;
            
            internal AstColumnDefinitionElement4(ParserRuleContext ctx, AstStringtext maskFunction) : 
                    base(ctx)
            {
                _maskFunction = maskFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext MaskFunction
            {
                get
                {
                    return _maskFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : CONSTRAINT constraint_id DEFAULT constant_expr=expression 
        /// </summary>
        public partial class AstColumnDefinitionElement5 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            private AstConstraintId _constraintId;
            
            private AstExpression _constantExpr;
            
            internal AstColumnDefinitionElement5(ParserRuleContext ctx, AstConstraintId constraintId, AstExpression constantExpr) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _constantExpr = constantExpr;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstExpression ConstantExpr
            {
                get
                {
                    return _constantExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : IDENTITY LR_BRACKET seed=decimal COMMA increment=decimal RR_BRACKET 
        /// </summary>
        public partial class AstColumnDefinitionElement6 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            private AstDecimal _seed;
            
            private AstDecimal _increment;
            
            internal AstColumnDefinitionElement6(ParserRuleContext ctx, AstDecimal seed, AstDecimal increment) : 
                    base(ctx)
            {
                _seed = seed;
                _increment = increment;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Seed
            {
                get
                {
                    return _seed;
                }
            }
            
            public virtual AstDecimal Increment
            {
                get
                {
                    return _increment;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : NOT FOR REPLICATION 
        /// </summary>
        public partial class AstColumnDefinitionElement7 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            internal AstColumnDefinitionElement7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : GENERATED ALWAYS AS generation_mode start_end HIDDEN_KEYWORD? 
        /// </summary>
        public partial class AstColumnDefinitionElement8 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            private AstGenerationMode _generationMode;
            
            private AstStartEnd _startEnd;
            
            internal AstColumnDefinitionElement8(ParserRuleContext ctx, AstGenerationMode generationMode, AstStartEnd startEnd) : 
                    base(ctx)
            {
                _generationMode = generationMode;
                _startEnd = startEnd;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGenerationMode GenerationMode
            {
                get
                {
                    return _generationMode;
                }
            }
            
            public virtual AstStartEnd StartEnd
            {
                get
                {
                    return _startEnd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : ROWGUIDCOL 
        /// </summary>
        public partial class AstColumnDefinitionElement9 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            internal AstColumnDefinitionElement9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : ENCRYPTED WITH LR_BRACKET column_encryption_key_id EQUAL key_name=stringtext COMMA ENCRYPTION_TYPE EQUAL encryption_mode COMMA ALGORITHM EQUAL algo=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstColumnDefinitionElement10 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            private AstColumnEncryptionKeyId _columnEncryptionKeyId;
            
            private AstStringtext _keyName;
            
            private AstEncryptionMode _encryptionMode;
            
            private AstStringtext _algo;
            
            internal AstColumnDefinitionElement10(ParserRuleContext ctx, AstColumnEncryptionKeyId columnEncryptionKeyId, AstStringtext keyName, AstEncryptionMode encryptionMode, AstStringtext algo) : 
                    base(ctx)
            {
                _columnEncryptionKeyId = columnEncryptionKeyId;
                _keyName = keyName;
                _encryptionMode = encryptionMode;
                _algo = algo;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
            {
                get
                {
                    return _columnEncryptionKeyId;
                }
            }
            
            public virtual AstStringtext KeyName
            {
                get
                {
                    return _keyName;
                }
            }
            
            public virtual AstEncryptionMode EncryptionMode
            {
                get
                {
                    return _encryptionMode;
                }
            }
            
            public virtual AstStringtext Algo
            {
                get
                {
                    return _algo;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : column_constraint 
        /// </summary>
        public partial class AstColumnDefinitionElement11 : AstColumnDefinitionElement
        {
            
            private static string _ruleName1 = "column_definition_element";
            
            private AstColumnConstraint _columnConstraint;
            
            internal AstColumnDefinitionElement11(ParserRuleContext ctx, AstColumnConstraint columnConstraint) : 
                    base(ctx)
            {
                _columnConstraint = columnConstraint;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnConstraint ColumnConstraint
            {
                get
                {
                    return _columnConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        

        
        internal AstColumnDefinitionElement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefinitionElement(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnDefinitionElement(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstColumnDefinitionElement Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement1(ctx);
            }
            if ((index == 2))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement2(ctx, list.Get<AstCollationId>(0));
            }
            if ((index == 3))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement3(ctx);
            }
            if ((index == 4))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement4(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 5))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement5(ctx, list.Get<AstConstraintId>(0), list.Get<AstExpression>(1));
            }
            if ((index == 6))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement6(ctx, list.Get<AstDecimal>(0), list.Get<AstDecimal>(1));
            }
            if ((index == 7))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement7(ctx);
            }
            if ((index == 8))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement8(ctx, list.Get<AstGenerationMode>(0), list.Get<AstStartEnd>(1));
            }
            if ((index == 9))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement9(ctx);
            }
            if ((index == 10))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement10(ctx, list.Get<AstColumnEncryptionKeyId>(0), list.Get<AstStringtext>(1), list.Get<AstEncryptionMode>(2), list.Get<AstStringtext>(3));
            }
            if ((index == 11))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement11(ctx, list.Get<AstColumnConstraint>(0));
            }
            return null;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    FILESTREAM 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement1 result = new AstColumnDefinitionElement.AstColumnDefinitionElement1(ctx);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstCollationId collationId)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement2 result = new AstColumnDefinitionElement.AstColumnDefinitionElement2(ctx, collationId);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    MASKED WITH ( FUNCTION EQUAL mask_function=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstStringtext maskFunction)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement4 result = new AstColumnDefinitionElement.AstColumnDefinitionElement4(ctx, maskFunction);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    CONSTRAINT constraint_id DEFAULT constant_expr=expression 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstConstraintId constraintId, AstExpression constantExpr)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement5 result = new AstColumnDefinitionElement.AstColumnDefinitionElement5(ctx, constraintId, constantExpr);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    IDENTITY ( seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstDecimal seed, AstDecimal increment)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement6 result = new AstColumnDefinitionElement.AstColumnDefinitionElement6(ctx, seed, increment);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    GENERATED ALWAYS AS generation_mode start_end HIDDEN_KEYWORD? 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstGenerationMode generationMode, AstStartEnd startEnd)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement8 result = new AstColumnDefinitionElement.AstColumnDefinitionElement8(ctx, generationMode, startEnd);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    ENCRYPTED WITH ( column_encryption_key_id EQUAL key_name=stringtext , ENCRYPTION_TYPE EQUAL encryption_mode , ALGORITHM EQUAL algo=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstColumnEncryptionKeyId columnEncryptionKeyId, AstStringtext keyName, AstEncryptionMode encryptionMode, AstStringtext algo)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement10 result = new AstColumnDefinitionElement.AstColumnDefinitionElement10(ctx, columnEncryptionKeyId, keyName, encryptionMode, algo);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    column_constraint 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstColumnConstraint columnConstraint)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement11 result = new AstColumnDefinitionElement.AstColumnDefinitionElement11(ctx, columnConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// column_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)
    /// </summary>
    public abstract partial class AstColumnConstraint : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPrimaryKeyUnique), false, false, "primary_key_unique"), new Bb.Asts.AstRuleMatcherItem(typeof(AstClustered), true, false, "clustered"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPrimaryKeyOptions), false, false, "primary_key_options")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstNullNotnull), false, false, "null_notnull")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstForeignKeyOptions), false, false, "foreign_key_options")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCheckConstraint), false, false, "check_constraint"))));
        
        private static string _ruleValue = "(CONSTRAINT  constraint_id)?  (null_notnull | (primary_key_unique  clustered?  pr" +
            "imary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)\r" +
            "\n";
        
        private static string _ruleName = "column_constraint";
        
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id null_notnull 
        /// </summary>
        public partial class AstColumnConstraint1 : AstColumnConstraint
        {
            
            private static string _ruleName1 = "column_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstNullNotnull _nullNotnull;
            
            internal AstColumnConstraint1(ParserRuleContext ctx, AstConstraintId constraintId, AstNullNotnull nullNotnull) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _nullNotnull = nullNotnull;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstNullNotnull NullNotnull
            {
                get
                {
                    return _nullNotnull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id primary_key_unique clustered? primary_key_options 
        /// </summary>
        public partial class AstColumnConstraint2 : AstColumnConstraint
        {
            
            private static string _ruleName1 = "column_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstPrimaryKeyUnique _primaryKeyUnique;
            
            private AstClustered? _clustered;
            
            private AstPrimaryKeyOptions _primaryKeyOptions;
            
            internal AstColumnConstraint2(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered? clustered, AstPrimaryKeyOptions primaryKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _primaryKeyUnique = primaryKeyUnique;
                _clustered = clustered;
                _primaryKeyOptions = primaryKeyOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstPrimaryKeyUnique PrimaryKeyUnique
            {
                get
                {
                    return _primaryKeyUnique;
                }
            }
            
            public virtual AstClustered? Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public virtual AstPrimaryKeyOptions PrimaryKeyOptions
            {
                get
                {
                    return _primaryKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id FOREIGN KEY foreign_key_options 
        /// </summary>
        public partial class AstColumnConstraint3 : AstColumnConstraint
        {
            
            private static string _ruleName1 = "column_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstForeignKeyOptions _foreignKeyOptions;
            
            internal AstColumnConstraint3(ParserRuleContext ctx, AstConstraintId constraintId, AstForeignKeyOptions foreignKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _foreignKeyOptions = foreignKeyOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstForeignKeyOptions ForeignKeyOptions
            {
                get
                {
                    return _foreignKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public partial class AstColumnConstraint4 : AstColumnConstraint
        {
            
            private static string _ruleName1 = "column_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstCheckConstraint _checkConstraint;
            
            internal AstColumnConstraint4(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _checkConstraint = checkConstraint;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstCheckConstraint CheckConstraint
            {
                get
                {
                    return _checkConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        

        
        internal AstColumnConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnConstraint(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstColumnConstraint Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstColumnConstraint.AstColumnConstraint1(ctx, list.Get<AstConstraintId>(0), list.Get<AstNullNotnull>(1));
            }
            if ((index == 2))
            {
                return new AstColumnConstraint.AstColumnConstraint2(ctx, list.Get<AstConstraintId>(0), list.Get<AstPrimaryKeyUnique>(1), list.Get<AstClustered?>(2), list.Get<AstPrimaryKeyOptions>(3));
            }
            if ((index == 3))
            {
                return new AstColumnConstraint.AstColumnConstraint3(ctx, list.Get<AstConstraintId>(0), list.Get<AstForeignKeyOptions>(1));
            }
            if ((index == 4))
            {
                return new AstColumnConstraint.AstColumnConstraint4(ctx, list.Get<AstConstraintId>(0), list.Get<AstCheckConstraint>(1));
            }
            return null;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id null_notnull 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstNullNotnull nullNotnull)
        {
            AstColumnConstraint.AstColumnConstraint1 result = new AstColumnConstraint.AstColumnConstraint1(ctx, constraintId, nullNotnull);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? primary_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstPrimaryKeyOptions primaryKeyOptions)
        {
            AstColumnConstraint.AstColumnConstraint2 result = new AstColumnConstraint.AstColumnConstraint2(ctx, constraintId, primaryKeyUnique, clustered, primaryKeyOptions);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id FOREIGN KEY foreign_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstForeignKeyOptions foreignKeyOptions)
        {
            AstColumnConstraint.AstColumnConstraint3 result = new AstColumnConstraint.AstColumnConstraint3(ctx, constraintId, foreignKeyOptions);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            AstColumnConstraint.AstColumnConstraint4 result = new AstColumnConstraint.AstColumnConstraint4(ctx, constraintId, checkConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// on_partition_or_filegroup
    /// 	 : ON  ((partition_scheme_id  LR_BRACKET  partition_column_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public abstract partial class AstOnPartitionOrFilegroup : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPartitionSchemeId), false, false, "partition_scheme_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPartitionColumnId), false, false, "partition_column_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroupId), false, false, "file_group_id"))));
        
        private static string _ruleValue = "ON  ((partition_scheme_id  LR_BRACKET  partition_column_id  RR_BRACKET) | file_gr" +
            "oup_id | DEFAULT_DOUBLE_QUOTE)\r\n";
        
        private static string _ruleName = "on_partition_or_filegroup";
        
        /// <summary>
        /// on_partition_or_filegroup : ON partition_scheme_id LR_BRACKET partition_column_id RR_BRACKET 
        /// </summary>
        public partial class AstOnPartitionOrFilegroup1 : AstOnPartitionOrFilegroup
        {
            
            private static string _ruleName1 = "on_partition_or_filegroup";
            
            private AstPartitionSchemeId _partitionSchemeId;
            
            private AstPartitionColumnId _partitionColumnId;
            
            internal AstOnPartitionOrFilegroup1(ParserRuleContext ctx, AstPartitionSchemeId partitionSchemeId, AstPartitionColumnId partitionColumnId) : 
                    base(ctx)
            {
                _partitionSchemeId = partitionSchemeId;
                _partitionColumnId = partitionColumnId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPartitionSchemeId PartitionSchemeId
            {
                get
                {
                    return _partitionSchemeId;
                }
            }
            
            public virtual AstPartitionColumnId PartitionColumnId
            {
                get
                {
                    return _partitionColumnId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnPartitionOrFilegroup(this);
            }
        }
        /// <summary>
        /// on_partition_or_filegroup : ON file_group_id 
        /// </summary>
        public partial class AstOnPartitionOrFilegroup2 : AstOnPartitionOrFilegroup
        {
            
            private static string _ruleName1 = "on_partition_or_filegroup";
            
            private AstFileGroupId _fileGroupId;
            
            internal AstOnPartitionOrFilegroup2(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnPartitionOrFilegroup(this);
            }
        }
        /// <summary>
        /// on_partition_or_filegroup : ON DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstOnPartitionOrFilegroup3 : AstOnPartitionOrFilegroup
        {
            
            private static string _ruleName1 = "on_partition_or_filegroup";
            
            internal AstOnPartitionOrFilegroup3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnPartitionOrFilegroup(this);
            }
        }
        

        
        internal AstOnPartitionOrFilegroup(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnPartitionOrFilegroup(Position p) : 
                base(p)
        {
        }
        
        internal AstOnPartitionOrFilegroup(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstOnPartitionOrFilegroup Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup1(ctx, list.Get<AstPartitionSchemeId>(0), list.Get<AstPartitionColumnId>(1));
            }
            if ((index == 2))
            {
                return new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup2(ctx, list.Get<AstFileGroupId>(0));
            }
            if ((index == 3))
            {
                return new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON partition_scheme_id ( partition_column_id ) 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(ParserRuleContext ctx, AstPartitionSchemeId partitionSchemeId, AstPartitionColumnId partitionColumnId)
        {
            AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup1 result = new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup1(ctx, partitionSchemeId, partitionColumnId);
            return result;
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON file_group_id 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup2 result = new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup2(ctx, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(ParserRuleContext ctx)
        {
            AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup3 result = new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup3(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)
    /// </summary>
    public abstract partial class AstTableConstraint : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPrimaryKeyUnique), false, false, "primary_key_unique"), new Bb.Asts.AstRuleMatcherItem(typeof(AstClustered), true, false, "clustered"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameListWithOrder), false, false, "column_name_list_with_order"), new Bb.Asts.AstRuleMatcherItem(typeof(AstPrimaryKeyOptions), false, false, "primary_key_options")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list"), new Bb.Asts.AstRuleMatcherItem(typeof(AstForeignKeyOptions), false, false, "foreign_key_options")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFunctionCall), false, false, "function_call"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstConnectionNodes), false, false, "connection_nodes")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstraintId), false, false, "constraint_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstCheckConstraint), false, false, "check_constraint"))));
        
        private static string _ruleValue = @"(CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)
";
        
        private static string _ruleName = "table_constraint";
        
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id primary_key_unique clustered? LR_BRACKET column_name_list_with_order RR_BRACKET primary_key_options 
        /// </summary>
        public partial class AstTableConstraint1 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstPrimaryKeyUnique _primaryKeyUnique;
            
            private AstClustered? _clustered;
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            private AstPrimaryKeyOptions _primaryKeyOptions;
            
            internal AstTableConstraint1(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered? clustered, AstColumnNameListWithOrder columnNameListWithOrder, AstPrimaryKeyOptions primaryKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _primaryKeyUnique = primaryKeyUnique;
                _clustered = clustered;
                _columnNameListWithOrder = columnNameListWithOrder;
                _primaryKeyOptions = primaryKeyOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstPrimaryKeyUnique PrimaryKeyUnique
            {
                get
                {
                    return _primaryKeyUnique;
                }
            }
            
            public virtual AstClustered? Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public virtual AstPrimaryKeyOptions PrimaryKeyOptions
            {
                get
                {
                    return _primaryKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id FOREIGN KEY LR_BRACKET fk=column_name_list RR_BRACKET foreign_key_options 
        /// </summary>
        public partial class AstTableConstraint2 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstColumnNameList _fk;
            
            private AstForeignKeyOptions _foreignKeyOptions;
            
            internal AstTableConstraint2(ParserRuleContext ctx, AstConstraintId constraintId, AstColumnNameList fk, AstForeignKeyOptions foreignKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _fk = fk;
                _foreignKeyOptions = foreignKeyOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstColumnNameList Fk
            {
                get
                {
                    return _fk;
                }
            }
            
            public virtual AstForeignKeyOptions ForeignKeyOptions
            {
                get
                {
                    return _foreignKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id CONNECTION LR_BRACKET connection_nodes RR_BRACKET 
        /// </summary>
        public partial class AstTableConstraint3 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstConnectionNodes _connectionNodes;
            
            internal AstTableConstraint3(ParserRuleContext ctx, AstConstraintId constraintId, AstConnectionNodes connectionNodes) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _connectionNodes = connectionNodes;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstConnectionNodes ConnectionNodes
            {
                get
                {
                    return _connectionNodes;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? stringtext RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint4 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstStringtext _stringtext;
            
            private AstId _id;
            
            internal AstTableConstraint4(ParserRuleContext ctx, AstConstraintId constraintId, AstStringtext stringtext, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _stringtext = stringtext;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? PLUS RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint5 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstId _id;
            
            internal AstTableConstraint5(ParserRuleContext ctx, AstConstraintId constraintId, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? function_call RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint6 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstFunctionCall _functionCall;
            
            private AstId _id;
            
            internal AstTableConstraint6(ParserRuleContext ctx, AstConstraintId constraintId, AstFunctionCall functionCall, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _functionCall = functionCall;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? decimal RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint7 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstDecimal _decimal;
            
            private AstId _id;
            
            internal AstTableConstraint7(ParserRuleContext ctx, AstConstraintId constraintId, AstDecimal @decimal, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _decimal = @decimal;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? NEXT VALUE FOR full_table_ref RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint8 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstFullTableRef _fullTableRef;
            
            private AstId _id;
            
            internal AstTableConstraint8(ParserRuleContext ctx, AstConstraintId constraintId, AstFullTableRef fullTableRef, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _fullTableRef = fullTableRef;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public partial class AstTableConstraint9 : AstTableConstraint
        {
            
            private static string _ruleName1 = "table_constraint";
            
            private AstConstraintId _constraintId;
            
            private AstCheckConstraint _checkConstraint;
            
            internal AstTableConstraint9(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _checkConstraint = checkConstraint;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstCheckConstraint CheckConstraint
            {
                get
                {
                    return _checkConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        

        
        internal AstTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstTableConstraint(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableConstraint Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableConstraint.AstTableConstraint1(ctx, list.Get<AstConstraintId>(0), list.Get<AstPrimaryKeyUnique>(1), list.Get<AstClustered?>(2), list.Get<AstColumnNameListWithOrder>(3), list.Get<AstPrimaryKeyOptions>(4));
            }
            if ((index == 2))
            {
                return new AstTableConstraint.AstTableConstraint2(ctx, list.Get<AstConstraintId>(0), list.Get<AstColumnNameList>(1), list.Get<AstForeignKeyOptions>(2));
            }
            if ((index == 3))
            {
                return new AstTableConstraint.AstTableConstraint3(ctx, list.Get<AstConstraintId>(0), list.Get<AstConnectionNodes>(1));
            }
            if ((index == 4))
            {
                return new AstTableConstraint.AstTableConstraint4(ctx, list.Get<AstConstraintId>(0), list.Get<AstStringtext>(1), list.Get<AstId>(2));
            }
            if ((index == 5))
            {
                return new AstTableConstraint.AstTableConstraint5(ctx, list.Get<AstConstraintId>(0), list.Get<AstId>(1));
            }
            if ((index == 6))
            {
                return new AstTableConstraint.AstTableConstraint6(ctx, list.Get<AstConstraintId>(0), list.Get<AstFunctionCall>(1), list.Get<AstId>(2));
            }
            if ((index == 7))
            {
                return new AstTableConstraint.AstTableConstraint7(ctx, list.Get<AstConstraintId>(0), list.Get<AstDecimal>(1), list.Get<AstId>(2));
            }
            if ((index == 8))
            {
                return new AstTableConstraint.AstTableConstraint8(ctx, list.Get<AstConstraintId>(0), list.Get<AstFullTableRef>(1), list.Get<AstId>(2));
            }
            if ((index == 9))
            {
                return new AstTableConstraint.AstTableConstraint9(ctx, list.Get<AstConstraintId>(0), list.Get<AstCheckConstraint>(1));
            }
            return null;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? ( column_name_list_with_order ) primary_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder, AstPrimaryKeyOptions primaryKeyOptions)
        {
            AstTableConstraint.AstTableConstraint1 result = new AstTableConstraint.AstTableConstraint1(ctx, constraintId, primaryKeyUnique, clustered, columnNameListWithOrder, primaryKeyOptions);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id FOREIGN KEY ( fk=column_name_list ) foreign_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstColumnNameList fk, AstForeignKeyOptions foreignKeyOptions)
        {
            AstTableConstraint.AstTableConstraint2 result = new AstTableConstraint.AstTableConstraint2(ctx, constraintId, fk, foreignKeyOptions);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id CONNECTION ( connection_nodes ) 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstConnectionNodes connectionNodes)
        {
            AstTableConstraint.AstTableConstraint3 result = new AstTableConstraint.AstTableConstraint3(ctx, constraintId, connectionNodes);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? stringtext RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstStringtext stringtext, AstId id)
        {
            AstTableConstraint.AstTableConstraint4 result = new AstTableConstraint.AstTableConstraint4(ctx, constraintId, stringtext, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? PLUS RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstId id)
        {
            AstTableConstraint.AstTableConstraint5 result = new AstTableConstraint.AstTableConstraint5(ctx, constraintId, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? function_call RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstFunctionCall functionCall, AstId id)
        {
            AstTableConstraint.AstTableConstraint6 result = new AstTableConstraint.AstTableConstraint6(ctx, constraintId, functionCall, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? decimal RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstDecimal @decimal, AstId id)
        {
            AstTableConstraint.AstTableConstraint7 result = new AstTableConstraint.AstTableConstraint7(ctx, constraintId, @decimal, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? NEXT VALUE FOR full_table_ref RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstFullTableRef fullTableRef, AstId id)
        {
            AstTableConstraint.AstTableConstraint8 result = new AstTableConstraint.AstTableConstraint8(ctx, constraintId, fullTableRef, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            AstTableConstraint.AstTableConstraint9 result = new AstTableConstraint.AstTableConstraint9(ctx, constraintId, checkConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// connection_node
    /// 	 : from_node_table = id_  TO  to_node_table = id_
    /// </summary>
    public partial class AstConnectionNode : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private AstId _fromNodeTable;
        
        private AstId _toNodeTable;
        
        private static string _ruleValue = "from_node_table = id_  TO  to_node_table = id_\r\n";
        
        private static string _ruleName = "connection_node";
        
        internal AstConnectionNode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConnectionNode(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstConnectionNode(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstConnectionNode(ParserRuleContext ctx, AstId fromNodeTable, AstId toNodeTable) : 
                base(ctx)
        {
            _fromNodeTable = fromNodeTable;
            _toNodeTable = toNodeTable;
        }
        
        public virtual AstId FromNodeTable
        {
            get
            {
                return _fromNodeTable;
            }
        }
        
        public virtual AstId ToNodeTable
        {
            get
            {
                return _toNodeTable;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNode(this);
        }
        
        public static AstConnectionNode Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstConnectionNode(ctx, list.Get<AstId>(0), list.Get<AstId>(1));
        }
        
        /// <summary>
        /// connection_node : 
        ///    from_node_table=id_ TO to_node_table=id_ 
        /// </summary>
        public static AstConnectionNode ConnectionNode(ParserRuleContext ctx, AstId fromNodeTable, AstId toNodeTable)
        {
            AstConnectionNode result = new AstConnectionNode(ctx, fromNodeTable, toNodeTable);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | table_distribution
    /// 	 | ONLINE  EQUAL  online_value
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// </summary>
    public abstract partial class AstAlterTableIndexOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndexStrategy), false, false, "index_strategy"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnPartitions), true, false, "on_partitions")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableDistribution), false, false, "table_distribution")), new Bb.Asts.AstRuleMatcherItems(13, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnlineValue), false, false, "online_value")), new Bb.Asts.AstRuleMatcherItems(14, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(15, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = @"PAD_INDEX  EQUAL  on_off
 | FILLFACTOR  EQUAL  decimal
 | IGNORE_DUP_KEY  EQUAL  on_off
 | STATISTICS_NORECOMPUTE  EQUAL  on_off
 | ALLOW_ROW_LOCKS  EQUAL  on_off
 | ALLOW_PAGE_LOCKS  EQUAL  on_off
 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
 | SORT_IN_TEMPDB  EQUAL  on_off
 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
 | table_distribution
 | ONLINE  EQUAL  online_value
 | RESUMABLE  EQUAL  on_off
 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
";
        
        private static string _ruleName = "alter_table_index_option";
        
        /// <summary>
        /// alter_table_index_option : PAD_INDEX EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption1 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : FILLFACTOR EQUAL decimal 
        /// </summary>
        public partial class AstAlterTableIndexOption2 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstDecimal _decimal;
            
            internal AstAlterTableIndexOption2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : IGNORE_DUP_KEY EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption3 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : STATISTICS_NORECOMPUTE EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption4 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption5 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ALLOW_PAGE_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption6 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption7 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption8 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstAlterTableIndexOption9 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstAlterTableIndexOption9(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public partial class AstAlterTableIndexOption10 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstIndexStrategy _indexStrategy;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstAlterTableIndexOption10(ParserRuleContext ctx, AstIndexStrategy indexStrategy, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _indexStrategy = indexStrategy;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndexStrategy IndexStrategy
            {
                get
                {
                    return _indexStrategy;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstAlterTableIndexOption11 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            private AstOnPartitions? _onPartitions;
            
            internal AstAlterTableIndexOption11(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions? onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions? OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : table_distribution 
        /// </summary>
        public partial class AstAlterTableIndexOption12 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstTableDistribution _tableDistribution;
            
            internal AstAlterTableIndexOption12(ParserRuleContext ctx, AstTableDistribution tableDistribution) : 
                    base(ctx)
            {
                _tableDistribution = tableDistribution;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableDistribution TableDistribution
            {
                get
                {
                    return _tableDistribution;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstAlterTableIndexOption13 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnlineValue _onlineValue;
            
            internal AstAlterTableIndexOption13(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : RESUMABLE EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption14 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption14(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : MAX_DURATION EQUAL times=decimal MINUTES? 
        /// </summary>
        public partial class AstAlterTableIndexOption15 : AstAlterTableIndexOption
        {
            
            private static string _ruleName1 = "alter_table_index_option";
            
            private AstDecimal _times;
            
            internal AstAlterTableIndexOption15(ParserRuleContext ctx, AstDecimal times) : 
                    base(ctx)
            {
                _times = times;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Times
            {
                get
                {
                    return _times;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        

        
        internal AstAlterTableIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterTableIndexOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAlterTableIndexOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption1(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption3(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 4))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption5(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 6))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption6(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 7))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption7(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 8))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption8(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 9))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption9(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 10))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption10(ctx, list.Get<AstIndexStrategy>(0), list.Get<AstOnPartitions?>(1));
            }
            if ((index == 11))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption11(ctx, list.Get<AstOnOff>(0), list.Get<AstOnPartitions?>(1));
            }
            if ((index == 12))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption12(ctx, list.Get<AstTableDistribution>(0));
            }
            if ((index == 13))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption13(ctx, list.Get<AstOnlineValue>(0));
            }
            if ((index == 14))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption14(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 15))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption15(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption1 result = new AstAlterTableIndexOption.AstAlterTableIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption2 result = new AstAlterTableIndexOption.AstAlterTableIndexOption2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstIndexStrategy indexStrategy, AstOnPartitions onPartitions)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption10 result = new AstAlterTableIndexOption.AstAlterTableIndexOption10(ctx, indexStrategy, onPartitions);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption11 result = new AstAlterTableIndexOption.AstAlterTableIndexOption11(ctx, onOff, onPartitions);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    table_distribution 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstTableDistribution tableDistribution)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption12 result = new AstAlterTableIndexOption.AstAlterTableIndexOption12(ctx, tableDistribution);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption13 result = new AstAlterTableIndexOption.AstAlterTableIndexOption13(ctx, onlineValue);
            return result;
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partial
    /// 	 : local_global
    /// 	 | declare_set_cursor_common_partial_enum
    /// </summary>
    public abstract partial class AstDeclareSetCursorCommonPartial : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalGlobal), false, false, "local_global")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDeclareSetCursorCommonPartialEnum), false, false, "declare_set_cursor_common_partial_enum"))));
        
        private static string _ruleValue = "local_global\r\n | declare_set_cursor_common_partial_enum\r\n";
        
        private static string _ruleName = "declare_set_cursor_common_partial";
        
        /// <summary>
        /// declare_set_cursor_common_partial : local_global 
        /// </summary>
        public partial class AstDeclareSetCursorCommonPartial1 : AstDeclareSetCursorCommonPartial
        {
            
            private static string _ruleName1 = "declare_set_cursor_common_partial";
            
            private AstLocalGlobal _localGlobal;
            
            internal AstDeclareSetCursorCommonPartial1(ParserRuleContext ctx, AstLocalGlobal localGlobal) : 
                    base(ctx)
            {
                _localGlobal = localGlobal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalGlobal LocalGlobal
            {
                get
                {
                    return _localGlobal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareSetCursorCommonPartial(this);
            }
        }
        /// <summary>
        /// declare_set_cursor_common_partial : declare_set_cursor_common_partial_enum 
        /// </summary>
        public partial class AstDeclareSetCursorCommonPartial2 : AstDeclareSetCursorCommonPartial
        {
            
            private static string _ruleName1 = "declare_set_cursor_common_partial";
            
            private AstDeclareSetCursorCommonPartialEnum _declareSetCursorCommonPartialEnum;
            
            internal AstDeclareSetCursorCommonPartial2(ParserRuleContext ctx, AstDeclareSetCursorCommonPartialEnum declareSetCursorCommonPartialEnum) : 
                    base(ctx)
            {
                _declareSetCursorCommonPartialEnum = declareSetCursorCommonPartialEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDeclareSetCursorCommonPartialEnum DeclareSetCursorCommonPartialEnum
            {
                get
                {
                    return _declareSetCursorCommonPartialEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareSetCursorCommonPartial(this);
            }
        }
        

        
        internal AstDeclareSetCursorCommonPartial(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDeclareSetCursorCommonPartial Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1(ctx, list.Get<AstLocalGlobal>(0));
            }
            if ((index == 2))
            {
                return new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2(ctx, list.Get<AstDeclareSetCursorCommonPartialEnum>(0));
            }
            return null;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial : 
        ///    local_global 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(ParserRuleContext ctx, AstLocalGlobal localGlobal)
        {
            AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1 result = new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1(ctx, localGlobal);
            return result;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial : 
        ///    declare_set_cursor_common_partial_enum 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(ParserRuleContext ctx, AstDeclareSetCursorCommonPartialEnum declareSetCursorCommonPartialEnum)
        {
            AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2 result = new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2(ctx, declareSetCursorCommonPartialEnum);
            return result;
        }
    }
    
    /// <summary>
    /// set_special
    /// 	 : SET  left = id_  set_special_set_value
    /// 	 | SET  STATISTICS  statistic_kind  statistics = on_off
    /// 	 | SET  ROWCOUNT  local_id_decimal
    /// 	 | SET  TEXTSIZE  decimal
    /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  transaction_level
    /// 	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off
    /// 	 | SET  special_lists  list = on_off
    /// 	 | SET  modify_method
    /// </summary>
    public abstract partial class AstSetSpecial : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSetSpecialSetValue), false, false, "set_special_set_value")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStatisticKind), false, false, "statistic_kind"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstSpecialLists), false, false, "special_lists"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalIdDecimal), false, false, "local_id_decimal")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionLevel), false, false, "transaction_level")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstModifyMethod), false, false, "modify_method"))));
        
        private static string _ruleValue = @"SET  left = id_  set_special_set_value
 | SET  STATISTICS  statistic_kind  statistics = on_off
 | SET  ROWCOUNT  local_id_decimal
 | SET  TEXTSIZE  decimal
 | SET  TRANSACTION  ISOLATION  LEVEL  transaction_level
 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off
 | SET  special_lists  list = on_off
 | SET  modify_method
";
        
        private static string _ruleName = "set_special";
        
        /// <summary>
        /// set_special : SET left=id_ set_special_set_value 
        /// </summary>
        public partial class AstSetSpecial1 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstId _left;
            
            private AstSetSpecialSetValue _setSpecialSetValue;
            
            internal AstSetSpecial1(ParserRuleContext ctx, AstId left, AstSetSpecialSetValue setSpecialSetValue) : 
                    base(ctx)
            {
                _left = left;
                _setSpecialSetValue = setSpecialSetValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstSetSpecialSetValue SetSpecialSetValue
            {
                get
                {
                    return _setSpecialSetValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET STATISTICS statistic_kind statistics=on_off 
        /// </summary>
        public partial class AstSetSpecial2 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstStatisticKind _statisticKind;
            
            private AstOnOff _statistics;
            
            internal AstSetSpecial2(ParserRuleContext ctx, AstStatisticKind statisticKind, AstOnOff statistics) : 
                    base(ctx)
            {
                _statisticKind = statisticKind;
                _statistics = statistics;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStatisticKind StatisticKind
            {
                get
                {
                    return _statisticKind;
                }
            }
            
            public virtual AstOnOff Statistics
            {
                get
                {
                    return _statistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET ROWCOUNT local_id_decimal 
        /// </summary>
        public partial class AstSetSpecial3 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstLocalIdDecimal _localIdDecimal;
            
            internal AstSetSpecial3(ParserRuleContext ctx, AstLocalIdDecimal localIdDecimal) : 
                    base(ctx)
            {
                _localIdDecimal = localIdDecimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalIdDecimal LocalIdDecimal
            {
                get
                {
                    return _localIdDecimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET TEXTSIZE decimal 
        /// </summary>
        public partial class AstSetSpecial4 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstDecimal _decimal;
            
            internal AstSetSpecial4(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET TRANSACTION ISOLATION LEVEL transaction_level 
        /// </summary>
        public partial class AstSetSpecial5 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstTransactionLevel _transactionLevel;
            
            internal AstSetSpecial5(ParserRuleContext ctx, AstTransactionLevel transactionLevel) : 
                    base(ctx)
            {
                _transactionLevel = transactionLevel;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransactionLevel TransactionLevel
            {
                get
                {
                    return _transactionLevel;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET IDENTITY_INSERT full_table_ref identity_insert=on_off 
        /// </summary>
        public partial class AstSetSpecial6 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstFullTableRef _fullTableRef;
            
            private AstOnOff _identityInsert;
            
            internal AstSetSpecial6(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstOnOff identityInsert) : 
                    base(ctx)
            {
                _fullTableRef = fullTableRef;
                _identityInsert = identityInsert;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public virtual AstOnOff IdentityInsert
            {
                get
                {
                    return _identityInsert;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET special_lists list=on_off 
        /// </summary>
        public partial class AstSetSpecial7 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstSpecialLists _specialLists;
            
            private AstOnOff _list;
            
            internal AstSetSpecial7(ParserRuleContext ctx, AstSpecialLists specialLists, AstOnOff list) : 
                    base(ctx)
            {
                _specialLists = specialLists;
                _list = list;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSpecialLists SpecialLists
            {
                get
                {
                    return _specialLists;
                }
            }
            
            public virtual AstOnOff List
            {
                get
                {
                    return _list;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET modify_method 
        /// </summary>
        public partial class AstSetSpecial8 : AstSetSpecial
        {
            
            private static string _ruleName1 = "set_special";
            
            private AstModifyMethod _modifyMethod;
            
            internal AstSetSpecial8(ParserRuleContext ctx, AstModifyMethod modifyMethod) : 
                    base(ctx)
            {
                _modifyMethod = modifyMethod;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstModifyMethod ModifyMethod
            {
                get
                {
                    return _modifyMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        

        
        internal AstSetSpecial(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecial(Position p) : 
                base(p)
        {
        }
        
        internal AstSetSpecial(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSetSpecial Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSetSpecial.AstSetSpecial1(ctx, list.Get<AstId>(0), list.Get<AstSetSpecialSetValue>(1));
            }
            if ((index == 2))
            {
                return new AstSetSpecial.AstSetSpecial2(ctx, list.Get<AstStatisticKind>(0), list.Get<AstOnOff>(1));
            }
            if ((index == 3))
            {
                return new AstSetSpecial.AstSetSpecial3(ctx, list.Get<AstLocalIdDecimal>(0));
            }
            if ((index == 4))
            {
                return new AstSetSpecial.AstSetSpecial4(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 5))
            {
                return new AstSetSpecial.AstSetSpecial5(ctx, list.Get<AstTransactionLevel>(0));
            }
            if ((index == 6))
            {
                return new AstSetSpecial.AstSetSpecial6(ctx, list.Get<AstFullTableRef>(0), list.Get<AstOnOff>(1));
            }
            if ((index == 7))
            {
                return new AstSetSpecial.AstSetSpecial7(ctx, list.Get<AstSpecialLists>(0), list.Get<AstOnOff>(1));
            }
            if ((index == 8))
            {
                return new AstSetSpecial.AstSetSpecial8(ctx, list.Get<AstModifyMethod>(0));
            }
            return null;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET left=id_ set_special_set_value 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstId left, AstSetSpecialSetValue setSpecialSetValue)
        {
            AstSetSpecial.AstSetSpecial1 result = new AstSetSpecial.AstSetSpecial1(ctx, left, setSpecialSetValue);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET STATISTICS statistic_kind statistics=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstStatisticKind statisticKind, AstOnOff statistics)
        {
            AstSetSpecial.AstSetSpecial2 result = new AstSetSpecial.AstSetSpecial2(ctx, statisticKind, statistics);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET ROWCOUNT local_id_decimal 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstLocalIdDecimal localIdDecimal)
        {
            AstSetSpecial.AstSetSpecial3 result = new AstSetSpecial.AstSetSpecial3(ctx, localIdDecimal);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET TEXTSIZE decimal 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSetSpecial.AstSetSpecial4 result = new AstSetSpecial.AstSetSpecial4(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET TRANSACTION ISOLATION LEVEL transaction_level 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstTransactionLevel transactionLevel)
        {
            AstSetSpecial.AstSetSpecial5 result = new AstSetSpecial.AstSetSpecial5(ctx, transactionLevel);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET IDENTITY_INSERT full_table_ref identity_insert=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstOnOff identityInsert)
        {
            AstSetSpecial.AstSetSpecial6 result = new AstSetSpecial.AstSetSpecial6(ctx, fullTableRef, identityInsert);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET special_lists list=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstSpecialLists specialLists, AstOnOff list)
        {
            AstSetSpecial.AstSetSpecial7 result = new AstSetSpecial.AstSetSpecial7(ctx, specialLists, list);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET modify_method 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstModifyMethod modifyMethod)
        {
            AstSetSpecial.AstSetSpecial8 result = new AstSetSpecial.AstSetSpecial8(ctx, modifyMethod);
            return result;
        }
    }
    
    /// <summary>
    /// transaction_level
    /// 	 : transaction_isolation
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstTransactionLevel : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTransactionIsolation), false, false, "transaction_isolation")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "transaction_isolation\r\n | decimal\r\n";
        
        private static string _ruleName = "transaction_level";
        
        /// <summary>
        /// transaction_level : transaction_isolation 
        /// </summary>
        public partial class AstTransactionLevel1 : AstTransactionLevel
        {
            
            private static string _ruleName1 = "transaction_level";
            
            private AstTransactionIsolation _transactionIsolation;
            
            internal AstTransactionLevel1(ParserRuleContext ctx, AstTransactionIsolation transactionIsolation) : 
                    base(ctx)
            {
                _transactionIsolation = transactionIsolation;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTransactionIsolation TransactionIsolation
            {
                get
                {
                    return _transactionIsolation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionLevel(this);
            }
        }
        /// <summary>
        /// transaction_level : decimal 
        /// </summary>
        public partial class AstTransactionLevel2 : AstTransactionLevel
        {
            
            private static string _ruleName1 = "transaction_level";
            
            private AstDecimal _decimal;
            
            internal AstTransactionLevel2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionLevel(this);
            }
        }
        

        
        internal AstTransactionLevel(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTransactionLevel(Position p) : 
                base(p)
        {
        }
        
        internal AstTransactionLevel(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTransactionLevel Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTransactionLevel.AstTransactionLevel1(ctx, list.Get<AstTransactionIsolation>(0));
            }
            if ((index == 2))
            {
                return new AstTransactionLevel.AstTransactionLevel2(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// transaction_level : 
        ///    transaction_isolation 
        /// </summary>
        public static AstTransactionLevel TransactionLevel(ParserRuleContext ctx, AstTransactionIsolation transactionIsolation)
        {
            AstTransactionLevel.AstTransactionLevel1 result = new AstTransactionLevel.AstTransactionLevel1(ctx, transactionIsolation);
            return result;
        }
        
        /// <summary>
        /// transaction_level : 
        ///    decimal 
        /// </summary>
        public static AstTransactionLevel TransactionLevel(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTransactionLevel.AstTransactionLevel2 result = new AstTransactionLevel.AstTransactionLevel2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// local_id_decimal
    /// 	 : local_id
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstLocalIdDecimal : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "local_id\r\n | decimal\r\n";
        
        private static string _ruleName = "local_id_decimal";
        
        /// <summary>
        /// local_id_decimal : local_id 
        /// </summary>
        public partial class AstLocalIdDecimal1 : AstLocalIdDecimal
        {
            
            private static string _ruleName1 = "local_id_decimal";
            
            private AstLocalId _localId;
            
            internal AstLocalIdDecimal1(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLocalIdDecimal(this);
            }
        }
        /// <summary>
        /// local_id_decimal : decimal 
        /// </summary>
        public partial class AstLocalIdDecimal2 : AstLocalIdDecimal
        {
            
            private static string _ruleName1 = "local_id_decimal";
            
            private AstDecimal _decimal;
            
            internal AstLocalIdDecimal2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLocalIdDecimal(this);
            }
        }
        

        
        internal AstLocalIdDecimal(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLocalIdDecimal(Position p) : 
                base(p)
        {
        }
        
        internal AstLocalIdDecimal(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstLocalIdDecimal Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstLocalIdDecimal.AstLocalIdDecimal1(ctx, list.Get<AstLocalId>(0));
            }
            if ((index == 2))
            {
                return new AstLocalIdDecimal.AstLocalIdDecimal2(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// local_id_decimal : 
        ///    local_id 
        /// </summary>
        public static AstLocalIdDecimal LocalIdDecimal(ParserRuleContext ctx, AstLocalId localId)
        {
            AstLocalIdDecimal.AstLocalIdDecimal1 result = new AstLocalIdDecimal.AstLocalIdDecimal1(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// local_id_decimal : 
        ///    decimal 
        /// </summary>
        public static AstLocalIdDecimal LocalIdDecimal(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstLocalIdDecimal.AstLocalIdDecimal2 result = new AstLocalIdDecimal.AstLocalIdDecimal2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// set_special_set_value
    /// 	 : id_
    /// 	 | constant_local_id
    /// 	 | on_off
    /// </summary>
    public abstract partial class AstSetSpecialSetValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstantLocalId), false, false, "constant_local_id")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = "id_\r\n | constant_local_id\r\n | on_off\r\n";
        
        private static string _ruleName = "set_special_set_value";
        
        /// <summary>
        /// set_special_set_value : id_ 
        /// </summary>
        public partial class AstSetSpecialSetValue1 : AstSetSpecialSetValue
        {
            
            private static string _ruleName1 = "set_special_set_value";
            
            private AstId _id;
            
            internal AstSetSpecialSetValue1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecialSetValue(this);
            }
        }
        /// <summary>
        /// set_special_set_value : constant_local_id 
        /// </summary>
        public partial class AstSetSpecialSetValue2 : AstSetSpecialSetValue
        {
            
            private static string _ruleName1 = "set_special_set_value";
            
            private AstConstantLocalId _constantLocalId;
            
            internal AstSetSpecialSetValue2(ParserRuleContext ctx, AstConstantLocalId constantLocalId) : 
                    base(ctx)
            {
                _constantLocalId = constantLocalId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstantLocalId ConstantLocalId
            {
                get
                {
                    return _constantLocalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecialSetValue(this);
            }
        }
        /// <summary>
        /// set_special_set_value : on_off 
        /// </summary>
        public partial class AstSetSpecialSetValue3 : AstSetSpecialSetValue
        {
            
            private static string _ruleName1 = "set_special_set_value";
            
            private AstOnOff _onOff;
            
            internal AstSetSpecialSetValue3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecialSetValue(this);
            }
        }
        

        
        internal AstSetSpecialSetValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecialSetValue(Position p) : 
                base(p)
        {
        }
        
        internal AstSetSpecialSetValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSetSpecialSetValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSetSpecialSetValue.AstSetSpecialSetValue1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstSetSpecialSetValue.AstSetSpecialSetValue2(ctx, list.Get<AstConstantLocalId>(0));
            }
            if ((index == 3))
            {
                return new AstSetSpecialSetValue.AstSetSpecialSetValue3(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    id_ 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(ParserRuleContext ctx, AstId id)
        {
            AstSetSpecialSetValue.AstSetSpecialSetValue1 result = new AstSetSpecialSetValue.AstSetSpecialSetValue1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    constant_local_id 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(ParserRuleContext ctx, AstConstantLocalId constantLocalId)
        {
            AstSetSpecialSetValue.AstSetSpecialSetValue2 result = new AstSetSpecialSetValue.AstSetSpecialSetValue2(ctx, constantLocalId);
            return result;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    on_off 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSetSpecialSetValue.AstSetSpecialSetValue3 result = new AstSetSpecialSetValue.AstSetSpecialSetValue3(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// constant_local_id
    /// 	 : constant
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstConstantLocalId : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstant), false, false, "constant")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"))));
        
        private static string _ruleValue = "constant\r\n | local_id\r\n";
        
        private static string _ruleName = "constant_local_id";
        
        /// <summary>
        /// constant_local_id : constant 
        /// </summary>
        public partial class AstConstantLocalId1 : AstConstantLocalId
        {
            
            private static string _ruleName1 = "constant_local_id";
            
            private AstConstant _constant;
            
            internal AstConstantLocalId1(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantLocalId(this);
            }
        }
        /// <summary>
        /// constant_local_id : local_id 
        /// </summary>
        public partial class AstConstantLocalId2 : AstConstantLocalId
        {
            
            private static string _ruleName1 = "constant_local_id";
            
            private AstLocalId _localId;
            
            internal AstConstantLocalId2(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantLocalId(this);
            }
        }
        

        
        internal AstConstantLocalId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstantLocalId(Position p) : 
                base(p)
        {
        }
        
        internal AstConstantLocalId(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstConstantLocalId Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstConstantLocalId.AstConstantLocalId1(ctx, list.Get<AstConstant>(0));
            }
            if ((index == 2))
            {
                return new AstConstantLocalId.AstConstantLocalId2(ctx, list.Get<AstLocalId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// constant_local_id : 
        ///    constant 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(ParserRuleContext ctx, AstConstant constant)
        {
            AstConstantLocalId.AstConstantLocalId1 result = new AstConstantLocalId.AstConstantLocalId1(ctx, constant);
            return result;
        }
        
        /// <summary>
        /// constant_local_id : 
        ///    local_id 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(ParserRuleContext ctx, AstLocalId localId)
        {
            AstConstantLocalId.AstConstantLocalId2 result = new AstConstantLocalId.AstConstantLocalId2(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// expression
    /// 	 : primitive_expression
    /// 	 | function_call
    /// 	 | expression  DOT  expression_chained
    /// 	 | expression  DOT  hierarchyid_call
    /// 	 | expression  COLLATE  id_
    /// 	 | case_expression
    /// 	 | full_column_name
    /// 	 | bracket_expression
    /// 	 | unary_operator_expression
    /// 	 | left = expression  op = expression_operator  right = expression
    /// 	 | expression  time_zone
    /// 	 | over_clause
    /// 	 | DOLLAR_ACTION
    /// </summary>
    public abstract partial class AstExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionOperator), false, false, "expression_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionChained), false, false, "expression_chained")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstHierarchyidCall), false, false, "hierarchyid_call")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTimeZone), false, false, "time_zone")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPrimitiveExpression), false, false, "primitive_expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFunctionCall), false, false, "function_call")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstCaseExpression), false, false, "case_expression")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstBracketExpression), false, false, "bracket_expression")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstUnaryOperatorExpression), false, false, "unary_operator_expression")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstOverClause), false, false, "over_clause"))));
        
        private static string _ruleValue = @"primitive_expression
 | function_call
 | expression  DOT  expression_chained
 | expression  DOT  hierarchyid_call
 | expression  COLLATE  id_
 | case_expression
 | full_column_name
 | bracket_expression
 | unary_operator_expression
 | left = expression  op = expression_operator  right = expression
 | expression  time_zone
 | over_clause
 | DOLLAR_ACTION
";
        
        private static string _ruleName = "expression";
        
        /// <summary>
        /// expression : primitive_expression 
        /// </summary>
        public partial class AstExpression1 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstPrimitiveExpression _primitiveExpression;
            
            internal AstExpression1(ParserRuleContext ctx, AstPrimitiveExpression primitiveExpression) : 
                    base(ctx)
            {
                _primitiveExpression = primitiveExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPrimitiveExpression PrimitiveExpression
            {
                get
                {
                    return _primitiveExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : function_call 
        /// </summary>
        public partial class AstExpression2 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstFunctionCall _functionCall;
            
            internal AstExpression2(ParserRuleContext ctx, AstFunctionCall functionCall) : 
                    base(ctx)
            {
                _functionCall = functionCall;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression DOT expression_chained 
        /// </summary>
        public partial class AstExpression3 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstExpression _expression;
            
            private AstExpressionChained _expressionChained;
            
            internal AstExpression3(ParserRuleContext ctx, AstExpression expression, AstExpressionChained expressionChained) : 
                    base(ctx)
            {
                _expression = expression;
                _expressionChained = expressionChained;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstExpressionChained ExpressionChained
            {
                get
                {
                    return _expressionChained;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression DOT hierarchyid_call 
        /// </summary>
        public partial class AstExpression4 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstExpression _expression;
            
            private AstHierarchyidCall _hierarchyidCall;
            
            internal AstExpression4(ParserRuleContext ctx, AstExpression expression, AstHierarchyidCall hierarchyidCall) : 
                    base(ctx)
            {
                _expression = expression;
                _hierarchyidCall = hierarchyidCall;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstHierarchyidCall HierarchyidCall
            {
                get
                {
                    return _hierarchyidCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression COLLATE id_ 
        /// </summary>
        public partial class AstExpression5 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstExpression _expression;
            
            private AstId _id;
            
            internal AstExpression5(ParserRuleContext ctx, AstExpression expression, AstId id) : 
                    base(ctx)
            {
                _expression = expression;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : case_expression 
        /// </summary>
        public partial class AstExpression6 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstCaseExpression _caseExpression;
            
            internal AstExpression6(ParserRuleContext ctx, AstCaseExpression caseExpression) : 
                    base(ctx)
            {
                _caseExpression = caseExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCaseExpression CaseExpression
            {
                get
                {
                    return _caseExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : full_column_name 
        /// </summary>
        public partial class AstExpression7 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstFullColumnName _fullColumnName;
            
            internal AstExpression7(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : bracket_expression 
        /// </summary>
        public partial class AstExpression8 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstBracketExpression _bracketExpression;
            
            internal AstExpression8(ParserRuleContext ctx, AstBracketExpression bracketExpression) : 
                    base(ctx)
            {
                _bracketExpression = bracketExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBracketExpression BracketExpression
            {
                get
                {
                    return _bracketExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : unary_operator_expression 
        /// </summary>
        public partial class AstExpression9 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstUnaryOperatorExpression _unaryOperatorExpression;
            
            internal AstExpression9(ParserRuleContext ctx, AstUnaryOperatorExpression unaryOperatorExpression) : 
                    base(ctx)
            {
                _unaryOperatorExpression = unaryOperatorExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUnaryOperatorExpression UnaryOperatorExpression
            {
                get
                {
                    return _unaryOperatorExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : left=expression op=expression_operator right=expression 
        /// </summary>
        public partial class AstExpression10 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstExpression _left;
            
            private AstExpressionOperator _op;
            
            private AstExpression _right;
            
            internal AstExpression10(ParserRuleContext ctx, AstExpression left, AstExpressionOperator op, AstExpression right) : 
                    base(ctx)
            {
                _left = left;
                _op = op;
                _right = right;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpressionOperator Op
            {
                get
                {
                    return _op;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression time_zone 
        /// </summary>
        public partial class AstExpression11 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstExpression _expression;
            
            private AstTimeZone _timeZone;
            
            internal AstExpression11(ParserRuleContext ctx, AstExpression expression, AstTimeZone timeZone) : 
                    base(ctx)
            {
                _expression = expression;
                _timeZone = timeZone;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstTimeZone TimeZone
            {
                get
                {
                    return _timeZone;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : over_clause 
        /// </summary>
        public partial class AstExpression12 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            private AstOverClause _overClause;
            
            internal AstExpression12(ParserRuleContext ctx, AstOverClause overClause) : 
                    base(ctx)
            {
                _overClause = overClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : DOLLAR_ACTION 
        /// </summary>
        public partial class AstExpression13 : AstExpression
        {
            
            private static string _ruleName1 = "expression";
            
            internal AstExpression13(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        

        
        internal AstExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExpression.AstExpression1(ctx, list.Get<AstPrimitiveExpression>(0));
            }
            if ((index == 2))
            {
                return new AstExpression.AstExpression2(ctx, list.Get<AstFunctionCall>(0));
            }
            if ((index == 3))
            {
                return new AstExpression.AstExpression3(ctx, list.Get<AstExpression>(0), list.Get<AstExpressionChained>(1));
            }
            if ((index == 4))
            {
                return new AstExpression.AstExpression4(ctx, list.Get<AstExpression>(0), list.Get<AstHierarchyidCall>(1));
            }
            if ((index == 5))
            {
                return new AstExpression.AstExpression5(ctx, list.Get<AstExpression>(0), list.Get<AstId>(1));
            }
            if ((index == 6))
            {
                return new AstExpression.AstExpression6(ctx, list.Get<AstCaseExpression>(0));
            }
            if ((index == 7))
            {
                return new AstExpression.AstExpression7(ctx, list.Get<AstFullColumnName>(0));
            }
            if ((index == 8))
            {
                return new AstExpression.AstExpression8(ctx, list.Get<AstBracketExpression>(0));
            }
            if ((index == 9))
            {
                return new AstExpression.AstExpression9(ctx, list.Get<AstUnaryOperatorExpression>(0));
            }
            if ((index == 10))
            {
                return new AstExpression.AstExpression10(ctx, list.Get<AstExpression>(0), list.Get<AstExpressionOperator>(1), list.Get<AstExpression>(2));
            }
            if ((index == 11))
            {
                return new AstExpression.AstExpression11(ctx, list.Get<AstExpression>(0), list.Get<AstTimeZone>(1));
            }
            if ((index == 12))
            {
                return new AstExpression.AstExpression12(ctx, list.Get<AstOverClause>(0));
            }
            if ((index == 13))
            {
                return new AstExpression.AstExpression13(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// expression : 
        ///    primitive_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstPrimitiveExpression primitiveExpression)
        {
            AstExpression.AstExpression1 result = new AstExpression.AstExpression1(ctx, primitiveExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    function_call 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstFunctionCall functionCall)
        {
            AstExpression.AstExpression2 result = new AstExpression.AstExpression2(ctx, functionCall);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . expression_chained 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstExpressionChained expressionChained)
        {
            AstExpression.AstExpression3 result = new AstExpression.AstExpression3(ctx, expression, expressionChained);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . hierarchyid_call 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstHierarchyidCall hierarchyidCall)
        {
            AstExpression.AstExpression4 result = new AstExpression.AstExpression4(ctx, expression, hierarchyidCall);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression COLLATE id_ 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstId id)
        {
            AstExpression.AstExpression5 result = new AstExpression.AstExpression5(ctx, expression, id);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    case_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstCaseExpression caseExpression)
        {
            AstExpression.AstExpression6 result = new AstExpression.AstExpression6(ctx, caseExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    full_column_name 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstExpression.AstExpression7 result = new AstExpression.AstExpression7(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    bracket_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstBracketExpression bracketExpression)
        {
            AstExpression.AstExpression8 result = new AstExpression.AstExpression8(ctx, bracketExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    unary_operator_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstUnaryOperatorExpression unaryOperatorExpression)
        {
            AstExpression.AstExpression9 result = new AstExpression.AstExpression9(ctx, unaryOperatorExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    left=expression op=expression_operator right=expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression left, AstExpressionOperator op, AstExpression right)
        {
            AstExpression.AstExpression10 result = new AstExpression.AstExpression10(ctx, left, op, right);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression time_zone 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstTimeZone timeZone)
        {
            AstExpression.AstExpression11 result = new AstExpression.AstExpression11(ctx, expression, timeZone);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    over_clause 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstOverClause overClause)
        {
            AstExpression.AstExpression12 result = new AstExpression.AstExpression12(ctx, overClause);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    DOLLAR_ACTION 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx)
        {
            AstExpression.AstExpression13 result = new AstExpression.AstExpression13(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// expression_chained
    /// 	 : value_call
    /// 	 | query_call
    /// 	 | exist_call
    /// 	 | modify_call
    /// </summary>
    public abstract partial class AstExpressionChained : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstValueCall), false, false, "value_call")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryCall), false, false, "query_call")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstExistCall), false, false, "exist_call")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstModifyCall), false, false, "modify_call"))));
        
        private static string _ruleValue = "value_call\r\n | query_call\r\n | exist_call\r\n | modify_call\r\n";
        
        private static string _ruleName = "expression_chained";
        
        /// <summary>
        /// expression_chained : value_call 
        /// </summary>
        public partial class AstExpressionChained1 : AstExpressionChained
        {
            
            private static string _ruleName1 = "expression_chained";
            
            private AstValueCall _valueCall;
            
            internal AstExpressionChained1(ParserRuleContext ctx, AstValueCall valueCall) : 
                    base(ctx)
            {
                _valueCall = valueCall;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstValueCall ValueCall
            {
                get
                {
                    return _valueCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        /// <summary>
        /// expression_chained : query_call 
        /// </summary>
        public partial class AstExpressionChained2 : AstExpressionChained
        {
            
            private static string _ruleName1 = "expression_chained";
            
            private AstQueryCall _queryCall;
            
            internal AstExpressionChained2(ParserRuleContext ctx, AstQueryCall queryCall) : 
                    base(ctx)
            {
                _queryCall = queryCall;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueryCall QueryCall
            {
                get
                {
                    return _queryCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        /// <summary>
        /// expression_chained : exist_call 
        /// </summary>
        public partial class AstExpressionChained3 : AstExpressionChained
        {
            
            private static string _ruleName1 = "expression_chained";
            
            private AstExistCall _existCall;
            
            internal AstExpressionChained3(ParserRuleContext ctx, AstExistCall existCall) : 
                    base(ctx)
            {
                _existCall = existCall;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExistCall ExistCall
            {
                get
                {
                    return _existCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        /// <summary>
        /// expression_chained : modify_call 
        /// </summary>
        public partial class AstExpressionChained4 : AstExpressionChained
        {
            
            private static string _ruleName1 = "expression_chained";
            
            private AstModifyCall _modifyCall;
            
            internal AstExpressionChained4(ParserRuleContext ctx, AstModifyCall modifyCall) : 
                    base(ctx)
            {
                _modifyCall = modifyCall;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstModifyCall ModifyCall
            {
                get
                {
                    return _modifyCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        

        
        internal AstExpressionChained(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpressionChained(Position p) : 
                base(p)
        {
        }
        
        internal AstExpressionChained(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExpressionChained Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExpressionChained.AstExpressionChained1(ctx, list.Get<AstValueCall>(0));
            }
            if ((index == 2))
            {
                return new AstExpressionChained.AstExpressionChained2(ctx, list.Get<AstQueryCall>(0));
            }
            if ((index == 3))
            {
                return new AstExpressionChained.AstExpressionChained3(ctx, list.Get<AstExistCall>(0));
            }
            if ((index == 4))
            {
                return new AstExpressionChained.AstExpressionChained4(ctx, list.Get<AstModifyCall>(0));
            }
            return null;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    value_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstValueCall valueCall)
        {
            AstExpressionChained.AstExpressionChained1 result = new AstExpressionChained.AstExpressionChained1(ctx, valueCall);
            return result;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    query_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstQueryCall queryCall)
        {
            AstExpressionChained.AstExpressionChained2 result = new AstExpressionChained.AstExpressionChained2(ctx, queryCall);
            return result;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    exist_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstExistCall existCall)
        {
            AstExpressionChained.AstExpressionChained3 result = new AstExpressionChained.AstExpressionChained3(ctx, existCall);
            return result;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    modify_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstModifyCall modifyCall)
        {
            AstExpressionChained.AstExpressionChained4 result = new AstExpressionChained.AstExpressionChained4(ctx, modifyCall);
            return result;
        }
    }
    
    /// <summary>
    /// primitive_expression
    /// 	 : DEFAULT
    /// 	 | NULL_
    /// 	 | local_id
    /// 	 | constant
    /// </summary>
    public abstract partial class AstPrimitiveExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstant), false, false, "constant"))));
        
        private static string _ruleValue = "DEFAULT\r\n | NULL_\r\n | local_id\r\n | constant\r\n";
        
        private static string _ruleName = "primitive_expression";
        
        /// <summary>
        /// primitive_expression : DEFAULT 
        /// </summary>
        public partial class AstPrimitiveExpression1 : AstPrimitiveExpression
        {
            
            private static string _ruleName1 = "primitive_expression";
            
            internal AstPrimitiveExpression1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : NULL_ 
        /// </summary>
        public partial class AstPrimitiveExpression2 : AstPrimitiveExpression
        {
            
            private static string _ruleName1 = "primitive_expression";
            
            internal AstPrimitiveExpression2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : local_id 
        /// </summary>
        public partial class AstPrimitiveExpression3 : AstPrimitiveExpression
        {
            
            private static string _ruleName1 = "primitive_expression";
            
            private AstLocalId _localId;
            
            internal AstPrimitiveExpression3(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : constant 
        /// </summary>
        public partial class AstPrimitiveExpression4 : AstPrimitiveExpression
        {
            
            private static string _ruleName1 = "primitive_expression";
            
            private AstConstant _constant;
            
            internal AstPrimitiveExpression4(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        

        
        internal AstPrimitiveExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrimitiveExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstPrimitiveExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPrimitiveExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression1(ctx);
            }
            if ((index == 2))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression2(ctx);
            }
            if ((index == 3))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression3(ctx, list.Get<AstLocalId>(0));
            }
            if ((index == 4))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression4(ctx, list.Get<AstConstant>(0));
            }
            return null;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    DEFAULT 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(ParserRuleContext ctx)
        {
            AstPrimitiveExpression.AstPrimitiveExpression1 result = new AstPrimitiveExpression.AstPrimitiveExpression1(ctx);
            return result;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    local_id 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(ParserRuleContext ctx, AstLocalId localId)
        {
            AstPrimitiveExpression.AstPrimitiveExpression3 result = new AstPrimitiveExpression.AstPrimitiveExpression3(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    constant 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(ParserRuleContext ctx, AstConstant constant)
        {
            AstPrimitiveExpression.AstPrimitiveExpression4 result = new AstPrimitiveExpression.AstPrimitiveExpression4(ctx, constant);
            return result;
        }
    }
    
    /// <summary>
    /// case_expression
    /// 	 : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END
    /// 	 | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
    /// </summary>
    public abstract partial class AstCaseExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(IEnumerable<AstSwitchSection>), false, true, "switch_section"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(IEnumerable<AstSwitchSearchConditionSection>), false, true, "switch_search_condition_section"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END" +
            "\r\n | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END" +
            "\r\n";
        
        private static string _ruleName = "case_expression";
        
        /// <summary>
        /// case_expression : CASE caseExpr=expression switch_section+ ELSE elseExpr=expression END 
        /// </summary>
        public partial class AstCaseExpression1 : AstCaseExpression
        {
            
            private static string _ruleName1 = "case_expression";
            
            private AstExpression _caseExpr;
            
            private IEnumerable<AstSwitchSection> _switchSection;
            
            private AstExpression _elseExpr;
            
            internal AstCaseExpression1(ParserRuleContext ctx, AstExpression caseExpr, IEnumerable<AstSwitchSection> switchSection, AstExpression elseExpr) : 
                    base(ctx)
            {
                _caseExpr = caseExpr;
                _switchSection = switchSection;
                _elseExpr = elseExpr;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Caseexpr
            {
                get
                {
                    return _caseExpr;
                }
            }
            
            public virtual IEnumerable<AstSwitchSection> SwitchSection
            {
                get
                {
                    return _switchSection;
                }
            }
            
            public virtual AstExpression Elseexpr
            {
                get
                {
                    return _elseExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCaseExpression(this);
            }
        }
        /// <summary>
        /// case_expression : CASE switch_search_condition_section+ ELSE elseExpr=expression END 
        /// </summary>
        public partial class AstCaseExpression2 : AstCaseExpression
        {
            
            private static string _ruleName1 = "case_expression";
            
            private IEnumerable<AstSwitchSearchConditionSection> _switchSearchConditionSection;
            
            private AstExpression _elseExpr;
            
            internal AstCaseExpression2(ParserRuleContext ctx, IEnumerable<AstSwitchSearchConditionSection> switchSearchConditionSection, AstExpression elseExpr) : 
                    base(ctx)
            {
                _switchSearchConditionSection = switchSearchConditionSection;
                _elseExpr = elseExpr;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual IEnumerable<AstSwitchSearchConditionSection> SwitchSearchConditionSection
            {
                get
                {
                    return _switchSearchConditionSection;
                }
            }
            
            public virtual AstExpression Elseexpr
            {
                get
                {
                    return _elseExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCaseExpression(this);
            }
        }
        

        
        internal AstCaseExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCaseExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstCaseExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCaseExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCaseExpression.AstCaseExpression1(ctx, list.Get<AstExpression>(0), list.Get<IEnumerable<AstSwitchSection>>(1), list.Get<AstExpression>(2));
            }
            if ((index == 2))
            {
                return new AstCaseExpression.AstCaseExpression2(ctx, list.Get<IEnumerable<AstSwitchSearchConditionSection>>(0), list.Get<AstExpression>(1));
            }
            return null;
        }
        
        /// <summary>
        /// case_expression : 
        ///    CASE caseExpr=expression switch_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(ParserRuleContext ctx, AstExpression caseExpr, IEnumerable<AstSwitchSection> switchSection, AstExpression elseExpr)
        {
            AstCaseExpression.AstCaseExpression1 result = new AstCaseExpression.AstCaseExpression1(ctx, caseExpr, switchSection, elseExpr);
            return result;
        }
        
        /// <summary>
        /// case_expression : 
        ///    CASE switch_search_condition_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(ParserRuleContext ctx, IEnumerable<AstSwitchSearchConditionSection> switchSearchConditionSection, AstExpression elseExpr)
        {
            AstCaseExpression.AstCaseExpression2 result = new AstCaseExpression.AstCaseExpression2(ctx, switchSearchConditionSection, elseExpr);
            return result;
        }
    }
    
    /// <summary>
    /// unary_operator_expression
    /// 	 : BIT_NOT  expression
    /// 	 | plus_minus  expression
    /// </summary>
    public abstract partial class AstUnaryOperatorExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstPlusMinus), false, false, "plus_minus"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "BIT_NOT  expression\r\n | plus_minus  expression\r\n";
        
        private static string _ruleName = "unary_operator_expression";
        
        /// <summary>
        /// unary_operator_expression : BIT_NOT expression 
        /// </summary>
        public partial class AstUnaryOperatorExpression1 : AstUnaryOperatorExpression
        {
            
            private static string _ruleName1 = "unary_operator_expression";
            
            private AstExpression _expression;
            
            internal AstUnaryOperatorExpression1(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUnaryOperatorExpression(this);
            }
        }
        /// <summary>
        /// unary_operator_expression : plus_minus expression 
        /// </summary>
        public partial class AstUnaryOperatorExpression2 : AstUnaryOperatorExpression
        {
            
            private static string _ruleName1 = "unary_operator_expression";
            
            private AstPlusMinus _plusMinus;
            
            private AstExpression _expression;
            
            internal AstUnaryOperatorExpression2(ParserRuleContext ctx, AstPlusMinus plusMinus, AstExpression expression) : 
                    base(ctx)
            {
                _plusMinus = plusMinus;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPlusMinus PlusMinus
            {
                get
                {
                    return _plusMinus;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUnaryOperatorExpression(this);
            }
        }
        

        
        internal AstUnaryOperatorExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUnaryOperatorExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstUnaryOperatorExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUnaryOperatorExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUnaryOperatorExpression.AstUnaryOperatorExpression1(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 2))
            {
                return new AstUnaryOperatorExpression.AstUnaryOperatorExpression2(ctx, list.Get<AstPlusMinus>(0), list.Get<AstExpression>(1));
            }
            return null;
        }
        
        /// <summary>
        /// unary_operator_expression : 
        ///    BIT_NOT expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(ParserRuleContext ctx, AstExpression expression)
        {
            AstUnaryOperatorExpression.AstUnaryOperatorExpression1 result = new AstUnaryOperatorExpression.AstUnaryOperatorExpression1(ctx, expression);
            return result;
        }
        
        /// <summary>
        /// unary_operator_expression : 
        ///    plus_minus expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(ParserRuleContext ctx, AstPlusMinus plusMinus, AstExpression expression)
        {
            AstUnaryOperatorExpression.AstUnaryOperatorExpression2 result = new AstUnaryOperatorExpression.AstUnaryOperatorExpression2(ctx, plusMinus, expression);
            return result;
        }
    }
    
    /// <summary>
    /// bracket_expression
    /// 	 : LR_BRACKET  expression  RR_BRACKET
    /// 	 | LR_BRACKET  subquery  RR_BRACKET
    /// </summary>
    public abstract partial class AstBracketExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery"))));
        
        private static string _ruleValue = "LR_BRACKET  expression  RR_BRACKET\r\n | LR_BRACKET  subquery  RR_BRACKET\r\n";
        
        private static string _ruleName = "bracket_expression";
        
        /// <summary>
        /// bracket_expression : LR_BRACKET expression RR_BRACKET 
        /// </summary>
        public partial class AstBracketExpression1 : AstBracketExpression
        {
            
            private static string _ruleName1 = "bracket_expression";
            
            private AstExpression _expression;
            
            internal AstBracketExpression1(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBracketExpression(this);
            }
        }
        /// <summary>
        /// bracket_expression : LR_BRACKET subquery RR_BRACKET 
        /// </summary>
        public partial class AstBracketExpression2 : AstBracketExpression
        {
            
            private static string _ruleName1 = "bracket_expression";
            
            private AstSubquery _subquery;
            
            internal AstBracketExpression2(ParserRuleContext ctx, AstSubquery subquery) : 
                    base(ctx)
            {
                _subquery = subquery;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBracketExpression(this);
            }
        }
        

        
        internal AstBracketExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBracketExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstBracketExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBracketExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBracketExpression.AstBracketExpression1(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 2))
            {
                return new AstBracketExpression.AstBracketExpression2(ctx, list.Get<AstSubquery>(0));
            }
            return null;
        }
        
        /// <summary>
        /// bracket_expression : 
        ///    ( expression ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(ParserRuleContext ctx, AstExpression expression)
        {
            AstBracketExpression.AstBracketExpression1 result = new AstBracketExpression.AstBracketExpression1(ctx, expression);
            return result;
        }
        
        /// <summary>
        /// bracket_expression : 
        ///    ( subquery ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(ParserRuleContext ctx, AstSubquery subquery)
        {
            AstBracketExpression.AstBracketExpression2 result = new AstBracketExpression.AstBracketExpression2(ctx, subquery);
            return result;
        }
    }
    
    /// <summary>
    /// constant_expression
    /// 	 : NULL_
    /// 	 | constant
    /// 	 | function_call
    /// 	 | local_id
    /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstConstantExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstant), false, false, "constant")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstFunctionCall), false, false, "function_call")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstantExpression), false, false, "constant_expression"))));
        
        private static string _ruleValue = "NULL_\r\n | constant\r\n | function_call\r\n | local_id\r\n | LR_BRACKET  constant_expres" +
            "sion  RR_BRACKET\r\n";
        
        private static string _ruleName = "constant_expression";
        
        /// <summary>
        /// constant_expression : NULL_ 
        /// </summary>
        public partial class AstConstantExpression1 : AstConstantExpression
        {
            
            private static string _ruleName1 = "constant_expression";
            
            internal AstConstantExpression1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : constant 
        /// </summary>
        public partial class AstConstantExpression2 : AstConstantExpression
        {
            
            private static string _ruleName1 = "constant_expression";
            
            private AstConstant _constant;
            
            internal AstConstantExpression2(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : function_call 
        /// </summary>
        public partial class AstConstantExpression3 : AstConstantExpression
        {
            
            private static string _ruleName1 = "constant_expression";
            
            private AstFunctionCall _functionCall;
            
            internal AstConstantExpression3(ParserRuleContext ctx, AstFunctionCall functionCall) : 
                    base(ctx)
            {
                _functionCall = functionCall;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : local_id 
        /// </summary>
        public partial class AstConstantExpression4 : AstConstantExpression
        {
            
            private static string _ruleName1 = "constant_expression";
            
            private AstLocalId _localId;
            
            internal AstConstantExpression4(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : LR_BRACKET constant_expression RR_BRACKET 
        /// </summary>
        public partial class AstConstantExpression5 : AstConstantExpression
        {
            
            private static string _ruleName1 = "constant_expression";
            
            private AstConstantExpression _constantExpression;
            
            internal AstConstantExpression5(ParserRuleContext ctx, AstConstantExpression constantExpression) : 
                    base(ctx)
            {
                _constantExpression = constantExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstantExpression ConstantExpression
            {
                get
                {
                    return _constantExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        

        
        internal AstConstantExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstantExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstConstantExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstConstantExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstConstantExpression.AstConstantExpression1(ctx);
            }
            if ((index == 2))
            {
                return new AstConstantExpression.AstConstantExpression2(ctx, list.Get<AstConstant>(0));
            }
            if ((index == 3))
            {
                return new AstConstantExpression.AstConstantExpression3(ctx, list.Get<AstFunctionCall>(0));
            }
            if ((index == 4))
            {
                return new AstConstantExpression.AstConstantExpression4(ctx, list.Get<AstLocalId>(0));
            }
            if ((index == 5))
            {
                return new AstConstantExpression.AstConstantExpression5(ctx, list.Get<AstConstantExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    NULL_ 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx)
        {
            AstConstantExpression.AstConstantExpression1 result = new AstConstantExpression.AstConstantExpression1(ctx);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    constant 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstConstant constant)
        {
            AstConstantExpression.AstConstantExpression2 result = new AstConstantExpression.AstConstantExpression2(ctx, constant);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    function_call 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstFunctionCall functionCall)
        {
            AstConstantExpression.AstConstantExpression3 result = new AstConstantExpression.AstConstantExpression3(ctx, functionCall);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    local_id 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstLocalId localId)
        {
            AstConstantExpression.AstConstantExpression4 result = new AstConstantExpression.AstConstantExpression4(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    ( constant_expression ) 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstConstantExpression constantExpression)
        {
            AstConstantExpression.AstConstantExpression5 result = new AstConstantExpression.AstConstantExpression5(ctx, constantExpression);
            return result;
        }
    }
    
    /// <summary>
    /// common_table_expression
    /// 	 : expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACKET
    /// </summary>
    public partial class AstCommonTableExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSelectStatement), false, false, "select_statement"))));
        
        private AstId _expressionName;
        
        private AstColumnNameList _columns;
        
        private AstSelectStatement _cteQuery;
        
        private static string _ruleValue = "expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS " +
            " LR_BRACKET  cte_query = select_statement  RR_BRACKET\r\n";
        
        private static string _ruleName = "common_table_expression";
        
        internal AstCommonTableExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCommonTableExpression(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCommonTableExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCommonTableExpression(ParserRuleContext ctx, AstId expressionName, AstColumnNameList columns, AstSelectStatement cteQuery) : 
                base(ctx)
        {
            _expressionName = expressionName;
            _columns = columns;
            _cteQuery = cteQuery;
        }
        
        public virtual AstId ExpressionName
        {
            get
            {
                return _expressionName;
            }
        }
        
        public virtual AstColumnNameList Columns
        {
            get
            {
                return _columns;
            }
        }
        
        public virtual AstSelectStatement CteQuery
        {
            get
            {
                return _cteQuery;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCommonTableExpression(this);
        }
        
        public static AstCommonTableExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstCommonTableExpression(ctx, list.Get<AstId>(0), list.Get<AstColumnNameList>(1), list.Get<AstSelectStatement>(2));
        }
        
        /// <summary>
        /// common_table_expression : 
        ///    expression_name=id_ ( columns=column_name_list ) AS ( cte_query=select_statement ) 
        /// </summary>
        public static AstCommonTableExpression CommonTableExpression(ParserRuleContext ctx, AstId expressionName, AstColumnNameList columns, AstSelectStatement cteQuery)
        {
            AstCommonTableExpression result = new AstCommonTableExpression(ctx, expressionName, columns, cteQuery);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem
    /// 	 : local_id  EQUAL  full_column_name  update_operator  expression
    /// 	 | column_ref  update_operator  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstUpdateElem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateOperator), false, false, "update_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnRef), false, false, "column_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateOperator), false, false, "update_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstUdtColumnId), false, false, "udt_column_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstMethodId), false, false, "method_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), false, false, "expression_list"))));
        
        private static string _ruleValue = "local_id  EQUAL  full_column_name  update_operator  expression\r\n | column_ref  up" +
            "date_operator  expression\r\n | udt_column_id  DOT  method_id  LR_BRACKET  express" +
            "ion_list  RR_BRACKET\r\n";
        
        private static string _ruleName = "update_elem";
        
        /// <summary>
        /// update_elem : local_id EQUAL full_column_name update_operator expression 
        /// </summary>
        public partial class AstUpdateElem1 : AstUpdateElem
        {
            
            private static string _ruleName1 = "update_elem";
            
            private AstLocalId _localId;
            
            private AstFullColumnName _fullColumnName;
            
            private AstUpdateOperator _updateOperator;
            
            private AstExpression _expression;
            
            internal AstUpdateElem1(ParserRuleContext ctx, AstLocalId localId, AstFullColumnName fullColumnName, AstUpdateOperator updateOperator, AstExpression expression) : 
                    base(ctx)
            {
                _localId = localId;
                _fullColumnName = fullColumnName;
                _updateOperator = updateOperator;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public virtual AstUpdateOperator UpdateOperator
            {
                get
                {
                    return _updateOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        /// <summary>
        /// update_elem : column_ref update_operator expression 
        /// </summary>
        public partial class AstUpdateElem2 : AstUpdateElem
        {
            
            private static string _ruleName1 = "update_elem";
            
            private AstColumnRef _columnRef;
            
            private AstUpdateOperator _updateOperator;
            
            private AstExpression _expression;
            
            internal AstUpdateElem2(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression) : 
                    base(ctx)
            {
                _columnRef = columnRef;
                _updateOperator = updateOperator;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnRef ColumnRef
            {
                get
                {
                    return _columnRef;
                }
            }
            
            public virtual AstUpdateOperator UpdateOperator
            {
                get
                {
                    return _updateOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        /// <summary>
        /// update_elem : udt_column_id DOT method_id LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstUpdateElem3 : AstUpdateElem
        {
            
            private static string _ruleName1 = "update_elem";
            
            private AstUdtColumnId _udtColumnId;
            
            private AstMethodId _methodId;
            
            private AstExpressionList _expressionList;
            
            internal AstUpdateElem3(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _methodId = methodId;
                _expressionList = expressionList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstMethodId MethodId
            {
                get
                {
                    return _methodId;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        

        
        internal AstUpdateElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElem(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateElem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUpdateElem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUpdateElem.AstUpdateElem1(ctx, list.Get<AstLocalId>(0), list.Get<AstFullColumnName>(1), list.Get<AstUpdateOperator>(2), list.Get<AstExpression>(3));
            }
            if ((index == 2))
            {
                return new AstUpdateElem.AstUpdateElem2(ctx, list.Get<AstColumnRef>(0), list.Get<AstUpdateOperator>(1), list.Get<AstExpression>(2));
            }
            if ((index == 3))
            {
                return new AstUpdateElem.AstUpdateElem3(ctx, list.Get<AstUdtColumnId>(0), list.Get<AstMethodId>(1), list.Get<AstExpressionList>(2));
            }
            return null;
        }
        
        /// <summary>
        /// update_elem : 
        ///    local_id EQUAL full_column_name update_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(ParserRuleContext ctx, AstLocalId localId, AstFullColumnName fullColumnName, AstUpdateOperator updateOperator, AstExpression expression)
        {
            AstUpdateElem.AstUpdateElem1 result = new AstUpdateElem.AstUpdateElem1(ctx, localId, fullColumnName, updateOperator, expression);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    column_ref update_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression)
        {
            AstUpdateElem.AstUpdateElem2 result = new AstUpdateElem.AstUpdateElem2(ctx, columnRef, updateOperator, expression);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElem UpdateElem(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            AstUpdateElem.AstUpdateElem3 result = new AstUpdateElem.AstUpdateElem3(ctx, udtColumnId, methodId, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// column_ref
    /// 	 : full_column_name
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstColumnRef : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"))));
        
        private static string _ruleValue = "full_column_name\r\n | local_id\r\n";
        
        private static string _ruleName = "column_ref";
        
        /// <summary>
        /// column_ref : full_column_name 
        /// </summary>
        public partial class AstColumnRef1 : AstColumnRef
        {
            
            private static string _ruleName1 = "column_ref";
            
            private AstFullColumnName _fullColumnName;
            
            internal AstColumnRef1(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnRef(this);
            }
        }
        /// <summary>
        /// column_ref : local_id 
        /// </summary>
        public partial class AstColumnRef2 : AstColumnRef
        {
            
            private static string _ruleName1 = "column_ref";
            
            private AstLocalId _localId;
            
            internal AstColumnRef2(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnRef(this);
            }
        }
        

        
        internal AstColumnRef(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnRef(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnRef(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstColumnRef Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstColumnRef.AstColumnRef1(ctx, list.Get<AstFullColumnName>(0));
            }
            if ((index == 2))
            {
                return new AstColumnRef.AstColumnRef2(ctx, list.Get<AstLocalId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// column_ref : 
        ///    full_column_name 
        /// </summary>
        public static AstColumnRef ColumnRef(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstColumnRef.AstColumnRef1 result = new AstColumnRef.AstColumnRef1(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// column_ref : 
        ///    local_id 
        /// </summary>
        public static AstColumnRef ColumnRef(ParserRuleContext ctx, AstLocalId localId)
        {
            AstColumnRef.AstColumnRef2 result = new AstColumnRef.AstColumnRef2(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// update_operator
    /// 	 : EQUAL
    /// 	 | assignment_operator
    /// </summary>
    public abstract partial class AstUpdateOperator : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAssignmentOperator), false, false, "assignment_operator"))));
        
        private static string _ruleValue = "EQUAL\r\n | assignment_operator\r\n";
        
        private static string _ruleName = "update_operator";
        
        /// <summary>
        /// update_operator : EQUAL 
        /// </summary>
        public partial class AstUpdateOperator1 : AstUpdateOperator
        {
            
            private static string _ruleName1 = "update_operator";
            
            internal AstUpdateOperator1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOperator(this);
            }
        }
        /// <summary>
        /// update_operator : assignment_operator 
        /// </summary>
        public partial class AstUpdateOperator2 : AstUpdateOperator
        {
            
            private static string _ruleName1 = "update_operator";
            
            private AstAssignmentOperator _assignmentOperator;
            
            internal AstUpdateOperator2(ParserRuleContext ctx, AstAssignmentOperator assignmentOperator) : 
                    base(ctx)
            {
                _assignmentOperator = assignmentOperator;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAssignmentOperator AssignmentOperator
            {
                get
                {
                    return _assignmentOperator;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOperator(this);
            }
        }
        

        
        internal AstUpdateOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateOperator(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUpdateOperator Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUpdateOperator.AstUpdateOperator1(ctx);
            }
            if ((index == 2))
            {
                return new AstUpdateOperator.AstUpdateOperator2(ctx, list.Get<AstAssignmentOperator>(0));
            }
            return null;
        }
        
        /// <summary>
        /// update_operator : 
        ///    EQUAL 
        /// </summary>
        public static AstUpdateOperator UpdateOperator(ParserRuleContext ctx)
        {
            AstUpdateOperator.AstUpdateOperator1 result = new AstUpdateOperator.AstUpdateOperator1(ctx);
            return result;
        }
        
        /// <summary>
        /// update_operator : 
        ///    assignment_operator 
        /// </summary>
        public static AstUpdateOperator UpdateOperator(ParserRuleContext ctx, AstAssignmentOperator assignmentOperator)
        {
            AstUpdateOperator.AstUpdateOperator2 result = new AstUpdateOperator.AstUpdateOperator2(ctx, assignmentOperator);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem_merge
    /// 	 : column_ref  update_operator  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstUpdateElemMerge : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnRef), false, false, "column_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateOperator), false, false, "update_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstUdtColumnId), false, false, "udt_column_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstMethodId), false, false, "method_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), false, false, "expression_list"))));
        
        private static string _ruleValue = "column_ref  update_operator  expression\r\n | udt_column_id  DOT  method_id  LR_BRA" +
            "CKET  expression_list  RR_BRACKET\r\n";
        
        private static string _ruleName = "update_elem_merge";
        
        /// <summary>
        /// update_elem_merge : column_ref update_operator expression 
        /// </summary>
        public partial class AstUpdateElemMerge1 : AstUpdateElemMerge
        {
            
            private static string _ruleName1 = "update_elem_merge";
            
            private AstColumnRef _columnRef;
            
            private AstUpdateOperator _updateOperator;
            
            private AstExpression _expression;
            
            internal AstUpdateElemMerge1(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression) : 
                    base(ctx)
            {
                _columnRef = columnRef;
                _updateOperator = updateOperator;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnRef ColumnRef
            {
                get
                {
                    return _columnRef;
                }
            }
            
            public virtual AstUpdateOperator UpdateOperator
            {
                get
                {
                    return _updateOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElemMerge(this);
            }
        }
        /// <summary>
        /// update_elem_merge : udt_column_id DOT method_id LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstUpdateElemMerge2 : AstUpdateElemMerge
        {
            
            private static string _ruleName1 = "update_elem_merge";
            
            private AstUdtColumnId _udtColumnId;
            
            private AstMethodId _methodId;
            
            private AstExpressionList _expressionList;
            
            internal AstUpdateElemMerge2(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _methodId = methodId;
                _expressionList = expressionList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstMethodId MethodId
            {
                get
                {
                    return _methodId;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElemMerge(this);
            }
        }
        

        
        internal AstUpdateElemMerge(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElemMerge(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateElemMerge(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUpdateElemMerge Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUpdateElemMerge.AstUpdateElemMerge1(ctx, list.Get<AstColumnRef>(0), list.Get<AstUpdateOperator>(1), list.Get<AstExpression>(2));
            }
            if ((index == 2))
            {
                return new AstUpdateElemMerge.AstUpdateElemMerge2(ctx, list.Get<AstUdtColumnId>(0), list.Get<AstMethodId>(1), list.Get<AstExpressionList>(2));
            }
            return null;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    column_ref update_operator expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression)
        {
            AstUpdateElemMerge.AstUpdateElemMerge1 result = new AstUpdateElemMerge.AstUpdateElemMerge1(ctx, columnRef, updateOperator, expression);
            return result;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            AstUpdateElemMerge.AstUpdateElemMerge2 result = new AstUpdateElemMerge.AstUpdateElemMerge2(ctx, udtColumnId, methodId, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// search_condition
    /// 	 : NOT*  sub_search_condition
    /// 	 | left = search_condition  and_or  right = search_condition
    /// </summary>
    public abstract partial class AstSearchCondition : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAndOr), false, false, "and_or"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubSearchCondition), false, false, "sub_search_condition"))));
        
        private static string _ruleValue = "NOT*  sub_search_condition\r\n | left = search_condition  and_or  right = search_co" +
            "ndition\r\n";
        
        private static string _ruleName = "search_condition";
        
        /// <summary>
        /// search_condition : NOT* sub_search_condition 
        /// </summary>
        public partial class AstSearchCondition1 : AstSearchCondition
        {
            
            private static string _ruleName1 = "search_condition";
            
            private AstSubSearchCondition _subSearchCondition;
            
            internal AstSearchCondition1(ParserRuleContext ctx, AstSubSearchCondition subSearchCondition) : 
                    base(ctx)
            {
                _subSearchCondition = subSearchCondition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubSearchCondition SubSearchCondition
            {
                get
                {
                    return _subSearchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSearchCondition(this);
            }
        }
        /// <summary>
        /// search_condition : left=search_condition and_or right=search_condition 
        /// </summary>
        public partial class AstSearchCondition2 : AstSearchCondition
        {
            
            private static string _ruleName1 = "search_condition";
            
            private AstSearchCondition _left;
            
            private AstAndOr _andOr;
            
            private AstSearchCondition _right;
            
            internal AstSearchCondition2(ParserRuleContext ctx, AstSearchCondition left, AstAndOr andOr, AstSearchCondition right) : 
                    base(ctx)
            {
                _left = left;
                _andOr = andOr;
                _right = right;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstAndOr AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstSearchCondition Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSearchCondition(this);
            }
        }
        

        
        internal AstSearchCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSearchCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstSearchCondition(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSearchCondition Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSearchCondition.AstSearchCondition1(ctx, list.Get<AstSubSearchCondition>(0));
            }
            if ((index == 2))
            {
                return new AstSearchCondition.AstSearchCondition2(ctx, list.Get<AstSearchCondition>(0), list.Get<AstAndOr>(1), list.Get<AstSearchCondition>(2));
            }
            return null;
        }
        
        /// <summary>
        /// search_condition : 
        ///    NOT* sub_search_condition 
        /// </summary>
        public static AstSearchCondition SearchCondition(ParserRuleContext ctx, AstSubSearchCondition subSearchCondition)
        {
            AstSearchCondition.AstSearchCondition1 result = new AstSearchCondition.AstSearchCondition1(ctx, subSearchCondition);
            return result;
        }
        
        /// <summary>
        /// search_condition : 
        ///    left=search_condition and_or right=search_condition 
        /// </summary>
        public static AstSearchCondition SearchCondition(ParserRuleContext ctx, AstSearchCondition left, AstAndOr andOr, AstSearchCondition right)
        {
            AstSearchCondition.AstSearchCondition2 result = new AstSearchCondition.AstSearchCondition2(ctx, left, andOr, right);
            return result;
        }
    }
    
    /// <summary>
    /// sub_search_condition
    /// 	 : predicate_expr
    /// 	 | LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstSubSearchCondition : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPredicateExpr), false, false, "predicate_expr")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"))));
        
        private static string _ruleValue = "predicate_expr\r\n | LR_BRACKET  search_condition  RR_BRACKET\r\n";
        
        private static string _ruleName = "sub_search_condition";
        
        /// <summary>
        /// sub_search_condition : predicate_expr 
        /// </summary>
        public partial class AstSubSearchCondition1 : AstSubSearchCondition
        {
            
            private static string _ruleName1 = "sub_search_condition";
            
            private AstPredicateExpr _predicateExpr;
            
            internal AstSubSearchCondition1(ParserRuleContext ctx, AstPredicateExpr predicateExpr) : 
                    base(ctx)
            {
                _predicateExpr = predicateExpr;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPredicateExpr PredicateExpr
            {
                get
                {
                    return _predicateExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSubSearchCondition(this);
            }
        }
        /// <summary>
        /// sub_search_condition : LR_BRACKET search_condition RR_BRACKET 
        /// </summary>
        public partial class AstSubSearchCondition2 : AstSubSearchCondition
        {
            
            private static string _ruleName1 = "sub_search_condition";
            
            private AstSearchCondition _searchCondition;
            
            internal AstSubSearchCondition2(ParserRuleContext ctx, AstSearchCondition searchCondition) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSubSearchCondition(this);
            }
        }
        

        
        internal AstSubSearchCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSubSearchCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstSubSearchCondition(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSubSearchCondition Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSubSearchCondition.AstSubSearchCondition1(ctx, list.Get<AstPredicateExpr>(0));
            }
            if ((index == 2))
            {
                return new AstSubSearchCondition.AstSubSearchCondition2(ctx, list.Get<AstSearchCondition>(0));
            }
            return null;
        }
        
        /// <summary>
        /// sub_search_condition : 
        ///    predicate_expr 
        /// </summary>
        public static AstSubSearchCondition SubSearchCondition(ParserRuleContext ctx, AstPredicateExpr predicateExpr)
        {
            AstSubSearchCondition.AstSubSearchCondition1 result = new AstSubSearchCondition.AstSubSearchCondition1(ctx, predicateExpr);
            return result;
        }
        
        /// <summary>
        /// sub_search_condition : 
        ///    ( search_condition ) 
        /// </summary>
        public static AstSubSearchCondition SubSearchCondition(ParserRuleContext ctx, AstSearchCondition searchCondition)
        {
            AstSubSearchCondition.AstSubSearchCondition2 result = new AstSubSearchCondition.AstSubSearchCondition2(ctx, searchCondition);
            return result;
        }
    }
    
    /// <summary>
    /// predicate_expr
    /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | freetext_predicate
    /// 	 | predicate_binary
    /// 	 | predicate_multi_assign
    /// 	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | predicate_tier
    /// 	 | predicate_not_in
    /// 	 | predicate_not_like
    /// 	 | expression  IS  null_notnull
    /// </summary>
    public abstract partial class AstPredicateExpr : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstComparisonOperator), false, false, "comparison_operator"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAllSomeAny), false, false, "all_some_any"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstNullNotnull), false, false, "null_notnull")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFreetextPredicate), false, false, "freetext_predicate")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstPredicateBinary), false, false, "predicate_binary")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstPredicateMultiAssign), false, false, "predicate_multi_assign")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstPredicateTier), false, false, "predicate_tier")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstPredicateNotIn), false, false, "predicate_not_in")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstPredicateNotLike), false, false, "predicate_not_like"))));
        
        private static string _ruleValue = @"EXISTS  LR_BRACKET  subquery  RR_BRACKET
 | freetext_predicate
 | predicate_binary
 | predicate_multi_assign
 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
 | predicate_tier
 | predicate_not_in
 | predicate_not_like
 | expression  IS  null_notnull
";
        
        private static string _ruleName = "predicate_expr";
        
        /// <summary>
        /// predicate_expr : EXISTS LR_BRACKET subquery RR_BRACKET 
        /// </summary>
        public partial class AstPredicateExpr1 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstSubquery _subquery;
            
            internal AstPredicateExpr1(ParserRuleContext ctx, AstSubquery subquery) : 
                    base(ctx)
            {
                _subquery = subquery;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : freetext_predicate 
        /// </summary>
        public partial class AstPredicateExpr2 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstFreetextPredicate _freetextPredicate;
            
            internal AstPredicateExpr2(ParserRuleContext ctx, AstFreetextPredicate freetextPredicate) : 
                    base(ctx)
            {
                _freetextPredicate = freetextPredicate;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFreetextPredicate FreetextPredicate
            {
                get
                {
                    return _freetextPredicate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_binary 
        /// </summary>
        public partial class AstPredicateExpr3 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstPredicateBinary _predicateBinary;
            
            internal AstPredicateExpr3(ParserRuleContext ctx, AstPredicateBinary predicateBinary) : 
                    base(ctx)
            {
                _predicateBinary = predicateBinary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPredicateBinary PredicateBinary
            {
                get
                {
                    return _predicateBinary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_multi_assign 
        /// </summary>
        public partial class AstPredicateExpr4 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstPredicateMultiAssign _predicateMultiAssign;
            
            internal AstPredicateExpr4(ParserRuleContext ctx, AstPredicateMultiAssign predicateMultiAssign) : 
                    base(ctx)
            {
                _predicateMultiAssign = predicateMultiAssign;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPredicateMultiAssign PredicateMultiAssign
            {
                get
                {
                    return _predicateMultiAssign;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : expression comparison_operator all_some_any LR_BRACKET subquery RR_BRACKET 
        /// </summary>
        public partial class AstPredicateExpr5 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstExpression _expression;
            
            private AstComparisonOperator _comparisonOperator;
            
            private AstAllSomeAny _allSomeAny;
            
            private AstSubquery _subquery;
            
            internal AstPredicateExpr5(ParserRuleContext ctx, AstExpression expression, AstComparisonOperator comparisonOperator, AstAllSomeAny allSomeAny, AstSubquery subquery) : 
                    base(ctx)
            {
                _expression = expression;
                _comparisonOperator = comparisonOperator;
                _allSomeAny = allSomeAny;
                _subquery = subquery;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstComparisonOperator ComparisonOperator
            {
                get
                {
                    return _comparisonOperator;
                }
            }
            
            public virtual AstAllSomeAny AllSomeAny
            {
                get
                {
                    return _allSomeAny;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_tier 
        /// </summary>
        public partial class AstPredicateExpr6 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstPredicateTier _predicateTier;
            
            internal AstPredicateExpr6(ParserRuleContext ctx, AstPredicateTier predicateTier) : 
                    base(ctx)
            {
                _predicateTier = predicateTier;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPredicateTier PredicateTier
            {
                get
                {
                    return _predicateTier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_not_in 
        /// </summary>
        public partial class AstPredicateExpr7 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstPredicateNotIn _predicateNotIn;
            
            internal AstPredicateExpr7(ParserRuleContext ctx, AstPredicateNotIn predicateNotIn) : 
                    base(ctx)
            {
                _predicateNotIn = predicateNotIn;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPredicateNotIn PredicateNotIn
            {
                get
                {
                    return _predicateNotIn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_not_like 
        /// </summary>
        public partial class AstPredicateExpr8 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstPredicateNotLike _predicateNotLike;
            
            internal AstPredicateExpr8(ParserRuleContext ctx, AstPredicateNotLike predicateNotLike) : 
                    base(ctx)
            {
                _predicateNotLike = predicateNotLike;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPredicateNotLike PredicateNotLike
            {
                get
                {
                    return _predicateNotLike;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : expression IS null_notnull 
        /// </summary>
        public partial class AstPredicateExpr9 : AstPredicateExpr
        {
            
            private static string _ruleName1 = "predicate_expr";
            
            private AstExpression _expression;
            
            private AstNullNotnull _nullNotnull;
            
            internal AstPredicateExpr9(ParserRuleContext ctx, AstExpression expression, AstNullNotnull nullNotnull) : 
                    base(ctx)
            {
                _expression = expression;
                _nullNotnull = nullNotnull;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstNullNotnull NullNotnull
            {
                get
                {
                    return _nullNotnull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        

        
        internal AstPredicateExpr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPredicateExpr(Position p) : 
                base(p)
        {
        }
        
        internal AstPredicateExpr(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPredicateExpr Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPredicateExpr.AstPredicateExpr1(ctx, list.Get<AstSubquery>(0));
            }
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr2(ctx, list.Get<AstFreetextPredicate>(0));
            }
            if ((index == 3))
            {
                return new AstPredicateExpr.AstPredicateExpr3(ctx, list.Get<AstPredicateBinary>(0));
            }
            if ((index == 4))
            {
                return new AstPredicateExpr.AstPredicateExpr4(ctx, list.Get<AstPredicateMultiAssign>(0));
            }
            if ((index == 5))
            {
                return new AstPredicateExpr.AstPredicateExpr5(ctx, list.Get<AstExpression>(0), list.Get<AstComparisonOperator>(1), list.Get<AstAllSomeAny>(2), list.Get<AstSubquery>(3));
            }
            if ((index == 6))
            {
                return new AstPredicateExpr.AstPredicateExpr6(ctx, list.Get<AstPredicateTier>(0));
            }
            if ((index == 7))
            {
                return new AstPredicateExpr.AstPredicateExpr7(ctx, list.Get<AstPredicateNotIn>(0));
            }
            if ((index == 8))
            {
                return new AstPredicateExpr.AstPredicateExpr8(ctx, list.Get<AstPredicateNotLike>(0));
            }
            if ((index == 9))
            {
                return new AstPredicateExpr.AstPredicateExpr9(ctx, list.Get<AstExpression>(0), list.Get<AstNullNotnull>(1));
            }
            return null;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    EXISTS ( subquery ) 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstSubquery subquery)
        {
            AstPredicateExpr.AstPredicateExpr1 result = new AstPredicateExpr.AstPredicateExpr1(ctx, subquery);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    freetext_predicate 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstFreetextPredicate freetextPredicate)
        {
            AstPredicateExpr.AstPredicateExpr2 result = new AstPredicateExpr.AstPredicateExpr2(ctx, freetextPredicate);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_binary 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateBinary predicateBinary)
        {
            AstPredicateExpr.AstPredicateExpr3 result = new AstPredicateExpr.AstPredicateExpr3(ctx, predicateBinary);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_multi_assign 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateMultiAssign predicateMultiAssign)
        {
            AstPredicateExpr.AstPredicateExpr4 result = new AstPredicateExpr.AstPredicateExpr4(ctx, predicateMultiAssign);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    expression comparison_operator all_some_any ( subquery ) 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstExpression expression, AstComparisonOperator comparisonOperator, AstAllSomeAny allSomeAny, AstSubquery subquery)
        {
            AstPredicateExpr.AstPredicateExpr5 result = new AstPredicateExpr.AstPredicateExpr5(ctx, expression, comparisonOperator, allSomeAny, subquery);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_tier 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateTier predicateTier)
        {
            AstPredicateExpr.AstPredicateExpr6 result = new AstPredicateExpr.AstPredicateExpr6(ctx, predicateTier);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_not_in 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateNotIn predicateNotIn)
        {
            AstPredicateExpr.AstPredicateExpr7 result = new AstPredicateExpr.AstPredicateExpr7(ctx, predicateNotIn);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_not_like 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateNotLike predicateNotLike)
        {
            AstPredicateExpr.AstPredicateExpr8 result = new AstPredicateExpr.AstPredicateExpr8(ctx, predicateNotLike);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    expression IS null_notnull 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstExpression expression, AstNullNotnull nullNotnull)
        {
            AstPredicateExpr.AstPredicateExpr9 result = new AstPredicateExpr.AstPredicateExpr9(ctx, expression, nullNotnull);
            return result;
        }
    }
    
    /// <summary>
    /// query_expression
    /// 	 : query_specification
    /// 	 | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  ALL?  right = query_expression)?
    /// 	 | query_specification  select_order_by_clause?  unions = sql_unions
    /// </summary>
    public abstract partial class AstQueryExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstQuerySpecification), false, false, "query_specification"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSelectOrderByClause), true, false, "select_order_by_clause"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSqlUnions), true, false, "sql_unions")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryExpression), false, false, "query_expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryExpression), false, false, "query_expression")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstQuerySpecification), false, false, "query_specification"))));
        
        private static string _ruleValue = "query_specification\r\n | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  " +
            "ALL?  right = query_expression)?\r\n | query_specification  select_order_by_clause" +
            "?  unions = sql_unions\r\n";
        
        private static string _ruleName = "query_expression";
        
        /// <summary>
        /// query_expression : query_specification 
        /// </summary>
        public partial class AstQueryExpression1 : AstQueryExpression
        {
            
            private static string _ruleName1 = "query_expression";
            
            private AstQuerySpecification _querySpecification;
            
            internal AstQueryExpression1(ParserRuleContext ctx, AstQuerySpecification querySpecification) : 
                    base(ctx)
            {
                _querySpecification = querySpecification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQuerySpecification QuerySpecification
            {
                get
                {
                    return _querySpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        /// <summary>
        /// query_expression : LR_BRACKET left=query_expression RR_BRACKET UNION ALL? right=query_expression 
        /// </summary>
        public partial class AstQueryExpression2 : AstQueryExpression
        {
            
            private static string _ruleName1 = "query_expression";
            
            private AstQueryExpression _left;
            
            private AstQueryExpression _right;
            
            internal AstQueryExpression2(ParserRuleContext ctx, AstQueryExpression left, AstQueryExpression right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueryExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstQueryExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        /// <summary>
        /// query_expression : query_specification select_order_by_clause? unions=sql_unions? 
        /// </summary>
        public partial class AstQueryExpression3 : AstQueryExpression
        {
            
            private static string _ruleName1 = "query_expression";
            
            private AstQuerySpecification _querySpecification;
            
            private AstSelectOrderByClause? _selectOrderByClause;
            
            private AstSqlUnions? _unions;
            
            internal AstQueryExpression3(ParserRuleContext ctx, AstQuerySpecification querySpecification, AstSelectOrderByClause? selectOrderByClause, AstSqlUnions? unions) : 
                    base(ctx)
            {
                _querySpecification = querySpecification;
                _selectOrderByClause = selectOrderByClause;
                _unions = unions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQuerySpecification QuerySpecification
            {
                get
                {
                    return _querySpecification;
                }
            }
            
            public virtual AstSelectOrderByClause? SelectOrderByClause
            {
                get
                {
                    return _selectOrderByClause;
                }
            }
            
            public virtual AstSqlUnions? Unions
            {
                get
                {
                    return _unions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        

        
        internal AstQueryExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueryExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstQueryExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstQueryExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstQueryExpression.AstQueryExpression1(ctx, list.Get<AstQuerySpecification>(0));
            }
            if ((index == 2))
            {
                return new AstQueryExpression.AstQueryExpression2(ctx, list.Get<AstQueryExpression>(0), list.Get<AstQueryExpression>(1));
            }
            if ((index == 3))
            {
                return new AstQueryExpression.AstQueryExpression3(ctx, list.Get<AstQuerySpecification>(0), list.Get<AstSelectOrderByClause?>(1), list.Get<AstSqlUnions?>(2));
            }
            return null;
        }
        
        /// <summary>
        /// query_expression : 
        ///    query_specification 
        /// </summary>
        public static AstQueryExpression QueryExpression(ParserRuleContext ctx, AstQuerySpecification querySpecification)
        {
            AstQueryExpression.AstQueryExpression1 result = new AstQueryExpression.AstQueryExpression1(ctx, querySpecification);
            return result;
        }
        
        /// <summary>
        /// query_expression : 
        ///    ( left=query_expression ) UNION ALL? right=query_expression 
        /// </summary>
        public static AstQueryExpression QueryExpression(ParserRuleContext ctx, AstQueryExpression left, AstQueryExpression right)
        {
            AstQueryExpression.AstQueryExpression2 result = new AstQueryExpression.AstQueryExpression2(ctx, left, right);
            return result;
        }
        
        /// <summary>
        /// query_expression : 
        ///    query_specification select_order_by_clause? unions=sql_unions? 
        /// </summary>
        public static AstQueryExpression QueryExpression(ParserRuleContext ctx, AstQuerySpecification querySpecification, AstSelectOrderByClause selectOrderByClause, AstSqlUnions unions)
        {
            AstQueryExpression.AstQueryExpression3 result = new AstQueryExpression.AstQueryExpression3(ctx, querySpecification, selectOrderByClause, unions);
            return result;
        }
    }
    
    /// <summary>
    /// sql_union_def
    /// 	 : query_specification
    /// 	 | LR_BRACKET  query_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstSqlUnionDef : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstQuerySpecification), false, false, "query_specification")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryExpression), false, false, "query_expression"))));
        
        private static string _ruleValue = "query_specification\r\n | LR_BRACKET  query_expression  RR_BRACKET\r\n";
        
        private static string _ruleName = "sql_union_def";
        
        /// <summary>
        /// sql_union_def : query_specification 
        /// </summary>
        public partial class AstSqlUnionDef1 : AstSqlUnionDef
        {
            
            private static string _ruleName1 = "sql_union_def";
            
            private AstQuerySpecification _querySpecification;
            
            internal AstSqlUnionDef1(ParserRuleContext ctx, AstQuerySpecification querySpecification) : 
                    base(ctx)
            {
                _querySpecification = querySpecification;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQuerySpecification QuerySpecification
            {
                get
                {
                    return _querySpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlUnionDef(this);
            }
        }
        /// <summary>
        /// sql_union_def : LR_BRACKET query_expression RR_BRACKET 
        /// </summary>
        public partial class AstSqlUnionDef2 : AstSqlUnionDef
        {
            
            private static string _ruleName1 = "sql_union_def";
            
            private AstQueryExpression _queryExpression;
            
            internal AstSqlUnionDef2(ParserRuleContext ctx, AstQueryExpression queryExpression) : 
                    base(ctx)
            {
                _queryExpression = queryExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueryExpression QueryExpression
            {
                get
                {
                    return _queryExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlUnionDef(this);
            }
        }
        

        
        internal AstSqlUnionDef(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlUnionDef(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlUnionDef(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSqlUnionDef Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSqlUnionDef.AstSqlUnionDef1(ctx, list.Get<AstQuerySpecification>(0));
            }
            if ((index == 2))
            {
                return new AstSqlUnionDef.AstSqlUnionDef2(ctx, list.Get<AstQueryExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// sql_union_def : 
        ///    query_specification 
        /// </summary>
        public static AstSqlUnionDef SqlUnionDef(ParserRuleContext ctx, AstQuerySpecification querySpecification)
        {
            AstSqlUnionDef.AstSqlUnionDef1 result = new AstSqlUnionDef.AstSqlUnionDef1(ctx, querySpecification);
            return result;
        }
        
        /// <summary>
        /// sql_union_def : 
        ///    ( query_expression ) 
        /// </summary>
        public static AstSqlUnionDef SqlUnionDef(ParserRuleContext ctx, AstQueryExpression queryExpression)
        {
            AstSqlUnionDef.AstSqlUnionDef2 result = new AstSqlUnionDef.AstSqlUnionDef2(ctx, queryExpression);
            return result;
        }
    }
    
    /// <summary>
    /// top_clause
    /// 	 : TOP  (top_percent | top_count)  (WITH  TIES)?
    /// </summary>
    public abstract partial class AstTopClause : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTopPercent), false, false, "top_percent")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstTopCount), false, false, "top_count"))));
        
        private static string _ruleValue = "TOP  (top_percent | top_count)  (WITH  TIES)?\r\n";
        
        private static string _ruleName = "top_clause";
        
        /// <summary>
        /// top_clause : TOP top_percent WITH TIES 
        /// </summary>
        public partial class AstTopClause1 : AstTopClause
        {
            
            private static string _ruleName1 = "top_clause";
            
            private AstTopPercent _topPercent;
            
            internal AstTopClause1(ParserRuleContext ctx, AstTopPercent topPercent) : 
                    base(ctx)
            {
                _topPercent = topPercent;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTopPercent TopPercent
            {
                get
                {
                    return _topPercent;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopClause(this);
            }
        }
        /// <summary>
        /// top_clause : TOP top_count WITH TIES 
        /// </summary>
        public partial class AstTopClause2 : AstTopClause
        {
            
            private static string _ruleName1 = "top_clause";
            
            private AstTopCount _topCount;
            
            internal AstTopClause2(ParserRuleContext ctx, AstTopCount topCount) : 
                    base(ctx)
            {
                _topCount = topCount;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTopCount TopCount
            {
                get
                {
                    return _topCount;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopClause(this);
            }
        }
        

        
        internal AstTopClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopClause(Position p) : 
                base(p)
        {
        }
        
        internal AstTopClause(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTopClause Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTopClause.AstTopClause1(ctx, list.Get<AstTopPercent>(0));
            }
            if ((index == 2))
            {
                return new AstTopClause.AstTopClause2(ctx, list.Get<AstTopCount>(0));
            }
            return null;
        }
        
        /// <summary>
        /// top_clause : 
        ///    TOP top_percent WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(ParserRuleContext ctx, AstTopPercent topPercent)
        {
            AstTopClause.AstTopClause1 result = new AstTopClause.AstTopClause1(ctx, topPercent);
            return result;
        }
        
        /// <summary>
        /// top_clause : 
        ///    TOP top_count WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(ParserRuleContext ctx, AstTopCount topCount)
        {
            AstTopClause.AstTopClause2 result = new AstTopClause.AstTopClause2(ctx, topCount);
            return result;
        }
    }
    
    /// <summary>
    /// top_percent
    /// 	 : percent_constant  PERCENT
    /// 	 | LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
    /// </summary>
    public abstract partial class AstTopPercent : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPercentConstant), false, false, "percent_constant")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "percent_constant  PERCENT\r\n | LR_BRACKET  topper_expression = expression  RR_BRAC" +
            "KET  PERCENT\r\n";
        
        private static string _ruleName = "top_percent";
        
        /// <summary>
        /// top_percent : percent_constant PERCENT 
        /// </summary>
        public partial class AstTopPercent1 : AstTopPercent
        {
            
            private static string _ruleName1 = "top_percent";
            
            private AstPercentConstant _percentConstant;
            
            internal AstTopPercent1(ParserRuleContext ctx, AstPercentConstant percentConstant) : 
                    base(ctx)
            {
                _percentConstant = percentConstant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPercentConstant PercentConstant
            {
                get
                {
                    return _percentConstant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopPercent(this);
            }
        }
        /// <summary>
        /// top_percent : LR_BRACKET topper_expression=expression RR_BRACKET PERCENT 
        /// </summary>
        public partial class AstTopPercent2 : AstTopPercent
        {
            
            private static string _ruleName1 = "top_percent";
            
            private AstExpression _topperExpression;
            
            internal AstTopPercent2(ParserRuleContext ctx, AstExpression topperExpression) : 
                    base(ctx)
            {
                _topperExpression = topperExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression TopperExpression
            {
                get
                {
                    return _topperExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopPercent(this);
            }
        }
        

        
        internal AstTopPercent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopPercent(Position p) : 
                base(p)
        {
        }
        
        internal AstTopPercent(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTopPercent Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTopPercent.AstTopPercent1(ctx, list.Get<AstPercentConstant>(0));
            }
            if ((index == 2))
            {
                return new AstTopPercent.AstTopPercent2(ctx, list.Get<AstExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// top_percent : 
        ///    percent_constant PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(ParserRuleContext ctx, AstPercentConstant percentConstant)
        {
            AstTopPercent.AstTopPercent1 result = new AstTopPercent.AstTopPercent1(ctx, percentConstant);
            return result;
        }
        
        /// <summary>
        /// top_percent : 
        ///    ( topper_expression=expression ) PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(ParserRuleContext ctx, AstExpression topperExpression)
        {
            AstTopPercent.AstTopPercent2 result = new AstTopPercent.AstTopPercent2(ctx, topperExpression);
            return result;
        }
    }
    
    /// <summary>
    /// percent_constant
    /// 	 : real
    /// 	 | float
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstPercentConstant : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstReal), false, false, "real")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFloat), false, false, "float")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "real\r\n | float\r\n | decimal\r\n";
        
        private static string _ruleName = "percent_constant";
        
        /// <summary>
        /// percent_constant : real 
        /// </summary>
        public partial class AstPercentConstant1 : AstPercentConstant
        {
            
            private static string _ruleName1 = "percent_constant";
            
            private AstReal _real;
            
            internal AstPercentConstant1(ParserRuleContext ctx, AstReal real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReal Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        /// <summary>
        /// percent_constant : float 
        /// </summary>
        public partial class AstPercentConstant2 : AstPercentConstant
        {
            
            private static string _ruleName1 = "percent_constant";
            
            private AstFloat _float;
            
            internal AstPercentConstant2(ParserRuleContext ctx, AstFloat @float) : 
                    base(ctx)
            {
                _float = @float;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFloat Float
            {
                get
                {
                    return _float;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        /// <summary>
        /// percent_constant : decimal 
        /// </summary>
        public partial class AstPercentConstant3 : AstPercentConstant
        {
            
            private static string _ruleName1 = "percent_constant";
            
            private AstDecimal _decimal;
            
            internal AstPercentConstant3(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        

        
        internal AstPercentConstant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPercentConstant(Position p) : 
                base(p)
        {
        }
        
        internal AstPercentConstant(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPercentConstant Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPercentConstant.AstPercentConstant1(ctx, list.Get<AstReal>(0));
            }
            if ((index == 2))
            {
                return new AstPercentConstant.AstPercentConstant2(ctx, list.Get<AstFloat>(0));
            }
            if ((index == 3))
            {
                return new AstPercentConstant.AstPercentConstant3(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    real 
        /// </summary>
        public static AstPercentConstant PercentConstant(ParserRuleContext ctx, AstReal real)
        {
            AstPercentConstant.AstPercentConstant1 result = new AstPercentConstant.AstPercentConstant1(ctx, real);
            return result;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    float 
        /// </summary>
        public static AstPercentConstant PercentConstant(ParserRuleContext ctx, AstFloat @float)
        {
            AstPercentConstant.AstPercentConstant2 result = new AstPercentConstant.AstPercentConstant2(ctx, @float);
            return result;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    decimal 
        /// </summary>
        public static AstPercentConstant PercentConstant(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstPercentConstant.AstPercentConstant3 result = new AstPercentConstant.AstPercentConstant3(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// top_count
    /// 	 : count_constant = decimal
    /// 	 | LR_BRACKET  topcount_expression = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstTopCount : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "count_constant = decimal\r\n | LR_BRACKET  topcount_expression = expression  RR_BRA" +
            "CKET\r\n";
        
        private static string _ruleName = "top_count";
        
        /// <summary>
        /// top_count : count_constant=decimal 
        /// </summary>
        public partial class AstTopCount1 : AstTopCount
        {
            
            private static string _ruleName1 = "top_count";
            
            private AstDecimal _countConstant;
            
            internal AstTopCount1(ParserRuleContext ctx, AstDecimal countConstant) : 
                    base(ctx)
            {
                _countConstant = countConstant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal CountConstant
            {
                get
                {
                    return _countConstant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopCount(this);
            }
        }
        /// <summary>
        /// top_count : LR_BRACKET topcount_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstTopCount2 : AstTopCount
        {
            
            private static string _ruleName1 = "top_count";
            
            private AstExpression _topcountExpression;
            
            internal AstTopCount2(ParserRuleContext ctx, AstExpression topcountExpression) : 
                    base(ctx)
            {
                _topcountExpression = topcountExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression TopcountExpression
            {
                get
                {
                    return _topcountExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopCount(this);
            }
        }
        

        
        internal AstTopCount(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopCount(Position p) : 
                base(p)
        {
        }
        
        internal AstTopCount(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTopCount Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTopCount.AstTopCount1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstTopCount.AstTopCount2(ctx, list.Get<AstExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// top_count : 
        ///    count_constant=decimal 
        /// </summary>
        public static AstTopCount TopCount(ParserRuleContext ctx, AstDecimal countConstant)
        {
            AstTopCount.AstTopCount1 result = new AstTopCount.AstTopCount1(ctx, countConstant);
            return result;
        }
        
        /// <summary>
        /// top_count : 
        ///    ( topcount_expression=expression ) 
        /// </summary>
        public static AstTopCount TopCount(ParserRuleContext ctx, AstExpression topcountExpression)
        {
            AstTopCount.AstTopCount2 result = new AstTopCount.AstTopCount2(ctx, topcountExpression);
            return result;
        }
    }
    
    /// <summary>
    /// for_clause
    /// 	 : FOR  BROWSE
    /// 	 | for_clause_xml_raw
    /// 	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
    /// 	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
    /// 	 | for_clause_json
    /// </summary>
    public abstract partial class AstForClause : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstXmlCommonDirectives), true, false, "xml_common_directives"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAbsentXsinil), true, false, "absent_xsinil")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstForClauseXmlRaw), false, false, "for_clause_xml_raw")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstXmlCommonDirectives), true, false, "xml_common_directives")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstForClauseJson), false, false, "for_clause_json"))));
        
        private static string _ruleValue = "FOR  BROWSE\r\n | for_clause_xml_raw\r\n | FOR  XML  EXPLICIT  xml_common_directives?" +
            "  (COMMA  XMLDATA)?\r\n | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  x" +
            "ml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?\r\n | for_clause_json\r\n";
        
        private static string _ruleName = "for_clause";
        
        /// <summary>
        /// for_clause : FOR BROWSE 
        /// </summary>
        public partial class AstForClause1 : AstForClause
        {
            
            private static string _ruleName1 = "for_clause";
            
            internal AstForClause1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : for_clause_xml_raw 
        /// </summary>
        public partial class AstForClause2 : AstForClause
        {
            
            private static string _ruleName1 = "for_clause";
            
            private AstForClauseXmlRaw _forClauseXmlRaw;
            
            internal AstForClause2(ParserRuleContext ctx, AstForClauseXmlRaw forClauseXmlRaw) : 
                    base(ctx)
            {
                _forClauseXmlRaw = forClauseXmlRaw;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstForClauseXmlRaw ForClauseXmlRaw
            {
                get
                {
                    return _forClauseXmlRaw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : FOR XML EXPLICIT xml_common_directives? COMMA XMLDATA 
        /// </summary>
        public partial class AstForClause3 : AstForClause
        {
            
            private static string _ruleName1 = "for_clause";
            
            private AstXmlCommonDirectives? _xmlCommonDirectives;
            
            internal AstForClause3(ParserRuleContext ctx, AstXmlCommonDirectives? xmlCommonDirectives) : 
                    base(ctx)
            {
                _xmlCommonDirectives = xmlCommonDirectives;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstXmlCommonDirectives? XmlCommonDirectives
            {
                get
                {
                    return _xmlCommonDirectives;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : FOR XML PATH LR_BRACKET stringtext RR_BRACKET xml_common_directives? COMMA ELEMENTS absent_xsinil? 
        /// </summary>
        public partial class AstForClause4 : AstForClause
        {
            
            private static string _ruleName1 = "for_clause";
            
            private AstStringtext _stringtext;
            
            private AstXmlCommonDirectives? _xmlCommonDirectives;
            
            private AstAbsentXsinil? _absentXsinil;
            
            internal AstForClause4(ParserRuleContext ctx, AstStringtext stringtext, AstXmlCommonDirectives? xmlCommonDirectives, AstAbsentXsinil? absentXsinil) : 
                    base(ctx)
            {
                _stringtext = stringtext;
                _xmlCommonDirectives = xmlCommonDirectives;
                _absentXsinil = absentXsinil;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstXmlCommonDirectives? XmlCommonDirectives
            {
                get
                {
                    return _xmlCommonDirectives;
                }
            }
            
            public virtual AstAbsentXsinil? AbsentXsinil
            {
                get
                {
                    return _absentXsinil;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : for_clause_json 
        /// </summary>
        public partial class AstForClause5 : AstForClause
        {
            
            private static string _ruleName1 = "for_clause";
            
            private AstForClauseJson _forClauseJson;
            
            internal AstForClause5(ParserRuleContext ctx, AstForClauseJson forClauseJson) : 
                    base(ctx)
            {
                _forClauseJson = forClauseJson;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstForClauseJson ForClauseJson
            {
                get
                {
                    return _forClauseJson;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        

        
        internal AstForClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstForClause(Position p) : 
                base(p)
        {
        }
        
        internal AstForClause(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstForClause Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstForClause.AstForClause1(ctx);
            }
            if ((index == 2))
            {
                return new AstForClause.AstForClause2(ctx, list.Get<AstForClauseXmlRaw>(0));
            }
            if ((index == 3))
            {
                return new AstForClause.AstForClause3(ctx, list.Get<AstXmlCommonDirectives?>(0));
            }
            if ((index == 4))
            {
                return new AstForClause.AstForClause4(ctx, list.Get<AstStringtext>(0), list.Get<AstXmlCommonDirectives?>(1), list.Get<AstAbsentXsinil?>(2));
            }
            if ((index == 5))
            {
                return new AstForClause.AstForClause5(ctx, list.Get<AstForClauseJson>(0));
            }
            return null;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR BROWSE 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx)
        {
            AstForClause.AstForClause1 result = new AstForClause.AstForClause1(ctx);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    for_clause_xml_raw 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstForClauseXmlRaw forClauseXmlRaw)
        {
            AstForClause.AstForClause2 result = new AstForClause.AstForClause2(ctx, forClauseXmlRaw);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR XML EXPLICIT xml_common_directives? , XMLDATA 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstXmlCommonDirectives xmlCommonDirectives)
        {
            AstForClause.AstForClause3 result = new AstForClause.AstForClause3(ctx, xmlCommonDirectives);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR XML PATH ( stringtext ) xml_common_directives? , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstStringtext stringtext, AstXmlCommonDirectives xmlCommonDirectives, AstAbsentXsinil absentXsinil)
        {
            AstForClause.AstForClause4 result = new AstForClause.AstForClause4(ctx, stringtext, xmlCommonDirectives, absentXsinil);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    for_clause_json 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstForClauseJson forClauseJson)
        {
            AstForClause.AstForClause5 result = new AstForClause.AstForClause5(ctx, forClauseJson);
            return result;
        }
    }
    
    /// <summary>
    /// xml_common_directive
    /// 	 : BINARY_KEYWORD  BASE64
    /// 	 | TYPE
    /// 	 | ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstXmlCommonDirective : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "BINARY_KEYWORD  BASE64\r\n | TYPE\r\n | ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET" +
            ")?\r\n";
        
        private static string _ruleName = "xml_common_directive";
        
        /// <summary>
        /// xml_common_directive : BINARY_KEYWORD BASE64 
        /// </summary>
        public partial class AstXmlCommonDirective1 : AstXmlCommonDirective
        {
            
            private static string _ruleName1 = "xml_common_directive";
            
            internal AstXmlCommonDirective1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        /// <summary>
        /// xml_common_directive : TYPE 
        /// </summary>
        public partial class AstXmlCommonDirective2 : AstXmlCommonDirective
        {
            
            private static string _ruleName1 = "xml_common_directive";
            
            internal AstXmlCommonDirective2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        /// <summary>
        /// xml_common_directive : ROOTWORD LR_BRACKET stringtext RR_BRACKET 
        /// </summary>
        public partial class AstXmlCommonDirective3 : AstXmlCommonDirective
        {
            
            private static string _ruleName1 = "xml_common_directive";
            
            private AstStringtext _stringtext;
            
            internal AstXmlCommonDirective3(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        

        
        internal AstXmlCommonDirective(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlCommonDirective(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlCommonDirective(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstXmlCommonDirective Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstXmlCommonDirective.AstXmlCommonDirective1(ctx);
            }
            if ((index == 2))
            {
                return new AstXmlCommonDirective.AstXmlCommonDirective2(ctx);
            }
            if ((index == 3))
            {
                return new AstXmlCommonDirective.AstXmlCommonDirective3(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// xml_common_directive : 
        ///    BINARY_KEYWORD BASE64 
        /// </summary>
        public static AstXmlCommonDirective XmlCommonDirective(ParserRuleContext ctx)
        {
            AstXmlCommonDirective.AstXmlCommonDirective1 result = new AstXmlCommonDirective.AstXmlCommonDirective1(ctx);
            return result;
        }
        
        /// <summary>
        /// xml_common_directive : 
        ///    ROOTWORD ( stringtext ) 
        /// </summary>
        public static AstXmlCommonDirective XmlCommonDirective(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstXmlCommonDirective.AstXmlCommonDirective3 result = new AstXmlCommonDirective.AstXmlCommonDirective3(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// clause_json_info
    /// 	 : ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET)
    /// 	 | INCLUDE_NULL_VALUES
    /// 	 | WITHOUT_ARRAY_WRAPPER
    /// </summary>
    public abstract partial class AstClauseJsonInfo : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET)\r\n | INCLUDE_NULL_VALUES\r\n | WITHOU" +
            "T_ARRAY_WRAPPER\r\n";
        
        private static string _ruleName = "clause_json_info";
        
        /// <summary>
        /// clause_json_info : ROOTWORD LR_BRACKET stringtext RR_BRACKET 
        /// </summary>
        public partial class AstClauseJsonInfo1 : AstClauseJsonInfo
        {
            
            private static string _ruleName1 = "clause_json_info";
            
            private AstStringtext _stringtext;
            
            internal AstClauseJsonInfo1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        /// <summary>
        /// clause_json_info : INCLUDE_NULL_VALUES 
        /// </summary>
        public partial class AstClauseJsonInfo2 : AstClauseJsonInfo
        {
            
            private static string _ruleName1 = "clause_json_info";
            
            internal AstClauseJsonInfo2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        /// <summary>
        /// clause_json_info : WITHOUT_ARRAY_WRAPPER 
        /// </summary>
        public partial class AstClauseJsonInfo3 : AstClauseJsonInfo
        {
            
            private static string _ruleName1 = "clause_json_info";
            
            internal AstClauseJsonInfo3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        

        
        internal AstClauseJsonInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClauseJsonInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstClauseJsonInfo(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstClauseJsonInfo Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstClauseJsonInfo.AstClauseJsonInfo1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstClauseJsonInfo.AstClauseJsonInfo2(ctx);
            }
            if ((index == 3))
            {
                return new AstClauseJsonInfo.AstClauseJsonInfo3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// clause_json_info : 
        ///    ROOTWORD ( stringtext ) 
        /// </summary>
        public static AstClauseJsonInfo ClauseJsonInfo(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstClauseJsonInfo.AstClauseJsonInfo1 result = new AstClauseJsonInfo.AstClauseJsonInfo1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// clause_json_info : 
        ///    INCLUDE_NULL_VALUES 
        /// </summary>
        public static AstClauseJsonInfo ClauseJsonInfo(ParserRuleContext ctx)
        {
            AstClauseJsonInfo.AstClauseJsonInfo2 result = new AstClauseJsonInfo.AstClauseJsonInfo2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// order_by_expression
    /// 	 : order_by = expression  (ascending = ASC | descending = DESC)?
    /// </summary>
    public abstract partial class AstOrderByExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "order_by = expression  (ascending = ASC | descending = DESC)?\r\n";
        
        private static string _ruleName = "order_by_expression";
        
        /// <summary>
        /// order_by_expression : order_by=expression ascending=ASC 
        /// </summary>
        public partial class AstOrderByExpression1 : AstOrderByExpression
        {
            
            private static string _ruleName1 = "order_by_expression";
            
            private AstExpression _orderBy;
            
            internal AstOrderByExpression1(ParserRuleContext ctx, AstExpression orderBy) : 
                    base(ctx)
            {
                _orderBy = orderBy;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression OrderBy
            {
                get
                {
                    return _orderBy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOrderByExpression(this);
            }
        }
        /// <summary>
        /// order_by_expression : order_by=expression descending=DESC 
        /// </summary>
        public partial class AstOrderByExpression2 : AstOrderByExpression
        {
            
            private static string _ruleName1 = "order_by_expression";
            
            private AstExpression _orderBy;
            
            internal AstOrderByExpression2(ParserRuleContext ctx, AstExpression orderBy) : 
                    base(ctx)
            {
                _orderBy = orderBy;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression OrderBy
            {
                get
                {
                    return _orderBy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOrderByExpression(this);
            }
        }
        

        
        internal AstOrderByExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOrderByExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstOrderByExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstOrderByExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstOrderByExpression.AstOrderByExpression1(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 2))
            {
                return new AstOrderByExpression.AstOrderByExpression2(ctx, list.Get<AstExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// order_by_expression : 
        ///    order_by=expression ascending=ASC 
        /// </summary>
        public static AstOrderByExpression OrderByExpression(ParserRuleContext ctx, AstExpression orderBy)
        {
            AstOrderByExpression.AstOrderByExpression1 result = new AstOrderByExpression.AstOrderByExpression1(ctx, orderBy);
            return result;
        }
    }
    
    /// <summary>
    /// grouping_sets_item
    /// 	 : grouping_sets_list
    /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
    /// </summary>
    public abstract partial class AstGroupingSetsItem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstGroupingSetsList), false, false, "grouping_sets_list")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstGroupingSetsList), true, false, "grouping_sets_list"))));
        
        private static string _ruleValue = "grouping_sets_list\r\n | LR_BRACKET  grouping_sets_list?  RR_BRACKET\r\n";
        
        private static string _ruleName = "grouping_sets_item";
        
        /// <summary>
        /// grouping_sets_item : grouping_sets_list 
        /// </summary>
        public partial class AstGroupingSetsItem1 : AstGroupingSetsItem
        {
            
            private static string _ruleName1 = "grouping_sets_item";
            
            private AstGroupingSetsList _groupingSetsList;
            
            internal AstGroupingSetsItem1(ParserRuleContext ctx, AstGroupingSetsList groupingSetsList) : 
                    base(ctx)
            {
                _groupingSetsList = groupingSetsList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGroupingSetsList GroupingSetsList
            {
                get
                {
                    return _groupingSetsList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGroupingSetsItem(this);
            }
        }
        /// <summary>
        /// grouping_sets_item : LR_BRACKET grouping_sets_list? RR_BRACKET 
        /// </summary>
        public partial class AstGroupingSetsItem2 : AstGroupingSetsItem
        {
            
            private static string _ruleName1 = "grouping_sets_item";
            
            private AstGroupingSetsList? _groupingSetsList;
            
            internal AstGroupingSetsItem2(ParserRuleContext ctx, AstGroupingSetsList? groupingSetsList) : 
                    base(ctx)
            {
                _groupingSetsList = groupingSetsList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstGroupingSetsList? GroupingSetsList
            {
                get
                {
                    return _groupingSetsList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGroupingSetsItem(this);
            }
        }
        

        
        internal AstGroupingSetsItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGroupingSetsItem(Position p) : 
                base(p)
        {
        }
        
        internal AstGroupingSetsItem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstGroupingSetsItem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstGroupingSetsItem.AstGroupingSetsItem1(ctx, list.Get<AstGroupingSetsList>(0));
            }
            if ((index == 2))
            {
                return new AstGroupingSetsItem.AstGroupingSetsItem2(ctx, list.Get<AstGroupingSetsList?>(0));
            }
            return null;
        }
        
        /// <summary>
        /// grouping_sets_item : 
        ///    grouping_sets_list 
        /// </summary>
        public static AstGroupingSetsItem GroupingSetsItem(ParserRuleContext ctx, AstGroupingSetsList groupingSetsList)
        {
            AstGroupingSetsItem.AstGroupingSetsItem1 result = new AstGroupingSetsItem.AstGroupingSetsItem1(ctx, groupingSetsList);
            return result;
        }
    }
    
    /// <summary>
    /// update_option
    /// 	 : FAST  number_rows = decimal
    /// 	 | MAXDOP  number_of_processors = decimal
    /// 	 | MAXRECURSION  number_recursion = decimal
    /// 	 | USE  PLAN  stringtext
    /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
    /// 	 | update_option_enum
    /// </summary>
    public abstract partial class AstUpdateOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOptimizeForArgs), false, false, "optimize_for_args")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdateOptionEnum), false, false, "update_option_enum"))));
        
        private static string _ruleValue = "FAST  number_rows = decimal\r\n | MAXDOP  number_of_processors = decimal\r\n | MAXREC" +
            "URSION  number_recursion = decimal\r\n | USE  PLAN  stringtext\r\n | OPTIMIZE  FOR  " +
            "LR_BRACKET  optimize_for_args  RR_BRACKET\r\n | update_option_enum\r\n";
        
        private static string _ruleName = "update_option";
        
        /// <summary>
        /// update_option : FAST number_rows=decimal 
        /// </summary>
        public partial class AstUpdateOption1 : AstUpdateOption
        {
            
            private static string _ruleName1 = "update_option";
            
            private AstDecimal _numberRows;
            
            internal AstUpdateOption1(ParserRuleContext ctx, AstDecimal numberRows) : 
                    base(ctx)
            {
                _numberRows = numberRows;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal NumberRows
            {
                get
                {
                    return _numberRows;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : MAXDOP number_of_processors=decimal 
        /// </summary>
        public partial class AstUpdateOption2 : AstUpdateOption
        {
            
            private static string _ruleName1 = "update_option";
            
            private AstDecimal _numberOfProcessors;
            
            internal AstUpdateOption2(ParserRuleContext ctx, AstDecimal numberOfProcessors) : 
                    base(ctx)
            {
                _numberOfProcessors = numberOfProcessors;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal NumberOfProcessors
            {
                get
                {
                    return _numberOfProcessors;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : MAXRECURSION number_recursion=decimal 
        /// </summary>
        public partial class AstUpdateOption3 : AstUpdateOption
        {
            
            private static string _ruleName1 = "update_option";
            
            private AstDecimal _numberRecursion;
            
            internal AstUpdateOption3(ParserRuleContext ctx, AstDecimal numberRecursion) : 
                    base(ctx)
            {
                _numberRecursion = numberRecursion;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal NumberRecursion
            {
                get
                {
                    return _numberRecursion;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : USE PLAN stringtext 
        /// </summary>
        public partial class AstUpdateOption4 : AstUpdateOption
        {
            
            private static string _ruleName1 = "update_option";
            
            private AstStringtext _stringtext;
            
            internal AstUpdateOption4(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : OPTIMIZE FOR LR_BRACKET optimize_for_args RR_BRACKET 
        /// </summary>
        public partial class AstUpdateOption5 : AstUpdateOption
        {
            
            private static string _ruleName1 = "update_option";
            
            private AstOptimizeForArgs _optimizeForArgs;
            
            internal AstUpdateOption5(ParserRuleContext ctx, AstOptimizeForArgs optimizeForArgs) : 
                    base(ctx)
            {
                _optimizeForArgs = optimizeForArgs;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOptimizeForArgs OptimizeForArgs
            {
                get
                {
                    return _optimizeForArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : update_option_enum 
        /// </summary>
        public partial class AstUpdateOption6 : AstUpdateOption
        {
            
            private static string _ruleName1 = "update_option";
            
            private AstUpdateOptionEnum _updateOptionEnum;
            
            internal AstUpdateOption6(ParserRuleContext ctx, AstUpdateOptionEnum updateOptionEnum) : 
                    base(ctx)
            {
                _updateOptionEnum = updateOptionEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUpdateOptionEnum UpdateOptionEnum
            {
                get
                {
                    return _updateOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        

        
        internal AstUpdateOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateOption(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUpdateOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUpdateOption.AstUpdateOption1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstUpdateOption.AstUpdateOption2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstUpdateOption.AstUpdateOption3(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 4))
            {
                return new AstUpdateOption.AstUpdateOption4(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 5))
            {
                return new AstUpdateOption.AstUpdateOption5(ctx, list.Get<AstOptimizeForArgs>(0));
            }
            if ((index == 6))
            {
                return new AstUpdateOption.AstUpdateOption6(ctx, list.Get<AstUpdateOptionEnum>(0));
            }
            return null;
        }
        
        /// <summary>
        /// update_option : 
        ///    FAST number_rows=decimal 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstDecimal numberRows)
        {
            AstUpdateOption.AstUpdateOption1 result = new AstUpdateOption.AstUpdateOption1(ctx, numberRows);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    USE PLAN stringtext 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstUpdateOption.AstUpdateOption4 result = new AstUpdateOption.AstUpdateOption4(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    OPTIMIZE FOR ( optimize_for_args ) 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstOptimizeForArgs optimizeForArgs)
        {
            AstUpdateOption.AstUpdateOption5 result = new AstUpdateOption.AstUpdateOption5(ctx, optimizeForArgs);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    update_option_enum 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstUpdateOptionEnum updateOptionEnum)
        {
            AstUpdateOption.AstUpdateOption6 result = new AstUpdateOption.AstUpdateOption6(ctx, updateOptionEnum);
            return result;
        }
    }
    
    /// <summary>
    /// asterisk
    /// 	 : star_asterisk
    /// 	 | table_asterisk
    /// 	 | updated_asterisk
    /// </summary>
    public abstract partial class AstAsterisk : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStarAsterisk), false, false, "star_asterisk")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableAsterisk), false, false, "table_asterisk")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstUpdatedAsterisk), false, false, "updated_asterisk"))));
        
        private static string _ruleValue = "star_asterisk\r\n | table_asterisk\r\n | updated_asterisk\r\n";
        
        private static string _ruleName = "asterisk";
        
        /// <summary>
        /// asterisk : star_asterisk 
        /// </summary>
        public partial class AstAsterisk1 : AstAsterisk
        {
            
            private static string _ruleName1 = "asterisk";
            
            private AstStarAsterisk _starAsterisk;
            
            internal AstAsterisk1(ParserRuleContext ctx, AstStarAsterisk starAsterisk) : 
                    base(ctx)
            {
                _starAsterisk = starAsterisk;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStarAsterisk StarAsterisk
            {
                get
                {
                    return _starAsterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        /// <summary>
        /// asterisk : table_asterisk 
        /// </summary>
        public partial class AstAsterisk2 : AstAsterisk
        {
            
            private static string _ruleName1 = "asterisk";
            
            private AstTableAsterisk _tableAsterisk;
            
            internal AstAsterisk2(ParserRuleContext ctx, AstTableAsterisk tableAsterisk) : 
                    base(ctx)
            {
                _tableAsterisk = tableAsterisk;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableAsterisk TableAsterisk
            {
                get
                {
                    return _tableAsterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        /// <summary>
        /// asterisk : updated_asterisk 
        /// </summary>
        public partial class AstAsterisk3 : AstAsterisk
        {
            
            private static string _ruleName1 = "asterisk";
            
            private AstUpdatedAsterisk _updatedAsterisk;
            
            internal AstAsterisk3(ParserRuleContext ctx, AstUpdatedAsterisk updatedAsterisk) : 
                    base(ctx)
            {
                _updatedAsterisk = updatedAsterisk;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUpdatedAsterisk UpdatedAsterisk
            {
                get
                {
                    return _updatedAsterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        

        
        internal AstAsterisk(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAsterisk(Position p) : 
                base(p)
        {
        }
        
        internal AstAsterisk(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAsterisk Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAsterisk.AstAsterisk1(ctx, list.Get<AstStarAsterisk>(0));
            }
            if ((index == 2))
            {
                return new AstAsterisk.AstAsterisk2(ctx, list.Get<AstTableAsterisk>(0));
            }
            if ((index == 3))
            {
                return new AstAsterisk.AstAsterisk3(ctx, list.Get<AstUpdatedAsterisk>(0));
            }
            return null;
        }
        
        /// <summary>
        /// asterisk : 
        ///    star_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(ParserRuleContext ctx, AstStarAsterisk starAsterisk)
        {
            AstAsterisk.AstAsterisk1 result = new AstAsterisk.AstAsterisk1(ctx, starAsterisk);
            return result;
        }
        
        /// <summary>
        /// asterisk : 
        ///    table_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(ParserRuleContext ctx, AstTableAsterisk tableAsterisk)
        {
            AstAsterisk.AstAsterisk2 result = new AstAsterisk.AstAsterisk2(ctx, tableAsterisk);
            return result;
        }
        
        /// <summary>
        /// asterisk : 
        ///    updated_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(ParserRuleContext ctx, AstUpdatedAsterisk updatedAsterisk)
        {
            AstAsterisk.AstAsterisk3 result = new AstAsterisk.AstAsterisk3(ctx, updatedAsterisk);
            return result;
        }
    }
    
    /// <summary>
    /// column_elem_target
    /// 	 : full_column_name
    /// 	 | DOLLAR  IDENTITY
    /// 	 | DOLLAR  ROWGUID
    /// 	 | NULL_
    /// </summary>
    public abstract partial class AstColumnElemTarget : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"))));
        
        private static string _ruleValue = "full_column_name\r\n | DOLLAR  IDENTITY\r\n | DOLLAR  ROWGUID\r\n | NULL_\r\n";
        
        private static string _ruleName = "column_elem_target";
        
        /// <summary>
        /// column_elem_target : full_column_name 
        /// </summary>
        public partial class AstColumnElemTarget1 : AstColumnElemTarget
        {
            
            private static string _ruleName1 = "column_elem_target";
            
            private AstFullColumnName _fullColumnName;
            
            internal AstColumnElemTarget1(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : DOLLAR IDENTITY 
        /// </summary>
        public partial class AstColumnElemTarget2 : AstColumnElemTarget
        {
            
            private static string _ruleName1 = "column_elem_target";
            
            internal AstColumnElemTarget2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : DOLLAR ROWGUID 
        /// </summary>
        public partial class AstColumnElemTarget3 : AstColumnElemTarget
        {
            
            private static string _ruleName1 = "column_elem_target";
            
            internal AstColumnElemTarget3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : NULL_ 
        /// </summary>
        public partial class AstColumnElemTarget4 : AstColumnElemTarget
        {
            
            private static string _ruleName1 = "column_elem_target";
            
            internal AstColumnElemTarget4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        

        
        internal AstColumnElemTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnElemTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnElemTarget(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstColumnElemTarget Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstColumnElemTarget.AstColumnElemTarget1(ctx, list.Get<AstFullColumnName>(0));
            }
            if ((index == 2))
            {
                return new AstColumnElemTarget.AstColumnElemTarget2(ctx);
            }
            if ((index == 3))
            {
                return new AstColumnElemTarget.AstColumnElemTarget3(ctx);
            }
            if ((index == 4))
            {
                return new AstColumnElemTarget.AstColumnElemTarget4(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// column_elem_target : 
        ///    full_column_name 
        /// </summary>
        public static AstColumnElemTarget ColumnElemTarget(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstColumnElemTarget.AstColumnElemTarget1 result = new AstColumnElemTarget.AstColumnElemTarget1(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// column_elem_target : 
        ///    $ IDENTITY 
        /// </summary>
        public static AstColumnElemTarget ColumnElemTarget(ParserRuleContext ctx)
        {
            AstColumnElemTarget.AstColumnElemTarget2 result = new AstColumnElemTarget.AstColumnElemTarget2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// udt_elem
    /// 	 : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias?
    /// 	 | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_alias?
    /// </summary>
    public abstract partial class AstUdtElem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstUdtColumnId), false, false, "udt_column_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstNonStaticAttrId), false, false, "non_static_attr_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUdtMethodArguments), false, false, "udt_method_arguments"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsColumnAlias), true, false, "as_column_alias")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstUdtColumnId), false, false, "udt_column_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStaticAttrId), false, false, "static_attr_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstUdtMethodArguments), true, false, "udt_method_arguments"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsColumnAlias), true, false, "as_column_alias"))));
        
        private static string _ruleValue = "udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias?\r\n " +
            "| udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_" +
            "alias?\r\n";
        
        private static string _ruleName = "udt_elem";
        
        /// <summary>
        /// udt_elem : udt_column_id DOT non_static_attr_id udt_method_arguments as_column_alias? 
        /// </summary>
        public partial class AstUdtElem1 : AstUdtElem
        {
            
            private static string _ruleName1 = "udt_elem";
            
            private AstUdtColumnId _udtColumnId;
            
            private AstNonStaticAttrId _nonStaticAttrId;
            
            private AstUdtMethodArguments _udtMethodArguments;
            
            private AstAsColumnAlias? _asColumnAlias;
            
            internal AstUdtElem1(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstNonStaticAttrId nonStaticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias? asColumnAlias) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _nonStaticAttrId = nonStaticAttrId;
                _udtMethodArguments = udtMethodArguments;
                _asColumnAlias = asColumnAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstNonStaticAttrId NonStaticAttrId
            {
                get
                {
                    return _nonStaticAttrId;
                }
            }
            
            public virtual AstUdtMethodArguments UdtMethodArguments
            {
                get
                {
                    return _udtMethodArguments;
                }
            }
            
            public virtual AstAsColumnAlias? AsColumnAlias
            {
                get
                {
                    return _asColumnAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUdtElem(this);
            }
        }
        /// <summary>
        /// udt_elem : udt_column_id DOUBLE_COLON static_attr_id udt_method_arguments? as_column_alias? 
        /// </summary>
        public partial class AstUdtElem2 : AstUdtElem
        {
            
            private static string _ruleName1 = "udt_elem";
            
            private AstUdtColumnId _udtColumnId;
            
            private AstStaticAttrId _staticAttrId;
            
            private AstUdtMethodArguments? _udtMethodArguments;
            
            private AstAsColumnAlias? _asColumnAlias;
            
            internal AstUdtElem2(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstStaticAttrId staticAttrId, AstUdtMethodArguments? udtMethodArguments, AstAsColumnAlias? asColumnAlias) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _staticAttrId = staticAttrId;
                _udtMethodArguments = udtMethodArguments;
                _asColumnAlias = asColumnAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstStaticAttrId StaticAttrId
            {
                get
                {
                    return _staticAttrId;
                }
            }
            
            public virtual AstUdtMethodArguments? UdtMethodArguments
            {
                get
                {
                    return _udtMethodArguments;
                }
            }
            
            public virtual AstAsColumnAlias? AsColumnAlias
            {
                get
                {
                    return _asColumnAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUdtElem(this);
            }
        }
        

        
        internal AstUdtElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUdtElem(Position p) : 
                base(p)
        {
        }
        
        internal AstUdtElem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUdtElem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUdtElem.AstUdtElem1(ctx, list.Get<AstUdtColumnId>(0), list.Get<AstNonStaticAttrId>(1), list.Get<AstUdtMethodArguments>(2), list.Get<AstAsColumnAlias?>(3));
            }
            if ((index == 2))
            {
                return new AstUdtElem.AstUdtElem2(ctx, list.Get<AstUdtColumnId>(0), list.Get<AstStaticAttrId>(1), list.Get<AstUdtMethodArguments?>(2), list.Get<AstAsColumnAlias?>(3));
            }
            return null;
        }
        
        /// <summary>
        /// udt_elem : 
        ///    udt_column_id . non_static_attr_id udt_method_arguments as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstNonStaticAttrId nonStaticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            AstUdtElem.AstUdtElem1 result = new AstUdtElem.AstUdtElem1(ctx, udtColumnId, nonStaticAttrId, udtMethodArguments, asColumnAlias);
            return result;
        }
        
        /// <summary>
        /// udt_elem : 
        ///    udt_column_id :: static_attr_id udt_method_arguments? as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstStaticAttrId staticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            AstUdtElem.AstUdtElem2 result = new AstUdtElem.AstUdtElem2(ctx, udtColumnId, staticAttrId, udtMethodArguments, asColumnAlias);
            return result;
        }
    }
    
    /// <summary>
    /// expression_elem
    /// 	 : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression
    /// 	 | expressionAs = expression  as_column_alias?
    /// </summary>
    public abstract partial class AstExpressionElem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnAlias), false, false, "column_alias"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsColumnAlias), true, false, "as_column_alias"))));
        
        private static string _ruleValue = "leftAlias = column_alias  eq = EQUAL  leftAssignment = expression\r\n | expressionA" +
            "s = expression  as_column_alias?\r\n";
        
        private static string _ruleName = "expression_elem";
        
        /// <summary>
        /// expression_elem : leftAlias=column_alias eq=EQUAL leftAssignment=expression 
        /// </summary>
        public partial class AstExpressionElem1 : AstExpressionElem
        {
            
            private static string _ruleName1 = "expression_elem";
            
            private AstColumnAlias _leftAlias;
            
            private AstExpression _leftAssignment;
            
            internal AstExpressionElem1(ParserRuleContext ctx, AstColumnAlias leftAlias, AstExpression leftAssignment) : 
                    base(ctx)
            {
                _leftAlias = leftAlias;
                _leftAssignment = leftAssignment;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnAlias Leftalias
            {
                get
                {
                    return _leftAlias;
                }
            }
            
            public virtual AstExpression Leftassignment
            {
                get
                {
                    return _leftAssignment;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionElem(this);
            }
        }
        /// <summary>
        /// expression_elem : expressionAs=expression as_column_alias? 
        /// </summary>
        public partial class AstExpressionElem2 : AstExpressionElem
        {
            
            private static string _ruleName1 = "expression_elem";
            
            private AstExpression _expressionAs;
            
            private AstAsColumnAlias? _asColumnAlias;
            
            internal AstExpressionElem2(ParserRuleContext ctx, AstExpression expressionAs, AstAsColumnAlias? asColumnAlias) : 
                    base(ctx)
            {
                _expressionAs = expressionAs;
                _asColumnAlias = asColumnAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expressionas
            {
                get
                {
                    return _expressionAs;
                }
            }
            
            public virtual AstAsColumnAlias? AsColumnAlias
            {
                get
                {
                    return _asColumnAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionElem(this);
            }
        }
        

        
        internal AstExpressionElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpressionElem(Position p) : 
                base(p)
        {
        }
        
        internal AstExpressionElem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExpressionElem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExpressionElem.AstExpressionElem1(ctx, list.Get<AstColumnAlias>(0), list.Get<AstExpression>(1));
            }
            if ((index == 2))
            {
                return new AstExpressionElem.AstExpressionElem2(ctx, list.Get<AstExpression>(0), list.Get<AstAsColumnAlias?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// expression_elem : 
        ///    leftAlias=column_alias eq=EQUAL leftAssignment=expression 
        /// </summary>
        public static AstExpressionElem ExpressionElem(ParserRuleContext ctx, AstColumnAlias leftAlias, AstExpression leftAssignment)
        {
            AstExpressionElem.AstExpressionElem1 result = new AstExpressionElem.AstExpressionElem1(ctx, leftAlias, leftAssignment);
            return result;
        }
        
        /// <summary>
        /// expression_elem : 
        ///    expressionAs=expression as_column_alias? 
        /// </summary>
        public static AstExpressionElem ExpressionElem(ParserRuleContext ctx, AstExpression expressionAs, AstAsColumnAlias asColumnAlias)
        {
            AstExpressionElem.AstExpressionElem2 result = new AstExpressionElem.AstExpressionElem2(ctx, expressionAs, asColumnAlias);
            return result;
        }
    }
    
    /// <summary>
    /// select_list_elem
    /// 	 : asterisk
    /// 	 | column_elem
    /// 	 | udt_elem
    /// 	 | expression_assign_elem
    /// 	 | expression_elem
    /// </summary>
    public abstract partial class AstSelectListElem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAsterisk), false, false, "asterisk")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnElem), false, false, "column_elem")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstUdtElem), false, false, "udt_elem")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionAssignElem), false, false, "expression_assign_elem")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionElem), false, false, "expression_elem"))));
        
        private static string _ruleValue = "asterisk\r\n | column_elem\r\n | udt_elem\r\n | expression_assign_elem\r\n | expression_e" +
            "lem\r\n";
        
        private static string _ruleName = "select_list_elem";
        
        /// <summary>
        /// select_list_elem : asterisk 
        /// </summary>
        public partial class AstSelectListElem1 : AstSelectListElem
        {
            
            private static string _ruleName1 = "select_list_elem";
            
            private AstAsterisk _asterisk;
            
            internal AstSelectListElem1(ParserRuleContext ctx, AstAsterisk asterisk) : 
                    base(ctx)
            {
                _asterisk = asterisk;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAsterisk Asterisk
            {
                get
                {
                    return _asterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : column_elem 
        /// </summary>
        public partial class AstSelectListElem2 : AstSelectListElem
        {
            
            private static string _ruleName1 = "select_list_elem";
            
            private AstColumnElem _columnElem;
            
            internal AstSelectListElem2(ParserRuleContext ctx, AstColumnElem columnElem) : 
                    base(ctx)
            {
                _columnElem = columnElem;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstColumnElem ColumnElem
            {
                get
                {
                    return _columnElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : udt_elem 
        /// </summary>
        public partial class AstSelectListElem3 : AstSelectListElem
        {
            
            private static string _ruleName1 = "select_list_elem";
            
            private AstUdtElem _udtElem;
            
            internal AstSelectListElem3(ParserRuleContext ctx, AstUdtElem udtElem) : 
                    base(ctx)
            {
                _udtElem = udtElem;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUdtElem UdtElem
            {
                get
                {
                    return _udtElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : expression_assign_elem 
        /// </summary>
        public partial class AstSelectListElem4 : AstSelectListElem
        {
            
            private static string _ruleName1 = "select_list_elem";
            
            private AstExpressionAssignElem _expressionAssignElem;
            
            internal AstSelectListElem4(ParserRuleContext ctx, AstExpressionAssignElem expressionAssignElem) : 
                    base(ctx)
            {
                _expressionAssignElem = expressionAssignElem;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressionAssignElem ExpressionAssignElem
            {
                get
                {
                    return _expressionAssignElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : expression_elem 
        /// </summary>
        public partial class AstSelectListElem5 : AstSelectListElem
        {
            
            private static string _ruleName1 = "select_list_elem";
            
            private AstExpressionElem _expressionElem;
            
            internal AstSelectListElem5(ParserRuleContext ctx, AstExpressionElem expressionElem) : 
                    base(ctx)
            {
                _expressionElem = expressionElem;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressionElem ExpressionElem
            {
                get
                {
                    return _expressionElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        

        
        internal AstSelectListElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSelectListElem(Position p) : 
                base(p)
        {
        }
        
        internal AstSelectListElem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSelectListElem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSelectListElem.AstSelectListElem1(ctx, list.Get<AstAsterisk>(0));
            }
            if ((index == 2))
            {
                return new AstSelectListElem.AstSelectListElem2(ctx, list.Get<AstColumnElem>(0));
            }
            if ((index == 3))
            {
                return new AstSelectListElem.AstSelectListElem3(ctx, list.Get<AstUdtElem>(0));
            }
            if ((index == 4))
            {
                return new AstSelectListElem.AstSelectListElem4(ctx, list.Get<AstExpressionAssignElem>(0));
            }
            if ((index == 5))
            {
                return new AstSelectListElem.AstSelectListElem5(ctx, list.Get<AstExpressionElem>(0));
            }
            return null;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    asterisk 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstAsterisk asterisk)
        {
            AstSelectListElem.AstSelectListElem1 result = new AstSelectListElem.AstSelectListElem1(ctx, asterisk);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    column_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstColumnElem columnElem)
        {
            AstSelectListElem.AstSelectListElem2 result = new AstSelectListElem.AstSelectListElem2(ctx, columnElem);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    udt_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstUdtElem udtElem)
        {
            AstSelectListElem.AstSelectListElem3 result = new AstSelectListElem.AstSelectListElem3(ctx, udtElem);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    expression_assign_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstExpressionAssignElem expressionAssignElem)
        {
            AstSelectListElem.AstSelectListElem4 result = new AstSelectListElem.AstSelectListElem4(ctx, expressionAssignElem);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    expression_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstExpressionElem expressionElem)
        {
            AstSelectListElem.AstSelectListElem5 result = new AstSelectListElem.AstSelectListElem5(ctx, expressionElem);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item_joined
    /// 	 : table_source_item  joins = join_part
    /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  joins = join_part
    /// </summary>
    public abstract partial class AstTableSourceItemJoined : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableSourceItem), false, false, "table_source_item"), new Bb.Asts.AstRuleMatcherItem(typeof(IEnumerable<AstJoinPart>), true, true, "join_part")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableSourceItemJoined), false, false, "table_source_item_joined"), new Bb.Asts.AstRuleMatcherItem(typeof(IEnumerable<AstJoinPart>), true, true, "join_part"))));
        
        private static string _ruleValue = "table_source_item  joins = join_part\r\n | LR_BRACKET  table_source_item_joined  RR" +
            "_BRACKET  joins = join_part\r\n";
        
        private static string _ruleName = "table_source_item_joined";
        
        /// <summary>
        /// table_source_item_joined : table_source_item joins=join_part* 
        /// </summary>
        public partial class AstTableSourceItemJoined1 : AstTableSourceItemJoined
        {
            
            private static string _ruleName1 = "table_source_item_joined";
            
            private AstTableSourceItem _tableSourceItem;
            
            private IEnumerable<AstJoinPart>? _joins;
            
            internal AstTableSourceItemJoined1(ParserRuleContext ctx, AstTableSourceItem tableSourceItem, IEnumerable<AstJoinPart>? joins) : 
                    base(ctx)
            {
                _tableSourceItem = tableSourceItem;
                _joins = joins;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableSourceItem TableSourceItem
            {
                get
                {
                    return _tableSourceItem;
                }
            }
            
            public virtual IEnumerable<AstJoinPart>? Joins
            {
                get
                {
                    return _joins;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItemJoined(this);
            }
        }
        /// <summary>
        /// table_source_item_joined : LR_BRACKET table_source_item_joined RR_BRACKET joins=join_part* 
        /// </summary>
        public partial class AstTableSourceItemJoined2 : AstTableSourceItemJoined
        {
            
            private static string _ruleName1 = "table_source_item_joined";
            
            private AstTableSourceItemJoined _tableSourceItemJoined;
            
            private IEnumerable<AstJoinPart>? _joins;
            
            internal AstTableSourceItemJoined2(ParserRuleContext ctx, AstTableSourceItemJoined tableSourceItemJoined, IEnumerable<AstJoinPart>? joins) : 
                    base(ctx)
            {
                _tableSourceItemJoined = tableSourceItemJoined;
                _joins = joins;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableSourceItemJoined TableSourceItemJoined
            {
                get
                {
                    return _tableSourceItemJoined;
                }
            }
            
            public virtual IEnumerable<AstJoinPart>? Joins
            {
                get
                {
                    return _joins;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItemJoined(this);
            }
        }
        

        
        internal AstTableSourceItemJoined(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItemJoined(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSourceItemJoined(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableSourceItemJoined Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableSourceItemJoined.AstTableSourceItemJoined1(ctx, list.Get<AstTableSourceItem>(0), list.Get<IEnumerable<AstJoinPart>?>(1));
            }
            if ((index == 2))
            {
                return new AstTableSourceItemJoined.AstTableSourceItemJoined2(ctx, list.Get<AstTableSourceItemJoined>(0), list.Get<IEnumerable<AstJoinPart>?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// table_source_item_joined : 
        ///    table_source_item joins=join_part* 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(ParserRuleContext ctx, AstTableSourceItem tableSourceItem, IEnumerable<AstJoinPart> joins)
        {
            AstTableSourceItemJoined.AstTableSourceItemJoined1 result = new AstTableSourceItemJoined.AstTableSourceItemJoined1(ctx, tableSourceItem, joins);
            return result;
        }
        
        /// <summary>
        /// table_source_item_joined : 
        ///    ( table_source_item_joined ) joins=join_part* 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(ParserRuleContext ctx, AstTableSourceItemJoined tableSourceItemJoined, IEnumerable<AstJoinPart> joins)
        {
            AstTableSourceItemJoined.AstTableSourceItemJoined2 result = new AstTableSourceItemJoined.AstTableSourceItemJoined2(ctx, tableSourceItemJoined, joins);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item
    /// 	 : complete_table_ref  deprecated_table_hint  as_table_alias
    /// 	 | complete_table_ref  as_table_alias?  table_hints?
    /// 	 | rowset_function  as_table_alias?
    /// 	 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias_column?
    /// 	 | change_table  as_table_alias?
    /// 	 | nodes_method  as_table_alias_column?
    /// 	 | function_call  as_table_alias_column?
    /// 	 | loc_id = local_id  as_table_alias?
    /// 	 | loc_id_call = local_id  DOT  loc_fcall = function_call  as_table_alias_column?
    /// 	 | open_xml
    /// 	 | open_json
    /// 	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
    /// </summary>
    public abstract partial class AstTableSourceItem : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstCompleteTableRef), false, false, "complete_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDeprecatedTableHint), false, false, "deprecated_table_hint"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAlias), false, false, "as_table_alias")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCompleteTableRef), false, false, "complete_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAlias), true, false, "as_table_alias"), new Bb.Asts.AstRuleMatcherItem(typeof(AstTableHints), true, false, "table_hints")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFunctionCall), false, false, "function_call"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAliasColumn), true, false, "as_table_alias_column")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstRowsetFunction), false, false, "rowset_function"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAlias), true, false, "as_table_alias")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstDerivedTable), false, false, "derived_table"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAliasColumn), true, false, "as_table_alias_column")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstChangeTable), false, false, "change_table"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAlias), true, false, "as_table_alias")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstNodesMethod), false, false, "nodes_method"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAliasColumn), true, false, "as_table_alias_column")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstFunctionCall), false, false, "function_call"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAliasColumn), true, false, "as_table_alias_column")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAlias), true, false, "as_table_alias")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstFunctionCall), false, false, "function_call"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAsTableAlias), true, false, "as_table_alias")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstOpenXml), false, false, "open_xml")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstOpenJson), false, false, "open_json"))));
        
        private static string _ruleValue = @"complete_table_ref  deprecated_table_hint  as_table_alias
 | complete_table_ref  as_table_alias?  table_hints?
 | rowset_function  as_table_alias?
 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias_column?
 | change_table  as_table_alias?
 | nodes_method  as_table_alias_column?
 | function_call  as_table_alias_column?
 | loc_id = local_id  as_table_alias?
 | loc_id_call = local_id  DOT  loc_fcall = function_call  as_table_alias_column?
 | open_xml
 | open_json
 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
";
        
        private static string _ruleName = "table_source_item";
        
        /// <summary>
        /// table_source_item : complete_table_ref deprecated_table_hint as_table_alias 
        /// </summary>
        public partial class AstTableSourceItem1 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstCompleteTableRef _completeTableRef;
            
            private AstDeprecatedTableHint _deprecatedTableHint;
            
            private AstAsTableAlias _asTableAlias;
            
            internal AstTableSourceItem1(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstDeprecatedTableHint deprecatedTableHint, AstAsTableAlias asTableAlias) : 
                    base(ctx)
            {
                _completeTableRef = completeTableRef;
                _deprecatedTableHint = deprecatedTableHint;
                _asTableAlias = asTableAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCompleteTableRef CompleteTableRef
            {
                get
                {
                    return _completeTableRef;
                }
            }
            
            public virtual AstDeprecatedTableHint DeprecatedTableHint
            {
                get
                {
                    return _deprecatedTableHint;
                }
            }
            
            public virtual AstAsTableAlias AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : complete_table_ref as_table_alias? table_hints? 
        /// </summary>
        public partial class AstTableSourceItem2 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstCompleteTableRef _completeTableRef;
            
            private AstAsTableAlias? _asTableAlias;
            
            private AstTableHints? _tableHints;
            
            internal AstTableSourceItem2(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstAsTableAlias? asTableAlias, AstTableHints? tableHints) : 
                    base(ctx)
            {
                _completeTableRef = completeTableRef;
                _asTableAlias = asTableAlias;
                _tableHints = tableHints;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCompleteTableRef CompleteTableRef
            {
                get
                {
                    return _completeTableRef;
                }
            }
            
            public virtual AstAsTableAlias? AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public virtual AstTableHints? TableHints
            {
                get
                {
                    return _tableHints;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : rowset_function as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem3 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstRowsetFunction _rowsetFunction;
            
            private AstAsTableAlias? _asTableAlias;
            
            internal AstTableSourceItem3(ParserRuleContext ctx, AstRowsetFunction rowsetFunction, AstAsTableAlias? asTableAlias) : 
                    base(ctx)
            {
                _rowsetFunction = rowsetFunction;
                _asTableAlias = asTableAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRowsetFunction RowsetFunction
            {
                get
                {
                    return _rowsetFunction;
                }
            }
            
            public virtual AstAsTableAlias? AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : LR_BRACKET derived_table RR_BRACKET as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem4 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstDerivedTable _derivedTable;
            
            private AstAsTableAliasColumn? _asTableAliasColumn;
            
            internal AstTableSourceItem4(ParserRuleContext ctx, AstDerivedTable derivedTable, AstAsTableAliasColumn? asTableAliasColumn) : 
                    base(ctx)
            {
                _derivedTable = derivedTable;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDerivedTable DerivedTable
            {
                get
                {
                    return _derivedTable;
                }
            }
            
            public virtual AstAsTableAliasColumn? AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : change_table as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem5 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstChangeTable _changeTable;
            
            private AstAsTableAlias? _asTableAlias;
            
            internal AstTableSourceItem5(ParserRuleContext ctx, AstChangeTable changeTable, AstAsTableAlias? asTableAlias) : 
                    base(ctx)
            {
                _changeTable = changeTable;
                _asTableAlias = asTableAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstChangeTable ChangeTable
            {
                get
                {
                    return _changeTable;
                }
            }
            
            public virtual AstAsTableAlias? AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : nodes_method as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem6 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstNodesMethod _nodesMethod;
            
            private AstAsTableAliasColumn? _asTableAliasColumn;
            
            internal AstTableSourceItem6(ParserRuleContext ctx, AstNodesMethod nodesMethod, AstAsTableAliasColumn? asTableAliasColumn) : 
                    base(ctx)
            {
                _nodesMethod = nodesMethod;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstNodesMethod NodesMethod
            {
                get
                {
                    return _nodesMethod;
                }
            }
            
            public virtual AstAsTableAliasColumn? AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : function_call as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem7 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstFunctionCall _functionCall;
            
            private AstAsTableAliasColumn? _asTableAliasColumn;
            
            internal AstTableSourceItem7(ParserRuleContext ctx, AstFunctionCall functionCall, AstAsTableAliasColumn? asTableAliasColumn) : 
                    base(ctx)
            {
                _functionCall = functionCall;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public virtual AstAsTableAliasColumn? AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : loc_id=local_id as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem8 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstLocalId _locId;
            
            private AstAsTableAlias? _asTableAlias;
            
            internal AstTableSourceItem8(ParserRuleContext ctx, AstLocalId locId, AstAsTableAlias? asTableAlias) : 
                    base(ctx)
            {
                _locId = locId;
                _asTableAlias = asTableAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocId
            {
                get
                {
                    return _locId;
                }
            }
            
            public virtual AstAsTableAlias? AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : loc_id_call=local_id DOT loc_fcall=function_call as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem9 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstLocalId _locIdCall;
            
            private AstFunctionCall _locFcall;
            
            private AstAsTableAliasColumn? _asTableAliasColumn;
            
            internal AstTableSourceItem9(ParserRuleContext ctx, AstLocalId locIdCall, AstFunctionCall locFcall, AstAsTableAliasColumn? asTableAliasColumn) : 
                    base(ctx)
            {
                _locIdCall = locIdCall;
                _locFcall = locFcall;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocIdCall
            {
                get
                {
                    return _locIdCall;
                }
            }
            
            public virtual AstFunctionCall LocFcall
            {
                get
                {
                    return _locFcall;
                }
            }
            
            public virtual AstAsTableAliasColumn? AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : open_xml 
        /// </summary>
        public partial class AstTableSourceItem10 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstOpenXml _openXml;
            
            internal AstTableSourceItem10(ParserRuleContext ctx, AstOpenXml openXml) : 
                    base(ctx)
            {
                _openXml = openXml;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOpenXml OpenXml
            {
                get
                {
                    return _openXml;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : open_json 
        /// </summary>
        public partial class AstTableSourceItem11 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstOpenJson _openJson;
            
            internal AstTableSourceItem11(ParserRuleContext ctx, AstOpenJson openJson) : 
                    base(ctx)
            {
                _openJson = openJson;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOpenJson OpenJson
            {
                get
                {
                    return _openJson;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : DOUBLE_COLON oldstyle_fcall=function_call as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem12 : AstTableSourceItem
        {
            
            private static string _ruleName1 = "table_source_item";
            
            private AstFunctionCall _oldstyleFcall;
            
            private AstAsTableAlias? _asTableAlias;
            
            internal AstTableSourceItem12(ParserRuleContext ctx, AstFunctionCall oldstyleFcall, AstAsTableAlias? asTableAlias) : 
                    base(ctx)
            {
                _oldstyleFcall = oldstyleFcall;
                _asTableAlias = asTableAlias;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFunctionCall OldstyleFcall
            {
                get
                {
                    return _oldstyleFcall;
                }
            }
            
            public virtual AstAsTableAlias? AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        

        
        internal AstTableSourceItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItem(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSourceItem(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableSourceItem Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableSourceItem.AstTableSourceItem1(ctx, list.Get<AstCompleteTableRef>(0), list.Get<AstDeprecatedTableHint>(1), list.Get<AstAsTableAlias>(2));
            }
            if ((index == 2))
            {
                return new AstTableSourceItem.AstTableSourceItem2(ctx, list.Get<AstCompleteTableRef>(0), list.Get<AstAsTableAlias?>(1), list.Get<AstTableHints?>(2));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem3(ctx, list.Get<AstRowsetFunction>(0), list.Get<AstAsTableAlias?>(1));
            }
            if ((index == 4))
            {
                return new AstTableSourceItem.AstTableSourceItem4(ctx, list.Get<AstDerivedTable>(0), list.Get<AstAsTableAliasColumn?>(1));
            }
            if ((index == 5))
            {
                return new AstTableSourceItem.AstTableSourceItem5(ctx, list.Get<AstChangeTable>(0), list.Get<AstAsTableAlias?>(1));
            }
            if ((index == 6))
            {
                return new AstTableSourceItem.AstTableSourceItem6(ctx, list.Get<AstNodesMethod>(0), list.Get<AstAsTableAliasColumn?>(1));
            }
            if ((index == 7))
            {
                return new AstTableSourceItem.AstTableSourceItem7(ctx, list.Get<AstFunctionCall>(0), list.Get<AstAsTableAliasColumn?>(1));
            }
            if ((index == 8))
            {
                return new AstTableSourceItem.AstTableSourceItem8(ctx, list.Get<AstLocalId>(0), list.Get<AstAsTableAlias?>(1));
            }
            if ((index == 9))
            {
                return new AstTableSourceItem.AstTableSourceItem9(ctx, list.Get<AstLocalId>(0), list.Get<AstFunctionCall>(1), list.Get<AstAsTableAliasColumn?>(2));
            }
            if ((index == 10))
            {
                return new AstTableSourceItem.AstTableSourceItem10(ctx, list.Get<AstOpenXml>(0));
            }
            if ((index == 11))
            {
                return new AstTableSourceItem.AstTableSourceItem11(ctx, list.Get<AstOpenJson>(0));
            }
            if ((index == 12))
            {
                return new AstTableSourceItem.AstTableSourceItem12(ctx, list.Get<AstFunctionCall>(0), list.Get<AstAsTableAlias?>(1));
            }
            return null;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref deprecated_table_hint as_table_alias 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstDeprecatedTableHint deprecatedTableHint, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem1 result = new AstTableSourceItem.AstTableSourceItem1(ctx, completeTableRef, deprecatedTableHint, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref as_table_alias? table_hints? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstTableHints tableHints)
        {
            AstTableSourceItem.AstTableSourceItem2 result = new AstTableSourceItem.AstTableSourceItem2(ctx, completeTableRef, asTableAlias, tableHints);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    rowset_function as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstRowsetFunction rowsetFunction, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem3 result = new AstTableSourceItem.AstTableSourceItem3(ctx, rowsetFunction, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    ( derived_table ) as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstDerivedTable derivedTable, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem4 result = new AstTableSourceItem.AstTableSourceItem4(ctx, derivedTable, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    change_table as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstChangeTable changeTable, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem5 result = new AstTableSourceItem.AstTableSourceItem5(ctx, changeTable, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    nodes_method as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstNodesMethod nodesMethod, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem6 result = new AstTableSourceItem.AstTableSourceItem6(ctx, nodesMethod, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    function_call as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstFunctionCall functionCall, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem7 result = new AstTableSourceItem.AstTableSourceItem7(ctx, functionCall, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    loc_id=local_id as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstLocalId locId, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem8 result = new AstTableSourceItem.AstTableSourceItem8(ctx, locId, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    loc_id_call=local_id . loc_fcall=function_call as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstLocalId locIdCall, AstFunctionCall locFcall, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem9 result = new AstTableSourceItem.AstTableSourceItem9(ctx, locIdCall, locFcall, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    open_xml 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstOpenXml openXml)
        {
            AstTableSourceItem.AstTableSourceItem10 result = new AstTableSourceItem.AstTableSourceItem10(ctx, openXml);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    open_json 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstOpenJson openJson)
        {
            AstTableSourceItem.AstTableSourceItem11 result = new AstTableSourceItem.AstTableSourceItem11(ctx, openJson);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    :: oldstyle_fcall=function_call as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstFunctionCall oldstyleFcall, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem12 result = new AstTableSourceItem.AstTableSourceItem12(ctx, oldstyleFcall, asTableAlias);
            return result;
        }
    }
    
    /// <summary>
    /// table_hints
    /// 	 : with_table_hints
    /// 	 | deprecated_table_hint
    /// 	 | sybase_legacy_hints
    /// </summary>
    public abstract partial class AstTableHints : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWithTableHints), false, false, "with_table_hints")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDeprecatedTableHint), false, false, "deprecated_table_hint")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSybaseLegacyHints), false, false, "sybase_legacy_hints"))));
        
        private static string _ruleValue = "with_table_hints\r\n | deprecated_table_hint\r\n | sybase_legacy_hints\r\n";
        
        private static string _ruleName = "table_hints";
        
        /// <summary>
        /// table_hints : with_table_hints 
        /// </summary>
        public partial class AstTableHints1 : AstTableHints
        {
            
            private static string _ruleName1 = "table_hints";
            
            private AstWithTableHints _withTableHints;
            
            internal AstTableHints1(ParserRuleContext ctx, AstWithTableHints withTableHints) : 
                    base(ctx)
            {
                _withTableHints = withTableHints;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWithTableHints WithTableHints
            {
                get
                {
                    return _withTableHints;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHints(this);
            }
        }
        /// <summary>
        /// table_hints : deprecated_table_hint 
        /// </summary>
        public partial class AstTableHints2 : AstTableHints
        {
            
            private static string _ruleName1 = "table_hints";
            
            private AstDeprecatedTableHint _deprecatedTableHint;
            
            internal AstTableHints2(ParserRuleContext ctx, AstDeprecatedTableHint deprecatedTableHint) : 
                    base(ctx)
            {
                _deprecatedTableHint = deprecatedTableHint;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDeprecatedTableHint DeprecatedTableHint
            {
                get
                {
                    return _deprecatedTableHint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHints(this);
            }
        }
        /// <summary>
        /// table_hints : sybase_legacy_hints 
        /// </summary>
        public partial class AstTableHints3 : AstTableHints
        {
            
            private static string _ruleName1 = "table_hints";
            
            private AstSybaseLegacyHints _sybaseLegacyHints;
            
            internal AstTableHints3(ParserRuleContext ctx, AstSybaseLegacyHints sybaseLegacyHints) : 
                    base(ctx)
            {
                _sybaseLegacyHints = sybaseLegacyHints;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSybaseLegacyHints SybaseLegacyHints
            {
                get
                {
                    return _sybaseLegacyHints;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHints(this);
            }
        }
        

        
        internal AstTableHints(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableHints(Position p) : 
                base(p)
        {
        }
        
        internal AstTableHints(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableHints Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableHints.AstTableHints1(ctx, list.Get<AstWithTableHints>(0));
            }
            if ((index == 2))
            {
                return new AstTableHints.AstTableHints2(ctx, list.Get<AstDeprecatedTableHint>(0));
            }
            if ((index == 3))
            {
                return new AstTableHints.AstTableHints3(ctx, list.Get<AstSybaseLegacyHints>(0));
            }
            return null;
        }
        
        /// <summary>
        /// table_hints : 
        ///    with_table_hints 
        /// </summary>
        public static AstTableHints TableHints(ParserRuleContext ctx, AstWithTableHints withTableHints)
        {
            AstTableHints.AstTableHints1 result = new AstTableHints.AstTableHints1(ctx, withTableHints);
            return result;
        }
        
        /// <summary>
        /// table_hints : 
        ///    deprecated_table_hint 
        /// </summary>
        public static AstTableHints TableHints(ParserRuleContext ctx, AstDeprecatedTableHint deprecatedTableHint)
        {
            AstTableHints.AstTableHints2 result = new AstTableHints.AstTableHints2(ctx, deprecatedTableHint);
            return result;
        }
        
        /// <summary>
        /// table_hints : 
        ///    sybase_legacy_hints 
        /// </summary>
        public static AstTableHints TableHints(ParserRuleContext ctx, AstSybaseLegacyHints sybaseLegacyHints)
        {
            AstTableHints.AstTableHints3 result = new AstTableHints.AstTableHints3(ctx, sybaseLegacyHints);
            return result;
        }
    }
    
    /// <summary>
    /// change_table
    /// 	 : change_table_changes
    /// 	 | change_table_version
    /// </summary>
    public abstract partial class AstChangeTable : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstChangeTableChanges), false, false, "change_table_changes")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstChangeTableVersion), false, false, "change_table_version"))));
        
        private static string _ruleValue = "change_table_changes\r\n | change_table_version\r\n";
        
        private static string _ruleName = "change_table";
        
        /// <summary>
        /// change_table : change_table_changes 
        /// </summary>
        public partial class AstChangeTable1 : AstChangeTable
        {
            
            private static string _ruleName1 = "change_table";
            
            private AstChangeTableChanges _changeTableChanges;
            
            internal AstChangeTable1(ParserRuleContext ctx, AstChangeTableChanges changeTableChanges) : 
                    base(ctx)
            {
                _changeTableChanges = changeTableChanges;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstChangeTableChanges ChangeTableChanges
            {
                get
                {
                    return _changeTableChanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTable(this);
            }
        }
        /// <summary>
        /// change_table : change_table_version 
        /// </summary>
        public partial class AstChangeTable2 : AstChangeTable
        {
            
            private static string _ruleName1 = "change_table";
            
            private AstChangeTableVersion _changeTableVersion;
            
            internal AstChangeTable2(ParserRuleContext ctx, AstChangeTableVersion changeTableVersion) : 
                    base(ctx)
            {
                _changeTableVersion = changeTableVersion;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstChangeTableVersion ChangeTableVersion
            {
                get
                {
                    return _changeTableVersion;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTable(this);
            }
        }
        

        
        internal AstChangeTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTable(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTable(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstChangeTable Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstChangeTable.AstChangeTable1(ctx, list.Get<AstChangeTableChanges>(0));
            }
            if ((index == 2))
            {
                return new AstChangeTable.AstChangeTable2(ctx, list.Get<AstChangeTableVersion>(0));
            }
            return null;
        }
        
        /// <summary>
        /// change_table : 
        ///    change_table_changes 
        /// </summary>
        public static AstChangeTable ChangeTable(ParserRuleContext ctx, AstChangeTableChanges changeTableChanges)
        {
            AstChangeTable.AstChangeTable1 result = new AstChangeTable.AstChangeTable1(ctx, changeTableChanges);
            return result;
        }
        
        /// <summary>
        /// change_table : 
        ///    change_table_version 
        /// </summary>
        public static AstChangeTable ChangeTable(ParserRuleContext ctx, AstChangeTableVersion changeTableVersion)
        {
            AstChangeTable.AstChangeTable2 result = new AstChangeTable.AstChangeTable2(ctx, changeTableVersion);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_changes
    /// 	 : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET
    /// </summary>
    public abstract partial class AstChangeTableChanges : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalLocalId), false, false, "decimal_local_id")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"))));
        
        private static string _ruleValue = "CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_ref  COMMA  (NULL_ | d" +
            "ecimal_local_id)  RR_BRACKET\r\n";
        
        private static string _ruleName = "change_table_changes";
        
        /// <summary>
        /// change_table_changes : CHANGETABLE LR_BRACKET CHANGES changetable=full_table_ref COMMA NULL_ RR_BRACKET 
        /// </summary>
        public partial class AstChangeTableChanges1 : AstChangeTableChanges
        {
            
            private static string _ruleName1 = "change_table_changes";
            
            private AstFullTableRef _changetable;
            
            internal AstChangeTableChanges1(ParserRuleContext ctx, AstFullTableRef changetable) : 
                    base(ctx)
            {
                _changetable = changetable;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullTableRef Changetable
            {
                get
                {
                    return _changetable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTableChanges(this);
            }
        }
        /// <summary>
        /// change_table_changes : CHANGETABLE LR_BRACKET CHANGES changetable=full_table_ref COMMA decimal_local_id RR_BRACKET 
        /// </summary>
        public partial class AstChangeTableChanges2 : AstChangeTableChanges
        {
            
            private static string _ruleName1 = "change_table_changes";
            
            private AstFullTableRef _changetable;
            
            private AstDecimalLocalId _decimalLocalId;
            
            internal AstChangeTableChanges2(ParserRuleContext ctx, AstFullTableRef changetable, AstDecimalLocalId decimalLocalId) : 
                    base(ctx)
            {
                _changetable = changetable;
                _decimalLocalId = decimalLocalId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullTableRef Changetable
            {
                get
                {
                    return _changetable;
                }
            }
            
            public virtual AstDecimalLocalId DecimalLocalId
            {
                get
                {
                    return _decimalLocalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTableChanges(this);
            }
        }
        

        
        internal AstChangeTableChanges(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableChanges(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTableChanges(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstChangeTableChanges Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstChangeTableChanges.AstChangeTableChanges1(ctx, list.Get<AstFullTableRef>(0));
            }
            if ((index == 2))
            {
                return new AstChangeTableChanges.AstChangeTableChanges2(ctx, list.Get<AstFullTableRef>(0), list.Get<AstDecimalLocalId>(1));
            }
            return null;
        }
        
        /// <summary>
        /// change_table_changes : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , NULL_ ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(ParserRuleContext ctx, AstFullTableRef changetable)
        {
            AstChangeTableChanges.AstChangeTableChanges1 result = new AstChangeTableChanges.AstChangeTableChanges1(ctx, changetable);
            return result;
        }
        
        /// <summary>
        /// change_table_changes : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , decimal_local_id ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(ParserRuleContext ctx, AstFullTableRef changetable, AstDecimalLocalId decimalLocalId)
        {
            AstChangeTableChanges.AstChangeTableChanges2 result = new AstChangeTableChanges.AstChangeTableChanges2(ctx, changetable, decimalLocalId);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_version
    /// 	 : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET
    /// </summary>
    public partial class AstChangeTableVersion : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnNameList), false, false, "full_column_name_list"), new Bb.Asts.AstRuleMatcherItem(typeof(AstSelectList), false, false, "select_list"))));
        
        private AstFullTableRef _versiontable;
        
        private AstFullColumnNameList _pkColumns;
        
        private AstSelectList _pkValues;
        
        private static string _ruleValue = "CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_ref  COMMA  pk_column" +
            "s = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET\r\n";
        
        private static string _ruleName = "change_table_version";
        
        internal AstChangeTableVersion(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableVersion(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTableVersion(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstChangeTableVersion(ParserRuleContext ctx, AstFullTableRef versiontable, AstFullColumnNameList pkColumns, AstSelectList pkValues) : 
                base(ctx)
        {
            _versiontable = versiontable;
            _pkColumns = pkColumns;
            _pkValues = pkValues;
        }
        
        public virtual AstFullTableRef Versiontable
        {
            get
            {
                return _versiontable;
            }
        }
        
        public virtual AstFullColumnNameList PkColumns
        {
            get
            {
                return _pkColumns;
            }
        }
        
        public virtual AstSelectList PkValues
        {
            get
            {
                return _pkValues;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableVersion(this);
        }
        
        public static AstChangeTableVersion Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstChangeTableVersion(ctx, list.Get<AstFullTableRef>(0), list.Get<AstFullColumnNameList>(1), list.Get<AstSelectList>(2));
        }
        
        /// <summary>
        /// change_table_version : 
        ///    CHANGETABLE ( VERSION versiontable=full_table_ref , pk_columns=full_column_name_list , pk_values=select_list ) 
        /// </summary>
        public static AstChangeTableVersion ChangeTableVersion(ParserRuleContext ctx, AstFullTableRef versiontable, AstFullColumnNameList pkColumns, AstSelectList pkValues)
        {
            AstChangeTableVersion result = new AstChangeTableVersion(ctx, versiontable, pkColumns, pkValues);
            return result;
        }
    }
    
    /// <summary>
    /// join_part
    /// 	 : join_on
    /// 	 | cross_join
    /// 	 | apply_enum
    /// 	 | pivot_join
    /// 	 | unpivot_join
    /// </summary>
    public abstract partial class AstJoinPart : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstJoinOn), false, false, "join_on")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCrossJoin), false, false, "cross_join")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstApplyEnum), false, false, "apply_enum")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstPivotJoin), false, false, "pivot_join")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstUnpivotJoin), false, false, "unpivot_join"))));
        
        private static string _ruleValue = "join_on\r\n | cross_join\r\n | apply_enum\r\n | pivot_join\r\n | unpivot_join\r\n";
        
        private static string _ruleName = "join_part";
        
        /// <summary>
        /// join_part : join_on 
        /// </summary>
        public partial class AstJoinPart1 : AstJoinPart
        {
            
            private static string _ruleName1 = "join_part";
            
            private AstJoinOn _joinOn;
            
            internal AstJoinPart1(ParserRuleContext ctx, AstJoinOn joinOn) : 
                    base(ctx)
            {
                _joinOn = joinOn;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstJoinOn JoinOn
            {
                get
                {
                    return _joinOn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : cross_join 
        /// </summary>
        public partial class AstJoinPart2 : AstJoinPart
        {
            
            private static string _ruleName1 = "join_part";
            
            private AstCrossJoin _crossJoin;
            
            internal AstJoinPart2(ParserRuleContext ctx, AstCrossJoin crossJoin) : 
                    base(ctx)
            {
                _crossJoin = crossJoin;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCrossJoin CrossJoin
            {
                get
                {
                    return _crossJoin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : apply_enum 
        /// </summary>
        public partial class AstJoinPart3 : AstJoinPart
        {
            
            private static string _ruleName1 = "join_part";
            
            private AstApplyEnum _applyEnum;
            
            internal AstJoinPart3(ParserRuleContext ctx, AstApplyEnum applyEnum) : 
                    base(ctx)
            {
                _applyEnum = applyEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstApplyEnum ApplyEnum
            {
                get
                {
                    return _applyEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : pivot_join 
        /// </summary>
        public partial class AstJoinPart4 : AstJoinPart
        {
            
            private static string _ruleName1 = "join_part";
            
            private AstPivotJoin _pivotJoin;
            
            internal AstJoinPart4(ParserRuleContext ctx, AstPivotJoin pivotJoin) : 
                    base(ctx)
            {
                _pivotJoin = pivotJoin;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPivotJoin PivotJoin
            {
                get
                {
                    return _pivotJoin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : unpivot_join 
        /// </summary>
        public partial class AstJoinPart5 : AstJoinPart
        {
            
            private static string _ruleName1 = "join_part";
            
            private AstUnpivotJoin _unpivotJoin;
            
            internal AstJoinPart5(ParserRuleContext ctx, AstUnpivotJoin unpivotJoin) : 
                    base(ctx)
            {
                _unpivotJoin = unpivotJoin;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUnpivotJoin UnpivotJoin
            {
                get
                {
                    return _unpivotJoin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        

        
        internal AstJoinPart(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstJoinPart(Position p) : 
                base(p)
        {
        }
        
        internal AstJoinPart(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstJoinPart Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstJoinPart.AstJoinPart1(ctx, list.Get<AstJoinOn>(0));
            }
            if ((index == 2))
            {
                return new AstJoinPart.AstJoinPart2(ctx, list.Get<AstCrossJoin>(0));
            }
            if ((index == 3))
            {
                return new AstJoinPart.AstJoinPart3(ctx, list.Get<AstApplyEnum>(0));
            }
            if ((index == 4))
            {
                return new AstJoinPart.AstJoinPart4(ctx, list.Get<AstPivotJoin>(0));
            }
            if ((index == 5))
            {
                return new AstJoinPart.AstJoinPart5(ctx, list.Get<AstUnpivotJoin>(0));
            }
            return null;
        }
        
        /// <summary>
        /// join_part : 
        ///    join_on 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstJoinOn joinOn)
        {
            AstJoinPart.AstJoinPart1 result = new AstJoinPart.AstJoinPart1(ctx, joinOn);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    cross_join 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstCrossJoin crossJoin)
        {
            AstJoinPart.AstJoinPart2 result = new AstJoinPart.AstJoinPart2(ctx, crossJoin);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    apply_enum 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstApplyEnum applyEnum)
        {
            AstJoinPart.AstJoinPart3 result = new AstJoinPart.AstJoinPart3(ctx, applyEnum);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    pivot_join 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstPivotJoin pivotJoin)
        {
            AstJoinPart.AstJoinPart4 result = new AstJoinPart.AstJoinPart4(ctx, pivotJoin);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    unpivot_join 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstUnpivotJoin unpivotJoin)
        {
            AstJoinPart.AstJoinPart5 result = new AstJoinPart.AstJoinPart5(ctx, unpivotJoin);
            return result;
        }
    }
    
    /// <summary>
    /// rowset_function
    /// 	 : OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET
    /// 	 | OPENROWSET  LR_BRACKET  BULK  data_file = stringtext  COMMA  buk_extended_options  RR_BRACKET
    /// </summary>
    public abstract partial class AstRowsetFunction : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstBukExtendedOptions), false, false, "buk_extended_options"))));
        
        private static string _ruleValue = "OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stri" +
            "ngtext  COMMA  sql = stringtext  RR_BRACKET\r\n | OPENROWSET  LR_BRACKET  BULK  da" +
            "ta_file = stringtext  COMMA  buk_extended_options  RR_BRACKET\r\n";
        
        private static string _ruleName = "rowset_function";
        
        /// <summary>
        /// rowset_function : OPENROWSET LR_BRACKET providerName=stringtext COMMA connectionString=stringtext COMMA sql=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstRowsetFunction1 : AstRowsetFunction
        {
            
            private static string _ruleName1 = "rowset_function";
            
            private AstStringtext _providerName;
            
            private AstStringtext _connectionString;
            
            private AstStringtext _sql;
            
            internal AstRowsetFunction1(ParserRuleContext ctx, AstStringtext providerName, AstStringtext connectionString, AstStringtext sql) : 
                    base(ctx)
            {
                _providerName = providerName;
                _connectionString = connectionString;
                _sql = sql;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Providername
            {
                get
                {
                    return _providerName;
                }
            }
            
            public virtual AstStringtext Connectionstring
            {
                get
                {
                    return _connectionString;
                }
            }
            
            public virtual AstStringtext Sql
            {
                get
                {
                    return _sql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunction(this);
            }
        }
        /// <summary>
        /// rowset_function : OPENROWSET LR_BRACKET BULK data_file=stringtext COMMA buk_extended_options RR_BRACKET 
        /// </summary>
        public partial class AstRowsetFunction2 : AstRowsetFunction
        {
            
            private static string _ruleName1 = "rowset_function";
            
            private AstStringtext _dataFile;
            
            private AstBukExtendedOptions _bukExtendedOptions;
            
            internal AstRowsetFunction2(ParserRuleContext ctx, AstStringtext dataFile, AstBukExtendedOptions bukExtendedOptions) : 
                    base(ctx)
            {
                _dataFile = dataFile;
                _bukExtendedOptions = bukExtendedOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext DataFile
            {
                get
                {
                    return _dataFile;
                }
            }
            
            public virtual AstBukExtendedOptions BukExtendedOptions
            {
                get
                {
                    return _bukExtendedOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunction(this);
            }
        }
        

        
        internal AstRowsetFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRowsetFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstRowsetFunction(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRowsetFunction Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRowsetFunction.AstRowsetFunction1(ctx, list.Get<AstStringtext>(0), list.Get<AstStringtext>(1), list.Get<AstStringtext>(2));
            }
            if ((index == 2))
            {
                return new AstRowsetFunction.AstRowsetFunction2(ctx, list.Get<AstStringtext>(0), list.Get<AstBukExtendedOptions>(1));
            }
            return null;
        }
        
        /// <summary>
        /// rowset_function : 
        ///    OPENROWSET ( providerName=stringtext , connectionString=stringtext , sql=stringtext ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(ParserRuleContext ctx, AstStringtext providerName, AstStringtext connectionString, AstStringtext sql)
        {
            AstRowsetFunction.AstRowsetFunction1 result = new AstRowsetFunction.AstRowsetFunction1(ctx, providerName, connectionString, sql);
            return result;
        }
        
        /// <summary>
        /// rowset_function : 
        ///    OPENROWSET ( BULK data_file=stringtext , buk_extended_options ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(ParserRuleContext ctx, AstStringtext dataFile, AstBukExtendedOptions bukExtendedOptions)
        {
            AstRowsetFunction.AstRowsetFunction2 result = new AstRowsetFunction.AstRowsetFunction2(ctx, dataFile, bukExtendedOptions);
            return result;
        }
    }
    
    /// <summary>
    /// buk_extended_options
    /// 	 : bulk_options
    /// 	 | id_
    /// </summary>
    public abstract partial class AstBukExtendedOptions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstBulkOptions), false, false, "bulk_options")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_"))));
        
        private static string _ruleValue = "bulk_options\r\n | id_\r\n";
        
        private static string _ruleName = "buk_extended_options";
        
        /// <summary>
        /// buk_extended_options : bulk_options 
        /// </summary>
        public partial class AstBukExtendedOptions1 : AstBukExtendedOptions
        {
            
            private static string _ruleName1 = "buk_extended_options";
            
            private AstBulkOptions _bulkOptions;
            
            internal AstBukExtendedOptions1(ParserRuleContext ctx, AstBulkOptions bulkOptions) : 
                    base(ctx)
            {
                _bulkOptions = bulkOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBulkOptions BulkOptions
            {
                get
                {
                    return _bulkOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBukExtendedOptions(this);
            }
        }
        /// <summary>
        /// buk_extended_options : id_ 
        /// </summary>
        public partial class AstBukExtendedOptions2 : AstBukExtendedOptions
        {
            
            private static string _ruleName1 = "buk_extended_options";
            
            private AstId _id;
            
            internal AstBukExtendedOptions2(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBukExtendedOptions(this);
            }
        }
        

        
        internal AstBukExtendedOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBukExtendedOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstBukExtendedOptions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBukExtendedOptions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBukExtendedOptions.AstBukExtendedOptions1(ctx, list.Get<AstBulkOptions>(0));
            }
            if ((index == 2))
            {
                return new AstBukExtendedOptions.AstBukExtendedOptions2(ctx, list.Get<AstId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// buk_extended_options : 
        ///    bulk_options 
        /// </summary>
        public static AstBukExtendedOptions BukExtendedOptions(ParserRuleContext ctx, AstBulkOptions bulkOptions)
        {
            AstBukExtendedOptions.AstBukExtendedOptions1 result = new AstBukExtendedOptions.AstBukExtendedOptions1(ctx, bulkOptions);
            return result;
        }
        
        /// <summary>
        /// buk_extended_options : 
        ///    id_ 
        /// </summary>
        public static AstBukExtendedOptions BukExtendedOptions(ParserRuleContext ctx, AstId id)
        {
            AstBukExtendedOptions.AstBukExtendedOptions2 result = new AstBukExtendedOptions.AstBukExtendedOptions2(ctx, id);
            return result;
        }
    }
    
    /// <summary>
    /// derived_table
    /// 	 : subquery
    /// 	 | LR_BRACKET  subqueries  RR_BRACKET
    /// 	 | table_value_constructor
    /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
    /// </summary>
    public abstract partial class AstDerivedTable : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubqueries), false, false, "subqueries")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableValueConstructor), false, false, "table_value_constructor")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstTableValueConstructor), false, false, "table_value_constructor"))));
        
        private static string _ruleValue = "subquery\r\n | LR_BRACKET  subqueries  RR_BRACKET\r\n | table_value_constructor\r\n | L" +
            "R_BRACKET  table_value_constructor  RR_BRACKET\r\n";
        
        private static string _ruleName = "derived_table";
        
        /// <summary>
        /// derived_table : subquery 
        /// </summary>
        public partial class AstDerivedTable1 : AstDerivedTable
        {
            
            private static string _ruleName1 = "derived_table";
            
            private AstSubquery _subquery;
            
            internal AstDerivedTable1(ParserRuleContext ctx, AstSubquery subquery) : 
                    base(ctx)
            {
                _subquery = subquery;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : LR_BRACKET subqueries RR_BRACKET 
        /// </summary>
        public partial class AstDerivedTable2 : AstDerivedTable
        {
            
            private static string _ruleName1 = "derived_table";
            
            private AstSubqueries _subqueries;
            
            internal AstDerivedTable2(ParserRuleContext ctx, AstSubqueries subqueries) : 
                    base(ctx)
            {
                _subqueries = subqueries;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubqueries Subqueries
            {
                get
                {
                    return _subqueries;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : table_value_constructor 
        /// </summary>
        public partial class AstDerivedTable3 : AstDerivedTable
        {
            
            private static string _ruleName1 = "derived_table";
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstDerivedTable3(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _tableValueConstructor = tableValueConstructor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : LR_BRACKET table_value_constructor RR_BRACKET 
        /// </summary>
        public partial class AstDerivedTable4 : AstDerivedTable
        {
            
            private static string _ruleName1 = "derived_table";
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstDerivedTable4(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _tableValueConstructor = tableValueConstructor;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        

        
        internal AstDerivedTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDerivedTable(Position p) : 
                base(p)
        {
        }
        
        internal AstDerivedTable(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDerivedTable Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDerivedTable.AstDerivedTable1(ctx, list.Get<AstSubquery>(0));
            }
            if ((index == 2))
            {
                return new AstDerivedTable.AstDerivedTable2(ctx, list.Get<AstSubqueries>(0));
            }
            if ((index == 3))
            {
                return new AstDerivedTable.AstDerivedTable3(ctx, list.Get<AstTableValueConstructor>(0));
            }
            if ((index == 4))
            {
                return new AstDerivedTable.AstDerivedTable4(ctx, list.Get<AstTableValueConstructor>(0));
            }
            return null;
        }
        
        /// <summary>
        /// derived_table : 
        ///    subquery 
        /// </summary>
        public static AstDerivedTable DerivedTable(ParserRuleContext ctx, AstSubquery subquery)
        {
            AstDerivedTable.AstDerivedTable1 result = new AstDerivedTable.AstDerivedTable1(ctx, subquery);
            return result;
        }
        
        /// <summary>
        /// derived_table : 
        ///    ( subqueries ) 
        /// </summary>
        public static AstDerivedTable DerivedTable(ParserRuleContext ctx, AstSubqueries subqueries)
        {
            AstDerivedTable.AstDerivedTable2 result = new AstDerivedTable.AstDerivedTable2(ctx, subqueries);
            return result;
        }
        
        /// <summary>
        /// derived_table : 
        ///    table_value_constructor 
        /// </summary>
        public static AstDerivedTable DerivedTable(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor)
        {
            AstDerivedTable.AstDerivedTable3 result = new AstDerivedTable.AstDerivedTable3(ctx, tableValueConstructor);
            return result;
        }
    }
    
    /// <summary>
    /// function_call
    /// 	 : ranking_windowed_function
    /// 	 | aggregate_windowed_function
    /// 	 | analytic_windowed_function
    /// 	 | built_in_functions
    /// 	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
    /// 	 | freetext_function
    /// 	 | partition_function
    /// 	 | hierarchyid_static_method
    /// </summary>
    public abstract partial class AstFunctionCall : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstScalarFunctionName), false, false, "scalar_function_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), true, false, "expression_list")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRankingWindowedFunction), false, false, "ranking_windowed_function")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAggregateWindowedFunction), false, false, "aggregate_windowed_function")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAnalyticWindowedFunction), false, false, "analytic_windowed_function")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstBuiltInFunctions), false, false, "built_in_functions")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstFreetextFunction), false, false, "freetext_function")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstPartitionFunction), false, false, "partition_function")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstHierarchyidStaticMethod), false, false, "hierarchyid_static_method"))));
        
        private static string _ruleValue = "ranking_windowed_function\r\n | aggregate_windowed_function\r\n | analytic_windowed_f" +
            "unction\r\n | built_in_functions\r\n | scalar_function_name  LR_BRACKET  expression_" +
            "list?  RR_BRACKET\r\n | freetext_function\r\n | partition_function\r\n | hierarchyid_s" +
            "tatic_method\r\n";
        
        private static string _ruleName = "function_call";
        
        /// <summary>
        /// function_call : ranking_windowed_function 
        /// </summary>
        public partial class AstFunctionCall1 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstRankingWindowedFunction _rankingWindowedFunction;
            
            internal AstFunctionCall1(ParserRuleContext ctx, AstRankingWindowedFunction rankingWindowedFunction) : 
                    base(ctx)
            {
                _rankingWindowedFunction = rankingWindowedFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRankingWindowedFunction RankingWindowedFunction
            {
                get
                {
                    return _rankingWindowedFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : aggregate_windowed_function 
        /// </summary>
        public partial class AstFunctionCall2 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstAggregateWindowedFunction _aggregateWindowedFunction;
            
            internal AstFunctionCall2(ParserRuleContext ctx, AstAggregateWindowedFunction aggregateWindowedFunction) : 
                    base(ctx)
            {
                _aggregateWindowedFunction = aggregateWindowedFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAggregateWindowedFunction AggregateWindowedFunction
            {
                get
                {
                    return _aggregateWindowedFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : analytic_windowed_function 
        /// </summary>
        public partial class AstFunctionCall3 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstAnalyticWindowedFunction _analyticWindowedFunction;
            
            internal AstFunctionCall3(ParserRuleContext ctx, AstAnalyticWindowedFunction analyticWindowedFunction) : 
                    base(ctx)
            {
                _analyticWindowedFunction = analyticWindowedFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAnalyticWindowedFunction AnalyticWindowedFunction
            {
                get
                {
                    return _analyticWindowedFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : built_in_functions 
        /// </summary>
        public partial class AstFunctionCall4 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstBuiltInFunctions _builtInFunctions;
            
            internal AstFunctionCall4(ParserRuleContext ctx, AstBuiltInFunctions builtInFunctions) : 
                    base(ctx)
            {
                _builtInFunctions = builtInFunctions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBuiltInFunctions BuiltInFunctions
            {
                get
                {
                    return _builtInFunctions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : scalar_function_name LR_BRACKET expression_list? RR_BRACKET 
        /// </summary>
        public partial class AstFunctionCall5 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstScalarFunctionName _scalarFunctionName;
            
            private AstExpressionList? _expressionList;
            
            internal AstFunctionCall5(ParserRuleContext ctx, AstScalarFunctionName scalarFunctionName, AstExpressionList? expressionList) : 
                    base(ctx)
            {
                _scalarFunctionName = scalarFunctionName;
                _expressionList = expressionList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstScalarFunctionName ScalarFunctionName
            {
                get
                {
                    return _scalarFunctionName;
                }
            }
            
            public virtual AstExpressionList? ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : freetext_function 
        /// </summary>
        public partial class AstFunctionCall6 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstFreetextFunction _freetextFunction;
            
            internal AstFunctionCall6(ParserRuleContext ctx, AstFreetextFunction freetextFunction) : 
                    base(ctx)
            {
                _freetextFunction = freetextFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFreetextFunction FreetextFunction
            {
                get
                {
                    return _freetextFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : partition_function 
        /// </summary>
        public partial class AstFunctionCall7 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstPartitionFunction _partitionFunction;
            
            internal AstFunctionCall7(ParserRuleContext ctx, AstPartitionFunction partitionFunction) : 
                    base(ctx)
            {
                _partitionFunction = partitionFunction;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPartitionFunction PartitionFunction
            {
                get
                {
                    return _partitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : hierarchyid_static_method 
        /// </summary>
        public partial class AstFunctionCall8 : AstFunctionCall
        {
            
            private static string _ruleName1 = "function_call";
            
            private AstHierarchyidStaticMethod _hierarchyidStaticMethod;
            
            internal AstFunctionCall8(ParserRuleContext ctx, AstHierarchyidStaticMethod hierarchyidStaticMethod) : 
                    base(ctx)
            {
                _hierarchyidStaticMethod = hierarchyidStaticMethod;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstHierarchyidStaticMethod HierarchyidStaticMethod
            {
                get
                {
                    return _hierarchyidStaticMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        

        
        internal AstFunctionCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFunctionCall(Position p) : 
                base(p)
        {
        }
        
        internal AstFunctionCall(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstFunctionCall Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstFunctionCall.AstFunctionCall1(ctx, list.Get<AstRankingWindowedFunction>(0));
            }
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall2(ctx, list.Get<AstAggregateWindowedFunction>(0));
            }
            if ((index == 3))
            {
                return new AstFunctionCall.AstFunctionCall3(ctx, list.Get<AstAnalyticWindowedFunction>(0));
            }
            if ((index == 4))
            {
                return new AstFunctionCall.AstFunctionCall4(ctx, list.Get<AstBuiltInFunctions>(0));
            }
            if ((index == 5))
            {
                return new AstFunctionCall.AstFunctionCall5(ctx, list.Get<AstScalarFunctionName>(0), list.Get<AstExpressionList?>(1));
            }
            if ((index == 6))
            {
                return new AstFunctionCall.AstFunctionCall6(ctx, list.Get<AstFreetextFunction>(0));
            }
            if ((index == 7))
            {
                return new AstFunctionCall.AstFunctionCall7(ctx, list.Get<AstPartitionFunction>(0));
            }
            if ((index == 8))
            {
                return new AstFunctionCall.AstFunctionCall8(ctx, list.Get<AstHierarchyidStaticMethod>(0));
            }
            return null;
        }
        
        /// <summary>
        /// function_call : 
        ///    ranking_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstRankingWindowedFunction rankingWindowedFunction)
        {
            AstFunctionCall.AstFunctionCall1 result = new AstFunctionCall.AstFunctionCall1(ctx, rankingWindowedFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    aggregate_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstAggregateWindowedFunction aggregateWindowedFunction)
        {
            AstFunctionCall.AstFunctionCall2 result = new AstFunctionCall.AstFunctionCall2(ctx, aggregateWindowedFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    analytic_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstAnalyticWindowedFunction analyticWindowedFunction)
        {
            AstFunctionCall.AstFunctionCall3 result = new AstFunctionCall.AstFunctionCall3(ctx, analyticWindowedFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    built_in_functions 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstBuiltInFunctions builtInFunctions)
        {
            AstFunctionCall.AstFunctionCall4 result = new AstFunctionCall.AstFunctionCall4(ctx, builtInFunctions);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    scalar_function_name ( expression_list? ) 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstScalarFunctionName scalarFunctionName, AstExpressionList expressionList)
        {
            AstFunctionCall.AstFunctionCall5 result = new AstFunctionCall.AstFunctionCall5(ctx, scalarFunctionName, expressionList);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    freetext_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstFreetextFunction freetextFunction)
        {
            AstFunctionCall.AstFunctionCall6 result = new AstFunctionCall.AstFunctionCall6(ctx, freetextFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    partition_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstPartitionFunction partitionFunction)
        {
            AstFunctionCall.AstFunctionCall7 result = new AstFunctionCall.AstFunctionCall7(ctx, partitionFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    hierarchyid_static_method 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstHierarchyidStaticMethod hierarchyidStaticMethod)
        {
            AstFunctionCall.AstFunctionCall8 result = new AstFunctionCall.AstFunctionCall8(ctx, hierarchyidStaticMethod);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_function
    /// 	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
    /// 	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstFreetextFunction : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstContainstableFreetexttable), false, false, "containstable_freetexttable"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFreetextTableAndcolumnNames), false, false, "freetext_table_andcolumn_names"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionLanguage), false, false, "expression_language"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstSemanticTable), false, false, "semantic_table"), new Bb.Asts.AstRuleMatcherItem(typeof(AstFreetextTableAndcolumnNames), false, false, "freetext_table_andcolumn_names"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = @"containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
";
        
        private static string _ruleName = "freetext_function";
        
        /// <summary>
        /// freetext_function : containstable_freetexttable LR_BRACKET freetext_table_andcolumn_names COMMA expression_language COMMA expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextFunction1 : AstFreetextFunction
        {
            
            private static string _ruleName1 = "freetext_function";
            
            private AstContainstableFreetexttable _containstableFreetexttable;
            
            private AstFreetextTableAndcolumnNames _freetextTableAndcolumnNames;
            
            private AstExpressionLanguage _expressionLanguage;
            
            private AstExpression _expression;
            
            internal AstFreetextFunction1(ParserRuleContext ctx, AstContainstableFreetexttable containstableFreetexttable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage, AstExpression expression) : 
                    base(ctx)
            {
                _containstableFreetexttable = containstableFreetexttable;
                _freetextTableAndcolumnNames = freetextTableAndcolumnNames;
                _expressionLanguage = expressionLanguage;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstContainstableFreetexttable ContainstableFreetexttable
            {
                get
                {
                    return _containstableFreetexttable;
                }
            }
            
            public virtual AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames
            {
                get
                {
                    return _freetextTableAndcolumnNames;
                }
            }
            
            public virtual AstExpressionLanguage ExpressionLanguage
            {
                get
                {
                    return _expressionLanguage;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        /// <summary>
        /// freetext_function : semantic_table LR_BRACKET freetext_table_andcolumn_names COMMA expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextFunction2 : AstFreetextFunction
        {
            
            private static string _ruleName1 = "freetext_function";
            
            private AstSemanticTable _semanticTable;
            
            private AstFreetextTableAndcolumnNames _freetextTableAndcolumnNames;
            
            private AstExpression _expression;
            
            internal AstFreetextFunction2(ParserRuleContext ctx, AstSemanticTable semanticTable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpression expression) : 
                    base(ctx)
            {
                _semanticTable = semanticTable;
                _freetextTableAndcolumnNames = freetextTableAndcolumnNames;
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSemanticTable SemanticTable
            {
                get
                {
                    return _semanticTable;
                }
            }
            
            public virtual AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames
            {
                get
                {
                    return _freetextTableAndcolumnNames;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        /// <summary>
        /// freetext_function : SEMANTICSIMILARITYDETAILSTABLE LR_BRACKET full_table_ref COMMA name1=full_column_name COMMA expr1=expression COMMA name2=full_column_name COMMA expr2=expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextFunction3 : AstFreetextFunction
        {
            
            private static string _ruleName1 = "freetext_function";
            
            private AstFullTableRef _fullTableRef;
            
            private AstFullColumnName _name1;
            
            private AstExpression _expr1;
            
            private AstFullColumnName _name2;
            
            private AstExpression _expr2;
            
            internal AstFreetextFunction3(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstFullColumnName name1, AstExpression expr1, AstFullColumnName name2, AstExpression expr2) : 
                    base(ctx)
            {
                _fullTableRef = fullTableRef;
                _name1 = name1;
                _expr1 = expr1;
                _name2 = name2;
                _expr2 = expr2;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public virtual AstFullColumnName Name1
            {
                get
                {
                    return _name1;
                }
            }
            
            public virtual AstExpression Expr1
            {
                get
                {
                    return _expr1;
                }
            }
            
            public virtual AstFullColumnName Name2
            {
                get
                {
                    return _name2;
                }
            }
            
            public virtual AstExpression Expr2
            {
                get
                {
                    return _expr2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        

        
        internal AstFreetextFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFreetextFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstFreetextFunction(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstFreetextFunction Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstFreetextFunction.AstFreetextFunction1(ctx, list.Get<AstContainstableFreetexttable>(0), list.Get<AstFreetextTableAndcolumnNames>(1), list.Get<AstExpressionLanguage>(2), list.Get<AstExpression>(3));
            }
            if ((index == 2))
            {
                return new AstFreetextFunction.AstFreetextFunction2(ctx, list.Get<AstSemanticTable>(0), list.Get<AstFreetextTableAndcolumnNames>(1), list.Get<AstExpression>(2));
            }
            if ((index == 3))
            {
                return new AstFreetextFunction.AstFreetextFunction3(ctx, list.Get<AstFullTableRef>(0), list.Get<AstFullColumnName>(1), list.Get<AstExpression>(2), list.Get<AstFullColumnName>(3), list.Get<AstExpression>(4));
            }
            return null;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    containstable_freetexttable ( freetext_table_andcolumn_names , expression_language , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(ParserRuleContext ctx, AstContainstableFreetexttable containstableFreetexttable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage, AstExpression expression)
        {
            AstFreetextFunction.AstFreetextFunction1 result = new AstFreetextFunction.AstFreetextFunction1(ctx, containstableFreetexttable, freetextTableAndcolumnNames, expressionLanguage, expression);
            return result;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    semantic_table ( freetext_table_andcolumn_names , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(ParserRuleContext ctx, AstSemanticTable semanticTable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpression expression)
        {
            AstFreetextFunction.AstFreetextFunction2 result = new AstFreetextFunction.AstFreetextFunction2(ctx, semanticTable, freetextTableAndcolumnNames, expression);
            return result;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    SEMANTICSIMILARITYDETAILSTABLE ( full_table_ref , name1=full_column_name , expr1=expression , name2=full_column_name , expr2=expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstFullColumnName name1, AstExpression expr1, AstFullColumnName name2, AstExpression expr2)
        {
            AstFreetextFunction.AstFreetextFunction3 result = new AstFreetextFunction.AstFreetextFunction3(ctx, fullTableRef, name1, expr1, name2, expr2);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_predicate
    /// 	 : CONTAINS  LR_BRACKET  predicate_contains  COMMA  rule = expression  RR_BRACKET
    /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
    /// </summary>
    public abstract partial class AstFreetextPredicate : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstPredicateContains), false, false, "predicate_contains"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFreetextTableAndcolumnNames), false, false, "freetext_table_andcolumn_names"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionLanguage), false, false, "expression_language"))));
        
        private static string _ruleValue = "CONTAINS  LR_BRACKET  predicate_contains  COMMA  rule = expression  RR_BRACKET\r\n " +
            "| FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_langua" +
            "ge  RR_BRACKET\r\n";
        
        private static string _ruleName = "freetext_predicate";
        
        /// <summary>
        /// freetext_predicate : CONTAINS LR_BRACKET predicate_contains COMMA rule=expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextPredicate1 : AstFreetextPredicate
        {
            
            private static string _ruleName1 = "freetext_predicate";
            
            private AstPredicateContains _predicateContains;
            
            private AstExpression _rule;
            
            internal AstFreetextPredicate1(ParserRuleContext ctx, AstPredicateContains predicateContains, AstExpression rule) : 
                    base(ctx)
            {
                _predicateContains = predicateContains;
                _rule = rule;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPredicateContains PredicateContains
            {
                get
                {
                    return _predicateContains;
                }
            }
            
            public virtual AstExpression Rule
            {
                get
                {
                    return _rule;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextPredicate(this);
            }
        }
        /// <summary>
        /// freetext_predicate : FREETEXT LR_BRACKET freetext_table_andcolumn_names COMMA expression_language RR_BRACKET 
        /// </summary>
        public partial class AstFreetextPredicate2 : AstFreetextPredicate
        {
            
            private static string _ruleName1 = "freetext_predicate";
            
            private AstFreetextTableAndcolumnNames _freetextTableAndcolumnNames;
            
            private AstExpressionLanguage _expressionLanguage;
            
            internal AstFreetextPredicate2(ParserRuleContext ctx, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage) : 
                    base(ctx)
            {
                _freetextTableAndcolumnNames = freetextTableAndcolumnNames;
                _expressionLanguage = expressionLanguage;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames
            {
                get
                {
                    return _freetextTableAndcolumnNames;
                }
            }
            
            public virtual AstExpressionLanguage ExpressionLanguage
            {
                get
                {
                    return _expressionLanguage;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextPredicate(this);
            }
        }
        

        
        internal AstFreetextPredicate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFreetextPredicate(Position p) : 
                base(p)
        {
        }
        
        internal AstFreetextPredicate(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstFreetextPredicate Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstFreetextPredicate.AstFreetextPredicate1(ctx, list.Get<AstPredicateContains>(0), list.Get<AstExpression>(1));
            }
            if ((index == 2))
            {
                return new AstFreetextPredicate.AstFreetextPredicate2(ctx, list.Get<AstFreetextTableAndcolumnNames>(0), list.Get<AstExpressionLanguage>(1));
            }
            return null;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    CONTAINS ( predicate_contains , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(ParserRuleContext ctx, AstPredicateContains predicateContains, AstExpression rule)
        {
            AstFreetextPredicate.AstFreetextPredicate1 result = new AstFreetextPredicate.AstFreetextPredicate1(ctx, predicateContains, rule);
            return result;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    FREETEXT ( freetext_table_andcolumn_names , expression_language ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(ParserRuleContext ctx, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage)
        {
            AstFreetextPredicate.AstFreetextPredicate2 result = new AstFreetextPredicate.AstFreetextPredicate2(ctx, freetextTableAndcolumnNames, expressionLanguage);
            return result;
        }
    }
    
    /// <summary>
    /// predicate_contains
    /// 	 : full_column_name
    /// 	 | full_column_names
    /// 	 | STAR
    /// 	 | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstPredicateContains : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnNames), false, false, "full_column_names"))));
        
        private static string _ruleValue = "full_column_name\r\n | full_column_names\r\n | STAR\r\n | PROPERTY  LR_BRACKET  full_co" +
            "lumn_name  COMMA  property = expression  RR_BRACKET\r\n";
        
        private static string _ruleName = "predicate_contains";
        
        /// <summary>
        /// predicate_contains : full_column_name 
        /// </summary>
        public partial class AstPredicateContains1 : AstPredicateContains
        {
            
            private static string _ruleName1 = "predicate_contains";
            
            private AstFullColumnName _fullColumnName;
            
            internal AstPredicateContains1(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        /// <summary>
        /// predicate_contains : full_column_names 
        /// </summary>
        public partial class AstPredicateContains2 : AstPredicateContains
        {
            
            private static string _ruleName1 = "predicate_contains";
            
            private AstFullColumnNames _fullColumnNames;
            
            internal AstPredicateContains2(ParserRuleContext ctx, AstFullColumnNames fullColumnNames) : 
                    base(ctx)
            {
                _fullColumnNames = fullColumnNames;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnNames FullColumnNames
            {
                get
                {
                    return _fullColumnNames;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        /// <summary>
        /// predicate_contains : STAR 
        /// </summary>
        public partial class AstPredicateContains3 : AstPredicateContains
        {
            
            private static string _ruleName1 = "predicate_contains";
            
            internal AstPredicateContains3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        /// <summary>
        /// predicate_contains : PROPERTY LR_BRACKET full_column_name COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstPredicateContains4 : AstPredicateContains
        {
            
            private static string _ruleName1 = "predicate_contains";
            
            private AstFullColumnName _fullColumnName;
            
            private AstExpression _property;
            
            internal AstPredicateContains4(ParserRuleContext ctx, AstFullColumnName fullColumnName, AstExpression property) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        

        
        internal AstPredicateContains(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPredicateContains(Position p) : 
                base(p)
        {
        }
        
        internal AstPredicateContains(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPredicateContains Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPredicateContains.AstPredicateContains1(ctx, list.Get<AstFullColumnName>(0));
            }
            if ((index == 2))
            {
                return new AstPredicateContains.AstPredicateContains2(ctx, list.Get<AstFullColumnNames>(0));
            }
            if ((index == 3))
            {
                return new AstPredicateContains.AstPredicateContains3(ctx);
            }
            if ((index == 4))
            {
                return new AstPredicateContains.AstPredicateContains4(ctx, list.Get<AstFullColumnName>(0), list.Get<AstExpression>(1));
            }
            return null;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    full_column_name 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstPredicateContains.AstPredicateContains1 result = new AstPredicateContains.AstPredicateContains1(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    full_column_names 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx, AstFullColumnNames fullColumnNames)
        {
            AstPredicateContains.AstPredicateContains2 result = new AstPredicateContains.AstPredicateContains2(ctx, fullColumnNames);
            return result;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    STAR 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx)
        {
            AstPredicateContains.AstPredicateContains3 result = new AstPredicateContains.AstPredicateContains3(ctx);
            return result;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    PROPERTY ( full_column_name , property=expression ) 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx, AstFullColumnName fullColumnName, AstExpression property)
        {
            AstPredicateContains.AstPredicateContains4 result = new AstPredicateContains.AstPredicateContains4(ctx, fullColumnName, property);
            return result;
        }
    }
    
    /// <summary>
    /// built_in_functions
    /// 	 : APP_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | APPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET
    /// 	 | COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COLUMNPROPERTY  LR_BRACKET  idExpression = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET
    /// 	 | DB_NAME  LR_BRACKET  database = expression  RR_BRACKET
    /// 	 | FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET
    /// 	 | FILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET
    /// 	 | FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET
    /// 	 | FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | INDEX_COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key = expression  RR_BRACKET
    /// 	 | INDEXKEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | NEXT  VALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET
    /// 	 | OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET
    /// 	 | OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECTPROPERTY  LR_BRACKET  idExpression = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | OBJECTPROPERTYEX  LR_BRACKET  idExpression = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET
    /// 	 | SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET
    /// 	 | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET
    /// 	 | SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
    /// 	 | SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression  RR_BRACKET
    /// 	 | TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET
    /// 	 | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET
    /// 	 | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | CHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET
    /// 	 | CONCAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET
    /// 	 | FORMAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | LEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | LEN  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | LOWER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | PATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET
    /// 	 | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET
    /// 	 | REPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET
    /// 	 | REPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | REVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | RIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | RTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | STR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRACKET
    /// 	 | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET
    /// 	 | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET
    /// 	 | SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET
    /// 	 | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET
    /// 	 | TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET
    /// 	 | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET
    /// 	 | UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | BINARY_CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET
    /// 	 | CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET
    /// 	 | COMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  RR_BRACKET
    /// 	 | CONTEXT_INFO  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
    /// 	 | DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | ERROR_LINE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_NUMBER  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_SEVERITY  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | FORMATMESSAGE  LR_BRACKET  format_argument  COMMA  expressions  RR_BRACKET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
    /// 	 | GETANSINULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET
    /// 	 | HOST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | HOST_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | ISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NEWID  LR_BRACKET  RR_BRACKET
    /// 	 | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
    /// 	 | ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
    /// 	 | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET
    /// 	 | XACT_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET
    /// 	 | COALESCE  LR_BRACKET  expression_list  RR_BRACKET
    /// 	 | CURRENT_DATE  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TIMESTAMP
    /// 	 | CURRENT_USER
    /// 	 | DATEADD  LR_BRACKET  datepart = id_simple  COMMA  number = expression  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEDIFF  LR_BRACKET  datepart = id_simple  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET
    /// 	 | DATENAME  LR_BRACKET  datepart = id_simple  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEPART  LR_BRACKET  datepart = id_simple  COMMA  date = expression  RR_BRACKET
    /// 	 | GETDATE  LR_BRACKET  RR_BRACKET
    /// 	 | GETUTCDATE  LR_BRACKET  RR_BRACKET
    /// 	 | IDENTITY  LR_BRACKET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | SESSION_USER
    /// 	 | SYSTEM_USER
    /// 	 | USER
    /// 	 | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET
    /// 	 | xml_data_type_methods
    /// 	 | IIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstBuiltInFunctions : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(22, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(65, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(21, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(23, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(43, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(55, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(62, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(63, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOrderByClause), false, false, "order_by_clause")), new Bb.Asts.AstRuleMatcherItems(66, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(67, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(104, new Bb.Asts.AstRuleMatcherItem(typeof(AstIdSimple), false, false, "id_simple"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(105, new Bb.Asts.AstRuleMatcherItem(typeof(AstIdSimple), false, false, "id_simple"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(110, new Bb.Asts.AstRuleMatcherItem(typeof(AstDataType), false, false, "data_type"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(115, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDataType), false, false, "data_type"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(117, new Bb.Asts.AstRuleMatcherItem(typeof(AstSearchCondition), false, false, "search_condition"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(16, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(17, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(18, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(19, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(24, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullTableRef), false, false, "full_table_ref"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOrderByClause), false, false, "order_by_clause")), new Bb.Asts.AstRuleMatcherItems(26, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(27, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(28, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(29, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(30, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(32, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(37, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(40, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(46, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(48, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(53, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(54, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(56, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(58, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(64, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(68, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(85, new Bb.Asts.AstRuleMatcherItem(typeof(AstFormatArgument), false, false, "format_argument"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressions), false, false, "expressions")), new Bb.Asts.AstRuleMatcherItems(90, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(97, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDataType), false, false, "data_type")), new Bb.Asts.AstRuleMatcherItems(98, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDataType), false, false, "data_type")), new Bb.Asts.AstRuleMatcherItems(99, new Bb.Asts.AstRuleMatcherItem(typeof(AstDataType), false, false, "data_type"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression2), false, false, "expression2")), new Bb.Asts.AstRuleMatcherItems(106, new Bb.Asts.AstRuleMatcherItem(typeof(AstIdSimple), false, false, "id_simple"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(107, new Bb.Asts.AstRuleMatcherItem(typeof(AstIdSimple), false, false, "id_simple"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(111, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(9, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), true, false, "expression")), new Bb.Asts.AstRuleMatcherItems(10, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), true, false, "expression")), new Bb.Asts.AstRuleMatcherItems(11, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(12, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(13, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(14, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(15, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(20, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(25, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(33, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), true, false, "expression")), new Bb.Asts.AstRuleMatcherItems(34, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), true, false, "expression")), new Bb.Asts.AstRuleMatcherItems(36, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(38, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(39, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(41, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(42, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(44, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressions), false, false, "expressions")), new Bb.Asts.AstRuleMatcherItems(45, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressions), false, false, "expressions")), new Bb.Asts.AstRuleMatcherItems(47, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressions), false, false, "expressions")), new Bb.Asts.AstRuleMatcherItems(49, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(50, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(51, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(52, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(57, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(59, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(60, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(61, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(69, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(70, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(71, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionOrStar), false, false, "expression_or_star")), new Bb.Asts.AstRuleMatcherItems(72, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionOrStar), false, false, "expression_or_star")), new Bb.Asts.AstRuleMatcherItems(73, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(74, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(78, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(87, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(91, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(95, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(100, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), false, false, "expression_list")), new Bb.Asts.AstRuleMatcherItems(116, new Bb.Asts.AstRuleMatcherItem(typeof(AstXmlDataTypeMethods), false, false, "xml_data_type_methods"))));
        
        private static string _ruleValue = "APP_NAME  LR_BRACKET  RR_BRACKET\r\n | APPLOCK_MODE  LR_BRACKET  database_principal" +
            " = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression" +
            "  RR_BRACKET\r\n | APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMM" +
            "A  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner =" +
            " expression  RR_BRACKET\r\n | ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = express" +
            "ion  COMMA  propertyName = expression  RR_BRACKET\r\n | COL_LENGTH  LR_BRACKET  ta" +
            "ble = expression  COMMA  column = expression  RR_BRACKET\r\n | COL_NAME  LR_BRACKE" +
            "T  table = expression  COMMA  column = expression  RR_BRACKET\r\n | COLUMNPROPERTY" +
            "  LR_BRACKET  idExpression = expression  COMMA  column = expression  COMMA  prop" +
            "erty = expression  RR_BRACKET\r\n | DATABASEPROPERTYEX  LR_BRACKET  database = exp" +
            "ression  COMMA  property = expression  RR_BRACKET\r\n | DB_ID  LR_BRACKET  databas" +
            "eName = expression  RR_BRACKET\r\n | DB_NAME  LR_BRACKET  database = expression  R" +
            "R_BRACKET\r\n | FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET\r\n | FILE_I" +
            "DEX  LR_BRACKET  file_name = expression  RR_BRACKET\r\n | FILE_NAME  LR_BRACKET  f" +
            "ile = expression  RR_BRACKET\r\n | FILEGROUP_ID  LR_BRACKET  filegroup_name = expr" +
            "ession  RR_BRACKET\r\n | FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR" +
            "_BRACKET\r\n | FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  prope" +
            "rty = expression  RR_BRACKET\r\n | FILEPROPERTY  LR_BRACKET  file = expression  CO" +
            "MMA  property = expression  RR_BRACKET\r\n | FILEPROPERTYEX  LR_BRACKET  name = ex" +
            "pression  COMMA  property = expression  RR_BRACKET\r\n | FULLTEXTCATALOGPROPERTY  " +
            "LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET\r\n | F" +
            "ULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET\r\n | INDEX_" +
            "COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key" +
            " = expression  RR_BRACKET\r\n | INDEXKEY_PROPERTY  LR_BRACKET  object = expression" +
            "  COMMA  index = expression  COMMA  key = expression  COMMA  property = expressi" +
            "on  RR_BRACKET\r\n | INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_" +
            "or_statistics = expression  COMMA  property = expression  RR_BRACKET\r\n | NEXT  V" +
            "ALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR" +
            "_BRACKET)?\r\n | OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET\r\n " +
            "| OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expressi" +
            "on)?  RR_BRACKET\r\n | OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  datab" +
            "ase = expression)?  RR_BRACKET\r\n | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object" +
            " = expression  (COMMA  database = expression)?  RR_BRACKET\r\n | OBJECTPROPERTY  L" +
            "R_BRACKET  idExpression = expression  COMMA  property = expression  RR_BRACKET\r\n" +
            " | OBJECTPROPERTYEX  LR_BRACKET  idExpression = expression  COMMA  property = ex" +
            "pression  RR_BRACKET\r\n | ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET\r\n | PARSENAME " +
            " LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACK" +
            "ET\r\n | SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET\r\n | SCHEMA_NAM" +
            "E  LR_BRACKET  schemaId = expression  RR_BRACKET\r\n | SCOPE_IDENTITY  LR_BRACKET " +
            " RR_BRACKET\r\n | SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET\r\n " +
            "| STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression " +
            " RR_BRACKET\r\n | TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET\r\n | TYPE" +
            "_NAME  LR_BRACKET  type = expression  RR_BRACKET\r\n | TYPEPROPERTY  LR_BRACKET  t" +
            "ype = expression  COMMA  property = expression  RR_BRACKET\r\n | ASCII  LR_BRACKET" +
            "  character_expression = expression  RR_BRACKET\r\n | CHAR  LR_BRACKET  integer_ex" +
            "pression = expression  RR_BRACKET\r\n | CHARINDEX  LR_BRACKET  expressionToFind = " +
            "expression  COMMA  expressionToSearch = expression  (COMMA  start_location = exp" +
            "ression)?  RR_BRACKET\r\n | CONCAT  LR_BRACKET  expressions  RR_BRACKET\r\n | CONCAT" +
            "_WS  LR_BRACKET  expressions  RR_BRACKET\r\n | DIFFERENCE  LR_BRACKET  character_e" +
            "xpression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET" +
            "\r\n | FORMAT  LR_BRACKET  expressions  RR_BRACKET\r\n | LEFT  LR_BRACKET  character" +
            "_expression = expression  COMMA  integer_expression = expression  RR_BRACKET\r\n |" +
            " LEN  LR_BRACKET  string_expression = expression  RR_BRACKET\r\n | LOWER  LR_BRACK" +
            "ET  character_expression = expression  RR_BRACKET\r\n | LTRIM  LR_BRACKET  charact" +
            "er_expression = expression  RR_BRACKET\r\n | NCHAR  LR_BRACKET  integer_expression" +
            " = expression  RR_BRACKET\r\n | PATINDEX  LR_BRACKET  pattern = expression  COMMA " +
            " string_expression = expression  RR_BRACKET\r\n | QUOTENAME  LR_BRACKET  character" +
            "_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET\r\n | REP" +
            "LACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with" +
            " = expression  RR_BRACKET\r\n | REPLICATE  LR_BRACKET  string_expression = express" +
            "ion  COMMA  integer_expression = expression  RR_BRACKET\r\n | REVERSE  LR_BRACKET " +
            " string_expression = expression  RR_BRACKET\r\n | RIGHT  LR_BRACKET  character_exp" +
            "ression = expression  COMMA  integer_expression = expression  RR_BRACKET\r\n | RTR" +
            "IM  LR_BRACKET  character_expression = expression  RR_BRACKET\r\n | SOUNDEX  LR_BR" +
            "ACKET  character_expression = expression  RR_BRACKET\r\n | SPACE_KEYWORD  LR_BRACK" +
            "ET  integer_expression = expression  RR_BRACKET\r\n | STR  LR_BRACKET  float_expre" +
            "ssion = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr" +
            " = expression)?)?  RR_BRACKET\r\n | STRING_AGG  LR_BRACKET  expr = expression  COM" +
            "MA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_cla" +
            "use  RR_BRACKET)?\r\n | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type" +
            "_ = expression  RR_BRACKET\r\n | STUFF  LR_BRACKET  str = expression  COMMA  from " +
            "= decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET\r\n | SUB" +
            "STRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  " +
            "COMMA  length = expression  RR_BRACKET\r\n | TRANSLATE  LR_BRACKET  inputString = " +
            "expression  COMMA  characters = expression  COMMA  translations = expression  RR" +
            "_BRACKET\r\n | TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expre" +
            "ssion  RR_BRACKET\r\n | UNICODE  LR_BRACKET  ncharacter_expression = expression  R" +
            "R_BRACKET\r\n | UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET\r\n" +
            " | BINARY_CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET\r\n | CHECKSUM  LR_" +
            "BRACKET  expression_or_star  RR_BRACKET\r\n | COMPRESS  LR_BRACKET  expr = express" +
            "ion  RR_BRACKET\r\n | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  R" +
            "R_BRACKET\r\n | CONTEXT_INFO  LR_BRACKET  RR_BRACKET\r\n | CURRENT_REQUEST_ID  LR_BR" +
            "ACKET  RR_BRACKET\r\n | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET\r\n | DECOMPR" +
            "ESS  LR_BRACKET  expr = expression  RR_BRACKET\r\n | ERROR_LINE  LR_BRACKET  RR_BR" +
            "ACKET\r\n | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET\r\n | ERROR_NUMBER  LR_BRACKET  RR" +
            "_BRACKET\r\n | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET\r\n | ERROR_SEVERITY  LR_BRAC" +
            "KET  RR_BRACKET\r\n | ERROR_STATE  LR_BRACKET  RR_BRACKET\r\n | FORMATMESSAGE  LR_BR" +
            "ACKET  format_argument  COMMA  expressions  RR_BRACKET\r\n | GET_FILESTREAM_TRANSA" +
            "CTION_CONTEXT  LR_BRACKET  RR_BRACKET\r\n | GETANSINULL  LR_BRACKET  (database_nam" +
            "e = stringtext)?  RR_BRACKET\r\n | HOST_ID  LR_BRACKET  RR_BRACKET\r\n | HOST_NAME  " +
            "LR_BRACKET  RR_BRACKET\r\n | ISNULL  LR_BRACKET  left = expression  COMMA  right =" +
            " expression  RR_BRACKET\r\n | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET\r\n | MI" +
            "N_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET\r\n | NEWID  LR_BRACKET  RR_BRACKET\r\n " +
            "| NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET\r\n | ROWCOUNT_BIG  LR_BRACKET  RR_BRACK" +
            "ET\r\n | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET\r\n | XAC" +
            "T_STATE  LR_BRACKET  RR_BRACKET\r\n | CAST  LR_BRACKET  expression  AS  data_type " +
            " RR_BRACKET\r\n | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET\r\n | " +
            "CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACK" +
            "ET\r\n | COALESCE  LR_BRACKET  expression_list  RR_BRACKET\r\n | CURRENT_DATE  LR_BR" +
            "ACKET  RR_BRACKET\r\n | CURRENT_TIMESTAMP\r\n | CURRENT_USER\r\n | DATEADD  LR_BRACKET" +
            "  datepart = id_simple  COMMA  number = expression  COMMA  date = expression  RR" +
            "_BRACKET\r\n | DATEDIFF  LR_BRACKET  datepart = id_simple  COMMA  date_first = exp" +
            "ression  COMMA  date_second = expression  RR_BRACKET\r\n | DATENAME  LR_BRACKET  d" +
            "atepart = id_simple  COMMA  date = expression  RR_BRACKET\r\n | DATEPART  LR_BRACK" +
            "ET  datepart = id_simple  COMMA  date = expression  RR_BRACKET\r\n | GETDATE  LR_B" +
            "RACKET  RR_BRACKET\r\n | GETUTCDATE  LR_BRACKET  RR_BRACKET\r\n | IDENTITY  LR_BRACK" +
            "ET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACK" +
            "ET\r\n | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET\r\n | NULLIF  LR_BRACKET  lef" +
            "t = expression  COMMA  right = expression  RR_BRACKET\r\n | SESSION_USER\r\n | SYSTE" +
            "M_USER\r\n | USER\r\n | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  " +
            "culture = expression)?  RR_BRACKET\r\n | xml_data_type_methods\r\n | IIF  LR_BRACKET" +
            "  cond = search_condition  COMMA  left = expression  COMMA  right = expression  " +
            "RR_BRACKET\r\n";
        
        private static string _ruleName = "built_in_functions";
        
        /// <summary>
        /// built_in_functions : APP_NAME LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions1 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : APPLOCK_MODE LR_BRACKET database_principal=expression COMMA resource_name=expression COMMA lock_owner=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions2 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _databasePrincipal;
            
            private AstExpression _resourceName;
            
            private AstExpression _lockOwner;
            
            internal AstBuiltInFunctions2(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockOwner) : 
                    base(ctx)
            {
                _databasePrincipal = databasePrincipal;
                _resourceName = resourceName;
                _lockOwner = lockOwner;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression DatabasePrincipal
            {
                get
                {
                    return _databasePrincipal;
                }
            }
            
            public virtual AstExpression ResourceName
            {
                get
                {
                    return _resourceName;
                }
            }
            
            public virtual AstExpression LockOwner
            {
                get
                {
                    return _lockOwner;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : APPLOCK_TEST LR_BRACKET database_principal=expression COMMA resource_name=expression COMMA lockmode=expression COMMA lock_owner=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions3 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _databasePrincipal;
            
            private AstExpression _resourceName;
            
            private AstExpression _lockmode;
            
            private AstExpression _lockOwner;
            
            internal AstBuiltInFunctions3(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockmode, AstExpression lockOwner) : 
                    base(ctx)
            {
                _databasePrincipal = databasePrincipal;
                _resourceName = resourceName;
                _lockmode = lockmode;
                _lockOwner = lockOwner;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression DatabasePrincipal
            {
                get
                {
                    return _databasePrincipal;
                }
            }
            
            public virtual AstExpression ResourceName
            {
                get
                {
                    return _resourceName;
                }
            }
            
            public virtual AstExpression Lockmode
            {
                get
                {
                    return _lockmode;
                }
            }
            
            public virtual AstExpression LockOwner
            {
                get
                {
                    return _lockOwner;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ASSEMBLYPROPERTY LR_BRACKET assemblyName=expression COMMA propertyName=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions4 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _assemblyName;
            
            private AstExpression _propertyName;
            
            internal AstBuiltInFunctions4(ParserRuleContext ctx, AstExpression assemblyName, AstExpression propertyName) : 
                    base(ctx)
            {
                _assemblyName = assemblyName;
                _propertyName = propertyName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Assemblyname
            {
                get
                {
                    return _assemblyName;
                }
            }
            
            public virtual AstExpression Propertyname
            {
                get
                {
                    return _propertyName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COL_LENGTH LR_BRACKET table=expression COMMA column=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions5 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _table;
            
            private AstExpression _column;
            
            internal AstBuiltInFunctions5(ParserRuleContext ctx, AstExpression table, AstExpression column) : 
                    base(ctx)
            {
                _table = table;
                _column = column;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Table
            {
                get
                {
                    return _table;
                }
            }
            
            public virtual AstExpression Column
            {
                get
                {
                    return _column;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COL_NAME LR_BRACKET table=expression COMMA column=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions6 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _table;
            
            private AstExpression _column;
            
            internal AstBuiltInFunctions6(ParserRuleContext ctx, AstExpression table, AstExpression column) : 
                    base(ctx)
            {
                _table = table;
                _column = column;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Table
            {
                get
                {
                    return _table;
                }
            }
            
            public virtual AstExpression Column
            {
                get
                {
                    return _column;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COLUMNPROPERTY LR_BRACKET idExpression=expression COMMA column=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions7 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _idExpression;
            
            private AstExpression _column;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions7(ParserRuleContext ctx, AstExpression idExpression, AstExpression column, AstExpression property) : 
                    base(ctx)
            {
                _idExpression = idExpression;
                _column = column;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Idexpression
            {
                get
                {
                    return _idExpression;
                }
            }
            
            public virtual AstExpression Column
            {
                get
                {
                    return _column;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATABASEPROPERTYEX LR_BRACKET database=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions8 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _database;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions8(ParserRuleContext ctx, AstExpression database, AstExpression property) : 
                    base(ctx)
            {
                _database = database;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Database
            {
                get
                {
                    return _database;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DB_ID LR_BRACKET databaseName=expression? RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions9 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression? _databaseName;
            
            internal AstBuiltInFunctions9(ParserRuleContext ctx, AstExpression? databaseName) : 
                    base(ctx)
            {
                _databaseName = databaseName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression? Databasename
            {
                get
                {
                    return _databaseName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DB_NAME LR_BRACKET database=expression? RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions10 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression? _database;
            
            internal AstBuiltInFunctions10(ParserRuleContext ctx, AstExpression? database) : 
                    base(ctx)
            {
                _database = database;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression? Database
            {
                get
                {
                    return _database;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_ID LR_BRACKET file_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions11 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _fileName;
            
            internal AstBuiltInFunctions11(ParserRuleContext ctx, AstExpression fileName) : 
                    base(ctx)
            {
                _fileName = fileName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression FileName
            {
                get
                {
                    return _fileName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_IDEX LR_BRACKET file_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions12 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _fileName;
            
            internal AstBuiltInFunctions12(ParserRuleContext ctx, AstExpression fileName) : 
                    base(ctx)
            {
                _fileName = fileName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression FileName
            {
                get
                {
                    return _fileName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_NAME LR_BRACKET file=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions13 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _file;
            
            internal AstBuiltInFunctions13(ParserRuleContext ctx, AstExpression file) : 
                    base(ctx)
            {
                _file = file;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression File
            {
                get
                {
                    return _file;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUP_ID LR_BRACKET filegroup_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions14 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _filegroupName;
            
            internal AstBuiltInFunctions14(ParserRuleContext ctx, AstExpression filegroupName) : 
                    base(ctx)
            {
                _filegroupName = filegroupName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression FilegroupName
            {
                get
                {
                    return _filegroupName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUP_NAME LR_BRACKET filegroup_id=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions15 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _filegroupId;
            
            internal AstBuiltInFunctions15(ParserRuleContext ctx, AstExpression filegroupId) : 
                    base(ctx)
            {
                _filegroupId = filegroupId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression FilegroupId
            {
                get
                {
                    return _filegroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUPPROPERTY LR_BRACKET filegroup=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions16 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _filegroup;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions16(ParserRuleContext ctx, AstExpression filegroup, AstExpression property) : 
                    base(ctx)
            {
                _filegroup = filegroup;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Filegroup
            {
                get
                {
                    return _filegroup;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEPROPERTY LR_BRACKET file=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions17 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _file;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions17(ParserRuleContext ctx, AstExpression file, AstExpression property) : 
                    base(ctx)
            {
                _file = file;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression File
            {
                get
                {
                    return _file;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEPROPERTYEX LR_BRACKET name=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions18 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _name;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions18(ParserRuleContext ctx, AstExpression name, AstExpression property) : 
                    base(ctx)
            {
                _name = name;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Name
            {
                get
                {
                    return _name;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FULLTEXTCATALOGPROPERTY LR_BRACKET catalog=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions19 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _catalog;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions19(ParserRuleContext ctx, AstExpression catalog, AstExpression property) : 
                    base(ctx)
            {
                _catalog = catalog;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Catalog
            {
                get
                {
                    return _catalog;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FULLTEXTSERVICEPROPERTY LR_BRACKET property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions20 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions20(ParserRuleContext ctx, AstExpression property) : 
                    base(ctx)
            {
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEX_COL LR_BRACKET tableOrView=expression COMMA index=expression COMMA key=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions21 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _tableOrView;
            
            private AstExpression _index;
            
            private AstExpression _key;
            
            internal AstBuiltInFunctions21(ParserRuleContext ctx, AstExpression tableOrView, AstExpression index, AstExpression key) : 
                    base(ctx)
            {
                _tableOrView = tableOrView;
                _index = index;
                _key = key;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Tableorview
            {
                get
                {
                    return _tableOrView;
                }
            }
            
            public virtual AstExpression Index
            {
                get
                {
                    return _index;
                }
            }
            
            public virtual AstExpression Key
            {
                get
                {
                    return _key;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEXKEY_PROPERTY LR_BRACKET object=expression COMMA index=expression COMMA key=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions22 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _object;
            
            private AstExpression _index;
            
            private AstExpression _key;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions22(ParserRuleContext ctx, AstExpression @object, AstExpression index, AstExpression key, AstExpression property) : 
                    base(ctx)
            {
                _object = @object;
                _index = index;
                _key = key;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public virtual AstExpression Index
            {
                get
                {
                    return _index;
                }
            }
            
            public virtual AstExpression Key
            {
                get
                {
                    return _key;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEXPROPERTY LR_BRACKET object=expression COMMA index_or_statistics=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions23 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _object;
            
            private AstExpression _indexOrStatistics;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions23(ParserRuleContext ctx, AstExpression @object, AstExpression indexOrStatistics, AstExpression property) : 
                    base(ctx)
            {
                _object = @object;
                _indexOrStatistics = indexOrStatistics;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public virtual AstExpression IndexOrStatistics
            {
                get
                {
                    return _indexOrStatistics;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEXT VALUE FOR sequenceName=full_table_ref OVER LR_BRACKET order_by_clause RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions24 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstFullTableRef _sequenceName;
            
            private AstOrderByClause _orderByClause;
            
            internal AstBuiltInFunctions24(ParserRuleContext ctx, AstFullTableRef sequenceName, AstOrderByClause orderByClause) : 
                    base(ctx)
            {
                _sequenceName = sequenceName;
                _orderByClause = orderByClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullTableRef Sequencename
            {
                get
                {
                    return _sequenceName;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_DEFINITION LR_BRACKET object=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions25 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _object;
            
            internal AstBuiltInFunctions25(ParserRuleContext ctx, AstExpression @object) : 
                    base(ctx)
            {
                _object = @object;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_ID LR_BRACKET objectName=expression COMMA object_type=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions26 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _objectName;
            
            private AstExpression _objectType;
            
            internal AstBuiltInFunctions26(ParserRuleContext ctx, AstExpression objectName, AstExpression objectType) : 
                    base(ctx)
            {
                _objectName = objectName;
                _objectType = objectType;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Objectname
            {
                get
                {
                    return _objectName;
                }
            }
            
            public virtual AstExpression ObjectType
            {
                get
                {
                    return _objectType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_NAME LR_BRACKET object=expression COMMA database=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions27 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _object;
            
            private AstExpression _database;
            
            internal AstBuiltInFunctions27(ParserRuleContext ctx, AstExpression @object, AstExpression database) : 
                    base(ctx)
            {
                _object = @object;
                _database = database;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public virtual AstExpression Database
            {
                get
                {
                    return _database;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_SCHEMA_NAME LR_BRACKET target_object=expression COMMA database=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions28 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _targetObject;
            
            private AstExpression _database;
            
            internal AstBuiltInFunctions28(ParserRuleContext ctx, AstExpression targetObject, AstExpression database) : 
                    base(ctx)
            {
                _targetObject = targetObject;
                _database = database;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression TargetObject
            {
                get
                {
                    return _targetObject;
                }
            }
            
            public virtual AstExpression Database
            {
                get
                {
                    return _database;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECTPROPERTY LR_BRACKET idExpression=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions29 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _idExpression;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions29(ParserRuleContext ctx, AstExpression idExpression, AstExpression property) : 
                    base(ctx)
            {
                _idExpression = idExpression;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Idexpression
            {
                get
                {
                    return _idExpression;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECTPROPERTYEX LR_BRACKET idExpression=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions30 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _idExpression;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions30(ParserRuleContext ctx, AstExpression idExpression, AstExpression property) : 
                    base(ctx)
            {
                _idExpression = idExpression;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Idexpression
            {
                get
                {
                    return _idExpression;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ORIGINAL_DB_NAME LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions31 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions31(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PARSENAME LR_BRACKET objectName=expression COMMA object_piece=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions32 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _objectName;
            
            private AstExpression _objectPiece;
            
            internal AstBuiltInFunctions32(ParserRuleContext ctx, AstExpression objectName, AstExpression objectPiece) : 
                    base(ctx)
            {
                _objectName = objectName;
                _objectPiece = objectPiece;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Objectname
            {
                get
                {
                    return _objectName;
                }
            }
            
            public virtual AstExpression ObjectPiece
            {
                get
                {
                    return _objectPiece;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCHEMA_ID LR_BRACKET schemaName=expression? RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions33 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression? _schemaName;
            
            internal AstBuiltInFunctions33(ParserRuleContext ctx, AstExpression? schemaName) : 
                    base(ctx)
            {
                _schemaName = schemaName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression? Schemaname
            {
                get
                {
                    return _schemaName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCHEMA_NAME LR_BRACKET schemaId=expression? RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions34 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression? _schemaId;
            
            internal AstBuiltInFunctions34(ParserRuleContext ctx, AstExpression? schemaId) : 
                    base(ctx)
            {
                _schemaId = schemaId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression? Schemaid
            {
                get
                {
                    return _schemaId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCOPE_IDENTITY LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions35 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions35(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SERVERPROPERTY LR_BRACKET property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions36 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions36(ParserRuleContext ctx, AstExpression property) : 
                    base(ctx)
            {
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STATS_DATE LR_BRACKET target_object=expression COMMA stats=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions37 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _targetObject;
            
            private AstExpression _stats;
            
            internal AstBuiltInFunctions37(ParserRuleContext ctx, AstExpression targetObject, AstExpression stats) : 
                    base(ctx)
            {
                _targetObject = targetObject;
                _stats = stats;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression TargetObject
            {
                get
                {
                    return _targetObject;
                }
            }
            
            public virtual AstExpression Stats
            {
                get
                {
                    return _stats;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPE_ID LR_BRACKET type_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions38 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _typeName;
            
            internal AstBuiltInFunctions38(ParserRuleContext ctx, AstExpression typeName) : 
                    base(ctx)
            {
                _typeName = typeName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression TypeName
            {
                get
                {
                    return _typeName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPE_NAME LR_BRACKET type=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions39 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _type;
            
            internal AstBuiltInFunctions39(ParserRuleContext ctx, AstExpression type) : 
                    base(ctx)
            {
                _type = type;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Type
            {
                get
                {
                    return _type;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPEPROPERTY LR_BRACKET type=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions40 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _type;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions40(ParserRuleContext ctx, AstExpression type, AstExpression property) : 
                    base(ctx)
            {
                _type = type;
                _property = property;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Type
            {
                get
                {
                    return _type;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ASCII LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions41 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions41(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHAR LR_BRACKET integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions42 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions42(ParserRuleContext ctx, AstExpression integerExpression) : 
                    base(ctx)
            {
                _integerExpression = integerExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHARINDEX LR_BRACKET expressionToFind=expression COMMA expressionToSearch=expression COMMA start_location=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions43 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _expressionToFind;
            
            private AstExpression _expressionToSearch;
            
            private AstExpression _startLocation;
            
            internal AstBuiltInFunctions43(ParserRuleContext ctx, AstExpression expressionToFind, AstExpression expressionToSearch, AstExpression startLocation) : 
                    base(ctx)
            {
                _expressionToFind = expressionToFind;
                _expressionToSearch = expressionToSearch;
                _startLocation = startLocation;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expressiontofind
            {
                get
                {
                    return _expressionToFind;
                }
            }
            
            public virtual AstExpression Expressiontosearch
            {
                get
                {
                    return _expressionToSearch;
                }
            }
            
            public virtual AstExpression StartLocation
            {
                get
                {
                    return _startLocation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONCAT LR_BRACKET expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions44 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions44(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONCAT_WS LR_BRACKET expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions45 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions45(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DIFFERENCE LR_BRACKET character_expression_1=expression COMMA character_expression_2=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions46 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression1;
            
            private AstExpression _characterExpression2;
            
            internal AstBuiltInFunctions46(ParserRuleContext ctx, AstExpression characterExpression1, AstExpression characterExpression2) : 
                    base(ctx)
            {
                _characterExpression1 = characterExpression1;
                _characterExpression2 = characterExpression2;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression1
            {
                get
                {
                    return _characterExpression1;
                }
            }
            
            public virtual AstExpression CharacterExpression2
            {
                get
                {
                    return _characterExpression2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FORMAT LR_BRACKET expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions47 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions47(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LEFT LR_BRACKET character_expression=expression COMMA integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions48 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions48(ParserRuleContext ctx, AstExpression characterExpression, AstExpression integerExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
                _integerExpression = integerExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LEN LR_BRACKET string_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions49 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _stringExpression;
            
            internal AstBuiltInFunctions49(ParserRuleContext ctx, AstExpression stringExpression) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LOWER LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions50 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions50(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LTRIM LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions51 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions51(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NCHAR LR_BRACKET integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions52 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions52(ParserRuleContext ctx, AstExpression integerExpression) : 
                    base(ctx)
            {
                _integerExpression = integerExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PATINDEX LR_BRACKET pattern=expression COMMA string_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions53 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _pattern;
            
            private AstExpression _stringExpression;
            
            internal AstBuiltInFunctions53(ParserRuleContext ctx, AstExpression pattern, AstExpression stringExpression) : 
                    base(ctx)
            {
                _pattern = pattern;
                _stringExpression = stringExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Pattern
            {
                get
                {
                    return _pattern;
                }
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : QUOTENAME LR_BRACKET character_string=expression COMMA quote_character=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions54 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterString;
            
            private AstExpression _quoteCharacter;
            
            internal AstBuiltInFunctions54(ParserRuleContext ctx, AstExpression characterString, AstExpression quoteCharacter) : 
                    base(ctx)
            {
                _characterString = characterString;
                _quoteCharacter = quoteCharacter;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterString
            {
                get
                {
                    return _characterString;
                }
            }
            
            public virtual AstExpression QuoteCharacter
            {
                get
                {
                    return _quoteCharacter;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REPLACE LR_BRACKET input=expression COMMA replacing=expression COMMA with=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions55 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _input;
            
            private AstExpression _replacing;
            
            private AstExpression _with;
            
            internal AstBuiltInFunctions55(ParserRuleContext ctx, AstExpression input, AstExpression replacing, AstExpression with) : 
                    base(ctx)
            {
                _input = input;
                _replacing = replacing;
                _with = with;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Input
            {
                get
                {
                    return _input;
                }
            }
            
            public virtual AstExpression Replacing
            {
                get
                {
                    return _replacing;
                }
            }
            
            public virtual AstExpression With
            {
                get
                {
                    return _with;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REPLICATE LR_BRACKET string_expression=expression COMMA integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions56 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _stringExpression;
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions56(ParserRuleContext ctx, AstExpression stringExpression, AstExpression integerExpression) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
                _integerExpression = integerExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REVERSE LR_BRACKET string_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions57 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _stringExpression;
            
            internal AstBuiltInFunctions57(ParserRuleContext ctx, AstExpression stringExpression) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : RIGHT LR_BRACKET character_expression=expression COMMA integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions58 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions58(ParserRuleContext ctx, AstExpression characterExpression, AstExpression integerExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
                _integerExpression = integerExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : RTRIM LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions59 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions59(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SOUNDEX LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions60 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions60(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SPACE_KEYWORD LR_BRACKET integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions61 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions61(ParserRuleContext ctx, AstExpression integerExpression) : 
                    base(ctx)
            {
                _integerExpression = integerExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STR LR_BRACKET float_expression=expression COMMA length_expression=expression COMMA decimal_expr=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions62 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _floatExpression;
            
            private AstExpression _lengthExpression;
            
            private AstExpression _decimalExpr;
            
            internal AstBuiltInFunctions62(ParserRuleContext ctx, AstExpression floatExpression, AstExpression lengthExpression, AstExpression decimalExpr) : 
                    base(ctx)
            {
                _floatExpression = floatExpression;
                _lengthExpression = lengthExpression;
                _decimalExpr = decimalExpr;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression FloatExpression
            {
                get
                {
                    return _floatExpression;
                }
            }
            
            public virtual AstExpression LengthExpression
            {
                get
                {
                    return _lengthExpression;
                }
            }
            
            public virtual AstExpression DecimalExpr
            {
                get
                {
                    return _decimalExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STRING_AGG LR_BRACKET expr=expression COMMA separator=expression RR_BRACKET WITHIN GROUP LR_BRACKET order_by_clause RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions63 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _expr;
            
            private AstExpression _separator;
            
            private AstOrderByClause _orderByClause;
            
            internal AstBuiltInFunctions63(ParserRuleContext ctx, AstExpression expr, AstExpression separator, AstOrderByClause orderByClause) : 
                    base(ctx)
            {
                _expr = expr;
                _separator = separator;
                _orderByClause = orderByClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expr
            {
                get
                {
                    return _expr;
                }
            }
            
            public virtual AstExpression Separator
            {
                get
                {
                    return _separator;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STRING_ESCAPE LR_BRACKET text_=expression COMMA type_=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions64 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _text;
            
            private AstExpression _type;
            
            internal AstBuiltInFunctions64(ParserRuleContext ctx, AstExpression text, AstExpression type) : 
                    base(ctx)
            {
                _text = text;
                _type = type;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Text
            {
                get
                {
                    return _text;
                }
            }
            
            public virtual AstExpression Type
            {
                get
                {
                    return _type;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STUFF LR_BRACKET str=expression COMMA from=decimal COMMA to=decimal COMMA str_with=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions65 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _str;
            
            private AstDecimal _from;
            
            private AstDecimal _to;
            
            private AstExpression _strWith;
            
            internal AstBuiltInFunctions65(ParserRuleContext ctx, AstExpression str, AstDecimal from, AstDecimal to, AstExpression strWith) : 
                    base(ctx)
            {
                _str = str;
                _from = from;
                _to = to;
                _strWith = strWith;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Str
            {
                get
                {
                    return _str;
                }
            }
            
            public virtual AstDecimal From
            {
                get
                {
                    return _from;
                }
            }
            
            public virtual AstDecimal To
            {
                get
                {
                    return _to;
                }
            }
            
            public virtual AstExpression StrWith
            {
                get
                {
                    return _strWith;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SUBSTRING LR_BRACKET string_expression=expression COMMA start_=expression COMMA length=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions66 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _stringExpression;
            
            private AstExpression _start;
            
            private AstExpression _length;
            
            internal AstBuiltInFunctions66(ParserRuleContext ctx, AstExpression stringExpression, AstExpression start, AstExpression length) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
                _start = start;
                _length = length;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public virtual AstExpression Start
            {
                get
                {
                    return _start;
                }
            }
            
            public virtual AstExpression Length
            {
                get
                {
                    return _length;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRANSLATE LR_BRACKET inputString=expression COMMA characters=expression COMMA translations=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions67 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _inputString;
            
            private AstExpression _characters;
            
            private AstExpression _translations;
            
            internal AstBuiltInFunctions67(ParserRuleContext ctx, AstExpression inputString, AstExpression characters, AstExpression translations) : 
                    base(ctx)
            {
                _inputString = inputString;
                _characters = characters;
                _translations = translations;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Inputstring
            {
                get
                {
                    return _inputString;
                }
            }
            
            public virtual AstExpression Characters
            {
                get
                {
                    return _characters;
                }
            }
            
            public virtual AstExpression Translations
            {
                get
                {
                    return _translations;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRIM LR_BRACKET characters=expression FROM string_=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions68 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characters;
            
            private AstExpression _string;
            
            internal AstBuiltInFunctions68(ParserRuleContext ctx, AstExpression characters, AstExpression @string) : 
                    base(ctx)
            {
                _characters = characters;
                _string = @string;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Characters
            {
                get
                {
                    return _characters;
                }
            }
            
            public virtual AstExpression String
            {
                get
                {
                    return _string;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : UNICODE LR_BRACKET ncharacter_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions69 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _ncharacterExpression;
            
            internal AstBuiltInFunctions69(ParserRuleContext ctx, AstExpression ncharacterExpression) : 
                    base(ctx)
            {
                _ncharacterExpression = ncharacterExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression NcharacterExpression
            {
                get
                {
                    return _ncharacterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : UPPER LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions70 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions70(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : BINARY_CHECKSUM LR_BRACKET expression_or_star RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions71 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpressionOrStar _expressionOrStar;
            
            internal AstBuiltInFunctions71(ParserRuleContext ctx, AstExpressionOrStar expressionOrStar) : 
                    base(ctx)
            {
                _expressionOrStar = expressionOrStar;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressionOrStar ExpressionOrStar
            {
                get
                {
                    return _expressionOrStar;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHECKSUM LR_BRACKET expression_or_star RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions72 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpressionOrStar _expressionOrStar;
            
            internal AstBuiltInFunctions72(ParserRuleContext ctx, AstExpressionOrStar expressionOrStar) : 
                    base(ctx)
            {
                _expressionOrStar = expressionOrStar;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressionOrStar ExpressionOrStar
            {
                get
                {
                    return _expressionOrStar;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COMPRESS LR_BRACKET expr=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions73 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _expr;
            
            internal AstBuiltInFunctions73(ParserRuleContext ctx, AstExpression expr) : 
                    base(ctx)
            {
                _expr = expr;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expr
            {
                get
                {
                    return _expr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONNECTIONPROPERTY LR_BRACKET cnx_property=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions74 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstStringtext _cnxProperty;
            
            internal AstBuiltInFunctions74(ParserRuleContext ctx, AstStringtext cnxProperty) : 
                    base(ctx)
            {
                _cnxProperty = cnxProperty;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext CnxProperty
            {
                get
                {
                    return _cnxProperty;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONTEXT_INFO LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions75 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions75(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_REQUEST_ID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions76 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions76(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_TRANSACTION_ID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions77 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions77(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DECOMPRESS LR_BRACKET expr=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions78 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _expr;
            
            internal AstBuiltInFunctions78(ParserRuleContext ctx, AstExpression expr) : 
                    base(ctx)
            {
                _expr = expr;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expr
            {
                get
                {
                    return _expr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_LINE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions79 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions79(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_MESSAGE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions80 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions80(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_NUMBER LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions81 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions81(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_PROCEDURE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions82 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions82(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_SEVERITY LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions83 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions83(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_STATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions84 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions84(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FORMATMESSAGE LR_BRACKET format_argument COMMA expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions85 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstFormatArgument _formatArgument;
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions85(ParserRuleContext ctx, AstFormatArgument formatArgument, AstExpressions expressions) : 
                    base(ctx)
            {
                _formatArgument = formatArgument;
                _expressions = expressions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFormatArgument FormatArgument
            {
                get
                {
                    return _formatArgument;
                }
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GET_FILESTREAM_TRANSACTION_CONTEXT LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions86 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions86(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETANSINULL LR_BRACKET database_name=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions87 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstStringtext _databaseName;
            
            internal AstBuiltInFunctions87(ParserRuleContext ctx, AstStringtext databaseName) : 
                    base(ctx)
            {
                _databaseName = databaseName;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext DatabaseName
            {
                get
                {
                    return _databaseName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : HOST_ID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions88 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions88(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : HOST_NAME LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions89 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions89(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ISNULL LR_BRACKET left=expression COMMA right=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions90 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _left;
            
            private AstExpression _right;
            
            internal AstBuiltInFunctions90(ParserRuleContext ctx, AstExpression left, AstExpression right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ISNUMERIC LR_BRACKET expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions91 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _expression;
            
            internal AstBuiltInFunctions91(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEWID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions92 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions92(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEWSEQUENTIALID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions93 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions93(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ROWCOUNT_BIG LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions94 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions94(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SESSION_CONTEXT LR_BRACKET session_key=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions95 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstStringtext _sessionKey;
            
            internal AstBuiltInFunctions95(ParserRuleContext ctx, AstStringtext sessionKey) : 
                    base(ctx)
            {
                _sessionKey = sessionKey;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext SessionKey
            {
                get
                {
                    return _sessionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : XACT_STATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions96 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions96(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CAST LR_BRACKET expression AS data_type RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions97 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _expression;
            
            private AstDataType _dataType;
            
            internal AstBuiltInFunctions97(ParserRuleContext ctx, AstExpression expression, AstDataType dataType) : 
                    base(ctx)
            {
                _expression = expression;
                _dataType = dataType;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRY_CAST LR_BRACKET expression AS data_type RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions98 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _expression;
            
            private AstDataType _dataType;
            
            internal AstBuiltInFunctions98(ParserRuleContext ctx, AstExpression expression, AstDataType dataType) : 
                    base(ctx)
            {
                _expression = expression;
                _dataType = dataType;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONVERT LR_BRACKET convert_data_type=data_type COMMA expression2 RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions99 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstDataType _convertDataType;
            
            private AstExpression2 _expression2;
            
            internal AstBuiltInFunctions99(ParserRuleContext ctx, AstDataType convertDataType, AstExpression2 expression2) : 
                    base(ctx)
            {
                _convertDataType = convertDataType;
                _expression2 = expression2;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDataType ConvertDataType
            {
                get
                {
                    return _convertDataType;
                }
            }
            
            public virtual AstExpression2 Expression2
            {
                get
                {
                    return _expression2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COALESCE LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions100 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpressionList _expressionList;
            
            internal AstBuiltInFunctions100(ParserRuleContext ctx, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _expressionList = expressionList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_DATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions101 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions101(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_TIMESTAMP 
        /// </summary>
        public partial class AstBuiltInFunctions102 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions102(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_USER 
        /// </summary>
        public partial class AstBuiltInFunctions103 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions103(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEADD LR_BRACKET datepart=id_simple COMMA number=expression COMMA date=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions104 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstIdSimple _datepart;
            
            private AstExpression _number;
            
            private AstExpression _date;
            
            internal AstBuiltInFunctions104(ParserRuleContext ctx, AstIdSimple datepart, AstExpression number, AstExpression date) : 
                    base(ctx)
            {
                _datepart = datepart;
                _number = number;
                _date = date;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression Number
            {
                get
                {
                    return _number;
                }
            }
            
            public virtual AstExpression Date
            {
                get
                {
                    return _date;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEDIFF LR_BRACKET datepart=id_simple COMMA date_first=expression COMMA date_second=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions105 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstIdSimple _datepart;
            
            private AstExpression _dateFirst;
            
            private AstExpression _dateSecond;
            
            internal AstBuiltInFunctions105(ParserRuleContext ctx, AstIdSimple datepart, AstExpression dateFirst, AstExpression dateSecond) : 
                    base(ctx)
            {
                _datepart = datepart;
                _dateFirst = dateFirst;
                _dateSecond = dateSecond;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression DateFirst
            {
                get
                {
                    return _dateFirst;
                }
            }
            
            public virtual AstExpression DateSecond
            {
                get
                {
                    return _dateSecond;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATENAME LR_BRACKET datepart=id_simple COMMA date=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions106 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstIdSimple _datepart;
            
            private AstExpression _date;
            
            internal AstBuiltInFunctions106(ParserRuleContext ctx, AstIdSimple datepart, AstExpression date) : 
                    base(ctx)
            {
                _datepart = datepart;
                _date = date;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression Date
            {
                get
                {
                    return _date;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEPART LR_BRACKET datepart=id_simple COMMA date=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions107 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstIdSimple _datepart;
            
            private AstExpression _date;
            
            internal AstBuiltInFunctions107(ParserRuleContext ctx, AstIdSimple datepart, AstExpression date) : 
                    base(ctx)
            {
                _datepart = datepart;
                _date = date;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression Date
            {
                get
                {
                    return _date;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETDATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions108 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions108(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETUTCDATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions109 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions109(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : IDENTITY LR_BRACKET data_type COMMA seed=decimal COMMA increment=decimal RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions110 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstDataType _dataType;
            
            private AstDecimal _seed;
            
            private AstDecimal _increment;
            
            internal AstBuiltInFunctions110(ParserRuleContext ctx, AstDataType dataType, AstDecimal seed, AstDecimal increment) : 
                    base(ctx)
            {
                _dataType = dataType;
                _seed = seed;
                _increment = increment;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public virtual AstDecimal Seed
            {
                get
                {
                    return _seed;
                }
            }
            
            public virtual AstDecimal Increment
            {
                get
                {
                    return _increment;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NULLIF LR_BRACKET left=expression COMMA right=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions111 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _left;
            
            private AstExpression _right;
            
            internal AstBuiltInFunctions111(ParserRuleContext ctx, AstExpression left, AstExpression right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SESSION_USER 
        /// </summary>
        public partial class AstBuiltInFunctions112 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions112(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SYSTEM_USER 
        /// </summary>
        public partial class AstBuiltInFunctions113 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions113(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : USER 
        /// </summary>
        public partial class AstBuiltInFunctions114 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            internal AstBuiltInFunctions114(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PARSE LR_BRACKET str=expression AS data_type USING culture=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions115 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstExpression _str;
            
            private AstDataType _dataType;
            
            private AstExpression _culture;
            
            internal AstBuiltInFunctions115(ParserRuleContext ctx, AstExpression str, AstDataType dataType, AstExpression culture) : 
                    base(ctx)
            {
                _str = str;
                _dataType = dataType;
                _culture = culture;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Str
            {
                get
                {
                    return _str;
                }
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public virtual AstExpression Culture
            {
                get
                {
                    return _culture;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : xml_data_type_methods 
        /// </summary>
        public partial class AstBuiltInFunctions116 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstXmlDataTypeMethods _xmlDataTypeMethods;
            
            internal AstBuiltInFunctions116(ParserRuleContext ctx, AstXmlDataTypeMethods xmlDataTypeMethods) : 
                    base(ctx)
            {
                _xmlDataTypeMethods = xmlDataTypeMethods;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstXmlDataTypeMethods XmlDataTypeMethods
            {
                get
                {
                    return _xmlDataTypeMethods;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : IIF LR_BRACKET cond=search_condition COMMA left=expression COMMA right=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions117 : AstBuiltInFunctions
        {
            
            private static string _ruleName1 = "built_in_functions";
            
            private AstSearchCondition _cond;
            
            private AstExpression _left;
            
            private AstExpression _right;
            
            internal AstBuiltInFunctions117(ParserRuleContext ctx, AstSearchCondition cond, AstExpression left, AstExpression right) : 
                    base(ctx)
            {
                _cond = cond;
                _left = left;
                _right = right;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSearchCondition Cond
            {
                get
                {
                    return _cond;
                }
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        

        
        internal AstBuiltInFunctions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBuiltInFunctions(Position p) : 
                base(p)
        {
        }
        
        internal AstBuiltInFunctions(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstBuiltInFunctions Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions1(ctx);
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions2(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions3(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2), list.Get<AstExpression>(3));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions4(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 5))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions5(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 6))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions6(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 7))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions7(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 8))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions8(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 9))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions9(ctx, list.Get<AstExpression?>(0));
            }
            if ((index == 10))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions10(ctx, list.Get<AstExpression?>(0));
            }
            if ((index == 11))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions11(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 12))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions12(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 13))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions13(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 14))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions14(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 15))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions15(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 16))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions16(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 17))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions17(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 18))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions18(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 19))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions19(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 20))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions20(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 21))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions21(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 22))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions22(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2), list.Get<AstExpression>(3));
            }
            if ((index == 23))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions23(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 24))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions24(ctx, list.Get<AstFullTableRef>(0), list.Get<AstOrderByClause>(1));
            }
            if ((index == 25))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions25(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 26))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions26(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 27))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions27(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 28))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions28(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 29))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions29(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 30))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions30(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 31))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions31(ctx);
            }
            if ((index == 32))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions32(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 33))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions33(ctx, list.Get<AstExpression?>(0));
            }
            if ((index == 34))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions34(ctx, list.Get<AstExpression?>(0));
            }
            if ((index == 35))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions35(ctx);
            }
            if ((index == 36))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions36(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 37))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions37(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 38))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions38(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 39))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions39(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 40))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions40(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 41))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions41(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 42))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions42(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 43))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions43(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 44))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions44(ctx, list.Get<AstExpressions>(0));
            }
            if ((index == 45))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions45(ctx, list.Get<AstExpressions>(0));
            }
            if ((index == 46))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions46(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 47))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions47(ctx, list.Get<AstExpressions>(0));
            }
            if ((index == 48))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions48(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 49))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions49(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 50))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions50(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 51))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions51(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 52))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions52(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 53))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions53(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 54))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions54(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 55))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions55(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 56))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions56(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 57))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions57(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 58))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions58(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 59))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions59(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 60))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions60(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 61))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions61(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 62))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions62(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 63))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions63(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstOrderByClause>(2));
            }
            if ((index == 64))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions64(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 65))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions65(ctx, list.Get<AstExpression>(0), list.Get<AstDecimal>(1), list.Get<AstDecimal>(2), list.Get<AstExpression>(3));
            }
            if ((index == 66))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions66(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 67))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions67(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 68))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions68(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 69))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions69(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 70))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions70(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 71))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions71(ctx, list.Get<AstExpressionOrStar>(0));
            }
            if ((index == 72))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions72(ctx, list.Get<AstExpressionOrStar>(0));
            }
            if ((index == 73))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions73(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 74))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions74(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 75))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions75(ctx);
            }
            if ((index == 76))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions76(ctx);
            }
            if ((index == 77))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions77(ctx);
            }
            if ((index == 78))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions78(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 79))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions79(ctx);
            }
            if ((index == 80))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions80(ctx);
            }
            if ((index == 81))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions81(ctx);
            }
            if ((index == 82))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions82(ctx);
            }
            if ((index == 83))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions83(ctx);
            }
            if ((index == 84))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions84(ctx);
            }
            if ((index == 85))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions85(ctx, list.Get<AstFormatArgument>(0), list.Get<AstExpressions>(1));
            }
            if ((index == 86))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions86(ctx);
            }
            if ((index == 87))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions87(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 88))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions88(ctx);
            }
            if ((index == 89))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions89(ctx);
            }
            if ((index == 90))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions90(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 91))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions91(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 92))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions92(ctx);
            }
            if ((index == 93))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions93(ctx);
            }
            if ((index == 94))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions94(ctx);
            }
            if ((index == 95))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions95(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 96))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions96(ctx);
            }
            if ((index == 97))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions97(ctx, list.Get<AstExpression>(0), list.Get<AstDataType>(1));
            }
            if ((index == 98))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions98(ctx, list.Get<AstExpression>(0), list.Get<AstDataType>(1));
            }
            if ((index == 99))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions99(ctx, list.Get<AstDataType>(0), list.Get<AstExpression2>(1));
            }
            if ((index == 100))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions100(ctx, list.Get<AstExpressionList>(0));
            }
            if ((index == 101))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions101(ctx);
            }
            if ((index == 102))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions102(ctx);
            }
            if ((index == 103))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions103(ctx);
            }
            if ((index == 104))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions104(ctx, list.Get<AstIdSimple>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 105))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions105(ctx, list.Get<AstIdSimple>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            if ((index == 106))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions106(ctx, list.Get<AstIdSimple>(0), list.Get<AstExpression>(1));
            }
            if ((index == 107))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions107(ctx, list.Get<AstIdSimple>(0), list.Get<AstExpression>(1));
            }
            if ((index == 108))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions108(ctx);
            }
            if ((index == 109))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions109(ctx);
            }
            if ((index == 110))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions110(ctx, list.Get<AstDataType>(0), list.Get<AstDecimal>(1), list.Get<AstDecimal>(2));
            }
            if ((index == 111))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions111(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 112))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions112(ctx);
            }
            if ((index == 113))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions113(ctx);
            }
            if ((index == 114))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions114(ctx);
            }
            if ((index == 115))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions115(ctx, list.Get<AstExpression>(0), list.Get<AstDataType>(1), list.Get<AstExpression>(2));
            }
            if ((index == 116))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions116(ctx, list.Get<AstXmlDataTypeMethods>(0));
            }
            if ((index == 117))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions117(ctx, list.Get<AstSearchCondition>(0), list.Get<AstExpression>(1), list.Get<AstExpression>(2));
            }
            return null;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APP_NAME ( ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx)
        {
            AstBuiltInFunctions.AstBuiltInFunctions1 result = new AstBuiltInFunctions.AstBuiltInFunctions1(ctx);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APPLOCK_MODE ( database_principal=expression , resource_name=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockOwner)
        {
            AstBuiltInFunctions.AstBuiltInFunctions2 result = new AstBuiltInFunctions.AstBuiltInFunctions2(ctx, databasePrincipal, resourceName, lockOwner);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APPLOCK_TEST ( database_principal=expression , resource_name=expression , lockmode=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockmode, AstExpression lockOwner)
        {
            AstBuiltInFunctions.AstBuiltInFunctions3 result = new AstBuiltInFunctions.AstBuiltInFunctions3(ctx, databasePrincipal, resourceName, lockmode, lockOwner);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    ASSEMBLYPROPERTY ( assemblyName=expression , propertyName=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression assemblyName, AstExpression propertyName)
        {
            AstBuiltInFunctions.AstBuiltInFunctions4 result = new AstBuiltInFunctions.AstBuiltInFunctions4(ctx, assemblyName, propertyName);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DB_ID ( databaseName=expression? ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression databaseName)
        {
            AstBuiltInFunctions.AstBuiltInFunctions9 result = new AstBuiltInFunctions.AstBuiltInFunctions9(ctx, databaseName);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    NEXT VALUE FOR sequenceName=full_table_ref OVER ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstFullTableRef sequenceName, AstOrderByClause orderByClause)
        {
            AstBuiltInFunctions.AstBuiltInFunctions24 result = new AstBuiltInFunctions.AstBuiltInFunctions24(ctx, sequenceName, orderByClause);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONCAT ( expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpressions expressions)
        {
            AstBuiltInFunctions.AstBuiltInFunctions44 result = new AstBuiltInFunctions.AstBuiltInFunctions44(ctx, expressions);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    STRING_AGG ( expr=expression , separator=expression ) WITHIN GROUP ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression expr, AstExpression separator, AstOrderByClause orderByClause)
        {
            AstBuiltInFunctions.AstBuiltInFunctions63 result = new AstBuiltInFunctions.AstBuiltInFunctions63(ctx, expr, separator, orderByClause);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    STUFF ( str=expression , from=decimal , to=decimal , str_with=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression str, AstDecimal from, AstDecimal to, AstExpression strWith)
        {
            AstBuiltInFunctions.AstBuiltInFunctions65 result = new AstBuiltInFunctions.AstBuiltInFunctions65(ctx, str, from, to, strWith);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    BINARY_CHECKSUM ( expression_or_star ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpressionOrStar expressionOrStar)
        {
            AstBuiltInFunctions.AstBuiltInFunctions71 result = new AstBuiltInFunctions.AstBuiltInFunctions71(ctx, expressionOrStar);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONNECTIONPROPERTY ( cnx_property=stringtext ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstStringtext cnxProperty)
        {
            AstBuiltInFunctions.AstBuiltInFunctions74 result = new AstBuiltInFunctions.AstBuiltInFunctions74(ctx, cnxProperty);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    FORMATMESSAGE ( format_argument , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstFormatArgument formatArgument, AstExpressions expressions)
        {
            AstBuiltInFunctions.AstBuiltInFunctions85 result = new AstBuiltInFunctions.AstBuiltInFunctions85(ctx, formatArgument, expressions);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CAST ( expression AS data_type ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression expression, AstDataType dataType)
        {
            AstBuiltInFunctions.AstBuiltInFunctions97 result = new AstBuiltInFunctions.AstBuiltInFunctions97(ctx, expression, dataType);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONVERT ( convert_data_type=data_type , expression2 ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstDataType convertDataType, AstExpression2 expression2)
        {
            AstBuiltInFunctions.AstBuiltInFunctions99 result = new AstBuiltInFunctions.AstBuiltInFunctions99(ctx, convertDataType, expression2);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    COALESCE ( expression_list ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpressionList expressionList)
        {
            AstBuiltInFunctions.AstBuiltInFunctions100 result = new AstBuiltInFunctions.AstBuiltInFunctions100(ctx, expressionList);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DATEADD ( datepart=id_simple , number=expression , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstIdSimple datepart, AstExpression number, AstExpression date)
        {
            AstBuiltInFunctions.AstBuiltInFunctions104 result = new AstBuiltInFunctions.AstBuiltInFunctions104(ctx, datepart, number, date);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DATENAME ( datepart=id_simple , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstIdSimple datepart, AstExpression date)
        {
            AstBuiltInFunctions.AstBuiltInFunctions106 result = new AstBuiltInFunctions.AstBuiltInFunctions106(ctx, datepart, date);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    IDENTITY ( data_type , seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstDataType dataType, AstDecimal seed, AstDecimal increment)
        {
            AstBuiltInFunctions.AstBuiltInFunctions110 result = new AstBuiltInFunctions.AstBuiltInFunctions110(ctx, dataType, seed, increment);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    PARSE ( str=expression AS data_type USING culture=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression str, AstDataType dataType, AstExpression culture)
        {
            AstBuiltInFunctions.AstBuiltInFunctions115 result = new AstBuiltInFunctions.AstBuiltInFunctions115(ctx, str, dataType, culture);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    xml_data_type_methods 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstXmlDataTypeMethods xmlDataTypeMethods)
        {
            AstBuiltInFunctions.AstBuiltInFunctions116 result = new AstBuiltInFunctions.AstBuiltInFunctions116(ctx, xmlDataTypeMethods);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    IIF ( cond=search_condition , left=expression , right=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstSearchCondition cond, AstExpression left, AstExpression right)
        {
            AstBuiltInFunctions.AstBuiltInFunctions117 result = new AstBuiltInFunctions.AstBuiltInFunctions117(ctx, cond, left, right);
            return result;
        }
    }
    
    /// <summary>
    /// expression_or_star
    /// 	 : STAR
    /// 	 | expressions
    /// </summary>
    public abstract partial class AstExpressionOrStar : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressions), false, false, "expressions"))));
        
        private static string _ruleValue = "STAR\r\n | expressions\r\n";
        
        private static string _ruleName = "expression_or_star";
        
        /// <summary>
        /// expression_or_star : STAR 
        /// </summary>
        public partial class AstExpressionOrStar1 : AstExpressionOrStar
        {
            
            private static string _ruleName1 = "expression_or_star";
            
            internal AstExpressionOrStar1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionOrStar(this);
            }
        }
        /// <summary>
        /// expression_or_star : expressions 
        /// </summary>
        public partial class AstExpressionOrStar2 : AstExpressionOrStar
        {
            
            private static string _ruleName1 = "expression_or_star";
            
            private AstExpressions _expressions;
            
            internal AstExpressionOrStar2(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionOrStar(this);
            }
        }
        

        
        internal AstExpressionOrStar(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpressionOrStar(Position p) : 
                base(p)
        {
        }
        
        internal AstExpressionOrStar(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExpressionOrStar Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExpressionOrStar.AstExpressionOrStar1(ctx);
            }
            if ((index == 2))
            {
                return new AstExpressionOrStar.AstExpressionOrStar2(ctx, list.Get<AstExpressions>(0));
            }
            return null;
        }
        
        /// <summary>
        /// expression_or_star : 
        ///    STAR 
        /// </summary>
        public static AstExpressionOrStar ExpressionOrStar(ParserRuleContext ctx)
        {
            AstExpressionOrStar.AstExpressionOrStar1 result = new AstExpressionOrStar.AstExpressionOrStar1(ctx);
            return result;
        }
        
        /// <summary>
        /// expression_or_star : 
        ///    expressions 
        /// </summary>
        public static AstExpressionOrStar ExpressionOrStar(ParserRuleContext ctx, AstExpressions expressions)
        {
            AstExpressionOrStar.AstExpressionOrStar2 result = new AstExpressionOrStar.AstExpressionOrStar2(ctx, expressions);
            return result;
        }
    }
    
    /// <summary>
    /// format_argument
    /// 	 : decimal
    /// 	 | stringtext
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstFormatArgument : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"))));
        
        private static string _ruleValue = "decimal\r\n | stringtext\r\n | local_id\r\n";
        
        private static string _ruleName = "format_argument";
        
        /// <summary>
        /// format_argument : decimal 
        /// </summary>
        public partial class AstFormatArgument1 : AstFormatArgument
        {
            
            private static string _ruleName1 = "format_argument";
            
            private AstDecimal _decimal;
            
            internal AstFormatArgument1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFormatArgument(this);
            }
        }
        /// <summary>
        /// format_argument : stringtext 
        /// </summary>
        public partial class AstFormatArgument2 : AstFormatArgument
        {
            
            private static string _ruleName1 = "format_argument";
            
            private AstStringtext _stringtext;
            
            internal AstFormatArgument2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFormatArgument(this);
            }
        }
        /// <summary>
        /// format_argument : local_id 
        /// </summary>
        public partial class AstFormatArgument3 : AstFormatArgument
        {
            
            private static string _ruleName1 = "format_argument";
            
            private AstLocalId _localId;
            
            internal AstFormatArgument3(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFormatArgument(this);
            }
        }
        

        
        internal AstFormatArgument(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFormatArgument(Position p) : 
                base(p)
        {
        }
        
        internal AstFormatArgument(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstFormatArgument Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstFormatArgument.AstFormatArgument1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstFormatArgument.AstFormatArgument2(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 3))
            {
                return new AstFormatArgument.AstFormatArgument3(ctx, list.Get<AstLocalId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// format_argument : 
        ///    decimal 
        /// </summary>
        public static AstFormatArgument FormatArgument(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstFormatArgument.AstFormatArgument1 result = new AstFormatArgument.AstFormatArgument1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// format_argument : 
        ///    stringtext 
        /// </summary>
        public static AstFormatArgument FormatArgument(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstFormatArgument.AstFormatArgument2 result = new AstFormatArgument.AstFormatArgument2(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// format_argument : 
        ///    local_id 
        /// </summary>
        public static AstFormatArgument FormatArgument(ParserRuleContext ctx, AstLocalId localId)
        {
            AstFormatArgument.AstFormatArgument3 result = new AstFormatArgument.AstFormatArgument3(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// xml_data_type_methods
    /// 	 : value_method
    /// 	 | query_method
    /// 	 | exist_method
    /// 	 | modify_method
    /// </summary>
    public abstract partial class AstXmlDataTypeMethods : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstValueMethod), false, false, "value_method")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryMethod), false, false, "query_method")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstExistMethod), false, false, "exist_method")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstModifyMethod), false, false, "modify_method"))));
        
        private static string _ruleValue = "value_method\r\n | query_method\r\n | exist_method\r\n | modify_method\r\n";
        
        private static string _ruleName = "xml_data_type_methods";
        
        /// <summary>
        /// xml_data_type_methods : value_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods1 : AstXmlDataTypeMethods
        {
            
            private static string _ruleName1 = "xml_data_type_methods";
            
            private AstValueMethod _valueMethod;
            
            internal AstXmlDataTypeMethods1(ParserRuleContext ctx, AstValueMethod valueMethod) : 
                    base(ctx)
            {
                _valueMethod = valueMethod;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstValueMethod ValueMethod
            {
                get
                {
                    return _valueMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : query_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods2 : AstXmlDataTypeMethods
        {
            
            private static string _ruleName1 = "xml_data_type_methods";
            
            private AstQueryMethod _queryMethod;
            
            internal AstXmlDataTypeMethods2(ParserRuleContext ctx, AstQueryMethod queryMethod) : 
                    base(ctx)
            {
                _queryMethod = queryMethod;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueryMethod QueryMethod
            {
                get
                {
                    return _queryMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : exist_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods3 : AstXmlDataTypeMethods
        {
            
            private static string _ruleName1 = "xml_data_type_methods";
            
            private AstExistMethod _existMethod;
            
            internal AstXmlDataTypeMethods3(ParserRuleContext ctx, AstExistMethod existMethod) : 
                    base(ctx)
            {
                _existMethod = existMethod;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExistMethod ExistMethod
            {
                get
                {
                    return _existMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : modify_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods4 : AstXmlDataTypeMethods
        {
            
            private static string _ruleName1 = "xml_data_type_methods";
            
            private AstModifyMethod _modifyMethod;
            
            internal AstXmlDataTypeMethods4(ParserRuleContext ctx, AstModifyMethod modifyMethod) : 
                    base(ctx)
            {
                _modifyMethod = modifyMethod;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstModifyMethod ModifyMethod
            {
                get
                {
                    return _modifyMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        

        
        internal AstXmlDataTypeMethods(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlDataTypeMethods(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlDataTypeMethods(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstXmlDataTypeMethods Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods1(ctx, list.Get<AstValueMethod>(0));
            }
            if ((index == 2))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods2(ctx, list.Get<AstQueryMethod>(0));
            }
            if ((index == 3))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods3(ctx, list.Get<AstExistMethod>(0));
            }
            if ((index == 4))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods4(ctx, list.Get<AstModifyMethod>(0));
            }
            return null;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    value_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstValueMethod valueMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods1 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods1(ctx, valueMethod);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    query_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstQueryMethod queryMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods2 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods2(ctx, queryMethod);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    exist_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstExistMethod existMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods3 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods3(ctx, existMethod);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    modify_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstModifyMethod modifyMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods4 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods4(ctx, modifyMethod);
            return result;
        }
    }
    
    /// <summary>
    /// value_method
    /// 	 : (loc = local_id | value = full_column_name | eventdata = EVENTDATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = value_call
    /// </summary>
    public abstract partial class AstValueMethod : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstValueCall), false, false, "value_call")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstValueCall), false, false, "value_call")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryMethod), false, false, "query_method"), new Bb.Asts.AstRuleMatcherItem(typeof(AstValueCall), false, false, "value_call")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery"), new Bb.Asts.AstRuleMatcherItem(typeof(AstValueCall), false, false, "value_call")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstValueCall), false, false, "value_call"))));
        
        private static string _ruleValue = "(loc = local_id | value = full_column_name | eventdata = EVENTDATA  LR_BRACKET  R" +
            "R_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call " +
            "= value_call\r\n";
        
        private static string _ruleName = "value_method";
        
        /// <summary>
        /// value_method : loc=local_id DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod1 : AstValueMethod
        {
            
            private static string _ruleName1 = "value_method";
            
            private AstLocalId _loc;
            
            private AstValueCall _call;
            
            internal AstValueMethod1(ParserRuleContext ctx, AstLocalId loc, AstValueCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : value=full_column_name DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod2 : AstValueMethod
        {
            
            private static string _ruleName1 = "value_method";
            
            private AstFullColumnName _value;
            
            private AstValueCall _call;
            
            internal AstValueMethod2(ParserRuleContext ctx, AstFullColumnName value, AstValueCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : eventdata=EVENTDATA LR_BRACKET RR_BRACKET DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod3 : AstValueMethod
        {
            
            private static string _ruleName1 = "value_method";
            
            private AstValueCall _call;
            
            internal AstValueMethod3(ParserRuleContext ctx, AstValueCall call) : 
                    base(ctx)
            {
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : query=query_method DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod4 : AstValueMethod
        {
            
            private static string _ruleName1 = "value_method";
            
            private AstQueryMethod _query;
            
            private AstValueCall _call;
            
            internal AstValueMethod4(ParserRuleContext ctx, AstQueryMethod query, AstValueCall call) : 
                    base(ctx)
            {
                _query = query;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstQueryMethod Query
            {
                get
                {
                    return _query;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : LR_BRACKET subquery RR_BRACKET DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod5 : AstValueMethod
        {
            
            private static string _ruleName1 = "value_method";
            
            private AstSubquery _subquery;
            
            private AstValueCall _call;
            
            internal AstValueMethod5(ParserRuleContext ctx, AstSubquery subquery, AstValueCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        

        
        internal AstValueMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstValueMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstValueMethod(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstValueMethod Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstValueMethod.AstValueMethod1(ctx, list.Get<AstLocalId>(0), list.Get<AstValueCall>(1));
            }
            if ((index == 2))
            {
                return new AstValueMethod.AstValueMethod2(ctx, list.Get<AstFullColumnName>(0), list.Get<AstValueCall>(1));
            }
            if ((index == 3))
            {
                return new AstValueMethod.AstValueMethod3(ctx, list.Get<AstValueCall>(0));
            }
            if ((index == 4))
            {
                return new AstValueMethod.AstValueMethod4(ctx, list.Get<AstQueryMethod>(0), list.Get<AstValueCall>(1));
            }
            if ((index == 5))
            {
                return new AstValueMethod.AstValueMethod5(ctx, list.Get<AstSubquery>(0), list.Get<AstValueCall>(1));
            }
            return null;
        }
        
        /// <summary>
        /// value_method : 
        ///    loc=local_id . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstLocalId loc, AstValueCall call)
        {
            AstValueMethod.AstValueMethod1 result = new AstValueMethod.AstValueMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    value=full_column_name . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstFullColumnName value, AstValueCall call)
        {
            AstValueMethod.AstValueMethod2 result = new AstValueMethod.AstValueMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    eventdata=EVENTDATA ( ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstValueCall call)
        {
            AstValueMethod.AstValueMethod3 result = new AstValueMethod.AstValueMethod3(ctx, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    query=query_method . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstQueryMethod query, AstValueCall call)
        {
            AstValueMethod.AstValueMethod4 result = new AstValueMethod.AstValueMethod4(ctx, query, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    ( subquery ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstSubquery subquery, AstValueCall call)
        {
            AstValueMethod.AstValueMethod5 result = new AstValueMethod.AstValueMethod5(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// value_call
    /// 	 : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstValueCall : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private AstStringtext _xquery;
        
        private AstStringtext _sqltype;
        
        private static string _ruleValue = "VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringtext  RR_BRACKET\r\n" +
            "";
        
        private static string _ruleName = "value_call";
        
        internal AstValueCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstValueCall(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstValueCall(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstValueCall(ParserRuleContext ctx, AstStringtext xquery, AstStringtext sqltype) : 
                base(ctx)
        {
            _xquery = xquery;
            _sqltype = sqltype;
        }
        
        public virtual AstStringtext Xquery
        {
            get
            {
                return _xquery;
            }
        }
        
        public virtual AstStringtext Sqltype
        {
            get
            {
                return _sqltype;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueCall(this);
        }
        
        public static AstValueCall Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstValueCall(ctx, list.Get<AstStringtext>(0), list.Get<AstStringtext>(1));
        }
        
        /// <summary>
        /// value_call : 
        ///    VALUE ( xquery=stringtext , sqltype=stringtext ) 
        /// </summary>
        public static AstValueCall ValueCall(ParserRuleContext ctx, AstStringtext xquery, AstStringtext sqltype)
        {
            AstValueCall result = new AstValueCall(ctx, xquery, sqltype);
            return result;
        }
    }
    
    /// <summary>
    /// query_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = query_call
    /// </summary>
    public abstract partial class AstQueryMethod : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryCall), false, false, "query_call")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryCall), false, false, "query_call")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery"), new Bb.Asts.AstRuleMatcherItem(typeof(AstQueryCall), false, false, "query_call"))));
        
        private static string _ruleValue = "(loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  D" +
            "OT  call = query_call\r\n";
        
        private static string _ruleName = "query_method";
        
        /// <summary>
        /// query_method : loc=local_id DOT call=query_call 
        /// </summary>
        public partial class AstQueryMethod1 : AstQueryMethod
        {
            
            private static string _ruleName1 = "query_method";
            
            private AstLocalId _loc;
            
            private AstQueryCall _call;
            
            internal AstQueryMethod1(ParserRuleContext ctx, AstLocalId loc, AstQueryCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstQueryCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryMethod(this);
            }
        }
        /// <summary>
        /// query_method : value=full_column_name DOT call=query_call 
        /// </summary>
        public partial class AstQueryMethod2 : AstQueryMethod
        {
            
            private static string _ruleName1 = "query_method";
            
            private AstFullColumnName _value;
            
            private AstQueryCall _call;
            
            internal AstQueryMethod2(ParserRuleContext ctx, AstFullColumnName value, AstQueryCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstQueryCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryMethod(this);
            }
        }
        /// <summary>
        /// query_method : LR_BRACKET subquery RR_BRACKET DOT call=query_call 
        /// </summary>
        public partial class AstQueryMethod3 : AstQueryMethod
        {
            
            private static string _ruleName1 = "query_method";
            
            private AstSubquery _subquery;
            
            private AstQueryCall _call;
            
            internal AstQueryMethod3(ParserRuleContext ctx, AstSubquery subquery, AstQueryCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstQueryCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryMethod(this);
            }
        }
        

        
        internal AstQueryMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueryMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstQueryMethod(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstQueryMethod Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstQueryMethod.AstQueryMethod1(ctx, list.Get<AstLocalId>(0), list.Get<AstQueryCall>(1));
            }
            if ((index == 2))
            {
                return new AstQueryMethod.AstQueryMethod2(ctx, list.Get<AstFullColumnName>(0), list.Get<AstQueryCall>(1));
            }
            if ((index == 3))
            {
                return new AstQueryMethod.AstQueryMethod3(ctx, list.Get<AstSubquery>(0), list.Get<AstQueryCall>(1));
            }
            return null;
        }
        
        /// <summary>
        /// query_method : 
        ///    loc=local_id . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(ParserRuleContext ctx, AstLocalId loc, AstQueryCall call)
        {
            AstQueryMethod.AstQueryMethod1 result = new AstQueryMethod.AstQueryMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// query_method : 
        ///    value=full_column_name . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(ParserRuleContext ctx, AstFullColumnName value, AstQueryCall call)
        {
            AstQueryMethod.AstQueryMethod2 result = new AstQueryMethod.AstQueryMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// query_method : 
        ///    ( subquery ) . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(ParserRuleContext ctx, AstSubquery subquery, AstQueryCall call)
        {
            AstQueryMethod.AstQueryMethod3 result = new AstQueryMethod.AstQueryMethod3(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// query_call
    /// 	 : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstQueryCall : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private AstStringtext _xquery;
        
        private static string _ruleValue = "QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET\r\n";
        
        private static string _ruleName = "query_call";
        
        internal AstQueryCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueryCall(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueryCall(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstQueryCall(ParserRuleContext ctx, AstStringtext xquery) : 
                base(ctx)
        {
            _xquery = xquery;
        }
        
        public virtual AstStringtext Xquery
        {
            get
            {
                return _xquery;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryCall(this);
        }
        
        public static AstQueryCall Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstQueryCall(ctx, list.Get<AstStringtext>(0));
        }
        
        /// <summary>
        /// query_call : 
        ///    QUERY ( xquery=stringtext ) 
        /// </summary>
        public static AstQueryCall QueryCall(ParserRuleContext ctx, AstStringtext xquery)
        {
            AstQueryCall result = new AstQueryCall(ctx, xquery);
            return result;
        }
    }
    
    /// <summary>
    /// exist_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = exist_call
    /// </summary>
    public abstract partial class AstExistMethod : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExistCall), false, false, "exist_call")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExistCall), false, false, "exist_call")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExistCall), false, false, "exist_call"))));
        
        private static string _ruleValue = "(loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  D" +
            "OT  call = exist_call\r\n";
        
        private static string _ruleName = "exist_method";
        
        /// <summary>
        /// exist_method : loc=local_id DOT call=exist_call 
        /// </summary>
        public partial class AstExistMethod1 : AstExistMethod
        {
            
            private static string _ruleName1 = "exist_method";
            
            private AstLocalId _loc;
            
            private AstExistCall _call;
            
            internal AstExistMethod1(ParserRuleContext ctx, AstLocalId loc, AstExistCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstExistCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistMethod(this);
            }
        }
        /// <summary>
        /// exist_method : value=full_column_name DOT call=exist_call 
        /// </summary>
        public partial class AstExistMethod2 : AstExistMethod
        {
            
            private static string _ruleName1 = "exist_method";
            
            private AstFullColumnName _value;
            
            private AstExistCall _call;
            
            internal AstExistMethod2(ParserRuleContext ctx, AstFullColumnName value, AstExistCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstExistCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistMethod(this);
            }
        }
        /// <summary>
        /// exist_method : LR_BRACKET subquery RR_BRACKET DOT call=exist_call 
        /// </summary>
        public partial class AstExistMethod3 : AstExistMethod
        {
            
            private static string _ruleName1 = "exist_method";
            
            private AstSubquery _subquery;
            
            private AstExistCall _call;
            
            internal AstExistMethod3(ParserRuleContext ctx, AstSubquery subquery, AstExistCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstExistCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistMethod(this);
            }
        }
        

        
        internal AstExistMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExistMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstExistMethod(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstExistMethod Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstExistMethod.AstExistMethod1(ctx, list.Get<AstLocalId>(0), list.Get<AstExistCall>(1));
            }
            if ((index == 2))
            {
                return new AstExistMethod.AstExistMethod2(ctx, list.Get<AstFullColumnName>(0), list.Get<AstExistCall>(1));
            }
            if ((index == 3))
            {
                return new AstExistMethod.AstExistMethod3(ctx, list.Get<AstSubquery>(0), list.Get<AstExistCall>(1));
            }
            return null;
        }
        
        /// <summary>
        /// exist_method : 
        ///    loc=local_id . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(ParserRuleContext ctx, AstLocalId loc, AstExistCall call)
        {
            AstExistMethod.AstExistMethod1 result = new AstExistMethod.AstExistMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// exist_method : 
        ///    value=full_column_name . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(ParserRuleContext ctx, AstFullColumnName value, AstExistCall call)
        {
            AstExistMethod.AstExistMethod2 result = new AstExistMethod.AstExistMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// exist_method : 
        ///    ( subquery ) . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(ParserRuleContext ctx, AstSubquery subquery, AstExistCall call)
        {
            AstExistMethod.AstExistMethod3 result = new AstExistMethod.AstExistMethod3(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// exist_call
    /// 	 : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstExistCall : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private AstStringtext _xquery;
        
        private static string _ruleValue = "EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET\r\n";
        
        private static string _ruleName = "exist_call";
        
        internal AstExistCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExistCall(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExistCall(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstExistCall(ParserRuleContext ctx, AstStringtext xquery) : 
                base(ctx)
        {
            _xquery = xquery;
        }
        
        public virtual AstStringtext Xquery
        {
            get
            {
                return _xquery;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistCall(this);
        }
        
        public static AstExistCall Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstExistCall(ctx, list.Get<AstStringtext>(0));
        }
        
        /// <summary>
        /// exist_call : 
        ///    EXIST ( xquery=stringtext ) 
        /// </summary>
        public static AstExistCall ExistCall(ParserRuleContext ctx, AstStringtext xquery)
        {
            AstExistCall result = new AstExistCall(ctx, xquery);
            return result;
        }
    }
    
    /// <summary>
    /// modify_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = modify_call
    /// </summary>
    public abstract partial class AstModifyMethod : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstModifyCall), false, false, "modify_call")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstModifyCall), false, false, "modify_call")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery"), new Bb.Asts.AstRuleMatcherItem(typeof(AstModifyCall), false, false, "modify_call"))));
        
        private static string _ruleValue = "(loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  D" +
            "OT  call = modify_call\r\n";
        
        private static string _ruleName = "modify_method";
        
        /// <summary>
        /// modify_method : loc=local_id DOT call=modify_call 
        /// </summary>
        public partial class AstModifyMethod1 : AstModifyMethod
        {
            
            private static string _ruleName1 = "modify_method";
            
            private AstLocalId _loc;
            
            private AstModifyCall _call;
            
            internal AstModifyMethod1(ParserRuleContext ctx, AstLocalId loc, AstModifyCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstModifyCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyMethod(this);
            }
        }
        /// <summary>
        /// modify_method : value=full_column_name DOT call=modify_call 
        /// </summary>
        public partial class AstModifyMethod2 : AstModifyMethod
        {
            
            private static string _ruleName1 = "modify_method";
            
            private AstFullColumnName _value;
            
            private AstModifyCall _call;
            
            internal AstModifyMethod2(ParserRuleContext ctx, AstFullColumnName value, AstModifyCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstModifyCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyMethod(this);
            }
        }
        /// <summary>
        /// modify_method : LR_BRACKET subquery RR_BRACKET DOT call=modify_call 
        /// </summary>
        public partial class AstModifyMethod3 : AstModifyMethod
        {
            
            private static string _ruleName1 = "modify_method";
            
            private AstSubquery _subquery;
            
            private AstModifyCall _call;
            
            internal AstModifyMethod3(ParserRuleContext ctx, AstSubquery subquery, AstModifyCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstModifyCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyMethod(this);
            }
        }
        

        
        internal AstModifyMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstModifyMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstModifyMethod(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstModifyMethod Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstModifyMethod.AstModifyMethod1(ctx, list.Get<AstLocalId>(0), list.Get<AstModifyCall>(1));
            }
            if ((index == 2))
            {
                return new AstModifyMethod.AstModifyMethod2(ctx, list.Get<AstFullColumnName>(0), list.Get<AstModifyCall>(1));
            }
            if ((index == 3))
            {
                return new AstModifyMethod.AstModifyMethod3(ctx, list.Get<AstSubquery>(0), list.Get<AstModifyCall>(1));
            }
            return null;
        }
        
        /// <summary>
        /// modify_method : 
        ///    loc=local_id . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(ParserRuleContext ctx, AstLocalId loc, AstModifyCall call)
        {
            AstModifyMethod.AstModifyMethod1 result = new AstModifyMethod.AstModifyMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// modify_method : 
        ///    value=full_column_name . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(ParserRuleContext ctx, AstFullColumnName value, AstModifyCall call)
        {
            AstModifyMethod.AstModifyMethod2 result = new AstModifyMethod.AstModifyMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// modify_method : 
        ///    ( subquery ) . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(ParserRuleContext ctx, AstSubquery subquery, AstModifyCall call)
        {
            AstModifyMethod.AstModifyMethod3 result = new AstModifyMethod.AstModifyMethod3(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// modify_call
    /// 	 : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstModifyCall : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private AstStringtext _xmlDml;
        
        private static string _ruleValue = "MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET\r\n";
        
        private static string _ruleName = "modify_call";
        
        internal AstModifyCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstModifyCall(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstModifyCall(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstModifyCall(ParserRuleContext ctx, AstStringtext xmlDml) : 
                base(ctx)
        {
            _xmlDml = xmlDml;
        }
        
        public virtual AstStringtext XmlDml
        {
            get
            {
                return _xmlDml;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyCall(this);
        }
        
        public static AstModifyCall Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstModifyCall(ctx, list.Get<AstStringtext>(0));
        }
        
        /// <summary>
        /// modify_call : 
        ///    MODIFY ( xml_dml=stringtext ) 
        /// </summary>
        public static AstModifyCall ModifyCall(ParserRuleContext ctx, AstStringtext xmlDml)
        {
            AstModifyCall result = new AstModifyCall(ctx, xmlDml);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_call
    /// 	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
    /// 	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
    /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
    /// 	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
    /// 	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
    /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
    /// </summary>
    public abstract partial class AstHierarchyidCall : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = @"GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
 | GETLEVEL  LR_BRACKET  RR_BRACKET
 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
 | TOSTRING  LR_BRACKET  RR_BRACKET
";
        
        private static string _ruleName = "hierarchyid_call";
        
        /// <summary>
        /// hierarchyid_call : GETANCESTOR LR_BRACKET n=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall1 : AstHierarchyidCall
        {
            
            private static string _ruleName1 = "hierarchyid_call";
            
            private AstExpression _n;
            
            internal AstHierarchyidCall1(ParserRuleContext ctx, AstExpression n) : 
                    base(ctx)
            {
                _n = n;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression N
            {
                get
                {
                    return _n;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETDESCENDANT LR_BRACKET child1=expression COMMA child2=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall2 : AstHierarchyidCall
        {
            
            private static string _ruleName1 = "hierarchyid_call";
            
            private AstExpression _child1;
            
            private AstExpression _child2;
            
            internal AstHierarchyidCall2(ParserRuleContext ctx, AstExpression child1, AstExpression child2) : 
                    base(ctx)
            {
                _child1 = child1;
                _child2 = child2;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Child1
            {
                get
                {
                    return _child1;
                }
            }
            
            public virtual AstExpression Child2
            {
                get
                {
                    return _child2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETLEVEL LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall3 : AstHierarchyidCall
        {
            
            private static string _ruleName1 = "hierarchyid_call";
            
            internal AstHierarchyidCall3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : ISDESCENDANTOF LR_BRACKET parent_=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall4 : AstHierarchyidCall
        {
            
            private static string _ruleName1 = "hierarchyid_call";
            
            private AstExpression _parent;
            
            internal AstHierarchyidCall4(ParserRuleContext ctx, AstExpression parent) : 
                    base(ctx)
            {
                _parent = parent;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Parent
            {
                get
                {
                    return _parent;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETREPARENTEDVALUE LR_BRACKET oldroot=expression COMMA newroot=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall5 : AstHierarchyidCall
        {
            
            private static string _ruleName1 = "hierarchyid_call";
            
            private AstExpression _oldroot;
            
            private AstExpression _newroot;
            
            internal AstHierarchyidCall5(ParserRuleContext ctx, AstExpression oldroot, AstExpression newroot) : 
                    base(ctx)
            {
                _oldroot = oldroot;
                _newroot = newroot;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Oldroot
            {
                get
                {
                    return _oldroot;
                }
            }
            
            public virtual AstExpression Newroot
            {
                get
                {
                    return _newroot;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : TOSTRING LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall6 : AstHierarchyidCall
        {
            
            private static string _ruleName1 = "hierarchyid_call";
            
            internal AstHierarchyidCall6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        

        
        internal AstHierarchyidCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidCall(Position p) : 
                base(p)
        {
        }
        
        internal AstHierarchyidCall(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstHierarchyidCall Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstHierarchyidCall.AstHierarchyidCall1(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 2))
            {
                return new AstHierarchyidCall.AstHierarchyidCall2(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 3))
            {
                return new AstHierarchyidCall.AstHierarchyidCall3(ctx);
            }
            if ((index == 4))
            {
                return new AstHierarchyidCall.AstHierarchyidCall4(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 5))
            {
                return new AstHierarchyidCall.AstHierarchyidCall5(ctx, list.Get<AstExpression>(0), list.Get<AstExpression>(1));
            }
            if ((index == 6))
            {
                return new AstHierarchyidCall.AstHierarchyidCall6(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETANCESTOR ( n=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(ParserRuleContext ctx, AstExpression n)
        {
            AstHierarchyidCall.AstHierarchyidCall1 result = new AstHierarchyidCall.AstHierarchyidCall1(ctx, n);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETDESCENDANT ( child1=expression , child2=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(ParserRuleContext ctx, AstExpression child1, AstExpression child2)
        {
            AstHierarchyidCall.AstHierarchyidCall2 result = new AstHierarchyidCall.AstHierarchyidCall2(ctx, child1, child2);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETLEVEL ( ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(ParserRuleContext ctx)
        {
            AstHierarchyidCall.AstHierarchyidCall3 result = new AstHierarchyidCall.AstHierarchyidCall3(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_static_method
    /// 	 : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)
    /// </summary>
    public abstract partial class AstHierarchyidStaticMethod : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  " +
            "input = expression  RR_BRACKET)\r\n";
        
        private static string _ruleName = "hierarchyid_static_method";
        
        /// <summary>
        /// hierarchyid_static_method : HIERARCHYID DOUBLE_COLON GETROOT LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidStaticMethod1 : AstHierarchyidStaticMethod
        {
            
            private static string _ruleName1 = "hierarchyid_static_method";
            
            internal AstHierarchyidStaticMethod1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidStaticMethod(this);
            }
        }
        /// <summary>
        /// hierarchyid_static_method : HIERARCHYID DOUBLE_COLON PARSE LR_BRACKET input=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidStaticMethod2 : AstHierarchyidStaticMethod
        {
            
            private static string _ruleName1 = "hierarchyid_static_method";
            
            private AstExpression _input;
            
            internal AstHierarchyidStaticMethod2(ParserRuleContext ctx, AstExpression input) : 
                    base(ctx)
            {
                _input = input;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Input
            {
                get
                {
                    return _input;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidStaticMethod(this);
            }
        }
        

        
        internal AstHierarchyidStaticMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidStaticMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstHierarchyidStaticMethod(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstHierarchyidStaticMethod Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod1(ctx);
            }
            if ((index == 2))
            {
                return new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod2(ctx, list.Get<AstExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// hierarchyid_static_method : 
        ///    HIERARCHYID :: GETROOT ( ) 
        /// </summary>
        public static AstHierarchyidStaticMethod HierarchyidStaticMethod(ParserRuleContext ctx)
        {
            AstHierarchyidStaticMethod.AstHierarchyidStaticMethod1 result = new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod1(ctx);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_static_method : 
        ///    HIERARCHYID :: PARSE ( input=expression ) 
        /// </summary>
        public static AstHierarchyidStaticMethod HierarchyidStaticMethod(ParserRuleContext ctx, AstExpression input)
        {
            AstHierarchyidStaticMethod.AstHierarchyidStaticMethod2 result = new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod2(ctx, input);
            return result;
        }
    }
    
    /// <summary>
    /// nodes_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public abstract partial class AstNodesMethod : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFullColumnName), false, false, "full_column_name"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstSubquery), false, false, "subquery"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "(loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  D" +
            "OT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET\r\n";
        
        private static string _ruleName = "nodes_method";
        
        /// <summary>
        /// nodes_method : loc=local_id DOT NODES LR_BRACKET xquery=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstNodesMethod1 : AstNodesMethod
        {
            
            private static string _ruleName1 = "nodes_method";
            
            private AstLocalId _loc;
            
            private AstStringtext _xquery;
            
            internal AstNodesMethod1(ParserRuleContext ctx, AstLocalId loc, AstStringtext xquery) : 
                    base(ctx)
            {
                _loc = loc;
                _xquery = xquery;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstStringtext Xquery
            {
                get
                {
                    return _xquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNodesMethod(this);
            }
        }
        /// <summary>
        /// nodes_method : value=full_column_name DOT NODES LR_BRACKET xquery=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstNodesMethod2 : AstNodesMethod
        {
            
            private static string _ruleName1 = "nodes_method";
            
            private AstFullColumnName _value;
            
            private AstStringtext _xquery;
            
            internal AstNodesMethod2(ParserRuleContext ctx, AstFullColumnName value, AstStringtext xquery) : 
                    base(ctx)
            {
                _value = value;
                _xquery = xquery;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstStringtext Xquery
            {
                get
                {
                    return _xquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNodesMethod(this);
            }
        }
        /// <summary>
        /// nodes_method : LR_BRACKET subquery RR_BRACKET DOT NODES LR_BRACKET xquery=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstNodesMethod3 : AstNodesMethod
        {
            
            private static string _ruleName1 = "nodes_method";
            
            private AstSubquery _subquery;
            
            private AstStringtext _xquery;
            
            internal AstNodesMethod3(ParserRuleContext ctx, AstSubquery subquery, AstStringtext xquery) : 
                    base(ctx)
            {
                _subquery = subquery;
                _xquery = xquery;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstStringtext Xquery
            {
                get
                {
                    return _xquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNodesMethod(this);
            }
        }
        

        
        internal AstNodesMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstNodesMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstNodesMethod(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstNodesMethod Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstNodesMethod.AstNodesMethod1(ctx, list.Get<AstLocalId>(0), list.Get<AstStringtext>(1));
            }
            if ((index == 2))
            {
                return new AstNodesMethod.AstNodesMethod2(ctx, list.Get<AstFullColumnName>(0), list.Get<AstStringtext>(1));
            }
            if ((index == 3))
            {
                return new AstNodesMethod.AstNodesMethod3(ctx, list.Get<AstSubquery>(0), list.Get<AstStringtext>(1));
            }
            return null;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    loc=local_id . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(ParserRuleContext ctx, AstLocalId loc, AstStringtext xquery)
        {
            AstNodesMethod.AstNodesMethod1 result = new AstNodesMethod.AstNodesMethod1(ctx, loc, xquery);
            return result;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    value=full_column_name . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(ParserRuleContext ctx, AstFullColumnName value, AstStringtext xquery)
        {
            AstNodesMethod.AstNodesMethod2 result = new AstNodesMethod.AstNodesMethod2(ctx, value, xquery);
            return result;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    ( subquery ) . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(ParserRuleContext ctx, AstSubquery subquery, AstStringtext xquery)
        {
            AstNodesMethod.AstNodesMethod3 result = new AstNodesMethod.AstNodesMethod3(ctx, subquery, xquery);
            return result;
        }
    }
    
    /// <summary>
    /// table_hint
    /// 	 : NOEXPAND
    /// 	 | INDEX  hint_index
    /// 	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
    /// 	 | FORCESCAN
    /// 	 | HOLDLOCK
    /// 	 | NOLOCK
    /// 	 | NOWAIT
    /// 	 | PAGLOCK
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | REPEATABLEREAD
    /// 	 | ROWLOCK
    /// 	 | SERIALIZABLE
    /// 	 | SNAPSHOT
    /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | UPDLOCK
    /// 	 | XLOCK
    /// 	 | KEEPIDENTITY
    /// 	 | KEEPDEFAULTS
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_TRIGGERS
    /// </summary>
    public abstract partial class AstTableHint : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndexValue), false, false, "index_value"), new Bb.Asts.AstRuleMatcherItem(typeof(AstColumnNameList), false, false, "column_name_list")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstHintIndex), false, false, "hint_index")), new Bb.Asts.AstRuleMatcherItems(17, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = @"NOEXPAND
 | INDEX  hint_index
 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
 | FORCESCAN
 | HOLDLOCK
 | NOLOCK
 | NOWAIT
 | PAGLOCK
 | READCOMMITTED
 | READCOMMITTEDLOCK
 | READPAST
 | READUNCOMMITTED
 | REPEATABLEREAD
 | ROWLOCK
 | SERIALIZABLE
 | SNAPSHOT
 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
 | TABLOCK
 | TABLOCKX
 | UPDLOCK
 | XLOCK
 | KEEPIDENTITY
 | KEEPDEFAULTS
 | IGNORE_CONSTRAINTS
 | IGNORE_TRIGGERS
";
        
        private static string _ruleName = "table_hint";
        
        /// <summary>
        /// table_hint : NOEXPAND 
        /// </summary>
        public partial class AstTableHint1 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : INDEX hint_index 
        /// </summary>
        public partial class AstTableHint2 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            private AstHintIndex _hintIndex;
            
            internal AstTableHint2(ParserRuleContext ctx, AstHintIndex hintIndex) : 
                    base(ctx)
            {
                _hintIndex = hintIndex;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstHintIndex HintIndex
            {
                get
                {
                    return _hintIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : FORCESEEK LR_BRACKET index_value LR_BRACKET column_name_list RR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstTableHint3 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            private AstIndexValue _indexValue;
            
            private AstColumnNameList _columnNameList;
            
            internal AstTableHint3(ParserRuleContext ctx, AstIndexValue indexValue, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _indexValue = indexValue;
                _columnNameList = columnNameList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndexValue IndexValue
            {
                get
                {
                    return _indexValue;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : FORCESCAN 
        /// </summary>
        public partial class AstTableHint4 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : HOLDLOCK 
        /// </summary>
        public partial class AstTableHint5 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : NOLOCK 
        /// </summary>
        public partial class AstTableHint6 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : NOWAIT 
        /// </summary>
        public partial class AstTableHint7 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : PAGLOCK 
        /// </summary>
        public partial class AstTableHint8 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READCOMMITTED 
        /// </summary>
        public partial class AstTableHint9 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READCOMMITTEDLOCK 
        /// </summary>
        public partial class AstTableHint10 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint10(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READPAST 
        /// </summary>
        public partial class AstTableHint11 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint11(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READUNCOMMITTED 
        /// </summary>
        public partial class AstTableHint12 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint12(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : REPEATABLEREAD 
        /// </summary>
        public partial class AstTableHint13 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint13(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : ROWLOCK 
        /// </summary>
        public partial class AstTableHint14 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint14(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SERIALIZABLE 
        /// </summary>
        public partial class AstTableHint15 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint15(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SNAPSHOT 
        /// </summary>
        public partial class AstTableHint16 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint16(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SPATIAL_WINDOW_MAX_CELLS EQUAL decimal 
        /// </summary>
        public partial class AstTableHint17 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            private AstDecimal _decimal;
            
            internal AstTableHint17(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : TABLOCK 
        /// </summary>
        public partial class AstTableHint18 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint18(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : TABLOCKX 
        /// </summary>
        public partial class AstTableHint19 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint19(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : UPDLOCK 
        /// </summary>
        public partial class AstTableHint20 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint20(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : XLOCK 
        /// </summary>
        public partial class AstTableHint21 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint21(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : KEEPIDENTITY 
        /// </summary>
        public partial class AstTableHint22 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint22(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : KEEPDEFAULTS 
        /// </summary>
        public partial class AstTableHint23 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint23(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : IGNORE_CONSTRAINTS 
        /// </summary>
        public partial class AstTableHint24 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint24(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : IGNORE_TRIGGERS 
        /// </summary>
        public partial class AstTableHint25 : AstTableHint
        {
            
            private static string _ruleName1 = "table_hint";
            
            internal AstTableHint25(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        

        
        internal AstTableHint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableHint(Position p) : 
                base(p)
        {
        }
        
        internal AstTableHint(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstTableHint Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint1(ctx);
            }
            if ((index == 2))
            {
                return new AstTableHint.AstTableHint2(ctx, list.Get<AstHintIndex>(0));
            }
            if ((index == 3))
            {
                return new AstTableHint.AstTableHint3(ctx, list.Get<AstIndexValue>(0), list.Get<AstColumnNameList>(1));
            }
            if ((index == 4))
            {
                return new AstTableHint.AstTableHint4(ctx);
            }
            if ((index == 5))
            {
                return new AstTableHint.AstTableHint5(ctx);
            }
            if ((index == 6))
            {
                return new AstTableHint.AstTableHint6(ctx);
            }
            if ((index == 7))
            {
                return new AstTableHint.AstTableHint7(ctx);
            }
            if ((index == 8))
            {
                return new AstTableHint.AstTableHint8(ctx);
            }
            if ((index == 9))
            {
                return new AstTableHint.AstTableHint9(ctx);
            }
            if ((index == 10))
            {
                return new AstTableHint.AstTableHint10(ctx);
            }
            if ((index == 11))
            {
                return new AstTableHint.AstTableHint11(ctx);
            }
            if ((index == 12))
            {
                return new AstTableHint.AstTableHint12(ctx);
            }
            if ((index == 13))
            {
                return new AstTableHint.AstTableHint13(ctx);
            }
            if ((index == 14))
            {
                return new AstTableHint.AstTableHint14(ctx);
            }
            if ((index == 15))
            {
                return new AstTableHint.AstTableHint15(ctx);
            }
            if ((index == 16))
            {
                return new AstTableHint.AstTableHint16(ctx);
            }
            if ((index == 17))
            {
                return new AstTableHint.AstTableHint17(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 18))
            {
                return new AstTableHint.AstTableHint18(ctx);
            }
            if ((index == 19))
            {
                return new AstTableHint.AstTableHint19(ctx);
            }
            if ((index == 20))
            {
                return new AstTableHint.AstTableHint20(ctx);
            }
            if ((index == 21))
            {
                return new AstTableHint.AstTableHint21(ctx);
            }
            if ((index == 22))
            {
                return new AstTableHint.AstTableHint22(ctx);
            }
            if ((index == 23))
            {
                return new AstTableHint.AstTableHint23(ctx);
            }
            if ((index == 24))
            {
                return new AstTableHint.AstTableHint24(ctx);
            }
            if ((index == 25))
            {
                return new AstTableHint.AstTableHint25(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// table_hint : 
        ///    NOEXPAND 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx)
        {
            AstTableHint.AstTableHint1 result = new AstTableHint.AstTableHint1(ctx);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    INDEX hint_index 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx, AstHintIndex hintIndex)
        {
            AstTableHint.AstTableHint2 result = new AstTableHint.AstTableHint2(ctx, hintIndex);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    FORCESEEK ( index_value ( column_name_list ) ) 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx, AstIndexValue indexValue, AstColumnNameList columnNameList)
        {
            AstTableHint.AstTableHint3 result = new AstTableHint.AstTableHint3(ctx, indexValue, columnNameList);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    SPATIAL_WINDOW_MAX_CELLS EQUAL decimal 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTableHint.AstTableHint17 result = new AstTableHint.AstTableHint17(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// hint_index
    /// 	 : LR_BRACKET  index_values  RR_BRACKET
    /// 	 | EQUAL  LR_BRACKET  index_value  RR_BRACKET
    /// 	 | EQUAL  index_value
    /// </summary>
    public abstract partial class AstHintIndex : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndexValues), false, false, "index_values")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndexValue), false, false, "index_value")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstIndexValue), false, false, "index_value"))));
        
        private static string _ruleValue = "LR_BRACKET  index_values  RR_BRACKET\r\n | EQUAL  LR_BRACKET  index_value  RR_BRACK" +
            "ET\r\n | EQUAL  index_value\r\n";
        
        private static string _ruleName = "hint_index";
        
        /// <summary>
        /// hint_index : LR_BRACKET index_values RR_BRACKET 
        /// </summary>
        public partial class AstHintIndex1 : AstHintIndex
        {
            
            private static string _ruleName1 = "hint_index";
            
            private AstIndexValues _indexValues;
            
            internal AstHintIndex1(ParserRuleContext ctx, AstIndexValues indexValues) : 
                    base(ctx)
            {
                _indexValues = indexValues;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndexValues IndexValues
            {
                get
                {
                    return _indexValues;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHintIndex(this);
            }
        }
        /// <summary>
        /// hint_index : EQUAL LR_BRACKET index_value RR_BRACKET 
        /// </summary>
        public partial class AstHintIndex2 : AstHintIndex
        {
            
            private static string _ruleName1 = "hint_index";
            
            private AstIndexValue _indexValue;
            
            internal AstHintIndex2(ParserRuleContext ctx, AstIndexValue indexValue) : 
                    base(ctx)
            {
                _indexValue = indexValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndexValue IndexValue
            {
                get
                {
                    return _indexValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHintIndex(this);
            }
        }
        /// <summary>
        /// hint_index : EQUAL index_value 
        /// </summary>
        public partial class AstHintIndex3 : AstHintIndex
        {
            
            private static string _ruleName1 = "hint_index";
            
            private AstIndexValue _indexValue;
            
            internal AstHintIndex3(ParserRuleContext ctx, AstIndexValue indexValue) : 
                    base(ctx)
            {
                _indexValue = indexValue;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIndexValue IndexValue
            {
                get
                {
                    return _indexValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHintIndex(this);
            }
        }
        

        
        internal AstHintIndex(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHintIndex(Position p) : 
                base(p)
        {
        }
        
        internal AstHintIndex(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstHintIndex Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstHintIndex.AstHintIndex1(ctx, list.Get<AstIndexValues>(0));
            }
            if ((index == 2))
            {
                return new AstHintIndex.AstHintIndex2(ctx, list.Get<AstIndexValue>(0));
            }
            if ((index == 3))
            {
                return new AstHintIndex.AstHintIndex3(ctx, list.Get<AstIndexValue>(0));
            }
            return null;
        }
        
        /// <summary>
        /// hint_index : 
        ///    ( index_values ) 
        /// </summary>
        public static AstHintIndex HintIndex(ParserRuleContext ctx, AstIndexValues indexValues)
        {
            AstHintIndex.AstHintIndex1 result = new AstHintIndex.AstHintIndex1(ctx, indexValues);
            return result;
        }
        
        /// <summary>
        /// hint_index : 
        ///    EQUAL ( index_value ) 
        /// </summary>
        public static AstHintIndex HintIndex(ParserRuleContext ctx, AstIndexValue indexValue)
        {
            AstHintIndex.AstHintIndex2 result = new AstHintIndex.AstHintIndex2(ctx, indexValue);
            return result;
        }
    }
    
    /// <summary>
    /// index_value
    /// 	 : id_
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstIndexValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "id_\r\n | decimal\r\n";
        
        private static string _ruleName = "index_value";
        
        /// <summary>
        /// index_value : id_ 
        /// </summary>
        public partial class AstIndexValue1 : AstIndexValue
        {
            
            private static string _ruleName1 = "index_value";
            
            private AstId _id;
            
            internal AstIndexValue1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexValue(this);
            }
        }
        /// <summary>
        /// index_value : decimal 
        /// </summary>
        public partial class AstIndexValue2 : AstIndexValue
        {
            
            private static string _ruleName1 = "index_value";
            
            private AstDecimal _decimal;
            
            internal AstIndexValue2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexValue(this);
            }
        }
        

        
        internal AstIndexValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexValue(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstIndexValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstIndexValue.AstIndexValue1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstIndexValue.AstIndexValue2(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// index_value : 
        ///    id_ 
        /// </summary>
        public static AstIndexValue IndexValue(ParserRuleContext ctx, AstId id)
        {
            AstIndexValue.AstIndexValue1 result = new AstIndexValue.AstIndexValue1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// index_value : 
        ///    decimal 
        /// </summary>
        public static AstIndexValue IndexValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstIndexValue.AstIndexValue2 result = new AstIndexValue.AstIndexValue2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// ranking_windowed_function
    /// 	 : ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause
    /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// </summary>
    public abstract partial class AstRankingWindowedFunction : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstRankingWindowed), false, false, "ranking_windowed"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOverClause), false, false, "over_clause")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOverClause), false, false, "over_clause"))));
        
        private static string _ruleValue = "ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause\r\n | NTILE  LR_BRACKET  expr" +
            "ession  RR_BRACKET  over_clause\r\n";
        
        private static string _ruleName = "ranking_windowed_function";
        
        /// <summary>
        /// ranking_windowed_function : ranking_windowed LR_BRACKET RR_BRACKET over_clause 
        /// </summary>
        public partial class AstRankingWindowedFunction1 : AstRankingWindowedFunction
        {
            
            private static string _ruleName1 = "ranking_windowed_function";
            
            private AstRankingWindowed _rankingWindowed;
            
            private AstOverClause _overClause;
            
            internal AstRankingWindowedFunction1(ParserRuleContext ctx, AstRankingWindowed rankingWindowed, AstOverClause overClause) : 
                    base(ctx)
            {
                _rankingWindowed = rankingWindowed;
                _overClause = overClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstRankingWindowed RankingWindowed
            {
                get
                {
                    return _rankingWindowed;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRankingWindowedFunction(this);
            }
        }
        /// <summary>
        /// ranking_windowed_function : NTILE LR_BRACKET expression RR_BRACKET over_clause 
        /// </summary>
        public partial class AstRankingWindowedFunction2 : AstRankingWindowedFunction
        {
            
            private static string _ruleName1 = "ranking_windowed_function";
            
            private AstExpression _expression;
            
            private AstOverClause _overClause;
            
            internal AstRankingWindowedFunction2(ParserRuleContext ctx, AstExpression expression, AstOverClause overClause) : 
                    base(ctx)
            {
                _expression = expression;
                _overClause = overClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRankingWindowedFunction(this);
            }
        }
        

        
        internal AstRankingWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRankingWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstRankingWindowedFunction(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstRankingWindowedFunction Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstRankingWindowedFunction.AstRankingWindowedFunction1(ctx, list.Get<AstRankingWindowed>(0), list.Get<AstOverClause>(1));
            }
            if ((index == 2))
            {
                return new AstRankingWindowedFunction.AstRankingWindowedFunction2(ctx, list.Get<AstExpression>(0), list.Get<AstOverClause>(1));
            }
            return null;
        }
        
        /// <summary>
        /// ranking_windowed_function : 
        ///    ranking_windowed ( ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(ParserRuleContext ctx, AstRankingWindowed rankingWindowed, AstOverClause overClause)
        {
            AstRankingWindowedFunction.AstRankingWindowedFunction1 result = new AstRankingWindowedFunction.AstRankingWindowedFunction1(ctx, rankingWindowed, overClause);
            return result;
        }
        
        /// <summary>
        /// ranking_windowed_function : 
        ///    NTILE ( expression ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(ParserRuleContext ctx, AstExpression expression, AstOverClause overClause)
        {
            AstRankingWindowedFunction.AstRankingWindowedFunction2 result = new AstRankingWindowedFunction.AstRankingWindowedFunction2(ctx, expression, overClause);
            return result;
        }
    }
    
    /// <summary>
    /// aggregate_windowed_function
    /// 	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 | count_count_big  LR_BRACKET  all_distinct_expression_or_star  RR_BRACKET  over_clause?
    /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
    /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
    /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstAggregateWindowedFunction : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstAggFunction), false, false, "agg_function"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAllDistinctExpression), false, false, "all_distinct_expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOverClause), true, false, "over_clause")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstCountCountBig), false, false, "count_count_big"), new Bb.Asts.AstRuleMatcherItem(typeof(AstAllDistinctExpressionOrStar), false, false, "all_distinct_expression_or_star"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOverClause), true, false, "over_clause")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstAllDistinctExpression), false, false, "all_distinct_expression")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), false, false, "expression_list"))));
        
        private static string _ruleValue = @"agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
 | count_count_big  LR_BRACKET  all_distinct_expression_or_star  RR_BRACKET  over_clause?
 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
 | GROUPING  LR_BRACKET  expression  RR_BRACKET
 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
";
        
        private static string _ruleName = "aggregate_windowed_function";
        
        /// <summary>
        /// aggregate_windowed_function : agg_function LR_BRACKET all_distinct_expression RR_BRACKET over_clause? 
        /// </summary>
        public partial class AstAggregateWindowedFunction1 : AstAggregateWindowedFunction
        {
            
            private static string _ruleName1 = "aggregate_windowed_function";
            
            private AstAggFunction _aggFunction;
            
            private AstAllDistinctExpression _allDistinctExpression;
            
            private AstOverClause? _overClause;
            
            internal AstAggregateWindowedFunction1(ParserRuleContext ctx, AstAggFunction aggFunction, AstAllDistinctExpression allDistinctExpression, AstOverClause? overClause) : 
                    base(ctx)
            {
                _aggFunction = aggFunction;
                _allDistinctExpression = allDistinctExpression;
                _overClause = overClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAggFunction AggFunction
            {
                get
                {
                    return _aggFunction;
                }
            }
            
            public virtual AstAllDistinctExpression AllDistinctExpression
            {
                get
                {
                    return _allDistinctExpression;
                }
            }
            
            public virtual AstOverClause? OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : count_count_big LR_BRACKET all_distinct_expression_or_star RR_BRACKET over_clause? 
        /// </summary>
        public partial class AstAggregateWindowedFunction2 : AstAggregateWindowedFunction
        {
            
            private static string _ruleName1 = "aggregate_windowed_function";
            
            private AstCountCountBig _countCountBig;
            
            private AstAllDistinctExpressionOrStar _allDistinctExpressionOrStar;
            
            private AstOverClause? _overClause;
            
            internal AstAggregateWindowedFunction2(ParserRuleContext ctx, AstCountCountBig countCountBig, AstAllDistinctExpressionOrStar allDistinctExpressionOrStar, AstOverClause? overClause) : 
                    base(ctx)
            {
                _countCountBig = countCountBig;
                _allDistinctExpressionOrStar = allDistinctExpressionOrStar;
                _overClause = overClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCountCountBig CountCountBig
            {
                get
                {
                    return _countCountBig;
                }
            }
            
            public virtual AstAllDistinctExpressionOrStar AllDistinctExpressionOrStar
            {
                get
                {
                    return _allDistinctExpressionOrStar;
                }
            }
            
            public virtual AstOverClause? OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : CHECKSUM_AGG LR_BRACKET all_distinct_expression RR_BRACKET 
        /// </summary>
        public partial class AstAggregateWindowedFunction3 : AstAggregateWindowedFunction
        {
            
            private static string _ruleName1 = "aggregate_windowed_function";
            
            private AstAllDistinctExpression _allDistinctExpression;
            
            internal AstAggregateWindowedFunction3(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression) : 
                    base(ctx)
            {
                _allDistinctExpression = allDistinctExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAllDistinctExpression AllDistinctExpression
            {
                get
                {
                    return _allDistinctExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : GROUPING LR_BRACKET expression RR_BRACKET 
        /// </summary>
        public partial class AstAggregateWindowedFunction4 : AstAggregateWindowedFunction
        {
            
            private static string _ruleName1 = "aggregate_windowed_function";
            
            private AstExpression _expression;
            
            internal AstAggregateWindowedFunction4(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : GROUPING_ID LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstAggregateWindowedFunction5 : AstAggregateWindowedFunction
        {
            
            private static string _ruleName1 = "aggregate_windowed_function";
            
            private AstExpressionList _expressionList;
            
            internal AstAggregateWindowedFunction5(ParserRuleContext ctx, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _expressionList = expressionList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        

        
        internal AstAggregateWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAggregateWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstAggregateWindowedFunction(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAggregateWindowedFunction Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction1(ctx, list.Get<AstAggFunction>(0), list.Get<AstAllDistinctExpression>(1), list.Get<AstOverClause?>(2));
            }
            if ((index == 2))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction2(ctx, list.Get<AstCountCountBig>(0), list.Get<AstAllDistinctExpressionOrStar>(1), list.Get<AstOverClause?>(2));
            }
            if ((index == 3))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction3(ctx, list.Get<AstAllDistinctExpression>(0));
            }
            if ((index == 4))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction4(ctx, list.Get<AstExpression>(0));
            }
            if ((index == 5))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction5(ctx, list.Get<AstExpressionList>(0));
            }
            return null;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    agg_function ( all_distinct_expression ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstAggFunction aggFunction, AstAllDistinctExpression allDistinctExpression, AstOverClause overClause)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction1 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction1(ctx, aggFunction, allDistinctExpression, overClause);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    count_count_big ( all_distinct_expression_or_star ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstCountCountBig countCountBig, AstAllDistinctExpressionOrStar allDistinctExpressionOrStar, AstOverClause overClause)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction2 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction2(ctx, countCountBig, allDistinctExpressionOrStar, overClause);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    CHECKSUM_AGG ( all_distinct_expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction3 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction3(ctx, allDistinctExpression);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    GROUPING ( expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstExpression expression)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction4 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction4(ctx, expression);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    GROUPING_ID ( expression_list ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstExpressionList expressionList)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction5 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction5(ctx, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// all_distinct_expression_or_star
    /// 	 : STAR
    /// 	 | all_distinct_expression
    /// </summary>
    public abstract partial class AstAllDistinctExpressionOrStar : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstAllDistinctExpression), false, false, "all_distinct_expression"))));
        
        private static string _ruleValue = "STAR\r\n | all_distinct_expression\r\n";
        
        private static string _ruleName = "all_distinct_expression_or_star";
        
        /// <summary>
        /// all_distinct_expression_or_star : STAR 
        /// </summary>
        public partial class AstAllDistinctExpressionOrStar1 : AstAllDistinctExpressionOrStar
        {
            
            private static string _ruleName1 = "all_distinct_expression_or_star";
            
            internal AstAllDistinctExpressionOrStar1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllDistinctExpressionOrStar(this);
            }
        }
        /// <summary>
        /// all_distinct_expression_or_star : all_distinct_expression 
        /// </summary>
        public partial class AstAllDistinctExpressionOrStar2 : AstAllDistinctExpressionOrStar
        {
            
            private static string _ruleName1 = "all_distinct_expression_or_star";
            
            private AstAllDistinctExpression _allDistinctExpression;
            
            internal AstAllDistinctExpressionOrStar2(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression) : 
                    base(ctx)
            {
                _allDistinctExpression = allDistinctExpression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstAllDistinctExpression AllDistinctExpression
            {
                get
                {
                    return _allDistinctExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllDistinctExpressionOrStar(this);
            }
        }
        

        
        internal AstAllDistinctExpressionOrStar(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAllDistinctExpressionOrStar(Position p) : 
                base(p)
        {
        }
        
        internal AstAllDistinctExpressionOrStar(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAllDistinctExpressionOrStar Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar1(ctx);
            }
            if ((index == 2))
            {
                return new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar2(ctx, list.Get<AstAllDistinctExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// all_distinct_expression_or_star : 
        ///    STAR 
        /// </summary>
        public static AstAllDistinctExpressionOrStar AllDistinctExpressionOrStar(ParserRuleContext ctx)
        {
            AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar1 result = new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar1(ctx);
            return result;
        }
        
        /// <summary>
        /// all_distinct_expression_or_star : 
        ///    all_distinct_expression 
        /// </summary>
        public static AstAllDistinctExpressionOrStar AllDistinctExpressionOrStar(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression)
        {
            AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar2 result = new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar2(ctx, allDistinctExpression);
            return result;
        }
    }
    
    /// <summary>
    /// analytic_windowed_function
    /// 	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// 	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
    /// 	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
    /// 	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
    /// </summary>
    public abstract partial class AstAnalyticWindowedFunction : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstLagLead), false, false, "lag_lead"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression2), false, false, "expression2"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOverClause), false, false, "over_clause")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstPercentil), false, false, "percentil"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOrderByClause), false, false, "order_by_clause"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), false, false, "expression_list")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFirstLastValue), false, false, "first_last_value"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOverClause), false, false, "over_clause")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstCumePercent), false, false, "cume_percent"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpressionList), false, false, "expression_list"), new Bb.Asts.AstRuleMatcherItem(typeof(AstOrderByClause), false, false, "order_by_clause"))));
        
        private static string _ruleValue = @"first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
";
        
        private static string _ruleName = "analytic_windowed_function";
        
        /// <summary>
        /// analytic_windowed_function : first_last_value LR_BRACKET expression RR_BRACKET over_clause 
        /// </summary>
        public partial class AstAnalyticWindowedFunction1 : AstAnalyticWindowedFunction
        {
            
            private static string _ruleName1 = "analytic_windowed_function";
            
            private AstFirstLastValue _firstLastValue;
            
            private AstExpression _expression;
            
            private AstOverClause _overClause;
            
            internal AstAnalyticWindowedFunction1(ParserRuleContext ctx, AstFirstLastValue firstLastValue, AstExpression expression, AstOverClause overClause) : 
                    base(ctx)
            {
                _firstLastValue = firstLastValue;
                _expression = expression;
                _overClause = overClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFirstLastValue FirstLastValue
            {
                get
                {
                    return _firstLastValue;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : lag_lead LR_BRACKET expression COMMA expression2 RR_BRACKET over_clause 
        /// </summary>
        public partial class AstAnalyticWindowedFunction2 : AstAnalyticWindowedFunction
        {
            
            private static string _ruleName1 = "analytic_windowed_function";
            
            private AstLagLead _lagLead;
            
            private AstExpression _expression;
            
            private AstExpression2 _expression2;
            
            private AstOverClause _overClause;
            
            internal AstAnalyticWindowedFunction2(ParserRuleContext ctx, AstLagLead lagLead, AstExpression expression, AstExpression2 expression2, AstOverClause overClause) : 
                    base(ctx)
            {
                _lagLead = lagLead;
                _expression = expression;
                _expression2 = expression2;
                _overClause = overClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLagLead LagLead
            {
                get
                {
                    return _lagLead;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstExpression2 Expression2
            {
                get
                {
                    return _expression2;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : cume_percent LR_BRACKET RR_BRACKET OVER LR_BRACKET PARTITION BY expression_list order_by_clause RR_BRACKET 
        /// </summary>
        public partial class AstAnalyticWindowedFunction3 : AstAnalyticWindowedFunction
        {
            
            private static string _ruleName1 = "analytic_windowed_function";
            
            private AstCumePercent _cumePercent;
            
            private AstExpressionList _expressionList;
            
            private AstOrderByClause _orderByClause;
            
            internal AstAnalyticWindowedFunction3(ParserRuleContext ctx, AstCumePercent cumePercent, AstExpressionList expressionList, AstOrderByClause orderByClause) : 
                    base(ctx)
            {
                _cumePercent = cumePercent;
                _expressionList = expressionList;
                _orderByClause = orderByClause;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstCumePercent CumePercent
            {
                get
                {
                    return _cumePercent;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : percentil LR_BRACKET expression RR_BRACKET WITHIN GROUP LR_BRACKET order_by_clause RR_BRACKET OVER LR_BRACKET PARTITION BY expression_list RR_BRACKET 
        /// </summary>
        public partial class AstAnalyticWindowedFunction4 : AstAnalyticWindowedFunction
        {
            
            private static string _ruleName1 = "analytic_windowed_function";
            
            private AstPercentil _percentil;
            
            private AstExpression _expression;
            
            private AstOrderByClause _orderByClause;
            
            private AstExpressionList _expressionList;
            
            internal AstAnalyticWindowedFunction4(ParserRuleContext ctx, AstPercentil percentil, AstExpression expression, AstOrderByClause orderByClause, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _percentil = percentil;
                _expression = expression;
                _orderByClause = orderByClause;
                _expressionList = expressionList;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstPercentil Percentil
            {
                get
                {
                    return _percentil;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        

        
        internal AstAnalyticWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAnalyticWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstAnalyticWindowedFunction(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAnalyticWindowedFunction Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1(ctx, list.Get<AstFirstLastValue>(0), list.Get<AstExpression>(1), list.Get<AstOverClause>(2));
            }
            if ((index == 2))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2(ctx, list.Get<AstLagLead>(0), list.Get<AstExpression>(1), list.Get<AstExpression2>(2), list.Get<AstOverClause>(3));
            }
            if ((index == 3))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3(ctx, list.Get<AstCumePercent>(0), list.Get<AstExpressionList>(1), list.Get<AstOrderByClause>(2));
            }
            if ((index == 4))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4(ctx, list.Get<AstPercentil>(0), list.Get<AstExpression>(1), list.Get<AstOrderByClause>(2), list.Get<AstExpressionList>(3));
            }
            return null;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    first_last_value ( expression ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstFirstLastValue firstLastValue, AstExpression expression, AstOverClause overClause)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1(ctx, firstLastValue, expression, overClause);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    lag_lead ( expression , expression2 ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstLagLead lagLead, AstExpression expression, AstExpression2 expression2, AstOverClause overClause)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2(ctx, lagLead, expression, expression2, overClause);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    cume_percent ( ) OVER ( PARTITION BY expression_list order_by_clause ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstCumePercent cumePercent, AstExpressionList expressionList, AstOrderByClause orderByClause)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3(ctx, cumePercent, expressionList, orderByClause);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    percentil ( expression ) WITHIN GROUP ( order_by_clause ) OVER ( PARTITION BY expression_list ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstPercentil percentil, AstExpression expression, AstOrderByClause orderByClause, AstExpressionList expressionList)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4(ctx, percentil, expression, orderByClause, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_extent
    /// 	 : window_frame_preceding
    /// 	 | BETWEEN  left = window_frame_bound  AND  right = window_frame_bound
    /// </summary>
    public abstract partial class AstWindowFrameExtent : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstWindowFrameBound), false, false, "window_frame_bound"), new Bb.Asts.AstRuleMatcherItem(typeof(AstWindowFrameBound), false, false, "window_frame_bound")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWindowFramePreceding), false, false, "window_frame_preceding"))));
        
        private static string _ruleValue = "window_frame_preceding\r\n | BETWEEN  left = window_frame_bound  AND  right = windo" +
            "w_frame_bound\r\n";
        
        private static string _ruleName = "window_frame_extent";
        
        /// <summary>
        /// window_frame_extent : window_frame_preceding 
        /// </summary>
        public partial class AstWindowFrameExtent1 : AstWindowFrameExtent
        {
            
            private static string _ruleName1 = "window_frame_extent";
            
            private AstWindowFramePreceding _windowFramePreceding;
            
            internal AstWindowFrameExtent1(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding) : 
                    base(ctx)
            {
                _windowFramePreceding = windowFramePreceding;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWindowFramePreceding WindowFramePreceding
            {
                get
                {
                    return _windowFramePreceding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameExtent(this);
            }
        }
        /// <summary>
        /// window_frame_extent : BETWEEN left=window_frame_bound AND right=window_frame_bound 
        /// </summary>
        public partial class AstWindowFrameExtent2 : AstWindowFrameExtent
        {
            
            private static string _ruleName1 = "window_frame_extent";
            
            private AstWindowFrameBound _left;
            
            private AstWindowFrameBound _right;
            
            internal AstWindowFrameExtent2(ParserRuleContext ctx, AstWindowFrameBound left, AstWindowFrameBound right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWindowFrameBound Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstWindowFrameBound Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameExtent(this);
            }
        }
        

        
        internal AstWindowFrameExtent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameExtent(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameExtent(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWindowFrameExtent Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWindowFrameExtent.AstWindowFrameExtent1(ctx, list.Get<AstWindowFramePreceding>(0));
            }
            if ((index == 2))
            {
                return new AstWindowFrameExtent.AstWindowFrameExtent2(ctx, list.Get<AstWindowFrameBound>(0), list.Get<AstWindowFrameBound>(1));
            }
            return null;
        }
        
        /// <summary>
        /// window_frame_extent : 
        ///    window_frame_preceding 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding)
        {
            AstWindowFrameExtent.AstWindowFrameExtent1 result = new AstWindowFrameExtent.AstWindowFrameExtent1(ctx, windowFramePreceding);
            return result;
        }
        
        /// <summary>
        /// window_frame_extent : 
        ///    BETWEEN left=window_frame_bound AND right=window_frame_bound 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(ParserRuleContext ctx, AstWindowFrameBound left, AstWindowFrameBound right)
        {
            AstWindowFrameExtent.AstWindowFrameExtent2 result = new AstWindowFrameExtent.AstWindowFrameExtent2(ctx, left, right);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_bound
    /// 	 : window_frame_preceding
    /// 	 | window_frame_following
    /// </summary>
    public abstract partial class AstWindowFrameBound : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstWindowFramePreceding), false, false, "window_frame_preceding")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstWindowFrameFollowing), false, false, "window_frame_following"))));
        
        private static string _ruleValue = "window_frame_preceding\r\n | window_frame_following\r\n";
        
        private static string _ruleName = "window_frame_bound";
        
        /// <summary>
        /// window_frame_bound : window_frame_preceding 
        /// </summary>
        public partial class AstWindowFrameBound1 : AstWindowFrameBound
        {
            
            private static string _ruleName1 = "window_frame_bound";
            
            private AstWindowFramePreceding _windowFramePreceding;
            
            internal AstWindowFrameBound1(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding) : 
                    base(ctx)
            {
                _windowFramePreceding = windowFramePreceding;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWindowFramePreceding WindowFramePreceding
            {
                get
                {
                    return _windowFramePreceding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameBound(this);
            }
        }
        /// <summary>
        /// window_frame_bound : window_frame_following 
        /// </summary>
        public partial class AstWindowFrameBound2 : AstWindowFrameBound
        {
            
            private static string _ruleName1 = "window_frame_bound";
            
            private AstWindowFrameFollowing _windowFrameFollowing;
            
            internal AstWindowFrameBound2(ParserRuleContext ctx, AstWindowFrameFollowing windowFrameFollowing) : 
                    base(ctx)
            {
                _windowFrameFollowing = windowFrameFollowing;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstWindowFrameFollowing WindowFrameFollowing
            {
                get
                {
                    return _windowFrameFollowing;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameBound(this);
            }
        }
        

        
        internal AstWindowFrameBound(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameBound(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameBound(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWindowFrameBound Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWindowFrameBound.AstWindowFrameBound1(ctx, list.Get<AstWindowFramePreceding>(0));
            }
            if ((index == 2))
            {
                return new AstWindowFrameBound.AstWindowFrameBound2(ctx, list.Get<AstWindowFrameFollowing>(0));
            }
            return null;
        }
        
        /// <summary>
        /// window_frame_bound : 
        ///    window_frame_preceding 
        /// </summary>
        public static AstWindowFrameBound WindowFrameBound(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding)
        {
            AstWindowFrameBound.AstWindowFrameBound1 result = new AstWindowFrameBound.AstWindowFrameBound1(ctx, windowFramePreceding);
            return result;
        }
        
        /// <summary>
        /// window_frame_bound : 
        ///    window_frame_following 
        /// </summary>
        public static AstWindowFrameBound WindowFrameBound(ParserRuleContext ctx, AstWindowFrameFollowing windowFrameFollowing)
        {
            AstWindowFrameBound.AstWindowFrameBound2 result = new AstWindowFrameBound.AstWindowFrameBound2(ctx, windowFrameFollowing);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_preceding
    /// 	 : UNBOUNDED  PRECEDING
    /// 	 | decimal  PRECEDING
    /// 	 | CURRENT  ROW
    /// </summary>
    public abstract partial class AstWindowFramePreceding : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "UNBOUNDED  PRECEDING\r\n | decimal  PRECEDING\r\n | CURRENT  ROW\r\n";
        
        private static string _ruleName = "window_frame_preceding";
        
        /// <summary>
        /// window_frame_preceding : UNBOUNDED PRECEDING 
        /// </summary>
        public partial class AstWindowFramePreceding1 : AstWindowFramePreceding
        {
            
            private static string _ruleName1 = "window_frame_preceding";
            
            internal AstWindowFramePreceding1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        /// <summary>
        /// window_frame_preceding : decimal PRECEDING 
        /// </summary>
        public partial class AstWindowFramePreceding2 : AstWindowFramePreceding
        {
            
            private static string _ruleName1 = "window_frame_preceding";
            
            private AstDecimal _decimal;
            
            internal AstWindowFramePreceding2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        /// <summary>
        /// window_frame_preceding : CURRENT ROW 
        /// </summary>
        public partial class AstWindowFramePreceding3 : AstWindowFramePreceding
        {
            
            private static string _ruleName1 = "window_frame_preceding";
            
            internal AstWindowFramePreceding3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        

        
        internal AstWindowFramePreceding(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFramePreceding(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFramePreceding(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWindowFramePreceding Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWindowFramePreceding.AstWindowFramePreceding1(ctx);
            }
            if ((index == 2))
            {
                return new AstWindowFramePreceding.AstWindowFramePreceding2(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 3))
            {
                return new AstWindowFramePreceding.AstWindowFramePreceding3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// window_frame_preceding : 
        ///    UNBOUNDED PRECEDING 
        /// </summary>
        public static AstWindowFramePreceding WindowFramePreceding(ParserRuleContext ctx)
        {
            AstWindowFramePreceding.AstWindowFramePreceding1 result = new AstWindowFramePreceding.AstWindowFramePreceding1(ctx);
            return result;
        }
        
        /// <summary>
        /// window_frame_preceding : 
        ///    decimal PRECEDING 
        /// </summary>
        public static AstWindowFramePreceding WindowFramePreceding(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstWindowFramePreceding.AstWindowFramePreceding2 result = new AstWindowFramePreceding.AstWindowFramePreceding2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_following
    /// 	 : UNBOUNDED  FOLLOWING
    /// 	 | decimal  FOLLOWING
    /// </summary>
    public abstract partial class AstWindowFrameFollowing : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "UNBOUNDED  FOLLOWING\r\n | decimal  FOLLOWING\r\n";
        
        private static string _ruleName = "window_frame_following";
        
        /// <summary>
        /// window_frame_following : UNBOUNDED FOLLOWING 
        /// </summary>
        public partial class AstWindowFrameFollowing1 : AstWindowFrameFollowing
        {
            
            private static string _ruleName1 = "window_frame_following";
            
            internal AstWindowFrameFollowing1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameFollowing(this);
            }
        }
        /// <summary>
        /// window_frame_following : decimal FOLLOWING 
        /// </summary>
        public partial class AstWindowFrameFollowing2 : AstWindowFrameFollowing
        {
            
            private static string _ruleName1 = "window_frame_following";
            
            private AstDecimal _decimal;
            
            internal AstWindowFrameFollowing2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameFollowing(this);
            }
        }
        

        
        internal AstWindowFrameFollowing(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameFollowing(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameFollowing(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstWindowFrameFollowing Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstWindowFrameFollowing.AstWindowFrameFollowing1(ctx);
            }
            if ((index == 2))
            {
                return new AstWindowFrameFollowing.AstWindowFrameFollowing2(ctx, list.Get<AstDecimal>(0));
            }
            return null;
        }
        
        /// <summary>
        /// window_frame_following : 
        ///    UNBOUNDED FOLLOWING 
        /// </summary>
        public static AstWindowFrameFollowing WindowFrameFollowing(ParserRuleContext ctx)
        {
            AstWindowFrameFollowing.AstWindowFrameFollowing1 result = new AstWindowFrameFollowing.AstWindowFrameFollowing1(ctx);
            return result;
        }
        
        /// <summary>
        /// window_frame_following : 
        ///    decimal FOLLOWING 
        /// </summary>
        public static AstWindowFrameFollowing WindowFrameFollowing(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstWindowFrameFollowing.AstWindowFrameFollowing2 result = new AstWindowFrameFollowing.AstWindowFrameFollowing2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// create_database_option
    /// 	 : FILESTREAM  database_filestream_options
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// 	 | DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// </summary>
    public abstract partial class AstCreateDatabaseOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseFilestreamOptions), false, false, "database_filestream_options")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstIdOrString), false, false, "id_or_string")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstIdOrString), false, false, "id_or_string")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(7, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off")), new Bb.Asts.AstRuleMatcherItems(8, new Bb.Asts.AstRuleMatcherItem(typeof(AstOnOff), false, false, "on_off"))));
        
        private static string _ruleValue = @"FILESTREAM  database_filestream_options
 | DEFAULT_LANGUAGE  EQUAL  id_or_string
 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
 | NESTED_TRIGGERS  EQUAL  on_off
 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
 | DB_CHAINING  on_off
 | TRUSTWORTHY  on_off
";
        
        private static string _ruleName = "create_database_option";
        
        /// <summary>
        /// create_database_option : FILESTREAM database_filestream_options 
        /// </summary>
        public partial class AstCreateDatabaseOption1 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstDatabaseFilestreamOptions _databaseFilestreamOptions;
            
            internal AstCreateDatabaseOption1(ParserRuleContext ctx, AstDatabaseFilestreamOptions databaseFilestreamOptions) : 
                    base(ctx)
            {
                _databaseFilestreamOptions = databaseFilestreamOptions;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDatabaseFilestreamOptions DatabaseFilestreamOptions
            {
                get
                {
                    return _databaseFilestreamOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public partial class AstCreateDatabaseOption2 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstIdOrString _idOrString;
            
            internal AstCreateDatabaseOption2(ParserRuleContext ctx, AstIdOrString idOrString) : 
                    base(ctx)
            {
                _idOrString = idOrString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIdOrString IdOrString
            {
                get
                {
                    return _idOrString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DEFAULT_FULLTEXT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public partial class AstCreateDatabaseOption3 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstIdOrString _idOrString;
            
            internal AstCreateDatabaseOption3(ParserRuleContext ctx, AstIdOrString idOrString) : 
                    base(ctx)
            {
                _idOrString = idOrString;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstIdOrString IdOrString
            {
                get
                {
                    return _idOrString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption4 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TRANSFORM_NOISE_WORDS EQUAL on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption5 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public partial class AstCreateDatabaseOption6 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstDecimal _decimal;
            
            internal AstCreateDatabaseOption6(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DB_CHAINING on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption7 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TRUSTWORTHY on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption8 : AstCreateDatabaseOption
        {
            
            private static string _ruleName1 = "create_database_option";
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        

        
        internal AstCreateDatabaseOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateDatabaseOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateDatabaseOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstCreateDatabaseOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption1(ctx, list.Get<AstDatabaseFilestreamOptions>(0));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption2(ctx, list.Get<AstIdOrString>(0));
            }
            if ((index == 3))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption3(ctx, list.Get<AstIdOrString>(0));
            }
            if ((index == 4))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption4(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 5))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption5(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 6))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption6(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 7))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption7(ctx, list.Get<AstOnOff>(0));
            }
            if ((index == 8))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption8(ctx, list.Get<AstOnOff>(0));
            }
            return null;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    FILESTREAM database_filestream_options 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstDatabaseFilestreamOptions databaseFilestreamOptions)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption1 result = new AstCreateDatabaseOption.AstCreateDatabaseOption1(ctx, databaseFilestreamOptions);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstIdOrString idOrString)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption2 result = new AstCreateDatabaseOption.AstCreateDatabaseOption2(ctx, idOrString);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption4 result = new AstCreateDatabaseOption.AstCreateDatabaseOption4(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption6 result = new AstCreateDatabaseOption.AstCreateDatabaseOption6(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// database_filestream_option
    /// 	 : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET
    /// </summary>
    public abstract partial class AstDatabaseFilestreamOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstOffReadOnlyFull), false, false, "off_read_only_full")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext"))));
        
        private static string _ruleValue = "LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full) | (DIRECTORY_NAME" +
            "  EQUAL  stringtext))  RR_BRACKET\r\n";
        
        private static string _ruleName = "database_filestream_option";
        
        /// <summary>
        /// database_filestream_option : LR_BRACKET NON_TRANSACTED_ACCESS EQUAL off_read_only_full RR_BRACKET 
        /// </summary>
        public partial class AstDatabaseFilestreamOption1 : AstDatabaseFilestreamOption
        {
            
            private static string _ruleName1 = "database_filestream_option";
            
            private AstOffReadOnlyFull _offReadOnlyFull;
            
            internal AstDatabaseFilestreamOption1(ParserRuleContext ctx, AstOffReadOnlyFull offReadOnlyFull) : 
                    base(ctx)
            {
                _offReadOnlyFull = offReadOnlyFull;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstOffReadOnlyFull OffReadOnlyFull
            {
                get
                {
                    return _offReadOnlyFull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFilestreamOption(this);
            }
        }
        /// <summary>
        /// database_filestream_option : LR_BRACKET DIRECTORY_NAME EQUAL stringtext RR_BRACKET 
        /// </summary>
        public partial class AstDatabaseFilestreamOption2 : AstDatabaseFilestreamOption
        {
            
            private static string _ruleName1 = "database_filestream_option";
            
            private AstStringtext _stringtext;
            
            internal AstDatabaseFilestreamOption2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFilestreamOption(this);
            }
        }
        

        
        internal AstDatabaseFilestreamOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseFilestreamOption(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseFilestreamOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDatabaseFilestreamOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption1(ctx, list.Get<AstOffReadOnlyFull>(0));
            }
            if ((index == 2))
            {
                return new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption2(ctx, list.Get<AstStringtext>(0));
            }
            return null;
        }
        
        /// <summary>
        /// database_filestream_option : 
        ///    ( NON_TRANSACTED_ACCESS EQUAL off_read_only_full ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(ParserRuleContext ctx, AstOffReadOnlyFull offReadOnlyFull)
        {
            AstDatabaseFilestreamOption.AstDatabaseFilestreamOption1 result = new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption1(ctx, offReadOnlyFull);
            return result;
        }
        
        /// <summary>
        /// database_filestream_option : 
        ///    ( DIRECTORY_NAME EQUAL stringtext ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstDatabaseFilestreamOption.AstDatabaseFilestreamOption2 result = new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// database_file_spec
    /// 	 : file_group
    /// 	 | file_spec
    /// </summary>
    public abstract partial class AstDatabaseFileSpec : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileGroup), false, false, "file_group")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileSpec), false, false, "file_spec"))));
        
        private static string _ruleValue = "file_group\r\n | file_spec\r\n";
        
        private static string _ruleName = "database_file_spec";
        
        /// <summary>
        /// database_file_spec : file_group 
        /// </summary>
        public partial class AstDatabaseFileSpec1 : AstDatabaseFileSpec
        {
            
            private static string _ruleName1 = "database_file_spec";
            
            private AstFileGroup _fileGroup;
            
            internal AstDatabaseFileSpec1(ParserRuleContext ctx, AstFileGroup fileGroup) : 
                    base(ctx)
            {
                _fileGroup = fileGroup;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileGroup FileGroup
            {
                get
                {
                    return _fileGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFileSpec(this);
            }
        }
        /// <summary>
        /// database_file_spec : file_spec 
        /// </summary>
        public partial class AstDatabaseFileSpec2 : AstDatabaseFileSpec
        {
            
            private static string _ruleName1 = "database_file_spec";
            
            private AstFileSpec _fileSpec;
            
            internal AstDatabaseFileSpec2(ParserRuleContext ctx, AstFileSpec fileSpec) : 
                    base(ctx)
            {
                _fileSpec = fileSpec;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileSpec FileSpec
            {
                get
                {
                    return _fileSpec;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFileSpec(this);
            }
        }
        

        
        internal AstDatabaseFileSpec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseFileSpec(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseFileSpec(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDatabaseFileSpec Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDatabaseFileSpec.AstDatabaseFileSpec1(ctx, list.Get<AstFileGroup>(0));
            }
            if ((index == 2))
            {
                return new AstDatabaseFileSpec.AstDatabaseFileSpec2(ctx, list.Get<AstFileSpec>(0));
            }
            return null;
        }
        
        /// <summary>
        /// database_file_spec : 
        ///    file_group 
        /// </summary>
        public static AstDatabaseFileSpec DatabaseFileSpec(ParserRuleContext ctx, AstFileGroup fileGroup)
        {
            AstDatabaseFileSpec.AstDatabaseFileSpec1 result = new AstDatabaseFileSpec.AstDatabaseFileSpec1(ctx, fileGroup);
            return result;
        }
        
        /// <summary>
        /// database_file_spec : 
        ///    file_spec 
        /// </summary>
        public static AstDatabaseFileSpec DatabaseFileSpec(ParserRuleContext ctx, AstFileSpec fileSpec)
        {
            AstDatabaseFileSpec.AstDatabaseFileSpec2 result = new AstDatabaseFileSpec.AstDatabaseFileSpec2(ctx, fileSpec);
            return result;
        }
    }
    
    /// <summary>
    /// max_file_size_value
    /// 	 : file_size
    /// 	 | UNLIMITED
    /// </summary>
    public abstract partial class AstMaxFileSizeValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFileSize), false, false, "file_size"))));
        
        private static string _ruleValue = "file_size\r\n | UNLIMITED\r\n";
        
        private static string _ruleName = "max_file_size_value";
        
        /// <summary>
        /// max_file_size_value : file_size 
        /// </summary>
        public partial class AstMaxFileSizeValue1 : AstMaxFileSizeValue
        {
            
            private static string _ruleName1 = "max_file_size_value";
            
            private AstFileSize _fileSize;
            
            internal AstMaxFileSizeValue1(ParserRuleContext ctx, AstFileSize fileSize) : 
                    base(ctx)
            {
                _fileSize = fileSize;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFileSize FileSize
            {
                get
                {
                    return _fileSize;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMaxFileSizeValue(this);
            }
        }
        /// <summary>
        /// max_file_size_value : UNLIMITED 
        /// </summary>
        public partial class AstMaxFileSizeValue2 : AstMaxFileSizeValue
        {
            
            private static string _ruleName1 = "max_file_size_value";
            
            internal AstMaxFileSizeValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMaxFileSizeValue(this);
            }
        }
        

        
        internal AstMaxFileSizeValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMaxFileSizeValue(Position p) : 
                base(p)
        {
        }
        
        internal AstMaxFileSizeValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstMaxFileSizeValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstMaxFileSizeValue.AstMaxFileSizeValue1(ctx, list.Get<AstFileSize>(0));
            }
            if ((index == 2))
            {
                return new AstMaxFileSizeValue.AstMaxFileSizeValue2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// max_file_size_value : 
        ///    file_size 
        /// </summary>
        public static AstMaxFileSizeValue MaxFileSizeValue(ParserRuleContext ctx, AstFileSize fileSize)
        {
            AstMaxFileSizeValue.AstMaxFileSizeValue1 result = new AstMaxFileSizeValue.AstMaxFileSizeValue1(ctx, fileSize);
            return result;
        }
        
        /// <summary>
        /// max_file_size_value : 
        ///    UNLIMITED 
        /// </summary>
        public static AstMaxFileSizeValue MaxFileSizeValue(ParserRuleContext ctx)
        {
            AstMaxFileSizeValue.AstMaxFileSizeValue2 result = new AstMaxFileSizeValue.AstMaxFileSizeValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// null_or_default
    /// 	 : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)
    /// </summary>
    public abstract partial class AstNullOrDefault : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstantExpression), false, false, "constant_expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstNullNotnull), false, false, "null_notnull"))));
        
        private static string _ruleValue = "(null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)\r\n" +
            "";
        
        private static string _ruleName = "null_or_default";
        
        /// <summary>
        /// null_or_default : null_notnull 
        /// </summary>
        public partial class AstNullOrDefault1 : AstNullOrDefault
        {
            
            private static string _ruleName1 = "null_or_default";
            
            private AstNullNotnull _nullNotnull;
            
            internal AstNullOrDefault1(ParserRuleContext ctx, AstNullNotnull nullNotnull) : 
                    base(ctx)
            {
                _nullNotnull = nullNotnull;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstNullNotnull NullNotnull
            {
                get
                {
                    return _nullNotnull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNullOrDefault(this);
            }
        }
        /// <summary>
        /// null_or_default : DEFAULT constant_expression COLLATE id_ WITH VALUES 
        /// </summary>
        public partial class AstNullOrDefault2 : AstNullOrDefault
        {
            
            private static string _ruleName1 = "null_or_default";
            
            private AstConstantExpression _constantExpression;
            
            private AstId _id;
            
            internal AstNullOrDefault2(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id) : 
                    base(ctx)
            {
                _constantExpression = constantExpression;
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstantExpression ConstantExpression
            {
                get
                {
                    return _constantExpression;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNullOrDefault(this);
            }
        }
        

        
        internal AstNullOrDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstNullOrDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstNullOrDefault(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstNullOrDefault Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstNullOrDefault.AstNullOrDefault1(ctx, list.Get<AstNullNotnull>(0));
            }
            if ((index == 2))
            {
                return new AstNullOrDefault.AstNullOrDefault2(ctx, list.Get<AstConstantExpression>(0), list.Get<AstId>(1));
            }
            return null;
        }
        
        /// <summary>
        /// null_or_default : 
        ///    null_notnull 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(ParserRuleContext ctx, AstNullNotnull nullNotnull)
        {
            AstNullOrDefault.AstNullOrDefault1 result = new AstNullOrDefault.AstNullOrDefault1(ctx, nullNotnull);
            return result;
        }
        
        /// <summary>
        /// null_or_default : 
        ///    DEFAULT constant_expression COLLATE id_ WITH VALUES 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id)
        {
            AstNullOrDefault.AstNullOrDefault2 result = new AstNullOrDefault.AstNullOrDefault2(ctx, constantExpression, id);
            return result;
        }
    }
    
    /// <summary>
    /// scalar_function_name
    /// 	 : func_proc_name_server_database_schema
    /// 	 | scalar_function_name_enum
    /// </summary>
    public abstract partial class AstScalarFunctionName : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstFuncProcNameServerDatabaseSchema), false, false, "func_proc_name_server_database_schema")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstScalarFunctionNameEnum), false, false, "scalar_function_name_enum"))));
        
        private static string _ruleValue = "func_proc_name_server_database_schema\r\n | scalar_function_name_enum\r\n";
        
        private static string _ruleName = "scalar_function_name";
        
        /// <summary>
        /// scalar_function_name : func_proc_name_server_database_schema 
        /// </summary>
        public partial class AstScalarFunctionName1 : AstScalarFunctionName
        {
            
            private static string _ruleName1 = "scalar_function_name";
            
            private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
            
            internal AstScalarFunctionName1(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema) : 
                    base(ctx)
            {
                _funcProcNameServerDatabaseSchema = funcProcNameServerDatabaseSchema;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
            {
                get
                {
                    return _funcProcNameServerDatabaseSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitScalarFunctionName(this);
            }
        }
        /// <summary>
        /// scalar_function_name : scalar_function_name_enum 
        /// </summary>
        public partial class AstScalarFunctionName2 : AstScalarFunctionName
        {
            
            private static string _ruleName1 = "scalar_function_name";
            
            private AstScalarFunctionNameEnum _scalarFunctionNameEnum;
            
            internal AstScalarFunctionName2(ParserRuleContext ctx, AstScalarFunctionNameEnum scalarFunctionNameEnum) : 
                    base(ctx)
            {
                _scalarFunctionNameEnum = scalarFunctionNameEnum;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstScalarFunctionNameEnum ScalarFunctionNameEnum
            {
                get
                {
                    return _scalarFunctionNameEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitScalarFunctionName(this);
            }
        }
        

        
        internal AstScalarFunctionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstScalarFunctionName(Position p) : 
                base(p)
        {
        }
        
        internal AstScalarFunctionName(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstScalarFunctionName Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstScalarFunctionName.AstScalarFunctionName1(ctx, list.Get<AstFuncProcNameServerDatabaseSchema>(0));
            }
            if ((index == 2))
            {
                return new AstScalarFunctionName.AstScalarFunctionName2(ctx, list.Get<AstScalarFunctionNameEnum>(0));
            }
            return null;
        }
        
        /// <summary>
        /// scalar_function_name : 
        ///    func_proc_name_server_database_schema 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema)
        {
            AstScalarFunctionName.AstScalarFunctionName1 result = new AstScalarFunctionName.AstScalarFunctionName1(ctx, funcProcNameServerDatabaseSchema);
            return result;
        }
        
        /// <summary>
        /// scalar_function_name : 
        ///    scalar_function_name_enum 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(ParserRuleContext ctx, AstScalarFunctionNameEnum scalarFunctionNameEnum)
        {
            AstScalarFunctionName.AstScalarFunctionName2 result = new AstScalarFunctionName.AstScalarFunctionName2(ctx, scalarFunctionNameEnum);
            return result;
        }
    }
    
    /// <summary>
    /// contract_name_expression
    /// 	 : id_
    /// 	 | expression
    /// </summary>
    public abstract partial class AstContractNameExpression : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "id_\r\n | expression\r\n";
        
        private static string _ruleName = "contract_name_expression";
        
        /// <summary>
        /// contract_name_expression : id_ 
        /// </summary>
        public partial class AstContractNameExpression1 : AstContractNameExpression
        {
            
            private static string _ruleName1 = "contract_name_expression";
            
            private AstId _id;
            
            internal AstContractNameExpression1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractNameExpression(this);
            }
        }
        /// <summary>
        /// contract_name_expression : expression 
        /// </summary>
        public partial class AstContractNameExpression2 : AstContractNameExpression
        {
            
            private static string _ruleName1 = "contract_name_expression";
            
            private AstExpression _expression;
            
            internal AstContractNameExpression2(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractNameExpression(this);
            }
        }
        

        
        internal AstContractNameExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstContractNameExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstContractNameExpression(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstContractNameExpression Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstContractNameExpression.AstContractNameExpression1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstContractNameExpression.AstContractNameExpression2(ctx, list.Get<AstExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// contract_name_expression : 
        ///    id_ 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(ParserRuleContext ctx, AstId id)
        {
            AstContractNameExpression.AstContractNameExpression1 result = new AstContractNameExpression.AstContractNameExpression1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// contract_name_expression : 
        ///    expression 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(ParserRuleContext ctx, AstExpression expression)
        {
            AstContractNameExpression.AstContractNameExpression2 result = new AstContractNameExpression.AstContractNameExpression2(ctx, expression);
            return result;
        }
    }
    
    /// <summary>
    /// service_name_expr
    /// 	 : id_
    /// 	 | expression
    /// </summary>
    public abstract partial class AstServiceNameExpr : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"))));
        
        private static string _ruleValue = "id_\r\n | expression\r\n";
        
        private static string _ruleName = "service_name_expr";
        
        /// <summary>
        /// service_name_expr : id_ 
        /// </summary>
        public partial class AstServiceNameExpr1 : AstServiceNameExpr
        {
            
            private static string _ruleName1 = "service_name_expr";
            
            private AstId _id;
            
            internal AstServiceNameExpr1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceNameExpr(this);
            }
        }
        /// <summary>
        /// service_name_expr : expression 
        /// </summary>
        public partial class AstServiceNameExpr2 : AstServiceNameExpr
        {
            
            private static string _ruleName1 = "service_name_expr";
            
            private AstExpression _expression;
            
            internal AstServiceNameExpr2(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceNameExpr(this);
            }
        }
        

        
        internal AstServiceNameExpr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServiceNameExpr(Position p) : 
                base(p)
        {
        }
        
        internal AstServiceNameExpr(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstServiceNameExpr Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstServiceNameExpr.AstServiceNameExpr1(ctx, list.Get<AstId>(0));
            }
            if ((index == 2))
            {
                return new AstServiceNameExpr.AstServiceNameExpr2(ctx, list.Get<AstExpression>(0));
            }
            return null;
        }
        
        /// <summary>
        /// service_name_expr : 
        ///    id_ 
        /// </summary>
        public static AstServiceNameExpr ServiceNameExpr(ParserRuleContext ctx, AstId id)
        {
            AstServiceNameExpr.AstServiceNameExpr1 result = new AstServiceNameExpr.AstServiceNameExpr1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// service_name_expr : 
        ///    expression 
        /// </summary>
        public static AstServiceNameExpr ServiceNameExpr(ParserRuleContext ctx, AstExpression expression)
        {
            AstServiceNameExpr.AstServiceNameExpr2 result = new AstServiceNameExpr.AstServiceNameExpr2(ctx, expression);
            return result;
        }
    }
    
    /// <summary>
    /// end_conversation
    /// 	 : END  CONVERSATION  conversation_handle = local_id  SEMI?  (WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure_text = string_local_id)?  CLEANUP?)?
    /// </summary>
    public partial class AstEndConversation : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringLocalId), false, false, "string_local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringLocalId), false, false, "string_local_id"))));
        
        private AstLocalId _conversationHandle;
        
        private AstStringLocalId _faliureCode;
        
        private AstStringLocalId _failureText;
        
        private static string _ruleValue = "END  CONVERSATION  conversation_handle = local_id  SEMI?  (WITH  (ERROR  EQUAL  f" +
            "aliure_code = string_local_id  DESCRIPTION  EQUAL  failure_text = string_local_i" +
            "d)?  CLEANUP?)?\r\n";
        
        private static string _ruleName = "end_conversation";
        
        internal AstEndConversation(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEndConversation(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEndConversation(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstEndConversation(ParserRuleContext ctx, AstLocalId conversationHandle, AstStringLocalId faliureCode, AstStringLocalId failureText) : 
                base(ctx)
        {
            _conversationHandle = conversationHandle;
            _faliureCode = faliureCode;
            _failureText = failureText;
        }
        
        public virtual AstLocalId ConversationHandle
        {
            get
            {
                return _conversationHandle;
            }
        }
        
        public virtual AstStringLocalId FaliureCode
        {
            get
            {
                return _faliureCode;
            }
        }
        
        public virtual AstStringLocalId FailureText
        {
            get
            {
                return _failureText;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndConversation(this);
        }
        
        public static AstEndConversation Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstEndConversation(ctx, list.Get<AstLocalId>(0), list.Get<AstStringLocalId>(1), list.Get<AstStringLocalId>(2));
        }
        
        /// <summary>
        /// end_conversation : 
        ///    END CONVERSATION conversation_handle=local_id SEMI? WITH ERROR EQUAL faliure_code=string_local_id DESCRIPTION EQUAL failure_text=string_local_id CLEANUP? 
        /// </summary>
        public static AstEndConversation EndConversation(ParserRuleContext ctx, AstLocalId conversationHandle, AstStringLocalId faliureCode, AstStringLocalId failureText)
        {
            AstEndConversation result = new AstEndConversation(ctx, conversationHandle, faliureCode, failureText);
            return result;
        }
    }
    
    /// <summary>
    /// get_conversation
    /// 	 : GET  CONVERSATION  GROUP  conversation_group = string_local_id  FROM  queue = database_schema_queue_ref
    /// </summary>
    public partial class AstGetConversation : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringLocalId), false, false, "string_local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDatabaseSchemaQueueRef), false, false, "database_schema_queue_ref"))));
        
        private AstStringLocalId _conversationGroup;
        
        private AstDatabaseSchemaQueueRef _queue;
        
        private static string _ruleValue = "GET  CONVERSATION  GROUP  conversation_group = string_local_id  FROM  queue = dat" +
            "abase_schema_queue_ref\r\n";
        
        private static string _ruleName = "get_conversation";
        
        internal AstGetConversation(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGetConversation(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGetConversation(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstGetConversation(ParserRuleContext ctx, AstStringLocalId conversationGroup, AstDatabaseSchemaQueueRef queue) : 
                base(ctx)
        {
            _conversationGroup = conversationGroup;
            _queue = queue;
        }
        
        public virtual AstStringLocalId ConversationGroup
        {
            get
            {
                return _conversationGroup;
            }
        }
        
        public virtual AstDatabaseSchemaQueueRef Queue
        {
            get
            {
                return _queue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGetConversation(this);
        }
        
        public static AstGetConversation Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstGetConversation(ctx, list.Get<AstStringLocalId>(0), list.Get<AstDatabaseSchemaQueueRef>(1));
        }
        
        /// <summary>
        /// get_conversation : 
        ///    GET CONVERSATION GROUP conversation_group=string_local_id FROM queue=database_schema_queue_ref 
        /// </summary>
        public static AstGetConversation GetConversation(ParserRuleContext ctx, AstStringLocalId conversationGroup, AstDatabaseSchemaQueueRef queue)
        {
            AstGetConversation result = new AstGetConversation(ctx, conversationGroup, queue);
            return result;
        }
    }
    
    /// <summary>
    /// send_conversation
    /// 	 : SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id  RR_BRACKET)?
    /// </summary>
    public partial class AstSendConversation : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringLocalId), false, false, "string_local_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstExpression), false, false, "expression"), new Bb.Asts.AstRuleMatcherItem(typeof(AstStringLocalId), false, false, "string_local_id"))));
        
        private AstStringLocalId _conversationHandle;
        
        private AstExpression _messageTypeName;
        
        private AstStringLocalId _messageBodyEexpression;
        
        private static string _ruleValue = "SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  mes" +
            "sageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id" +
            "  RR_BRACKET)?\r\n";
        
        private static string _ruleName = "send_conversation";
        
        internal AstSendConversation(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSendConversation(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSendConversation(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstSendConversation(ParserRuleContext ctx, AstStringLocalId conversationHandle, AstExpression messageTypeName, AstStringLocalId messageBodyEexpression) : 
                base(ctx)
        {
            _conversationHandle = conversationHandle;
            _messageTypeName = messageTypeName;
            _messageBodyEexpression = messageBodyEexpression;
        }
        
        public virtual AstStringLocalId ConversationHandle
        {
            get
            {
                return _conversationHandle;
            }
        }
        
        public virtual AstExpression Messagetypename
        {
            get
            {
                return _messageTypeName;
            }
        }
        
        public virtual AstStringLocalId Messagebodyeexpression
        {
            get
            {
                return _messageBodyEexpression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSendConversation(this);
        }
        
        public static AstSendConversation Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstSendConversation(ctx, list.Get<AstStringLocalId>(0), list.Get<AstExpression>(1), list.Get<AstStringLocalId>(2));
        }
        
        /// <summary>
        /// send_conversation : 
        ///    SEND ON CONVERSATION conversation_handle=string_local_id MESSAGE TYPE messageTypeName=expression ( messageBodyEexpression=string_local_id ) 
        /// </summary>
        public static AstSendConversation SendConversation(ParserRuleContext ctx, AstStringLocalId conversationHandle, AstExpression messageTypeName, AstStringLocalId messageBodyEexpression)
        {
            AstSendConversation result = new AstSendConversation(ctx, conversationHandle, messageTypeName, messageBodyEexpression);
            return result;
        }
    }
    
    /// <summary>
    /// data_type
    /// 	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
    /// 	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
    /// 	 | double_prec = DOUBLE  PRECISION?
    /// 	 | unscaled_type_id
    /// </summary>
    public abstract partial class AstDataType : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstExtTypeId), false, false, "ext_type_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalScalePrec), false, false, "decimal_scale_prec")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstExtTypeId), false, false, "ext_type_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstExtTypeId), false, false, "ext_type_id"), new Bb.Asts.AstRuleMatcherItem(typeof(AstIdentitySeed), false, false, "identity_seed")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDataTypeScaled), false, false, "data_type_scaled")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstUnscaledTypeId), false, false, "unscaled_type_id"))));
        
        private static string _ruleValue = @"scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
 | double_prec = DOUBLE  PRECISION?
 | unscaled_type_id
";
        
        private static string _ruleName = "data_type";
        
        /// <summary>
        /// data_type : scaled=data_type_scaled LR_BRACKET MAX RR_BRACKET 
        /// </summary>
        public partial class AstDataType1 : AstDataType
        {
            
            private static string _ruleName1 = "data_type";
            
            private AstDataTypeScaled _scaled;
            
            internal AstDataType1(ParserRuleContext ctx, AstDataTypeScaled scaled) : 
                    base(ctx)
            {
                _scaled = scaled;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDataTypeScaled Scaled
            {
                get
                {
                    return _scaled;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id LR_BRACKET decimal_scale_prec RR_BRACKET 
        /// </summary>
        public partial class AstDataType2 : AstDataType
        {
            
            private static string _ruleName1 = "data_type";
            
            private AstExtTypeId _extTypeId;
            
            private AstDecimalScalePrec _decimalScalePrec;
            
            internal AstDataType2(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimalScalePrec decimalScalePrec) : 
                    base(ctx)
            {
                _extTypeId = extTypeId;
                _decimalScalePrec = decimalScalePrec;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExtTypeId ExtTypeId
            {
                get
                {
                    return _extTypeId;
                }
            }
            
            public virtual AstDecimalScalePrec DecimalScalePrec
            {
                get
                {
                    return _decimalScalePrec;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id LR_BRACKET scale=decimal RR_BRACKET 
        /// </summary>
        public partial class AstDataType3 : AstDataType
        {
            
            private static string _ruleName1 = "data_type";
            
            private AstExtTypeId _extTypeId;
            
            private AstDecimal _scale;
            
            internal AstDataType3(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimal scale) : 
                    base(ctx)
            {
                _extTypeId = extTypeId;
                _scale = scale;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExtTypeId ExtTypeId
            {
                get
                {
                    return _extTypeId;
                }
            }
            
            public virtual AstDecimal Scale
            {
                get
                {
                    return _scale;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id IDENTITY LR_BRACKET identity_seed RR_BRACKET 
        /// </summary>
        public partial class AstDataType4 : AstDataType
        {
            
            private static string _ruleName1 = "data_type";
            
            private AstExtTypeId _extTypeId;
            
            private AstIdentitySeed _identitySeed;
            
            internal AstDataType4(ParserRuleContext ctx, AstExtTypeId extTypeId, AstIdentitySeed identitySeed) : 
                    base(ctx)
            {
                _extTypeId = extTypeId;
                _identitySeed = identitySeed;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstExtTypeId ExtTypeId
            {
                get
                {
                    return _extTypeId;
                }
            }
            
            public virtual AstIdentitySeed IdentitySeed
            {
                get
                {
                    return _identitySeed;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : double_prec=DOUBLE PRECISION? 
        /// </summary>
        public partial class AstDataType5 : AstDataType
        {
            
            private static string _ruleName1 = "data_type";
            
            internal AstDataType5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : unscaled_type_id 
        /// </summary>
        public partial class AstDataType6 : AstDataType
        {
            
            private static string _ruleName1 = "data_type";
            
            private AstUnscaledTypeId _unscaledTypeId;
            
            internal AstDataType6(ParserRuleContext ctx, AstUnscaledTypeId unscaledTypeId) : 
                    base(ctx)
            {
                _unscaledTypeId = unscaledTypeId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstUnscaledTypeId UnscaledTypeId
            {
                get
                {
                    return _unscaledTypeId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        

        
        internal AstDataType(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDataType(Position p) : 
                base(p)
        {
        }
        
        internal AstDataType(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDataType Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDataType.AstDataType1(ctx, list.Get<AstDataTypeScaled>(0));
            }
            if ((index == 2))
            {
                return new AstDataType.AstDataType2(ctx, list.Get<AstExtTypeId>(0), list.Get<AstDecimalScalePrec>(1));
            }
            if ((index == 3))
            {
                return new AstDataType.AstDataType3(ctx, list.Get<AstExtTypeId>(0), list.Get<AstDecimal>(1));
            }
            if ((index == 4))
            {
                return new AstDataType.AstDataType4(ctx, list.Get<AstExtTypeId>(0), list.Get<AstIdentitySeed>(1));
            }
            if ((index == 5))
            {
                return new AstDataType.AstDataType5(ctx);
            }
            if ((index == 6))
            {
                return new AstDataType.AstDataType6(ctx, list.Get<AstUnscaledTypeId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// data_type : 
        ///    scaled=data_type_scaled ( MAX ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstDataTypeScaled scaled)
        {
            AstDataType.AstDataType1 result = new AstDataType.AstDataType1(ctx, scaled);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id ( decimal_scale_prec ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimalScalePrec decimalScalePrec)
        {
            AstDataType.AstDataType2 result = new AstDataType.AstDataType2(ctx, extTypeId, decimalScalePrec);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id ( scale=decimal ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimal scale)
        {
            AstDataType.AstDataType3 result = new AstDataType.AstDataType3(ctx, extTypeId, scale);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id IDENTITY ( identity_seed ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstExtTypeId extTypeId, AstIdentitySeed identitySeed)
        {
            AstDataType.AstDataType4 result = new AstDataType.AstDataType4(ctx, extTypeId, identitySeed);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    double_prec=DOUBLE PRECISION? 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx)
        {
            AstDataType.AstDataType5 result = new AstDataType.AstDataType5(ctx);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    unscaled_type_id 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstUnscaledTypeId unscaledTypeId)
        {
            AstDataType.AstDataType6 result = new AstDataType.AstDataType6(ctx, unscaledTypeId);
            return result;
        }
    }
    
    /// <summary>
    /// default_value
    /// 	 : NULL_
    /// 	 | DEFAULT
    /// 	 | constant
    /// </summary>
    public abstract partial class AstDefaultValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstConstant), false, false, "constant"))));
        
        private static string _ruleValue = "NULL_\r\n | DEFAULT\r\n | constant\r\n";
        
        private static string _ruleName = "default_value";
        
        /// <summary>
        /// default_value : NULL_ 
        /// </summary>
        public partial class AstDefaultValue1 : AstDefaultValue
        {
            
            private static string _ruleName1 = "default_value";
            
            internal AstDefaultValue1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        /// <summary>
        /// default_value : DEFAULT 
        /// </summary>
        public partial class AstDefaultValue2 : AstDefaultValue
        {
            
            private static string _ruleName1 = "default_value";
            
            internal AstDefaultValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        /// <summary>
        /// default_value : constant 
        /// </summary>
        public partial class AstDefaultValue3 : AstDefaultValue
        {
            
            private static string _ruleName1 = "default_value";
            
            private AstConstant _constant;
            
            internal AstDefaultValue3(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        

        
        internal AstDefaultValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDefaultValue(Position p) : 
                base(p)
        {
        }
        
        internal AstDefaultValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDefaultValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDefaultValue.AstDefaultValue1(ctx);
            }
            if ((index == 2))
            {
                return new AstDefaultValue.AstDefaultValue2(ctx);
            }
            if ((index == 3))
            {
                return new AstDefaultValue.AstDefaultValue3(ctx, list.Get<AstConstant>(0));
            }
            return null;
        }
        
        /// <summary>
        /// default_value : 
        ///    NULL_ 
        /// </summary>
        public static AstDefaultValue DefaultValue(ParserRuleContext ctx)
        {
            AstDefaultValue.AstDefaultValue1 result = new AstDefaultValue.AstDefaultValue1(ctx);
            return result;
        }
        
        /// <summary>
        /// default_value : 
        ///    constant 
        /// </summary>
        public static AstDefaultValue DefaultValue(ParserRuleContext ctx, AstConstant constant)
        {
            AstDefaultValue.AstDefaultValue3 result = new AstDefaultValue.AstDefaultValue3(ctx, constant);
            return result;
        }
    }
    
    /// <summary>
    /// constant
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | real
    /// 	 | sign?  decimal_float
    /// 	 | sign?  dollar = DOLLAR  decimal_float
    /// 	 | parameter
    /// </summary>
    public abstract partial class AstConstant : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(4, new Bb.Asts.AstRuleMatcherItem(typeof(AstSign), true, false, "sign"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalFloat), false, false, "decimal_float")), new Bb.Asts.AstRuleMatcherItems(5, new Bb.Asts.AstRuleMatcherItem(typeof(AstSign), true, false, "sign"), new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimalFloat), false, false, "decimal_float")), new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstBinary), false, false, "binary_")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstReal), false, false, "real")), new Bb.Asts.AstRuleMatcherItems(6, new Bb.Asts.AstRuleMatcherItem(typeof(AstParameter), false, false, "parameter"))));
        
        private static string _ruleValue = "stringtext\r\n | binary_\r\n | real\r\n | sign?  decimal_float\r\n | sign?  dollar = DOLL" +
            "AR  decimal_float\r\n | parameter\r\n";
        
        private static string _ruleName = "constant";
        
        /// <summary>
        /// constant : stringtext 
        /// </summary>
        public partial class AstConstant1 : AstConstant
        {
            
            private static string _ruleName1 = "constant";
            
            private AstStringtext _stringtext;
            
            internal AstConstant1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : binary_ 
        /// </summary>
        public partial class AstConstant2 : AstConstant
        {
            
            private static string _ruleName1 = "constant";
            
            private AstBinary _binary;
            
            internal AstConstant2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : real 
        /// </summary>
        public partial class AstConstant3 : AstConstant
        {
            
            private static string _ruleName1 = "constant";
            
            private AstReal _real;
            
            internal AstConstant3(ParserRuleContext ctx, AstReal real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstReal Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : sign? decimal_float 
        /// </summary>
        public partial class AstConstant4 : AstConstant
        {
            
            private static string _ruleName1 = "constant";
            
            private AstSign? _sign;
            
            private AstDecimalFloat _decimalFloat;
            
            internal AstConstant4(ParserRuleContext ctx, AstSign? sign, AstDecimalFloat decimalFloat) : 
                    base(ctx)
            {
                _sign = sign;
                _decimalFloat = decimalFloat;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSign? Sign
            {
                get
                {
                    return _sign;
                }
            }
            
            public virtual AstDecimalFloat DecimalFloat
            {
                get
                {
                    return _decimalFloat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : sign? dollar=DOLLAR decimal_float 
        /// </summary>
        public partial class AstConstant5 : AstConstant
        {
            
            private static string _ruleName1 = "constant";
            
            private AstSign? _sign;
            
            private AstDecimalFloat _decimalFloat;
            
            internal AstConstant5(ParserRuleContext ctx, AstSign? sign, AstDecimalFloat decimalFloat) : 
                    base(ctx)
            {
                _sign = sign;
                _decimalFloat = decimalFloat;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstSign? Sign
            {
                get
                {
                    return _sign;
                }
            }
            
            public virtual AstDecimalFloat DecimalFloat
            {
                get
                {
                    return _decimalFloat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : parameter 
        /// </summary>
        public partial class AstConstant6 : AstConstant
        {
            
            private static string _ruleName1 = "constant";
            
            private AstParameter _parameter;
            
            internal AstConstant6(ParserRuleContext ctx, AstParameter parameter) : 
                    base(ctx)
            {
                _parameter = parameter;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstParameter Parameter
            {
                get
                {
                    return _parameter;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        

        
        internal AstConstant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstant(Position p) : 
                base(p)
        {
        }
        
        internal AstConstant(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstConstant Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstConstant.AstConstant1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstConstant.AstConstant2(ctx, list.Get<AstBinary>(0));
            }
            if ((index == 3))
            {
                return new AstConstant.AstConstant3(ctx, list.Get<AstReal>(0));
            }
            if ((index == 4))
            {
                return new AstConstant.AstConstant4(ctx, list.Get<AstSign?>(0), list.Get<AstDecimalFloat>(1));
            }
            if ((index == 5))
            {
                return new AstConstant.AstConstant5(ctx, list.Get<AstSign?>(0), list.Get<AstDecimalFloat>(1));
            }
            if ((index == 6))
            {
                return new AstConstant.AstConstant6(ctx, list.Get<AstParameter>(0));
            }
            return null;
        }
        
        /// <summary>
        /// constant : 
        ///    stringtext 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstConstant.AstConstant1 result = new AstConstant.AstConstant1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    binary_ 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstBinary binary)
        {
            AstConstant.AstConstant2 result = new AstConstant.AstConstant2(ctx, binary);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    real 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstReal real)
        {
            AstConstant.AstConstant3 result = new AstConstant.AstConstant3(ctx, real);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    sign? decimal_float 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstSign sign, AstDecimalFloat decimalFloat)
        {
            AstConstant.AstConstant4 result = new AstConstant.AstConstant4(ctx, sign, decimalFloat);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    parameter 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstParameter parameter)
        {
            AstConstant.AstConstant6 result = new AstConstant.AstConstant6(ctx, parameter);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_float
    /// 	 : decimal
    /// 	 | float
    /// </summary>
    public abstract partial class AstDecimalFloat : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstFloat), false, false, "float"))));
        
        private static string _ruleValue = "decimal\r\n | float\r\n";
        
        private static string _ruleName = "decimal_float";
        
        /// <summary>
        /// decimal_float : decimal 
        /// </summary>
        public partial class AstDecimalFloat1 : AstDecimalFloat
        {
            
            private static string _ruleName1 = "decimal_float";
            
            private AstDecimal _decimal;
            
            internal AstDecimalFloat1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalFloat(this);
            }
        }
        /// <summary>
        /// decimal_float : float 
        /// </summary>
        public partial class AstDecimalFloat2 : AstDecimalFloat
        {
            
            private static string _ruleName1 = "decimal_float";
            
            private AstFloat _float;
            
            internal AstDecimalFloat2(ParserRuleContext ctx, AstFloat @float) : 
                    base(ctx)
            {
                _float = @float;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstFloat Float
            {
                get
                {
                    return _float;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalFloat(this);
            }
        }
        

        
        internal AstDecimalFloat(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalFloat(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalFloat(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDecimalFloat Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDecimalFloat.AstDecimalFloat1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstDecimalFloat.AstDecimalFloat2(ctx, list.Get<AstFloat>(0));
            }
            return null;
        }
        
        /// <summary>
        /// decimal_float : 
        ///    decimal 
        /// </summary>
        public static AstDecimalFloat DecimalFloat(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstDecimalFloat.AstDecimalFloat1 result = new AstDecimalFloat.AstDecimalFloat1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// decimal_float : 
        ///    float 
        /// </summary>
        public static AstDecimalFloat DecimalFloat(ParserRuleContext ctx, AstFloat @float)
        {
            AstDecimalFloat.AstDecimalFloat2 result = new AstDecimalFloat.AstDecimalFloat2(ctx, @float);
            return result;
        }
    }
    
    /// <summary>
    /// string_id2
    /// 	 : stringtext
    /// 	 | id_
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstStringId2 : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstId), false, false, "id_")), new Bb.Asts.AstRuleMatcherItems(3, new Bb.Asts.AstRuleMatcherItem(typeof(AstLocalId), false, false, "local_id"))));
        
        private static string _ruleValue = "stringtext\r\n | id_\r\n | local_id\r\n";
        
        private static string _ruleName = "string_id2";
        
        /// <summary>
        /// string_id2 : stringtext 
        /// </summary>
        public partial class AstStringId21 : AstStringId2
        {
            
            private static string _ruleName1 = "string_id2";
            
            private AstStringtext _stringtext;
            
            internal AstStringId21(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        /// <summary>
        /// string_id2 : id_ 
        /// </summary>
        public partial class AstStringId22 : AstStringId2
        {
            
            private static string _ruleName1 = "string_id2";
            
            private AstId _id;
            
            internal AstStringId22(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        /// <summary>
        /// string_id2 : local_id 
        /// </summary>
        public partial class AstStringId23 : AstStringId2
        {
            
            private static string _ruleName1 = "string_id2";
            
            private AstLocalId _localId;
            
            internal AstStringId23(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        

        
        internal AstStringId2(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringId2(Position p) : 
                base(p)
        {
        }
        
        internal AstStringId2(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstStringId2 Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstStringId2.AstStringId21(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstStringId2.AstStringId22(ctx, list.Get<AstId>(0));
            }
            if ((index == 3))
            {
                return new AstStringId2.AstStringId23(ctx, list.Get<AstLocalId>(0));
            }
            return null;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    stringtext 
        /// </summary>
        public static AstStringId2 StringId2(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstStringId2.AstStringId21 result = new AstStringId2.AstStringId21(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    id_ 
        /// </summary>
        public static AstStringId2 StringId2(ParserRuleContext ctx, AstId id)
        {
            AstStringId2.AstStringId22 result = new AstStringId2.AstStringId22(ctx, id);
            return result;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    local_id 
        /// </summary>
        public static AstStringId2 StringId2(ParserRuleContext ctx, AstLocalId localId)
        {
            AstStringId2.AstStringId23 result = new AstStringId2.AstStringId23(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// privatekey
    /// 	 : FILE  EQUAL  stringtext
    /// 	 | by_password_crypt
    /// </summary>
    public abstract partial class AstPrivatekey : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstStringtext), false, false, "stringtext")), new Bb.Asts.AstRuleMatcherItems(2, new Bb.Asts.AstRuleMatcherItem(typeof(AstByPasswordCrypt), false, false, "by_password_crypt"))));
        
        private static string _ruleValue = "FILE  EQUAL  stringtext\r\n | by_password_crypt\r\n";
        
        private static string _ruleName = "privatekey";
        
        /// <summary>
        /// privatekey : FILE EQUAL stringtext 
        /// </summary>
        public partial class AstPrivatekey1 : AstPrivatekey
        {
            
            private static string _ruleName1 = "privatekey";
            
            private AstStringtext _stringtext;
            
            internal AstPrivatekey1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivatekey(this);
            }
        }
        /// <summary>
        /// privatekey : by_password_crypt 
        /// </summary>
        public partial class AstPrivatekey2 : AstPrivatekey
        {
            
            private static string _ruleName1 = "privatekey";
            
            private AstByPasswordCrypt _byPasswordCrypt;
            
            internal AstPrivatekey2(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt) : 
                    base(ctx)
            {
                _byPasswordCrypt = byPasswordCrypt;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstByPasswordCrypt ByPasswordCrypt
            {
                get
                {
                    return _byPasswordCrypt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivatekey(this);
            }
        }
        

        
        internal AstPrivatekey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrivatekey(Position p) : 
                base(p)
        {
        }
        
        internal AstPrivatekey(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstPrivatekey Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstPrivatekey.AstPrivatekey1(ctx, list.Get<AstStringtext>(0));
            }
            if ((index == 2))
            {
                return new AstPrivatekey.AstPrivatekey2(ctx, list.Get<AstByPasswordCrypt>(0));
            }
            return null;
        }
        
        /// <summary>
        /// privatekey : 
        ///    FILE EQUAL stringtext 
        /// </summary>
        public static AstPrivatekey Privatekey(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstPrivatekey.AstPrivatekey1 result = new AstPrivatekey.AstPrivatekey1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// privatekey : 
        ///    by_password_crypt 
        /// </summary>
        public static AstPrivatekey Privatekey(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt)
        {
            AstPrivatekey.AstPrivatekey2 result = new AstPrivatekey.AstPrivatekey2(ctx, byPasswordCrypt);
            return result;
        }
    }
    
    /// <summary>
    /// all_server_database
    /// 	 : ALL  SERVER
    /// 	 | DATABASE
    /// </summary>
    public abstract partial class AstAllServerDatabase : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "ALL  SERVER\r\n | DATABASE\r\n";
        
        private static string _ruleName = "all_server_database";
        
        /// <summary>
        /// all_server_database : ALL SERVER 
        /// </summary>
        public partial class AstAllServerDatabase1 : AstAllServerDatabase
        {
            
            private static string _ruleName1 = "all_server_database";
            
            internal AstAllServerDatabase1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllServerDatabase(this);
            }
        }
        /// <summary>
        /// all_server_database : DATABASE 
        /// </summary>
        public partial class AstAllServerDatabase2 : AstAllServerDatabase
        {
            
            private static string _ruleName1 = "all_server_database";
            
            internal AstAllServerDatabase2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllServerDatabase(this);
            }
        }
        

        
        internal AstAllServerDatabase(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAllServerDatabase(Position p) : 
                base(p)
        {
        }
        
        internal AstAllServerDatabase(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAllServerDatabase Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAllServerDatabase.AstAllServerDatabase1(ctx);
            }
            if ((index == 2))
            {
                return new AstAllServerDatabase.AstAllServerDatabase2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// all_server_database : 
        ///    ALL SERVER 
        /// </summary>
        public static AstAllServerDatabase AllServerDatabase(ParserRuleContext ctx)
        {
            AstAllServerDatabase.AstAllServerDatabase1 result = new AstAllServerDatabase.AstAllServerDatabase1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_state
    /// 	 : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)
    /// </summary>
    public abstract partial class AstEncryptionState : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)\r\n";
        
        private static string _ruleName = "encryption_state";
        
        /// <summary>
        /// encryption_state : ENCRYPTION EQUAL DISABLED 
        /// </summary>
        public partial class AstEncryptionState1 : AstEncryptionState
        {
            
            private static string _ruleName1 = "encryption_state";
            
            internal AstEncryptionState1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionState(this);
            }
        }
        /// <summary>
        /// encryption_state : ENCRYPTION EQUAL SUPPORTED 
        /// </summary>
        public partial class AstEncryptionState2 : AstEncryptionState
        {
            
            private static string _ruleName1 = "encryption_state";
            
            internal AstEncryptionState2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionState(this);
            }
        }
        /// <summary>
        /// encryption_state : ENCRYPTION EQUAL REQUIRED 
        /// </summary>
        public partial class AstEncryptionState3 : AstEncryptionState
        {
            
            private static string _ruleName1 = "encryption_state";
            
            internal AstEncryptionState3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionState(this);
            }
        }
        

        
        internal AstEncryptionState(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionState(Position p) : 
                base(p)
        {
        }
        
        internal AstEncryptionState(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEncryptionState Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEncryptionState.AstEncryptionState1(ctx);
            }
            if ((index == 2))
            {
                return new AstEncryptionState.AstEncryptionState2(ctx);
            }
            if ((index == 3))
            {
                return new AstEncryptionState.AstEncryptionState3(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// encryption_state : 
        ///    ENCRYPTION EQUAL DISABLED 
        /// </summary>
        public static AstEncryptionState EncryptionState(ParserRuleContext ctx)
        {
            AstEncryptionState.AstEncryptionState1 result = new AstEncryptionState.AstEncryptionState1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// parameterization_option
    /// 	 : PARAMETERIZATION  (SIMPLE | FORCED)
    /// </summary>
    public abstract partial class AstParameterizationOption : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "PARAMETERIZATION  (SIMPLE | FORCED)\r\n";
        
        private static string _ruleName = "parameterization_option";
        
        /// <summary>
        /// parameterization_option : PARAMETERIZATION SIMPLE 
        /// </summary>
        public partial class AstParameterizationOption1 : AstParameterizationOption
        {
            
            private static string _ruleName1 = "parameterization_option";
            
            internal AstParameterizationOption1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitParameterizationOption(this);
            }
        }
        /// <summary>
        /// parameterization_option : PARAMETERIZATION FORCED 
        /// </summary>
        public partial class AstParameterizationOption2 : AstParameterizationOption
        {
            
            private static string _ruleName1 = "parameterization_option";
            
            internal AstParameterizationOption2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitParameterizationOption(this);
            }
        }
        

        
        internal AstParameterizationOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstParameterizationOption(Position p) : 
                base(p)
        {
        }
        
        internal AstParameterizationOption(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstParameterizationOption Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstParameterizationOption.AstParameterizationOption1(ctx);
            }
            if ((index == 2))
            {
                return new AstParameterizationOption.AstParameterizationOption2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// parameterization_option : 
        ///    PARAMETERIZATION SIMPLE 
        /// </summary>
        public static AstParameterizationOption ParameterizationOption(ParserRuleContext ctx)
        {
            AstParameterizationOption.AstParameterizationOption1 result = new AstParameterizationOption.AstParameterizationOption1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf_ope
    /// 	 : EQUAL
    /// 	 | (LESS  GREATER)
    /// 	 | (EXCLAMATION  EQUAL)
    /// 	 | GREATER
    /// 	 | (GREATER  EQUAL)
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// </summary>
    public abstract partial class AstEventSessionPredicateLeafOpe : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "EQUAL\r\n | (LESS  GREATER)\r\n | (EXCLAMATION  EQUAL)\r\n | GREATER\r\n | (GREATER  EQUA" +
            "L)\r\n | LESS\r\n | LESS  EQUAL\r\n";
        
        private static string _ruleName = "event_session_predicate_leaf_ope";
        
        /// <summary>
        /// event_session_predicate_leaf_ope : EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe1 : AstEventSessionPredicateLeafOpe
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf_ope";
            
            internal AstEventSessionPredicateLeafOpe1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS GREATER 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe2 : AstEventSessionPredicateLeafOpe
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf_ope";
            
            internal AstEventSessionPredicateLeafOpe2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : EXCLAMATION EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe3 : AstEventSessionPredicateLeafOpe
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf_ope";
            
            internal AstEventSessionPredicateLeafOpe3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : GREATER 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe4 : AstEventSessionPredicateLeafOpe
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf_ope";
            
            internal AstEventSessionPredicateLeafOpe4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : GREATER EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe5 : AstEventSessionPredicateLeafOpe
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf_ope";
            
            internal AstEventSessionPredicateLeafOpe5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe6 : AstEventSessionPredicateLeafOpe
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf_ope";
            
            internal AstEventSessionPredicateLeafOpe6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe7 : AstEventSessionPredicateLeafOpe
        {
            
            private static string _ruleName1 = "event_session_predicate_leaf_ope";
            
            internal AstEventSessionPredicateLeafOpe7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        

        
        internal AstEventSessionPredicateLeafOpe(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstEventSessionPredicateLeafOpe Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe1(ctx);
            }
            if ((index == 2))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe2(ctx);
            }
            if ((index == 3))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe3(ctx);
            }
            if ((index == 4))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe4(ctx);
            }
            if ((index == 5))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe5(ctx);
            }
            if ((index == 6))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe6(ctx);
            }
            if ((index == 7))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe7(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// event_session_predicate_leaf_ope : 
        ///    EQUAL 
        /// </summary>
        public static AstEventSessionPredicateLeafOpe EventSessionPredicateLeafOpe(ParserRuleContext ctx)
        {
            AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe1 result = new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// sequence_cycle
    /// 	 : CYCLE
    /// 	 | NO  CYCLE
    /// </summary>
    public abstract partial class AstSequenceCycle : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "CYCLE\r\n | NO  CYCLE\r\n";
        
        private static string _ruleName = "sequence_cycle";
        
        /// <summary>
        /// sequence_cycle : CYCLE 
        /// </summary>
        public partial class AstSequenceCycle1 : AstSequenceCycle
        {
            
            private static string _ruleName1 = "sequence_cycle";
            
            internal AstSequenceCycle1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCycle(this);
            }
        }
        /// <summary>
        /// sequence_cycle : NO CYCLE 
        /// </summary>
        public partial class AstSequenceCycle2 : AstSequenceCycle
        {
            
            private static string _ruleName1 = "sequence_cycle";
            
            internal AstSequenceCycle2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCycle(this);
            }
        }
        

        
        internal AstSequenceCycle(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSequenceCycle(Position p) : 
                base(p)
        {
        }
        
        internal AstSequenceCycle(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSequenceCycle Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSequenceCycle.AstSequenceCycle1(ctx);
            }
            if ((index == 2))
            {
                return new AstSequenceCycle.AstSequenceCycle2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// sequence_cycle : 
        ///    CYCLE 
        /// </summary>
        public static AstSequenceCycle SequenceCycle(ParserRuleContext ctx)
        {
            AstSequenceCycle.AstSequenceCycle1 result = new AstSequenceCycle.AstSequenceCycle1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// size_value
    /// 	 : decimal  MB
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstSizeValue : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "decimal  MB\r\n | DEFAULT\r\n";
        
        private static string _ruleName = "size_value";
        
        /// <summary>
        /// size_value : decimal MB 
        /// </summary>
        public partial class AstSizeValue1 : AstSizeValue
        {
            
            private static string _ruleName1 = "size_value";
            
            private AstDecimal _decimal;
            
            internal AstSizeValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSizeValue(this);
            }
        }
        /// <summary>
        /// size_value : DEFAULT 
        /// </summary>
        public partial class AstSizeValue2 : AstSizeValue
        {
            
            private static string _ruleName1 = "size_value";
            
            internal AstSizeValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSizeValue(this);
            }
        }
        

        
        internal AstSizeValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSizeValue(Position p) : 
                base(p)
        {
        }
        
        internal AstSizeValue(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstSizeValue Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstSizeValue.AstSizeValue1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstSizeValue.AstSizeValue2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// size_value : 
        ///    decimal MB 
        /// </summary>
        public static AstSizeValue SizeValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSizeValue.AstSizeValue1 result = new AstSizeValue.AstSizeValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// size_value : 
        ///    DEFAULT 
        /// </summary>
        public static AstSizeValue SizeValue(ParserRuleContext ctx)
        {
            AstSizeValue.AstSizeValue2 result = new AstSizeValue.AstSizeValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_default
    /// 	 : decimal
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstDecimalDefault : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList(new Bb.Asts.AstRuleMatcherItems(1, new Bb.Asts.AstRuleMatcherItem(typeof(AstDecimal), false, false, "decimal"))));
        
        private static string _ruleValue = "decimal\r\n | DEFAULT\r\n";
        
        private static string _ruleName = "decimal_default";
        
        /// <summary>
        /// decimal_default : decimal 
        /// </summary>
        public partial class AstDecimalDefault1 : AstDecimalDefault
        {
            
            private static string _ruleName1 = "decimal_default";
            
            private AstDecimal _decimal;
            
            internal AstDecimalDefault1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalDefault(this);
            }
        }
        /// <summary>
        /// decimal_default : DEFAULT 
        /// </summary>
        public partial class AstDecimalDefault2 : AstDecimalDefault
        {
            
            private static string _ruleName1 = "decimal_default";
            
            internal AstDecimalDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalDefault(this);
            }
        }
        

        
        internal AstDecimalDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalDefault(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstDecimalDefault Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstDecimalDefault.AstDecimalDefault1(ctx, list.Get<AstDecimal>(0));
            }
            if ((index == 2))
            {
                return new AstDecimalDefault.AstDecimalDefault2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// decimal_default : 
        ///    decimal 
        /// </summary>
        public static AstDecimalDefault DecimalDefault(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstDecimalDefault.AstDecimalDefault1 result = new AstDecimalDefault.AstDecimalDefault1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// decimal_default : 
        ///    DEFAULT 
        /// </summary>
        public static AstDecimalDefault DecimalDefault(ParserRuleContext ctx)
        {
            AstDecimalDefault.AstDecimalDefault2 result = new AstDecimalDefault.AstDecimalDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// on_delete
    /// 	 : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public abstract partial class AstOnDelete : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)\r\n";
        
        private static string _ruleName = "on_delete";
        
        /// <summary>
        /// on_delete : ON DELETE NO ACTION 
        /// </summary>
        public partial class AstOnDelete1 : AstOnDelete
        {
            
            private static string _ruleName1 = "on_delete";
            
            internal AstOnDelete1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        /// <summary>
        /// on_delete : ON DELETE CASCADE 
        /// </summary>
        public partial class AstOnDelete2 : AstOnDelete
        {
            
            private static string _ruleName1 = "on_delete";
            
            internal AstOnDelete2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        /// <summary>
        /// on_delete : ON DELETE SET NULL_ 
        /// </summary>
        public partial class AstOnDelete3 : AstOnDelete
        {
            
            private static string _ruleName1 = "on_delete";
            
            internal AstOnDelete3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        /// <summary>
        /// on_delete : ON DELETE SET DEFAULT 
        /// </summary>
        public partial class AstOnDelete4 : AstOnDelete
        {
            
            private static string _ruleName1 = "on_delete";
            
            internal AstOnDelete4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        

        
        internal AstOnDelete(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnDelete(Position p) : 
                base(p)
        {
        }
        
        internal AstOnDelete(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstOnDelete Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstOnDelete.AstOnDelete1(ctx);
            }
            if ((index == 2))
            {
                return new AstOnDelete.AstOnDelete2(ctx);
            }
            if ((index == 3))
            {
                return new AstOnDelete.AstOnDelete3(ctx);
            }
            if ((index == 4))
            {
                return new AstOnDelete.AstOnDelete4(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// on_delete : 
        ///    ON DELETE NO ACTION 
        /// </summary>
        public static AstOnDelete OnDelete(ParserRuleContext ctx)
        {
            AstOnDelete.AstOnDelete1 result = new AstOnDelete.AstOnDelete1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// on_update
    /// 	 : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public abstract partial class AstOnUpdate : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)\r\n";
        
        private static string _ruleName = "on_update";
        
        /// <summary>
        /// on_update : ON UPDATE NO ACTION 
        /// </summary>
        public partial class AstOnUpdate1 : AstOnUpdate
        {
            
            private static string _ruleName1 = "on_update";
            
            internal AstOnUpdate1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        /// <summary>
        /// on_update : ON UPDATE CASCADE 
        /// </summary>
        public partial class AstOnUpdate2 : AstOnUpdate
        {
            
            private static string _ruleName1 = "on_update";
            
            internal AstOnUpdate2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        /// <summary>
        /// on_update : ON UPDATE SET NULL_ 
        /// </summary>
        public partial class AstOnUpdate3 : AstOnUpdate
        {
            
            private static string _ruleName1 = "on_update";
            
            internal AstOnUpdate3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        /// <summary>
        /// on_update : ON UPDATE SET DEFAULT 
        /// </summary>
        public partial class AstOnUpdate4 : AstOnUpdate
        {
            
            private static string _ruleName1 = "on_update";
            
            internal AstOnUpdate4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        

        
        internal AstOnUpdate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnUpdate(Position p) : 
                base(p)
        {
        }
        
        internal AstOnUpdate(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstOnUpdate Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstOnUpdate.AstOnUpdate1(ctx);
            }
            if ((index == 2))
            {
                return new AstOnUpdate.AstOnUpdate2(ctx);
            }
            if ((index == 3))
            {
                return new AstOnUpdate.AstOnUpdate3(ctx);
            }
            if ((index == 4))
            {
                return new AstOnUpdate.AstOnUpdate4(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// on_update : 
        ///    ON UPDATE NO ACTION 
        /// </summary>
        public static AstOnUpdate OnUpdate(ParserRuleContext ctx)
        {
            AstOnUpdate.AstOnUpdate1 result = new AstOnUpdate.AstOnUpdate1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// updated_asterisk
    /// 	 : (INSERTED | DELETED)  DOT  STAR
    /// </summary>
    public abstract partial class AstUpdatedAsterisk : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "(INSERTED | DELETED)  DOT  STAR\r\n";
        
        private static string _ruleName = "updated_asterisk";
        
        /// <summary>
        /// updated_asterisk : INSERTED DOT STAR 
        /// </summary>
        public partial class AstUpdatedAsterisk1 : AstUpdatedAsterisk
        {
            
            private static string _ruleName1 = "updated_asterisk";
            
            internal AstUpdatedAsterisk1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdatedAsterisk(this);
            }
        }
        /// <summary>
        /// updated_asterisk : DELETED DOT STAR 
        /// </summary>
        public partial class AstUpdatedAsterisk2 : AstUpdatedAsterisk
        {
            
            private static string _ruleName1 = "updated_asterisk";
            
            internal AstUpdatedAsterisk2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdatedAsterisk(this);
            }
        }
        

        
        internal AstUpdatedAsterisk(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdatedAsterisk(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdatedAsterisk(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstUpdatedAsterisk Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstUpdatedAsterisk.AstUpdatedAsterisk1(ctx);
            }
            if ((index == 2))
            {
                return new AstUpdatedAsterisk.AstUpdatedAsterisk2(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// updated_asterisk : 
        ///    INSERTED . STAR 
        /// </summary>
        public static AstUpdatedAsterisk UpdatedAsterisk(ParserRuleContext ctx)
        {
            AstUpdatedAsterisk.AstUpdatedAsterisk1 result = new AstUpdatedAsterisk.AstUpdatedAsterisk1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// null_notnull
    /// 	 : NOT?  NULL_
    /// </summary>
    public partial class AstNullNotnull : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "NOT?  NULL_\r\n";
        
        private static string _ruleName = "null_notnull";
        
        internal AstNullNotnull(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstNullNotnull(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNullNotnull(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullNotnull(this);
        }
        
        public static AstNullNotnull Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            return new AstNullNotnull(ctx);
        }
        
        /// <summary>
        /// null_notnull : 
        ///    NOT? NULL_ 
        /// </summary>
        public static AstNullNotnull NullNotnull(ParserRuleContext ctx)
        {
            AstNullNotnull result = new AstNullNotnull(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// comparison_operator
    /// 	 : EQUAL
    /// 	 | GREATER
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// 	 | GREATER  EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | EXCLAMATION  GREATER
    /// 	 | EXCLAMATION  LESS
    /// </summary>
    public abstract partial class AstComparisonOperator : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "EQUAL\r\n | GREATER\r\n | LESS\r\n | LESS  EQUAL\r\n | GREATER  EQUAL\r\n | LESS  GREATER\r\n" +
            " | EXCLAMATION  EQUAL\r\n | EXCLAMATION  GREATER\r\n | EXCLAMATION  LESS\r\n";
        
        private static string _ruleName = "comparison_operator";
        
        /// <summary>
        /// comparison_operator : EQUAL 
        /// </summary>
        public partial class AstComparisonOperator1 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : GREATER 
        /// </summary>
        public partial class AstComparisonOperator2 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS 
        /// </summary>
        public partial class AstComparisonOperator3 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS EQUAL 
        /// </summary>
        public partial class AstComparisonOperator4 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : GREATER EQUAL 
        /// </summary>
        public partial class AstComparisonOperator5 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS GREATER 
        /// </summary>
        public partial class AstComparisonOperator6 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION EQUAL 
        /// </summary>
        public partial class AstComparisonOperator7 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION GREATER 
        /// </summary>
        public partial class AstComparisonOperator8 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION LESS 
        /// </summary>
        public partial class AstComparisonOperator9 : AstComparisonOperator
        {
            
            private static string _ruleName1 = "comparison_operator";
            
            internal AstComparisonOperator9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        

        
        internal AstComparisonOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstComparisonOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstComparisonOperator(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstComparisonOperator Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator1(ctx);
            }
            if ((index == 2))
            {
                return new AstComparisonOperator.AstComparisonOperator2(ctx);
            }
            if ((index == 3))
            {
                return new AstComparisonOperator.AstComparisonOperator3(ctx);
            }
            if ((index == 4))
            {
                return new AstComparisonOperator.AstComparisonOperator4(ctx);
            }
            if ((index == 5))
            {
                return new AstComparisonOperator.AstComparisonOperator5(ctx);
            }
            if ((index == 6))
            {
                return new AstComparisonOperator.AstComparisonOperator6(ctx);
            }
            if ((index == 7))
            {
                return new AstComparisonOperator.AstComparisonOperator7(ctx);
            }
            if ((index == 8))
            {
                return new AstComparisonOperator.AstComparisonOperator8(ctx);
            }
            if ((index == 9))
            {
                return new AstComparisonOperator.AstComparisonOperator9(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// comparison_operator : 
        ///    EQUAL 
        /// </summary>
        public static AstComparisonOperator ComparisonOperator(ParserRuleContext ctx)
        {
            AstComparisonOperator.AstComparisonOperator1 result = new AstComparisonOperator.AstComparisonOperator1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// assignment_operator
    /// 	 : PLUS_ASSIGN
    /// 	 | MINUS_ASSIGN
    /// 	 | MULT_ASSIGN
    /// 	 | DIV_ASSIGN
    /// 	 | MOD_ASSIGN
    /// 	 | AND_ASSIGN
    /// 	 | XOR_ASSIGN
    /// 	 | OR_ASSIGN
    /// </summary>
    public abstract partial class AstAssignmentOperator : AstBnfRule
    {
        
        private static Bb.Asts.AstRuleEvaluator _ruleevaluator = new Bb.Asts.AstRuleEvaluator(new Bb.Asts.AstRuleMatcherList());
        
        private static string _ruleValue = "PLUS_ASSIGN\r\n | MINUS_ASSIGN\r\n | MULT_ASSIGN\r\n | DIV_ASSIGN\r\n | MOD_ASSIGN\r\n | AN" +
            "D_ASSIGN\r\n | XOR_ASSIGN\r\n | OR_ASSIGN\r\n";
        
        private static string _ruleName = "assignment_operator";
        
        /// <summary>
        /// assignment_operator : PLUS_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator1 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MINUS_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator2 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MULT_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator3 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : DIV_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator4 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MOD_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator5 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : AND_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator6 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : XOR_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator7 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : OR_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator8 : AstAssignmentOperator
        {
            
            private static string _ruleName1 = "assignment_operator";
            
            internal AstAssignmentOperator8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override string RuleName
            {
                get
                {
                    return _ruleName1;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        

        
        internal AstAssignmentOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAssignmentOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstAssignmentOperator(AstRootList<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public static AstAssignmentOperator Create(ParserRuleContext ctx, AstRootList<AstRoot> list)
        {
            int index = _ruleevaluator.Evaluate(list);
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator1(ctx);
            }
            if ((index == 2))
            {
                return new AstAssignmentOperator.AstAssignmentOperator2(ctx);
            }
            if ((index == 3))
            {
                return new AstAssignmentOperator.AstAssignmentOperator3(ctx);
            }
            if ((index == 4))
            {
                return new AstAssignmentOperator.AstAssignmentOperator4(ctx);
            }
            if ((index == 5))
            {
                return new AstAssignmentOperator.AstAssignmentOperator5(ctx);
            }
            if ((index == 6))
            {
                return new AstAssignmentOperator.AstAssignmentOperator6(ctx);
            }
            if ((index == 7))
            {
                return new AstAssignmentOperator.AstAssignmentOperator7(ctx);
            }
            if ((index == 8))
            {
                return new AstAssignmentOperator.AstAssignmentOperator8(ctx);
            }
            return null;
        }
        
        /// <summary>
        /// assignment_operator : 
        ///    PLUS_ASSIGN 
        /// </summary>
        public static AstAssignmentOperator AssignmentOperator(ParserRuleContext ctx)
        {
            AstAssignmentOperator.AstAssignmentOperator1 result = new AstAssignmentOperator.AstAssignmentOperator1(ctx);
            return result;
        }
    }
}
