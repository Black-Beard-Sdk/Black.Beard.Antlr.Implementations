#nullable disable
// Generated by ScriptClassDefaults.cs (Sunday, April 16, 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Asts
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// t_root
    /// 	 : batchs  EOF
    /// 	 | execute_body_batch  go_statements  EOF
    /// </summary>
    public abstract partial class AstTRoot : AstBnfRule
    {
        
        protected static string _rule = "t_root\r\n\t : batchs  EOF\r\n\t | execute_body_batch  go_statements  EOF";
        
        /// <summary>
        /// t_root : batchs 
        /// </summary>
        public partial class AstTRoot1 : AstTRoot
        {
            
            private AstBatchs _batchs;
            
            internal AstTRoot1(ParserRuleContext ctx, AstBatchs batchs) : 
                    base(ctx)
            {
                _batchs = batchs;
            }
            
            public virtual AstBatchs Batchs
            {
                get
                {
                    return _batchs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTRoot(this);
            }
        }
        /// <summary>
        /// t_root : execute_body_batch go_statements 
        /// </summary>
        public partial class AstTRoot2 : AstTRoot
        {
            
            private AstExecuteBodyBatch _executeBodyBatch;
            
            private AstGoStatements _goStatements;
            
            internal AstTRoot2(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch, AstGoStatements goStatements) : 
                    base(ctx)
            {
                _executeBodyBatch = executeBodyBatch;
                _goStatements = goStatements;
            }
            
            public virtual AstExecuteBodyBatch ExecuteBodyBatch
            {
                get
                {
                    return _executeBodyBatch;
                }
            }
            
            public virtual AstGoStatements GoStatements
            {
                get
                {
                    return _goStatements;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTRoot(this);
            }
        }
        

        
        internal AstTRoot(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTRoot(Position p) : 
                base(p)
        {
        }
        
        internal AstTRoot(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTRoot Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTRoot.Resolve(list);
            if ((index == 2))
            {
                return new AstTRoot.AstTRoot1(ctx, ((AstBatchs)(list[0])));
            }
            if ((index == 3))
            {
                return new AstTRoot.AstTRoot2(ctx, ((AstExecuteBodyBatch)(list[0])), ((AstGoStatements)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteBodyBatch), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstGoStatements), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstBatchs), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// t_root : 
        ///    batchs 
        /// </summary>
        public static AstTRoot TRoot(ParserRuleContext ctx, AstBatchs batchs)
        {
            AstTRoot.AstTRoot1 result = new AstTRoot.AstTRoot1(ctx, batchs);
            return result;
        }
        
        /// <summary>
        /// t_root : 
        ///    execute_body_batch go_statements 
        /// </summary>
        public static AstTRoot TRoot(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch, AstGoStatements goStatements)
        {
            AstTRoot.AstTRoot2 result = new AstTRoot.AstTRoot2(ctx, executeBodyBatch, goStatements);
            return result;
        }
    }
    
    /// <summary>
    /// batch
    /// 	 : execute_body_batch
    /// 	 | sql_clauses
    /// 	 | create_or_alter_function
    /// 	 | create_or_alter_procedure
    /// 	 | create_or_alter_trigger
    /// 	 | create_view
    /// </summary>
    public abstract partial class AstBatch : AstBnfRule
    {
        
        protected static string _rule = "batch\r\n\t : execute_body_batch\r\n\t | sql_clauses\r\n\t | create_or_alter_function\r\n\t |" +
            " create_or_alter_procedure\r\n\t | create_or_alter_trigger\r\n\t | create_view";
        
        /// <summary>
        /// batch : execute_body_batch 
        /// </summary>
        public partial class AstBatch1 : AstBatch
        {
            
            private AstExecuteBodyBatch _executeBodyBatch;
            
            internal AstBatch1(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch) : 
                    base(ctx)
            {
                _executeBodyBatch = executeBodyBatch;
            }
            
            public virtual AstExecuteBodyBatch ExecuteBodyBatch
            {
                get
                {
                    return _executeBodyBatch;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : sql_clauses 
        /// </summary>
        public partial class AstBatch2 : AstBatch
        {
            
            private AstSqlClauses _sqlClauses;
            
            internal AstBatch2(ParserRuleContext ctx, AstSqlClauses sqlClauses) : 
                    base(ctx)
            {
                _sqlClauses = sqlClauses;
            }
            
            public virtual AstSqlClauses SqlClauses
            {
                get
                {
                    return _sqlClauses;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_or_alter_function 
        /// </summary>
        public partial class AstBatch3 : AstBatch
        {
            
            private AstCreateOrAlterFunction _createOrAlterFunction;
            
            internal AstBatch3(ParserRuleContext ctx, AstCreateOrAlterFunction createOrAlterFunction) : 
                    base(ctx)
            {
                _createOrAlterFunction = createOrAlterFunction;
            }
            
            public virtual AstCreateOrAlterFunction CreateOrAlterFunction
            {
                get
                {
                    return _createOrAlterFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_or_alter_procedure 
        /// </summary>
        public partial class AstBatch4 : AstBatch
        {
            
            private AstCreateOrAlterProcedure _createOrAlterProcedure;
            
            internal AstBatch4(ParserRuleContext ctx, AstCreateOrAlterProcedure createOrAlterProcedure) : 
                    base(ctx)
            {
                _createOrAlterProcedure = createOrAlterProcedure;
            }
            
            public virtual AstCreateOrAlterProcedure CreateOrAlterProcedure
            {
                get
                {
                    return _createOrAlterProcedure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_or_alter_trigger 
        /// </summary>
        public partial class AstBatch5 : AstBatch
        {
            
            private AstCreateOrAlterTrigger _createOrAlterTrigger;
            
            internal AstBatch5(ParserRuleContext ctx, AstCreateOrAlterTrigger createOrAlterTrigger) : 
                    base(ctx)
            {
                _createOrAlterTrigger = createOrAlterTrigger;
            }
            
            public virtual AstCreateOrAlterTrigger CreateOrAlterTrigger
            {
                get
                {
                    return _createOrAlterTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        /// <summary>
        /// batch : create_view 
        /// </summary>
        public partial class AstBatch6 : AstBatch
        {
            
            private AstCreateView _createView;
            
            internal AstBatch6(ParserRuleContext ctx, AstCreateView createView) : 
                    base(ctx)
            {
                _createView = createView;
            }
            
            public virtual AstCreateView CreateView
            {
                get
                {
                    return _createView;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBatch(this);
            }
        }
        

        
        internal AstBatch(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBatch(Position p) : 
                base(p)
        {
        }
        
        internal AstBatch(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBatch Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBatch.Resolve(list);
            if ((index == 2))
            {
                return new AstBatch.AstBatch1(ctx, ((AstExecuteBodyBatch)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBatch.AstBatch2(ctx, ((AstSqlClauses)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBatch.AstBatch3(ctx, ((AstCreateOrAlterFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBatch.AstBatch4(ctx, ((AstCreateOrAlterProcedure)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBatch.AstBatch5(ctx, ((AstCreateOrAlterTrigger)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBatch.AstBatch6(ctx, ((AstCreateView)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteBodyBatch), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSqlClauses), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterFunction), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterProcedure), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterTrigger), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateView), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// batch : 
        ///    execute_body_batch 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstExecuteBodyBatch executeBodyBatch)
        {
            AstBatch.AstBatch1 result = new AstBatch.AstBatch1(ctx, executeBodyBatch);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    sql_clauses 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstSqlClauses sqlClauses)
        {
            AstBatch.AstBatch2 result = new AstBatch.AstBatch2(ctx, sqlClauses);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_or_alter_function 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateOrAlterFunction createOrAlterFunction)
        {
            AstBatch.AstBatch3 result = new AstBatch.AstBatch3(ctx, createOrAlterFunction);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_or_alter_procedure 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateOrAlterProcedure createOrAlterProcedure)
        {
            AstBatch.AstBatch4 result = new AstBatch.AstBatch4(ctx, createOrAlterProcedure);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_or_alter_trigger 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateOrAlterTrigger createOrAlterTrigger)
        {
            AstBatch.AstBatch5 result = new AstBatch.AstBatch5(ctx, createOrAlterTrigger);
            return result;
        }
        
        /// <summary>
        /// batch : 
        ///    create_view 
        /// </summary>
        public static AstBatch Batch(ParserRuleContext ctx, AstCreateView createView)
        {
            AstBatch.AstBatch6 result = new AstBatch.AstBatch6(ctx, createView);
            return result;
        }
    }
    
    /// <summary>
    /// sql_clause
    /// 	 : merge_statement
    /// 	 | delete_statement
    /// 	 | insert_statement
    /// 	 | select_statement_standalone
    /// 	 | update_statement
    /// 	 | alter_application_role
    /// 	 | alter_assembly
    /// 	 | alter_asymmetric_key
    /// 	 | alter_authorization
    /// 	 | alter_authorization_for_azure_dw
    /// 	 | alter_authorization_for_parallel_dw
    /// 	 | alter_authorization_for_sql_database
    /// 	 | alter_availability_group
    /// 	 | alter_certificate
    /// 	 | alter_column_encryption_key
    /// 	 | alter_credential
    /// 	 | alter_cryptographic_provider
    /// 	 | alter_database
    /// 	 | alter_db_role
    /// 	 | alter_endpoint
    /// 	 | create_or_alter_event_session
    /// 	 | alter_external_data_source
    /// 	 | alter_external_library
    /// 	 | alter_external_resource_pool
    /// 	 | alter_fulltext_catalog
    /// 	 | alter_fulltext_stoplist
    /// 	 | alter_index
    /// 	 | alter_login_azure_sql
    /// 	 | alter_login_azure_sql_dw_and_pdw
    /// 	 | alter_login_sql_server
    /// 	 | alter_master_key_azure_sql
    /// 	 | alter_master_key_sql_server
    /// 	 | alter_message_type
    /// 	 | alter_partition_function
    /// 	 | alter_partition_scheme
    /// 	 | alter_remote_service_binding
    /// 	 | alter_resource_governor
    /// 	 | alter_schema_azure_sql_dw_and_pdw
    /// 	 | alter_schema_sql
    /// 	 | alter_sequence
    /// 	 | alter_server_audit
    /// 	 | alter_server_audit_specification
    /// 	 | alter_server_configuration
    /// 	 | alter_server_role
    /// 	 | alter_server_role_pdw
    /// 	 | alter_service
    /// 	 | alter_service_master_key
    /// 	 | alter_symmetric_key
    /// 	 | alter_table
    /// 	 | alter_user
    /// 	 | alter_user_azure_sql
    /// 	 | alter_workload_group
    /// 	 | create_application_role
    /// 	 | create_assembly
    /// 	 | create_asymmetric_key
    /// 	 | create_column_encryption_key
    /// 	 | create_column_master_key
    /// 	 | create_credential
    /// 	 | create_cryptographic_provider
    /// 	 | create_database
    /// 	 | create_db_role
    /// 	 | create_event_notification
    /// 	 | create_external_library
    /// 	 | create_external_resource_pool
    /// 	 | create_fulltext_catalog
    /// 	 | create_fulltext_stoplist
    /// 	 | create_index
    /// 	 | create_columnstore_index
    /// 	 | create_nonclustered_columnstore_index
    /// 	 | create_login_azure_sql
    /// 	 | create_login_pdw
    /// 	 | create_login_sql_server
    /// 	 | create_master_key_azure_sql
    /// 	 | create_master_key_sql_server
    /// 	 | create_or_alter_broker_priority
    /// 	 | create_remote_service_binding
    /// 	 | create_resource_pool
    /// 	 | create_route
    /// 	 | create_rule
    /// 	 | create_schema
    /// 	 | create_schema_azure_sql_dw_and_pdw
    /// 	 | create_search_property_list
    /// 	 | create_security_policy
    /// 	 | create_sequence
    /// 	 | create_server_audit
    /// 	 | create_server_audit_specification
    /// 	 | create_server_role
    /// 	 | create_service
    /// 	 | create_statistics
    /// 	 | create_synonym
    /// 	 | create_table
    /// 	 | create_type
    /// 	 | create_user
    /// 	 | create_user_azure_sql_dw
    /// 	 | create_workload_group
    /// 	 | create_xml_index
    /// 	 | create_xml_schema_collection
    /// 	 | create_partition_function
    /// 	 | create_partition_scheme
    /// 	 | drop_aggregate
    /// 	 | drop_application_role
    /// 	 | drop_assembly
    /// 	 | drop_asymmetric_key
    /// 	 | drop_availability_group
    /// 	 | drop_broker_priority
    /// 	 | drop_certificate
    /// 	 | drop_column_encryption_key
    /// 	 | drop_column_master_key
    /// 	 | drop_contract
    /// 	 | drop_credential
    /// 	 | drop_cryptograhic_provider
    /// 	 | drop_database
    /// 	 | drop_database_audit_specification
    /// 	 | drop_database_encryption_key
    /// 	 | drop_database_scoped_credential
    /// 	 | drop_db_role
    /// 	 | drop_default
    /// 	 | drop_endpoint
    /// 	 | drop_event_notifications
    /// 	 | drop_event_session
    /// 	 | drop_external_data_source
    /// 	 | drop_external_file_format
    /// 	 | drop_external_library
    /// 	 | drop_external_resource_pool
    /// 	 | drop_external_table
    /// 	 | drop_fulltext_catalog
    /// 	 | drop_fulltext_index
    /// 	 | drop_fulltext_stoplist
    /// 	 | drop_function
    /// 	 | drop_index
    /// 	 | drop_login
    /// 	 | drop_master_key
    /// 	 | drop_message_type
    /// 	 | drop_partition_function
    /// 	 | drop_partition_scheme
    /// 	 | drop_procedure
    /// 	 | drop_queue
    /// 	 | drop_remote_service_binding
    /// 	 | drop_resource_pool
    /// 	 | drop_route
    /// 	 | drop_rule
    /// 	 | drop_schema
    /// 	 | drop_search_property_list
    /// 	 | drop_security_policy
    /// 	 | drop_sequence
    /// 	 | drop_server_audit
    /// 	 | drop_server_audit_specification
    /// 	 | drop_server_role
    /// 	 | drop_service
    /// 	 | drop_signature
    /// 	 | drop_statistics
    /// 	 | drop_statistics_id_azure_dw_and_pdw
    /// 	 | drop_symmetric_key
    /// 	 | drop_synonym
    /// 	 | drop_table
    /// 	 | drop_dml_trigger
    /// 	 | drop_ddl_trigger
    /// 	 | drop_type
    /// 	 | drop_user
    /// 	 | drop_view
    /// 	 | drop_workload_group
    /// 	 | drop_xml_schema_collection
    /// 	 | disable_trigger
    /// 	 | enable_trigger
    /// 	 | lock_table
    /// 	 | truncate_table
    /// 	 | update_statistics
    /// 	 | block_statement
    /// 	 | break_statement
    /// 	 | continue_statement
    /// 	 | goto_statement
    /// 	 | if_statement
    /// 	 | return_statement
    /// 	 | throw_statement
    /// 	 | try_catch_statement
    /// 	 | waitfor_statement
    /// 	 | while_statement
    /// 	 | print_statement
    /// 	 | raiseerror_statement
    /// 	 | declare_statement
    /// 	 | execute_statement
    /// 	 | cursor_statement
    /// 	 | begin_conversation_timer
    /// 	 | begin_conversation_dialog
    /// 	 | end_conversation
    /// 	 | get_conversation
    /// 	 | send_conversation
    /// 	 | waitfor_conversation
    /// 	 | create_contract
    /// 	 | create_queue
    /// 	 | alter_queue
    /// 	 | kill_statement
    /// 	 | message_statement
    /// 	 | security_statement
    /// 	 | set_statement
    /// 	 | transaction_statement
    /// 	 | use_statement
    /// 	 | setuser_statement
    /// 	 | reconfigure_statement
    /// 	 | shutdown_statement
    /// 	 | checkpoint_statement
    /// 	 | backup_database
    /// 	 | backup_log
    /// 	 | backup_certificate
    /// 	 | backup_master_key
    /// 	 | backup_service_master_key
    /// 	 | dbcc_special
    /// 	 | dbcc_clause
    /// </summary>
    public abstract partial class AstSqlClause : AstBnfRule
    {
        
        protected static string _rule = "sql_clause\r\n\t : merge_statement\r\n\t | delete_statement\r\n\t | insert_statement\r\n\t | " +
            "select_statement_standalone\r\n\t | update_statement\r\n\t | alter_application_role\r\n\t" +
            " | alter_assembly\r\n\t | alter_asymmetric_key\r\n\t | alter_authorization\r\n\t | alter_" +
            "authorization_for_azure_dw\r\n\t | alter_authorization_for_parallel_dw\r\n\t | alter_a" +
            "uthorization_for_sql_database\r\n\t | alter_availability_group\r\n\t | alter_certifica" +
            "te\r\n\t | alter_column_encryption_key\r\n\t | alter_credential\r\n\t | alter_cryptograph" +
            "ic_provider\r\n\t | alter_database\r\n\t | alter_db_role\r\n\t | alter_endpoint\r\n\t | crea" +
            "te_or_alter_event_session\r\n\t | alter_external_data_source\r\n\t | alter_external_li" +
            "brary\r\n\t | alter_external_resource_pool\r\n\t | alter_fulltext_catalog\r\n\t | alter_f" +
            "ulltext_stoplist\r\n\t | alter_index\r\n\t | alter_login_azure_sql\r\n\t | alter_login_az" +
            "ure_sql_dw_and_pdw\r\n\t | alter_login_sql_server\r\n\t | alter_master_key_azure_sql\r\n" +
            "\t | alter_master_key_sql_server\r\n\t | alter_message_type\r\n\t | alter_partition_fun" +
            "ction\r\n\t | alter_partition_scheme\r\n\t | alter_remote_service_binding\r\n\t | alter_r" +
            "esource_governor\r\n\t | alter_schema_azure_sql_dw_and_pdw\r\n\t | alter_schema_sql\r\n\t" +
            " | alter_sequence\r\n\t | alter_server_audit\r\n\t | alter_server_audit_specification\r" +
            "\n\t | alter_server_configuration\r\n\t | alter_server_role\r\n\t | alter_server_role_pd" +
            "w\r\n\t | alter_service\r\n\t | alter_service_master_key\r\n\t | alter_symmetric_key\r\n\t |" +
            " alter_table\r\n\t | alter_user\r\n\t | alter_user_azure_sql\r\n\t | alter_workload_group" +
            "\r\n\t | create_application_role\r\n\t | create_assembly\r\n\t | create_asymmetric_key\r\n\t" +
            " | create_column_encryption_key\r\n\t | create_column_master_key\r\n\t | create_creden" +
            "tial\r\n\t | create_cryptographic_provider\r\n\t | create_database\r\n\t | create_db_role" +
            "\r\n\t | create_event_notification\r\n\t | create_external_library\r\n\t | create_externa" +
            "l_resource_pool\r\n\t | create_fulltext_catalog\r\n\t | create_fulltext_stoplist\r\n\t | " +
            "create_index\r\n\t | create_columnstore_index\r\n\t | create_nonclustered_columnstore_" +
            "index\r\n\t | create_login_azure_sql\r\n\t | create_login_pdw\r\n\t | create_login_sql_se" +
            "rver\r\n\t | create_master_key_azure_sql\r\n\t | create_master_key_sql_server\r\n\t | cre" +
            "ate_or_alter_broker_priority\r\n\t | create_remote_service_binding\r\n\t | create_reso" +
            "urce_pool\r\n\t | create_route\r\n\t | create_rule\r\n\t | create_schema\r\n\t | create_sche" +
            "ma_azure_sql_dw_and_pdw\r\n\t | create_search_property_list\r\n\t | create_security_po" +
            "licy\r\n\t | create_sequence\r\n\t | create_server_audit\r\n\t | create_server_audit_spec" +
            "ification\r\n\t | create_server_role\r\n\t | create_service\r\n\t | create_statistics\r\n\t " +
            "| create_synonym\r\n\t | create_table\r\n\t | create_type\r\n\t | create_user\r\n\t | create" +
            "_user_azure_sql_dw\r\n\t | create_workload_group\r\n\t | create_xml_index\r\n\t | create_" +
            "xml_schema_collection\r\n\t | create_partition_function\r\n\t | create_partition_schem" +
            "e\r\n\t | drop_aggregate\r\n\t | drop_application_role\r\n\t | drop_assembly\r\n\t | drop_as" +
            "ymmetric_key\r\n\t | drop_availability_group\r\n\t | drop_broker_priority\r\n\t | drop_ce" +
            "rtificate\r\n\t | drop_column_encryption_key\r\n\t | drop_column_master_key\r\n\t | drop_" +
            "contract\r\n\t | drop_credential\r\n\t | drop_cryptograhic_provider\r\n\t | drop_database" +
            "\r\n\t | drop_database_audit_specification\r\n\t | drop_database_encryption_key\r\n\t | d" +
            "rop_database_scoped_credential\r\n\t | drop_db_role\r\n\t | drop_default\r\n\t | drop_end" +
            "point\r\n\t | drop_event_notifications\r\n\t | drop_event_session\r\n\t | drop_external_d" +
            "ata_source\r\n\t | drop_external_file_format\r\n\t | drop_external_library\r\n\t | drop_e" +
            "xternal_resource_pool\r\n\t | drop_external_table\r\n\t | drop_fulltext_catalog\r\n\t | d" +
            "rop_fulltext_index\r\n\t | drop_fulltext_stoplist\r\n\t | drop_function\r\n\t | drop_inde" +
            "x\r\n\t | drop_login\r\n\t | drop_master_key\r\n\t | drop_message_type\r\n\t | drop_partitio" +
            "n_function\r\n\t | drop_partition_scheme\r\n\t | drop_procedure\r\n\t | drop_queue\r\n\t | d" +
            "rop_remote_service_binding\r\n\t | drop_resource_pool\r\n\t | drop_route\r\n\t | drop_rul" +
            "e\r\n\t | drop_schema\r\n\t | drop_search_property_list\r\n\t | drop_security_policy\r\n\t |" +
            " drop_sequence\r\n\t | drop_server_audit\r\n\t | drop_server_audit_specification\r\n\t | " +
            "drop_server_role\r\n\t | drop_service\r\n\t | drop_signature\r\n\t | drop_statistics\r\n\t |" +
            " drop_statistics_id_azure_dw_and_pdw\r\n\t | drop_symmetric_key\r\n\t | drop_synonym\r\n" +
            "\t | drop_table\r\n\t | drop_dml_trigger\r\n\t | drop_ddl_trigger\r\n\t | drop_type\r\n\t | d" +
            "rop_user\r\n\t | drop_view\r\n\t | drop_workload_group\r\n\t | drop_xml_schema_collection" +
            "\r\n\t | disable_trigger\r\n\t | enable_trigger\r\n\t | lock_table\r\n\t | truncate_table\r\n\t" +
            " | update_statistics\r\n\t | block_statement\r\n\t | break_statement\r\n\t | continue_sta" +
            "tement\r\n\t | goto_statement\r\n\t | if_statement\r\n\t | return_statement\r\n\t | throw_st" +
            "atement\r\n\t | try_catch_statement\r\n\t | waitfor_statement\r\n\t | while_statement\r\n\t " +
            "| print_statement\r\n\t | raiseerror_statement\r\n\t | declare_statement\r\n\t | execute_" +
            "statement\r\n\t | cursor_statement\r\n\t | begin_conversation_timer\r\n\t | begin_convers" +
            "ation_dialog\r\n\t | end_conversation\r\n\t | get_conversation\r\n\t | send_conversation\r" +
            "\n\t | waitfor_conversation\r\n\t | create_contract\r\n\t | create_queue\r\n\t | alter_queu" +
            "e\r\n\t | kill_statement\r\n\t | message_statement\r\n\t | security_statement\r\n\t | set_st" +
            "atement\r\n\t | transaction_statement\r\n\t | use_statement\r\n\t | setuser_statement\r\n\t " +
            "| reconfigure_statement\r\n\t | shutdown_statement\r\n\t | checkpoint_statement\r\n\t | b" +
            "ackup_database\r\n\t | backup_log\r\n\t | backup_certificate\r\n\t | backup_master_key\r\n\t" +
            " | backup_service_master_key\r\n\t | dbcc_special\r\n\t | dbcc_clause";
        
        /// <summary>
        /// sql_clause : merge_statement 
        /// </summary>
        public partial class AstSqlClause1 : AstSqlClause
        {
            
            private AstMergeStatement _mergeStatement;
            
            internal AstSqlClause1(ParserRuleContext ctx, AstMergeStatement mergeStatement) : 
                    base(ctx)
            {
                _mergeStatement = mergeStatement;
            }
            
            public virtual AstMergeStatement MergeStatement
            {
                get
                {
                    return _mergeStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : delete_statement 
        /// </summary>
        public partial class AstSqlClause2 : AstSqlClause
        {
            
            private AstDeleteStatement _deleteStatement;
            
            internal AstSqlClause2(ParserRuleContext ctx, AstDeleteStatement deleteStatement) : 
                    base(ctx)
            {
                _deleteStatement = deleteStatement;
            }
            
            public virtual AstDeleteStatement DeleteStatement
            {
                get
                {
                    return _deleteStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : insert_statement 
        /// </summary>
        public partial class AstSqlClause3 : AstSqlClause
        {
            
            private AstInsertStatement _insertStatement;
            
            internal AstSqlClause3(ParserRuleContext ctx, AstInsertStatement insertStatement) : 
                    base(ctx)
            {
                _insertStatement = insertStatement;
            }
            
            public virtual AstInsertStatement InsertStatement
            {
                get
                {
                    return _insertStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : select_statement_standalone 
        /// </summary>
        public partial class AstSqlClause4 : AstSqlClause
        {
            
            private AstSelectStatementStandalone _selectStatementStandalone;
            
            internal AstSqlClause4(ParserRuleContext ctx, AstSelectStatementStandalone selectStatementStandalone) : 
                    base(ctx)
            {
                _selectStatementStandalone = selectStatementStandalone;
            }
            
            public virtual AstSelectStatementStandalone SelectStatementStandalone
            {
                get
                {
                    return _selectStatementStandalone;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : update_statement 
        /// </summary>
        public partial class AstSqlClause5 : AstSqlClause
        {
            
            private AstUpdateStatement _updateStatement;
            
            internal AstSqlClause5(ParserRuleContext ctx, AstUpdateStatement updateStatement) : 
                    base(ctx)
            {
                _updateStatement = updateStatement;
            }
            
            public virtual AstUpdateStatement UpdateStatement
            {
                get
                {
                    return _updateStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_application_role 
        /// </summary>
        public partial class AstSqlClause6 : AstSqlClause
        {
            
            private AstAlterApplicationRole _alterApplicationRole;
            
            internal AstSqlClause6(ParserRuleContext ctx, AstAlterApplicationRole alterApplicationRole) : 
                    base(ctx)
            {
                _alterApplicationRole = alterApplicationRole;
            }
            
            public virtual AstAlterApplicationRole AlterApplicationRole
            {
                get
                {
                    return _alterApplicationRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_assembly 
        /// </summary>
        public partial class AstSqlClause7 : AstSqlClause
        {
            
            private AstAlterAssembly _alterAssembly;
            
            internal AstSqlClause7(ParserRuleContext ctx, AstAlterAssembly alterAssembly) : 
                    base(ctx)
            {
                _alterAssembly = alterAssembly;
            }
            
            public virtual AstAlterAssembly AlterAssembly
            {
                get
                {
                    return _alterAssembly;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_asymmetric_key 
        /// </summary>
        public partial class AstSqlClause8 : AstSqlClause
        {
            
            private AstAlterAsymmetricKey _alterAsymmetricKey;
            
            internal AstSqlClause8(ParserRuleContext ctx, AstAlterAsymmetricKey alterAsymmetricKey) : 
                    base(ctx)
            {
                _alterAsymmetricKey = alterAsymmetricKey;
            }
            
            public virtual AstAlterAsymmetricKey AlterAsymmetricKey
            {
                get
                {
                    return _alterAsymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization 
        /// </summary>
        public partial class AstSqlClause9 : AstSqlClause
        {
            
            private AstAlterAuthorization _alterAuthorization;
            
            internal AstSqlClause9(ParserRuleContext ctx, AstAlterAuthorization alterAuthorization) : 
                    base(ctx)
            {
                _alterAuthorization = alterAuthorization;
            }
            
            public virtual AstAlterAuthorization AlterAuthorization
            {
                get
                {
                    return _alterAuthorization;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization_for_azure_dw 
        /// </summary>
        public partial class AstSqlClause10 : AstSqlClause
        {
            
            private AstAlterAuthorizationForAzureDw _alterAuthorizationForAzureDw;
            
            internal AstSqlClause10(ParserRuleContext ctx, AstAlterAuthorizationForAzureDw alterAuthorizationForAzureDw) : 
                    base(ctx)
            {
                _alterAuthorizationForAzureDw = alterAuthorizationForAzureDw;
            }
            
            public virtual AstAlterAuthorizationForAzureDw AlterAuthorizationForAzureDw
            {
                get
                {
                    return _alterAuthorizationForAzureDw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization_for_parallel_dw 
        /// </summary>
        public partial class AstSqlClause11 : AstSqlClause
        {
            
            private AstAlterAuthorizationForParallelDw _alterAuthorizationForParallelDw;
            
            internal AstSqlClause11(ParserRuleContext ctx, AstAlterAuthorizationForParallelDw alterAuthorizationForParallelDw) : 
                    base(ctx)
            {
                _alterAuthorizationForParallelDw = alterAuthorizationForParallelDw;
            }
            
            public virtual AstAlterAuthorizationForParallelDw AlterAuthorizationForParallelDw
            {
                get
                {
                    return _alterAuthorizationForParallelDw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_authorization_for_sql_database 
        /// </summary>
        public partial class AstSqlClause12 : AstSqlClause
        {
            
            private AstAlterAuthorizationForSqlDatabase _alterAuthorizationForSqlDatabase;
            
            internal AstSqlClause12(ParserRuleContext ctx, AstAlterAuthorizationForSqlDatabase alterAuthorizationForSqlDatabase) : 
                    base(ctx)
            {
                _alterAuthorizationForSqlDatabase = alterAuthorizationForSqlDatabase;
            }
            
            public virtual AstAlterAuthorizationForSqlDatabase AlterAuthorizationForSqlDatabase
            {
                get
                {
                    return _alterAuthorizationForSqlDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_availability_group 
        /// </summary>
        public partial class AstSqlClause13 : AstSqlClause
        {
            
            private AstAlterAvailabilityGroup _alterAvailabilityGroup;
            
            internal AstSqlClause13(ParserRuleContext ctx, AstAlterAvailabilityGroup alterAvailabilityGroup) : 
                    base(ctx)
            {
                _alterAvailabilityGroup = alterAvailabilityGroup;
            }
            
            public virtual AstAlterAvailabilityGroup AlterAvailabilityGroup
            {
                get
                {
                    return _alterAvailabilityGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_certificate 
        /// </summary>
        public partial class AstSqlClause14 : AstSqlClause
        {
            
            private AstAlterCertificate _alterCertificate;
            
            internal AstSqlClause14(ParserRuleContext ctx, AstAlterCertificate alterCertificate) : 
                    base(ctx)
            {
                _alterCertificate = alterCertificate;
            }
            
            public virtual AstAlterCertificate AlterCertificate
            {
                get
                {
                    return _alterCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_column_encryption_key 
        /// </summary>
        public partial class AstSqlClause15 : AstSqlClause
        {
            
            private AstAlterColumnEncryptionKey _alterColumnEncryptionKey;
            
            internal AstSqlClause15(ParserRuleContext ctx, AstAlterColumnEncryptionKey alterColumnEncryptionKey) : 
                    base(ctx)
            {
                _alterColumnEncryptionKey = alterColumnEncryptionKey;
            }
            
            public virtual AstAlterColumnEncryptionKey AlterColumnEncryptionKey
            {
                get
                {
                    return _alterColumnEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_credential 
        /// </summary>
        public partial class AstSqlClause16 : AstSqlClause
        {
            
            private AstAlterCredential _alterCredential;
            
            internal AstSqlClause16(ParserRuleContext ctx, AstAlterCredential alterCredential) : 
                    base(ctx)
            {
                _alterCredential = alterCredential;
            }
            
            public virtual AstAlterCredential AlterCredential
            {
                get
                {
                    return _alterCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_cryptographic_provider 
        /// </summary>
        public partial class AstSqlClause17 : AstSqlClause
        {
            
            private AstAlterCryptographicProvider _alterCryptographicProvider;
            
            internal AstSqlClause17(ParserRuleContext ctx, AstAlterCryptographicProvider alterCryptographicProvider) : 
                    base(ctx)
            {
                _alterCryptographicProvider = alterCryptographicProvider;
            }
            
            public virtual AstAlterCryptographicProvider AlterCryptographicProvider
            {
                get
                {
                    return _alterCryptographicProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_database 
        /// </summary>
        public partial class AstSqlClause18 : AstSqlClause
        {
            
            private AstAlterDatabase _alterDatabase;
            
            internal AstSqlClause18(ParserRuleContext ctx, AstAlterDatabase alterDatabase) : 
                    base(ctx)
            {
                _alterDatabase = alterDatabase;
            }
            
            public virtual AstAlterDatabase AlterDatabase
            {
                get
                {
                    return _alterDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_db_role 
        /// </summary>
        public partial class AstSqlClause19 : AstSqlClause
        {
            
            private AstAlterDbRole _alterDbRole;
            
            internal AstSqlClause19(ParserRuleContext ctx, AstAlterDbRole alterDbRole) : 
                    base(ctx)
            {
                _alterDbRole = alterDbRole;
            }
            
            public virtual AstAlterDbRole AlterDbRole
            {
                get
                {
                    return _alterDbRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_endpoint 
        /// </summary>
        public partial class AstSqlClause20 : AstSqlClause
        {
            
            private AstAlterEndpoint _alterEndpoint;
            
            internal AstSqlClause20(ParserRuleContext ctx, AstAlterEndpoint alterEndpoint) : 
                    base(ctx)
            {
                _alterEndpoint = alterEndpoint;
            }
            
            public virtual AstAlterEndpoint AlterEndpoint
            {
                get
                {
                    return _alterEndpoint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_or_alter_event_session 
        /// </summary>
        public partial class AstSqlClause21 : AstSqlClause
        {
            
            private AstCreateOrAlterEventSession _createOrAlterEventSession;
            
            internal AstSqlClause21(ParserRuleContext ctx, AstCreateOrAlterEventSession createOrAlterEventSession) : 
                    base(ctx)
            {
                _createOrAlterEventSession = createOrAlterEventSession;
            }
            
            public virtual AstCreateOrAlterEventSession CreateOrAlterEventSession
            {
                get
                {
                    return _createOrAlterEventSession;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_external_data_source 
        /// </summary>
        public partial class AstSqlClause22 : AstSqlClause
        {
            
            private AstAlterExternalDataSource _alterExternalDataSource;
            
            internal AstSqlClause22(ParserRuleContext ctx, AstAlterExternalDataSource alterExternalDataSource) : 
                    base(ctx)
            {
                _alterExternalDataSource = alterExternalDataSource;
            }
            
            public virtual AstAlterExternalDataSource AlterExternalDataSource
            {
                get
                {
                    return _alterExternalDataSource;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_external_library 
        /// </summary>
        public partial class AstSqlClause23 : AstSqlClause
        {
            
            private AstAlterExternalLibrary _alterExternalLibrary;
            
            internal AstSqlClause23(ParserRuleContext ctx, AstAlterExternalLibrary alterExternalLibrary) : 
                    base(ctx)
            {
                _alterExternalLibrary = alterExternalLibrary;
            }
            
            public virtual AstAlterExternalLibrary AlterExternalLibrary
            {
                get
                {
                    return _alterExternalLibrary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_external_resource_pool 
        /// </summary>
        public partial class AstSqlClause24 : AstSqlClause
        {
            
            private AstAlterExternalResourcePool _alterExternalResourcePool;
            
            internal AstSqlClause24(ParserRuleContext ctx, AstAlterExternalResourcePool alterExternalResourcePool) : 
                    base(ctx)
            {
                _alterExternalResourcePool = alterExternalResourcePool;
            }
            
            public virtual AstAlterExternalResourcePool AlterExternalResourcePool
            {
                get
                {
                    return _alterExternalResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_fulltext_catalog 
        /// </summary>
        public partial class AstSqlClause25 : AstSqlClause
        {
            
            private AstAlterFulltextCatalog _alterFulltextCatalog;
            
            internal AstSqlClause25(ParserRuleContext ctx, AstAlterFulltextCatalog alterFulltextCatalog) : 
                    base(ctx)
            {
                _alterFulltextCatalog = alterFulltextCatalog;
            }
            
            public virtual AstAlterFulltextCatalog AlterFulltextCatalog
            {
                get
                {
                    return _alterFulltextCatalog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_fulltext_stoplist 
        /// </summary>
        public partial class AstSqlClause26 : AstSqlClause
        {
            
            private AstAlterFulltextStoplist _alterFulltextStoplist;
            
            internal AstSqlClause26(ParserRuleContext ctx, AstAlterFulltextStoplist alterFulltextStoplist) : 
                    base(ctx)
            {
                _alterFulltextStoplist = alterFulltextStoplist;
            }
            
            public virtual AstAlterFulltextStoplist AlterFulltextStoplist
            {
                get
                {
                    return _alterFulltextStoplist;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_index 
        /// </summary>
        public partial class AstSqlClause27 : AstSqlClause
        {
            
            private AstAlterIndex _alterIndex;
            
            internal AstSqlClause27(ParserRuleContext ctx, AstAlterIndex alterIndex) : 
                    base(ctx)
            {
                _alterIndex = alterIndex;
            }
            
            public virtual AstAlterIndex AlterIndex
            {
                get
                {
                    return _alterIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_login_azure_sql 
        /// </summary>
        public partial class AstSqlClause28 : AstSqlClause
        {
            
            private AstAlterLoginAzureSql _alterLoginAzureSql;
            
            internal AstSqlClause28(ParserRuleContext ctx, AstAlterLoginAzureSql alterLoginAzureSql) : 
                    base(ctx)
            {
                _alterLoginAzureSql = alterLoginAzureSql;
            }
            
            public virtual AstAlterLoginAzureSql AlterLoginAzureSql
            {
                get
                {
                    return _alterLoginAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_login_azure_sql_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause29 : AstSqlClause
        {
            
            private AstAlterLoginAzureSqlDwAndPdw _alterLoginAzureSqlDwAndPdw;
            
            internal AstSqlClause29(ParserRuleContext ctx, AstAlterLoginAzureSqlDwAndPdw alterLoginAzureSqlDwAndPdw) : 
                    base(ctx)
            {
                _alterLoginAzureSqlDwAndPdw = alterLoginAzureSqlDwAndPdw;
            }
            
            public virtual AstAlterLoginAzureSqlDwAndPdw AlterLoginAzureSqlDwAndPdw
            {
                get
                {
                    return _alterLoginAzureSqlDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_login_sql_server 
        /// </summary>
        public partial class AstSqlClause30 : AstSqlClause
        {
            
            private AstAlterLoginSqlServer _alterLoginSqlServer;
            
            internal AstSqlClause30(ParserRuleContext ctx, AstAlterLoginSqlServer alterLoginSqlServer) : 
                    base(ctx)
            {
                _alterLoginSqlServer = alterLoginSqlServer;
            }
            
            public virtual AstAlterLoginSqlServer AlterLoginSqlServer
            {
                get
                {
                    return _alterLoginSqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_master_key_azure_sql 
        /// </summary>
        public partial class AstSqlClause31 : AstSqlClause
        {
            
            private AstAlterMasterKeyAzureSql _alterMasterKeyAzureSql;
            
            internal AstSqlClause31(ParserRuleContext ctx, AstAlterMasterKeyAzureSql alterMasterKeyAzureSql) : 
                    base(ctx)
            {
                _alterMasterKeyAzureSql = alterMasterKeyAzureSql;
            }
            
            public virtual AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql
            {
                get
                {
                    return _alterMasterKeyAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_master_key_sql_server 
        /// </summary>
        public partial class AstSqlClause32 : AstSqlClause
        {
            
            private AstAlterMasterKeySqlServer _alterMasterKeySqlServer;
            
            internal AstSqlClause32(ParserRuleContext ctx, AstAlterMasterKeySqlServer alterMasterKeySqlServer) : 
                    base(ctx)
            {
                _alterMasterKeySqlServer = alterMasterKeySqlServer;
            }
            
            public virtual AstAlterMasterKeySqlServer AlterMasterKeySqlServer
            {
                get
                {
                    return _alterMasterKeySqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_message_type 
        /// </summary>
        public partial class AstSqlClause33 : AstSqlClause
        {
            
            private AstAlterMessageType _alterMessageType;
            
            internal AstSqlClause33(ParserRuleContext ctx, AstAlterMessageType alterMessageType) : 
                    base(ctx)
            {
                _alterMessageType = alterMessageType;
            }
            
            public virtual AstAlterMessageType AlterMessageType
            {
                get
                {
                    return _alterMessageType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_partition_function 
        /// </summary>
        public partial class AstSqlClause34 : AstSqlClause
        {
            
            private AstAlterPartitionFunction _alterPartitionFunction;
            
            internal AstSqlClause34(ParserRuleContext ctx, AstAlterPartitionFunction alterPartitionFunction) : 
                    base(ctx)
            {
                _alterPartitionFunction = alterPartitionFunction;
            }
            
            public virtual AstAlterPartitionFunction AlterPartitionFunction
            {
                get
                {
                    return _alterPartitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_partition_scheme 
        /// </summary>
        public partial class AstSqlClause35 : AstSqlClause
        {
            
            private AstAlterPartitionScheme _alterPartitionScheme;
            
            internal AstSqlClause35(ParserRuleContext ctx, AstAlterPartitionScheme alterPartitionScheme) : 
                    base(ctx)
            {
                _alterPartitionScheme = alterPartitionScheme;
            }
            
            public virtual AstAlterPartitionScheme AlterPartitionScheme
            {
                get
                {
                    return _alterPartitionScheme;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_remote_service_binding 
        /// </summary>
        public partial class AstSqlClause36 : AstSqlClause
        {
            
            private AstAlterRemoteServiceBinding _alterRemoteServiceBinding;
            
            internal AstSqlClause36(ParserRuleContext ctx, AstAlterRemoteServiceBinding alterRemoteServiceBinding) : 
                    base(ctx)
            {
                _alterRemoteServiceBinding = alterRemoteServiceBinding;
            }
            
            public virtual AstAlterRemoteServiceBinding AlterRemoteServiceBinding
            {
                get
                {
                    return _alterRemoteServiceBinding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_resource_governor 
        /// </summary>
        public partial class AstSqlClause37 : AstSqlClause
        {
            
            private AstAlterResourceGovernor _alterResourceGovernor;
            
            internal AstSqlClause37(ParserRuleContext ctx, AstAlterResourceGovernor alterResourceGovernor) : 
                    base(ctx)
            {
                _alterResourceGovernor = alterResourceGovernor;
            }
            
            public virtual AstAlterResourceGovernor AlterResourceGovernor
            {
                get
                {
                    return _alterResourceGovernor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause38 : AstSqlClause
        {
            
            private AstAlterSchemaAzureSqlDwAndPdw _alterSchemaAzureSqlDwAndPdw;
            
            internal AstSqlClause38(ParserRuleContext ctx, AstAlterSchemaAzureSqlDwAndPdw alterSchemaAzureSqlDwAndPdw) : 
                    base(ctx)
            {
                _alterSchemaAzureSqlDwAndPdw = alterSchemaAzureSqlDwAndPdw;
            }
            
            public virtual AstAlterSchemaAzureSqlDwAndPdw AlterSchemaAzureSqlDwAndPdw
            {
                get
                {
                    return _alterSchemaAzureSqlDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_schema_sql 
        /// </summary>
        public partial class AstSqlClause39 : AstSqlClause
        {
            
            private AstAlterSchemaSql _alterSchemaSql;
            
            internal AstSqlClause39(ParserRuleContext ctx, AstAlterSchemaSql alterSchemaSql) : 
                    base(ctx)
            {
                _alterSchemaSql = alterSchemaSql;
            }
            
            public virtual AstAlterSchemaSql AlterSchemaSql
            {
                get
                {
                    return _alterSchemaSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_sequence 
        /// </summary>
        public partial class AstSqlClause40 : AstSqlClause
        {
            
            private AstAlterSequence _alterSequence;
            
            internal AstSqlClause40(ParserRuleContext ctx, AstAlterSequence alterSequence) : 
                    base(ctx)
            {
                _alterSequence = alterSequence;
            }
            
            public virtual AstAlterSequence AlterSequence
            {
                get
                {
                    return _alterSequence;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_audit 
        /// </summary>
        public partial class AstSqlClause41 : AstSqlClause
        {
            
            private AstAlterServerAudit _alterServerAudit;
            
            internal AstSqlClause41(ParserRuleContext ctx, AstAlterServerAudit alterServerAudit) : 
                    base(ctx)
            {
                _alterServerAudit = alterServerAudit;
            }
            
            public virtual AstAlterServerAudit AlterServerAudit
            {
                get
                {
                    return _alterServerAudit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_audit_specification 
        /// </summary>
        public partial class AstSqlClause42 : AstSqlClause
        {
            
            private AstAlterServerAuditSpecification _alterServerAuditSpecification;
            
            internal AstSqlClause42(ParserRuleContext ctx, AstAlterServerAuditSpecification alterServerAuditSpecification) : 
                    base(ctx)
            {
                _alterServerAuditSpecification = alterServerAuditSpecification;
            }
            
            public virtual AstAlterServerAuditSpecification AlterServerAuditSpecification
            {
                get
                {
                    return _alterServerAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_configuration 
        /// </summary>
        public partial class AstSqlClause43 : AstSqlClause
        {
            
            private AstAlterServerConfiguration _alterServerConfiguration;
            
            internal AstSqlClause43(ParserRuleContext ctx, AstAlterServerConfiguration alterServerConfiguration) : 
                    base(ctx)
            {
                _alterServerConfiguration = alterServerConfiguration;
            }
            
            public virtual AstAlterServerConfiguration AlterServerConfiguration
            {
                get
                {
                    return _alterServerConfiguration;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_role 
        /// </summary>
        public partial class AstSqlClause44 : AstSqlClause
        {
            
            private AstAlterServerRole _alterServerRole;
            
            internal AstSqlClause44(ParserRuleContext ctx, AstAlterServerRole alterServerRole) : 
                    base(ctx)
            {
                _alterServerRole = alterServerRole;
            }
            
            public virtual AstAlterServerRole AlterServerRole
            {
                get
                {
                    return _alterServerRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_server_role_pdw 
        /// </summary>
        public partial class AstSqlClause45 : AstSqlClause
        {
            
            private AstAlterServerRolePdw _alterServerRolePdw;
            
            internal AstSqlClause45(ParserRuleContext ctx, AstAlterServerRolePdw alterServerRolePdw) : 
                    base(ctx)
            {
                _alterServerRolePdw = alterServerRolePdw;
            }
            
            public virtual AstAlterServerRolePdw AlterServerRolePdw
            {
                get
                {
                    return _alterServerRolePdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_service 
        /// </summary>
        public partial class AstSqlClause46 : AstSqlClause
        {
            
            private AstAlterService _alterService;
            
            internal AstSqlClause46(ParserRuleContext ctx, AstAlterService alterService) : 
                    base(ctx)
            {
                _alterService = alterService;
            }
            
            public virtual AstAlterService AlterService
            {
                get
                {
                    return _alterService;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_service_master_key 
        /// </summary>
        public partial class AstSqlClause47 : AstSqlClause
        {
            
            private AstAlterServiceMasterKey _alterServiceMasterKey;
            
            internal AstSqlClause47(ParserRuleContext ctx, AstAlterServiceMasterKey alterServiceMasterKey) : 
                    base(ctx)
            {
                _alterServiceMasterKey = alterServiceMasterKey;
            }
            
            public virtual AstAlterServiceMasterKey AlterServiceMasterKey
            {
                get
                {
                    return _alterServiceMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_symmetric_key 
        /// </summary>
        public partial class AstSqlClause48 : AstSqlClause
        {
            
            private AstAlterSymmetricKey _alterSymmetricKey;
            
            internal AstSqlClause48(ParserRuleContext ctx, AstAlterSymmetricKey alterSymmetricKey) : 
                    base(ctx)
            {
                _alterSymmetricKey = alterSymmetricKey;
            }
            
            public virtual AstAlterSymmetricKey AlterSymmetricKey
            {
                get
                {
                    return _alterSymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_table 
        /// </summary>
        public partial class AstSqlClause49 : AstSqlClause
        {
            
            private AstAlterTable _alterTable;
            
            internal AstSqlClause49(ParserRuleContext ctx, AstAlterTable alterTable) : 
                    base(ctx)
            {
                _alterTable = alterTable;
            }
            
            public virtual AstAlterTable AlterTable
            {
                get
                {
                    return _alterTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_user 
        /// </summary>
        public partial class AstSqlClause50 : AstSqlClause
        {
            
            private AstAlterUser _alterUser;
            
            internal AstSqlClause50(ParserRuleContext ctx, AstAlterUser alterUser) : 
                    base(ctx)
            {
                _alterUser = alterUser;
            }
            
            public virtual AstAlterUser AlterUser
            {
                get
                {
                    return _alterUser;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_user_azure_sql 
        /// </summary>
        public partial class AstSqlClause51 : AstSqlClause
        {
            
            private AstAlterUserAzureSql _alterUserAzureSql;
            
            internal AstSqlClause51(ParserRuleContext ctx, AstAlterUserAzureSql alterUserAzureSql) : 
                    base(ctx)
            {
                _alterUserAzureSql = alterUserAzureSql;
            }
            
            public virtual AstAlterUserAzureSql AlterUserAzureSql
            {
                get
                {
                    return _alterUserAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_workload_group 
        /// </summary>
        public partial class AstSqlClause52 : AstSqlClause
        {
            
            private AstAlterWorkloadGroup _alterWorkloadGroup;
            
            internal AstSqlClause52(ParserRuleContext ctx, AstAlterWorkloadGroup alterWorkloadGroup) : 
                    base(ctx)
            {
                _alterWorkloadGroup = alterWorkloadGroup;
            }
            
            public virtual AstAlterWorkloadGroup AlterWorkloadGroup
            {
                get
                {
                    return _alterWorkloadGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_application_role 
        /// </summary>
        public partial class AstSqlClause53 : AstSqlClause
        {
            
            private AstCreateApplicationRole _createApplicationRole;
            
            internal AstSqlClause53(ParserRuleContext ctx, AstCreateApplicationRole createApplicationRole) : 
                    base(ctx)
            {
                _createApplicationRole = createApplicationRole;
            }
            
            public virtual AstCreateApplicationRole CreateApplicationRole
            {
                get
                {
                    return _createApplicationRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_assembly 
        /// </summary>
        public partial class AstSqlClause54 : AstSqlClause
        {
            
            private AstCreateAssembly _createAssembly;
            
            internal AstSqlClause54(ParserRuleContext ctx, AstCreateAssembly createAssembly) : 
                    base(ctx)
            {
                _createAssembly = createAssembly;
            }
            
            public virtual AstCreateAssembly CreateAssembly
            {
                get
                {
                    return _createAssembly;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_asymmetric_key 
        /// </summary>
        public partial class AstSqlClause55 : AstSqlClause
        {
            
            private AstCreateAsymmetricKey _createAsymmetricKey;
            
            internal AstSqlClause55(ParserRuleContext ctx, AstCreateAsymmetricKey createAsymmetricKey) : 
                    base(ctx)
            {
                _createAsymmetricKey = createAsymmetricKey;
            }
            
            public virtual AstCreateAsymmetricKey CreateAsymmetricKey
            {
                get
                {
                    return _createAsymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_column_encryption_key 
        /// </summary>
        public partial class AstSqlClause56 : AstSqlClause
        {
            
            private AstCreateColumnEncryptionKey _createColumnEncryptionKey;
            
            internal AstSqlClause56(ParserRuleContext ctx, AstCreateColumnEncryptionKey createColumnEncryptionKey) : 
                    base(ctx)
            {
                _createColumnEncryptionKey = createColumnEncryptionKey;
            }
            
            public virtual AstCreateColumnEncryptionKey CreateColumnEncryptionKey
            {
                get
                {
                    return _createColumnEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_column_master_key 
        /// </summary>
        public partial class AstSqlClause57 : AstSqlClause
        {
            
            private AstCreateColumnMasterKey _createColumnMasterKey;
            
            internal AstSqlClause57(ParserRuleContext ctx, AstCreateColumnMasterKey createColumnMasterKey) : 
                    base(ctx)
            {
                _createColumnMasterKey = createColumnMasterKey;
            }
            
            public virtual AstCreateColumnMasterKey CreateColumnMasterKey
            {
                get
                {
                    return _createColumnMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_credential 
        /// </summary>
        public partial class AstSqlClause58 : AstSqlClause
        {
            
            private AstCreateCredential _createCredential;
            
            internal AstSqlClause58(ParserRuleContext ctx, AstCreateCredential createCredential) : 
                    base(ctx)
            {
                _createCredential = createCredential;
            }
            
            public virtual AstCreateCredential CreateCredential
            {
                get
                {
                    return _createCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_cryptographic_provider 
        /// </summary>
        public partial class AstSqlClause59 : AstSqlClause
        {
            
            private AstCreateCryptographicProvider _createCryptographicProvider;
            
            internal AstSqlClause59(ParserRuleContext ctx, AstCreateCryptographicProvider createCryptographicProvider) : 
                    base(ctx)
            {
                _createCryptographicProvider = createCryptographicProvider;
            }
            
            public virtual AstCreateCryptographicProvider CreateCryptographicProvider
            {
                get
                {
                    return _createCryptographicProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_database 
        /// </summary>
        public partial class AstSqlClause60 : AstSqlClause
        {
            
            private AstCreateDatabase _createDatabase;
            
            internal AstSqlClause60(ParserRuleContext ctx, AstCreateDatabase createDatabase) : 
                    base(ctx)
            {
                _createDatabase = createDatabase;
            }
            
            public virtual AstCreateDatabase CreateDatabase
            {
                get
                {
                    return _createDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_db_role 
        /// </summary>
        public partial class AstSqlClause61 : AstSqlClause
        {
            
            private AstCreateDbRole _createDbRole;
            
            internal AstSqlClause61(ParserRuleContext ctx, AstCreateDbRole createDbRole) : 
                    base(ctx)
            {
                _createDbRole = createDbRole;
            }
            
            public virtual AstCreateDbRole CreateDbRole
            {
                get
                {
                    return _createDbRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_event_notification 
        /// </summary>
        public partial class AstSqlClause62 : AstSqlClause
        {
            
            private AstCreateEventNotification _createEventNotification;
            
            internal AstSqlClause62(ParserRuleContext ctx, AstCreateEventNotification createEventNotification) : 
                    base(ctx)
            {
                _createEventNotification = createEventNotification;
            }
            
            public virtual AstCreateEventNotification CreateEventNotification
            {
                get
                {
                    return _createEventNotification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_external_library 
        /// </summary>
        public partial class AstSqlClause63 : AstSqlClause
        {
            
            private AstCreateExternalLibrary _createExternalLibrary;
            
            internal AstSqlClause63(ParserRuleContext ctx, AstCreateExternalLibrary createExternalLibrary) : 
                    base(ctx)
            {
                _createExternalLibrary = createExternalLibrary;
            }
            
            public virtual AstCreateExternalLibrary CreateExternalLibrary
            {
                get
                {
                    return _createExternalLibrary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_external_resource_pool 
        /// </summary>
        public partial class AstSqlClause64 : AstSqlClause
        {
            
            private AstCreateExternalResourcePool _createExternalResourcePool;
            
            internal AstSqlClause64(ParserRuleContext ctx, AstCreateExternalResourcePool createExternalResourcePool) : 
                    base(ctx)
            {
                _createExternalResourcePool = createExternalResourcePool;
            }
            
            public virtual AstCreateExternalResourcePool CreateExternalResourcePool
            {
                get
                {
                    return _createExternalResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_fulltext_catalog 
        /// </summary>
        public partial class AstSqlClause65 : AstSqlClause
        {
            
            private AstCreateFulltextCatalog _createFulltextCatalog;
            
            internal AstSqlClause65(ParserRuleContext ctx, AstCreateFulltextCatalog createFulltextCatalog) : 
                    base(ctx)
            {
                _createFulltextCatalog = createFulltextCatalog;
            }
            
            public virtual AstCreateFulltextCatalog CreateFulltextCatalog
            {
                get
                {
                    return _createFulltextCatalog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_fulltext_stoplist 
        /// </summary>
        public partial class AstSqlClause66 : AstSqlClause
        {
            
            private AstCreateFulltextStoplist _createFulltextStoplist;
            
            internal AstSqlClause66(ParserRuleContext ctx, AstCreateFulltextStoplist createFulltextStoplist) : 
                    base(ctx)
            {
                _createFulltextStoplist = createFulltextStoplist;
            }
            
            public virtual AstCreateFulltextStoplist CreateFulltextStoplist
            {
                get
                {
                    return _createFulltextStoplist;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_index 
        /// </summary>
        public partial class AstSqlClause67 : AstSqlClause
        {
            
            private AstCreateIndex _createIndex;
            
            internal AstSqlClause67(ParserRuleContext ctx, AstCreateIndex createIndex) : 
                    base(ctx)
            {
                _createIndex = createIndex;
            }
            
            public virtual AstCreateIndex CreateIndex
            {
                get
                {
                    return _createIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_columnstore_index 
        /// </summary>
        public partial class AstSqlClause68 : AstSqlClause
        {
            
            private AstCreateColumnstoreIndex _createColumnstoreIndex;
            
            internal AstSqlClause68(ParserRuleContext ctx, AstCreateColumnstoreIndex createColumnstoreIndex) : 
                    base(ctx)
            {
                _createColumnstoreIndex = createColumnstoreIndex;
            }
            
            public virtual AstCreateColumnstoreIndex CreateColumnstoreIndex
            {
                get
                {
                    return _createColumnstoreIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_nonclustered_columnstore_index 
        /// </summary>
        public partial class AstSqlClause69 : AstSqlClause
        {
            
            private AstCreateNonclusteredColumnstoreIndex _createNonclusteredColumnstoreIndex;
            
            internal AstSqlClause69(ParserRuleContext ctx, AstCreateNonclusteredColumnstoreIndex createNonclusteredColumnstoreIndex) : 
                    base(ctx)
            {
                _createNonclusteredColumnstoreIndex = createNonclusteredColumnstoreIndex;
            }
            
            public virtual AstCreateNonclusteredColumnstoreIndex CreateNonclusteredColumnstoreIndex
            {
                get
                {
                    return _createNonclusteredColumnstoreIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_login_azure_sql 
        /// </summary>
        public partial class AstSqlClause70 : AstSqlClause
        {
            
            private AstCreateLoginAzureSql _createLoginAzureSql;
            
            internal AstSqlClause70(ParserRuleContext ctx, AstCreateLoginAzureSql createLoginAzureSql) : 
                    base(ctx)
            {
                _createLoginAzureSql = createLoginAzureSql;
            }
            
            public virtual AstCreateLoginAzureSql CreateLoginAzureSql
            {
                get
                {
                    return _createLoginAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_login_pdw 
        /// </summary>
        public partial class AstSqlClause71 : AstSqlClause
        {
            
            private AstCreateLoginPdw _createLoginPdw;
            
            internal AstSqlClause71(ParserRuleContext ctx, AstCreateLoginPdw createLoginPdw) : 
                    base(ctx)
            {
                _createLoginPdw = createLoginPdw;
            }
            
            public virtual AstCreateLoginPdw CreateLoginPdw
            {
                get
                {
                    return _createLoginPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_login_sql_server 
        /// </summary>
        public partial class AstSqlClause72 : AstSqlClause
        {
            
            private AstCreateLoginSqlServer _createLoginSqlServer;
            
            internal AstSqlClause72(ParserRuleContext ctx, AstCreateLoginSqlServer createLoginSqlServer) : 
                    base(ctx)
            {
                _createLoginSqlServer = createLoginSqlServer;
            }
            
            public virtual AstCreateLoginSqlServer CreateLoginSqlServer
            {
                get
                {
                    return _createLoginSqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_master_key_azure_sql 
        /// </summary>
        public partial class AstSqlClause73 : AstSqlClause
        {
            
            private AstCreateMasterKeyAzureSql _createMasterKeyAzureSql;
            
            internal AstSqlClause73(ParserRuleContext ctx, AstCreateMasterKeyAzureSql createMasterKeyAzureSql) : 
                    base(ctx)
            {
                _createMasterKeyAzureSql = createMasterKeyAzureSql;
            }
            
            public virtual AstCreateMasterKeyAzureSql CreateMasterKeyAzureSql
            {
                get
                {
                    return _createMasterKeyAzureSql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_master_key_sql_server 
        /// </summary>
        public partial class AstSqlClause74 : AstSqlClause
        {
            
            private AstCreateMasterKeySqlServer _createMasterKeySqlServer;
            
            internal AstSqlClause74(ParserRuleContext ctx, AstCreateMasterKeySqlServer createMasterKeySqlServer) : 
                    base(ctx)
            {
                _createMasterKeySqlServer = createMasterKeySqlServer;
            }
            
            public virtual AstCreateMasterKeySqlServer CreateMasterKeySqlServer
            {
                get
                {
                    return _createMasterKeySqlServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_or_alter_broker_priority 
        /// </summary>
        public partial class AstSqlClause75 : AstSqlClause
        {
            
            private AstCreateOrAlterBrokerPriority _createOrAlterBrokerPriority;
            
            internal AstSqlClause75(ParserRuleContext ctx, AstCreateOrAlterBrokerPriority createOrAlterBrokerPriority) : 
                    base(ctx)
            {
                _createOrAlterBrokerPriority = createOrAlterBrokerPriority;
            }
            
            public virtual AstCreateOrAlterBrokerPriority CreateOrAlterBrokerPriority
            {
                get
                {
                    return _createOrAlterBrokerPriority;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_remote_service_binding 
        /// </summary>
        public partial class AstSqlClause76 : AstSqlClause
        {
            
            private AstCreateRemoteServiceBinding _createRemoteServiceBinding;
            
            internal AstSqlClause76(ParserRuleContext ctx, AstCreateRemoteServiceBinding createRemoteServiceBinding) : 
                    base(ctx)
            {
                _createRemoteServiceBinding = createRemoteServiceBinding;
            }
            
            public virtual AstCreateRemoteServiceBinding CreateRemoteServiceBinding
            {
                get
                {
                    return _createRemoteServiceBinding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_resource_pool 
        /// </summary>
        public partial class AstSqlClause77 : AstSqlClause
        {
            
            private AstCreateResourcePool _createResourcePool;
            
            internal AstSqlClause77(ParserRuleContext ctx, AstCreateResourcePool createResourcePool) : 
                    base(ctx)
            {
                _createResourcePool = createResourcePool;
            }
            
            public virtual AstCreateResourcePool CreateResourcePool
            {
                get
                {
                    return _createResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_route 
        /// </summary>
        public partial class AstSqlClause78 : AstSqlClause
        {
            
            private AstCreateRoute _createRoute;
            
            internal AstSqlClause78(ParserRuleContext ctx, AstCreateRoute createRoute) : 
                    base(ctx)
            {
                _createRoute = createRoute;
            }
            
            public virtual AstCreateRoute CreateRoute
            {
                get
                {
                    return _createRoute;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_rule 
        /// </summary>
        public partial class AstSqlClause79 : AstSqlClause
        {
            
            private AstCreateRule _createRule;
            
            internal AstSqlClause79(ParserRuleContext ctx, AstCreateRule createRule) : 
                    base(ctx)
            {
                _createRule = createRule;
            }
            
            public virtual AstCreateRule CreateRule
            {
                get
                {
                    return _createRule;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_schema 
        /// </summary>
        public partial class AstSqlClause80 : AstSqlClause
        {
            
            private AstCreateSchema _createSchema;
            
            internal AstSqlClause80(ParserRuleContext ctx, AstCreateSchema createSchema) : 
                    base(ctx)
            {
                _createSchema = createSchema;
            }
            
            public virtual AstCreateSchema CreateSchema
            {
                get
                {
                    return _createSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause81 : AstSqlClause
        {
            
            private AstCreateSchemaAzureSqlDwAndPdw _createSchemaAzureSqlDwAndPdw;
            
            internal AstSqlClause81(ParserRuleContext ctx, AstCreateSchemaAzureSqlDwAndPdw createSchemaAzureSqlDwAndPdw) : 
                    base(ctx)
            {
                _createSchemaAzureSqlDwAndPdw = createSchemaAzureSqlDwAndPdw;
            }
            
            public virtual AstCreateSchemaAzureSqlDwAndPdw CreateSchemaAzureSqlDwAndPdw
            {
                get
                {
                    return _createSchemaAzureSqlDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_search_property_list 
        /// </summary>
        public partial class AstSqlClause82 : AstSqlClause
        {
            
            private AstCreateSearchPropertyList _createSearchPropertyList;
            
            internal AstSqlClause82(ParserRuleContext ctx, AstCreateSearchPropertyList createSearchPropertyList) : 
                    base(ctx)
            {
                _createSearchPropertyList = createSearchPropertyList;
            }
            
            public virtual AstCreateSearchPropertyList CreateSearchPropertyList
            {
                get
                {
                    return _createSearchPropertyList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_security_policy 
        /// </summary>
        public partial class AstSqlClause83 : AstSqlClause
        {
            
            private AstCreateSecurityPolicy _createSecurityPolicy;
            
            internal AstSqlClause83(ParserRuleContext ctx, AstCreateSecurityPolicy createSecurityPolicy) : 
                    base(ctx)
            {
                _createSecurityPolicy = createSecurityPolicy;
            }
            
            public virtual AstCreateSecurityPolicy CreateSecurityPolicy
            {
                get
                {
                    return _createSecurityPolicy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_sequence 
        /// </summary>
        public partial class AstSqlClause84 : AstSqlClause
        {
            
            private AstCreateSequence _createSequence;
            
            internal AstSqlClause84(ParserRuleContext ctx, AstCreateSequence createSequence) : 
                    base(ctx)
            {
                _createSequence = createSequence;
            }
            
            public virtual AstCreateSequence CreateSequence
            {
                get
                {
                    return _createSequence;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_server_audit 
        /// </summary>
        public partial class AstSqlClause85 : AstSqlClause
        {
            
            private AstCreateServerAudit _createServerAudit;
            
            internal AstSqlClause85(ParserRuleContext ctx, AstCreateServerAudit createServerAudit) : 
                    base(ctx)
            {
                _createServerAudit = createServerAudit;
            }
            
            public virtual AstCreateServerAudit CreateServerAudit
            {
                get
                {
                    return _createServerAudit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_server_audit_specification 
        /// </summary>
        public partial class AstSqlClause86 : AstSqlClause
        {
            
            private AstCreateServerAuditSpecification _createServerAuditSpecification;
            
            internal AstSqlClause86(ParserRuleContext ctx, AstCreateServerAuditSpecification createServerAuditSpecification) : 
                    base(ctx)
            {
                _createServerAuditSpecification = createServerAuditSpecification;
            }
            
            public virtual AstCreateServerAuditSpecification CreateServerAuditSpecification
            {
                get
                {
                    return _createServerAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_server_role 
        /// </summary>
        public partial class AstSqlClause87 : AstSqlClause
        {
            
            private AstCreateServerRole _createServerRole;
            
            internal AstSqlClause87(ParserRuleContext ctx, AstCreateServerRole createServerRole) : 
                    base(ctx)
            {
                _createServerRole = createServerRole;
            }
            
            public virtual AstCreateServerRole CreateServerRole
            {
                get
                {
                    return _createServerRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_service 
        /// </summary>
        public partial class AstSqlClause88 : AstSqlClause
        {
            
            private AstCreateService _createService;
            
            internal AstSqlClause88(ParserRuleContext ctx, AstCreateService createService) : 
                    base(ctx)
            {
                _createService = createService;
            }
            
            public virtual AstCreateService CreateService
            {
                get
                {
                    return _createService;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_statistics 
        /// </summary>
        public partial class AstSqlClause89 : AstSqlClause
        {
            
            private AstCreateStatistics _createStatistics;
            
            internal AstSqlClause89(ParserRuleContext ctx, AstCreateStatistics createStatistics) : 
                    base(ctx)
            {
                _createStatistics = createStatistics;
            }
            
            public virtual AstCreateStatistics CreateStatistics
            {
                get
                {
                    return _createStatistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_synonym 
        /// </summary>
        public partial class AstSqlClause90 : AstSqlClause
        {
            
            private AstCreateSynonym _createSynonym;
            
            internal AstSqlClause90(ParserRuleContext ctx, AstCreateSynonym createSynonym) : 
                    base(ctx)
            {
                _createSynonym = createSynonym;
            }
            
            public virtual AstCreateSynonym CreateSynonym
            {
                get
                {
                    return _createSynonym;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_table 
        /// </summary>
        public partial class AstSqlClause91 : AstSqlClause
        {
            
            private AstCreateTable _createTable;
            
            internal AstSqlClause91(ParserRuleContext ctx, AstCreateTable createTable) : 
                    base(ctx)
            {
                _createTable = createTable;
            }
            
            public virtual AstCreateTable CreateTable
            {
                get
                {
                    return _createTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_type 
        /// </summary>
        public partial class AstSqlClause92 : AstSqlClause
        {
            
            private AstCreateType _createType;
            
            internal AstSqlClause92(ParserRuleContext ctx, AstCreateType createType) : 
                    base(ctx)
            {
                _createType = createType;
            }
            
            public virtual AstCreateType CreateType
            {
                get
                {
                    return _createType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_user 
        /// </summary>
        public partial class AstSqlClause93 : AstSqlClause
        {
            
            private AstCreateUser _createUser;
            
            internal AstSqlClause93(ParserRuleContext ctx, AstCreateUser createUser) : 
                    base(ctx)
            {
                _createUser = createUser;
            }
            
            public virtual AstCreateUser CreateUser
            {
                get
                {
                    return _createUser;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_user_azure_sql_dw 
        /// </summary>
        public partial class AstSqlClause94 : AstSqlClause
        {
            
            private AstCreateUserAzureSqlDw _createUserAzureSqlDw;
            
            internal AstSqlClause94(ParserRuleContext ctx, AstCreateUserAzureSqlDw createUserAzureSqlDw) : 
                    base(ctx)
            {
                _createUserAzureSqlDw = createUserAzureSqlDw;
            }
            
            public virtual AstCreateUserAzureSqlDw CreateUserAzureSqlDw
            {
                get
                {
                    return _createUserAzureSqlDw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_workload_group 
        /// </summary>
        public partial class AstSqlClause95 : AstSqlClause
        {
            
            private AstCreateWorkloadGroup _createWorkloadGroup;
            
            internal AstSqlClause95(ParserRuleContext ctx, AstCreateWorkloadGroup createWorkloadGroup) : 
                    base(ctx)
            {
                _createWorkloadGroup = createWorkloadGroup;
            }
            
            public virtual AstCreateWorkloadGroup CreateWorkloadGroup
            {
                get
                {
                    return _createWorkloadGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_xml_index 
        /// </summary>
        public partial class AstSqlClause96 : AstSqlClause
        {
            
            private AstCreateXmlIndex _createXmlIndex;
            
            internal AstSqlClause96(ParserRuleContext ctx, AstCreateXmlIndex createXmlIndex) : 
                    base(ctx)
            {
                _createXmlIndex = createXmlIndex;
            }
            
            public virtual AstCreateXmlIndex CreateXmlIndex
            {
                get
                {
                    return _createXmlIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_xml_schema_collection 
        /// </summary>
        public partial class AstSqlClause97 : AstSqlClause
        {
            
            private AstCreateXmlSchemaCollection _createXmlSchemaCollection;
            
            internal AstSqlClause97(ParserRuleContext ctx, AstCreateXmlSchemaCollection createXmlSchemaCollection) : 
                    base(ctx)
            {
                _createXmlSchemaCollection = createXmlSchemaCollection;
            }
            
            public virtual AstCreateXmlSchemaCollection CreateXmlSchemaCollection
            {
                get
                {
                    return _createXmlSchemaCollection;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_partition_function 
        /// </summary>
        public partial class AstSqlClause98 : AstSqlClause
        {
            
            private AstCreatePartitionFunction _createPartitionFunction;
            
            internal AstSqlClause98(ParserRuleContext ctx, AstCreatePartitionFunction createPartitionFunction) : 
                    base(ctx)
            {
                _createPartitionFunction = createPartitionFunction;
            }
            
            public virtual AstCreatePartitionFunction CreatePartitionFunction
            {
                get
                {
                    return _createPartitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_partition_scheme 
        /// </summary>
        public partial class AstSqlClause99 : AstSqlClause
        {
            
            private AstCreatePartitionScheme _createPartitionScheme;
            
            internal AstSqlClause99(ParserRuleContext ctx, AstCreatePartitionScheme createPartitionScheme) : 
                    base(ctx)
            {
                _createPartitionScheme = createPartitionScheme;
            }
            
            public virtual AstCreatePartitionScheme CreatePartitionScheme
            {
                get
                {
                    return _createPartitionScheme;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_aggregate 
        /// </summary>
        public partial class AstSqlClause100 : AstSqlClause
        {
            
            private AstDropAggregate _dropAggregate;
            
            internal AstSqlClause100(ParserRuleContext ctx, AstDropAggregate dropAggregate) : 
                    base(ctx)
            {
                _dropAggregate = dropAggregate;
            }
            
            public virtual AstDropAggregate DropAggregate
            {
                get
                {
                    return _dropAggregate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_application_role 
        /// </summary>
        public partial class AstSqlClause101 : AstSqlClause
        {
            
            private AstDropApplicationRole _dropApplicationRole;
            
            internal AstSqlClause101(ParserRuleContext ctx, AstDropApplicationRole dropApplicationRole) : 
                    base(ctx)
            {
                _dropApplicationRole = dropApplicationRole;
            }
            
            public virtual AstDropApplicationRole DropApplicationRole
            {
                get
                {
                    return _dropApplicationRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_assembly 
        /// </summary>
        public partial class AstSqlClause102 : AstSqlClause
        {
            
            private AstDropAssembly _dropAssembly;
            
            internal AstSqlClause102(ParserRuleContext ctx, AstDropAssembly dropAssembly) : 
                    base(ctx)
            {
                _dropAssembly = dropAssembly;
            }
            
            public virtual AstDropAssembly DropAssembly
            {
                get
                {
                    return _dropAssembly;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_asymmetric_key 
        /// </summary>
        public partial class AstSqlClause103 : AstSqlClause
        {
            
            private AstDropAsymmetricKey _dropAsymmetricKey;
            
            internal AstSqlClause103(ParserRuleContext ctx, AstDropAsymmetricKey dropAsymmetricKey) : 
                    base(ctx)
            {
                _dropAsymmetricKey = dropAsymmetricKey;
            }
            
            public virtual AstDropAsymmetricKey DropAsymmetricKey
            {
                get
                {
                    return _dropAsymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_availability_group 
        /// </summary>
        public partial class AstSqlClause104 : AstSqlClause
        {
            
            private AstDropAvailabilityGroup _dropAvailabilityGroup;
            
            internal AstSqlClause104(ParserRuleContext ctx, AstDropAvailabilityGroup dropAvailabilityGroup) : 
                    base(ctx)
            {
                _dropAvailabilityGroup = dropAvailabilityGroup;
            }
            
            public virtual AstDropAvailabilityGroup DropAvailabilityGroup
            {
                get
                {
                    return _dropAvailabilityGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_broker_priority 
        /// </summary>
        public partial class AstSqlClause105 : AstSqlClause
        {
            
            private AstDropBrokerPriority _dropBrokerPriority;
            
            internal AstSqlClause105(ParserRuleContext ctx, AstDropBrokerPriority dropBrokerPriority) : 
                    base(ctx)
            {
                _dropBrokerPriority = dropBrokerPriority;
            }
            
            public virtual AstDropBrokerPriority DropBrokerPriority
            {
                get
                {
                    return _dropBrokerPriority;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_certificate 
        /// </summary>
        public partial class AstSqlClause106 : AstSqlClause
        {
            
            private AstDropCertificate _dropCertificate;
            
            internal AstSqlClause106(ParserRuleContext ctx, AstDropCertificate dropCertificate) : 
                    base(ctx)
            {
                _dropCertificate = dropCertificate;
            }
            
            public virtual AstDropCertificate DropCertificate
            {
                get
                {
                    return _dropCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_column_encryption_key 
        /// </summary>
        public partial class AstSqlClause107 : AstSqlClause
        {
            
            private AstDropColumnEncryptionKey _dropColumnEncryptionKey;
            
            internal AstSqlClause107(ParserRuleContext ctx, AstDropColumnEncryptionKey dropColumnEncryptionKey) : 
                    base(ctx)
            {
                _dropColumnEncryptionKey = dropColumnEncryptionKey;
            }
            
            public virtual AstDropColumnEncryptionKey DropColumnEncryptionKey
            {
                get
                {
                    return _dropColumnEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_column_master_key 
        /// </summary>
        public partial class AstSqlClause108 : AstSqlClause
        {
            
            private AstDropColumnMasterKey _dropColumnMasterKey;
            
            internal AstSqlClause108(ParserRuleContext ctx, AstDropColumnMasterKey dropColumnMasterKey) : 
                    base(ctx)
            {
                _dropColumnMasterKey = dropColumnMasterKey;
            }
            
            public virtual AstDropColumnMasterKey DropColumnMasterKey
            {
                get
                {
                    return _dropColumnMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_contract 
        /// </summary>
        public partial class AstSqlClause109 : AstSqlClause
        {
            
            private AstDropContract _dropContract;
            
            internal AstSqlClause109(ParserRuleContext ctx, AstDropContract dropContract) : 
                    base(ctx)
            {
                _dropContract = dropContract;
            }
            
            public virtual AstDropContract DropContract
            {
                get
                {
                    return _dropContract;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_credential 
        /// </summary>
        public partial class AstSqlClause110 : AstSqlClause
        {
            
            private AstDropCredential _dropCredential;
            
            internal AstSqlClause110(ParserRuleContext ctx, AstDropCredential dropCredential) : 
                    base(ctx)
            {
                _dropCredential = dropCredential;
            }
            
            public virtual AstDropCredential DropCredential
            {
                get
                {
                    return _dropCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_cryptograhic_provider 
        /// </summary>
        public partial class AstSqlClause111 : AstSqlClause
        {
            
            private AstDropCryptograhicProvider _dropCryptograhicProvider;
            
            internal AstSqlClause111(ParserRuleContext ctx, AstDropCryptograhicProvider dropCryptograhicProvider) : 
                    base(ctx)
            {
                _dropCryptograhicProvider = dropCryptograhicProvider;
            }
            
            public virtual AstDropCryptograhicProvider DropCryptograhicProvider
            {
                get
                {
                    return _dropCryptograhicProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database 
        /// </summary>
        public partial class AstSqlClause112 : AstSqlClause
        {
            
            private AstDropDatabase _dropDatabase;
            
            internal AstSqlClause112(ParserRuleContext ctx, AstDropDatabase dropDatabase) : 
                    base(ctx)
            {
                _dropDatabase = dropDatabase;
            }
            
            public virtual AstDropDatabase DropDatabase
            {
                get
                {
                    return _dropDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database_audit_specification 
        /// </summary>
        public partial class AstSqlClause113 : AstSqlClause
        {
            
            private AstDropDatabaseAuditSpecification _dropDatabaseAuditSpecification;
            
            internal AstSqlClause113(ParserRuleContext ctx, AstDropDatabaseAuditSpecification dropDatabaseAuditSpecification) : 
                    base(ctx)
            {
                _dropDatabaseAuditSpecification = dropDatabaseAuditSpecification;
            }
            
            public virtual AstDropDatabaseAuditSpecification DropDatabaseAuditSpecification
            {
                get
                {
                    return _dropDatabaseAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database_encryption_key 
        /// </summary>
        public partial class AstSqlClause114 : AstSqlClause
        {
            
            private AstDropDatabaseEncryptionKey _dropDatabaseEncryptionKey;
            
            internal AstSqlClause114(ParserRuleContext ctx, AstDropDatabaseEncryptionKey dropDatabaseEncryptionKey) : 
                    base(ctx)
            {
                _dropDatabaseEncryptionKey = dropDatabaseEncryptionKey;
            }
            
            public virtual AstDropDatabaseEncryptionKey DropDatabaseEncryptionKey
            {
                get
                {
                    return _dropDatabaseEncryptionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_database_scoped_credential 
        /// </summary>
        public partial class AstSqlClause115 : AstSqlClause
        {
            
            private AstDropDatabaseScopedCredential _dropDatabaseScopedCredential;
            
            internal AstSqlClause115(ParserRuleContext ctx, AstDropDatabaseScopedCredential dropDatabaseScopedCredential) : 
                    base(ctx)
            {
                _dropDatabaseScopedCredential = dropDatabaseScopedCredential;
            }
            
            public virtual AstDropDatabaseScopedCredential DropDatabaseScopedCredential
            {
                get
                {
                    return _dropDatabaseScopedCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_db_role 
        /// </summary>
        public partial class AstSqlClause116 : AstSqlClause
        {
            
            private AstDropDbRole _dropDbRole;
            
            internal AstSqlClause116(ParserRuleContext ctx, AstDropDbRole dropDbRole) : 
                    base(ctx)
            {
                _dropDbRole = dropDbRole;
            }
            
            public virtual AstDropDbRole DropDbRole
            {
                get
                {
                    return _dropDbRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_default 
        /// </summary>
        public partial class AstSqlClause117 : AstSqlClause
        {
            
            private AstDropDefault _dropDefault;
            
            internal AstSqlClause117(ParserRuleContext ctx, AstDropDefault dropDefault) : 
                    base(ctx)
            {
                _dropDefault = dropDefault;
            }
            
            public virtual AstDropDefault DropDefault
            {
                get
                {
                    return _dropDefault;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_endpoint 
        /// </summary>
        public partial class AstSqlClause118 : AstSqlClause
        {
            
            private AstDropEndpoint _dropEndpoint;
            
            internal AstSqlClause118(ParserRuleContext ctx, AstDropEndpoint dropEndpoint) : 
                    base(ctx)
            {
                _dropEndpoint = dropEndpoint;
            }
            
            public virtual AstDropEndpoint DropEndpoint
            {
                get
                {
                    return _dropEndpoint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_event_notifications 
        /// </summary>
        public partial class AstSqlClause119 : AstSqlClause
        {
            
            private AstDropEventNotifications _dropEventNotifications;
            
            internal AstSqlClause119(ParserRuleContext ctx, AstDropEventNotifications dropEventNotifications) : 
                    base(ctx)
            {
                _dropEventNotifications = dropEventNotifications;
            }
            
            public virtual AstDropEventNotifications DropEventNotifications
            {
                get
                {
                    return _dropEventNotifications;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_event_session 
        /// </summary>
        public partial class AstSqlClause120 : AstSqlClause
        {
            
            private AstDropEventSession _dropEventSession;
            
            internal AstSqlClause120(ParserRuleContext ctx, AstDropEventSession dropEventSession) : 
                    base(ctx)
            {
                _dropEventSession = dropEventSession;
            }
            
            public virtual AstDropEventSession DropEventSession
            {
                get
                {
                    return _dropEventSession;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_data_source 
        /// </summary>
        public partial class AstSqlClause121 : AstSqlClause
        {
            
            private AstDropExternalDataSource _dropExternalDataSource;
            
            internal AstSqlClause121(ParserRuleContext ctx, AstDropExternalDataSource dropExternalDataSource) : 
                    base(ctx)
            {
                _dropExternalDataSource = dropExternalDataSource;
            }
            
            public virtual AstDropExternalDataSource DropExternalDataSource
            {
                get
                {
                    return _dropExternalDataSource;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_file_format 
        /// </summary>
        public partial class AstSqlClause122 : AstSqlClause
        {
            
            private AstDropExternalFileFormat _dropExternalFileFormat;
            
            internal AstSqlClause122(ParserRuleContext ctx, AstDropExternalFileFormat dropExternalFileFormat) : 
                    base(ctx)
            {
                _dropExternalFileFormat = dropExternalFileFormat;
            }
            
            public virtual AstDropExternalFileFormat DropExternalFileFormat
            {
                get
                {
                    return _dropExternalFileFormat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_library 
        /// </summary>
        public partial class AstSqlClause123 : AstSqlClause
        {
            
            private AstDropExternalLibrary _dropExternalLibrary;
            
            internal AstSqlClause123(ParserRuleContext ctx, AstDropExternalLibrary dropExternalLibrary) : 
                    base(ctx)
            {
                _dropExternalLibrary = dropExternalLibrary;
            }
            
            public virtual AstDropExternalLibrary DropExternalLibrary
            {
                get
                {
                    return _dropExternalLibrary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_resource_pool 
        /// </summary>
        public partial class AstSqlClause124 : AstSqlClause
        {
            
            private AstDropExternalResourcePool _dropExternalResourcePool;
            
            internal AstSqlClause124(ParserRuleContext ctx, AstDropExternalResourcePool dropExternalResourcePool) : 
                    base(ctx)
            {
                _dropExternalResourcePool = dropExternalResourcePool;
            }
            
            public virtual AstDropExternalResourcePool DropExternalResourcePool
            {
                get
                {
                    return _dropExternalResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_external_table 
        /// </summary>
        public partial class AstSqlClause125 : AstSqlClause
        {
            
            private AstDropExternalTable _dropExternalTable;
            
            internal AstSqlClause125(ParserRuleContext ctx, AstDropExternalTable dropExternalTable) : 
                    base(ctx)
            {
                _dropExternalTable = dropExternalTable;
            }
            
            public virtual AstDropExternalTable DropExternalTable
            {
                get
                {
                    return _dropExternalTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_fulltext_catalog 
        /// </summary>
        public partial class AstSqlClause126 : AstSqlClause
        {
            
            private AstDropFulltextCatalog _dropFulltextCatalog;
            
            internal AstSqlClause126(ParserRuleContext ctx, AstDropFulltextCatalog dropFulltextCatalog) : 
                    base(ctx)
            {
                _dropFulltextCatalog = dropFulltextCatalog;
            }
            
            public virtual AstDropFulltextCatalog DropFulltextCatalog
            {
                get
                {
                    return _dropFulltextCatalog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_fulltext_index 
        /// </summary>
        public partial class AstSqlClause127 : AstSqlClause
        {
            
            private AstDropFulltextIndex _dropFulltextIndex;
            
            internal AstSqlClause127(ParserRuleContext ctx, AstDropFulltextIndex dropFulltextIndex) : 
                    base(ctx)
            {
                _dropFulltextIndex = dropFulltextIndex;
            }
            
            public virtual AstDropFulltextIndex DropFulltextIndex
            {
                get
                {
                    return _dropFulltextIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_fulltext_stoplist 
        /// </summary>
        public partial class AstSqlClause128 : AstSqlClause
        {
            
            private AstDropFulltextStoplist _dropFulltextStoplist;
            
            internal AstSqlClause128(ParserRuleContext ctx, AstDropFulltextStoplist dropFulltextStoplist) : 
                    base(ctx)
            {
                _dropFulltextStoplist = dropFulltextStoplist;
            }
            
            public virtual AstDropFulltextStoplist DropFulltextStoplist
            {
                get
                {
                    return _dropFulltextStoplist;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_function 
        /// </summary>
        public partial class AstSqlClause129 : AstSqlClause
        {
            
            private AstDropFunction _dropFunction;
            
            internal AstSqlClause129(ParserRuleContext ctx, AstDropFunction dropFunction) : 
                    base(ctx)
            {
                _dropFunction = dropFunction;
            }
            
            public virtual AstDropFunction DropFunction
            {
                get
                {
                    return _dropFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_index 
        /// </summary>
        public partial class AstSqlClause130 : AstSqlClause
        {
            
            private AstDropIndex _dropIndex;
            
            internal AstSqlClause130(ParserRuleContext ctx, AstDropIndex dropIndex) : 
                    base(ctx)
            {
                _dropIndex = dropIndex;
            }
            
            public virtual AstDropIndex DropIndex
            {
                get
                {
                    return _dropIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_login 
        /// </summary>
        public partial class AstSqlClause131 : AstSqlClause
        {
            
            private AstDropLogin _dropLogin;
            
            internal AstSqlClause131(ParserRuleContext ctx, AstDropLogin dropLogin) : 
                    base(ctx)
            {
                _dropLogin = dropLogin;
            }
            
            public virtual AstDropLogin DropLogin
            {
                get
                {
                    return _dropLogin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_master_key 
        /// </summary>
        public partial class AstSqlClause132 : AstSqlClause
        {
            
            private AstDropMasterKey _dropMasterKey;
            
            internal AstSqlClause132(ParserRuleContext ctx, AstDropMasterKey dropMasterKey) : 
                    base(ctx)
            {
                _dropMasterKey = dropMasterKey;
            }
            
            public virtual AstDropMasterKey DropMasterKey
            {
                get
                {
                    return _dropMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_message_type 
        /// </summary>
        public partial class AstSqlClause133 : AstSqlClause
        {
            
            private AstDropMessageType _dropMessageType;
            
            internal AstSqlClause133(ParserRuleContext ctx, AstDropMessageType dropMessageType) : 
                    base(ctx)
            {
                _dropMessageType = dropMessageType;
            }
            
            public virtual AstDropMessageType DropMessageType
            {
                get
                {
                    return _dropMessageType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_partition_function 
        /// </summary>
        public partial class AstSqlClause134 : AstSqlClause
        {
            
            private AstDropPartitionFunction _dropPartitionFunction;
            
            internal AstSqlClause134(ParserRuleContext ctx, AstDropPartitionFunction dropPartitionFunction) : 
                    base(ctx)
            {
                _dropPartitionFunction = dropPartitionFunction;
            }
            
            public virtual AstDropPartitionFunction DropPartitionFunction
            {
                get
                {
                    return _dropPartitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_partition_scheme 
        /// </summary>
        public partial class AstSqlClause135 : AstSqlClause
        {
            
            private AstDropPartitionScheme _dropPartitionScheme;
            
            internal AstSqlClause135(ParserRuleContext ctx, AstDropPartitionScheme dropPartitionScheme) : 
                    base(ctx)
            {
                _dropPartitionScheme = dropPartitionScheme;
            }
            
            public virtual AstDropPartitionScheme DropPartitionScheme
            {
                get
                {
                    return _dropPartitionScheme;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_procedure 
        /// </summary>
        public partial class AstSqlClause136 : AstSqlClause
        {
            
            private AstDropProcedure _dropProcedure;
            
            internal AstSqlClause136(ParserRuleContext ctx, AstDropProcedure dropProcedure) : 
                    base(ctx)
            {
                _dropProcedure = dropProcedure;
            }
            
            public virtual AstDropProcedure DropProcedure
            {
                get
                {
                    return _dropProcedure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_queue 
        /// </summary>
        public partial class AstSqlClause137 : AstSqlClause
        {
            
            private AstDropQueue _dropQueue;
            
            internal AstSqlClause137(ParserRuleContext ctx, AstDropQueue dropQueue) : 
                    base(ctx)
            {
                _dropQueue = dropQueue;
            }
            
            public virtual AstDropQueue DropQueue
            {
                get
                {
                    return _dropQueue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_remote_service_binding 
        /// </summary>
        public partial class AstSqlClause138 : AstSqlClause
        {
            
            private AstDropRemoteServiceBinding _dropRemoteServiceBinding;
            
            internal AstSqlClause138(ParserRuleContext ctx, AstDropRemoteServiceBinding dropRemoteServiceBinding) : 
                    base(ctx)
            {
                _dropRemoteServiceBinding = dropRemoteServiceBinding;
            }
            
            public virtual AstDropRemoteServiceBinding DropRemoteServiceBinding
            {
                get
                {
                    return _dropRemoteServiceBinding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_resource_pool 
        /// </summary>
        public partial class AstSqlClause139 : AstSqlClause
        {
            
            private AstDropResourcePool _dropResourcePool;
            
            internal AstSqlClause139(ParserRuleContext ctx, AstDropResourcePool dropResourcePool) : 
                    base(ctx)
            {
                _dropResourcePool = dropResourcePool;
            }
            
            public virtual AstDropResourcePool DropResourcePool
            {
                get
                {
                    return _dropResourcePool;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_route 
        /// </summary>
        public partial class AstSqlClause140 : AstSqlClause
        {
            
            private AstDropRoute _dropRoute;
            
            internal AstSqlClause140(ParserRuleContext ctx, AstDropRoute dropRoute) : 
                    base(ctx)
            {
                _dropRoute = dropRoute;
            }
            
            public virtual AstDropRoute DropRoute
            {
                get
                {
                    return _dropRoute;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_rule 
        /// </summary>
        public partial class AstSqlClause141 : AstSqlClause
        {
            
            private AstDropRule _dropRule;
            
            internal AstSqlClause141(ParserRuleContext ctx, AstDropRule dropRule) : 
                    base(ctx)
            {
                _dropRule = dropRule;
            }
            
            public virtual AstDropRule DropRule
            {
                get
                {
                    return _dropRule;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_schema 
        /// </summary>
        public partial class AstSqlClause142 : AstSqlClause
        {
            
            private AstDropSchema _dropSchema;
            
            internal AstSqlClause142(ParserRuleContext ctx, AstDropSchema dropSchema) : 
                    base(ctx)
            {
                _dropSchema = dropSchema;
            }
            
            public virtual AstDropSchema DropSchema
            {
                get
                {
                    return _dropSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_search_property_list 
        /// </summary>
        public partial class AstSqlClause143 : AstSqlClause
        {
            
            private AstDropSearchPropertyList _dropSearchPropertyList;
            
            internal AstSqlClause143(ParserRuleContext ctx, AstDropSearchPropertyList dropSearchPropertyList) : 
                    base(ctx)
            {
                _dropSearchPropertyList = dropSearchPropertyList;
            }
            
            public virtual AstDropSearchPropertyList DropSearchPropertyList
            {
                get
                {
                    return _dropSearchPropertyList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_security_policy 
        /// </summary>
        public partial class AstSqlClause144 : AstSqlClause
        {
            
            private AstDropSecurityPolicy _dropSecurityPolicy;
            
            internal AstSqlClause144(ParserRuleContext ctx, AstDropSecurityPolicy dropSecurityPolicy) : 
                    base(ctx)
            {
                _dropSecurityPolicy = dropSecurityPolicy;
            }
            
            public virtual AstDropSecurityPolicy DropSecurityPolicy
            {
                get
                {
                    return _dropSecurityPolicy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_sequence 
        /// </summary>
        public partial class AstSqlClause145 : AstSqlClause
        {
            
            private AstDropSequence _dropSequence;
            
            internal AstSqlClause145(ParserRuleContext ctx, AstDropSequence dropSequence) : 
                    base(ctx)
            {
                _dropSequence = dropSequence;
            }
            
            public virtual AstDropSequence DropSequence
            {
                get
                {
                    return _dropSequence;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_server_audit 
        /// </summary>
        public partial class AstSqlClause146 : AstSqlClause
        {
            
            private AstDropServerAudit _dropServerAudit;
            
            internal AstSqlClause146(ParserRuleContext ctx, AstDropServerAudit dropServerAudit) : 
                    base(ctx)
            {
                _dropServerAudit = dropServerAudit;
            }
            
            public virtual AstDropServerAudit DropServerAudit
            {
                get
                {
                    return _dropServerAudit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_server_audit_specification 
        /// </summary>
        public partial class AstSqlClause147 : AstSqlClause
        {
            
            private AstDropServerAuditSpecification _dropServerAuditSpecification;
            
            internal AstSqlClause147(ParserRuleContext ctx, AstDropServerAuditSpecification dropServerAuditSpecification) : 
                    base(ctx)
            {
                _dropServerAuditSpecification = dropServerAuditSpecification;
            }
            
            public virtual AstDropServerAuditSpecification DropServerAuditSpecification
            {
                get
                {
                    return _dropServerAuditSpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_server_role 
        /// </summary>
        public partial class AstSqlClause148 : AstSqlClause
        {
            
            private AstDropServerRole _dropServerRole;
            
            internal AstSqlClause148(ParserRuleContext ctx, AstDropServerRole dropServerRole) : 
                    base(ctx)
            {
                _dropServerRole = dropServerRole;
            }
            
            public virtual AstDropServerRole DropServerRole
            {
                get
                {
                    return _dropServerRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_service 
        /// </summary>
        public partial class AstSqlClause149 : AstSqlClause
        {
            
            private AstDropService _dropService;
            
            internal AstSqlClause149(ParserRuleContext ctx, AstDropService dropService) : 
                    base(ctx)
            {
                _dropService = dropService;
            }
            
            public virtual AstDropService DropService
            {
                get
                {
                    return _dropService;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_signature 
        /// </summary>
        public partial class AstSqlClause150 : AstSqlClause
        {
            
            private AstDropSignature _dropSignature;
            
            internal AstSqlClause150(ParserRuleContext ctx, AstDropSignature dropSignature) : 
                    base(ctx)
            {
                _dropSignature = dropSignature;
            }
            
            public virtual AstDropSignature DropSignature
            {
                get
                {
                    return _dropSignature;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_statistics 
        /// </summary>
        public partial class AstSqlClause151 : AstSqlClause
        {
            
            private AstDropStatistics _dropStatistics;
            
            internal AstSqlClause151(ParserRuleContext ctx, AstDropStatistics dropStatistics) : 
                    base(ctx)
            {
                _dropStatistics = dropStatistics;
            }
            
            public virtual AstDropStatistics DropStatistics
            {
                get
                {
                    return _dropStatistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_statistics_id_azure_dw_and_pdw 
        /// </summary>
        public partial class AstSqlClause152 : AstSqlClause
        {
            
            private AstDropStatisticsIdAzureDwAndPdw _dropStatisticsIdAzureDwAndPdw;
            
            internal AstSqlClause152(ParserRuleContext ctx, AstDropStatisticsIdAzureDwAndPdw dropStatisticsIdAzureDwAndPdw) : 
                    base(ctx)
            {
                _dropStatisticsIdAzureDwAndPdw = dropStatisticsIdAzureDwAndPdw;
            }
            
            public virtual AstDropStatisticsIdAzureDwAndPdw DropStatisticsIdAzureDwAndPdw
            {
                get
                {
                    return _dropStatisticsIdAzureDwAndPdw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_symmetric_key 
        /// </summary>
        public partial class AstSqlClause153 : AstSqlClause
        {
            
            private AstDropSymmetricKey _dropSymmetricKey;
            
            internal AstSqlClause153(ParserRuleContext ctx, AstDropSymmetricKey dropSymmetricKey) : 
                    base(ctx)
            {
                _dropSymmetricKey = dropSymmetricKey;
            }
            
            public virtual AstDropSymmetricKey DropSymmetricKey
            {
                get
                {
                    return _dropSymmetricKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_synonym 
        /// </summary>
        public partial class AstSqlClause154 : AstSqlClause
        {
            
            private AstDropSynonym _dropSynonym;
            
            internal AstSqlClause154(ParserRuleContext ctx, AstDropSynonym dropSynonym) : 
                    base(ctx)
            {
                _dropSynonym = dropSynonym;
            }
            
            public virtual AstDropSynonym DropSynonym
            {
                get
                {
                    return _dropSynonym;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_table 
        /// </summary>
        public partial class AstSqlClause155 : AstSqlClause
        {
            
            private AstDropTable _dropTable;
            
            internal AstSqlClause155(ParserRuleContext ctx, AstDropTable dropTable) : 
                    base(ctx)
            {
                _dropTable = dropTable;
            }
            
            public virtual AstDropTable DropTable
            {
                get
                {
                    return _dropTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_dml_trigger 
        /// </summary>
        public partial class AstSqlClause156 : AstSqlClause
        {
            
            private AstDropDmlTrigger _dropDmlTrigger;
            
            internal AstSqlClause156(ParserRuleContext ctx, AstDropDmlTrigger dropDmlTrigger) : 
                    base(ctx)
            {
                _dropDmlTrigger = dropDmlTrigger;
            }
            
            public virtual AstDropDmlTrigger DropDmlTrigger
            {
                get
                {
                    return _dropDmlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_ddl_trigger 
        /// </summary>
        public partial class AstSqlClause157 : AstSqlClause
        {
            
            private AstDropDdlTrigger _dropDdlTrigger;
            
            internal AstSqlClause157(ParserRuleContext ctx, AstDropDdlTrigger dropDdlTrigger) : 
                    base(ctx)
            {
                _dropDdlTrigger = dropDdlTrigger;
            }
            
            public virtual AstDropDdlTrigger DropDdlTrigger
            {
                get
                {
                    return _dropDdlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_type 
        /// </summary>
        public partial class AstSqlClause158 : AstSqlClause
        {
            
            private AstDropType _dropType;
            
            internal AstSqlClause158(ParserRuleContext ctx, AstDropType dropType) : 
                    base(ctx)
            {
                _dropType = dropType;
            }
            
            public virtual AstDropType DropType
            {
                get
                {
                    return _dropType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_user 
        /// </summary>
        public partial class AstSqlClause159 : AstSqlClause
        {
            
            private AstDropUser _dropUser;
            
            internal AstSqlClause159(ParserRuleContext ctx, AstDropUser dropUser) : 
                    base(ctx)
            {
                _dropUser = dropUser;
            }
            
            public virtual AstDropUser DropUser
            {
                get
                {
                    return _dropUser;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_view 
        /// </summary>
        public partial class AstSqlClause160 : AstSqlClause
        {
            
            private AstDropView _dropView;
            
            internal AstSqlClause160(ParserRuleContext ctx, AstDropView dropView) : 
                    base(ctx)
            {
                _dropView = dropView;
            }
            
            public virtual AstDropView DropView
            {
                get
                {
                    return _dropView;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_workload_group 
        /// </summary>
        public partial class AstSqlClause161 : AstSqlClause
        {
            
            private AstDropWorkloadGroup _dropWorkloadGroup;
            
            internal AstSqlClause161(ParserRuleContext ctx, AstDropWorkloadGroup dropWorkloadGroup) : 
                    base(ctx)
            {
                _dropWorkloadGroup = dropWorkloadGroup;
            }
            
            public virtual AstDropWorkloadGroup DropWorkloadGroup
            {
                get
                {
                    return _dropWorkloadGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : drop_xml_schema_collection 
        /// </summary>
        public partial class AstSqlClause162 : AstSqlClause
        {
            
            private AstDropXmlSchemaCollection _dropXmlSchemaCollection;
            
            internal AstSqlClause162(ParserRuleContext ctx, AstDropXmlSchemaCollection dropXmlSchemaCollection) : 
                    base(ctx)
            {
                _dropXmlSchemaCollection = dropXmlSchemaCollection;
            }
            
            public virtual AstDropXmlSchemaCollection DropXmlSchemaCollection
            {
                get
                {
                    return _dropXmlSchemaCollection;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : disable_trigger 
        /// </summary>
        public partial class AstSqlClause163 : AstSqlClause
        {
            
            private AstDisableTrigger _disableTrigger;
            
            internal AstSqlClause163(ParserRuleContext ctx, AstDisableTrigger disableTrigger) : 
                    base(ctx)
            {
                _disableTrigger = disableTrigger;
            }
            
            public virtual AstDisableTrigger DisableTrigger
            {
                get
                {
                    return _disableTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : enable_trigger 
        /// </summary>
        public partial class AstSqlClause164 : AstSqlClause
        {
            
            private AstEnableTrigger _enableTrigger;
            
            internal AstSqlClause164(ParserRuleContext ctx, AstEnableTrigger enableTrigger) : 
                    base(ctx)
            {
                _enableTrigger = enableTrigger;
            }
            
            public virtual AstEnableTrigger EnableTrigger
            {
                get
                {
                    return _enableTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : lock_table 
        /// </summary>
        public partial class AstSqlClause165 : AstSqlClause
        {
            
            private AstLockTable _lockTable;
            
            internal AstSqlClause165(ParserRuleContext ctx, AstLockTable lockTable) : 
                    base(ctx)
            {
                _lockTable = lockTable;
            }
            
            public virtual AstLockTable LockTable
            {
                get
                {
                    return _lockTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : truncate_table 
        /// </summary>
        public partial class AstSqlClause166 : AstSqlClause
        {
            
            private AstTruncateTable _truncateTable;
            
            internal AstSqlClause166(ParserRuleContext ctx, AstTruncateTable truncateTable) : 
                    base(ctx)
            {
                _truncateTable = truncateTable;
            }
            
            public virtual AstTruncateTable TruncateTable
            {
                get
                {
                    return _truncateTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : update_statistics 
        /// </summary>
        public partial class AstSqlClause167 : AstSqlClause
        {
            
            private AstUpdateStatistics _updateStatistics;
            
            internal AstSqlClause167(ParserRuleContext ctx, AstUpdateStatistics updateStatistics) : 
                    base(ctx)
            {
                _updateStatistics = updateStatistics;
            }
            
            public virtual AstUpdateStatistics UpdateStatistics
            {
                get
                {
                    return _updateStatistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : block_statement 
        /// </summary>
        public partial class AstSqlClause168 : AstSqlClause
        {
            
            private AstBlockStatement _blockStatement;
            
            internal AstSqlClause168(ParserRuleContext ctx, AstBlockStatement blockStatement) : 
                    base(ctx)
            {
                _blockStatement = blockStatement;
            }
            
            public virtual AstBlockStatement BlockStatement
            {
                get
                {
                    return _blockStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : break_statement 
        /// </summary>
        public partial class AstSqlClause169 : AstSqlClause
        {
            
            private AstBreakStatement _breakStatement;
            
            internal AstSqlClause169(ParserRuleContext ctx, AstBreakStatement breakStatement) : 
                    base(ctx)
            {
                _breakStatement = breakStatement;
            }
            
            public virtual AstBreakStatement BreakStatement
            {
                get
                {
                    return _breakStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : continue_statement 
        /// </summary>
        public partial class AstSqlClause170 : AstSqlClause
        {
            
            private AstContinueStatement _continueStatement;
            
            internal AstSqlClause170(ParserRuleContext ctx, AstContinueStatement continueStatement) : 
                    base(ctx)
            {
                _continueStatement = continueStatement;
            }
            
            public virtual AstContinueStatement ContinueStatement
            {
                get
                {
                    return _continueStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : goto_statement 
        /// </summary>
        public partial class AstSqlClause171 : AstSqlClause
        {
            
            private AstGotoStatement _gotoStatement;
            
            internal AstSqlClause171(ParserRuleContext ctx, AstGotoStatement gotoStatement) : 
                    base(ctx)
            {
                _gotoStatement = gotoStatement;
            }
            
            public virtual AstGotoStatement GotoStatement
            {
                get
                {
                    return _gotoStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : if_statement 
        /// </summary>
        public partial class AstSqlClause172 : AstSqlClause
        {
            
            private AstIfStatement _ifStatement;
            
            internal AstSqlClause172(ParserRuleContext ctx, AstIfStatement ifStatement) : 
                    base(ctx)
            {
                _ifStatement = ifStatement;
            }
            
            public virtual AstIfStatement IfStatement
            {
                get
                {
                    return _ifStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : return_statement 
        /// </summary>
        public partial class AstSqlClause173 : AstSqlClause
        {
            
            private AstReturnStatement _returnStatement;
            
            internal AstSqlClause173(ParserRuleContext ctx, AstReturnStatement returnStatement) : 
                    base(ctx)
            {
                _returnStatement = returnStatement;
            }
            
            public virtual AstReturnStatement ReturnStatement
            {
                get
                {
                    return _returnStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : throw_statement 
        /// </summary>
        public partial class AstSqlClause174 : AstSqlClause
        {
            
            private AstThrowStatement _throwStatement;
            
            internal AstSqlClause174(ParserRuleContext ctx, AstThrowStatement throwStatement) : 
                    base(ctx)
            {
                _throwStatement = throwStatement;
            }
            
            public virtual AstThrowStatement ThrowStatement
            {
                get
                {
                    return _throwStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : try_catch_statement 
        /// </summary>
        public partial class AstSqlClause175 : AstSqlClause
        {
            
            private AstTryCatchStatement _tryCatchStatement;
            
            internal AstSqlClause175(ParserRuleContext ctx, AstTryCatchStatement tryCatchStatement) : 
                    base(ctx)
            {
                _tryCatchStatement = tryCatchStatement;
            }
            
            public virtual AstTryCatchStatement TryCatchStatement
            {
                get
                {
                    return _tryCatchStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : waitfor_statement 
        /// </summary>
        public partial class AstSqlClause176 : AstSqlClause
        {
            
            private AstWaitforStatement _waitforStatement;
            
            internal AstSqlClause176(ParserRuleContext ctx, AstWaitforStatement waitforStatement) : 
                    base(ctx)
            {
                _waitforStatement = waitforStatement;
            }
            
            public virtual AstWaitforStatement WaitforStatement
            {
                get
                {
                    return _waitforStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : while_statement 
        /// </summary>
        public partial class AstSqlClause177 : AstSqlClause
        {
            
            private AstWhileStatement _whileStatement;
            
            internal AstSqlClause177(ParserRuleContext ctx, AstWhileStatement whileStatement) : 
                    base(ctx)
            {
                _whileStatement = whileStatement;
            }
            
            public virtual AstWhileStatement WhileStatement
            {
                get
                {
                    return _whileStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : print_statement 
        /// </summary>
        public partial class AstSqlClause178 : AstSqlClause
        {
            
            private AstPrintStatement _printStatement;
            
            internal AstSqlClause178(ParserRuleContext ctx, AstPrintStatement printStatement) : 
                    base(ctx)
            {
                _printStatement = printStatement;
            }
            
            public virtual AstPrintStatement PrintStatement
            {
                get
                {
                    return _printStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : raiseerror_statement 
        /// </summary>
        public partial class AstSqlClause179 : AstSqlClause
        {
            
            private AstRaiseerrorStatement _raiseerrorStatement;
            
            internal AstSqlClause179(ParserRuleContext ctx, AstRaiseerrorStatement raiseerrorStatement) : 
                    base(ctx)
            {
                _raiseerrorStatement = raiseerrorStatement;
            }
            
            public virtual AstRaiseerrorStatement RaiseerrorStatement
            {
                get
                {
                    return _raiseerrorStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : declare_statement 
        /// </summary>
        public partial class AstSqlClause180 : AstSqlClause
        {
            
            private AstDeclareStatement _declareStatement;
            
            internal AstSqlClause180(ParserRuleContext ctx, AstDeclareStatement declareStatement) : 
                    base(ctx)
            {
                _declareStatement = declareStatement;
            }
            
            public virtual AstDeclareStatement DeclareStatement
            {
                get
                {
                    return _declareStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : execute_statement 
        /// </summary>
        public partial class AstSqlClause181 : AstSqlClause
        {
            
            private AstExecuteStatement _executeStatement;
            
            internal AstSqlClause181(ParserRuleContext ctx, AstExecuteStatement executeStatement) : 
                    base(ctx)
            {
                _executeStatement = executeStatement;
            }
            
            public virtual AstExecuteStatement ExecuteStatement
            {
                get
                {
                    return _executeStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : cursor_statement 
        /// </summary>
        public partial class AstSqlClause182 : AstSqlClause
        {
            
            private AstCursorStatement _cursorStatement;
            
            internal AstSqlClause182(ParserRuleContext ctx, AstCursorStatement cursorStatement) : 
                    base(ctx)
            {
                _cursorStatement = cursorStatement;
            }
            
            public virtual AstCursorStatement CursorStatement
            {
                get
                {
                    return _cursorStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : begin_conversation_timer 
        /// </summary>
        public partial class AstSqlClause183 : AstSqlClause
        {
            
            private AstBeginConversationTimer _beginConversationTimer;
            
            internal AstSqlClause183(ParserRuleContext ctx, AstBeginConversationTimer beginConversationTimer) : 
                    base(ctx)
            {
                _beginConversationTimer = beginConversationTimer;
            }
            
            public virtual AstBeginConversationTimer BeginConversationTimer
            {
                get
                {
                    return _beginConversationTimer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : begin_conversation_dialog 
        /// </summary>
        public partial class AstSqlClause184 : AstSqlClause
        {
            
            private AstBeginConversationDialog _beginConversationDialog;
            
            internal AstSqlClause184(ParserRuleContext ctx, AstBeginConversationDialog beginConversationDialog) : 
                    base(ctx)
            {
                _beginConversationDialog = beginConversationDialog;
            }
            
            public virtual AstBeginConversationDialog BeginConversationDialog
            {
                get
                {
                    return _beginConversationDialog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : end_conversation 
        /// </summary>
        public partial class AstSqlClause185 : AstSqlClause
        {
            
            private AstEndConversation _endConversation;
            
            internal AstSqlClause185(ParserRuleContext ctx, AstEndConversation endConversation) : 
                    base(ctx)
            {
                _endConversation = endConversation;
            }
            
            public virtual AstEndConversation EndConversation
            {
                get
                {
                    return _endConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : get_conversation 
        /// </summary>
        public partial class AstSqlClause186 : AstSqlClause
        {
            
            private AstGetConversation _getConversation;
            
            internal AstSqlClause186(ParserRuleContext ctx, AstGetConversation getConversation) : 
                    base(ctx)
            {
                _getConversation = getConversation;
            }
            
            public virtual AstGetConversation GetConversation
            {
                get
                {
                    return _getConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : send_conversation 
        /// </summary>
        public partial class AstSqlClause187 : AstSqlClause
        {
            
            private AstSendConversation _sendConversation;
            
            internal AstSqlClause187(ParserRuleContext ctx, AstSendConversation sendConversation) : 
                    base(ctx)
            {
                _sendConversation = sendConversation;
            }
            
            public virtual AstSendConversation SendConversation
            {
                get
                {
                    return _sendConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : waitfor_conversation 
        /// </summary>
        public partial class AstSqlClause188 : AstSqlClause
        {
            
            private AstWaitforConversation _waitforConversation;
            
            internal AstSqlClause188(ParserRuleContext ctx, AstWaitforConversation waitforConversation) : 
                    base(ctx)
            {
                _waitforConversation = waitforConversation;
            }
            
            public virtual AstWaitforConversation WaitforConversation
            {
                get
                {
                    return _waitforConversation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_contract 
        /// </summary>
        public partial class AstSqlClause189 : AstSqlClause
        {
            
            private AstCreateContract _createContract;
            
            internal AstSqlClause189(ParserRuleContext ctx, AstCreateContract createContract) : 
                    base(ctx)
            {
                _createContract = createContract;
            }
            
            public virtual AstCreateContract CreateContract
            {
                get
                {
                    return _createContract;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : create_queue 
        /// </summary>
        public partial class AstSqlClause190 : AstSqlClause
        {
            
            private AstCreateQueue _createQueue;
            
            internal AstSqlClause190(ParserRuleContext ctx, AstCreateQueue createQueue) : 
                    base(ctx)
            {
                _createQueue = createQueue;
            }
            
            public virtual AstCreateQueue CreateQueue
            {
                get
                {
                    return _createQueue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : alter_queue 
        /// </summary>
        public partial class AstSqlClause191 : AstSqlClause
        {
            
            private AstAlterQueue _alterQueue;
            
            internal AstSqlClause191(ParserRuleContext ctx, AstAlterQueue alterQueue) : 
                    base(ctx)
            {
                _alterQueue = alterQueue;
            }
            
            public virtual AstAlterQueue AlterQueue
            {
                get
                {
                    return _alterQueue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : kill_statement 
        /// </summary>
        public partial class AstSqlClause192 : AstSqlClause
        {
            
            private AstKillStatement _killStatement;
            
            internal AstSqlClause192(ParserRuleContext ctx, AstKillStatement killStatement) : 
                    base(ctx)
            {
                _killStatement = killStatement;
            }
            
            public virtual AstKillStatement KillStatement
            {
                get
                {
                    return _killStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : message_statement 
        /// </summary>
        public partial class AstSqlClause193 : AstSqlClause
        {
            
            private AstMessageStatement _messageStatement;
            
            internal AstSqlClause193(ParserRuleContext ctx, AstMessageStatement messageStatement) : 
                    base(ctx)
            {
                _messageStatement = messageStatement;
            }
            
            public virtual AstMessageStatement MessageStatement
            {
                get
                {
                    return _messageStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : security_statement 
        /// </summary>
        public partial class AstSqlClause194 : AstSqlClause
        {
            
            private AstSecurityStatement _securityStatement;
            
            internal AstSqlClause194(ParserRuleContext ctx, AstSecurityStatement securityStatement) : 
                    base(ctx)
            {
                _securityStatement = securityStatement;
            }
            
            public virtual AstSecurityStatement SecurityStatement
            {
                get
                {
                    return _securityStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : set_statement 
        /// </summary>
        public partial class AstSqlClause195 : AstSqlClause
        {
            
            private AstSetStatement _setStatement;
            
            internal AstSqlClause195(ParserRuleContext ctx, AstSetStatement setStatement) : 
                    base(ctx)
            {
                _setStatement = setStatement;
            }
            
            public virtual AstSetStatement SetStatement
            {
                get
                {
                    return _setStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : transaction_statement 
        /// </summary>
        public partial class AstSqlClause196 : AstSqlClause
        {
            
            private AstTransactionStatement _transactionStatement;
            
            internal AstSqlClause196(ParserRuleContext ctx, AstTransactionStatement transactionStatement) : 
                    base(ctx)
            {
                _transactionStatement = transactionStatement;
            }
            
            public virtual AstTransactionStatement TransactionStatement
            {
                get
                {
                    return _transactionStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : use_statement 
        /// </summary>
        public partial class AstSqlClause197 : AstSqlClause
        {
            
            private AstUseStatement _useStatement;
            
            internal AstSqlClause197(ParserRuleContext ctx, AstUseStatement useStatement) : 
                    base(ctx)
            {
                _useStatement = useStatement;
            }
            
            public virtual AstUseStatement UseStatement
            {
                get
                {
                    return _useStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : setuser_statement 
        /// </summary>
        public partial class AstSqlClause198 : AstSqlClause
        {
            
            private AstSetuserStatement _setuserStatement;
            
            internal AstSqlClause198(ParserRuleContext ctx, AstSetuserStatement setuserStatement) : 
                    base(ctx)
            {
                _setuserStatement = setuserStatement;
            }
            
            public virtual AstSetuserStatement SetuserStatement
            {
                get
                {
                    return _setuserStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : reconfigure_statement 
        /// </summary>
        public partial class AstSqlClause199 : AstSqlClause
        {
            
            private AstReconfigureStatement _reconfigureStatement;
            
            internal AstSqlClause199(ParserRuleContext ctx, AstReconfigureStatement reconfigureStatement) : 
                    base(ctx)
            {
                _reconfigureStatement = reconfigureStatement;
            }
            
            public virtual AstReconfigureStatement ReconfigureStatement
            {
                get
                {
                    return _reconfigureStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : shutdown_statement 
        /// </summary>
        public partial class AstSqlClause200 : AstSqlClause
        {
            
            private AstShutdownStatement _shutdownStatement;
            
            internal AstSqlClause200(ParserRuleContext ctx, AstShutdownStatement shutdownStatement) : 
                    base(ctx)
            {
                _shutdownStatement = shutdownStatement;
            }
            
            public virtual AstShutdownStatement ShutdownStatement
            {
                get
                {
                    return _shutdownStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : checkpoint_statement 
        /// </summary>
        public partial class AstSqlClause201 : AstSqlClause
        {
            
            private AstCheckpointStatement _checkpointStatement;
            
            internal AstSqlClause201(ParserRuleContext ctx, AstCheckpointStatement checkpointStatement) : 
                    base(ctx)
            {
                _checkpointStatement = checkpointStatement;
            }
            
            public virtual AstCheckpointStatement CheckpointStatement
            {
                get
                {
                    return _checkpointStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_database 
        /// </summary>
        public partial class AstSqlClause202 : AstSqlClause
        {
            
            private AstBackupDatabase _backupDatabase;
            
            internal AstSqlClause202(ParserRuleContext ctx, AstBackupDatabase backupDatabase) : 
                    base(ctx)
            {
                _backupDatabase = backupDatabase;
            }
            
            public virtual AstBackupDatabase BackupDatabase
            {
                get
                {
                    return _backupDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_log 
        /// </summary>
        public partial class AstSqlClause203 : AstSqlClause
        {
            
            private AstBackupLog _backupLog;
            
            internal AstSqlClause203(ParserRuleContext ctx, AstBackupLog backupLog) : 
                    base(ctx)
            {
                _backupLog = backupLog;
            }
            
            public virtual AstBackupLog BackupLog
            {
                get
                {
                    return _backupLog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_certificate 
        /// </summary>
        public partial class AstSqlClause204 : AstSqlClause
        {
            
            private AstBackupCertificate _backupCertificate;
            
            internal AstSqlClause204(ParserRuleContext ctx, AstBackupCertificate backupCertificate) : 
                    base(ctx)
            {
                _backupCertificate = backupCertificate;
            }
            
            public virtual AstBackupCertificate BackupCertificate
            {
                get
                {
                    return _backupCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_master_key 
        /// </summary>
        public partial class AstSqlClause205 : AstSqlClause
        {
            
            private AstBackupMasterKey _backupMasterKey;
            
            internal AstSqlClause205(ParserRuleContext ctx, AstBackupMasterKey backupMasterKey) : 
                    base(ctx)
            {
                _backupMasterKey = backupMasterKey;
            }
            
            public virtual AstBackupMasterKey BackupMasterKey
            {
                get
                {
                    return _backupMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : backup_service_master_key 
        /// </summary>
        public partial class AstSqlClause206 : AstSqlClause
        {
            
            private AstBackupServiceMasterKey _backupServiceMasterKey;
            
            internal AstSqlClause206(ParserRuleContext ctx, AstBackupServiceMasterKey backupServiceMasterKey) : 
                    base(ctx)
            {
                _backupServiceMasterKey = backupServiceMasterKey;
            }
            
            public virtual AstBackupServiceMasterKey BackupServiceMasterKey
            {
                get
                {
                    return _backupServiceMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : dbcc_special 
        /// </summary>
        public partial class AstSqlClause207 : AstSqlClause
        {
            
            private AstDbccSpecial _dbccSpecial;
            
            internal AstSqlClause207(ParserRuleContext ctx, AstDbccSpecial dbccSpecial) : 
                    base(ctx)
            {
                _dbccSpecial = dbccSpecial;
            }
            
            public virtual AstDbccSpecial DbccSpecial
            {
                get
                {
                    return _dbccSpecial;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        /// <summary>
        /// sql_clause : dbcc_clause 
        /// </summary>
        public partial class AstSqlClause208 : AstSqlClause
        {
            
            private AstDbccClause _dbccClause;
            
            internal AstSqlClause208(ParserRuleContext ctx, AstDbccClause dbccClause) : 
                    base(ctx)
            {
                _dbccClause = dbccClause;
            }
            
            public virtual AstDbccClause DbccClause
            {
                get
                {
                    return _dbccClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlClause(this);
            }
        }
        

        
        internal AstSqlClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlClause(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSqlClause Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSqlClause.Resolve(list);
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause1(ctx, ((AstMergeStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause2(ctx, ((AstDeleteStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause3(ctx, ((AstInsertStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause4(ctx, ((AstSelectStatementStandalone)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause5(ctx, ((AstUpdateStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause6(ctx, ((AstAlterApplicationRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause7(ctx, ((AstAlterAssembly)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause8(ctx, ((AstAlterAsymmetricKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause9(ctx, ((AstAlterAuthorization)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause10(ctx, ((AstAlterAuthorizationForAzureDw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause11(ctx, ((AstAlterAuthorizationForParallelDw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause12(ctx, ((AstAlterAuthorizationForSqlDatabase)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause13(ctx, ((AstAlterAvailabilityGroup)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause14(ctx, ((AstAlterCertificate)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause15(ctx, ((AstAlterColumnEncryptionKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause16(ctx, ((AstAlterCredential)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause17(ctx, ((AstAlterCryptographicProvider)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause18(ctx, ((AstAlterDatabase)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause19(ctx, ((AstAlterDbRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause20(ctx, ((AstAlterEndpoint)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause21(ctx, ((AstCreateOrAlterEventSession)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause22(ctx, ((AstAlterExternalDataSource)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause23(ctx, ((AstAlterExternalLibrary)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause24(ctx, ((AstAlterExternalResourcePool)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause25(ctx, ((AstAlterFulltextCatalog)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause26(ctx, ((AstAlterFulltextStoplist)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause27(ctx, ((AstAlterIndex)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause28(ctx, ((AstAlterLoginAzureSql)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause29(ctx, ((AstAlterLoginAzureSqlDwAndPdw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause30(ctx, ((AstAlterLoginSqlServer)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause31(ctx, ((AstAlterMasterKeyAzureSql)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause32(ctx, ((AstAlterMasterKeySqlServer)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause33(ctx, ((AstAlterMessageType)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause34(ctx, ((AstAlterPartitionFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause35(ctx, ((AstAlterPartitionScheme)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause36(ctx, ((AstAlterRemoteServiceBinding)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause37(ctx, ((AstAlterResourceGovernor)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause38(ctx, ((AstAlterSchemaAzureSqlDwAndPdw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause39(ctx, ((AstAlterSchemaSql)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause40(ctx, ((AstAlterSequence)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause41(ctx, ((AstAlterServerAudit)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause42(ctx, ((AstAlterServerAuditSpecification)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause43(ctx, ((AstAlterServerConfiguration)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause44(ctx, ((AstAlterServerRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause45(ctx, ((AstAlterServerRolePdw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause46(ctx, ((AstAlterService)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause47(ctx, ((AstAlterServiceMasterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause48(ctx, ((AstAlterSymmetricKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause49(ctx, ((AstAlterTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause50(ctx, ((AstAlterUser)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause51(ctx, ((AstAlterUserAzureSql)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause52(ctx, ((AstAlterWorkloadGroup)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause53(ctx, ((AstCreateApplicationRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause54(ctx, ((AstCreateAssembly)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause55(ctx, ((AstCreateAsymmetricKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause56(ctx, ((AstCreateColumnEncryptionKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause57(ctx, ((AstCreateColumnMasterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause58(ctx, ((AstCreateCredential)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause59(ctx, ((AstCreateCryptographicProvider)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause60(ctx, ((AstCreateDatabase)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause61(ctx, ((AstCreateDbRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause62(ctx, ((AstCreateEventNotification)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause63(ctx, ((AstCreateExternalLibrary)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause64(ctx, ((AstCreateExternalResourcePool)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause65(ctx, ((AstCreateFulltextCatalog)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause66(ctx, ((AstCreateFulltextStoplist)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause67(ctx, ((AstCreateIndex)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause68(ctx, ((AstCreateColumnstoreIndex)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause69(ctx, ((AstCreateNonclusteredColumnstoreIndex)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause70(ctx, ((AstCreateLoginAzureSql)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause71(ctx, ((AstCreateLoginPdw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause72(ctx, ((AstCreateLoginSqlServer)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause73(ctx, ((AstCreateMasterKeyAzureSql)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause74(ctx, ((AstCreateMasterKeySqlServer)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause75(ctx, ((AstCreateOrAlterBrokerPriority)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause76(ctx, ((AstCreateRemoteServiceBinding)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause77(ctx, ((AstCreateResourcePool)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause78(ctx, ((AstCreateRoute)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause79(ctx, ((AstCreateRule)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause80(ctx, ((AstCreateSchema)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause81(ctx, ((AstCreateSchemaAzureSqlDwAndPdw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause82(ctx, ((AstCreateSearchPropertyList)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause83(ctx, ((AstCreateSecurityPolicy)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause84(ctx, ((AstCreateSequence)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause85(ctx, ((AstCreateServerAudit)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause86(ctx, ((AstCreateServerAuditSpecification)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause87(ctx, ((AstCreateServerRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause88(ctx, ((AstCreateService)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause89(ctx, ((AstCreateStatistics)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause90(ctx, ((AstCreateSynonym)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause91(ctx, ((AstCreateTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause92(ctx, ((AstCreateType)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause93(ctx, ((AstCreateUser)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause94(ctx, ((AstCreateUserAzureSqlDw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause95(ctx, ((AstCreateWorkloadGroup)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause96(ctx, ((AstCreateXmlIndex)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause97(ctx, ((AstCreateXmlSchemaCollection)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause98(ctx, ((AstCreatePartitionFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause99(ctx, ((AstCreatePartitionScheme)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause100(ctx, ((AstDropAggregate)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause101(ctx, ((AstDropApplicationRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause102(ctx, ((AstDropAssembly)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause103(ctx, ((AstDropAsymmetricKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause104(ctx, ((AstDropAvailabilityGroup)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause105(ctx, ((AstDropBrokerPriority)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause106(ctx, ((AstDropCertificate)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause107(ctx, ((AstDropColumnEncryptionKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause108(ctx, ((AstDropColumnMasterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause109(ctx, ((AstDropContract)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause110(ctx, ((AstDropCredential)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause111(ctx, ((AstDropCryptograhicProvider)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause112(ctx, ((AstDropDatabase)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause113(ctx, ((AstDropDatabaseAuditSpecification)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause114(ctx, ((AstDropDatabaseEncryptionKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause115(ctx, ((AstDropDatabaseScopedCredential)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause116(ctx, ((AstDropDbRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause117(ctx, ((AstDropDefault)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause118(ctx, ((AstDropEndpoint)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause119(ctx, ((AstDropEventNotifications)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause120(ctx, ((AstDropEventSession)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause121(ctx, ((AstDropExternalDataSource)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause122(ctx, ((AstDropExternalFileFormat)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause123(ctx, ((AstDropExternalLibrary)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause124(ctx, ((AstDropExternalResourcePool)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause125(ctx, ((AstDropExternalTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause126(ctx, ((AstDropFulltextCatalog)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause127(ctx, ((AstDropFulltextIndex)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause128(ctx, ((AstDropFulltextStoplist)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause129(ctx, ((AstDropFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause130(ctx, ((AstDropIndex)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause131(ctx, ((AstDropLogin)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause132(ctx, ((AstDropMasterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause133(ctx, ((AstDropMessageType)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause134(ctx, ((AstDropPartitionFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause135(ctx, ((AstDropPartitionScheme)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause136(ctx, ((AstDropProcedure)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause137(ctx, ((AstDropQueue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause138(ctx, ((AstDropRemoteServiceBinding)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause139(ctx, ((AstDropResourcePool)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause140(ctx, ((AstDropRoute)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause141(ctx, ((AstDropRule)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause142(ctx, ((AstDropSchema)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause143(ctx, ((AstDropSearchPropertyList)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause144(ctx, ((AstDropSecurityPolicy)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause145(ctx, ((AstDropSequence)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause146(ctx, ((AstDropServerAudit)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause147(ctx, ((AstDropServerAuditSpecification)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause148(ctx, ((AstDropServerRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause149(ctx, ((AstDropService)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause150(ctx, ((AstDropSignature)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause151(ctx, ((AstDropStatistics)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause152(ctx, ((AstDropStatisticsIdAzureDwAndPdw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause153(ctx, ((AstDropSymmetricKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause154(ctx, ((AstDropSynonym)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause155(ctx, ((AstDropTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause156(ctx, ((AstDropDmlTrigger)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause157(ctx, ((AstDropDdlTrigger)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause158(ctx, ((AstDropType)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause159(ctx, ((AstDropUser)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause160(ctx, ((AstDropView)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause161(ctx, ((AstDropWorkloadGroup)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause162(ctx, ((AstDropXmlSchemaCollection)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause163(ctx, ((AstDisableTrigger)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause164(ctx, ((AstEnableTrigger)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause165(ctx, ((AstLockTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause166(ctx, ((AstTruncateTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause167(ctx, ((AstUpdateStatistics)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause168(ctx, ((AstBlockStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause169(ctx, ((AstBreakStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause170(ctx, ((AstContinueStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause171(ctx, ((AstGotoStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause172(ctx, ((AstIfStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause173(ctx, ((AstReturnStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause174(ctx, ((AstThrowStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause175(ctx, ((AstTryCatchStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause176(ctx, ((AstWaitforStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause177(ctx, ((AstWhileStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause178(ctx, ((AstPrintStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause179(ctx, ((AstRaiseerrorStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause180(ctx, ((AstDeclareStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause181(ctx, ((AstExecuteStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause182(ctx, ((AstCursorStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause183(ctx, ((AstBeginConversationTimer)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause184(ctx, ((AstBeginConversationDialog)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause185(ctx, ((AstEndConversation)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause186(ctx, ((AstGetConversation)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause187(ctx, ((AstSendConversation)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause188(ctx, ((AstWaitforConversation)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause189(ctx, ((AstCreateContract)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause190(ctx, ((AstCreateQueue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause191(ctx, ((AstAlterQueue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause192(ctx, ((AstKillStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause193(ctx, ((AstMessageStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause194(ctx, ((AstSecurityStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause195(ctx, ((AstSetStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause196(ctx, ((AstTransactionStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause197(ctx, ((AstUseStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause198(ctx, ((AstSetuserStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause199(ctx, ((AstReconfigureStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause200(ctx, ((AstShutdownStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause201(ctx, ((AstCheckpointStatement)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause202(ctx, ((AstBackupDatabase)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause203(ctx, ((AstBackupLog)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause204(ctx, ((AstBackupCertificate)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause205(ctx, ((AstBackupMasterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause206(ctx, ((AstBackupServiceMasterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause207(ctx, ((AstDbccSpecial)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlClause.AstSqlClause208(ctx, ((AstDbccClause)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstMergeStatement), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeleteStatement), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstInsertStatement), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstSelectStatementStandalone), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateStatement), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterApplicationRole), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAssembly), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAsymmetricKey), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorization), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorizationForAzureDw), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorizationForParallelDw), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAuthorizationForSqlDatabase), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroup), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterCertificate), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterColumnEncryptionKey), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterCredential), false, false))
                {
                    return 16;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterCryptographicProvider), false, false))
                {
                    return 17;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterDatabase), false, false))
                {
                    return 18;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterDbRole), false, false))
                {
                    return 19;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterEndpoint), false, false))
                {
                    return 20;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterEventSession), false, false))
                {
                    return 21;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterExternalDataSource), false, false))
                {
                    return 22;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterExternalLibrary), false, false))
                {
                    return 23;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterExternalResourcePool), false, false))
                {
                    return 24;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterFulltextCatalog), false, false))
                {
                    return 25;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterFulltextStoplist), false, false))
                {
                    return 26;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterIndex), false, false))
                {
                    return 27;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginAzureSql), false, false))
                {
                    return 28;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginAzureSqlDwAndPdw), false, false))
                {
                    return 29;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginSqlServer), false, false))
                {
                    return 30;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterMasterKeyAzureSql), false, false))
                {
                    return 31;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterMasterKeySqlServer), false, false))
                {
                    return 32;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterMessageType), false, false))
                {
                    return 33;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterPartitionFunction), false, false))
                {
                    return 34;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterPartitionScheme), false, false))
                {
                    return 35;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterRemoteServiceBinding), false, false))
                {
                    return 36;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterResourceGovernor), false, false))
                {
                    return 37;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSchemaAzureSqlDwAndPdw), false, false))
                {
                    return 38;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSchemaSql), false, false))
                {
                    return 39;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSequence), false, false))
                {
                    return 40;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerAudit), false, false))
                {
                    return 41;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerAuditSpecification), false, false))
                {
                    return 42;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerConfiguration), false, false))
                {
                    return 43;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerRole), false, false))
                {
                    return 44;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServerRolePdw), false, false))
                {
                    return 45;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterService), false, false))
                {
                    return 46;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterServiceMasterKey), false, false))
                {
                    return 47;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterSymmetricKey), false, false))
                {
                    return 48;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterTable), false, false))
                {
                    return 49;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterUser), false, false))
                {
                    return 50;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterUserAzureSql), false, false))
                {
                    return 51;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterWorkloadGroup), false, false))
                {
                    return 52;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateApplicationRole), false, false))
                {
                    return 53;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateAssembly), false, false))
                {
                    return 54;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateAsymmetricKey), false, false))
                {
                    return 55;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateColumnEncryptionKey), false, false))
                {
                    return 56;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateColumnMasterKey), false, false))
                {
                    return 57;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateCredential), false, false))
                {
                    return 58;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateCryptographicProvider), false, false))
                {
                    return 59;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateDatabase), false, false))
                {
                    return 60;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateDbRole), false, false))
                {
                    return 61;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateEventNotification), false, false))
                {
                    return 62;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateExternalLibrary), false, false))
                {
                    return 63;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateExternalResourcePool), false, false))
                {
                    return 64;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateFulltextCatalog), false, false))
                {
                    return 65;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateFulltextStoplist), false, false))
                {
                    return 66;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateIndex), false, false))
                {
                    return 67;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateColumnstoreIndex), false, false))
                {
                    return 68;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateNonclusteredColumnstoreIndex), false, false))
                {
                    return 69;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateLoginAzureSql), false, false))
                {
                    return 70;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateLoginPdw), false, false))
                {
                    return 71;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateLoginSqlServer), false, false))
                {
                    return 72;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateMasterKeyAzureSql), false, false))
                {
                    return 73;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateMasterKeySqlServer), false, false))
                {
                    return 74;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterBrokerPriority), false, false))
                {
                    return 75;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateRemoteServiceBinding), false, false))
                {
                    return 76;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateResourcePool), false, false))
                {
                    return 77;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateRoute), false, false))
                {
                    return 78;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateRule), false, false))
                {
                    return 79;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSchema), false, false))
                {
                    return 80;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSchemaAzureSqlDwAndPdw), false, false))
                {
                    return 81;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSearchPropertyList), false, false))
                {
                    return 82;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSecurityPolicy), false, false))
                {
                    return 83;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSequence), false, false))
                {
                    return 84;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateServerAudit), false, false))
                {
                    return 85;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateServerAuditSpecification), false, false))
                {
                    return 86;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateServerRole), false, false))
                {
                    return 87;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateService), false, false))
                {
                    return 88;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateStatistics), false, false))
                {
                    return 89;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateSynonym), false, false))
                {
                    return 90;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateTable), false, false))
                {
                    return 91;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateType), false, false))
                {
                    return 92;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateUser), false, false))
                {
                    return 93;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateUserAzureSqlDw), false, false))
                {
                    return 94;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateWorkloadGroup), false, false))
                {
                    return 95;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateXmlIndex), false, false))
                {
                    return 96;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateXmlSchemaCollection), false, false))
                {
                    return 97;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreatePartitionFunction), false, false))
                {
                    return 98;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreatePartitionScheme), false, false))
                {
                    return 99;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAggregate), false, false))
                {
                    return 100;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropApplicationRole), false, false))
                {
                    return 101;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAssembly), false, false))
                {
                    return 102;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAsymmetricKey), false, false))
                {
                    return 103;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropAvailabilityGroup), false, false))
                {
                    return 104;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropBrokerPriority), false, false))
                {
                    return 105;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropCertificate), false, false))
                {
                    return 106;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropColumnEncryptionKey), false, false))
                {
                    return 107;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropColumnMasterKey), false, false))
                {
                    return 108;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropContract), false, false))
                {
                    return 109;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropCredential), false, false))
                {
                    return 110;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropCryptograhicProvider), false, false))
                {
                    return 111;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabase), false, false))
                {
                    return 112;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabaseAuditSpecification), false, false))
                {
                    return 113;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabaseEncryptionKey), false, false))
                {
                    return 114;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDatabaseScopedCredential), false, false))
                {
                    return 115;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDbRole), false, false))
                {
                    return 116;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDefault), false, false))
                {
                    return 117;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropEndpoint), false, false))
                {
                    return 118;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropEventNotifications), false, false))
                {
                    return 119;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropEventSession), false, false))
                {
                    return 120;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalDataSource), false, false))
                {
                    return 121;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalFileFormat), false, false))
                {
                    return 122;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalLibrary), false, false))
                {
                    return 123;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalResourcePool), false, false))
                {
                    return 124;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropExternalTable), false, false))
                {
                    return 125;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFulltextCatalog), false, false))
                {
                    return 126;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFulltextIndex), false, false))
                {
                    return 127;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFulltextStoplist), false, false))
                {
                    return 128;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropFunction), false, false))
                {
                    return 129;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropIndex), false, false))
                {
                    return 130;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropLogin), false, false))
                {
                    return 131;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropMasterKey), false, false))
                {
                    return 132;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropMessageType), false, false))
                {
                    return 133;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropPartitionFunction), false, false))
                {
                    return 134;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropPartitionScheme), false, false))
                {
                    return 135;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropProcedure), false, false))
                {
                    return 136;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropQueue), false, false))
                {
                    return 137;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropRemoteServiceBinding), false, false))
                {
                    return 138;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropResourcePool), false, false))
                {
                    return 139;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropRoute), false, false))
                {
                    return 140;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropRule), false, false))
                {
                    return 141;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSchema), false, false))
                {
                    return 142;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSearchPropertyList), false, false))
                {
                    return 143;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSecurityPolicy), false, false))
                {
                    return 144;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSequence), false, false))
                {
                    return 145;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropServerAudit), false, false))
                {
                    return 146;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropServerAuditSpecification), false, false))
                {
                    return 147;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropServerRole), false, false))
                {
                    return 148;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropService), false, false))
                {
                    return 149;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSignature), false, false))
                {
                    return 150;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropStatistics), false, false))
                {
                    return 151;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropStatisticsIdAzureDwAndPdw), false, false))
                {
                    return 152;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSymmetricKey), false, false))
                {
                    return 153;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropSynonym), false, false))
                {
                    return 154;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropTable), false, false))
                {
                    return 155;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDmlTrigger), false, false))
                {
                    return 156;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropDdlTrigger), false, false))
                {
                    return 157;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropType), false, false))
                {
                    return 158;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropUser), false, false))
                {
                    return 159;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropView), false, false))
                {
                    return 160;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropWorkloadGroup), false, false))
                {
                    return 161;
                }
                if (AstRoot.Eval(list[0], typeof(AstDropXmlSchemaCollection), false, false))
                {
                    return 162;
                }
                if (AstRoot.Eval(list[0], typeof(AstDisableTrigger), false, false))
                {
                    return 163;
                }
                if (AstRoot.Eval(list[0], typeof(AstEnableTrigger), false, false))
                {
                    return 164;
                }
                if (AstRoot.Eval(list[0], typeof(AstLockTable), false, false))
                {
                    return 165;
                }
                if (AstRoot.Eval(list[0], typeof(AstTruncateTable), false, false))
                {
                    return 166;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateStatistics), false, false))
                {
                    return 167;
                }
                if (AstRoot.Eval(list[0], typeof(AstBlockStatement), false, false))
                {
                    return 168;
                }
                if (AstRoot.Eval(list[0], typeof(AstBreakStatement), false, false))
                {
                    return 169;
                }
                if (AstRoot.Eval(list[0], typeof(AstContinueStatement), false, false))
                {
                    return 170;
                }
                if (AstRoot.Eval(list[0], typeof(AstGotoStatement), false, false))
                {
                    return 171;
                }
                if (AstRoot.Eval(list[0], typeof(AstIfStatement), false, false))
                {
                    return 172;
                }
                if (AstRoot.Eval(list[0], typeof(AstReturnStatement), false, false))
                {
                    return 173;
                }
                if (AstRoot.Eval(list[0], typeof(AstThrowStatement), false, false))
                {
                    return 174;
                }
                if (AstRoot.Eval(list[0], typeof(AstTryCatchStatement), false, false))
                {
                    return 175;
                }
                if (AstRoot.Eval(list[0], typeof(AstWaitforStatement), false, false))
                {
                    return 176;
                }
                if (AstRoot.Eval(list[0], typeof(AstWhileStatement), false, false))
                {
                    return 177;
                }
                if (AstRoot.Eval(list[0], typeof(AstPrintStatement), false, false))
                {
                    return 178;
                }
                if (AstRoot.Eval(list[0], typeof(AstRaiseerrorStatement), false, false))
                {
                    return 179;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeclareStatement), false, false))
                {
                    return 180;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatement), false, false))
                {
                    return 181;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorStatement), false, false))
                {
                    return 182;
                }
                if (AstRoot.Eval(list[0], typeof(AstBeginConversationTimer), false, false))
                {
                    return 183;
                }
                if (AstRoot.Eval(list[0], typeof(AstBeginConversationDialog), false, false))
                {
                    return 184;
                }
                if (AstRoot.Eval(list[0], typeof(AstEndConversation), false, false))
                {
                    return 185;
                }
                if (AstRoot.Eval(list[0], typeof(AstGetConversation), false, false))
                {
                    return 186;
                }
                if (AstRoot.Eval(list[0], typeof(AstSendConversation), false, false))
                {
                    return 187;
                }
                if (AstRoot.Eval(list[0], typeof(AstWaitforConversation), false, false))
                {
                    return 188;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateContract), false, false))
                {
                    return 189;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateQueue), false, false))
                {
                    return 190;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterQueue), false, false))
                {
                    return 191;
                }
                if (AstRoot.Eval(list[0], typeof(AstKillStatement), false, false))
                {
                    return 192;
                }
                if (AstRoot.Eval(list[0], typeof(AstMessageStatement), false, false))
                {
                    return 193;
                }
                if (AstRoot.Eval(list[0], typeof(AstSecurityStatement), false, false))
                {
                    return 194;
                }
                if (AstRoot.Eval(list[0], typeof(AstSetStatement), false, false))
                {
                    return 195;
                }
                if (AstRoot.Eval(list[0], typeof(AstTransactionStatement), false, false))
                {
                    return 196;
                }
                if (AstRoot.Eval(list[0], typeof(AstUseStatement), false, false))
                {
                    return 197;
                }
                if (AstRoot.Eval(list[0], typeof(AstSetuserStatement), false, false))
                {
                    return 198;
                }
                if (AstRoot.Eval(list[0], typeof(AstReconfigureStatement), false, false))
                {
                    return 199;
                }
                if (AstRoot.Eval(list[0], typeof(AstShutdownStatement), false, false))
                {
                    return 200;
                }
                if (AstRoot.Eval(list[0], typeof(AstCheckpointStatement), false, false))
                {
                    return 201;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupDatabase), false, false))
                {
                    return 202;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupLog), false, false))
                {
                    return 203;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupCertificate), false, false))
                {
                    return 204;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupMasterKey), false, false))
                {
                    return 205;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupServiceMasterKey), false, false))
                {
                    return 206;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbccSpecial), false, false))
                {
                    return 207;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbccClause), false, false))
                {
                    return 208;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    merge_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstMergeStatement mergeStatement)
        {
            AstSqlClause.AstSqlClause1 result = new AstSqlClause.AstSqlClause1(ctx, mergeStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    delete_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDeleteStatement deleteStatement)
        {
            AstSqlClause.AstSqlClause2 result = new AstSqlClause.AstSqlClause2(ctx, deleteStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    insert_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstInsertStatement insertStatement)
        {
            AstSqlClause.AstSqlClause3 result = new AstSqlClause.AstSqlClause3(ctx, insertStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    select_statement_standalone 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSelectStatementStandalone selectStatementStandalone)
        {
            AstSqlClause.AstSqlClause4 result = new AstSqlClause.AstSqlClause4(ctx, selectStatementStandalone);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    update_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstUpdateStatement updateStatement)
        {
            AstSqlClause.AstSqlClause5 result = new AstSqlClause.AstSqlClause5(ctx, updateStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_application_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterApplicationRole alterApplicationRole)
        {
            AstSqlClause.AstSqlClause6 result = new AstSqlClause.AstSqlClause6(ctx, alterApplicationRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_assembly 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAssembly alterAssembly)
        {
            AstSqlClause.AstSqlClause7 result = new AstSqlClause.AstSqlClause7(ctx, alterAssembly);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_asymmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAsymmetricKey alterAsymmetricKey)
        {
            AstSqlClause.AstSqlClause8 result = new AstSqlClause.AstSqlClause8(ctx, alterAsymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorization alterAuthorization)
        {
            AstSqlClause.AstSqlClause9 result = new AstSqlClause.AstSqlClause9(ctx, alterAuthorization);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization_for_azure_dw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorizationForAzureDw alterAuthorizationForAzureDw)
        {
            AstSqlClause.AstSqlClause10 result = new AstSqlClause.AstSqlClause10(ctx, alterAuthorizationForAzureDw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization_for_parallel_dw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorizationForParallelDw alterAuthorizationForParallelDw)
        {
            AstSqlClause.AstSqlClause11 result = new AstSqlClause.AstSqlClause11(ctx, alterAuthorizationForParallelDw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_authorization_for_sql_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAuthorizationForSqlDatabase alterAuthorizationForSqlDatabase)
        {
            AstSqlClause.AstSqlClause12 result = new AstSqlClause.AstSqlClause12(ctx, alterAuthorizationForSqlDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_availability_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterAvailabilityGroup alterAvailabilityGroup)
        {
            AstSqlClause.AstSqlClause13 result = new AstSqlClause.AstSqlClause13(ctx, alterAvailabilityGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_certificate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterCertificate alterCertificate)
        {
            AstSqlClause.AstSqlClause14 result = new AstSqlClause.AstSqlClause14(ctx, alterCertificate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_column_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterColumnEncryptionKey alterColumnEncryptionKey)
        {
            AstSqlClause.AstSqlClause15 result = new AstSqlClause.AstSqlClause15(ctx, alterColumnEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterCredential alterCredential)
        {
            AstSqlClause.AstSqlClause16 result = new AstSqlClause.AstSqlClause16(ctx, alterCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_cryptographic_provider 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterCryptographicProvider alterCryptographicProvider)
        {
            AstSqlClause.AstSqlClause17 result = new AstSqlClause.AstSqlClause17(ctx, alterCryptographicProvider);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterDatabase alterDatabase)
        {
            AstSqlClause.AstSqlClause18 result = new AstSqlClause.AstSqlClause18(ctx, alterDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_db_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterDbRole alterDbRole)
        {
            AstSqlClause.AstSqlClause19 result = new AstSqlClause.AstSqlClause19(ctx, alterDbRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_endpoint 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterEndpoint alterEndpoint)
        {
            AstSqlClause.AstSqlClause20 result = new AstSqlClause.AstSqlClause20(ctx, alterEndpoint);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_or_alter_event_session 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateOrAlterEventSession createOrAlterEventSession)
        {
            AstSqlClause.AstSqlClause21 result = new AstSqlClause.AstSqlClause21(ctx, createOrAlterEventSession);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_external_data_source 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterExternalDataSource alterExternalDataSource)
        {
            AstSqlClause.AstSqlClause22 result = new AstSqlClause.AstSqlClause22(ctx, alterExternalDataSource);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_external_library 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterExternalLibrary alterExternalLibrary)
        {
            AstSqlClause.AstSqlClause23 result = new AstSqlClause.AstSqlClause23(ctx, alterExternalLibrary);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_external_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterExternalResourcePool alterExternalResourcePool)
        {
            AstSqlClause.AstSqlClause24 result = new AstSqlClause.AstSqlClause24(ctx, alterExternalResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_fulltext_catalog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterFulltextCatalog alterFulltextCatalog)
        {
            AstSqlClause.AstSqlClause25 result = new AstSqlClause.AstSqlClause25(ctx, alterFulltextCatalog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_fulltext_stoplist 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterFulltextStoplist alterFulltextStoplist)
        {
            AstSqlClause.AstSqlClause26 result = new AstSqlClause.AstSqlClause26(ctx, alterFulltextStoplist);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterIndex alterIndex)
        {
            AstSqlClause.AstSqlClause27 result = new AstSqlClause.AstSqlClause27(ctx, alterIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_login_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterLoginAzureSql alterLoginAzureSql)
        {
            AstSqlClause.AstSqlClause28 result = new AstSqlClause.AstSqlClause28(ctx, alterLoginAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_login_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterLoginAzureSqlDwAndPdw alterLoginAzureSqlDwAndPdw)
        {
            AstSqlClause.AstSqlClause29 result = new AstSqlClause.AstSqlClause29(ctx, alterLoginAzureSqlDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_login_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterLoginSqlServer alterLoginSqlServer)
        {
            AstSqlClause.AstSqlClause30 result = new AstSqlClause.AstSqlClause30(ctx, alterLoginSqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_master_key_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterMasterKeyAzureSql alterMasterKeyAzureSql)
        {
            AstSqlClause.AstSqlClause31 result = new AstSqlClause.AstSqlClause31(ctx, alterMasterKeyAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_master_key_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterMasterKeySqlServer alterMasterKeySqlServer)
        {
            AstSqlClause.AstSqlClause32 result = new AstSqlClause.AstSqlClause32(ctx, alterMasterKeySqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_message_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterMessageType alterMessageType)
        {
            AstSqlClause.AstSqlClause33 result = new AstSqlClause.AstSqlClause33(ctx, alterMessageType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_partition_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterPartitionFunction alterPartitionFunction)
        {
            AstSqlClause.AstSqlClause34 result = new AstSqlClause.AstSqlClause34(ctx, alterPartitionFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_partition_scheme 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterPartitionScheme alterPartitionScheme)
        {
            AstSqlClause.AstSqlClause35 result = new AstSqlClause.AstSqlClause35(ctx, alterPartitionScheme);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_remote_service_binding 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterRemoteServiceBinding alterRemoteServiceBinding)
        {
            AstSqlClause.AstSqlClause36 result = new AstSqlClause.AstSqlClause36(ctx, alterRemoteServiceBinding);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_resource_governor 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterResourceGovernor alterResourceGovernor)
        {
            AstSqlClause.AstSqlClause37 result = new AstSqlClause.AstSqlClause37(ctx, alterResourceGovernor);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSchemaAzureSqlDwAndPdw alterSchemaAzureSqlDwAndPdw)
        {
            AstSqlClause.AstSqlClause38 result = new AstSqlClause.AstSqlClause38(ctx, alterSchemaAzureSqlDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_schema_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSchemaSql alterSchemaSql)
        {
            AstSqlClause.AstSqlClause39 result = new AstSqlClause.AstSqlClause39(ctx, alterSchemaSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_sequence 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSequence alterSequence)
        {
            AstSqlClause.AstSqlClause40 result = new AstSqlClause.AstSqlClause40(ctx, alterSequence);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_audit 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerAudit alterServerAudit)
        {
            AstSqlClause.AstSqlClause41 result = new AstSqlClause.AstSqlClause41(ctx, alterServerAudit);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerAuditSpecification alterServerAuditSpecification)
        {
            AstSqlClause.AstSqlClause42 result = new AstSqlClause.AstSqlClause42(ctx, alterServerAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_configuration 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerConfiguration alterServerConfiguration)
        {
            AstSqlClause.AstSqlClause43 result = new AstSqlClause.AstSqlClause43(ctx, alterServerConfiguration);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerRole alterServerRole)
        {
            AstSqlClause.AstSqlClause44 result = new AstSqlClause.AstSqlClause44(ctx, alterServerRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_server_role_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServerRolePdw alterServerRolePdw)
        {
            AstSqlClause.AstSqlClause45 result = new AstSqlClause.AstSqlClause45(ctx, alterServerRolePdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_service 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterService alterService)
        {
            AstSqlClause.AstSqlClause46 result = new AstSqlClause.AstSqlClause46(ctx, alterService);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_service_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterServiceMasterKey alterServiceMasterKey)
        {
            AstSqlClause.AstSqlClause47 result = new AstSqlClause.AstSqlClause47(ctx, alterServiceMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_symmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterSymmetricKey alterSymmetricKey)
        {
            AstSqlClause.AstSqlClause48 result = new AstSqlClause.AstSqlClause48(ctx, alterSymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterTable alterTable)
        {
            AstSqlClause.AstSqlClause49 result = new AstSqlClause.AstSqlClause49(ctx, alterTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_user 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterUser alterUser)
        {
            AstSqlClause.AstSqlClause50 result = new AstSqlClause.AstSqlClause50(ctx, alterUser);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_user_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterUserAzureSql alterUserAzureSql)
        {
            AstSqlClause.AstSqlClause51 result = new AstSqlClause.AstSqlClause51(ctx, alterUserAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_workload_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterWorkloadGroup alterWorkloadGroup)
        {
            AstSqlClause.AstSqlClause52 result = new AstSqlClause.AstSqlClause52(ctx, alterWorkloadGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_application_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateApplicationRole createApplicationRole)
        {
            AstSqlClause.AstSqlClause53 result = new AstSqlClause.AstSqlClause53(ctx, createApplicationRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_assembly 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateAssembly createAssembly)
        {
            AstSqlClause.AstSqlClause54 result = new AstSqlClause.AstSqlClause54(ctx, createAssembly);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_asymmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateAsymmetricKey createAsymmetricKey)
        {
            AstSqlClause.AstSqlClause55 result = new AstSqlClause.AstSqlClause55(ctx, createAsymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_column_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateColumnEncryptionKey createColumnEncryptionKey)
        {
            AstSqlClause.AstSqlClause56 result = new AstSqlClause.AstSqlClause56(ctx, createColumnEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_column_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateColumnMasterKey createColumnMasterKey)
        {
            AstSqlClause.AstSqlClause57 result = new AstSqlClause.AstSqlClause57(ctx, createColumnMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateCredential createCredential)
        {
            AstSqlClause.AstSqlClause58 result = new AstSqlClause.AstSqlClause58(ctx, createCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_cryptographic_provider 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateCryptographicProvider createCryptographicProvider)
        {
            AstSqlClause.AstSqlClause59 result = new AstSqlClause.AstSqlClause59(ctx, createCryptographicProvider);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateDatabase createDatabase)
        {
            AstSqlClause.AstSqlClause60 result = new AstSqlClause.AstSqlClause60(ctx, createDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_db_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateDbRole createDbRole)
        {
            AstSqlClause.AstSqlClause61 result = new AstSqlClause.AstSqlClause61(ctx, createDbRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_event_notification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateEventNotification createEventNotification)
        {
            AstSqlClause.AstSqlClause62 result = new AstSqlClause.AstSqlClause62(ctx, createEventNotification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_external_library 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateExternalLibrary createExternalLibrary)
        {
            AstSqlClause.AstSqlClause63 result = new AstSqlClause.AstSqlClause63(ctx, createExternalLibrary);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_external_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateExternalResourcePool createExternalResourcePool)
        {
            AstSqlClause.AstSqlClause64 result = new AstSqlClause.AstSqlClause64(ctx, createExternalResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_fulltext_catalog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateFulltextCatalog createFulltextCatalog)
        {
            AstSqlClause.AstSqlClause65 result = new AstSqlClause.AstSqlClause65(ctx, createFulltextCatalog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_fulltext_stoplist 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateFulltextStoplist createFulltextStoplist)
        {
            AstSqlClause.AstSqlClause66 result = new AstSqlClause.AstSqlClause66(ctx, createFulltextStoplist);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateIndex createIndex)
        {
            AstSqlClause.AstSqlClause67 result = new AstSqlClause.AstSqlClause67(ctx, createIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_columnstore_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateColumnstoreIndex createColumnstoreIndex)
        {
            AstSqlClause.AstSqlClause68 result = new AstSqlClause.AstSqlClause68(ctx, createColumnstoreIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_nonclustered_columnstore_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateNonclusteredColumnstoreIndex createNonclusteredColumnstoreIndex)
        {
            AstSqlClause.AstSqlClause69 result = new AstSqlClause.AstSqlClause69(ctx, createNonclusteredColumnstoreIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_login_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateLoginAzureSql createLoginAzureSql)
        {
            AstSqlClause.AstSqlClause70 result = new AstSqlClause.AstSqlClause70(ctx, createLoginAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_login_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateLoginPdw createLoginPdw)
        {
            AstSqlClause.AstSqlClause71 result = new AstSqlClause.AstSqlClause71(ctx, createLoginPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_login_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateLoginSqlServer createLoginSqlServer)
        {
            AstSqlClause.AstSqlClause72 result = new AstSqlClause.AstSqlClause72(ctx, createLoginSqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_master_key_azure_sql 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateMasterKeyAzureSql createMasterKeyAzureSql)
        {
            AstSqlClause.AstSqlClause73 result = new AstSqlClause.AstSqlClause73(ctx, createMasterKeyAzureSql);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_master_key_sql_server 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateMasterKeySqlServer createMasterKeySqlServer)
        {
            AstSqlClause.AstSqlClause74 result = new AstSqlClause.AstSqlClause74(ctx, createMasterKeySqlServer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_or_alter_broker_priority 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateOrAlterBrokerPriority createOrAlterBrokerPriority)
        {
            AstSqlClause.AstSqlClause75 result = new AstSqlClause.AstSqlClause75(ctx, createOrAlterBrokerPriority);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_remote_service_binding 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateRemoteServiceBinding createRemoteServiceBinding)
        {
            AstSqlClause.AstSqlClause76 result = new AstSqlClause.AstSqlClause76(ctx, createRemoteServiceBinding);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateResourcePool createResourcePool)
        {
            AstSqlClause.AstSqlClause77 result = new AstSqlClause.AstSqlClause77(ctx, createResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_route 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateRoute createRoute)
        {
            AstSqlClause.AstSqlClause78 result = new AstSqlClause.AstSqlClause78(ctx, createRoute);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_rule 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateRule createRule)
        {
            AstSqlClause.AstSqlClause79 result = new AstSqlClause.AstSqlClause79(ctx, createRule);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_schema 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSchema createSchema)
        {
            AstSqlClause.AstSqlClause80 result = new AstSqlClause.AstSqlClause80(ctx, createSchema);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_schema_azure_sql_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSchemaAzureSqlDwAndPdw createSchemaAzureSqlDwAndPdw)
        {
            AstSqlClause.AstSqlClause81 result = new AstSqlClause.AstSqlClause81(ctx, createSchemaAzureSqlDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_search_property_list 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSearchPropertyList createSearchPropertyList)
        {
            AstSqlClause.AstSqlClause82 result = new AstSqlClause.AstSqlClause82(ctx, createSearchPropertyList);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_security_policy 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSecurityPolicy createSecurityPolicy)
        {
            AstSqlClause.AstSqlClause83 result = new AstSqlClause.AstSqlClause83(ctx, createSecurityPolicy);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_sequence 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSequence createSequence)
        {
            AstSqlClause.AstSqlClause84 result = new AstSqlClause.AstSqlClause84(ctx, createSequence);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_server_audit 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateServerAudit createServerAudit)
        {
            AstSqlClause.AstSqlClause85 result = new AstSqlClause.AstSqlClause85(ctx, createServerAudit);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_server_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateServerAuditSpecification createServerAuditSpecification)
        {
            AstSqlClause.AstSqlClause86 result = new AstSqlClause.AstSqlClause86(ctx, createServerAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_server_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateServerRole createServerRole)
        {
            AstSqlClause.AstSqlClause87 result = new AstSqlClause.AstSqlClause87(ctx, createServerRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_service 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateService createService)
        {
            AstSqlClause.AstSqlClause88 result = new AstSqlClause.AstSqlClause88(ctx, createService);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_statistics 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateStatistics createStatistics)
        {
            AstSqlClause.AstSqlClause89 result = new AstSqlClause.AstSqlClause89(ctx, createStatistics);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_synonym 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateSynonym createSynonym)
        {
            AstSqlClause.AstSqlClause90 result = new AstSqlClause.AstSqlClause90(ctx, createSynonym);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateTable createTable)
        {
            AstSqlClause.AstSqlClause91 result = new AstSqlClause.AstSqlClause91(ctx, createTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateType createType)
        {
            AstSqlClause.AstSqlClause92 result = new AstSqlClause.AstSqlClause92(ctx, createType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_user 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateUser createUser)
        {
            AstSqlClause.AstSqlClause93 result = new AstSqlClause.AstSqlClause93(ctx, createUser);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_user_azure_sql_dw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateUserAzureSqlDw createUserAzureSqlDw)
        {
            AstSqlClause.AstSqlClause94 result = new AstSqlClause.AstSqlClause94(ctx, createUserAzureSqlDw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_workload_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateWorkloadGroup createWorkloadGroup)
        {
            AstSqlClause.AstSqlClause95 result = new AstSqlClause.AstSqlClause95(ctx, createWorkloadGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_xml_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateXmlIndex createXmlIndex)
        {
            AstSqlClause.AstSqlClause96 result = new AstSqlClause.AstSqlClause96(ctx, createXmlIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_xml_schema_collection 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateXmlSchemaCollection createXmlSchemaCollection)
        {
            AstSqlClause.AstSqlClause97 result = new AstSqlClause.AstSqlClause97(ctx, createXmlSchemaCollection);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_partition_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreatePartitionFunction createPartitionFunction)
        {
            AstSqlClause.AstSqlClause98 result = new AstSqlClause.AstSqlClause98(ctx, createPartitionFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_partition_scheme 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreatePartitionScheme createPartitionScheme)
        {
            AstSqlClause.AstSqlClause99 result = new AstSqlClause.AstSqlClause99(ctx, createPartitionScheme);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_aggregate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAggregate dropAggregate)
        {
            AstSqlClause.AstSqlClause100 result = new AstSqlClause.AstSqlClause100(ctx, dropAggregate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_application_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropApplicationRole dropApplicationRole)
        {
            AstSqlClause.AstSqlClause101 result = new AstSqlClause.AstSqlClause101(ctx, dropApplicationRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_assembly 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAssembly dropAssembly)
        {
            AstSqlClause.AstSqlClause102 result = new AstSqlClause.AstSqlClause102(ctx, dropAssembly);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_asymmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAsymmetricKey dropAsymmetricKey)
        {
            AstSqlClause.AstSqlClause103 result = new AstSqlClause.AstSqlClause103(ctx, dropAsymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_availability_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropAvailabilityGroup dropAvailabilityGroup)
        {
            AstSqlClause.AstSqlClause104 result = new AstSqlClause.AstSqlClause104(ctx, dropAvailabilityGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_broker_priority 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropBrokerPriority dropBrokerPriority)
        {
            AstSqlClause.AstSqlClause105 result = new AstSqlClause.AstSqlClause105(ctx, dropBrokerPriority);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_certificate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropCertificate dropCertificate)
        {
            AstSqlClause.AstSqlClause106 result = new AstSqlClause.AstSqlClause106(ctx, dropCertificate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_column_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropColumnEncryptionKey dropColumnEncryptionKey)
        {
            AstSqlClause.AstSqlClause107 result = new AstSqlClause.AstSqlClause107(ctx, dropColumnEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_column_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropColumnMasterKey dropColumnMasterKey)
        {
            AstSqlClause.AstSqlClause108 result = new AstSqlClause.AstSqlClause108(ctx, dropColumnMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_contract 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropContract dropContract)
        {
            AstSqlClause.AstSqlClause109 result = new AstSqlClause.AstSqlClause109(ctx, dropContract);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropCredential dropCredential)
        {
            AstSqlClause.AstSqlClause110 result = new AstSqlClause.AstSqlClause110(ctx, dropCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_cryptograhic_provider 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropCryptograhicProvider dropCryptograhicProvider)
        {
            AstSqlClause.AstSqlClause111 result = new AstSqlClause.AstSqlClause111(ctx, dropCryptograhicProvider);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabase dropDatabase)
        {
            AstSqlClause.AstSqlClause112 result = new AstSqlClause.AstSqlClause112(ctx, dropDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabaseAuditSpecification dropDatabaseAuditSpecification)
        {
            AstSqlClause.AstSqlClause113 result = new AstSqlClause.AstSqlClause113(ctx, dropDatabaseAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database_encryption_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabaseEncryptionKey dropDatabaseEncryptionKey)
        {
            AstSqlClause.AstSqlClause114 result = new AstSqlClause.AstSqlClause114(ctx, dropDatabaseEncryptionKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_database_scoped_credential 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDatabaseScopedCredential dropDatabaseScopedCredential)
        {
            AstSqlClause.AstSqlClause115 result = new AstSqlClause.AstSqlClause115(ctx, dropDatabaseScopedCredential);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_db_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDbRole dropDbRole)
        {
            AstSqlClause.AstSqlClause116 result = new AstSqlClause.AstSqlClause116(ctx, dropDbRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_default 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDefault dropDefault)
        {
            AstSqlClause.AstSqlClause117 result = new AstSqlClause.AstSqlClause117(ctx, dropDefault);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_endpoint 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropEndpoint dropEndpoint)
        {
            AstSqlClause.AstSqlClause118 result = new AstSqlClause.AstSqlClause118(ctx, dropEndpoint);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_event_notifications 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropEventNotifications dropEventNotifications)
        {
            AstSqlClause.AstSqlClause119 result = new AstSqlClause.AstSqlClause119(ctx, dropEventNotifications);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_event_session 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropEventSession dropEventSession)
        {
            AstSqlClause.AstSqlClause120 result = new AstSqlClause.AstSqlClause120(ctx, dropEventSession);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_data_source 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalDataSource dropExternalDataSource)
        {
            AstSqlClause.AstSqlClause121 result = new AstSqlClause.AstSqlClause121(ctx, dropExternalDataSource);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_file_format 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalFileFormat dropExternalFileFormat)
        {
            AstSqlClause.AstSqlClause122 result = new AstSqlClause.AstSqlClause122(ctx, dropExternalFileFormat);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_library 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalLibrary dropExternalLibrary)
        {
            AstSqlClause.AstSqlClause123 result = new AstSqlClause.AstSqlClause123(ctx, dropExternalLibrary);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalResourcePool dropExternalResourcePool)
        {
            AstSqlClause.AstSqlClause124 result = new AstSqlClause.AstSqlClause124(ctx, dropExternalResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_external_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropExternalTable dropExternalTable)
        {
            AstSqlClause.AstSqlClause125 result = new AstSqlClause.AstSqlClause125(ctx, dropExternalTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_fulltext_catalog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFulltextCatalog dropFulltextCatalog)
        {
            AstSqlClause.AstSqlClause126 result = new AstSqlClause.AstSqlClause126(ctx, dropFulltextCatalog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_fulltext_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFulltextIndex dropFulltextIndex)
        {
            AstSqlClause.AstSqlClause127 result = new AstSqlClause.AstSqlClause127(ctx, dropFulltextIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_fulltext_stoplist 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFulltextStoplist dropFulltextStoplist)
        {
            AstSqlClause.AstSqlClause128 result = new AstSqlClause.AstSqlClause128(ctx, dropFulltextStoplist);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropFunction dropFunction)
        {
            AstSqlClause.AstSqlClause129 result = new AstSqlClause.AstSqlClause129(ctx, dropFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_index 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropIndex dropIndex)
        {
            AstSqlClause.AstSqlClause130 result = new AstSqlClause.AstSqlClause130(ctx, dropIndex);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_login 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropLogin dropLogin)
        {
            AstSqlClause.AstSqlClause131 result = new AstSqlClause.AstSqlClause131(ctx, dropLogin);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropMasterKey dropMasterKey)
        {
            AstSqlClause.AstSqlClause132 result = new AstSqlClause.AstSqlClause132(ctx, dropMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_message_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropMessageType dropMessageType)
        {
            AstSqlClause.AstSqlClause133 result = new AstSqlClause.AstSqlClause133(ctx, dropMessageType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_partition_function 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropPartitionFunction dropPartitionFunction)
        {
            AstSqlClause.AstSqlClause134 result = new AstSqlClause.AstSqlClause134(ctx, dropPartitionFunction);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_partition_scheme 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropPartitionScheme dropPartitionScheme)
        {
            AstSqlClause.AstSqlClause135 result = new AstSqlClause.AstSqlClause135(ctx, dropPartitionScheme);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_procedure 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropProcedure dropProcedure)
        {
            AstSqlClause.AstSqlClause136 result = new AstSqlClause.AstSqlClause136(ctx, dropProcedure);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_queue 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropQueue dropQueue)
        {
            AstSqlClause.AstSqlClause137 result = new AstSqlClause.AstSqlClause137(ctx, dropQueue);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_remote_service_binding 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropRemoteServiceBinding dropRemoteServiceBinding)
        {
            AstSqlClause.AstSqlClause138 result = new AstSqlClause.AstSqlClause138(ctx, dropRemoteServiceBinding);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_resource_pool 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropResourcePool dropResourcePool)
        {
            AstSqlClause.AstSqlClause139 result = new AstSqlClause.AstSqlClause139(ctx, dropResourcePool);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_route 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropRoute dropRoute)
        {
            AstSqlClause.AstSqlClause140 result = new AstSqlClause.AstSqlClause140(ctx, dropRoute);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_rule 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropRule dropRule)
        {
            AstSqlClause.AstSqlClause141 result = new AstSqlClause.AstSqlClause141(ctx, dropRule);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_schema 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSchema dropSchema)
        {
            AstSqlClause.AstSqlClause142 result = new AstSqlClause.AstSqlClause142(ctx, dropSchema);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_search_property_list 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSearchPropertyList dropSearchPropertyList)
        {
            AstSqlClause.AstSqlClause143 result = new AstSqlClause.AstSqlClause143(ctx, dropSearchPropertyList);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_security_policy 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSecurityPolicy dropSecurityPolicy)
        {
            AstSqlClause.AstSqlClause144 result = new AstSqlClause.AstSqlClause144(ctx, dropSecurityPolicy);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_sequence 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSequence dropSequence)
        {
            AstSqlClause.AstSqlClause145 result = new AstSqlClause.AstSqlClause145(ctx, dropSequence);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_server_audit 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropServerAudit dropServerAudit)
        {
            AstSqlClause.AstSqlClause146 result = new AstSqlClause.AstSqlClause146(ctx, dropServerAudit);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_server_audit_specification 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropServerAuditSpecification dropServerAuditSpecification)
        {
            AstSqlClause.AstSqlClause147 result = new AstSqlClause.AstSqlClause147(ctx, dropServerAuditSpecification);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_server_role 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropServerRole dropServerRole)
        {
            AstSqlClause.AstSqlClause148 result = new AstSqlClause.AstSqlClause148(ctx, dropServerRole);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_service 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropService dropService)
        {
            AstSqlClause.AstSqlClause149 result = new AstSqlClause.AstSqlClause149(ctx, dropService);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_signature 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSignature dropSignature)
        {
            AstSqlClause.AstSqlClause150 result = new AstSqlClause.AstSqlClause150(ctx, dropSignature);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_statistics 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropStatistics dropStatistics)
        {
            AstSqlClause.AstSqlClause151 result = new AstSqlClause.AstSqlClause151(ctx, dropStatistics);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_statistics_id_azure_dw_and_pdw 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropStatisticsIdAzureDwAndPdw dropStatisticsIdAzureDwAndPdw)
        {
            AstSqlClause.AstSqlClause152 result = new AstSqlClause.AstSqlClause152(ctx, dropStatisticsIdAzureDwAndPdw);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_symmetric_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSymmetricKey dropSymmetricKey)
        {
            AstSqlClause.AstSqlClause153 result = new AstSqlClause.AstSqlClause153(ctx, dropSymmetricKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_synonym 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropSynonym dropSynonym)
        {
            AstSqlClause.AstSqlClause154 result = new AstSqlClause.AstSqlClause154(ctx, dropSynonym);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropTable dropTable)
        {
            AstSqlClause.AstSqlClause155 result = new AstSqlClause.AstSqlClause155(ctx, dropTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_dml_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDmlTrigger dropDmlTrigger)
        {
            AstSqlClause.AstSqlClause156 result = new AstSqlClause.AstSqlClause156(ctx, dropDmlTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_ddl_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropDdlTrigger dropDdlTrigger)
        {
            AstSqlClause.AstSqlClause157 result = new AstSqlClause.AstSqlClause157(ctx, dropDdlTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_type 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropType dropType)
        {
            AstSqlClause.AstSqlClause158 result = new AstSqlClause.AstSqlClause158(ctx, dropType);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_user 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropUser dropUser)
        {
            AstSqlClause.AstSqlClause159 result = new AstSqlClause.AstSqlClause159(ctx, dropUser);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_view 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropView dropView)
        {
            AstSqlClause.AstSqlClause160 result = new AstSqlClause.AstSqlClause160(ctx, dropView);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_workload_group 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropWorkloadGroup dropWorkloadGroup)
        {
            AstSqlClause.AstSqlClause161 result = new AstSqlClause.AstSqlClause161(ctx, dropWorkloadGroup);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    drop_xml_schema_collection 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDropXmlSchemaCollection dropXmlSchemaCollection)
        {
            AstSqlClause.AstSqlClause162 result = new AstSqlClause.AstSqlClause162(ctx, dropXmlSchemaCollection);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    disable_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDisableTrigger disableTrigger)
        {
            AstSqlClause.AstSqlClause163 result = new AstSqlClause.AstSqlClause163(ctx, disableTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    enable_trigger 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstEnableTrigger enableTrigger)
        {
            AstSqlClause.AstSqlClause164 result = new AstSqlClause.AstSqlClause164(ctx, enableTrigger);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    lock_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstLockTable lockTable)
        {
            AstSqlClause.AstSqlClause165 result = new AstSqlClause.AstSqlClause165(ctx, lockTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    truncate_table 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstTruncateTable truncateTable)
        {
            AstSqlClause.AstSqlClause166 result = new AstSqlClause.AstSqlClause166(ctx, truncateTable);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    update_statistics 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstUpdateStatistics updateStatistics)
        {
            AstSqlClause.AstSqlClause167 result = new AstSqlClause.AstSqlClause167(ctx, updateStatistics);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    block_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBlockStatement blockStatement)
        {
            AstSqlClause.AstSqlClause168 result = new AstSqlClause.AstSqlClause168(ctx, blockStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    break_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBreakStatement breakStatement)
        {
            AstSqlClause.AstSqlClause169 result = new AstSqlClause.AstSqlClause169(ctx, breakStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    continue_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstContinueStatement continueStatement)
        {
            AstSqlClause.AstSqlClause170 result = new AstSqlClause.AstSqlClause170(ctx, continueStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    goto_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstGotoStatement gotoStatement)
        {
            AstSqlClause.AstSqlClause171 result = new AstSqlClause.AstSqlClause171(ctx, gotoStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    if_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstIfStatement ifStatement)
        {
            AstSqlClause.AstSqlClause172 result = new AstSqlClause.AstSqlClause172(ctx, ifStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    return_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstReturnStatement returnStatement)
        {
            AstSqlClause.AstSqlClause173 result = new AstSqlClause.AstSqlClause173(ctx, returnStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    throw_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstThrowStatement throwStatement)
        {
            AstSqlClause.AstSqlClause174 result = new AstSqlClause.AstSqlClause174(ctx, throwStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    try_catch_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstTryCatchStatement tryCatchStatement)
        {
            AstSqlClause.AstSqlClause175 result = new AstSqlClause.AstSqlClause175(ctx, tryCatchStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    waitfor_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstWaitforStatement waitforStatement)
        {
            AstSqlClause.AstSqlClause176 result = new AstSqlClause.AstSqlClause176(ctx, waitforStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    while_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstWhileStatement whileStatement)
        {
            AstSqlClause.AstSqlClause177 result = new AstSqlClause.AstSqlClause177(ctx, whileStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    print_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstPrintStatement printStatement)
        {
            AstSqlClause.AstSqlClause178 result = new AstSqlClause.AstSqlClause178(ctx, printStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    raiseerror_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstRaiseerrorStatement raiseerrorStatement)
        {
            AstSqlClause.AstSqlClause179 result = new AstSqlClause.AstSqlClause179(ctx, raiseerrorStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    declare_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDeclareStatement declareStatement)
        {
            AstSqlClause.AstSqlClause180 result = new AstSqlClause.AstSqlClause180(ctx, declareStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    execute_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstExecuteStatement executeStatement)
        {
            AstSqlClause.AstSqlClause181 result = new AstSqlClause.AstSqlClause181(ctx, executeStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    cursor_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCursorStatement cursorStatement)
        {
            AstSqlClause.AstSqlClause182 result = new AstSqlClause.AstSqlClause182(ctx, cursorStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    begin_conversation_timer 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBeginConversationTimer beginConversationTimer)
        {
            AstSqlClause.AstSqlClause183 result = new AstSqlClause.AstSqlClause183(ctx, beginConversationTimer);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    begin_conversation_dialog 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBeginConversationDialog beginConversationDialog)
        {
            AstSqlClause.AstSqlClause184 result = new AstSqlClause.AstSqlClause184(ctx, beginConversationDialog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    end_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstEndConversation endConversation)
        {
            AstSqlClause.AstSqlClause185 result = new AstSqlClause.AstSqlClause185(ctx, endConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    get_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstGetConversation getConversation)
        {
            AstSqlClause.AstSqlClause186 result = new AstSqlClause.AstSqlClause186(ctx, getConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    send_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSendConversation sendConversation)
        {
            AstSqlClause.AstSqlClause187 result = new AstSqlClause.AstSqlClause187(ctx, sendConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    waitfor_conversation 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstWaitforConversation waitforConversation)
        {
            AstSqlClause.AstSqlClause188 result = new AstSqlClause.AstSqlClause188(ctx, waitforConversation);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_contract 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateContract createContract)
        {
            AstSqlClause.AstSqlClause189 result = new AstSqlClause.AstSqlClause189(ctx, createContract);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    create_queue 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCreateQueue createQueue)
        {
            AstSqlClause.AstSqlClause190 result = new AstSqlClause.AstSqlClause190(ctx, createQueue);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    alter_queue 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstAlterQueue alterQueue)
        {
            AstSqlClause.AstSqlClause191 result = new AstSqlClause.AstSqlClause191(ctx, alterQueue);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    kill_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstKillStatement killStatement)
        {
            AstSqlClause.AstSqlClause192 result = new AstSqlClause.AstSqlClause192(ctx, killStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    message_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstMessageStatement messageStatement)
        {
            AstSqlClause.AstSqlClause193 result = new AstSqlClause.AstSqlClause193(ctx, messageStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    security_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSecurityStatement securityStatement)
        {
            AstSqlClause.AstSqlClause194 result = new AstSqlClause.AstSqlClause194(ctx, securityStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    set_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSetStatement setStatement)
        {
            AstSqlClause.AstSqlClause195 result = new AstSqlClause.AstSqlClause195(ctx, setStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    transaction_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstTransactionStatement transactionStatement)
        {
            AstSqlClause.AstSqlClause196 result = new AstSqlClause.AstSqlClause196(ctx, transactionStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    use_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstUseStatement useStatement)
        {
            AstSqlClause.AstSqlClause197 result = new AstSqlClause.AstSqlClause197(ctx, useStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    setuser_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstSetuserStatement setuserStatement)
        {
            AstSqlClause.AstSqlClause198 result = new AstSqlClause.AstSqlClause198(ctx, setuserStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    reconfigure_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstReconfigureStatement reconfigureStatement)
        {
            AstSqlClause.AstSqlClause199 result = new AstSqlClause.AstSqlClause199(ctx, reconfigureStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    shutdown_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstShutdownStatement shutdownStatement)
        {
            AstSqlClause.AstSqlClause200 result = new AstSqlClause.AstSqlClause200(ctx, shutdownStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    checkpoint_statement 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstCheckpointStatement checkpointStatement)
        {
            AstSqlClause.AstSqlClause201 result = new AstSqlClause.AstSqlClause201(ctx, checkpointStatement);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_database 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupDatabase backupDatabase)
        {
            AstSqlClause.AstSqlClause202 result = new AstSqlClause.AstSqlClause202(ctx, backupDatabase);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_log 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupLog backupLog)
        {
            AstSqlClause.AstSqlClause203 result = new AstSqlClause.AstSqlClause203(ctx, backupLog);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_certificate 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupCertificate backupCertificate)
        {
            AstSqlClause.AstSqlClause204 result = new AstSqlClause.AstSqlClause204(ctx, backupCertificate);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupMasterKey backupMasterKey)
        {
            AstSqlClause.AstSqlClause205 result = new AstSqlClause.AstSqlClause205(ctx, backupMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    backup_service_master_key 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstBackupServiceMasterKey backupServiceMasterKey)
        {
            AstSqlClause.AstSqlClause206 result = new AstSqlClause.AstSqlClause206(ctx, backupServiceMasterKey);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    dbcc_special 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDbccSpecial dbccSpecial)
        {
            AstSqlClause.AstSqlClause207 result = new AstSqlClause.AstSqlClause207(ctx, dbccSpecial);
            return result;
        }
        
        /// <summary>
        /// sql_clause : 
        ///    dbcc_clause 
        /// </summary>
        public static AstSqlClause SqlClause(ParserRuleContext ctx, AstDbccClause dbccClause)
        {
            AstSqlClause.AstSqlClause208 result = new AstSqlClause.AstSqlClause208(ctx, dbccClause);
            return result;
        }
    }
    
    /// <summary>
    /// goto_statement
    /// 	 : GOTO  code_location_id
    /// 	 | code_location_id  COLON
    /// </summary>
    public abstract partial class AstGotoStatement : AstBnfRule
    {
        
        protected static string _rule = "goto_statement\r\n\t : GOTO  code_location_id\r\n\t | code_location_id  COLON";
        
        /// <summary>
        /// goto_statement : GOTO code_location_id 
        /// </summary>
        public partial class AstGotoStatement1 : AstGotoStatement
        {
            
            private AstCodeLocationId _codeLocationId;
            
            internal AstGotoStatement1(ParserRuleContext ctx, AstCodeLocationId codeLocationId) : 
                    base(ctx)
            {
                _codeLocationId = codeLocationId;
            }
            
            public virtual AstCodeLocationId CodeLocationId
            {
                get
                {
                    return _codeLocationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGotoStatement(this);
            }
        }
        /// <summary>
        /// goto_statement : code_location_id COLON 
        /// </summary>
        public partial class AstGotoStatement2 : AstGotoStatement
        {
            
            private AstCodeLocationId _codeLocationId;
            
            internal AstGotoStatement2(ParserRuleContext ctx, AstCodeLocationId codeLocationId) : 
                    base(ctx)
            {
                _codeLocationId = codeLocationId;
            }
            
            public virtual AstCodeLocationId CodeLocationId
            {
                get
                {
                    return _codeLocationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGotoStatement(this);
            }
        }
        

        
        internal AstGotoStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGotoStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstGotoStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstGotoStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstGotoStatement.Resolve(list);
            if ((index == 2))
            {
                return new AstGotoStatement.AstGotoStatement1(ctx, ((AstCodeLocationId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstGotoStatement.AstGotoStatement2(ctx, ((AstCodeLocationId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCodeLocationId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCodeLocationId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// goto_statement : 
        ///    GOTO code_location_id 
        /// </summary>
        public static AstGotoStatement GotoStatement(ParserRuleContext ctx, AstCodeLocationId codeLocationId)
        {
            AstGotoStatement.AstGotoStatement1 result = new AstGotoStatement.AstGotoStatement1(ctx, codeLocationId);
            return result;
        }
    }
    
    /// <summary>
    /// throw_statement
    /// 	 : THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?
    /// </summary>
    public partial class AstThrowStatement : AstBnfRule
    {
        
        protected static string _rule = "throw_statement\r\n\t : THROW  (throw_error_number  COMMA  throw_message  COMMA  thr" +
            "ow_state)?";
        
        internal AstThrowStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstThrowStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstThrowStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstThrowStatement(ParserRuleContext ctx, AstThrowErrorNumber throwErrorNumber, AstThrowMessage throwMessage, AstThrowState throwState) : 
                base(ctx)
        {
            _throwErrorNumber = throwErrorNumber;
            _throwMessage = throwMessage;
            _throwState = throwState;
        }
        
        public virtual AstThrowErrorNumber _throwErrorNumber
        {
            get
            {
                return _throwErrorNumber;
            }
        }
        
        public virtual AstThrowMessage _throwMessage
        {
            get
            {
                return _throwMessage;
            }
        }
        
        public virtual AstThrowState _throwState
        {
            get
            {
                return _throwState;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowStatement(this);
        }
        
        /// <summary>
        /// throw_statement : 
        ///    THROW throw_error_number , throw_message , throw_state 
        /// </summary>
        public static AstThrowStatement ThrowStatement(ParserRuleContext ctx, AstThrowErrorNumber throwErrorNumber, AstThrowMessage throwMessage, AstThrowState throwState)
        {
            AstThrowStatement result = new AstThrowStatement(ctx, throwErrorNumber, throwMessage, throwState);
            return result;
        }
    }
    
    /// <summary>
    /// try_catch_statement
    /// 	 : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH
    /// </summary>
    public partial class AstTryCatchStatement : AstBnfRule
    {
        
        protected static string _rule = "try_catch_statement\r\n\t : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  " +
            "SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH";
        
        internal AstTryCatchStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstTryCatchStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstTryCatchStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstTryCatchStatement(ParserRuleContext ctx, AstSqlClauses tryClauses, AstSqlClauses catchClauses) : 
                base(ctx)
        {
            _tryClauses = tryClauses;
            _catchClauses = catchClauses;
        }
        
        public virtual AstSqlClauses _tryClauses
        {
            get
            {
                return _tryClauses;
            }
        }
        
        public virtual AstSqlClauses _catchClauses
        {
            get
            {
                return _catchClauses;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTryCatchStatement(this);
        }
        
        /// <summary>
        /// try_catch_statement : 
        ///    BEGIN TRY SEMI? try_clauses=sql_clauses END TRY SEMI? BEGIN CATCH SEMI? catch_clauses=sql_clauses END CATCH 
        /// </summary>
        public static AstTryCatchStatement TryCatchStatement(ParserRuleContext ctx, AstSqlClauses tryClauses, AstSqlClauses catchClauses)
        {
            AstTryCatchStatement result = new AstTryCatchStatement(ctx, tryClauses, catchClauses);
            return result;
        }
    }
    
    /// <summary>
    /// while_statement_content
    /// 	 : sql_clause
    /// 	 | BREAK
    /// 	 | CONTINUE
    /// </summary>
    public abstract partial class AstWhileStatementContent : AstBnfRule
    {
        
        protected static string _rule = "while_statement_content\r\n\t : sql_clause\r\n\t | BREAK\r\n\t | CONTINUE";
        
        /// <summary>
        /// while_statement_content : sql_clause 
        /// </summary>
        public partial class AstWhileStatementContent1 : AstWhileStatementContent
        {
            
            private AstSqlClause _sqlClause;
            
            internal AstWhileStatementContent1(ParserRuleContext ctx, AstSqlClause sqlClause) : 
                    base(ctx)
            {
                _sqlClause = sqlClause;
            }
            
            public virtual AstSqlClause SqlClause
            {
                get
                {
                    return _sqlClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhileStatementContent(this);
            }
        }
        /// <summary>
        /// while_statement_content : BREAK 
        /// </summary>
        public partial class AstWhileStatementContent2 : AstWhileStatementContent
        {
            
            internal AstWhileStatementContent2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhileStatementContent(this);
            }
        }
        /// <summary>
        /// while_statement_content : CONTINUE 
        /// </summary>
        public partial class AstWhileStatementContent3 : AstWhileStatementContent
        {
            
            internal AstWhileStatementContent3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhileStatementContent(this);
            }
        }
        

        
        internal AstWhileStatementContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWhileStatementContent(Position p) : 
                base(p)
        {
        }
        
        internal AstWhileStatementContent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWhileStatementContent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWhileStatementContent.Resolve(list);
            if ((index == 2))
            {
                return new AstWhileStatementContent.AstWhileStatementContent1(ctx, ((AstSqlClause)(list[0])));
            }
            if ((index == 1))
            {
                return new AstWhileStatementContent.AstWhileStatementContent2(ctx);
            }
            if ((index == 1))
            {
                return new AstWhileStatementContent.AstWhileStatementContent3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSqlClause), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// while_statement_content : 
        ///    sql_clause 
        /// </summary>
        public static AstWhileStatementContent WhileStatementContent(ParserRuleContext ctx, AstSqlClause sqlClause)
        {
            AstWhileStatementContent.AstWhileStatementContent1 result = new AstWhileStatementContent.AstWhileStatementContent1(ctx, sqlClause);
            return result;
        }
        
        /// <summary>
        /// while_statement_content : 
        ///    BREAK 
        /// </summary>
        public static AstWhileStatementContent WhileStatementContent(ParserRuleContext ctx)
        {
            AstWhileStatementContent.AstWhileStatementContent2 result = new AstWhileStatementContent.AstWhileStatementContent2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// raiseerror_statement
    /// 	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?
    /// 	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
    /// </summary>
    public abstract partial class AstRaiseerrorStatement : AstBnfRule
    {
        
        protected static string _rule = @"raiseerror_statement
	 : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)?
	 | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?";
        
        /// <summary>
        /// raiseerror_statement : RAISERROR LR_BRACKET msg=decimal_string_local_id COMMA severity=constant_local_id COMMA state=constant_local_id constant_local_ids? RR_BRACKET WITH log_seterror_nowait 
        /// </summary>
        public partial class AstRaiseerrorStatement1 : AstRaiseerrorStatement
        {
            
            private AstDecimalStringLocalId _msg;
            
            private AstConstantLocalId _severity;
            
            private AstConstantLocalId _state;
            
            private AstConstantLocalIds _constantLocalIds;
            
            private AstLogSeterrorNowait _logSeterrorNowait;
            
            internal AstRaiseerrorStatement1(ParserRuleContext ctx, AstDecimalStringLocalId msg, AstConstantLocalId severity, AstConstantLocalId state, AstConstantLocalIds constantLocalIds, AstLogSeterrorNowait logSeterrorNowait) : 
                    base(ctx)
            {
                _msg = msg;
                _severity = severity;
                _state = state;
                _constantLocalIds = constantLocalIds;
                _logSeterrorNowait = logSeterrorNowait;
            }
            
            public virtual AstDecimalStringLocalId Msg
            {
                get
                {
                    return _msg;
                }
            }
            
            public virtual AstConstantLocalId Severity
            {
                get
                {
                    return _severity;
                }
            }
            
            public virtual AstConstantLocalId State
            {
                get
                {
                    return _state;
                }
            }
            
            public virtual AstConstantLocalIds ConstantLocalIds
            {
                get
                {
                    return _constantLocalIds;
                }
            }
            
            public virtual AstLogSeterrorNowait LogSeterrorNowait
            {
                get
                {
                    return _logSeterrorNowait;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRaiseerrorStatement(this);
            }
        }
        /// <summary>
        /// raiseerror_statement : RAISERROR decimal formatstring=string_local_id_double_quote_id decimal_string_locals? 
        /// </summary>
        public partial class AstRaiseerrorStatement2 : AstRaiseerrorStatement
        {
            
            private AstDecimal _decimal;
            
            private AstStringLocalIdDoubleQuoteId _formatstring;
            
            private AstDecimalStringLocals _decimalStringLocals;
            
            internal AstRaiseerrorStatement2(ParserRuleContext ctx, AstDecimal @decimal, AstStringLocalIdDoubleQuoteId formatstring, AstDecimalStringLocals decimalStringLocals) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _formatstring = formatstring;
                _decimalStringLocals = decimalStringLocals;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstStringLocalIdDoubleQuoteId Formatstring
            {
                get
                {
                    return _formatstring;
                }
            }
            
            public virtual AstDecimalStringLocals DecimalStringLocals
            {
                get
                {
                    return _decimalStringLocals;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRaiseerrorStatement(this);
            }
        }
        

        
        internal AstRaiseerrorStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRaiseerrorStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstRaiseerrorStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRaiseerrorStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRaiseerrorStatement.Resolve(list);
            if ((index == 6))
            {
                return new AstRaiseerrorStatement.AstRaiseerrorStatement1(ctx, ((AstDecimalStringLocalId)(list[0])), ((AstConstantLocalId)(list[1])), ((AstConstantLocalId)(list[2])), ((AstConstantLocalIds)(list[3])), ((AstLogSeterrorNowait)(list[4])));
            }
            if ((index == 4))
            {
                return new AstRaiseerrorStatement.AstRaiseerrorStatement2(ctx, ((AstDecimal)(list[0])), ((AstStringLocalIdDoubleQuoteId)(list[1])), ((AstDecimalStringLocals)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimalStringLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstConstantLocalId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstConstantLocalId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstConstantLocalIds), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstLogSeterrorNowait), false, false))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringLocalIdDoubleQuoteId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimalStringLocals), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// raiseerror_statement : 
        ///    RAISERROR ( msg=decimal_string_local_id , severity=constant_local_id , state=constant_local_id constant_local_ids? ) WITH log_seterror_nowait 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(ParserRuleContext ctx, AstDecimalStringLocalId msg, AstConstantLocalId severity, AstConstantLocalId state, AstConstantLocalIds constantLocalIds, AstLogSeterrorNowait logSeterrorNowait)
        {
            AstRaiseerrorStatement.AstRaiseerrorStatement1 result = new AstRaiseerrorStatement.AstRaiseerrorStatement1(ctx, msg, severity, state, constantLocalIds, logSeterrorNowait);
            return result;
        }
        
        /// <summary>
        /// raiseerror_statement : 
        ///    RAISERROR decimal formatstring=string_local_id_double_quote_id decimal_string_locals? 
        /// </summary>
        public static AstRaiseerrorStatement RaiseerrorStatement(ParserRuleContext ctx, AstDecimal @decimal, AstStringLocalIdDoubleQuoteId formatstring, AstDecimalStringLocals decimalStringLocals)
        {
            AstRaiseerrorStatement.AstRaiseerrorStatement2 result = new AstRaiseerrorStatement.AstRaiseerrorStatement2(ctx, @decimal, formatstring, decimalStringLocals);
            return result;
        }
    }
    
    /// <summary>
    /// alter_assembly_start
    /// 	 : ALTER  ASSEMBLY
    /// </summary>
    public partial class AstAlterAssemblyStart : AstBnfRule
    {
        
        protected static string _rule = "alter_assembly_start\r\n\t : ALTER  ASSEMBLY";
        
        internal AstAlterAssemblyStart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyStart(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyStart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstAlterAssemblyStart(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyStart(this);
        }
        
        /// <summary>
        /// alter_assembly_start : 
        ///    ALTER ASSEMBLY 
        /// </summary>
        public static AstAlterAssemblyStart AlterAssemblyStart(ParserRuleContext ctx)
        {
            AstAlterAssemblyStart result = new AstAlterAssemblyStart(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_multiple_files
    /// 	 : ALL
    /// 	 | multiple_local_files
    /// </summary>
    public abstract partial class AstAlterAssemblyDropMultipleFiles : AstBnfRule
    {
        
        protected static string _rule = "alter_assembly_drop_multiple_files\r\n\t : ALL\r\n\t | multiple_local_files";
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : ALL 
        /// </summary>
        public partial class AstAlterAssemblyDropMultipleFiles1 : AstAlterAssemblyDropMultipleFiles
        {
            
            internal AstAlterAssemblyDropMultipleFiles1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAssemblyDropMultipleFiles(this);
            }
        }
        /// <summary>
        /// alter_assembly_drop_multiple_files : multiple_local_files 
        /// </summary>
        public partial class AstAlterAssemblyDropMultipleFiles2 : AstAlterAssemblyDropMultipleFiles
        {
            
            private AstMultipleLocalFiles _multipleLocalFiles;
            
            internal AstAlterAssemblyDropMultipleFiles2(ParserRuleContext ctx, AstMultipleLocalFiles multipleLocalFiles) : 
                    base(ctx)
            {
                _multipleLocalFiles = multipleLocalFiles;
            }
            
            public virtual AstMultipleLocalFiles MultipleLocalFiles
            {
                get
                {
                    return _multipleLocalFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAssemblyDropMultipleFiles(this);
            }
        }
        

        
        internal AstAlterAssemblyDropMultipleFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAssemblyDropMultipleFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAssemblyDropMultipleFiles Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAssemblyDropMultipleFiles.Resolve(list);
            if ((index == 1))
            {
                return new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles1(ctx);
            }
            if ((index == 2))
            {
                return new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2(ctx, ((AstMultipleLocalFiles)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstMultipleLocalFiles), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : 
        ///    ALL 
        /// </summary>
        public static AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles(ParserRuleContext ctx)
        {
            AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles1 result = new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles1(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : 
        ///    multiple_local_files 
        /// </summary>
        public static AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles(ParserRuleContext ctx, AstMultipleLocalFiles multipleLocalFiles)
        {
            AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2 result = new AstAlterAssemblyDropMultipleFiles.AstAlterAssemblyDropMultipleFiles2(ctx, multipleLocalFiles);
            return result;
        }
    }
    
    /// <summary>
    /// client_assembly_specifier
    /// 	 : network_file_share
    /// 	 | local_file
    /// 	 | stringtext
    /// </summary>
    public abstract partial class AstClientAssemblySpecifier : AstBnfRule
    {
        
        protected static string _rule = "client_assembly_specifier\r\n\t : network_file_share\r\n\t | local_file\r\n\t | stringtext" +
            "";
        
        /// <summary>
        /// client_assembly_specifier : network_file_share 
        /// </summary>
        public partial class AstClientAssemblySpecifier1 : AstClientAssemblySpecifier
        {
            
            private AstNetworkFileShare _networkFileShare;
            
            internal AstClientAssemblySpecifier1(ParserRuleContext ctx, AstNetworkFileShare networkFileShare) : 
                    base(ctx)
            {
                _networkFileShare = networkFileShare;
            }
            
            public virtual AstNetworkFileShare NetworkFileShare
            {
                get
                {
                    return _networkFileShare;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        /// <summary>
        /// client_assembly_specifier : local_file 
        /// </summary>
        public partial class AstClientAssemblySpecifier2 : AstClientAssemblySpecifier
        {
            
            private AstLocalFile _localFile;
            
            internal AstClientAssemblySpecifier2(ParserRuleContext ctx, AstLocalFile localFile) : 
                    base(ctx)
            {
                _localFile = localFile;
            }
            
            public virtual AstLocalFile LocalFile
            {
                get
                {
                    return _localFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        /// <summary>
        /// client_assembly_specifier : stringtext 
        /// </summary>
        public partial class AstClientAssemblySpecifier3 : AstClientAssemblySpecifier
        {
            
            private AstStringtext _stringtext;
            
            internal AstClientAssemblySpecifier3(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClientAssemblySpecifier(this);
            }
        }
        

        
        internal AstClientAssemblySpecifier(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClientAssemblySpecifier(Position p) : 
                base(p)
        {
        }
        
        internal AstClientAssemblySpecifier(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstClientAssemblySpecifier Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstClientAssemblySpecifier.Resolve(list);
            if ((index == 2))
            {
                return new AstClientAssemblySpecifier.AstClientAssemblySpecifier1(ctx, ((AstNetworkFileShare)(list[0])));
            }
            if ((index == 2))
            {
                return new AstClientAssemblySpecifier.AstClientAssemblySpecifier2(ctx, ((AstLocalFile)(list[0])));
            }
            if ((index == 2))
            {
                return new AstClientAssemblySpecifier.AstClientAssemblySpecifier3(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstNetworkFileShare), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalFile), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    network_file_share 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(ParserRuleContext ctx, AstNetworkFileShare networkFileShare)
        {
            AstClientAssemblySpecifier.AstClientAssemblySpecifier1 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier1(ctx, networkFileShare);
            return result;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    local_file 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(ParserRuleContext ctx, AstLocalFile localFile)
        {
            AstClientAssemblySpecifier.AstClientAssemblySpecifier2 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier2(ctx, localFile);
            return result;
        }
        
        /// <summary>
        /// client_assembly_specifier : 
        ///    stringtext 
        /// </summary>
        public static AstClientAssemblySpecifier ClientAssemblySpecifier(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstClientAssemblySpecifier.AstClientAssemblySpecifier3 result = new AstClientAssemblySpecifier.AstClientAssemblySpecifier3(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// assembly_option
    /// 	 : PERMISSION_SET  EQUAL  assembly_permission
    /// 	 | VISIBILITY  EQUAL  on_off
    /// 	 | UNCHECKED  DATA
    /// 	 | assembly_option  COMMA
    /// </summary>
    public abstract partial class AstAssemblyOption : AstBnfRule
    {
        
        protected static string _rule = "assembly_option\r\n\t : PERMISSION_SET  EQUAL  assembly_permission\r\n\t | VISIBILITY  " +
            "EQUAL  on_off\r\n\t | UNCHECKED  DATA\r\n\t | assembly_option  COMMA";
        
        /// <summary>
        /// assembly_option : PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public partial class AstAssemblyOption1 : AstAssemblyOption
        {
            
            private AstAssemblyPermission _assemblyPermission;
            
            internal AstAssemblyOption1(ParserRuleContext ctx, AstAssemblyPermission assemblyPermission) : 
                    base(ctx)
            {
                _assemblyPermission = assemblyPermission;
            }
            
            public virtual AstAssemblyPermission AssemblyPermission
            {
                get
                {
                    return _assemblyPermission;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : VISIBILITY EQUAL on_off 
        /// </summary>
        public partial class AstAssemblyOption2 : AstAssemblyOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAssemblyOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : UNCHECKED DATA 
        /// </summary>
        public partial class AstAssemblyOption3 : AstAssemblyOption
        {
            
            internal AstAssemblyOption3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        /// <summary>
        /// assembly_option : assembly_option COMMA 
        /// </summary>
        public partial class AstAssemblyOption4 : AstAssemblyOption
        {
            
            private AstAssemblyOption _assemblyOption;
            
            internal AstAssemblyOption4(ParserRuleContext ctx, AstAssemblyOption assemblyOption) : 
                    base(ctx)
            {
                _assemblyOption = assemblyOption;
            }
            
            public virtual AstAssemblyOption AssemblyOption
            {
                get
                {
                    return _assemblyOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssemblyOption(this);
            }
        }
        

        
        internal AstAssemblyOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAssemblyOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAssemblyOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAssemblyOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAssemblyOption.Resolve(list);
            if ((index == 2))
            {
                return new AstAssemblyOption.AstAssemblyOption1(ctx, ((AstAssemblyPermission)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAssemblyOption.AstAssemblyOption2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAssemblyOption.AstAssemblyOption3(ctx);
            }
            if ((index == 2))
            {
                return new AstAssemblyOption.AstAssemblyOption4(ctx, ((AstAssemblyOption)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAssemblyPermission), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAssemblyOption), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx, AstAssemblyPermission assemblyPermission)
        {
            AstAssemblyOption.AstAssemblyOption1 result = new AstAssemblyOption.AstAssemblyOption1(ctx, assemblyPermission);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    VISIBILITY EQUAL on_off 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAssemblyOption.AstAssemblyOption2 result = new AstAssemblyOption.AstAssemblyOption2(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    UNCHECKED DATA 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx)
        {
            AstAssemblyOption.AstAssemblyOption3 result = new AstAssemblyOption.AstAssemblyOption3(ctx);
            return result;
        }
        
        /// <summary>
        /// assembly_option : 
        ///    assembly_option , 
        /// </summary>
        public static AstAssemblyOption AssemblyOption(ParserRuleContext ctx, AstAssemblyOption assemblyOption)
        {
            AstAssemblyOption.AstAssemblyOption4 result = new AstAssemblyOption.AstAssemblyOption4(ctx, assemblyOption);
            return result;
        }
    }
    
    /// <summary>
    /// file_path
    /// 	 : file_directory_path_separator  file_path
    /// 	 | id_
    /// </summary>
    public abstract partial class AstFilePath : AstBnfRule
    {
        
        protected static string _rule = "file_path\r\n\t : file_directory_path_separator  file_path\r\n\t | id_";
        
        /// <summary>
        /// file_path : file_directory_path_separator file_path 
        /// </summary>
        public partial class AstFilePath1 : AstFilePath
        {
            
            private AstFileDirectoryPathSeparator _fileDirectoryPathSeparator;
            
            private AstFilePath _filePath;
            
            internal AstFilePath1(ParserRuleContext ctx, AstFileDirectoryPathSeparator fileDirectoryPathSeparator, AstFilePath filePath) : 
                    base(ctx)
            {
                _fileDirectoryPathSeparator = fileDirectoryPathSeparator;
                _filePath = filePath;
            }
            
            public virtual AstFileDirectoryPathSeparator FileDirectoryPathSeparator
            {
                get
                {
                    return _fileDirectoryPathSeparator;
                }
            }
            
            public virtual AstFilePath FilePath
            {
                get
                {
                    return _filePath;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFilePath(this);
            }
        }
        /// <summary>
        /// file_path : id_ 
        /// </summary>
        public partial class AstFilePath2 : AstFilePath
        {
            
            private AstId _id;
            
            internal AstFilePath2(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFilePath(this);
            }
        }
        

        
        internal AstFilePath(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFilePath(Position p) : 
                base(p)
        {
        }
        
        internal AstFilePath(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFilePath Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFilePath.Resolve(list);
            if ((index == 3))
            {
                return new AstFilePath.AstFilePath1(ctx, ((AstFileDirectoryPathSeparator)(list[0])), ((AstFilePath)(list[1])));
            }
            if ((index == 2))
            {
                return new AstFilePath.AstFilePath2(ctx, ((AstId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileDirectoryPathSeparator), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFilePath), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// file_path : 
        ///    file_directory_path_separator file_path 
        /// </summary>
        public static AstFilePath FilePath(ParserRuleContext ctx, AstFileDirectoryPathSeparator fileDirectoryPathSeparator, AstFilePath filePath)
        {
            AstFilePath.AstFilePath1 result = new AstFilePath.AstFilePath1(ctx, fileDirectoryPathSeparator, filePath);
            return result;
        }
        
        /// <summary>
        /// file_path : 
        ///    id_ 
        /// </summary>
        public static AstFilePath FilePath(ParserRuleContext ctx, AstId id)
        {
            AstFilePath.AstFilePath2 result = new AstFilePath.AstFilePath2(ctx, id);
            return result;
        }
    }
    
    /// <summary>
    /// multiple_local_files
    /// 	 : SINGLE_QUOTE  local_file  SINGLE_QUOTE  COMMA
    /// 	 | local_file
    /// </summary>
    public abstract partial class AstMultipleLocalFiles : AstBnfRule
    {
        
        protected static string _rule = "multiple_local_files\r\n\t : SINGLE_QUOTE  local_file  SINGLE_QUOTE  COMMA\r\n\t | loca" +
            "l_file";
        
        /// <summary>
        /// multiple_local_files : SINGLE_QUOTE local_file SINGLE_QUOTE COMMA 
        /// </summary>
        public partial class AstMultipleLocalFiles1 : AstMultipleLocalFiles
        {
            
            private AstLocalFile _localFile;
            
            internal AstMultipleLocalFiles1(ParserRuleContext ctx, AstLocalFile localFile) : 
                    base(ctx)
            {
                _localFile = localFile;
            }
            
            public virtual AstLocalFile LocalFile
            {
                get
                {
                    return _localFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMultipleLocalFiles(this);
            }
        }
        /// <summary>
        /// multiple_local_files : local_file 
        /// </summary>
        public partial class AstMultipleLocalFiles2 : AstMultipleLocalFiles
        {
            
            private AstLocalFile _localFile;
            
            internal AstMultipleLocalFiles2(ParserRuleContext ctx, AstLocalFile localFile) : 
                    base(ctx)
            {
                _localFile = localFile;
            }
            
            public virtual AstLocalFile LocalFile
            {
                get
                {
                    return _localFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMultipleLocalFiles(this);
            }
        }
        

        
        internal AstMultipleLocalFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMultipleLocalFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstMultipleLocalFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMultipleLocalFiles Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMultipleLocalFiles.Resolve(list);
            if ((index == 2))
            {
                return new AstMultipleLocalFiles.AstMultipleLocalFiles1(ctx, ((AstLocalFile)(list[0])));
            }
            if ((index == 2))
            {
                return new AstMultipleLocalFiles.AstMultipleLocalFiles2(ctx, ((AstLocalFile)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalFile), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalFile), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// multiple_local_files : 
        ///    \ local_file \ , 
        /// </summary>
        public static AstMultipleLocalFiles MultipleLocalFiles(ParserRuleContext ctx, AstLocalFile localFile)
        {
            AstMultipleLocalFiles.AstMultipleLocalFiles1 result = new AstMultipleLocalFiles.AstMultipleLocalFiles1(ctx, localFile);
            return result;
        }
    }
    
    /// <summary>
    /// binary_content
    /// 	 : stringtext
    /// 	 | binary_
    /// </summary>
    public abstract partial class AstBinaryContent : AstBnfRule
    {
        
        protected static string _rule = "binary_content\r\n\t : stringtext\r\n\t | binary_";
        
        /// <summary>
        /// binary_content : stringtext 
        /// </summary>
        public partial class AstBinaryContent1 : AstBinaryContent
        {
            
            private AstStringtext _stringtext;
            
            internal AstBinaryContent1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBinaryContent(this);
            }
        }
        /// <summary>
        /// binary_content : binary_ 
        /// </summary>
        public partial class AstBinaryContent2 : AstBinaryContent
        {
            
            private AstBinary _binary;
            
            internal AstBinaryContent2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBinaryContent(this);
            }
        }
        

        
        internal AstBinaryContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBinaryContent(Position p) : 
                base(p)
        {
        }
        
        internal AstBinaryContent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBinaryContent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBinaryContent.Resolve(list);
            if ((index == 2))
            {
                return new AstBinaryContent.AstBinaryContent1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBinaryContent.AstBinaryContent2(ctx, ((AstBinary)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// binary_content : 
        ///    stringtext 
        /// </summary>
        public static AstBinaryContent BinaryContent(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstBinaryContent.AstBinaryContent1 result = new AstBinaryContent.AstBinaryContent1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// binary_content : 
        ///    binary_ 
        /// </summary>
        public static AstBinaryContent BinaryContent(ParserRuleContext ctx, AstBinary binary)
        {
            AstBinaryContent.AstBinaryContent2 result = new AstBinaryContent.AstBinaryContent2(ctx, binary);
            return result;
        }
    }
    
    /// <summary>
    /// by_password_crypt
    /// 	 : decryption_by_pwd
    /// 	 | encryption_by_pwd
    /// </summary>
    public abstract partial class AstByPasswordCrypt : AstBnfRule
    {
        
        protected static string _rule = "by_password_crypt\r\n\t : decryption_by_pwd\r\n\t | encryption_by_pwd";
        
        /// <summary>
        /// by_password_crypt : decryption_by_pwd 
        /// </summary>
        public partial class AstByPasswordCrypt1 : AstByPasswordCrypt
        {
            
            private AstDecryptionByPwd _decryptionByPwd;
            
            internal AstByPasswordCrypt1(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd) : 
                    base(ctx)
            {
                _decryptionByPwd = decryptionByPwd;
            }
            
            public virtual AstDecryptionByPwd DecryptionByPwd
            {
                get
                {
                    return _decryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitByPasswordCrypt(this);
            }
        }
        /// <summary>
        /// by_password_crypt : encryption_by_pwd 
        /// </summary>
        public partial class AstByPasswordCrypt2 : AstByPasswordCrypt
        {
            
            private AstEncryptionByPwd _encryptionByPwd;
            
            internal AstByPasswordCrypt2(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd) : 
                    base(ctx)
            {
                _encryptionByPwd = encryptionByPwd;
            }
            
            public virtual AstEncryptionByPwd EncryptionByPwd
            {
                get
                {
                    return _encryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitByPasswordCrypt(this);
            }
        }
        

        
        internal AstByPasswordCrypt(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstByPasswordCrypt(Position p) : 
                base(p)
        {
        }
        
        internal AstByPasswordCrypt(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstByPasswordCrypt Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstByPasswordCrypt.Resolve(list);
            if ((index == 2))
            {
                return new AstByPasswordCrypt.AstByPasswordCrypt1(ctx, ((AstDecryptionByPwd)(list[0])));
            }
            if ((index == 2))
            {
                return new AstByPasswordCrypt.AstByPasswordCrypt2(ctx, ((AstEncryptionByPwd)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecryptionByPwd), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstEncryptionByPwd), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// by_password_crypt : 
        ///    decryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd)
        {
            AstByPasswordCrypt.AstByPasswordCrypt1 result = new AstByPasswordCrypt.AstByPasswordCrypt1(ctx, decryptionByPwd);
            return result;
        }
        
        /// <summary>
        /// by_password_crypt : 
        ///    encryption_by_pwd 
        /// </summary>
        public static AstByPasswordCrypt ByPasswordCrypt(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd)
        {
            AstByPasswordCrypt.AstByPasswordCrypt2 result = new AstByPasswordCrypt.AstByPasswordCrypt2(ctx, encryptionByPwd);
            return result;
        }
    }
    
    /// <summary>
    /// asymetric_key_with_info
    /// 	 : ALGORITHM  EQUAL  asymetric_algorithm
    /// 	 | PROVIDER_KEY_NAME  EQUAL  provider_key_name = stringtext
    /// 	 | CREATION_DISPOSITION  EQUAL  creation_disposition
    /// </summary>
    public abstract partial class AstAsymetricKeyWithInfo : AstBnfRule
    {
        
        protected static string _rule = "asymetric_key_with_info\r\n\t : ALGORITHM  EQUAL  asymetric_algorithm\r\n\t | PROVIDER_" +
            "KEY_NAME  EQUAL  provider_key_name = stringtext\r\n\t | CREATION_DISPOSITION  EQUAL" +
            "  creation_disposition";
        
        /// <summary>
        /// asymetric_key_with_info : ALGORITHM EQUAL asymetric_algorithm 
        /// </summary>
        public partial class AstAsymetricKeyWithInfo1 : AstAsymetricKeyWithInfo
        {
            
            private AstAsymetricAlgorithm _asymetricAlgorithm;
            
            internal AstAsymetricKeyWithInfo1(ParserRuleContext ctx, AstAsymetricAlgorithm asymetricAlgorithm) : 
                    base(ctx)
            {
                _asymetricAlgorithm = asymetricAlgorithm;
            }
            
            public virtual AstAsymetricAlgorithm AsymetricAlgorithm
            {
                get
                {
                    return _asymetricAlgorithm;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyWithInfo(this);
            }
        }
        /// <summary>
        /// asymetric_key_with_info : PROVIDER_KEY_NAME EQUAL provider_key_name=stringtext 
        /// </summary>
        public partial class AstAsymetricKeyWithInfo2 : AstAsymetricKeyWithInfo
        {
            
            private AstStringtext _providerKeyName;
            
            internal AstAsymetricKeyWithInfo2(ParserRuleContext ctx, AstStringtext providerKeyName) : 
                    base(ctx)
            {
                _providerKeyName = providerKeyName;
            }
            
            public virtual AstStringtext ProviderKeyName
            {
                get
                {
                    return _providerKeyName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyWithInfo(this);
            }
        }
        /// <summary>
        /// asymetric_key_with_info : CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public partial class AstAsymetricKeyWithInfo3 : AstAsymetricKeyWithInfo
        {
            
            private AstCreationDisposition _creationDisposition;
            
            internal AstAsymetricKeyWithInfo3(ParserRuleContext ctx, AstCreationDisposition creationDisposition) : 
                    base(ctx)
            {
                _creationDisposition = creationDisposition;
            }
            
            public virtual AstCreationDisposition CreationDisposition
            {
                get
                {
                    return _creationDisposition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyWithInfo(this);
            }
        }
        

        
        internal AstAsymetricKeyWithInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAsymetricKeyWithInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstAsymetricKeyWithInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAsymetricKeyWithInfo Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAsymetricKeyWithInfo.Resolve(list);
            if ((index == 2))
            {
                return new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo1(ctx, ((AstAsymetricAlgorithm)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo2(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo3(ctx, ((AstCreationDisposition)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAsymetricAlgorithm), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreationDisposition), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// asymetric_key_with_info : 
        ///    ALGORITHM EQUAL asymetric_algorithm 
        /// </summary>
        public static AstAsymetricKeyWithInfo AsymetricKeyWithInfo(ParserRuleContext ctx, AstAsymetricAlgorithm asymetricAlgorithm)
        {
            AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo1 result = new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo1(ctx, asymetricAlgorithm);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_with_info : 
        ///    PROVIDER_KEY_NAME EQUAL provider_key_name=stringtext 
        /// </summary>
        public static AstAsymetricKeyWithInfo AsymetricKeyWithInfo(ParserRuleContext ctx, AstStringtext providerKeyName)
        {
            AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo2 result = new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo2(ctx, providerKeyName);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_with_info : 
        ///    CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public static AstAsymetricKeyWithInfo AsymetricKeyWithInfo(ParserRuleContext ctx, AstCreationDisposition creationDisposition)
        {
            AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo3 result = new AstAsymetricKeyWithInfo.AstAsymetricKeyWithInfo3(ctx, creationDisposition);
            return result;
        }
    }
    
    /// <summary>
    /// asymetric_key_from
    /// 	 : FILE  EQUAL  stringtext
    /// 	 | EXECUTABLE_FILE  EQUAL  stringtext
    /// 	 | ASSEMBLY  assembly_id
    /// 	 | PROVIDER  provider_id
    /// </summary>
    public abstract partial class AstAsymetricKeyFrom : AstBnfRule
    {
        
        protected static string _rule = "asymetric_key_from\r\n\t : FILE  EQUAL  stringtext\r\n\t | EXECUTABLE_FILE  EQUAL  stri" +
            "ngtext\r\n\t | ASSEMBLY  assembly_id\r\n\t | PROVIDER  provider_id";
        
        /// <summary>
        /// asymetric_key_from : FILE EQUAL stringtext 
        /// </summary>
        public partial class AstAsymetricKeyFrom1 : AstAsymetricKeyFrom
        {
            
            private AstStringtext _stringtext;
            
            internal AstAsymetricKeyFrom1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        /// <summary>
        /// asymetric_key_from : EXECUTABLE_FILE EQUAL stringtext 
        /// </summary>
        public partial class AstAsymetricKeyFrom2 : AstAsymetricKeyFrom
        {
            
            private AstStringtext _stringtext;
            
            internal AstAsymetricKeyFrom2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        /// <summary>
        /// asymetric_key_from : ASSEMBLY assembly_id 
        /// </summary>
        public partial class AstAsymetricKeyFrom3 : AstAsymetricKeyFrom
        {
            
            private AstAssemblyId _assemblyId;
            
            internal AstAsymetricKeyFrom3(ParserRuleContext ctx, AstAssemblyId assemblyId) : 
                    base(ctx)
            {
                _assemblyId = assemblyId;
            }
            
            public virtual AstAssemblyId AssemblyId
            {
                get
                {
                    return _assemblyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        /// <summary>
        /// asymetric_key_from : PROVIDER provider_id 
        /// </summary>
        public partial class AstAsymetricKeyFrom4 : AstAsymetricKeyFrom
        {
            
            private AstProviderId _providerId;
            
            internal AstAsymetricKeyFrom4(ParserRuleContext ctx, AstProviderId providerId) : 
                    base(ctx)
            {
                _providerId = providerId;
            }
            
            public virtual AstProviderId ProviderId
            {
                get
                {
                    return _providerId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsymetricKeyFrom(this);
            }
        }
        

        
        internal AstAsymetricKeyFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAsymetricKeyFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstAsymetricKeyFrom(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAsymetricKeyFrom Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAsymetricKeyFrom.Resolve(list);
            if ((index == 2))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom2(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom3(ctx, ((AstAssemblyId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAsymetricKeyFrom.AstAsymetricKeyFrom4(ctx, ((AstProviderId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAssemblyId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstProviderId), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// asymetric_key_from : 
        ///    FILE EQUAL stringtext 
        /// </summary>
        public static AstAsymetricKeyFrom AsymetricKeyFrom(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstAsymetricKeyFrom.AstAsymetricKeyFrom1 result = new AstAsymetricKeyFrom.AstAsymetricKeyFrom1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_from : 
        ///    ASSEMBLY assembly_id 
        /// </summary>
        public static AstAsymetricKeyFrom AsymetricKeyFrom(ParserRuleContext ctx, AstAssemblyId assemblyId)
        {
            AstAsymetricKeyFrom.AstAsymetricKeyFrom3 result = new AstAsymetricKeyFrom.AstAsymetricKeyFrom3(ctx, assemblyId);
            return result;
        }
        
        /// <summary>
        /// asymetric_key_from : 
        ///    PROVIDER provider_id 
        /// </summary>
        public static AstAsymetricKeyFrom AsymetricKeyFrom(ParserRuleContext ctx, AstProviderId providerId)
        {
            AstAsymetricKeyFrom.AstAsymetricKeyFrom4 result = new AstAsymetricKeyFrom.AstAsymetricKeyFrom4(ctx, providerId);
            return result;
        }
    }
    
    /// <summary>
    /// drop_asymmetric_key
    /// 	 : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropAsymmetricKey : AstBnfRule
    {
        
        protected static string _rule = "drop_asymmetric_key\r\n\t : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER" +
            "  KEY)?";
        
        internal AstDropAsymmetricKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropAsymmetricKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropAsymmetricKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropAsymmetricKey(ParserRuleContext ctx, AstId keyName) : 
                base(ctx)
        {
            _keyName = keyName;
        }
        
        public virtual AstId _keyName
        {
            get
            {
                return _keyName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAsymmetricKey(this);
        }
        
        /// <summary>
        /// drop_asymmetric_key : 
        ///    DROP ASYMMETRIC KEY key_name=id_ REMOVE PROVIDER KEY 
        /// </summary>
        public static AstDropAsymmetricKey DropAsymmetricKey(ParserRuleContext ctx, AstId keyName)
        {
            AstDropAsymmetricKey result = new AstDropAsymmetricKey(ctx, keyName);
            return result;
        }
    }
    
    /// <summary>
    /// authorization_grantee
    /// 	 : principal_name = id_
    /// 	 | SCHEMA  OWNER
    /// </summary>
    public abstract partial class AstAuthorizationGrantee : AstBnfRule
    {
        
        protected static string _rule = "authorization_grantee\r\n\t : principal_name = id_\r\n\t | SCHEMA  OWNER";
        
        /// <summary>
        /// authorization_grantee : principal_name=id_ 
        /// </summary>
        public partial class AstAuthorizationGrantee1 : AstAuthorizationGrantee
        {
            
            private AstId _principalName;
            
            internal AstAuthorizationGrantee1(ParserRuleContext ctx, AstId principalName) : 
                    base(ctx)
            {
                _principalName = principalName;
            }
            
            public virtual AstId PrincipalName
            {
                get
                {
                    return _principalName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthorizationGrantee(this);
            }
        }
        /// <summary>
        /// authorization_grantee : SCHEMA OWNER 
        /// </summary>
        public partial class AstAuthorizationGrantee2 : AstAuthorizationGrantee
        {
            
            internal AstAuthorizationGrantee2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthorizationGrantee(this);
            }
        }
        

        
        internal AstAuthorizationGrantee(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAuthorizationGrantee(Position p) : 
                base(p)
        {
        }
        
        internal AstAuthorizationGrantee(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAuthorizationGrantee Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAuthorizationGrantee.Resolve(list);
            if ((index == 2))
            {
                return new AstAuthorizationGrantee.AstAuthorizationGrantee1(ctx, ((AstId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAuthorizationGrantee.AstAuthorizationGrantee2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// authorization_grantee : 
        ///    principal_name=id_ 
        /// </summary>
        public static AstAuthorizationGrantee AuthorizationGrantee(ParserRuleContext ctx, AstId principalName)
        {
            AstAuthorizationGrantee.AstAuthorizationGrantee1 result = new AstAuthorizationGrantee.AstAuthorizationGrantee1(ctx, principalName);
            return result;
        }
        
        /// <summary>
        /// authorization_grantee : 
        ///    SCHEMA OWNER 
        /// </summary>
        public static AstAuthorizationGrantee AuthorizationGrantee(ParserRuleContext ctx)
        {
            AstAuthorizationGrantee.AstAuthorizationGrantee2 result = new AstAuthorizationGrantee.AstAuthorizationGrantee2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// class_type_for_grant
    /// 	 : COLUMN  encryption_master  KEY
    /// 	 | NOTIFICATION  database_object_server
    /// 	 | object_type_for_grant
    /// </summary>
    public abstract partial class AstClassTypeForGrant : AstBnfRule
    {
        
        protected static string _rule = "class_type_for_grant\r\n\t : COLUMN  encryption_master  KEY\r\n\t | NOTIFICATION  datab" +
            "ase_object_server\r\n\t | object_type_for_grant";
        
        /// <summary>
        /// class_type_for_grant : COLUMN encryption_master KEY 
        /// </summary>
        public partial class AstClassTypeForGrant1 : AstClassTypeForGrant
        {
            
            private AstEncryptionMaster _encryptionMaster;
            
            internal AstClassTypeForGrant1(ParserRuleContext ctx, AstEncryptionMaster encryptionMaster) : 
                    base(ctx)
            {
                _encryptionMaster = encryptionMaster;
            }
            
            public virtual AstEncryptionMaster EncryptionMaster
            {
                get
                {
                    return _encryptionMaster;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        /// <summary>
        /// class_type_for_grant : NOTIFICATION database_object_server 
        /// </summary>
        public partial class AstClassTypeForGrant2 : AstClassTypeForGrant
        {
            
            private AstDatabaseObjectServer _databaseObjectServer;
            
            internal AstClassTypeForGrant2(ParserRuleContext ctx, AstDatabaseObjectServer databaseObjectServer) : 
                    base(ctx)
            {
                _databaseObjectServer = databaseObjectServer;
            }
            
            public virtual AstDatabaseObjectServer DatabaseObjectServer
            {
                get
                {
                    return _databaseObjectServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        /// <summary>
        /// class_type_for_grant : object_type_for_grant 
        /// </summary>
        public partial class AstClassTypeForGrant3 : AstClassTypeForGrant
        {
            
            private AstObjectTypeForGrant _objectTypeForGrant;
            
            internal AstClassTypeForGrant3(ParserRuleContext ctx, AstObjectTypeForGrant objectTypeForGrant) : 
                    base(ctx)
            {
                _objectTypeForGrant = objectTypeForGrant;
            }
            
            public virtual AstObjectTypeForGrant ObjectTypeForGrant
            {
                get
                {
                    return _objectTypeForGrant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClassTypeForGrant(this);
            }
        }
        

        
        internal AstClassTypeForGrant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClassTypeForGrant(Position p) : 
                base(p)
        {
        }
        
        internal AstClassTypeForGrant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstClassTypeForGrant Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstClassTypeForGrant.Resolve(list);
            if ((index == 2))
            {
                return new AstClassTypeForGrant.AstClassTypeForGrant1(ctx, ((AstEncryptionMaster)(list[0])));
            }
            if ((index == 2))
            {
                return new AstClassTypeForGrant.AstClassTypeForGrant2(ctx, ((AstDatabaseObjectServer)(list[0])));
            }
            if ((index == 2))
            {
                return new AstClassTypeForGrant.AstClassTypeForGrant3(ctx, ((AstObjectTypeForGrant)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEncryptionMaster), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDatabaseObjectServer), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstObjectTypeForGrant), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    COLUMN encryption_master KEY 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(ParserRuleContext ctx, AstEncryptionMaster encryptionMaster)
        {
            AstClassTypeForGrant.AstClassTypeForGrant1 result = new AstClassTypeForGrant.AstClassTypeForGrant1(ctx, encryptionMaster);
            return result;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    NOTIFICATION database_object_server 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(ParserRuleContext ctx, AstDatabaseObjectServer databaseObjectServer)
        {
            AstClassTypeForGrant.AstClassTypeForGrant2 result = new AstClassTypeForGrant.AstClassTypeForGrant2(ctx, databaseObjectServer);
            return result;
        }
        
        /// <summary>
        /// class_type_for_grant : 
        ///    object_type_for_grant 
        /// </summary>
        public static AstClassTypeForGrant ClassTypeForGrant(ParserRuleContext ctx, AstObjectTypeForGrant objectTypeForGrant)
        {
            AstClassTypeForGrant.AstClassTypeForGrant3 result = new AstClassTypeForGrant.AstClassTypeForGrant3(ctx, objectTypeForGrant);
            return result;
        }
    }
    
    /// <summary>
    /// alter_options_listener
    /// 	 : add_listener
    /// 	 | MODIFY  LISTENER  alter_listener
    /// 	 | restart_listener
    /// </summary>
    public abstract partial class AstAlterOptionsListener : AstBnfRule
    {
        
        protected static string _rule = "alter_options_listener\r\n\t : add_listener\r\n\t | MODIFY  LISTENER  alter_listener\r\n\t" +
            " | restart_listener";
        
        /// <summary>
        /// alter_options_listener : add_listener 
        /// </summary>
        public partial class AstAlterOptionsListener1 : AstAlterOptionsListener
        {
            
            private AstAddListener _addListener;
            
            internal AstAlterOptionsListener1(ParserRuleContext ctx, AstAddListener addListener) : 
                    base(ctx)
            {
                _addListener = addListener;
            }
            
            public virtual AstAddListener AddListener
            {
                get
                {
                    return _addListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterOptionsListener(this);
            }
        }
        /// <summary>
        /// alter_options_listener : MODIFY LISTENER alter_listener 
        /// </summary>
        public partial class AstAlterOptionsListener2 : AstAlterOptionsListener
        {
            
            private AstAlterListener _alterListener;
            
            internal AstAlterOptionsListener2(ParserRuleContext ctx, AstAlterListener alterListener) : 
                    base(ctx)
            {
                _alterListener = alterListener;
            }
            
            public virtual AstAlterListener AlterListener
            {
                get
                {
                    return _alterListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterOptionsListener(this);
            }
        }
        /// <summary>
        /// alter_options_listener : restart_listener 
        /// </summary>
        public partial class AstAlterOptionsListener3 : AstAlterOptionsListener
        {
            
            private AstRestartListener _restartListener;
            
            internal AstAlterOptionsListener3(ParserRuleContext ctx, AstRestartListener restartListener) : 
                    base(ctx)
            {
                _restartListener = restartListener;
            }
            
            public virtual AstRestartListener RestartListener
            {
                get
                {
                    return _restartListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterOptionsListener(this);
            }
        }
        

        
        internal AstAlterOptionsListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterOptionsListener(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterOptionsListener(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterOptionsListener Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterOptionsListener.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterOptionsListener.AstAlterOptionsListener1(ctx, ((AstAddListener)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterOptionsListener.AstAlterOptionsListener2(ctx, ((AstAlterListener)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterOptionsListener.AstAlterOptionsListener3(ctx, ((AstRestartListener)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAddListener), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterListener), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstRestartListener), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_options_listener : 
        ///    add_listener 
        /// </summary>
        public static AstAlterOptionsListener AlterOptionsListener(ParserRuleContext ctx, AstAddListener addListener)
        {
            AstAlterOptionsListener.AstAlterOptionsListener1 result = new AstAlterOptionsListener.AstAlterOptionsListener1(ctx, addListener);
            return result;
        }
        
        /// <summary>
        /// alter_options_listener : 
        ///    MODIFY LISTENER alter_listener 
        /// </summary>
        public static AstAlterOptionsListener AlterOptionsListener(ParserRuleContext ctx, AstAlterListener alterListener)
        {
            AstAlterOptionsListener.AstAlterOptionsListener2 result = new AstAlterOptionsListener.AstAlterOptionsListener2(ctx, alterListener);
            return result;
        }
        
        /// <summary>
        /// alter_options_listener : 
        ///    restart_listener 
        /// </summary>
        public static AstAlterOptionsListener AlterOptionsListener(ParserRuleContext ctx, AstRestartListener restartListener)
        {
            AstAlterOptionsListener.AstAlterOptionsListener3 result = new AstAlterOptionsListener.AstAlterOptionsListener3(ctx, restartListener);
            return result;
        }
    }
    
    /// <summary>
    /// alter_listener
    /// 	 : ADD  IP  LR_BRACKET  ip_listener  RR_BRACKET
    /// 	 | PORT  EQUAL  decimal
    /// </summary>
    public abstract partial class AstAlterListener : AstBnfRule
    {
        
        protected static string _rule = "alter_listener\r\n\t : ADD  IP  LR_BRACKET  ip_listener  RR_BRACKET\r\n\t | PORT  EQUAL" +
            "  decimal";
        
        /// <summary>
        /// alter_listener : ADD IP LR_BRACKET ip_listener RR_BRACKET 
        /// </summary>
        public partial class AstAlterListener1 : AstAlterListener
        {
            
            private AstIpListener _ipListener;
            
            internal AstAlterListener1(ParserRuleContext ctx, AstIpListener ipListener) : 
                    base(ctx)
            {
                _ipListener = ipListener;
            }
            
            public virtual AstIpListener IpListener
            {
                get
                {
                    return _ipListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterListener(this);
            }
        }
        /// <summary>
        /// alter_listener : PORT EQUAL decimal 
        /// </summary>
        public partial class AstAlterListener2 : AstAlterListener
        {
            
            private AstDecimal _decimal;
            
            internal AstAlterListener2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterListener(this);
            }
        }
        

        
        internal AstAlterListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterListener(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterListener(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterListener Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterListener.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterListener.AstAlterListener1(ctx, ((AstIpListener)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterListener.AstAlterListener2(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstIpListener), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_listener : 
        ///    ADD IP ( ip_listener ) 
        /// </summary>
        public static AstAlterListener AlterListener(ParserRuleContext ctx, AstIpListener ipListener)
        {
            AstAlterListener.AstAlterListener1 result = new AstAlterListener.AstAlterListener1(ctx, ipListener);
            return result;
        }
        
        /// <summary>
        /// alter_listener : 
        ///    PORT EQUAL decimal 
        /// </summary>
        public static AstAlterListener AlterListener(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterListener.AstAlterListener2 result = new AstAlterListener.AstAlterListener2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// ip_listener
    /// 	 : range_ip_v4
    /// 	 | ipv6
    /// </summary>
    public abstract partial class AstIpListener : AstBnfRule
    {
        
        protected static string _rule = "ip_listener\r\n\t : range_ip_v4\r\n\t | ipv6";
        
        /// <summary>
        /// ip_listener : range_ip_v4 
        /// </summary>
        public partial class AstIpListener1 : AstIpListener
        {
            
            private AstRangeIpV4 _rangeIpV4;
            
            internal AstIpListener1(ParserRuleContext ctx, AstRangeIpV4 rangeIpV4) : 
                    base(ctx)
            {
                _rangeIpV4 = rangeIpV4;
            }
            
            public virtual AstRangeIpV4 RangeIpV4
            {
                get
                {
                    return _rangeIpV4;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListener(this);
            }
        }
        /// <summary>
        /// ip_listener : ipv6 
        /// </summary>
        public partial class AstIpListener2 : AstIpListener
        {
            
            private AstIpv6 _ipv6;
            
            internal AstIpListener2(ParserRuleContext ctx, AstIpv6 ipv6) : 
                    base(ctx)
            {
                _ipv6 = ipv6;
            }
            
            public virtual AstIpv6 Ipv6
            {
                get
                {
                    return _ipv6;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListener(this);
            }
        }
        

        
        internal AstIpListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIpListener(Position p) : 
                base(p)
        {
        }
        
        internal AstIpListener(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIpListener Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIpListener.Resolve(list);
            if ((index == 2))
            {
                return new AstIpListener.AstIpListener1(ctx, ((AstRangeIpV4)(list[0])));
            }
            if ((index == 2))
            {
                return new AstIpListener.AstIpListener2(ctx, ((AstIpv6)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRangeIpV4), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstIpv6), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// ip_listener : 
        ///    range_ip_v4 
        /// </summary>
        public static AstIpListener IpListener(ParserRuleContext ctx, AstRangeIpV4 rangeIpV4)
        {
            AstIpListener.AstIpListener1 result = new AstIpListener.AstIpListener1(ctx, rangeIpV4);
            return result;
        }
        
        /// <summary>
        /// ip_listener : 
        ///    ipv6 
        /// </summary>
        public static AstIpListener IpListener(ParserRuleContext ctx, AstIpv6 ipv6)
        {
            AstIpListener.AstIpListener2 result = new AstIpListener.AstIpListener2(ctx, ipv6);
            return result;
        }
    }
    
    /// <summary>
    /// ip_listener_comma
    /// 	 : range_ip_comma_v4
    /// 	 | ipv6
    /// </summary>
    public abstract partial class AstIpListenerComma : AstBnfRule
    {
        
        protected static string _rule = "ip_listener_comma\r\n\t : range_ip_comma_v4\r\n\t | ipv6";
        
        /// <summary>
        /// ip_listener_comma : range_ip_comma_v4 
        /// </summary>
        public partial class AstIpListenerComma1 : AstIpListenerComma
        {
            
            private AstRangeIpCommaV4 _rangeIpCommaV4;
            
            internal AstIpListenerComma1(ParserRuleContext ctx, AstRangeIpCommaV4 rangeIpCommaV4) : 
                    base(ctx)
            {
                _rangeIpCommaV4 = rangeIpCommaV4;
            }
            
            public virtual AstRangeIpCommaV4 RangeIpCommaV4
            {
                get
                {
                    return _rangeIpCommaV4;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListenerComma(this);
            }
        }
        /// <summary>
        /// ip_listener_comma : ipv6 
        /// </summary>
        public partial class AstIpListenerComma2 : AstIpListenerComma
        {
            
            private AstIpv6 _ipv6;
            
            internal AstIpListenerComma2(ParserRuleContext ctx, AstIpv6 ipv6) : 
                    base(ctx)
            {
                _ipv6 = ipv6;
            }
            
            public virtual AstIpv6 Ipv6
            {
                get
                {
                    return _ipv6;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIpListenerComma(this);
            }
        }
        

        
        internal AstIpListenerComma(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIpListenerComma(Position p) : 
                base(p)
        {
        }
        
        internal AstIpListenerComma(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIpListenerComma Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIpListenerComma.Resolve(list);
            if ((index == 2))
            {
                return new AstIpListenerComma.AstIpListenerComma1(ctx, ((AstRangeIpCommaV4)(list[0])));
            }
            if ((index == 2))
            {
                return new AstIpListenerComma.AstIpListenerComma2(ctx, ((AstIpv6)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRangeIpCommaV4), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstIpv6), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// ip_listener_comma : 
        ///    range_ip_comma_v4 
        /// </summary>
        public static AstIpListenerComma IpListenerComma(ParserRuleContext ctx, AstRangeIpCommaV4 rangeIpCommaV4)
        {
            AstIpListenerComma.AstIpListenerComma1 result = new AstIpListenerComma.AstIpListenerComma1(ctx, rangeIpCommaV4);
            return result;
        }
        
        /// <summary>
        /// ip_listener_comma : 
        ///    ipv6 
        /// </summary>
        public static AstIpListenerComma IpListenerComma(ParserRuleContext ctx, AstIpv6 ipv6)
        {
            AstIpListenerComma.AstIpListenerComma2 result = new AstIpListenerComma.AstIpListenerComma2(ctx, ipv6);
            return result;
        }
    }
    
    /// <summary>
    /// address_listener
    /// 	 : listener_dhcp
    /// 	 | WITH  IP  LR_BRACKET  listener_ip_address
    /// </summary>
    public abstract partial class AstAddressListener : AstBnfRule
    {
        
        protected static string _rule = "address_listener\r\n\t : listener_dhcp\r\n\t | WITH  IP  LR_BRACKET  listener_ip_addres" +
            "s";
        
        /// <summary>
        /// address_listener : listener_dhcp 
        /// </summary>
        public partial class AstAddressListener1 : AstAddressListener
        {
            
            private AstListenerDhcp _listenerDhcp;
            
            internal AstAddressListener1(ParserRuleContext ctx, AstListenerDhcp listenerDhcp) : 
                    base(ctx)
            {
                _listenerDhcp = listenerDhcp;
            }
            
            public virtual AstListenerDhcp ListenerDhcp
            {
                get
                {
                    return _listenerDhcp;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddressListener(this);
            }
        }
        /// <summary>
        /// address_listener : WITH IP LR_BRACKET listener_ip_address 
        /// </summary>
        public partial class AstAddressListener2 : AstAddressListener
        {
            
            private AstListenerIpAddress _listenerIpAddress;
            
            internal AstAddressListener2(ParserRuleContext ctx, AstListenerIpAddress listenerIpAddress) : 
                    base(ctx)
            {
                _listenerIpAddress = listenerIpAddress;
            }
            
            public virtual AstListenerIpAddress ListenerIpAddress
            {
                get
                {
                    return _listenerIpAddress;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddressListener(this);
            }
        }
        

        
        internal AstAddressListener(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddressListener(Position p) : 
                base(p)
        {
        }
        
        internal AstAddressListener(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAddressListener Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAddressListener.Resolve(list);
            if ((index == 2))
            {
                return new AstAddressListener.AstAddressListener1(ctx, ((AstListenerDhcp)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAddressListener.AstAddressListener2(ctx, ((AstListenerIpAddress)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstListenerDhcp), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstListenerIpAddress), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// address_listener : 
        ///    listener_dhcp 
        /// </summary>
        public static AstAddressListener AddressListener(ParserRuleContext ctx, AstListenerDhcp listenerDhcp)
        {
            AstAddressListener.AstAddressListener1 result = new AstAddressListener.AstAddressListener1(ctx, listenerDhcp);
            return result;
        }
        
        /// <summary>
        /// address_listener : 
        ///    WITH IP ( listener_ip_address 
        /// </summary>
        public static AstAddressListener AddressListener(ParserRuleContext ctx, AstListenerIpAddress listenerIpAddress)
        {
            AstAddressListener.AstAddressListener2 result = new AstAddressListener.AstAddressListener2(ctx, listenerIpAddress);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_primary
    /// 	 : ENDPOINT_URL  EQUAL  url_value
    /// 	 | availability_mode_set
    /// 	 | FAILOVER_MODE  EQUAL  failover = auto_manual
    /// 	 | seeding_mode_set
    /// 	 | backup_priority_set
    /// </summary>
    public abstract partial class AstAlterAvailabilityReplicatPrimary : AstBnfRule
    {
        
        protected static string _rule = "alter_availability_replicat_primary\r\n\t : ENDPOINT_URL  EQUAL  url_value\r\n\t | avai" +
            "lability_mode_set\r\n\t | FAILOVER_MODE  EQUAL  failover = auto_manual\r\n\t | seeding" +
            "_mode_set\r\n\t | backup_priority_set";
        
        /// <summary>
        /// alter_availability_replicat_primary : ENDPOINT_URL EQUAL url_value 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary1 : AstAlterAvailabilityReplicatPrimary
        {
            
            private AstUrlValue _urlValue;
            
            internal AstAlterAvailabilityReplicatPrimary1(ParserRuleContext ctx, AstUrlValue urlValue) : 
                    base(ctx)
            {
                _urlValue = urlValue;
            }
            
            public virtual AstUrlValue UrlValue
            {
                get
                {
                    return _urlValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : availability_mode_set 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary2 : AstAlterAvailabilityReplicatPrimary
        {
            
            private AstAvailabilityModeSet _availabilityModeSet;
            
            internal AstAlterAvailabilityReplicatPrimary2(ParserRuleContext ctx, AstAvailabilityModeSet availabilityModeSet) : 
                    base(ctx)
            {
                _availabilityModeSet = availabilityModeSet;
            }
            
            public virtual AstAvailabilityModeSet AvailabilityModeSet
            {
                get
                {
                    return _availabilityModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : FAILOVER_MODE EQUAL failover=auto_manual 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary3 : AstAlterAvailabilityReplicatPrimary
        {
            
            private AstAutoManual _failover;
            
            internal AstAlterAvailabilityReplicatPrimary3(ParserRuleContext ctx, AstAutoManual failover) : 
                    base(ctx)
            {
                _failover = failover;
            }
            
            public virtual AstAutoManual Failover
            {
                get
                {
                    return _failover;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : seeding_mode_set 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary4 : AstAlterAvailabilityReplicatPrimary
        {
            
            private AstSeedingModeSet _seedingModeSet;
            
            internal AstAlterAvailabilityReplicatPrimary4(ParserRuleContext ctx, AstSeedingModeSet seedingModeSet) : 
                    base(ctx)
            {
                _seedingModeSet = seedingModeSet;
            }
            
            public virtual AstSeedingModeSet SeedingModeSet
            {
                get
                {
                    return _seedingModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat_primary : backup_priority_set 
        /// </summary>
        public partial class AstAlterAvailabilityReplicatPrimary5 : AstAlterAvailabilityReplicatPrimary
        {
            
            private AstBackupPrioritySet _backupPrioritySet;
            
            internal AstAlterAvailabilityReplicatPrimary5(ParserRuleContext ctx, AstBackupPrioritySet backupPrioritySet) : 
                    base(ctx)
            {
                _backupPrioritySet = backupPrioritySet;
            }
            
            public virtual AstBackupPrioritySet BackupPrioritySet
            {
                get
                {
                    return _backupPrioritySet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicatPrimary(this);
            }
        }
        

        
        internal AstAlterAvailabilityReplicatPrimary(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityReplicatPrimary(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityReplicatPrimary Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityReplicatPrimary.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1(ctx, ((AstUrlValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2(ctx, ((AstAvailabilityModeSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3(ctx, ((AstAutoManual)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4(ctx, ((AstSeedingModeSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5(ctx, ((AstBackupPrioritySet)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUrlValue), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAvailabilityModeSet), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAutoManual), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstSeedingModeSet), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupPrioritySet), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    ENDPOINT_URL EQUAL url_value 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstUrlValue urlValue)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary1(ctx, urlValue);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    availability_mode_set 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstAvailabilityModeSet availabilityModeSet)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary2(ctx, availabilityModeSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    FAILOVER_MODE EQUAL failover=auto_manual 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstAutoManual failover)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary3(ctx, failover);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    seeding_mode_set 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstSeedingModeSet seedingModeSet)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary4(ctx, seedingModeSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : 
        ///    backup_priority_set 
        /// </summary>
        public static AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary(ParserRuleContext ctx, AstBackupPrioritySet backupPrioritySet)
        {
            AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5 result = new AstAlterAvailabilityReplicatPrimary.AstAlterAvailabilityReplicatPrimary5(ctx, backupPrioritySet);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_primary_role
    /// 	 : allow_connections_set
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET
    /// 	 | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
    /// </summary>
    public abstract partial class AstAlterAvailabilityPrimaryRole : AstBnfRule
    {
        
        protected static string _rule = "alter_availability_primary_role\r\n\t : allow_connections_set\r\n\t | READ_ONLY_ROUTING" +
            "_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET\r\n\t | SESSION_TIMEOUT  EQUAL  " +
            "session_timeout = decimal";
        
        /// <summary>
        /// alter_availability_primary_role : allow_connections_set 
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole1 : AstAlterAvailabilityPrimaryRole
        {
            
            private AstAllowConnectionsSet _allowConnectionsSet;
            
            internal AstAlterAvailabilityPrimaryRole1(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet) : 
                    base(ctx)
            {
                _allowConnectionsSet = allowConnectionsSet;
            }
            
            public virtual AstAllowConnectionsSet AllowConnectionsSet
            {
                get
                {
                    return _allowConnectionsSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        /// <summary>
        /// alter_availability_primary_role : READ_ONLY_ROUTING_LIST EQUAL LR_BRACKET routing_list RR_BRACKET 
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole2 : AstAlterAvailabilityPrimaryRole
        {
            
            private AstRoutingList _routingList;
            
            internal AstAlterAvailabilityPrimaryRole2(ParserRuleContext ctx, AstRoutingList routingList) : 
                    base(ctx)
            {
                _routingList = routingList;
            }
            
            public virtual AstRoutingList RoutingList
            {
                get
                {
                    return _routingList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        /// <summary>
        /// alter_availability_primary_role : SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public partial class AstAlterAvailabilityPrimaryRole3 : AstAlterAvailabilityPrimaryRole
        {
            
            private AstDecimal _sessionTimeout;
            
            internal AstAlterAvailabilityPrimaryRole3(ParserRuleContext ctx, AstDecimal sessionTimeout) : 
                    base(ctx)
            {
                _sessionTimeout = sessionTimeout;
            }
            
            public virtual AstDecimal SessionTimeout
            {
                get
                {
                    return _sessionTimeout;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityPrimaryRole(this);
            }
        }
        

        
        internal AstAlterAvailabilityPrimaryRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityPrimaryRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityPrimaryRole Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityPrimaryRole.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1(ctx, ((AstAllowConnectionsSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2(ctx, ((AstRoutingList)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllowConnectionsSet), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstRoutingList), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    allow_connections_set 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet)
        {
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole1(ctx, allowConnectionsSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( routing_list ) 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(ParserRuleContext ctx, AstRoutingList routingList)
        {
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole2(ctx, routingList);
            return result;
        }
        
        /// <summary>
        /// alter_availability_primary_role : 
        ///    SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole(ParserRuleContext ctx, AstDecimal sessionTimeout)
        {
            AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3 result = new AstAlterAvailabilityPrimaryRole.AstAlterAvailabilityPrimaryRole3(ctx, sessionTimeout);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_replicat
    /// 	 : alter_availability_replicat_add
    /// 	 | REMOVE  REPLICA  ON  server_instance_txt
    /// 	 | alter_availability_replicat_modify
    /// </summary>
    public abstract partial class AstAlterAvailabilityReplicat : AstBnfRule
    {
        
        protected static string _rule = "alter_availability_replicat\r\n\t : alter_availability_replicat_add\r\n\t | REMOVE  REP" +
            "LICA  ON  server_instance_txt\r\n\t | alter_availability_replicat_modify";
        
        /// <summary>
        /// alter_availability_replicat : alter_availability_replicat_add 
        /// </summary>
        public partial class AstAlterAvailabilityReplicat1 : AstAlterAvailabilityReplicat
        {
            
            private AstAlterAvailabilityReplicatAdd _alterAvailabilityReplicatAdd;
            
            internal AstAlterAvailabilityReplicat1(ParserRuleContext ctx, AstAlterAvailabilityReplicatAdd alterAvailabilityReplicatAdd) : 
                    base(ctx)
            {
                _alterAvailabilityReplicatAdd = alterAvailabilityReplicatAdd;
            }
            
            public virtual AstAlterAvailabilityReplicatAdd AlterAvailabilityReplicatAdd
            {
                get
                {
                    return _alterAvailabilityReplicatAdd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicat(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat : REMOVE REPLICA ON server_instance_txt 
        /// </summary>
        public partial class AstAlterAvailabilityReplicat2 : AstAlterAvailabilityReplicat
        {
            
            private AstServerInstanceTxt _serverInstanceTxt;
            
            internal AstAlterAvailabilityReplicat2(ParserRuleContext ctx, AstServerInstanceTxt serverInstanceTxt) : 
                    base(ctx)
            {
                _serverInstanceTxt = serverInstanceTxt;
            }
            
            public virtual AstServerInstanceTxt ServerInstanceTxt
            {
                get
                {
                    return _serverInstanceTxt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicat(this);
            }
        }
        /// <summary>
        /// alter_availability_replicat : alter_availability_replicat_modify 
        /// </summary>
        public partial class AstAlterAvailabilityReplicat3 : AstAlterAvailabilityReplicat
        {
            
            private AstAlterAvailabilityReplicatModify _alterAvailabilityReplicatModify;
            
            internal AstAlterAvailabilityReplicat3(ParserRuleContext ctx, AstAlterAvailabilityReplicatModify alterAvailabilityReplicatModify) : 
                    base(ctx)
            {
                _alterAvailabilityReplicatModify = alterAvailabilityReplicatModify;
            }
            
            public virtual AstAlterAvailabilityReplicatModify AlterAvailabilityReplicatModify
            {
                get
                {
                    return _alterAvailabilityReplicatModify;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityReplicat(this);
            }
        }
        

        
        internal AstAlterAvailabilityReplicat(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityReplicat(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityReplicat(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityReplicat Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityReplicat.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat1(ctx, ((AstAlterAvailabilityReplicatAdd)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat2(ctx, ((AstServerInstanceTxt)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat3(ctx, ((AstAlterAvailabilityReplicatModify)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityReplicatAdd), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstServerInstanceTxt), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityReplicatModify), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_replicat : 
        ///    alter_availability_replicat_add 
        /// </summary>
        public static AstAlterAvailabilityReplicat AlterAvailabilityReplicat(ParserRuleContext ctx, AstAlterAvailabilityReplicatAdd alterAvailabilityReplicatAdd)
        {
            AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat1 result = new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat1(ctx, alterAvailabilityReplicatAdd);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat : 
        ///    REMOVE REPLICA ON server_instance_txt 
        /// </summary>
        public static AstAlterAvailabilityReplicat AlterAvailabilityReplicat(ParserRuleContext ctx, AstServerInstanceTxt serverInstanceTxt)
        {
            AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat2 result = new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat2(ctx, serverInstanceTxt);
            return result;
        }
        
        /// <summary>
        /// alter_availability_replicat : 
        ///    alter_availability_replicat_modify 
        /// </summary>
        public static AstAlterAvailabilityReplicat AlterAvailabilityReplicat(ParserRuleContext ctx, AstAlterAvailabilityReplicatModify alterAvailabilityReplicatModify)
        {
            AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat3 result = new AstAlterAvailabilityReplicat.AstAlterAvailabilityReplicat3(ctx, alterAvailabilityReplicatModify);
            return result;
        }
    }
    
    /// <summary>
    /// availability_group_options
    /// 	 : JOIN
    /// 	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url_set  COMMA  availability_mode_set  COMMA  failover_mode_manuel  COMMA  seeding_mode_set)  RR_BRACKET)+
    /// 	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url_set  (COMMA?  availability_mode_set)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode_set)?)  RR_BRACKET)+
    /// </summary>
    public abstract partial class AstAvailabilityGroupOptions : AstBnfRule
    {
        
        protected static string _rule = @"availability_group_options
	 : JOIN
	 | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url_set  COMMA  availability_mode_set  COMMA  failover_mode_manuel  COMMA  seeding_mode_set)  RR_BRACKET)+
	 | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url_set  (COMMA?  availability_mode_set)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode_set)?)  RR_BRACKET)+";
        
        /// <summary>
        /// availability_group_options : JOIN 
        /// </summary>
        public partial class AstAvailabilityGroupOptions1 : AstAvailabilityGroupOptions
        {
            
            internal AstAvailabilityGroupOptions1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// availability_group_options : JOIN AVAILABILITY GROUP ON COMMA? ag_name=stringtext WITH LR_BRACKET listener_url_set COMMA availability_mode_set COMMA failover_mode_manuel COMMA seeding_mode_set RR_BRACKET 
        /// </summary>
        public partial class AstAvailabilityGroupOptions2 : AstAvailabilityGroupOptions
        {
            
            private AstStringtext _agName;
            
            private AstListenerUrlSet _listenerUrlSet;
            
            private AstAvailabilityModeSet _availabilityModeSet;
            
            private AstFailoverModeManuel _failoverModeManuel;
            
            private AstSeedingModeSet _seedingModeSet;
            
            internal AstAvailabilityGroupOptions2(ParserRuleContext ctx, AstStringtext agName, AstListenerUrlSet listenerUrlSet, AstAvailabilityModeSet availabilityModeSet, AstFailoverModeManuel failoverModeManuel, AstSeedingModeSet seedingModeSet) : 
                    base(ctx)
            {
                _agName = agName;
                _listenerUrlSet = listenerUrlSet;
                _availabilityModeSet = availabilityModeSet;
                _failoverModeManuel = failoverModeManuel;
                _seedingModeSet = seedingModeSet;
            }
            
            public virtual AstStringtext AgName
            {
                get
                {
                    return _agName;
                }
            }
            
            public virtual AstListenerUrlSet ListenerUrlSet
            {
                get
                {
                    return _listenerUrlSet;
                }
            }
            
            public virtual AstAvailabilityModeSet AvailabilityModeSet
            {
                get
                {
                    return _availabilityModeSet;
                }
            }
            
            public virtual AstFailoverModeManuel FailoverModeManuel
            {
                get
                {
                    return _failoverModeManuel;
                }
            }
            
            public virtual AstSeedingModeSet SeedingModeSet
            {
                get
                {
                    return _seedingModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// availability_group_options : MODIFY AVAILABILITY GROUP ON COMMA? ag_name_modified=stringtext WITH LR_BRACKET listener_url_set COMMA? availability_mode_set COMMA? failover_mode_manuel COMMA? seeding_mode_set RR_BRACKET 
        /// </summary>
        public partial class AstAvailabilityGroupOptions3 : AstAvailabilityGroupOptions
        {
            
            private AstStringtext _agNameModified;
            
            private AstListenerUrlSet _listenerUrlSet;
            
            private AstAvailabilityModeSet _availabilityModeSet;
            
            private AstFailoverModeManuel _failoverModeManuel;
            
            private AstSeedingModeSet _seedingModeSet;
            
            internal AstAvailabilityGroupOptions3(ParserRuleContext ctx, AstStringtext agNameModified, AstListenerUrlSet listenerUrlSet, AstAvailabilityModeSet availabilityModeSet, AstFailoverModeManuel failoverModeManuel, AstSeedingModeSet seedingModeSet) : 
                    base(ctx)
            {
                _agNameModified = agNameModified;
                _listenerUrlSet = listenerUrlSet;
                _availabilityModeSet = availabilityModeSet;
                _failoverModeManuel = failoverModeManuel;
                _seedingModeSet = seedingModeSet;
            }
            
            public virtual AstStringtext AgNameModified
            {
                get
                {
                    return _agNameModified;
                }
            }
            
            public virtual AstListenerUrlSet ListenerUrlSet
            {
                get
                {
                    return _listenerUrlSet;
                }
            }
            
            public virtual AstAvailabilityModeSet AvailabilityModeSet
            {
                get
                {
                    return _availabilityModeSet;
                }
            }
            
            public virtual AstFailoverModeManuel FailoverModeManuel
            {
                get
                {
                    return _failoverModeManuel;
                }
            }
            
            public virtual AstSeedingModeSet SeedingModeSet
            {
                get
                {
                    return _seedingModeSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAvailabilityGroupOptions(this);
            }
        }
        

        
        internal AstAvailabilityGroupOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAvailabilityGroupOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstAvailabilityGroupOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAvailabilityGroupOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAvailabilityGroupOptions.Resolve(list);
            if ((index == 1))
            {
                return new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions1(ctx);
            }
            if ((index == 6))
            {
                return new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions2(ctx, ((AstStringtext)(list[0])), ((AstListenerUrlSet)(list[1])), ((AstAvailabilityModeSet)(list[2])), ((AstFailoverModeManuel)(list[3])), ((AstSeedingModeSet)(list[4])));
            }
            if ((index == 6))
            {
                return new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions3(ctx, ((AstStringtext)(list[0])), ((AstListenerUrlSet)(list[1])), ((AstAvailabilityModeSet)(list[2])), ((AstFailoverModeManuel)(list[3])), ((AstSeedingModeSet)(list[4])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstListenerUrlSet), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAvailabilityModeSet), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFailoverModeManuel), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstSeedingModeSet), false, false))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstListenerUrlSet), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAvailabilityModeSet), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFailoverModeManuel), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstSeedingModeSet), false, false))
                                {
                                    return 2;
                                }
                            }
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// availability_group_options : 
        ///    JOIN 
        /// </summary>
        public static AstAvailabilityGroupOptions AvailabilityGroupOptions(ParserRuleContext ctx)
        {
            AstAvailabilityGroupOptions.AstAvailabilityGroupOptions1 result = new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions1(ctx);
            return result;
        }
        
        /// <summary>
        /// availability_group_options : 
        ///    JOIN AVAILABILITY GROUP ON ,? ag_name=stringtext WITH ( listener_url_set , availability_mode_set , failover_mode_manuel , seeding_mode_set ) 
        /// </summary>
        public static AstAvailabilityGroupOptions AvailabilityGroupOptions(ParserRuleContext ctx, AstStringtext agName, AstListenerUrlSet listenerUrlSet, AstAvailabilityModeSet availabilityModeSet, AstFailoverModeManuel failoverModeManuel, AstSeedingModeSet seedingModeSet)
        {
            AstAvailabilityGroupOptions.AstAvailabilityGroupOptions2 result = new AstAvailabilityGroupOptions.AstAvailabilityGroupOptions2(ctx, agName, listenerUrlSet, availabilityModeSet, failoverModeManuel, seedingModeSet);
            return result;
        }
    }
    
    /// <summary>
    /// failover_mode_manuel
    /// 	 : FAILOVER_MODE  EQUAL  MANUAL
    /// </summary>
    public partial class AstFailoverModeManuel : AstBnfRule
    {
        
        protected static string _rule = "failover_mode_manuel\r\n\t : FAILOVER_MODE  EQUAL  MANUAL";
        
        internal AstFailoverModeManuel(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstFailoverModeManuel(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstFailoverModeManuel(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstFailoverModeManuel(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFailoverModeManuel(this);
        }
        
        /// <summary>
        /// failover_mode_manuel : 
        ///    FAILOVER_MODE EQUAL MANUAL 
        /// </summary>
        public static AstFailoverModeManuel FailoverModeManuel(ParserRuleContext ctx)
        {
            AstFailoverModeManuel result = new AstFailoverModeManuel(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_role
    /// 	 : secondary_role_args
    /// 	 | primary_role_args
    /// </summary>
    public abstract partial class AstAlterRole : AstBnfRule
    {
        
        protected static string _rule = "alter_role\r\n\t : secondary_role_args\r\n\t | primary_role_args";
        
        /// <summary>
        /// alter_role : secondary_role_args 
        /// </summary>
        public partial class AstAlterRole1 : AstAlterRole
        {
            
            private AstSecondaryRoleArgs _secondaryRoleArgs;
            
            internal AstAlterRole1(ParserRuleContext ctx, AstSecondaryRoleArgs secondaryRoleArgs) : 
                    base(ctx)
            {
                _secondaryRoleArgs = secondaryRoleArgs;
            }
            
            public virtual AstSecondaryRoleArgs SecondaryRoleArgs
            {
                get
                {
                    return _secondaryRoleArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterRole(this);
            }
        }
        /// <summary>
        /// alter_role : primary_role_args 
        /// </summary>
        public partial class AstAlterRole2 : AstAlterRole
        {
            
            private AstPrimaryRoleArgs _primaryRoleArgs;
            
            internal AstAlterRole2(ParserRuleContext ctx, AstPrimaryRoleArgs primaryRoleArgs) : 
                    base(ctx)
            {
                _primaryRoleArgs = primaryRoleArgs;
            }
            
            public virtual AstPrimaryRoleArgs PrimaryRoleArgs
            {
                get
                {
                    return _primaryRoleArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterRole(this);
            }
        }
        

        
        internal AstAlterRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterRole Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterRole.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterRole.AstAlterRole1(ctx, ((AstSecondaryRoleArgs)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterRole.AstAlterRole2(ctx, ((AstPrimaryRoleArgs)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSecondaryRoleArgs), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstPrimaryRoleArgs), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_role : 
        ///    secondary_role_args 
        /// </summary>
        public static AstAlterRole AlterRole(ParserRuleContext ctx, AstSecondaryRoleArgs secondaryRoleArgs)
        {
            AstAlterRole.AstAlterRole1 result = new AstAlterRole.AstAlterRole1(ctx, secondaryRoleArgs);
            return result;
        }
        
        /// <summary>
        /// alter_role : 
        ///    primary_role_args 
        /// </summary>
        public static AstAlterRole AlterRole(ParserRuleContext ctx, AstPrimaryRoleArgs primaryRoleArgs)
        {
            AstAlterRole.AstAlterRole2 result = new AstAlterRole.AstAlterRole2(ctx, primaryRoleArgs);
            return result;
        }
    }
    
    /// <summary>
    /// primary_role_config
    /// 	 : allow_connections_set
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  string_list_not  RR_BRACKET
    /// 	 | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
    /// </summary>
    public abstract partial class AstPrimaryRoleConfig : AstBnfRule
    {
        
        protected static string _rule = "primary_role_config\r\n\t : allow_connections_set\r\n\t | READ_ONLY_ROUTING_LIST  EQUAL" +
            "  LR_BRACKET  string_list_not  RR_BRACKET\r\n\t | SESSION_TIMEOUT  EQUAL  session_t" +
            "imeout = decimal";
        
        /// <summary>
        /// primary_role_config : allow_connections_set 
        /// </summary>
        public partial class AstPrimaryRoleConfig1 : AstPrimaryRoleConfig
        {
            
            private AstAllowConnectionsSet _allowConnectionsSet;
            
            internal AstPrimaryRoleConfig1(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet) : 
                    base(ctx)
            {
                _allowConnectionsSet = allowConnectionsSet;
            }
            
            public virtual AstAllowConnectionsSet AllowConnectionsSet
            {
                get
                {
                    return _allowConnectionsSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimaryRoleConfig(this);
            }
        }
        /// <summary>
        /// primary_role_config : READ_ONLY_ROUTING_LIST EQUAL LR_BRACKET string_list_not RR_BRACKET 
        /// </summary>
        public partial class AstPrimaryRoleConfig2 : AstPrimaryRoleConfig
        {
            
            private AstStringListNot _stringListNot;
            
            internal AstPrimaryRoleConfig2(ParserRuleContext ctx, AstStringListNot stringListNot) : 
                    base(ctx)
            {
                _stringListNot = stringListNot;
            }
            
            public virtual AstStringListNot StringListNot
            {
                get
                {
                    return _stringListNot;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimaryRoleConfig(this);
            }
        }
        /// <summary>
        /// primary_role_config : SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public partial class AstPrimaryRoleConfig3 : AstPrimaryRoleConfig
        {
            
            private AstDecimal _sessionTimeout;
            
            internal AstPrimaryRoleConfig3(ParserRuleContext ctx, AstDecimal sessionTimeout) : 
                    base(ctx)
            {
                _sessionTimeout = sessionTimeout;
            }
            
            public virtual AstDecimal SessionTimeout
            {
                get
                {
                    return _sessionTimeout;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimaryRoleConfig(this);
            }
        }
        

        
        internal AstPrimaryRoleConfig(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrimaryRoleConfig(Position p) : 
                base(p)
        {
        }
        
        internal AstPrimaryRoleConfig(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPrimaryRoleConfig Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPrimaryRoleConfig.Resolve(list);
            if ((index == 2))
            {
                return new AstPrimaryRoleConfig.AstPrimaryRoleConfig1(ctx, ((AstAllowConnectionsSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPrimaryRoleConfig.AstPrimaryRoleConfig2(ctx, ((AstStringListNot)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPrimaryRoleConfig.AstPrimaryRoleConfig3(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllowConnectionsSet), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringListNot), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// primary_role_config : 
        ///    allow_connections_set 
        /// </summary>
        public static AstPrimaryRoleConfig PrimaryRoleConfig(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet)
        {
            AstPrimaryRoleConfig.AstPrimaryRoleConfig1 result = new AstPrimaryRoleConfig.AstPrimaryRoleConfig1(ctx, allowConnectionsSet);
            return result;
        }
        
        /// <summary>
        /// primary_role_config : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( string_list_not ) 
        /// </summary>
        public static AstPrimaryRoleConfig PrimaryRoleConfig(ParserRuleContext ctx, AstStringListNot stringListNot)
        {
            AstPrimaryRoleConfig.AstPrimaryRoleConfig2 result = new AstPrimaryRoleConfig.AstPrimaryRoleConfig2(ctx, stringListNot);
            return result;
        }
        
        /// <summary>
        /// primary_role_config : 
        ///    SESSION_TIMEOUT EQUAL session_timeout=decimal 
        /// </summary>
        public static AstPrimaryRoleConfig PrimaryRoleConfig(ParserRuleContext ctx, AstDecimal sessionTimeout)
        {
            AstPrimaryRoleConfig.AstPrimaryRoleConfig3 result = new AstPrimaryRoleConfig.AstPrimaryRoleConfig3(ctx, sessionTimeout);
            return result;
        }
    }
    
    /// <summary>
    /// string_list_not
    /// 	 : string_list
    /// 	 | NONE
    /// </summary>
    public abstract partial class AstStringListNot : AstBnfRule
    {
        
        protected static string _rule = "string_list_not\r\n\t : string_list\r\n\t | NONE";
        
        /// <summary>
        /// string_list_not : string_list 
        /// </summary>
        public partial class AstStringListNot1 : AstStringListNot
        {
            
            private AstStringList _stringList;
            
            internal AstStringListNot1(ParserRuleContext ctx, AstStringList stringList) : 
                    base(ctx)
            {
                _stringList = stringList;
            }
            
            public virtual AstStringList StringList
            {
                get
                {
                    return _stringList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringListNot(this);
            }
        }
        /// <summary>
        /// string_list_not : NONE 
        /// </summary>
        public partial class AstStringListNot2 : AstStringListNot
        {
            
            internal AstStringListNot2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringListNot(this);
            }
        }
        

        
        internal AstStringListNot(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringListNot(Position p) : 
                base(p)
        {
        }
        
        internal AstStringListNot(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStringListNot Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStringListNot.Resolve(list);
            if ((index == 2))
            {
                return new AstStringListNot.AstStringListNot1(ctx, ((AstStringList)(list[0])));
            }
            if ((index == 1))
            {
                return new AstStringListNot.AstStringListNot2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringList), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// string_list_not : 
        ///    string_list 
        /// </summary>
        public static AstStringListNot StringListNot(ParserRuleContext ctx, AstStringList stringList)
        {
            AstStringListNot.AstStringListNot1 result = new AstStringListNot.AstStringListNot1(ctx, stringList);
            return result;
        }
        
        /// <summary>
        /// string_list_not : 
        ///    NONE 
        /// </summary>
        public static AstStringListNot StringListNot(ParserRuleContext ctx)
        {
            AstStringListNot.AstStringListNot2 result = new AstStringListNot.AstStringListNot2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// secondary_role_config
    /// 	 : allow_connections_set
    /// 	 | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET
    /// </summary>
    public abstract partial class AstSecondaryRoleConfig : AstBnfRule
    {
        
        protected static string _rule = "secondary_role_config\r\n\t : allow_connections_set\r\n\t | READ_ONLY_ROUTING_LIST  EQU" +
            "AL  LR_BRACKET  stringtext  RR_BRACKET";
        
        /// <summary>
        /// secondary_role_config : allow_connections_set 
        /// </summary>
        public partial class AstSecondaryRoleConfig1 : AstSecondaryRoleConfig
        {
            
            private AstAllowConnectionsSet _allowConnectionsSet;
            
            internal AstSecondaryRoleConfig1(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet) : 
                    base(ctx)
            {
                _allowConnectionsSet = allowConnectionsSet;
            }
            
            public virtual AstAllowConnectionsSet AllowConnectionsSet
            {
                get
                {
                    return _allowConnectionsSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecondaryRoleConfig(this);
            }
        }
        /// <summary>
        /// secondary_role_config : READ_ONLY_ROUTING_LIST EQUAL LR_BRACKET stringtext RR_BRACKET 
        /// </summary>
        public partial class AstSecondaryRoleConfig2 : AstSecondaryRoleConfig
        {
            
            private AstStringtext _stringtext;
            
            internal AstSecondaryRoleConfig2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecondaryRoleConfig(this);
            }
        }
        

        
        internal AstSecondaryRoleConfig(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSecondaryRoleConfig(Position p) : 
                base(p)
        {
        }
        
        internal AstSecondaryRoleConfig(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSecondaryRoleConfig Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSecondaryRoleConfig.Resolve(list);
            if ((index == 2))
            {
                return new AstSecondaryRoleConfig.AstSecondaryRoleConfig1(ctx, ((AstAllowConnectionsSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSecondaryRoleConfig.AstSecondaryRoleConfig2(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllowConnectionsSet), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// secondary_role_config : 
        ///    allow_connections_set 
        /// </summary>
        public static AstSecondaryRoleConfig SecondaryRoleConfig(ParserRuleContext ctx, AstAllowConnectionsSet allowConnectionsSet)
        {
            AstSecondaryRoleConfig.AstSecondaryRoleConfig1 result = new AstSecondaryRoleConfig.AstSecondaryRoleConfig1(ctx, allowConnectionsSet);
            return result;
        }
        
        /// <summary>
        /// secondary_role_config : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( stringtext ) 
        /// </summary>
        public static AstSecondaryRoleConfig SecondaryRoleConfig(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstSecondaryRoleConfig.AstSecondaryRoleConfig2 result = new AstSecondaryRoleConfig.AstSecondaryRoleConfig2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_options
    /// 	 : SET  LR_BRACKET  alter_availability_group_option_set  RR_BRACKET
    /// 	 | add_remove_database
    /// 	 | alter_availability_replicat
    /// 	 | alter_options_listener
    /// 	 | alter_role
    /// 	 | availability_group_options
    /// 	 | grant_deny  CREATE  ANY  DATABASE
    /// 	 | FAILOVER
    /// 	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
    /// 	 | OFFLINE
    /// 	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptions : AstBnfRule
    {
        
        protected static string _rule = @"alter_availability_group_options
	 : SET  LR_BRACKET  alter_availability_group_option_set  RR_BRACKET
	 | add_remove_database
	 | alter_availability_replicat
	 | alter_options_listener
	 | alter_role
	 | availability_group_options
	 | grant_deny  CREATE  ANY  DATABASE
	 | FAILOVER
	 | FORCE_FAILOVER_ALLOW_DATA_LOSS
	 | OFFLINE
	 | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET";
        
        /// <summary>
        /// alter_availability_group_options : SET LR_BRACKET alter_availability_group_option_set RR_BRACKET 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions1 : AstAlterAvailabilityGroupOptions
        {
            
            private AstAlterAvailabilityGroupOptionSet _alterAvailabilityGroupOptionSet;
            
            internal AstAlterAvailabilityGroupOptions1(ParserRuleContext ctx, AstAlterAvailabilityGroupOptionSet alterAvailabilityGroupOptionSet) : 
                    base(ctx)
            {
                _alterAvailabilityGroupOptionSet = alterAvailabilityGroupOptionSet;
            }
            
            public virtual AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet
            {
                get
                {
                    return _alterAvailabilityGroupOptionSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : add_remove_database 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions2 : AstAlterAvailabilityGroupOptions
        {
            
            private AstAddRemoveDatabase _addRemoveDatabase;
            
            internal AstAlterAvailabilityGroupOptions2(ParserRuleContext ctx, AstAddRemoveDatabase addRemoveDatabase) : 
                    base(ctx)
            {
                _addRemoveDatabase = addRemoveDatabase;
            }
            
            public virtual AstAddRemoveDatabase AddRemoveDatabase
            {
                get
                {
                    return _addRemoveDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_availability_replicat 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions3 : AstAlterAvailabilityGroupOptions
        {
            
            private AstAlterAvailabilityReplicat _alterAvailabilityReplicat;
            
            internal AstAlterAvailabilityGroupOptions3(ParserRuleContext ctx, AstAlterAvailabilityReplicat alterAvailabilityReplicat) : 
                    base(ctx)
            {
                _alterAvailabilityReplicat = alterAvailabilityReplicat;
            }
            
            public virtual AstAlterAvailabilityReplicat AlterAvailabilityReplicat
            {
                get
                {
                    return _alterAvailabilityReplicat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_options_listener 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions4 : AstAlterAvailabilityGroupOptions
        {
            
            private AstAlterOptionsListener _alterOptionsListener;
            
            internal AstAlterAvailabilityGroupOptions4(ParserRuleContext ctx, AstAlterOptionsListener alterOptionsListener) : 
                    base(ctx)
            {
                _alterOptionsListener = alterOptionsListener;
            }
            
            public virtual AstAlterOptionsListener AlterOptionsListener
            {
                get
                {
                    return _alterOptionsListener;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : alter_role 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions5 : AstAlterAvailabilityGroupOptions
        {
            
            private AstAlterRole _alterRole;
            
            internal AstAlterAvailabilityGroupOptions5(ParserRuleContext ctx, AstAlterRole alterRole) : 
                    base(ctx)
            {
                _alterRole = alterRole;
            }
            
            public virtual AstAlterRole AlterRole
            {
                get
                {
                    return _alterRole;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : availability_group_options 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions6 : AstAlterAvailabilityGroupOptions
        {
            
            private AstAvailabilityGroupOptions _availabilityGroupOptions;
            
            internal AstAlterAvailabilityGroupOptions6(ParserRuleContext ctx, AstAvailabilityGroupOptions availabilityGroupOptions) : 
                    base(ctx)
            {
                _availabilityGroupOptions = availabilityGroupOptions;
            }
            
            public virtual AstAvailabilityGroupOptions AvailabilityGroupOptions
            {
                get
                {
                    return _availabilityGroupOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : grant_deny CREATE ANY DATABASE 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions7 : AstAlterAvailabilityGroupOptions
        {
            
            private AstGrantDeny _grantDeny;
            
            internal AstAlterAvailabilityGroupOptions7(ParserRuleContext ctx, AstGrantDeny grantDeny) : 
                    base(ctx)
            {
                _grantDeny = grantDeny;
            }
            
            public virtual AstGrantDeny GrantDeny
            {
                get
                {
                    return _grantDeny;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : FAILOVER 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions8 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : FORCE_FAILOVER_ALLOW_DATA_LOSS 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions9 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : OFFLINE 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions10 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions10(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        /// <summary>
        /// alter_availability_group_options : WITH LR_BRACKET DTC_SUPPORT EQUAL PER_DB RR_BRACKET 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptions11 : AstAlterAvailabilityGroupOptions
        {
            
            internal AstAlterAvailabilityGroupOptions11(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptions(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityGroupOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityGroupOptions.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1(ctx, ((AstAlterAvailabilityGroupOptionSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2(ctx, ((AstAddRemoveDatabase)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3(ctx, ((AstAlterAvailabilityReplicat)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4(ctx, ((AstAlterOptionsListener)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5(ctx, ((AstAlterRole)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6(ctx, ((AstAvailabilityGroupOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7(ctx, ((AstGrantDeny)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions8(ctx);
            }
            if ((index == 1))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions9(ctx);
            }
            if ((index == 1))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions10(ctx);
            }
            if ((index == 1))
            {
                return new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions11(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityGroupOptionSet), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAddRemoveDatabase), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterAvailabilityReplicat), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterOptionsListener), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterRole), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstAvailabilityGroupOptions), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstGrantDeny), false, false))
                {
                    return 7;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    SET ( alter_availability_group_option_set ) 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterAvailabilityGroupOptionSet alterAvailabilityGroupOptionSet)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions1(ctx, alterAvailabilityGroupOptionSet);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    add_remove_database 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAddRemoveDatabase addRemoveDatabase)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions2(ctx, addRemoveDatabase);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_availability_replicat 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterAvailabilityReplicat alterAvailabilityReplicat)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions3(ctx, alterAvailabilityReplicat);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_options_listener 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterOptionsListener alterOptionsListener)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions4(ctx, alterOptionsListener);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    alter_role 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAlterRole alterRole)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions5(ctx, alterRole);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    availability_group_options 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstAvailabilityGroupOptions availabilityGroupOptions)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions6(ctx, availabilityGroupOptions);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    grant_deny CREATE ANY DATABASE 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx, AstGrantDeny grantDeny)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions7(ctx, grantDeny);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_options : 
        ///    FAILOVER 
        /// </summary>
        public static AstAlterAvailabilityGroupOptions AlterAvailabilityGroupOptions(ParserRuleContext ctx)
        {
            AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions8 result = new AstAlterAvailabilityGroupOptions.AstAlterAvailabilityGroupOptions8(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_availability_group_option_set
    /// 	 : AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none
    /// 	 | FAILURE_CONDITION_LEVEL  EQUAL  decimal
    /// 	 | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal
    /// 	 | DB_FAILOVER  EQUAL  on_off
    /// 	 | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal
    /// </summary>
    public abstract partial class AstAlterAvailabilityGroupOptionSet : AstBnfRule
    {
        
        protected static string _rule = @"alter_availability_group_option_set
	 : AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none
	 | FAILURE_CONDITION_LEVEL  EQUAL  decimal
	 | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal
	 | DB_FAILOVER  EQUAL  on_off
	 | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal";
        
        /// <summary>
        /// alter_availability_group_option_set : AUTOMATED_BACKUP_PREFERENCE EQUAL primary_secondary_none 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet1 : AstAlterAvailabilityGroupOptionSet
        {
            
            private AstPrimarySecondaryNone _primarySecondaryNone;
            
            internal AstAlterAvailabilityGroupOptionSet1(ParserRuleContext ctx, AstPrimarySecondaryNone primarySecondaryNone) : 
                    base(ctx)
            {
                _primarySecondaryNone = primarySecondaryNone;
            }
            
            public virtual AstPrimarySecondaryNone PrimarySecondaryNone
            {
                get
                {
                    return _primarySecondaryNone;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : FAILURE_CONDITION_LEVEL EQUAL decimal 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet2 : AstAlterAvailabilityGroupOptionSet
        {
            
            private AstDecimal _decimal;
            
            internal AstAlterAvailabilityGroupOptionSet2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : HEALTH_CHECK_TIMEOUT EQUAL milliseconds=decimal 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet3 : AstAlterAvailabilityGroupOptionSet
        {
            
            private AstDecimal _milliseconds;
            
            internal AstAlterAvailabilityGroupOptionSet3(ParserRuleContext ctx, AstDecimal milliseconds) : 
                    base(ctx)
            {
                _milliseconds = milliseconds;
            }
            
            public virtual AstDecimal Milliseconds
            {
                get
                {
                    return _milliseconds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : DB_FAILOVER EQUAL on_off 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet4 : AstAlterAvailabilityGroupOptionSet
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterAvailabilityGroupOptionSet4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        /// <summary>
        /// alter_availability_group_option_set : REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT EQUAL decimal 
        /// </summary>
        public partial class AstAlterAvailabilityGroupOptionSet5 : AstAlterAvailabilityGroupOptionSet
        {
            
            private AstDecimal _decimal;
            
            internal AstAlterAvailabilityGroupOptionSet5(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterAvailabilityGroupOptionSet(this);
            }
        }
        

        
        internal AstAlterAvailabilityGroupOptionSet(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionSet(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterAvailabilityGroupOptionSet(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterAvailabilityGroupOptionSet Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterAvailabilityGroupOptionSet.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet1(ctx, ((AstPrimarySecondaryNone)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet3(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet5(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPrimarySecondaryNone), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_availability_group_option_set : 
        ///    AUTOMATED_BACKUP_PREFERENCE EQUAL primary_secondary_none 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet(ParserRuleContext ctx, AstPrimarySecondaryNone primarySecondaryNone)
        {
            AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet1 result = new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet1(ctx, primarySecondaryNone);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_option_set : 
        ///    FAILURE_CONDITION_LEVEL EQUAL decimal 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet2 result = new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_availability_group_option_set : 
        ///    DB_FAILOVER EQUAL on_off 
        /// </summary>
        public static AstAlterAvailabilityGroupOptionSet AlterAvailabilityGroupOptionSet(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet4 result = new AstAlterAvailabilityGroupOptionSet.AstAlterAvailabilityGroupOptionSet4(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// broker_local_service_name
    /// 	 : LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?  id_ | ANY)  COMMA?
    /// </summary>
    public abstract partial class AstBrokerLocalServiceName : AstBnfRule
    {
        
        protected static string _rule = "broker_local_service_name\r\n\t : LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH? " +
            " id_ | ANY)  COMMA?";
        
        /// <summary>
        /// broker_local_service_name : LOCAL_SERVICE_NAME EQUAL DOUBLE_FORWARD_SLASH? id_ COMMA? 
        /// </summary>
        public partial class AstBrokerLocalServiceName1 : AstBrokerLocalServiceName
        {
            
            private AstId _id;
            
            internal AstBrokerLocalServiceName1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBrokerLocalServiceName(this);
            }
        }
        /// <summary>
        /// broker_local_service_name : LOCAL_SERVICE_NAME EQUAL ANY COMMA? 
        /// </summary>
        public partial class AstBrokerLocalServiceName2 : AstBrokerLocalServiceName
        {
            
            internal AstBrokerLocalServiceName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBrokerLocalServiceName(this);
            }
        }
        

        
        internal AstBrokerLocalServiceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBrokerLocalServiceName(Position p) : 
                base(p)
        {
        }
        
        internal AstBrokerLocalServiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBrokerLocalServiceName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBrokerLocalServiceName.Resolve(list);
            if ((index == 2))
            {
                return new AstBrokerLocalServiceName.AstBrokerLocalServiceName1(ctx, ((AstId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBrokerLocalServiceName.AstBrokerLocalServiceName2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// broker_local_service_name : 
        ///    LOCAL_SERVICE_NAME EQUAL DOUBLE_FORWARD_SLASH? id_ COMMA? 
        /// </summary>
        public static AstBrokerLocalServiceName BrokerLocalServiceName(ParserRuleContext ctx, AstId id)
        {
            AstBrokerLocalServiceName.AstBrokerLocalServiceName1 result = new AstBrokerLocalServiceName.AstBrokerLocalServiceName1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// broker_local_service_name : 
        ///    LOCAL_SERVICE_NAME EQUAL ANY COMMA? 
        /// </summary>
        public static AstBrokerLocalServiceName BrokerLocalServiceName(ParserRuleContext ctx)
        {
            AstBrokerLocalServiceName.AstBrokerLocalServiceName2 result = new AstBrokerLocalServiceName.AstBrokerLocalServiceName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// id_any
    /// 	 : id_
    /// 	 | ANY
    /// </summary>
    public abstract partial class AstIdAny : AstBnfRule
    {
        
        protected static string _rule = "id_any\r\n\t : id_\r\n\t | ANY";
        
        /// <summary>
        /// id_any : id_ 
        /// </summary>
        public partial class AstIdAny1 : AstIdAny
        {
            
            private AstId _id;
            
            internal AstIdAny1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdAny(this);
            }
        }
        /// <summary>
        /// id_any : ANY 
        /// </summary>
        public partial class AstIdAny2 : AstIdAny
        {
            
            internal AstIdAny2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdAny(this);
            }
        }
        

        
        internal AstIdAny(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIdAny(Position p) : 
                base(p)
        {
        }
        
        internal AstIdAny(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIdAny Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIdAny.Resolve(list);
            if ((index == 2))
            {
                return new AstIdAny.AstIdAny1(ctx, ((AstId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstIdAny.AstIdAny2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// id_any : 
        ///    id_ 
        /// </summary>
        public static AstIdAny IdAny(ParserRuleContext ctx, AstId id)
        {
            AstIdAny.AstIdAny1 result = new AstIdAny.AstIdAny1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// id_any : 
        ///    ANY 
        /// </summary>
        public static AstIdAny IdAny(ParserRuleContext ctx)
        {
            AstIdAny.AstIdAny2 result = new AstIdAny.AstIdAny2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// stringtext_any
    /// 	 : id_
    /// 	 | ANY
    /// </summary>
    public abstract partial class AstStringtextAny : AstBnfRule
    {
        
        protected static string _rule = "stringtext_any\r\n\t : id_\r\n\t | ANY";
        
        /// <summary>
        /// stringtext_any : id_ 
        /// </summary>
        public partial class AstStringtextAny1 : AstStringtextAny
        {
            
            private AstId _id;
            
            internal AstStringtextAny1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringtextAny(this);
            }
        }
        /// <summary>
        /// stringtext_any : ANY 
        /// </summary>
        public partial class AstStringtextAny2 : AstStringtextAny
        {
            
            internal AstStringtextAny2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringtextAny(this);
            }
        }
        

        
        internal AstStringtextAny(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringtextAny(Position p) : 
                base(p)
        {
        }
        
        internal AstStringtextAny(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStringtextAny Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStringtextAny.Resolve(list);
            if ((index == 2))
            {
                return new AstStringtextAny.AstStringtextAny1(ctx, ((AstId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstStringtextAny.AstStringtextAny2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// stringtext_any : 
        ///    id_ 
        /// </summary>
        public static AstStringtextAny StringtextAny(ParserRuleContext ctx, AstId id)
        {
            AstStringtextAny.AstStringtextAny1 result = new AstStringtextAny.AstStringtextAny1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// stringtext_any : 
        ///    ANY 
        /// </summary>
        public static AstStringtextAny StringtextAny(ParserRuleContext ctx)
        {
            AstStringtextAny.AstStringtextAny2 result = new AstStringtextAny.AstStringtextAny2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// drop_broker_priority
    /// 	 : DROP  BROKER  PRIORITY  ConversationPriorityName = id_
    /// </summary>
    public partial class AstDropBrokerPriority : AstBnfRule
    {
        
        protected static string _rule = "drop_broker_priority\r\n\t : DROP  BROKER  PRIORITY  ConversationPriorityName = id_";
        
        internal AstDropBrokerPriority(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropBrokerPriority(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropBrokerPriority(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropBrokerPriority(ParserRuleContext ctx, AstId conversationPriorityName) : 
                base(ctx)
        {
            _ConversationPriorityName = conversationPriorityName;
        }
        
        public virtual AstId _ConversationPriorityName
        {
            get
            {
                return _ConversationPriorityName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBrokerPriority(this);
        }
        
        /// <summary>
        /// drop_broker_priority : 
        ///    DROP BROKER PRIORITY ConversationPriorityName=id_ 
        /// </summary>
        public static AstDropBrokerPriority DropBrokerPriority(ParserRuleContext ctx, AstId conversationPriorityName)
        {
            AstDropBrokerPriority result = new AstDropBrokerPriority(ctx, conversationPriorityName);
            return result;
        }
    }
    
    /// <summary>
    /// drop_contract
    /// 	 : DROP  CONTRACT  dropped_contract_name = id_
    /// </summary>
    public partial class AstDropContract : AstBnfRule
    {
        
        protected static string _rule = "drop_contract\r\n\t : DROP  CONTRACT  dropped_contract_name = id_";
        
        internal AstDropContract(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropContract(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropContract(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropContract(ParserRuleContext ctx, AstId droppedContractName) : 
                base(ctx)
        {
            _droppedContractName = droppedContractName;
        }
        
        public virtual AstId _droppedContractName
        {
            get
            {
                return _droppedContractName;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropContract(this);
        }
        
        /// <summary>
        /// drop_contract : 
        ///    DROP CONTRACT dropped_contract_name=id_ 
        /// </summary>
        public static AstDropContract DropContract(ParserRuleContext ctx, AstId droppedContractName)
        {
            AstDropContract result = new AstDropContract(ctx, droppedContractName);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database
    /// 	 : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+
    /// </summary>
    public partial class AstDropDatabase : AstBnfRule
    {
        
        protected static string _rule = "drop_database\r\n\t : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+";
        
        internal AstDropDatabase(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabase(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabase(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropDatabase(ParserRuleContext ctx, AstDatabaseId databaseId) : 
                base(ctx)
        {
            _databaseId = databaseId;
        }
        
        public virtual AstDatabaseId _databaseId
        {
            get
            {
                return _databaseId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabase(this);
        }
        
        /// <summary>
        /// drop_database : 
        ///    DROP DATABASE IF EXISTS COMMA? database_id 
        /// </summary>
        public static AstDropDatabase DropDatabase(ParserRuleContext ctx, AstDatabaseId databaseId)
        {
            AstDropDatabase result = new AstDropDatabase(ctx, databaseId);
            return result;
        }
    }
    
    /// <summary>
    /// drop_database_encryption_key
    /// 	 : DROP  DATABASE  ENCRYPTION  KEY
    /// </summary>
    public partial class AstDropDatabaseEncryptionKey : AstBnfRule
    {
        
        protected static string _rule = "drop_database_encryption_key\r\n\t : DROP  DATABASE  ENCRYPTION  KEY";
        
        internal AstDropDatabaseEncryptionKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropDatabaseEncryptionKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseEncryptionKey(this);
        }
        
        /// <summary>
        /// drop_database_encryption_key : 
        ///    DROP DATABASE ENCRYPTION KEY 
        /// </summary>
        public static AstDropDatabaseEncryptionKey DropDatabaseEncryptionKey(ParserRuleContext ctx)
        {
            AstDropDatabaseEncryptionKey result = new AstDropDatabaseEncryptionKey(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// drop_default
    /// 	 : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)
    /// </summary>
    public partial class AstDropDefault : AstBnfRule
    {
        
        protected static string _rule = "drop_default\r\n\t : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)";
        
        internal AstDropDefault(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropDefault(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropDefault(ParserRuleContext ctx, AstDefaultRef defaultRef) : 
                base(ctx)
        {
            _defaultRef = defaultRef;
        }
        
        public virtual AstDefaultRef _defaultRef
        {
            get
            {
                return _defaultRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDefault(this);
        }
        
        /// <summary>
        /// drop_default : 
        ///    DROP DEFAULT IF EXISTS COMMA? default_ref 
        /// </summary>
        public static AstDropDefault DropDefault(ParserRuleContext ctx, AstDefaultRef defaultRef)
        {
            AstDropDefault result = new AstDropDefault(ctx, defaultRef);
            return result;
        }
    }
    
    /// <summary>
    /// event_notification_on
    /// 	 : server_database
    /// 	 | QUEUE  queue_id
    /// </summary>
    public abstract partial class AstEventNotificationOn : AstBnfRule
    {
        
        protected static string _rule = "event_notification_on\r\n\t : server_database\r\n\t | QUEUE  queue_id";
        
        /// <summary>
        /// event_notification_on : server_database 
        /// </summary>
        public partial class AstEventNotificationOn1 : AstEventNotificationOn
        {
            
            private AstServerDatabase _serverDatabase;
            
            internal AstEventNotificationOn1(ParserRuleContext ctx, AstServerDatabase serverDatabase) : 
                    base(ctx)
            {
                _serverDatabase = serverDatabase;
            }
            
            public virtual AstServerDatabase ServerDatabase
            {
                get
                {
                    return _serverDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventNotificationOn(this);
            }
        }
        /// <summary>
        /// event_notification_on : QUEUE queue_id 
        /// </summary>
        public partial class AstEventNotificationOn2 : AstEventNotificationOn
        {
            
            private AstQueueId _queueId;
            
            internal AstEventNotificationOn2(ParserRuleContext ctx, AstQueueId queueId) : 
                    base(ctx)
            {
                _queueId = queueId;
            }
            
            public virtual AstQueueId QueueId
            {
                get
                {
                    return _queueId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventNotificationOn(this);
            }
        }
        

        
        internal AstEventNotificationOn(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventNotificationOn(Position p) : 
                base(p)
        {
        }
        
        internal AstEventNotificationOn(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventNotificationOn Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventNotificationOn.Resolve(list);
            if ((index == 2))
            {
                return new AstEventNotificationOn.AstEventNotificationOn1(ctx, ((AstServerDatabase)(list[0])));
            }
            if ((index == 2))
            {
                return new AstEventNotificationOn.AstEventNotificationOn2(ctx, ((AstQueueId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerDatabase), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstQueueId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_notification_on : 
        ///    server_database 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(ParserRuleContext ctx, AstServerDatabase serverDatabase)
        {
            AstEventNotificationOn.AstEventNotificationOn1 result = new AstEventNotificationOn.AstEventNotificationOn1(ctx, serverDatabase);
            return result;
        }
        
        /// <summary>
        /// event_notification_on : 
        ///    QUEUE queue_id 
        /// </summary>
        public static AstEventNotificationOn EventNotificationOn(ParserRuleContext ctx, AstQueueId queueId)
        {
            AstEventNotificationOn.AstEventNotificationOn2 result = new AstEventNotificationOn.AstEventNotificationOn2(ctx, queueId);
            return result;
        }
    }
    
    /// <summary>
    /// drop_master_key
    /// 	 : DROP  MASTER  KEY
    /// </summary>
    public partial class AstDropMasterKey : AstBnfRule
    {
        
        protected static string _rule = "drop_master_key\r\n\t : DROP  MASTER  KEY";
        
        internal AstDropMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropMasterKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMasterKey(this);
        }
        
        /// <summary>
        /// drop_master_key : 
        ///    DROP MASTER KEY 
        /// </summary>
        public static AstDropMasterKey DropMasterKey(ParserRuleContext ctx)
        {
            AstDropMasterKey result = new AstDropMasterKey(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// drop_rule
    /// 	 : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?
    /// </summary>
    public partial class AstDropRule : AstBnfRule
    {
        
        protected static string _rule = "drop_rule\r\n\t : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?";
        
        internal AstDropRule(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropRule(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropRule(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropRule(ParserRuleContext ctx, AstSchemaRuleRef schemaRuleRef) : 
                base(ctx)
        {
            _schemaRuleRef = schemaRuleRef;
        }
        
        public virtual AstSchemaRuleRef _schemaRuleRef
        {
            get
            {
                return _schemaRuleRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRule(this);
        }
        
        /// <summary>
        /// drop_rule : 
        ///    DROP RULE IF EXISTS COMMA? schema_rule_ref 
        /// </summary>
        public static AstDropRule DropRule(ParserRuleContext ctx, AstSchemaRuleRef schemaRuleRef)
        {
            AstDropRule result = new AstDropRule(ctx, schemaRuleRef);
            return result;
        }
    }
    
    /// <summary>
    /// drop_sequence
    /// 	 : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequence_ref)?
    /// </summary>
    public partial class AstDropSequence : AstBnfRule
    {
        
        protected static string _rule = "drop_sequence\r\n\t : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequen" +
            "ce_ref)?";
        
        internal AstDropSequence(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropSequence(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropSequence(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropSequence(ParserRuleContext ctx, AstDatabaseSchemaSequenceRef databaseSchemaSequenceRef) : 
                base(ctx)
        {
            _databaseSchemaSequenceRef = databaseSchemaSequenceRef;
        }
        
        public virtual AstDatabaseSchemaSequenceRef _databaseSchemaSequenceRef
        {
            get
            {
                return _databaseSchemaSequenceRef;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSequence(this);
        }
        
        /// <summary>
        /// drop_sequence : 
        ///    DROP SEQUENCE IF EXISTS COMMA? database_schema_sequence_ref 
        /// </summary>
        public static AstDropSequence DropSequence(ParserRuleContext ctx, AstDatabaseSchemaSequenceRef databaseSchemaSequenceRef)
        {
            AstDropSequence result = new AstDropSequence(ctx, databaseSchemaSequenceRef);
            return result;
        }
    }
    
    /// <summary>
    /// drop_signature_by
    /// 	 : CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstDropSignatureBy : AstBnfRule
    {
        
        protected static string _rule = "drop_signature_by\r\n\t : CERTIFICATE  certificate_id\r\n\t | ASYMMETRIC  KEY  asym_key" +
            "_id";
        
        /// <summary>
        /// drop_signature_by : CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstDropSignatureBy1 : AstDropSignatureBy
        {
            
            private AstCertificateId _certificateId;
            
            internal AstDropSignatureBy1(ParserRuleContext ctx, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _certificateId = certificateId;
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDropSignatureBy(this);
            }
        }
        /// <summary>
        /// drop_signature_by : ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstDropSignatureBy2 : AstDropSignatureBy
        {
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstDropSignatureBy2(ParserRuleContext ctx, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDropSignatureBy(this);
            }
        }
        

        
        internal AstDropSignatureBy(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDropSignatureBy(Position p) : 
                base(p)
        {
        }
        
        internal AstDropSignatureBy(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDropSignatureBy Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDropSignatureBy.Resolve(list);
            if ((index == 2))
            {
                return new AstDropSignatureBy.AstDropSignatureBy1(ctx, ((AstCertificateId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDropSignatureBy.AstDropSignatureBy2(ctx, ((AstAsymKeyId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAsymKeyId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// drop_signature_by : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstDropSignatureBy DropSignatureBy(ParserRuleContext ctx, AstCertificateId certificateId)
        {
            AstDropSignatureBy.AstDropSignatureBy1 result = new AstDropSignatureBy.AstDropSignatureBy1(ctx, certificateId);
            return result;
        }
        
        /// <summary>
        /// drop_signature_by : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstDropSignatureBy DropSignatureBy(ParserRuleContext ctx, AstAsymKeyId asymKeyId)
        {
            AstDropSignatureBy.AstDropSignatureBy2 result = new AstDropSignatureBy.AstDropSignatureBy2(ctx, asymKeyId);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_name
    /// 	 : schema_trigger_refs
    /// 	 | ALL
    /// </summary>
    public abstract partial class AstTriggerName : AstBnfRule
    {
        
        protected static string _rule = "trigger_name\r\n\t : schema_trigger_refs\r\n\t | ALL";
        
        /// <summary>
        /// trigger_name : schema_trigger_refs 
        /// </summary>
        public partial class AstTriggerName1 : AstTriggerName
        {
            
            private AstSchemaTriggerRefs _schemaTriggerRefs;
            
            internal AstTriggerName1(ParserRuleContext ctx, AstSchemaTriggerRefs schemaTriggerRefs) : 
                    base(ctx)
            {
                _schemaTriggerRefs = schemaTriggerRefs;
            }
            
            public virtual AstSchemaTriggerRefs SchemaTriggerRefs
            {
                get
                {
                    return _schemaTriggerRefs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerName(this);
            }
        }
        /// <summary>
        /// trigger_name : ALL 
        /// </summary>
        public partial class AstTriggerName2 : AstTriggerName
        {
            
            internal AstTriggerName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerName(this);
            }
        }
        

        
        internal AstTriggerName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTriggerName(Position p) : 
                base(p)
        {
        }
        
        internal AstTriggerName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTriggerName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTriggerName.Resolve(list);
            if ((index == 2))
            {
                return new AstTriggerName.AstTriggerName1(ctx, ((AstSchemaTriggerRefs)(list[0])));
            }
            if ((index == 1))
            {
                return new AstTriggerName.AstTriggerName2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaTriggerRefs), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// trigger_name : 
        ///    schema_trigger_refs 
        /// </summary>
        public static AstTriggerName TriggerName(ParserRuleContext ctx, AstSchemaTriggerRefs schemaTriggerRefs)
        {
            AstTriggerName.AstTriggerName1 result = new AstTriggerName.AstTriggerName1(ctx, schemaTriggerRefs);
            return result;
        }
        
        /// <summary>
        /// trigger_name : 
        ///    ALL 
        /// </summary>
        public static AstTriggerName TriggerName(ParserRuleContext ctx)
        {
            AstTriggerName.AstTriggerName2 result = new AstTriggerName.AstTriggerName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// trigger_target
    /// 	 : schema_object_ref
    /// 	 | all_server_database
    /// </summary>
    public abstract partial class AstTriggerTarget : AstBnfRule
    {
        
        protected static string _rule = "trigger_target\r\n\t : schema_object_ref\r\n\t | all_server_database";
        
        /// <summary>
        /// trigger_target : schema_object_ref 
        /// </summary>
        public partial class AstTriggerTarget1 : AstTriggerTarget
        {
            
            private AstSchemaObjectRef _schemaObjectRef;
            
            internal AstTriggerTarget1(ParserRuleContext ctx, AstSchemaObjectRef schemaObjectRef) : 
                    base(ctx)
            {
                _schemaObjectRef = schemaObjectRef;
            }
            
            public virtual AstSchemaObjectRef SchemaObjectRef
            {
                get
                {
                    return _schemaObjectRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerTarget(this);
            }
        }
        /// <summary>
        /// trigger_target : all_server_database 
        /// </summary>
        public partial class AstTriggerTarget2 : AstTriggerTarget
        {
            
            private AstAllServerDatabase _allServerDatabase;
            
            internal AstTriggerTarget2(ParserRuleContext ctx, AstAllServerDatabase allServerDatabase) : 
                    base(ctx)
            {
                _allServerDatabase = allServerDatabase;
            }
            
            public virtual AstAllServerDatabase AllServerDatabase
            {
                get
                {
                    return _allServerDatabase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTriggerTarget(this);
            }
        }
        

        
        internal AstTriggerTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTriggerTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstTriggerTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTriggerTarget Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTriggerTarget.Resolve(list);
            if ((index == 2))
            {
                return new AstTriggerTarget.AstTriggerTarget1(ctx, ((AstSchemaObjectRef)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTriggerTarget.AstTriggerTarget2(ctx, ((AstAllServerDatabase)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaObjectRef), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAllServerDatabase), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// trigger_target : 
        ///    schema_object_ref 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(ParserRuleContext ctx, AstSchemaObjectRef schemaObjectRef)
        {
            AstTriggerTarget.AstTriggerTarget1 result = new AstTriggerTarget.AstTriggerTarget1(ctx, schemaObjectRef);
            return result;
        }
        
        /// <summary>
        /// trigger_target : 
        ///    all_server_database 
        /// </summary>
        public static AstTriggerTarget TriggerTarget(ParserRuleContext ctx, AstAllServerDatabase allServerDatabase)
        {
            AstTriggerTarget.AstTriggerTarget2 result = new AstTriggerTarget.AstTriggerTarget2(ctx, allServerDatabase);
            return result;
        }
    }
    
    /// <summary>
    /// lock_table_delay
    /// 	 : WAIT  seconds = decimal
    /// 	 | NOWAIT
    /// </summary>
    public abstract partial class AstLockTableDelay : AstBnfRule
    {
        
        protected static string _rule = "lock_table_delay\r\n\t : WAIT  seconds = decimal\r\n\t | NOWAIT";
        
        /// <summary>
        /// lock_table_delay : WAIT seconds=decimal 
        /// </summary>
        public partial class AstLockTableDelay1 : AstLockTableDelay
        {
            
            private AstDecimal _seconds;
            
            internal AstLockTableDelay1(ParserRuleContext ctx, AstDecimal seconds) : 
                    base(ctx)
            {
                _seconds = seconds;
            }
            
            public virtual AstDecimal Seconds
            {
                get
                {
                    return _seconds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLockTableDelay(this);
            }
        }
        /// <summary>
        /// lock_table_delay : NOWAIT 
        /// </summary>
        public partial class AstLockTableDelay2 : AstLockTableDelay
        {
            
            internal AstLockTableDelay2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLockTableDelay(this);
            }
        }
        

        
        internal AstLockTableDelay(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLockTableDelay(Position p) : 
                base(p)
        {
        }
        
        internal AstLockTableDelay(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstLockTableDelay Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstLockTableDelay.Resolve(list);
            if ((index == 2))
            {
                return new AstLockTableDelay.AstLockTableDelay1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstLockTableDelay.AstLockTableDelay2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// lock_table_delay : 
        ///    WAIT seconds=decimal 
        /// </summary>
        public static AstLockTableDelay LockTableDelay(ParserRuleContext ctx, AstDecimal seconds)
        {
            AstLockTableDelay.AstLockTableDelay1 result = new AstLockTableDelay.AstLockTableDelay1(ctx, seconds);
            return result;
        }
        
        /// <summary>
        /// lock_table_delay : 
        ///    NOWAIT 
        /// </summary>
        public static AstLockTableDelay LockTableDelay(ParserRuleContext ctx)
        {
            AstLockTableDelay.AstLockTableDelay2 result = new AstLockTableDelay.AstLockTableDelay2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_column_master_key
    /// 	 : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstCreateColumnMasterKey : AstBnfRule
    {
        
        protected static string _rule = "create_column_master_key\r\n\t : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  " +
            "LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext" +
            "  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET";
        
        internal AstCreateColumnMasterKey(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateColumnMasterKey(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateColumnMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateColumnMasterKey(ParserRuleContext ctx, AstId keyName, AstStringtext keyStoreProviderName, AstStringtext keyPath) : 
                base(ctx)
        {
            _keyName = keyName;
            _keyStoreProviderName = keyStoreProviderName;
            _keyPath = keyPath;
        }
        
        public virtual AstId _keyName
        {
            get
            {
                return _keyName;
            }
        }
        
        public virtual AstStringtext _keyStoreProviderName
        {
            get
            {
                return _keyStoreProviderName;
            }
        }
        
        public virtual AstStringtext _keyPath
        {
            get
            {
                return _keyPath;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnMasterKey(this);
        }
        
        /// <summary>
        /// create_column_master_key : 
        ///    CREATE COLUMN MASTER KEY key_name=id_ WITH ( KEY_STORE_PROVIDER_NAME EQUAL key_store_provider_name=stringtext , KEY_PATH EQUAL key_path=stringtext ) 
        /// </summary>
        public static AstCreateColumnMasterKey CreateColumnMasterKey(ParserRuleContext ctx, AstId keyName, AstStringtext keyStoreProviderName, AstStringtext keyPath)
        {
            AstCreateColumnMasterKey result = new AstCreateColumnMasterKey(ctx, keyName, keyStoreProviderName, keyPath);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_with
    /// 	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET
    /// </summary>
    public partial class AstCreateOrAlterEventSessionWith : AstBnfRule
    {
        
        protected static string _rule = @"create_or_alter_event_session_with
	 : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET";
        
        internal AstCreateOrAlterEventSessionWith(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateOrAlterEventSessionWith(ParserRuleContext ctx, AstSessionArgMaxMemory sessionArgMaxMemory, AstSessionArgEventRetentionMode sessionArgEventRetentionMode, AstSessionArgMaxDispatch sessionArgMaxDispatch, AstSessionArgMaxEventSize sessionArgMaxEventSize, AstSessionArgMemoryPartition sessionArgMemoryPartition, AstSessionArgTrackCausality sessionArgTrackCausality, AstSessionArgStartupState sessionArgStartupState) : 
                base(ctx)
        {
            _sessionArgMaxMemory = sessionArgMaxMemory;
            _sessionArgEventRetentionMode = sessionArgEventRetentionMode;
            _sessionArgMaxDispatch = sessionArgMaxDispatch;
            _sessionArgMaxEventSize = sessionArgMaxEventSize;
            _sessionArgMemoryPartition = sessionArgMemoryPartition;
            _sessionArgTrackCausality = sessionArgTrackCausality;
            _sessionArgStartupState = sessionArgStartupState;
        }
        
        public virtual AstSessionArgMaxMemory _sessionArgMaxMemory
        {
            get
            {
                return _sessionArgMaxMemory;
            }
        }
        
        public virtual AstSessionArgEventRetentionMode _sessionArgEventRetentionMode
        {
            get
            {
                return _sessionArgEventRetentionMode;
            }
        }
        
        public virtual AstSessionArgMaxDispatch _sessionArgMaxDispatch
        {
            get
            {
                return _sessionArgMaxDispatch;
            }
        }
        
        public virtual AstSessionArgMaxEventSize _sessionArgMaxEventSize
        {
            get
            {
                return _sessionArgMaxEventSize;
            }
        }
        
        public virtual AstSessionArgMemoryPartition _sessionArgMemoryPartition
        {
            get
            {
                return _sessionArgMemoryPartition;
            }
        }
        
        public virtual AstSessionArgTrackCausality _sessionArgTrackCausality
        {
            get
            {
                return _sessionArgTrackCausality;
            }
        }
        
        public virtual AstSessionArgStartupState _sessionArgStartupState
        {
            get
            {
                return _sessionArgStartupState;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionWith(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_with : 
        ///    WITH ( COMMA? session_arg_max_memory COMMA? session_arg_event_retention_mode COMMA? session_arg_max_dispatch COMMA? session_arg_max_event_size COMMA? session_arg_memory_partition COMMA? session_arg_track_causality COMMA? session_arg_startup_state ) 
        /// </summary>
        public static AstCreateOrAlterEventSessionWith CreateOrAlterEventSessionWith(ParserRuleContext ctx, AstSessionArgMaxMemory sessionArgMaxMemory, AstSessionArgEventRetentionMode sessionArgEventRetentionMode, AstSessionArgMaxDispatch sessionArgMaxDispatch, AstSessionArgMaxEventSize sessionArgMaxEventSize, AstSessionArgMemoryPartition sessionArgMemoryPartition, AstSessionArgTrackCausality sessionArgTrackCausality, AstSessionArgStartupState sessionArgStartupState)
        {
            AstCreateOrAlterEventSessionWith result = new AstCreateOrAlterEventSessionWith(ctx, sessionArgMaxMemory, sessionArgEventRetentionMode, sessionArgMaxDispatch, sessionArgMaxEventSize, sessionArgMemoryPartition, sessionArgTrackCausality, sessionArgStartupState);
            return result;
        }
    }
    
    /// <summary>
    /// session_arg_max_dispatch
    /// 	 : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | INFINITE)
    /// </summary>
    public abstract partial class AstSessionArgMaxDispatch : AstBnfRule
    {
        
        protected static string _rule = "session_arg_max_dispatch\r\n\t : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | IN" +
            "FINITE)";
        
        /// <summary>
        /// session_arg_max_dispatch : MAX_DISPATCH_LATENCY EQUAL decimal SECONDS 
        /// </summary>
        public partial class AstSessionArgMaxDispatch1 : AstSessionArgMaxDispatch
        {
            
            private AstDecimal _decimal;
            
            internal AstSessionArgMaxDispatch1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSessionArgMaxDispatch(this);
            }
        }
        /// <summary>
        /// session_arg_max_dispatch : MAX_DISPATCH_LATENCY EQUAL INFINITE 
        /// </summary>
        public partial class AstSessionArgMaxDispatch2 : AstSessionArgMaxDispatch
        {
            
            internal AstSessionArgMaxDispatch2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSessionArgMaxDispatch(this);
            }
        }
        

        
        internal AstSessionArgMaxDispatch(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSessionArgMaxDispatch(Position p) : 
                base(p)
        {
        }
        
        internal AstSessionArgMaxDispatch(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSessionArgMaxDispatch Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSessionArgMaxDispatch.Resolve(list);
            if ((index == 2))
            {
                return new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// session_arg_max_dispatch : 
        ///    MAX_DISPATCH_LATENCY EQUAL decimal SECONDS 
        /// </summary>
        public static AstSessionArgMaxDispatch SessionArgMaxDispatch(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSessionArgMaxDispatch.AstSessionArgMaxDispatch1 result = new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// session_arg_max_dispatch : 
        ///    MAX_DISPATCH_LATENCY EQUAL INFINITE 
        /// </summary>
        public static AstSessionArgMaxDispatch SessionArgMaxDispatch(ParserRuleContext ctx)
        {
            AstSessionArgMaxDispatch.AstSessionArgMaxDispatch2 result = new AstSessionArgMaxDispatch.AstSessionArgMaxDispatch2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// target_parameter_value
    /// 	 : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)
    /// </summary>
    public abstract partial class AstTargetParameterValue : AstBnfRule
    {
        
        protected static string _rule = "target_parameter_value\r\n\t : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)";
        
        /// <summary>
        /// target_parameter_value : LR_BRACKET? decimal RR_BRACKET? 
        /// </summary>
        public partial class AstTargetParameterValue1 : AstTargetParameterValue
        {
            
            private AstDecimal _decimal;
            
            internal AstTargetParameterValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTargetParameterValue(this);
            }
        }
        /// <summary>
        /// target_parameter_value : stringtext 
        /// </summary>
        public partial class AstTargetParameterValue2 : AstTargetParameterValue
        {
            
            private AstStringtext _stringtext;
            
            internal AstTargetParameterValue2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTargetParameterValue(this);
            }
        }
        

        
        internal AstTargetParameterValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTargetParameterValue(Position p) : 
                base(p)
        {
        }
        
        internal AstTargetParameterValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTargetParameterValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTargetParameterValue.Resolve(list);
            if ((index == 2))
            {
                return new AstTargetParameterValue.AstTargetParameterValue1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTargetParameterValue.AstTargetParameterValue2(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// target_parameter_value : 
        ///    LR_BRACKET? decimal RR_BRACKET? 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTargetParameterValue.AstTargetParameterValue1 result = new AstTargetParameterValue.AstTargetParameterValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// target_parameter_value : 
        ///    stringtext 
        /// </summary>
        public static AstTargetParameterValue TargetParameterValue(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstTargetParameterValue.AstTargetParameterValue2 result = new AstTargetParameterValue.AstTargetParameterValue2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_expression
    /// 	 : (COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+
    /// </summary>
    public abstract partial class AstEventSessionPredicateExpression : AstBnfRule
    {
        
        protected static string _rule = "event_session_predicate_expression\r\n\t : (COMMA?  and_or?  NOT?  (event_session_pr" +
            "edicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+";
        
        /// <summary>
        /// event_session_predicate_expression : COMMA? and_or? NOT? event_session_predicate_factor 
        /// </summary>
        public partial class AstEventSessionPredicateExpression1 : AstEventSessionPredicateExpression
        {
            
            private AstAndOr _andOr;
            
            private AstEventSessionPredicateFactor _eventSessionPredicateFactor;
            
            internal AstEventSessionPredicateExpression1(ParserRuleContext ctx, AstAndOr andOr, AstEventSessionPredicateFactor eventSessionPredicateFactor) : 
                    base(ctx)
            {
                _andOr = andOr;
                _eventSessionPredicateFactor = eventSessionPredicateFactor;
            }
            
            public virtual AstAndOr AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstEventSessionPredicateFactor EventSessionPredicateFactor
            {
                get
                {
                    return _eventSessionPredicateFactor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateExpression(this);
            }
        }
        /// <summary>
        /// event_session_predicate_expression : COMMA? and_or? NOT? LR_BRACKET event_session_predicate_expression RR_BRACKET 
        /// </summary>
        public partial class AstEventSessionPredicateExpression2 : AstEventSessionPredicateExpression
        {
            
            private AstAndOr _andOr;
            
            private AstEventSessionPredicateExpression _eventSessionPredicateExpression;
            
            internal AstEventSessionPredicateExpression2(ParserRuleContext ctx, AstAndOr andOr, AstEventSessionPredicateExpression eventSessionPredicateExpression) : 
                    base(ctx)
            {
                _andOr = andOr;
                _eventSessionPredicateExpression = eventSessionPredicateExpression;
            }
            
            public virtual AstAndOr AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstEventSessionPredicateExpression EventSessionPredicateExpression
            {
                get
                {
                    return _eventSessionPredicateExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateExpression(this);
            }
        }
        

        
        internal AstEventSessionPredicateExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionPredicateExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionPredicateExpression.Resolve(list);
            if ((index == 3))
            {
                return new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression1(ctx, ((AstAndOr)(list[0])), ((AstEventSessionPredicateFactor)(list[1])));
            }
            if ((index == 3))
            {
                return new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression2(ctx, ((AstAndOr)(list[0])), ((AstEventSessionPredicateExpression)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAndOr), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEventSessionPredicateFactor), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstAndOr), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEventSessionPredicateExpression), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_session_predicate_expression : 
        ///    COMMA? and_or? NOT? event_session_predicate_factor 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(ParserRuleContext ctx, AstAndOr andOr, AstEventSessionPredicateFactor eventSessionPredicateFactor)
        {
            AstEventSessionPredicateExpression.AstEventSessionPredicateExpression1 result = new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression1(ctx, andOr, eventSessionPredicateFactor);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_expression : 
        ///    COMMA? and_or? NOT? ( event_session_predicate_expression ) 
        /// </summary>
        public static AstEventSessionPredicateExpression EventSessionPredicateExpression(ParserRuleContext ctx, AstAndOr andOr, AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            AstEventSessionPredicateExpression.AstEventSessionPredicateExpression2 result = new AstEventSessionPredicateExpression.AstEventSessionPredicateExpression2(ctx, andOr, eventSessionPredicateExpression);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_factor
    /// 	 : event_session_predicate_leaf
    /// 	 | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstEventSessionPredicateFactor : AstBnfRule
    {
        
        protected static string _rule = "event_session_predicate_factor\r\n\t : event_session_predicate_leaf\r\n\t | LR_BRACKET " +
            " event_session_predicate_expression  RR_BRACKET";
        
        /// <summary>
        /// event_session_predicate_factor : event_session_predicate_leaf 
        /// </summary>
        public partial class AstEventSessionPredicateFactor1 : AstEventSessionPredicateFactor
        {
            
            private AstEventSessionPredicateLeaf _eventSessionPredicateLeaf;
            
            internal AstEventSessionPredicateFactor1(ParserRuleContext ctx, AstEventSessionPredicateLeaf eventSessionPredicateLeaf) : 
                    base(ctx)
            {
                _eventSessionPredicateLeaf = eventSessionPredicateLeaf;
            }
            
            public virtual AstEventSessionPredicateLeaf EventSessionPredicateLeaf
            {
                get
                {
                    return _eventSessionPredicateLeaf;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateFactor(this);
            }
        }
        /// <summary>
        /// event_session_predicate_factor : LR_BRACKET event_session_predicate_expression RR_BRACKET 
        /// </summary>
        public partial class AstEventSessionPredicateFactor2 : AstEventSessionPredicateFactor
        {
            
            private AstEventSessionPredicateExpression _eventSessionPredicateExpression;
            
            internal AstEventSessionPredicateFactor2(ParserRuleContext ctx, AstEventSessionPredicateExpression eventSessionPredicateExpression) : 
                    base(ctx)
            {
                _eventSessionPredicateExpression = eventSessionPredicateExpression;
            }
            
            public virtual AstEventSessionPredicateExpression EventSessionPredicateExpression
            {
                get
                {
                    return _eventSessionPredicateExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateFactor(this);
            }
        }
        

        
        internal AstEventSessionPredicateFactor(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateFactor(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateFactor(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionPredicateFactor Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionPredicateFactor.Resolve(list);
            if ((index == 2))
            {
                return new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1(ctx, ((AstEventSessionPredicateLeaf)(list[0])));
            }
            if ((index == 2))
            {
                return new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2(ctx, ((AstEventSessionPredicateExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventSessionPredicateLeaf), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstEventSessionPredicateExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_session_predicate_factor : 
        ///    event_session_predicate_leaf 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(ParserRuleContext ctx, AstEventSessionPredicateLeaf eventSessionPredicateLeaf)
        {
            AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1 result = new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor1(ctx, eventSessionPredicateLeaf);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_factor : 
        ///    ( event_session_predicate_expression ) 
        /// </summary>
        public static AstEventSessionPredicateFactor EventSessionPredicateFactor(ParserRuleContext ctx, AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2 result = new AstEventSessionPredicateFactor.AstEventSessionPredicateFactor2(ctx, eventSessionPredicateExpression);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf
    /// 	 : event_field_id
    /// 	 | event_session_id_source1  event_session_predicate_leaf_ope  decimal_string
    /// 	 | source1 = full_predicate_source_ref  LR_BRACKET  event_session_id_source2  RR_BRACKET
    /// </summary>
    public abstract partial class AstEventSessionPredicateLeaf : AstBnfRule
    {
        
        protected static string _rule = "event_session_predicate_leaf\r\n\t : event_field_id\r\n\t | event_session_id_source1  e" +
            "vent_session_predicate_leaf_ope  decimal_string\r\n\t | source1 = full_predicate_so" +
            "urce_ref  LR_BRACKET  event_session_id_source2  RR_BRACKET";
        
        /// <summary>
        /// event_session_predicate_leaf : event_field_id 
        /// </summary>
        public partial class AstEventSessionPredicateLeaf1 : AstEventSessionPredicateLeaf
        {
            
            private AstEventFieldId _eventFieldId;
            
            internal AstEventSessionPredicateLeaf1(ParserRuleContext ctx, AstEventFieldId eventFieldId) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf : event_session_id_source1 event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public partial class AstEventSessionPredicateLeaf2 : AstEventSessionPredicateLeaf
        {
            
            private AstEventSessionIdSource1 _eventSessionIdSource1;
            
            private AstEventSessionPredicateLeafOpe _eventSessionPredicateLeafOpe;
            
            private AstDecimalString _decimalString;
            
            internal AstEventSessionPredicateLeaf2(ParserRuleContext ctx, AstEventSessionIdSource1 eventSessionIdSource1, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _eventSessionIdSource1 = eventSessionIdSource1;
                _eventSessionPredicateLeafOpe = eventSessionPredicateLeafOpe;
                _decimalString = decimalString;
            }
            
            public virtual AstEventSessionIdSource1 EventSessionIdSource1
            {
                get
                {
                    return _eventSessionIdSource1;
                }
            }
            
            public virtual AstEventSessionPredicateLeafOpe EventSessionPredicateLeafOpe
            {
                get
                {
                    return _eventSessionPredicateLeafOpe;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf : source1=full_predicate_source_ref LR_BRACKET event_session_id_source2 RR_BRACKET 
        /// </summary>
        public partial class AstEventSessionPredicateLeaf3 : AstEventSessionPredicateLeaf
        {
            
            private AstFullPredicateSourceRef _source1;
            
            private AstEventSessionIdSource2 _eventSessionIdSource2;
            
            internal AstEventSessionPredicateLeaf3(ParserRuleContext ctx, AstFullPredicateSourceRef source1, AstEventSessionIdSource2 eventSessionIdSource2) : 
                    base(ctx)
            {
                _source1 = source1;
                _eventSessionIdSource2 = eventSessionIdSource2;
            }
            
            public virtual AstFullPredicateSourceRef Source1
            {
                get
                {
                    return _source1;
                }
            }
            
            public virtual AstEventSessionIdSource2 EventSessionIdSource2
            {
                get
                {
                    return _eventSessionIdSource2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeaf(this);
            }
        }
        

        
        internal AstEventSessionPredicateLeaf(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeaf(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeaf(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionPredicateLeaf Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionPredicateLeaf.Resolve(list);
            if ((index == 2))
            {
                return new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1(ctx, ((AstEventFieldId)(list[0])));
            }
            if ((index == 4))
            {
                return new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2(ctx, ((AstEventSessionIdSource1)(list[0])), ((AstEventSessionPredicateLeafOpe)(list[1])), ((AstDecimalString)(list[2])));
            }
            if ((index == 3))
            {
                return new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf3(ctx, ((AstFullPredicateSourceRef)(list[0])), ((AstEventSessionIdSource2)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventSessionIdSource1), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEventSessionPredicateLeafOpe), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimalString), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullPredicateSourceRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEventSessionIdSource2), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventFieldId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(ParserRuleContext ctx, AstEventFieldId eventFieldId)
        {
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf1(ctx, eventFieldId);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    event_session_id_source1 event_session_predicate_leaf_ope decimal_string 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(ParserRuleContext ctx, AstEventSessionIdSource1 eventSessionIdSource1, AstEventSessionPredicateLeafOpe eventSessionPredicateLeafOpe, AstDecimalString decimalString)
        {
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf2(ctx, eventSessionIdSource1, eventSessionPredicateLeafOpe, decimalString);
            return result;
        }
        
        /// <summary>
        /// event_session_predicate_leaf : 
        ///    source1=full_predicate_source_ref ( event_session_id_source2 ) 
        /// </summary>
        public static AstEventSessionPredicateLeaf EventSessionPredicateLeaf(ParserRuleContext ctx, AstFullPredicateSourceRef source1, AstEventSessionIdSource2 eventSessionIdSource2)
        {
            AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf3 result = new AstEventSessionPredicateLeaf.AstEventSessionPredicateLeaf3(ctx, source1, eventSessionIdSource2);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_id_source1
    /// 	 : event_field_id
    /// 	 | full_predicate_source_ref
    /// </summary>
    public abstract partial class AstEventSessionIdSource1 : AstBnfRule
    {
        
        protected static string _rule = "event_session_id_source1\r\n\t : event_field_id\r\n\t | full_predicate_source_ref";
        
        /// <summary>
        /// event_session_id_source1 : event_field_id 
        /// </summary>
        public partial class AstEventSessionIdSource11 : AstEventSessionIdSource1
        {
            
            private AstEventFieldId _eventFieldId;
            
            internal AstEventSessionIdSource11(ParserRuleContext ctx, AstEventFieldId eventFieldId) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource1(this);
            }
        }
        /// <summary>
        /// event_session_id_source1 : full_predicate_source_ref 
        /// </summary>
        public partial class AstEventSessionIdSource12 : AstEventSessionIdSource1
        {
            
            private AstFullPredicateSourceRef _fullPredicateSourceRef;
            
            internal AstEventSessionIdSource12(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef) : 
                    base(ctx)
            {
                _fullPredicateSourceRef = fullPredicateSourceRef;
            }
            
            public virtual AstFullPredicateSourceRef FullPredicateSourceRef
            {
                get
                {
                    return _fullPredicateSourceRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource1(this);
            }
        }
        

        
        internal AstEventSessionIdSource1(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionIdSource1(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionIdSource1(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionIdSource1 Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionIdSource1.Resolve(list);
            if ((index == 2))
            {
                return new AstEventSessionIdSource1.AstEventSessionIdSource11(ctx, ((AstEventFieldId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstEventSessionIdSource1.AstEventSessionIdSource12(ctx, ((AstFullPredicateSourceRef)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventFieldId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFullPredicateSourceRef), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_session_id_source1 : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionIdSource1 EventSessionIdSource1(ParserRuleContext ctx, AstEventFieldId eventFieldId)
        {
            AstEventSessionIdSource1.AstEventSessionIdSource11 result = new AstEventSessionIdSource1.AstEventSessionIdSource11(ctx, eventFieldId);
            return result;
        }
        
        /// <summary>
        /// event_session_id_source1 : 
        ///    full_predicate_source_ref 
        /// </summary>
        public static AstEventSessionIdSource1 EventSessionIdSource1(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef)
        {
            AstEventSessionIdSource1.AstEventSessionIdSource12 result = new AstEventSessionIdSource1.AstEventSessionIdSource12(ctx, fullPredicateSourceRef);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_id_source2
    /// 	 : event_field_id
    /// 	 | full_predicate_source_ref  COMMA  decimal_string
    /// </summary>
    public abstract partial class AstEventSessionIdSource2 : AstBnfRule
    {
        
        protected static string _rule = "event_session_id_source2\r\n\t : event_field_id\r\n\t | full_predicate_source_ref  COMM" +
            "A  decimal_string";
        
        /// <summary>
        /// event_session_id_source2 : event_field_id 
        /// </summary>
        public partial class AstEventSessionIdSource21 : AstEventSessionIdSource2
        {
            
            private AstEventFieldId _eventFieldId;
            
            internal AstEventSessionIdSource21(ParserRuleContext ctx, AstEventFieldId eventFieldId) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource2(this);
            }
        }
        /// <summary>
        /// event_session_id_source2 : full_predicate_source_ref COMMA decimal_string 
        /// </summary>
        public partial class AstEventSessionIdSource22 : AstEventSessionIdSource2
        {
            
            private AstFullPredicateSourceRef _fullPredicateSourceRef;
            
            private AstDecimalString _decimalString;
            
            internal AstEventSessionIdSource22(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _fullPredicateSourceRef = fullPredicateSourceRef;
                _decimalString = decimalString;
            }
            
            public virtual AstFullPredicateSourceRef FullPredicateSourceRef
            {
                get
                {
                    return _fullPredicateSourceRef;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionIdSource2(this);
            }
        }
        

        
        internal AstEventSessionIdSource2(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionIdSource2(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionIdSource2(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionIdSource2 Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionIdSource2.Resolve(list);
            if ((index == 2))
            {
                return new AstEventSessionIdSource2.AstEventSessionIdSource21(ctx, ((AstEventFieldId)(list[0])));
            }
            if ((index == 3))
            {
                return new AstEventSessionIdSource2.AstEventSessionIdSource22(ctx, ((AstFullPredicateSourceRef)(list[0])), ((AstDecimalString)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullPredicateSourceRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalString), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventFieldId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// event_session_id_source2 : 
        ///    event_field_id 
        /// </summary>
        public static AstEventSessionIdSource2 EventSessionIdSource2(ParserRuleContext ctx, AstEventFieldId eventFieldId)
        {
            AstEventSessionIdSource2.AstEventSessionIdSource21 result = new AstEventSessionIdSource2.AstEventSessionIdSource21(ctx, eventFieldId);
            return result;
        }
        
        /// <summary>
        /// event_session_id_source2 : 
        ///    full_predicate_source_ref , decimal_string 
        /// </summary>
        public static AstEventSessionIdSource2 EventSessionIdSource2(ParserRuleContext ctx, AstFullPredicateSourceRef fullPredicateSourceRef, AstDecimalString decimalString)
        {
            AstEventSessionIdSource2.AstEventSessionIdSource22 result = new AstEventSessionIdSource2.AstEventSessionIdSource22(ctx, fullPredicateSourceRef, decimalString);
            return result;
        }
    }
    
    /// <summary>
    /// alter_external_data_source
    /// 	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  external_sources
    /// 	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  external_credential?  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterExternalDataSource : AstBnfRule
    {
        
        protected static string _rule = @"alter_external_data_source
	 : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  external_sources
	 | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  external_credential?  RR_BRACKET";
        
        /// <summary>
        /// alter_external_data_source : ALTER EXTERNAL DATA SOURCE data_source_id SET external_sources 
        /// </summary>
        public partial class AstAlterExternalDataSource1 : AstAlterExternalDataSource
        {
            
            private AstDataSourceId _dataSourceId;
            
            private AstExternalSources _externalSources;
            
            internal AstAlterExternalDataSource1(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstExternalSources externalSources) : 
                    base(ctx)
            {
                _dataSourceId = dataSourceId;
                _externalSources = externalSources;
            }
            
            public virtual AstDataSourceId DataSourceId
            {
                get
                {
                    return _dataSourceId;
                }
            }
            
            public virtual AstExternalSources ExternalSources
            {
                get
                {
                    return _externalSources;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterExternalDataSource(this);
            }
        }
        /// <summary>
        /// alter_external_data_source : ALTER EXTERNAL DATA SOURCE data_source_id WITH LR_BRACKET TYPE EQUAL BLOB_STORAGE COMMA LOCATION EQUAL location=stringtext external_credential? RR_BRACKET 
        /// </summary>
        public partial class AstAlterExternalDataSource2 : AstAlterExternalDataSource
        {
            
            private AstDataSourceId _dataSourceId;
            
            private AstStringtext _location;
            
            private AstExternalCredential _externalCredential;
            
            internal AstAlterExternalDataSource2(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstStringtext location, AstExternalCredential externalCredential) : 
                    base(ctx)
            {
                _dataSourceId = dataSourceId;
                _location = location;
                _externalCredential = externalCredential;
            }
            
            public virtual AstDataSourceId DataSourceId
            {
                get
                {
                    return _dataSourceId;
                }
            }
            
            public virtual AstStringtext Location
            {
                get
                {
                    return _location;
                }
            }
            
            public virtual AstExternalCredential ExternalCredential
            {
                get
                {
                    return _externalCredential;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterExternalDataSource(this);
            }
        }
        

        
        internal AstAlterExternalDataSource(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterExternalDataSource(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterExternalDataSource(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterExternalDataSource Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterExternalDataSource.Resolve(list);
            if ((index == 3))
            {
                return new AstAlterExternalDataSource.AstAlterExternalDataSource1(ctx, ((AstDataSourceId)(list[0])), ((AstExternalSources)(list[1])));
            }
            if ((index == 4))
            {
                return new AstAlterExternalDataSource.AstAlterExternalDataSource2(ctx, ((AstDataSourceId)(list[0])), ((AstStringtext)(list[1])), ((AstExternalCredential)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstDataSourceId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExternalCredential), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDataSourceId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExternalSources), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_external_data_source : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id SET external_sources 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstExternalSources externalSources)
        {
            AstAlterExternalDataSource.AstAlterExternalDataSource1 result = new AstAlterExternalDataSource.AstAlterExternalDataSource1(ctx, dataSourceId, externalSources);
            return result;
        }
        
        /// <summary>
        /// alter_external_data_source : 
        ///    ALTER EXTERNAL DATA SOURCE data_source_id WITH ( TYPE EQUAL BLOB_STORAGE , LOCATION EQUAL location=stringtext external_credential? ) 
        /// </summary>
        public static AstAlterExternalDataSource AlterExternalDataSource(ParserRuleContext ctx, AstDataSourceId dataSourceId, AstStringtext location, AstExternalCredential externalCredential)
        {
            AstAlterExternalDataSource.AstAlterExternalDataSource2 result = new AstAlterExternalDataSource.AstAlterExternalDataSource2(ctx, dataSourceId, location, externalCredential);
            return result;
        }
    }
    
    /// <summary>
    /// external_source
    /// 	 : LOCATION  EQUAL  location = stringtext
    /// 	 | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext
    /// 	 | CREDENTIAL  EQUAL  credential_id
    /// </summary>
    public abstract partial class AstExternalSource : AstBnfRule
    {
        
        protected static string _rule = "external_source\r\n\t : LOCATION  EQUAL  location = stringtext\r\n\t | RESOURCE_MANAGER" +
            "_LOCATION  EQUAL  resource_manager_location = stringtext\r\n\t | CREDENTIAL  EQUAL " +
            " credential_id";
        
        /// <summary>
        /// external_source : LOCATION EQUAL location=stringtext 
        /// </summary>
        public partial class AstExternalSource1 : AstExternalSource
        {
            
            private AstStringtext _location;
            
            internal AstExternalSource1(ParserRuleContext ctx, AstStringtext location) : 
                    base(ctx)
            {
                _location = location;
            }
            
            public virtual AstStringtext Location
            {
                get
                {
                    return _location;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalSource(this);
            }
        }
        /// <summary>
        /// external_source : RESOURCE_MANAGER_LOCATION EQUAL resource_manager_location=stringtext 
        /// </summary>
        public partial class AstExternalSource2 : AstExternalSource
        {
            
            private AstStringtext _resourceManagerLocation;
            
            internal AstExternalSource2(ParserRuleContext ctx, AstStringtext resourceManagerLocation) : 
                    base(ctx)
            {
                _resourceManagerLocation = resourceManagerLocation;
            }
            
            public virtual AstStringtext ResourceManagerLocation
            {
                get
                {
                    return _resourceManagerLocation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalSource(this);
            }
        }
        /// <summary>
        /// external_source : CREDENTIAL EQUAL credential_id 
        /// </summary>
        public partial class AstExternalSource3 : AstExternalSource
        {
            
            private AstCredentialId _credentialId;
            
            internal AstExternalSource3(ParserRuleContext ctx, AstCredentialId credentialId) : 
                    base(ctx)
            {
                _credentialId = credentialId;
            }
            
            public virtual AstCredentialId CredentialId
            {
                get
                {
                    return _credentialId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalSource(this);
            }
        }
        

        
        internal AstExternalSource(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExternalSource(Position p) : 
                base(p)
        {
        }
        
        internal AstExternalSource(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExternalSource Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExternalSource.Resolve(list);
            if ((index == 2))
            {
                return new AstExternalSource.AstExternalSource1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalSource.AstExternalSource2(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalSource.AstExternalSource3(ctx, ((AstCredentialId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstCredentialId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// external_source : 
        ///    LOCATION EQUAL location=stringtext 
        /// </summary>
        public static AstExternalSource ExternalSource(ParserRuleContext ctx, AstStringtext location)
        {
            AstExternalSource.AstExternalSource1 result = new AstExternalSource.AstExternalSource1(ctx, location);
            return result;
        }
        
        /// <summary>
        /// external_source : 
        ///    CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstExternalSource ExternalSource(ParserRuleContext ctx, AstCredentialId credentialId)
        {
            AstExternalSource.AstExternalSource3 result = new AstExternalSource.AstExternalSource3(ctx, credentialId);
            return result;
        }
    }
    
    /// <summary>
    /// code_content
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | NONE
    /// </summary>
    public abstract partial class AstCodeContent : AstBnfRule
    {
        
        protected static string _rule = "code_content\r\n\t : stringtext\r\n\t | binary_\r\n\t | NONE";
        
        /// <summary>
        /// code_content : stringtext 
        /// </summary>
        public partial class AstCodeContent1 : AstCodeContent
        {
            
            private AstStringtext _stringtext;
            
            internal AstCodeContent1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        /// <summary>
        /// code_content : binary_ 
        /// </summary>
        public partial class AstCodeContent2 : AstCodeContent
        {
            
            private AstBinary _binary;
            
            internal AstCodeContent2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        /// <summary>
        /// code_content : NONE 
        /// </summary>
        public partial class AstCodeContent3 : AstCodeContent
        {
            
            internal AstCodeContent3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCodeContent(this);
            }
        }
        

        
        internal AstCodeContent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCodeContent(Position p) : 
                base(p)
        {
        }
        
        internal AstCodeContent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCodeContent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCodeContent.Resolve(list);
            if ((index == 2))
            {
                return new AstCodeContent.AstCodeContent1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCodeContent.AstCodeContent2(ctx, ((AstBinary)(list[0])));
            }
            if ((index == 1))
            {
                return new AstCodeContent.AstCodeContent3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// code_content : 
        ///    stringtext 
        /// </summary>
        public static AstCodeContent CodeContent(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstCodeContent.AstCodeContent1 result = new AstCodeContent.AstCodeContent1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// code_content : 
        ///    binary_ 
        /// </summary>
        public static AstCodeContent CodeContent(ParserRuleContext ctx, AstBinary binary)
        {
            AstCodeContent.AstCodeContent2 result = new AstCodeContent.AstCodeContent2(ctx, binary);
            return result;
        }
        
        /// <summary>
        /// code_content : 
        ///    NONE 
        /// </summary>
        public static AstCodeContent CodeContent(ParserRuleContext ctx)
        {
            AstCodeContent.AstCodeContent3 result = new AstCodeContent.AstCodeContent3(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_external_resource_pool
    /// 	 : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with
    /// </summary>
    public partial class AstCreateExternalResourcePool : AstBnfRule
    {
        
        protected static string _rule = "create_external_resource_pool\r\n\t : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WIT" +
            "H  external_resource_with";
        
        internal AstCreateExternalResourcePool(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateExternalResourcePool(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateExternalResourcePool(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateExternalResourcePool(ParserRuleContext ctx, AstPoolId poolId, AstExternalResourceWith externalResourceWith) : 
                base(ctx)
        {
            _poolId = poolId;
            _externalResourceWith = externalResourceWith;
        }
        
        public virtual AstPoolId _poolId
        {
            get
            {
                return _poolId;
            }
        }
        
        public virtual AstExternalResourceWith _externalResourceWith
        {
            get
            {
                return _externalResourceWith;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalResourcePool(this);
        }
        
        /// <summary>
        /// create_external_resource_pool : 
        ///    CREATE EXTERNAL RESOURCE POOL pool_id WITH external_resource_with 
        /// </summary>
        public static AstCreateExternalResourcePool CreateExternalResourcePool(ParserRuleContext ctx, AstPoolId poolId, AstExternalResourceWith externalResourceWith)
        {
            AstCreateExternalResourcePool result = new AstCreateExternalResourcePool(ctx, poolId, externalResourceWith);
            return result;
        }
    }
    
    /// <summary>
    /// fulltext_languageList
    /// 	 : stringtext
    /// 	 | decimal
    /// 	 | binary_
    /// </summary>
    public abstract partial class AstFulltextLanguagelist : AstBnfRule
    {
        
        protected static string _rule = "fulltext_languageList\r\n\t : stringtext\r\n\t | decimal\r\n\t | binary_";
        
        /// <summary>
        /// fulltext_languageList : stringtext 
        /// </summary>
        public partial class AstFulltextLanguagelist1 : AstFulltextLanguagelist
        {
            
            private AstStringtext _stringtext;
            
            internal AstFulltextLanguagelist1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguagelist(this);
            }
        }
        /// <summary>
        /// fulltext_languageList : decimal 
        /// </summary>
        public partial class AstFulltextLanguagelist2 : AstFulltextLanguagelist
        {
            
            private AstDecimal _decimal;
            
            internal AstFulltextLanguagelist2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguagelist(this);
            }
        }
        /// <summary>
        /// fulltext_languageList : binary_ 
        /// </summary>
        public partial class AstFulltextLanguagelist3 : AstFulltextLanguagelist
        {
            
            private AstBinary _binary;
            
            internal AstFulltextLanguagelist3(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFulltextLanguagelist(this);
            }
        }
        

        
        internal AstFulltextLanguagelist(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFulltextLanguagelist(Position p) : 
                base(p)
        {
        }
        
        internal AstFulltextLanguagelist(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFulltextLanguagelist Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFulltextLanguagelist.Resolve(list);
            if ((index == 2))
            {
                return new AstFulltextLanguagelist.AstFulltextLanguagelist1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFulltextLanguagelist.AstFulltextLanguagelist2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFulltextLanguagelist.AstFulltextLanguagelist3(ctx, ((AstBinary)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    stringtext 
        /// </summary>
        public static AstFulltextLanguagelist FulltextLanguagelist(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstFulltextLanguagelist.AstFulltextLanguagelist1 result = new AstFulltextLanguagelist.AstFulltextLanguagelist1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    decimal 
        /// </summary>
        public static AstFulltextLanguagelist FulltextLanguagelist(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstFulltextLanguagelist.AstFulltextLanguagelist2 result = new AstFulltextLanguagelist.AstFulltextLanguagelist2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// fulltext_languageList : 
        ///    binary_ 
        /// </summary>
        public static AstFulltextLanguagelist FulltextLanguagelist(ParserRuleContext ctx, AstBinary binary)
        {
            AstFulltextLanguagelist.AstFulltextLanguagelist3 result = new AstFulltextLanguagelist.AstFulltextLanguagelist3(ctx, binary);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_sql_server_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_sql_server_settings
    /// 	 | add_drop  CREDENTIAL  credential_id
    /// </summary>
    public abstract partial class AstAlterLoginSqlServerInfos : AstBnfRule
    {
        
        protected static string _rule = "alter_login_sql_server_infos\r\n\t : enable_disable?\r\n\t | WITH  alter_login_sql_serv" +
            "er_settings\r\n\t | add_drop  CREDENTIAL  credential_id";
        
        /// <summary>
        /// alter_login_sql_server_infos : enable_disable? 
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos1 : AstAlterLoginSqlServerInfos
        {
            
            private AstEnableDisable _enableDisable;
            
            internal AstAlterLoginSqlServerInfos1(ParserRuleContext ctx, AstEnableDisable enableDisable) : 
                    base(ctx)
            {
                _enableDisable = enableDisable;
            }
            
            public virtual AstEnableDisable EnableDisable
            {
                get
                {
                    return _enableDisable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        /// <summary>
        /// alter_login_sql_server_infos : WITH alter_login_sql_server_settings 
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos2 : AstAlterLoginSqlServerInfos
        {
            
            private AstAlterLoginSqlServerSettings _alterLoginSqlServerSettings;
            
            internal AstAlterLoginSqlServerInfos2(ParserRuleContext ctx, AstAlterLoginSqlServerSettings alterLoginSqlServerSettings) : 
                    base(ctx)
            {
                _alterLoginSqlServerSettings = alterLoginSqlServerSettings;
            }
            
            public virtual AstAlterLoginSqlServerSettings AlterLoginSqlServerSettings
            {
                get
                {
                    return _alterLoginSqlServerSettings;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        /// <summary>
        /// alter_login_sql_server_infos : add_drop CREDENTIAL credential_id 
        /// </summary>
        public partial class AstAlterLoginSqlServerInfos3 : AstAlterLoginSqlServerInfos
        {
            
            private AstAddDrop _addDrop;
            
            private AstCredentialId _credentialId;
            
            internal AstAlterLoginSqlServerInfos3(ParserRuleContext ctx, AstAddDrop addDrop, AstCredentialId credentialId) : 
                    base(ctx)
            {
                _addDrop = addDrop;
                _credentialId = credentialId;
            }
            
            public virtual AstAddDrop AddDrop
            {
                get
                {
                    return _addDrop;
                }
            }
            
            public virtual AstCredentialId CredentialId
            {
                get
                {
                    return _credentialId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginSqlServerInfos(this);
            }
        }
        

        
        internal AstAlterLoginSqlServerInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginSqlServerInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterLoginSqlServerInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterLoginSqlServerInfos.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1(ctx, ((AstEnableDisable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2(ctx, ((AstAlterLoginSqlServerSettings)(list[0])));
            }
            if ((index == 3))
            {
                return new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3(ctx, ((AstAddDrop)(list[0])), ((AstCredentialId)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAddDrop), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCredentialId), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEnableDisable), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginSqlServerSettings), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(ParserRuleContext ctx, AstEnableDisable enableDisable)
        {
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos1(ctx, enableDisable);
            return result;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    WITH alter_login_sql_server_settings 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(ParserRuleContext ctx, AstAlterLoginSqlServerSettings alterLoginSqlServerSettings)
        {
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos2(ctx, alterLoginSqlServerSettings);
            return result;
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : 
        ///    add_drop CREDENTIAL credential_id 
        /// </summary>
        public static AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos(ParserRuleContext ctx, AstAddDrop addDrop, AstCredentialId credentialId)
        {
            AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3 result = new AstAlterLoginSqlServerInfos.AstAlterLoginSqlServerInfos3(ctx, addDrop, credentialId);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_settings
    /// 	 : (PASSWORD  EQUAL  pwd_value  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language_id)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?
    /// </summary>
    public partial class AstCreateLoginSqlServerSettings : AstBnfRule
    {
        
        protected static string _rule = @"create_login_sql_server_settings
	 : (PASSWORD  EQUAL  pwd_value  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  language_id)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?";
        
        internal AstCreateLoginSqlServerSettings(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateLoginSqlServerSettings(ParserRuleContext ctx, AstPwdValue pwdValue, AstPwdStrategies pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguageId languageId, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId) : 
                base(ctx)
        {
            _pwdValue = pwdValue;
            _pwdStrategies = pwdStrategies;
            _sid = sid;
            _databaseId = databaseId;
            _languageId = languageId;
            _checkExpiration = checkExpiration;
            _checkPolicy = checkPolicy;
            _credentialId = credentialId;
        }
        
        public virtual AstPwdValue _pwdValue
        {
            get
            {
                return _pwdValue;
            }
        }
        
        public virtual AstPwdStrategies _pwdStrategies
        {
            get
            {
                return _pwdStrategies;
            }
        }
        
        public virtual AstBinary _sid
        {
            get
            {
                return _sid;
            }
        }
        
        public virtual AstDatabaseId _databaseId
        {
            get
            {
                return _databaseId;
            }
        }
        
        public virtual AstLanguageId _languageId
        {
            get
            {
                return _languageId;
            }
        }
        
        public virtual AstOnOff _checkExpiration
        {
            get
            {
                return _checkExpiration;
            }
        }
        
        public virtual AstOnOff _checkPolicy
        {
            get
            {
                return _checkPolicy;
            }
        }
        
        public virtual AstCredentialId _credentialId
        {
            get
            {
                return _credentialId;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServerSettings(this);
        }
        
        /// <summary>
        /// create_login_sql_server_settings : 
        ///    PASSWORD EQUAL pwd_value pwd_strategies? COMMA? SID EQUAL sid=binary_ COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL language_id COMMA? CHECK_EXPIRATION EQUAL check_expiration=on_off COMMA? CHECK_POLICY EQUAL check_policy=on_off COMMA? CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings(ParserRuleContext ctx, AstPwdValue pwdValue, AstPwdStrategies pwdStrategies, AstBinary sid, AstDatabaseId databaseId, AstLanguageId languageId, AstOnOff checkExpiration, AstOnOff checkPolicy, AstCredentialId credentialId)
        {
            AstCreateLoginSqlServerSettings result = new AstCreateLoginSqlServerSettings(ctx, pwdValue, pwdStrategies, sid, databaseId, languageId, checkExpiration, checkPolicy, credentialId);
            return result;
        }
    }
    
    /// <summary>
    /// create_login_sql_server_from
    /// 	 : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtext)?)
    /// 	 | CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstCreateLoginSqlServerFrom : AstBnfRule
    {
        
        protected static string _rule = "create_login_sql_server_from\r\n\t : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUA" +
            "L  database_id)?  (COMMA?  DEFAULT_LANGUAGE  EQUAL  default_language = stringtex" +
            "t)?)\r\n\t | CERTIFICATE  certificate_id\r\n\t | ASYMMETRIC  KEY  asym_key_id";
        
        /// <summary>
        /// create_login_sql_server_from : WINDOWS WITH COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL default_language=stringtext 
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom1 : AstCreateLoginSqlServerFrom
        {
            
            private AstDatabaseId _databaseId;
            
            private AstStringtext _defaultLanguage;
            
            internal AstCreateLoginSqlServerFrom1(ParserRuleContext ctx, AstDatabaseId databaseId, AstStringtext defaultLanguage) : 
                    base(ctx)
            {
                _databaseId = databaseId;
                _defaultLanguage = defaultLanguage;
            }
            
            public virtual AstDatabaseId DatabaseId
            {
                get
                {
                    return _databaseId;
                }
            }
            
            public virtual AstStringtext DefaultLanguage
            {
                get
                {
                    return _defaultLanguage;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        /// <summary>
        /// create_login_sql_server_from : CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom2 : AstCreateLoginSqlServerFrom
        {
            
            private AstCertificateId _certificateId;
            
            internal AstCreateLoginSqlServerFrom2(ParserRuleContext ctx, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _certificateId = certificateId;
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        /// <summary>
        /// create_login_sql_server_from : ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstCreateLoginSqlServerFrom3 : AstCreateLoginSqlServerFrom
        {
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstCreateLoginSqlServerFrom3(ParserRuleContext ctx, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateLoginSqlServerFrom(this);
            }
        }
        

        
        internal AstCreateLoginSqlServerFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateLoginSqlServerFrom(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateLoginSqlServerFrom Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateLoginSqlServerFrom.Resolve(list);
            if ((index == 3))
            {
                return new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1(ctx, ((AstDatabaseId)(list[0])), ((AstStringtext)(list[1])));
            }
            if ((index == 2))
            {
                return new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2(ctx, ((AstCertificateId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3(ctx, ((AstAsymKeyId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAsymKeyId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    WINDOWS WITH COMMA? DEFAULT_DATABASE EQUAL database_id COMMA? DEFAULT_LANGUAGE EQUAL default_language=stringtext 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(ParserRuleContext ctx, AstDatabaseId databaseId, AstStringtext defaultLanguage)
        {
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom1(ctx, databaseId, defaultLanguage);
            return result;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(ParserRuleContext ctx, AstCertificateId certificateId)
        {
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom2(ctx, certificateId);
            return result;
        }
        
        /// <summary>
        /// create_login_sql_server_from : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom(ParserRuleContext ctx, AstAsymKeyId asymKeyId)
        {
            AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3 result = new AstCreateLoginSqlServerFrom.AstCreateLoginSqlServerFrom3(ctx, asymKeyId);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_infos
    /// 	 : enable_disable?
    /// 	 | WITH  alter_login_azure_sql_with
    /// </summary>
    public abstract partial class AstAlterLoginAzureSqlInfos : AstBnfRule
    {
        
        protected static string _rule = "alter_login_azure_sql_infos\r\n\t : enable_disable?\r\n\t | WITH  alter_login_azure_sql" +
            "_with";
        
        /// <summary>
        /// alter_login_azure_sql_infos : enable_disable? 
        /// </summary>
        public partial class AstAlterLoginAzureSqlInfos1 : AstAlterLoginAzureSqlInfos
        {
            
            private AstEnableDisable _enableDisable;
            
            internal AstAlterLoginAzureSqlInfos1(ParserRuleContext ctx, AstEnableDisable enableDisable) : 
                    base(ctx)
            {
                _enableDisable = enableDisable;
            }
            
            public virtual AstEnableDisable EnableDisable
            {
                get
                {
                    return _enableDisable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlInfos(this);
            }
        }
        /// <summary>
        /// alter_login_azure_sql_infos : WITH alter_login_azure_sql_with 
        /// </summary>
        public partial class AstAlterLoginAzureSqlInfos2 : AstAlterLoginAzureSqlInfos
        {
            
            private AstAlterLoginAzureSqlWith _alterLoginAzureSqlWith;
            
            internal AstAlterLoginAzureSqlInfos2(ParserRuleContext ctx, AstAlterLoginAzureSqlWith alterLoginAzureSqlWith) : 
                    base(ctx)
            {
                _alterLoginAzureSqlWith = alterLoginAzureSqlWith;
            }
            
            public virtual AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith
            {
                get
                {
                    return _alterLoginAzureSqlWith;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlInfos(this);
            }
        }
        

        
        internal AstAlterLoginAzureSqlInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterLoginAzureSqlInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterLoginAzureSqlInfos.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1(ctx, ((AstEnableDisable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2(ctx, ((AstAlterLoginAzureSqlWith)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEnableDisable), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlterLoginAzureSqlWith), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos : 
        ///    enable_disable? 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(ParserRuleContext ctx, AstEnableDisable enableDisable)
        {
            AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1 result = new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos1(ctx, enableDisable);
            return result;
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos : 
        ///    WITH alter_login_azure_sql_with 
        /// </summary>
        public static AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos(ParserRuleContext ctx, AstAlterLoginAzureSqlWith alterLoginAzureSqlWith)
        {
            AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2 result = new AstAlterLoginAzureSqlInfos.AstAlterLoginAzureSqlInfos2(ctx, alterLoginAzureSqlWith);
            return result;
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_with
    /// 	 : password_setting  old_pwd?
    /// 	 | NAME  EQUAL  login_id
    /// </summary>
    public abstract partial class AstAlterLoginAzureSqlWith : AstBnfRule
    {
        
        protected static string _rule = "alter_login_azure_sql_with\r\n\t : password_setting  old_pwd?\r\n\t | NAME  EQUAL  logi" +
            "n_id";
        
        /// <summary>
        /// alter_login_azure_sql_with : password_setting old_pwd? 
        /// </summary>
        public partial class AstAlterLoginAzureSqlWith1 : AstAlterLoginAzureSqlWith
        {
            
            private AstPasswordSetting _passwordSetting;
            
            private AstOldPwd _oldPwd;
            
            internal AstAlterLoginAzureSqlWith1(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwd oldPwd) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _oldPwd = oldPwd;
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstOldPwd OldPwd
            {
                get
                {
                    return _oldPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlWith(this);
            }
        }
        /// <summary>
        /// alter_login_azure_sql_with : NAME EQUAL login_id 
        /// </summary>
        public partial class AstAlterLoginAzureSqlWith2 : AstAlterLoginAzureSqlWith
        {
            
            private AstLoginId _loginId;
            
            internal AstAlterLoginAzureSqlWith2(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterLoginAzureSqlWith(this);
            }
        }
        

        
        internal AstAlterLoginAzureSqlWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterLoginAzureSqlWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterLoginAzureSqlWith Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterLoginAzureSqlWith.Resolve(list);
            if ((index == 3))
            {
                return new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1(ctx, ((AstPasswordSetting)(list[0])), ((AstOldPwd)(list[1])));
            }
            if ((index == 2))
            {
                return new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2(ctx, ((AstLoginId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPasswordSetting), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOldPwd), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLoginId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_login_azure_sql_with : 
        ///    password_setting old_pwd? 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwd oldPwd)
        {
            AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1 result = new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith1(ctx, passwordSetting, oldPwd);
            return result;
        }
        
        /// <summary>
        /// alter_login_azure_sql_with : 
        ///    NAME EQUAL login_id 
        /// </summary>
        public static AstAlterLoginAzureSqlWith AlterLoginAzureSqlWith(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2 result = new AstAlterLoginAzureSqlWith.AstAlterLoginAzureSqlWith2(ctx, loginId);
            return result;
        }
    }
    
    /// <summary>
    /// login_pwd_strategy
    /// 	 : enable_disable?
    /// 	 | WITH  change_password
    /// </summary>
    public abstract partial class AstLoginPwdStrategy : AstBnfRule
    {
        
        protected static string _rule = "login_pwd_strategy\r\n\t : enable_disable?\r\n\t | WITH  change_password";
        
        /// <summary>
        /// login_pwd_strategy : enable_disable? 
        /// </summary>
        public partial class AstLoginPwdStrategy1 : AstLoginPwdStrategy
        {
            
            private AstEnableDisable _enableDisable;
            
            internal AstLoginPwdStrategy1(ParserRuleContext ctx, AstEnableDisable enableDisable) : 
                    base(ctx)
            {
                _enableDisable = enableDisable;
            }
            
            public virtual AstEnableDisable EnableDisable
            {
                get
                {
                    return _enableDisable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPwdStrategy(this);
            }
        }
        /// <summary>
        /// login_pwd_strategy : WITH change_password 
        /// </summary>
        public partial class AstLoginPwdStrategy2 : AstLoginPwdStrategy
        {
            
            private AstChangePassword _changePassword;
            
            internal AstLoginPwdStrategy2(ParserRuleContext ctx, AstChangePassword changePassword) : 
                    base(ctx)
            {
                _changePassword = changePassword;
            }
            
            public virtual AstChangePassword ChangePassword
            {
                get
                {
                    return _changePassword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPwdStrategy(this);
            }
        }
        

        
        internal AstLoginPwdStrategy(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLoginPwdStrategy(Position p) : 
                base(p)
        {
        }
        
        internal AstLoginPwdStrategy(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstLoginPwdStrategy Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstLoginPwdStrategy.Resolve(list);
            if ((index == 2))
            {
                return new AstLoginPwdStrategy.AstLoginPwdStrategy1(ctx, ((AstEnableDisable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstLoginPwdStrategy.AstLoginPwdStrategy2(ctx, ((AstChangePassword)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEnableDisable), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstChangePassword), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// login_pwd_strategy : 
        ///    enable_disable? 
        /// </summary>
        public static AstLoginPwdStrategy LoginPwdStrategy(ParserRuleContext ctx, AstEnableDisable enableDisable)
        {
            AstLoginPwdStrategy.AstLoginPwdStrategy1 result = new AstLoginPwdStrategy.AstLoginPwdStrategy1(ctx, enableDisable);
            return result;
        }
        
        /// <summary>
        /// login_pwd_strategy : 
        ///    WITH change_password 
        /// </summary>
        public static AstLoginPwdStrategy LoginPwdStrategy(ParserRuleContext ctx, AstChangePassword changePassword)
        {
            AstLoginPwdStrategy.AstLoginPwdStrategy2 result = new AstLoginPwdStrategy.AstLoginPwdStrategy2(ctx, changePassword);
            return result;
        }
    }
    
    /// <summary>
    /// change_password
    /// 	 : password_setting  old_pwd_strategies?
    /// 	 | NAME  EQUAL  login_id
    /// </summary>
    public abstract partial class AstChangePassword : AstBnfRule
    {
        
        protected static string _rule = "change_password\r\n\t : password_setting  old_pwd_strategies?\r\n\t | NAME  EQUAL  logi" +
            "n_id";
        
        /// <summary>
        /// change_password : password_setting old_pwd_strategies? 
        /// </summary>
        public partial class AstChangePassword1 : AstChangePassword
        {
            
            private AstPasswordSetting _passwordSetting;
            
            private AstOldPwdStrategies _oldPwdStrategies;
            
            internal AstChangePassword1(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwdStrategies oldPwdStrategies) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _oldPwdStrategies = oldPwdStrategies;
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstOldPwdStrategies OldPwdStrategies
            {
                get
                {
                    return _oldPwdStrategies;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangePassword(this);
            }
        }
        /// <summary>
        /// change_password : NAME EQUAL login_id 
        /// </summary>
        public partial class AstChangePassword2 : AstChangePassword
        {
            
            private AstLoginId _loginId;
            
            internal AstChangePassword2(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangePassword(this);
            }
        }
        

        
        internal AstChangePassword(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangePassword(Position p) : 
                base(p)
        {
        }
        
        internal AstChangePassword(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstChangePassword Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstChangePassword.Resolve(list);
            if ((index == 3))
            {
                return new AstChangePassword.AstChangePassword1(ctx, ((AstPasswordSetting)(list[0])), ((AstOldPwdStrategies)(list[1])));
            }
            if ((index == 2))
            {
                return new AstChangePassword.AstChangePassword2(ctx, ((AstLoginId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPasswordSetting), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOldPwdStrategies), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLoginId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// change_password : 
        ///    password_setting old_pwd_strategies? 
        /// </summary>
        public static AstChangePassword ChangePassword(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwdStrategies oldPwdStrategies)
        {
            AstChangePassword.AstChangePassword1 result = new AstChangePassword.AstChangePassword1(ctx, passwordSetting, oldPwdStrategies);
            return result;
        }
        
        /// <summary>
        /// change_password : 
        ///    NAME EQUAL login_id 
        /// </summary>
        public static AstChangePassword ChangePassword(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstChangePassword.AstChangePassword2 result = new AstChangePassword.AstChangePassword2(ctx, loginId);
            return result;
        }
    }
    
    /// <summary>
    /// login_pdw_pwd
    /// 	 : WITH  (password_setting  MUST_CHANGE?  (CHECK_POLICY  EQUAL  on_off?)?)
    /// 	 | FROM  WINDOWS
    /// </summary>
    public abstract partial class AstLoginPdwPwd : AstBnfRule
    {
        
        protected static string _rule = "login_pdw_pwd\r\n\t : WITH  (password_setting  MUST_CHANGE?  (CHECK_POLICY  EQUAL  o" +
            "n_off?)?)\r\n\t | FROM  WINDOWS";
        
        /// <summary>
        /// login_pdw_pwd : WITH password_setting MUST_CHANGE? CHECK_POLICY EQUAL on_off? 
        /// </summary>
        public partial class AstLoginPdwPwd1 : AstLoginPdwPwd
        {
            
            private AstPasswordSetting _passwordSetting;
            
            private AstOnOff _onOff;
            
            internal AstLoginPdwPwd1(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOnOff onOff) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _onOff = onOff;
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPdwPwd(this);
            }
        }
        /// <summary>
        /// login_pdw_pwd : FROM WINDOWS 
        /// </summary>
        public partial class AstLoginPdwPwd2 : AstLoginPdwPwd
        {
            
            internal AstLoginPdwPwd2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLoginPdwPwd(this);
            }
        }
        

        
        internal AstLoginPdwPwd(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLoginPdwPwd(Position p) : 
                base(p)
        {
        }
        
        internal AstLoginPdwPwd(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstLoginPdwPwd Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstLoginPdwPwd.Resolve(list);
            if ((index == 3))
            {
                return new AstLoginPdwPwd.AstLoginPdwPwd1(ctx, ((AstPasswordSetting)(list[0])), ((AstOnOff)(list[1])));
            }
            if ((index == 1))
            {
                return new AstLoginPdwPwd.AstLoginPdwPwd2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPasswordSetting), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// login_pdw_pwd : 
        ///    WITH password_setting MUST_CHANGE? CHECK_POLICY EQUAL on_off? 
        /// </summary>
        public static AstLoginPdwPwd LoginPdwPwd(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOnOff onOff)
        {
            AstLoginPdwPwd.AstLoginPdwPwd1 result = new AstLoginPdwPwd.AstLoginPdwPwd1(ctx, passwordSetting, onOff);
            return result;
        }
        
        /// <summary>
        /// login_pdw_pwd : 
        ///    FROM WINDOWS 
        /// </summary>
        public static AstLoginPdwPwd LoginPdwPwd(ParserRuleContext ctx)
        {
            AstLoginPdwPwd.AstLoginPdwPwd2 result = new AstLoginPdwPwd.AstLoginPdwPwd2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_sql_server
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | add_drop  add_master_key)
    /// </summary>
    public abstract partial class AstAlterMasterKeySqlServer : AstBnfRule
    {
        
        protected static string _rule = "alter_master_key_sql_server\r\n\t : ALTER  MASTER  KEY  (regenerate_mater_key | add_" +
            "drop  add_master_key)";
        
        /// <summary>
        /// alter_master_key_sql_server : ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public partial class AstAlterMasterKeySqlServer1 : AstAlterMasterKeySqlServer
        {
            
            private AstRegenerateMaterKey _regenerateMaterKey;
            
            internal AstAlterMasterKeySqlServer1(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey) : 
                    base(ctx)
            {
                _regenerateMaterKey = regenerateMaterKey;
            }
            
            public virtual AstRegenerateMaterKey RegenerateMaterKey
            {
                get
                {
                    return _regenerateMaterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeySqlServer(this);
            }
        }
        /// <summary>
        /// alter_master_key_sql_server : ALTER MASTER KEY add_drop add_master_key 
        /// </summary>
        public partial class AstAlterMasterKeySqlServer2 : AstAlterMasterKeySqlServer
        {
            
            private AstAddDrop _addDrop;
            
            private AstAddMasterKey _addMasterKey;
            
            internal AstAlterMasterKeySqlServer2(ParserRuleContext ctx, AstAddDrop addDrop, AstAddMasterKey addMasterKey) : 
                    base(ctx)
            {
                _addDrop = addDrop;
                _addMasterKey = addMasterKey;
            }
            
            public virtual AstAddDrop AddDrop
            {
                get
                {
                    return _addDrop;
                }
            }
            
            public virtual AstAddMasterKey AddMasterKey
            {
                get
                {
                    return _addMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeySqlServer(this);
            }
        }
        

        
        internal AstAlterMasterKeySqlServer(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeySqlServer(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeySqlServer(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterMasterKeySqlServer Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterMasterKeySqlServer.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer1(ctx, ((AstRegenerateMaterKey)(list[0])));
            }
            if ((index == 3))
            {
                return new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer2(ctx, ((AstAddDrop)(list[0])), ((AstAddMasterKey)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAddDrop), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAddMasterKey), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRegenerateMaterKey), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_master_key_sql_server : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey)
        {
            AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer1 result = new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer1(ctx, regenerateMaterKey);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_sql_server : 
        ///    ALTER MASTER KEY add_drop add_master_key 
        /// </summary>
        public static AstAlterMasterKeySqlServer AlterMasterKeySqlServer(ParserRuleContext ctx, AstAddDrop addDrop, AstAddMasterKey addMasterKey)
        {
            AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer2 result = new AstAlterMasterKeySqlServer.AstAlterMasterKeySqlServer2(ctx, addDrop, addMasterKey);
            return result;
        }
    }
    
    /// <summary>
    /// alter_master_key_azure_sql
    /// 	 : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  add_master_key | DROP  encryption_by_pwd)
    /// </summary>
    public abstract partial class AstAlterMasterKeyAzureSql : AstBnfRule
    {
        
        protected static string _rule = "alter_master_key_azure_sql\r\n\t : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  " +
            "add_master_key | DROP  encryption_by_pwd)";
        
        /// <summary>
        /// alter_master_key_azure_sql : ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public partial class AstAlterMasterKeyAzureSql1 : AstAlterMasterKeyAzureSql
        {
            
            private AstRegenerateMaterKey _regenerateMaterKey;
            
            internal AstAlterMasterKeyAzureSql1(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey) : 
                    base(ctx)
            {
                _regenerateMaterKey = regenerateMaterKey;
            }
            
            public virtual AstRegenerateMaterKey RegenerateMaterKey
            {
                get
                {
                    return _regenerateMaterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeyAzureSql(this);
            }
        }
        /// <summary>
        /// alter_master_key_azure_sql : ALTER MASTER KEY ADD add_master_key 
        /// </summary>
        public partial class AstAlterMasterKeyAzureSql2 : AstAlterMasterKeyAzureSql
        {
            
            private AstAddMasterKey _addMasterKey;
            
            internal AstAlterMasterKeyAzureSql2(ParserRuleContext ctx, AstAddMasterKey addMasterKey) : 
                    base(ctx)
            {
                _addMasterKey = addMasterKey;
            }
            
            public virtual AstAddMasterKey AddMasterKey
            {
                get
                {
                    return _addMasterKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeyAzureSql(this);
            }
        }
        /// <summary>
        /// alter_master_key_azure_sql : ALTER MASTER KEY DROP encryption_by_pwd 
        /// </summary>
        public partial class AstAlterMasterKeyAzureSql3 : AstAlterMasterKeyAzureSql
        {
            
            private AstEncryptionByPwd _encryptionByPwd;
            
            internal AstAlterMasterKeyAzureSql3(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd) : 
                    base(ctx)
            {
                _encryptionByPwd = encryptionByPwd;
            }
            
            public virtual AstEncryptionByPwd EncryptionByPwd
            {
                get
                {
                    return _encryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterMasterKeyAzureSql(this);
            }
        }
        

        
        internal AstAlterMasterKeyAzureSql(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterMasterKeyAzureSql(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterMasterKeyAzureSql Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterMasterKeyAzureSql.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql1(ctx, ((AstRegenerateMaterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql2(ctx, ((AstAddMasterKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql3(ctx, ((AstEncryptionByPwd)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRegenerateMaterKey), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAddMasterKey), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstEncryptionByPwd), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY regenerate_mater_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(ParserRuleContext ctx, AstRegenerateMaterKey regenerateMaterKey)
        {
            AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql1 result = new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql1(ctx, regenerateMaterKey);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY ADD add_master_key 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(ParserRuleContext ctx, AstAddMasterKey addMasterKey)
        {
            AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql2 result = new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql2(ctx, addMasterKey);
            return result;
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : 
        ///    ALTER MASTER KEY DROP encryption_by_pwd 
        /// </summary>
        public static AstAlterMasterKeyAzureSql AlterMasterKeyAzureSql(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd)
        {
            AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql3 result = new AstAlterMasterKeyAzureSql.AstAlterMasterKeyAzureSql3(ctx, encryptionByPwd);
            return result;
        }
    }
    
    /// <summary>
    /// add_master_key
    /// 	 : ENCRYPTION  BY  (SERVICE  MASTER  KEY | password_setting)
    /// </summary>
    public abstract partial class AstAddMasterKey : AstBnfRule
    {
        
        protected static string _rule = "add_master_key\r\n\t : ENCRYPTION  BY  (SERVICE  MASTER  KEY | password_setting)";
        
        /// <summary>
        /// add_master_key : ENCRYPTION BY SERVICE MASTER KEY 
        /// </summary>
        public partial class AstAddMasterKey1 : AstAddMasterKey
        {
            
            internal AstAddMasterKey1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddMasterKey(this);
            }
        }
        /// <summary>
        /// add_master_key : ENCRYPTION BY password_setting 
        /// </summary>
        public partial class AstAddMasterKey2 : AstAddMasterKey
        {
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstAddMasterKey2(ParserRuleContext ctx, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddMasterKey(this);
            }
        }
        

        
        internal AstAddMasterKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddMasterKey(Position p) : 
                base(p)
        {
        }
        
        internal AstAddMasterKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAddMasterKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAddMasterKey.Resolve(list);
            if ((index == 1))
            {
                return new AstAddMasterKey.AstAddMasterKey1(ctx);
            }
            if ((index == 2))
            {
                return new AstAddMasterKey.AstAddMasterKey2(ctx, ((AstPasswordSetting)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPasswordSetting), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// add_master_key : 
        ///    ENCRYPTION BY SERVICE MASTER KEY 
        /// </summary>
        public static AstAddMasterKey AddMasterKey(ParserRuleContext ctx)
        {
            AstAddMasterKey.AstAddMasterKey1 result = new AstAddMasterKey.AstAddMasterKey1(ctx);
            return result;
        }
        
        /// <summary>
        /// add_master_key : 
        ///    ENCRYPTION BY password_setting 
        /// </summary>
        public static AstAddMasterKey AddMasterKey(ParserRuleContext ctx, AstPasswordSetting passwordSetting)
        {
            AstAddMasterKey.AstAddMasterKey2 result = new AstAddMasterKey.AstAddMasterKey2(ctx, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// message_validation_value
    /// 	 : message_validation_value_enum
    /// 	 | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id
    /// </summary>
    public abstract partial class AstMessageValidationValue : AstBnfRule
    {
        
        protected static string _rule = "message_validation_value\r\n\t : message_validation_value_enum\r\n\t | VALID_XML  WITH " +
            " SCHEMA  COLLECTION  schema_collection_id";
        
        /// <summary>
        /// message_validation_value : message_validation_value_enum 
        /// </summary>
        public partial class AstMessageValidationValue1 : AstMessageValidationValue
        {
            
            private AstMessageValidationValueEnum _messageValidationValueEnum;
            
            internal AstMessageValidationValue1(ParserRuleContext ctx, AstMessageValidationValueEnum messageValidationValueEnum) : 
                    base(ctx)
            {
                _messageValidationValueEnum = messageValidationValueEnum;
            }
            
            public virtual AstMessageValidationValueEnum MessageValidationValueEnum
            {
                get
                {
                    return _messageValidationValueEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMessageValidationValue(this);
            }
        }
        /// <summary>
        /// message_validation_value : VALID_XML WITH SCHEMA COLLECTION schema_collection_id 
        /// </summary>
        public partial class AstMessageValidationValue2 : AstMessageValidationValue
        {
            
            private AstSchemaCollectionId _schemaCollectionId;
            
            internal AstMessageValidationValue2(ParserRuleContext ctx, AstSchemaCollectionId schemaCollectionId) : 
                    base(ctx)
            {
                _schemaCollectionId = schemaCollectionId;
            }
            
            public virtual AstSchemaCollectionId SchemaCollectionId
            {
                get
                {
                    return _schemaCollectionId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMessageValidationValue(this);
            }
        }
        

        
        internal AstMessageValidationValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMessageValidationValue(Position p) : 
                base(p)
        {
        }
        
        internal AstMessageValidationValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMessageValidationValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMessageValidationValue.Resolve(list);
            if ((index == 2))
            {
                return new AstMessageValidationValue.AstMessageValidationValue1(ctx, ((AstMessageValidationValueEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstMessageValidationValue.AstMessageValidationValue2(ctx, ((AstSchemaCollectionId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstMessageValidationValueEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSchemaCollectionId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// message_validation_value : 
        ///    message_validation_value_enum 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(ParserRuleContext ctx, AstMessageValidationValueEnum messageValidationValueEnum)
        {
            AstMessageValidationValue.AstMessageValidationValue1 result = new AstMessageValidationValue.AstMessageValidationValue1(ctx, messageValidationValueEnum);
            return result;
        }
        
        /// <summary>
        /// message_validation_value : 
        ///    VALID_XML WITH SCHEMA COLLECTION schema_collection_id 
        /// </summary>
        public static AstMessageValidationValue MessageValidationValue(ParserRuleContext ctx, AstSchemaCollectionId schemaCollectionId)
        {
            AstMessageValidationValue.AstMessageValidationValue2 result = new AstMessageValidationValue.AstMessageValidationValue2(ctx, schemaCollectionId);
            return result;
        }
    }
    
    /// <summary>
    /// create_resource_pool_infos
    /// 	 : WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = decimal)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = decimal)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = decimal)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  resource_affinity_scheduler_value)?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = decimal)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = decimal)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = decimal)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = decimal)?  RR_BRACKET
    /// </summary>
    public partial class AstCreateResourcePoolInfos : AstBnfRule
    {
        
        protected static string _rule = @"create_resource_pool_infos
	 : WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = decimal)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = decimal)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = decimal)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  resource_affinity_scheduler_value)?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = decimal)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = decimal)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = decimal)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = decimal)?  RR_BRACKET";
        
        internal AstCreateResourcePoolInfos(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateResourcePoolInfos(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateResourcePoolInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateResourcePoolInfos(ParserRuleContext ctx, AstDecimal minCpuPercent, AstDecimal maxCpuPercent, AstDecimal capCpuPercent, AstResourceAffinitySchedulerValue resourceAffinitySchedulerValue, AstDecimal minMemoryPercent, AstDecimal maxMemoryPercent, AstDecimal minTopsPercent, AstDecimal maxTopsPercent) : 
                base(ctx)
        {
            _minCpuPercent = minCpuPercent;
            _maxCpuPercent = maxCpuPercent;
            _capCpuPercent = capCpuPercent;
            _resourceAffinitySchedulerValue = resourceAffinitySchedulerValue;
            _minMemoryPercent = minMemoryPercent;
            _maxMemoryPercent = maxMemoryPercent;
            _minTopsPercent = minTopsPercent;
            _maxTopsPercent = maxTopsPercent;
        }
        
        public virtual AstDecimal _minCpuPercent
        {
            get
            {
                return _minCpuPercent;
            }
        }
        
        public virtual AstDecimal _maxCpuPercent
        {
            get
            {
                return _maxCpuPercent;
            }
        }
        
        public virtual AstDecimal _capCpuPercent
        {
            get
            {
                return _capCpuPercent;
            }
        }
        
        public virtual AstResourceAffinitySchedulerValue _resourceAffinitySchedulerValue
        {
            get
            {
                return _resourceAffinitySchedulerValue;
            }
        }
        
        public virtual AstDecimal _minMemoryPercent
        {
            get
            {
                return _minMemoryPercent;
            }
        }
        
        public virtual AstDecimal _maxMemoryPercent
        {
            get
            {
                return _maxMemoryPercent;
            }
        }
        
        public virtual AstDecimal _minTopsPercent
        {
            get
            {
                return _minTopsPercent;
            }
        }
        
        public virtual AstDecimal _maxTopsPercent
        {
            get
            {
                return _maxTopsPercent;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePoolInfos(this);
        }
        
        /// <summary>
        /// create_resource_pool_infos : 
        ///    WITH ( COMMA? MIN_CPU_PERCENT EQUAL min_cpu_percent=decimal COMMA? MAX_CPU_PERCENT EQUAL max_cpu_percent=decimal COMMA? CAP_CPU_PERCENT EQUAL cap_cpu_percent=decimal COMMA? AFFINITY SCHEDULER EQUAL resource_affinity_scheduler_value COMMA? MIN_MEMORY_PERCENT EQUAL min_memory_percent=decimal COMMA? MAX_MEMORY_PERCENT EQUAL max_memory_percent=decimal COMMA? MIN_IOPS_PER_VOLUME EQUAL min_tops_percent=decimal COMMA? MAX_IOPS_PER_VOLUME EQUAL max_tops_percent=decimal ) 
        /// </summary>
        public static AstCreateResourcePoolInfos CreateResourcePoolInfos(ParserRuleContext ctx, AstDecimal minCpuPercent, AstDecimal maxCpuPercent, AstDecimal capCpuPercent, AstResourceAffinitySchedulerValue resourceAffinitySchedulerValue, AstDecimal minMemoryPercent, AstDecimal maxMemoryPercent, AstDecimal minTopsPercent, AstDecimal maxTopsPercent)
        {
            AstCreateResourcePoolInfos result = new AstCreateResourcePoolInfos(ctx, minCpuPercent, maxCpuPercent, capCpuPercent, resourceAffinitySchedulerValue, minMemoryPercent, maxMemoryPercent, minTopsPercent, maxTopsPercent);
            return result;
        }
    }
    
    /// <summary>
    /// resource_affinity_scheduler_value
    /// 	 : AUTO
    /// 	 | LR_BRACKET  decimal_ranges  RR_BRACKET
    /// 	 | NUMANODE  EQUAL  LR_BRACKET  decimal_ranges  RR_BRACKET
    /// </summary>
    public abstract partial class AstResourceAffinitySchedulerValue : AstBnfRule
    {
        
        protected static string _rule = "resource_affinity_scheduler_value\r\n\t : AUTO\r\n\t | LR_BRACKET  decimal_ranges  RR_B" +
            "RACKET\r\n\t | NUMANODE  EQUAL  LR_BRACKET  decimal_ranges  RR_BRACKET";
        
        /// <summary>
        /// resource_affinity_scheduler_value : AUTO 
        /// </summary>
        public partial class AstResourceAffinitySchedulerValue1 : AstResourceAffinitySchedulerValue
        {
            
            internal AstResourceAffinitySchedulerValue1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResourceAffinitySchedulerValue(this);
            }
        }
        /// <summary>
        /// resource_affinity_scheduler_value : LR_BRACKET decimal_ranges RR_BRACKET 
        /// </summary>
        public partial class AstResourceAffinitySchedulerValue2 : AstResourceAffinitySchedulerValue
        {
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstResourceAffinitySchedulerValue2(ParserRuleContext ctx, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRanges = decimalRanges;
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResourceAffinitySchedulerValue(this);
            }
        }
        /// <summary>
        /// resource_affinity_scheduler_value : NUMANODE EQUAL LR_BRACKET decimal_ranges RR_BRACKET 
        /// </summary>
        public partial class AstResourceAffinitySchedulerValue3 : AstResourceAffinitySchedulerValue
        {
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstResourceAffinitySchedulerValue3(ParserRuleContext ctx, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRanges = decimalRanges;
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResourceAffinitySchedulerValue(this);
            }
        }
        

        
        internal AstResourceAffinitySchedulerValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstResourceAffinitySchedulerValue(Position p) : 
                base(p)
        {
        }
        
        internal AstResourceAffinitySchedulerValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstResourceAffinitySchedulerValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstResourceAffinitySchedulerValue.Resolve(list);
            if ((index == 1))
            {
                return new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue1(ctx);
            }
            if ((index == 2))
            {
                return new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue2(ctx, ((AstDecimalRanges)(list[0])));
            }
            if ((index == 2))
            {
                return new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue3(ctx, ((AstDecimalRanges)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimalRanges), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalRanges), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// resource_affinity_scheduler_value : 
        ///    AUTO 
        /// </summary>
        public static AstResourceAffinitySchedulerValue ResourceAffinitySchedulerValue(ParserRuleContext ctx)
        {
            AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue1 result = new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue1(ctx);
            return result;
        }
        
        /// <summary>
        /// resource_affinity_scheduler_value : 
        ///    ( decimal_ranges ) 
        /// </summary>
        public static AstResourceAffinitySchedulerValue ResourceAffinitySchedulerValue(ParserRuleContext ctx, AstDecimalRanges decimalRanges)
        {
            AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue2 result = new AstResourceAffinitySchedulerValue.AstResourceAffinitySchedulerValue2(ctx, decimalRanges);
            return result;
        }
    }
    
    /// <summary>
    /// alter_resource_governor
    /// 	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)
    /// </summary>
    public abstract partial class AstAlterResourceGovernor : AstBnfRule
    {
        
        protected static string _rule = @"alter_resource_governor
	 : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)";
        
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR disable_reconfigure 
        /// </summary>
        public partial class AstAlterResourceGovernor1 : AstAlterResourceGovernor
        {
            
            private AstDisableReconfigure _disableReconfigure;
            
            internal AstAlterResourceGovernor1(ParserRuleContext ctx, AstDisableReconfigure disableReconfigure) : 
                    base(ctx)
            {
                _disableReconfigure = disableReconfigure;
            }
            
            public virtual AstDisableReconfigure DisableReconfigure
            {
                get
                {
                    return _disableReconfigure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR WITH LR_BRACKET CLASSIFIER_FUNCTION EQUAL schema_func_proc_ref RR_BRACKET 
        /// </summary>
        public partial class AstAlterResourceGovernor2 : AstAlterResourceGovernor
        {
            
            private AstSchemaFuncProcRef _schemaFuncProcRef;
            
            internal AstAlterResourceGovernor2(ParserRuleContext ctx, AstSchemaFuncProcRef schemaFuncProcRef) : 
                    base(ctx)
            {
                _schemaFuncProcRef = schemaFuncProcRef;
            }
            
            public virtual AstSchemaFuncProcRef SchemaFuncProcRef
            {
                get
                {
                    return _schemaFuncProcRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR WITH LR_BRACKET CLASSIFIER_FUNCTION EQUAL NULL_ RR_BRACKET 
        /// </summary>
        public partial class AstAlterResourceGovernor3 : AstAlterResourceGovernor
        {
            
            internal AstAlterResourceGovernor3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR RESET STATISTICS 
        /// </summary>
        public partial class AstAlterResourceGovernor4 : AstAlterResourceGovernor
        {
            
            internal AstAlterResourceGovernor4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        /// <summary>
        /// alter_resource_governor : ALTER RESOURCE GOVERNOR WITH LR_BRACKET MAX_OUTSTANDING_IO_PER_VOLUME EQUAL max_outstanding_io_per_volume=decimal RR_BRACKET 
        /// </summary>
        public partial class AstAlterResourceGovernor5 : AstAlterResourceGovernor
        {
            
            private AstDecimal _maxOutstandingIoPerVolume;
            
            internal AstAlterResourceGovernor5(ParserRuleContext ctx, AstDecimal maxOutstandingIoPerVolume) : 
                    base(ctx)
            {
                _maxOutstandingIoPerVolume = maxOutstandingIoPerVolume;
            }
            
            public virtual AstDecimal MaxOutstandingIoPerVolume
            {
                get
                {
                    return _maxOutstandingIoPerVolume;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterResourceGovernor(this);
            }
        }
        

        
        internal AstAlterResourceGovernor(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterResourceGovernor(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterResourceGovernor(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterResourceGovernor Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterResourceGovernor.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor1(ctx, ((AstDisableReconfigure)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor2(ctx, ((AstSchemaFuncProcRef)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor3(ctx);
            }
            if ((index == 1))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor4(ctx);
            }
            if ((index == 2))
            {
                return new AstAlterResourceGovernor.AstAlterResourceGovernor5(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDisableReconfigure), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSchemaFuncProcRef), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR disable_reconfigure 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx, AstDisableReconfigure disableReconfigure)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor1 result = new AstAlterResourceGovernor.AstAlterResourceGovernor1(ctx, disableReconfigure);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( CLASSIFIER_FUNCTION EQUAL schema_func_proc_ref ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx, AstSchemaFuncProcRef schemaFuncProcRef)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor2 result = new AstAlterResourceGovernor.AstAlterResourceGovernor2(ctx, schemaFuncProcRef);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( CLASSIFIER_FUNCTION EQUAL NULL_ ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor3 result = new AstAlterResourceGovernor.AstAlterResourceGovernor3(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_resource_governor : 
        ///    ALTER RESOURCE GOVERNOR WITH ( MAX_OUTSTANDING_IO_PER_VOLUME EQUAL max_outstanding_io_per_volume=decimal ) 
        /// </summary>
        public static AstAlterResourceGovernor AlterResourceGovernor(ParserRuleContext ctx, AstDecimal maxOutstandingIoPerVolume)
        {
            AstAlterResourceGovernor.AstAlterResourceGovernor5 result = new AstAlterResourceGovernor.AstAlterResourceGovernor5(ctx, maxOutstandingIoPerVolume);
            return result;
        }
    }
    
    /// <summary>
    /// alter_db_role
    /// 	 : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  database_id | WITH  NAME  EQUAL  new_role_name = role_id)
    /// </summary>
    public abstract partial class AstAlterDbRole : AstBnfRule
    {
        
        protected static string _rule = "alter_db_role\r\n\t : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  datab" +
            "ase_id | WITH  NAME  EQUAL  new_role_name = role_id)";
        
        /// <summary>
        /// alter_db_role : ALTER ROLE old_role_name=role_id add_drop MEMBER database_id 
        /// </summary>
        public partial class AstAlterDbRole1 : AstAlterDbRole
        {
            
            private AstRoleId _oldRoleName;
            
            private AstAddDrop _addDrop;
            
            private AstDatabaseId _databaseId;
            
            internal AstAlterDbRole1(ParserRuleContext ctx, AstRoleId oldRoleName, AstAddDrop addDrop, AstDatabaseId databaseId) : 
                    base(ctx)
            {
                _oldRoleName = oldRoleName;
                _addDrop = addDrop;
                _databaseId = databaseId;
            }
            
            public virtual AstRoleId OldRoleName
            {
                get
                {
                    return _oldRoleName;
                }
            }
            
            public virtual AstAddDrop AddDrop
            {
                get
                {
                    return _addDrop;
                }
            }
            
            public virtual AstDatabaseId DatabaseId
            {
                get
                {
                    return _databaseId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDbRole(this);
            }
        }
        /// <summary>
        /// alter_db_role : ALTER ROLE old_role_name=role_id WITH NAME EQUAL new_role_name=role_id 
        /// </summary>
        public partial class AstAlterDbRole2 : AstAlterDbRole
        {
            
            private AstRoleId _oldRoleName;
            
            private AstRoleId _newRoleName;
            
            internal AstAlterDbRole2(ParserRuleContext ctx, AstRoleId oldRoleName, AstRoleId newRoleName) : 
                    base(ctx)
            {
                _oldRoleName = oldRoleName;
                _newRoleName = newRoleName;
            }
            
            public virtual AstRoleId OldRoleName
            {
                get
                {
                    return _oldRoleName;
                }
            }
            
            public virtual AstRoleId NewRoleName
            {
                get
                {
                    return _newRoleName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDbRole(this);
            }
        }
        

        
        internal AstAlterDbRole(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterDbRole(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterDbRole(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterDbRole Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterDbRole.Resolve(list);
            if ((index == 4))
            {
                return new AstAlterDbRole.AstAlterDbRole1(ctx, ((AstRoleId)(list[0])), ((AstAddDrop)(list[1])), ((AstDatabaseId)(list[2])));
            }
            if ((index == 3))
            {
                return new AstAlterDbRole.AstAlterDbRole2(ctx, ((AstRoleId)(list[0])), ((AstRoleId)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstRoleId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAddDrop), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDatabaseId), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstRoleId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstRoleId), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_db_role : 
        ///    ALTER ROLE old_role_name=role_id add_drop MEMBER database_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(ParserRuleContext ctx, AstRoleId oldRoleName, AstAddDrop addDrop, AstDatabaseId databaseId)
        {
            AstAlterDbRole.AstAlterDbRole1 result = new AstAlterDbRole.AstAlterDbRole1(ctx, oldRoleName, addDrop, databaseId);
            return result;
        }
        
        /// <summary>
        /// alter_db_role : 
        ///    ALTER ROLE old_role_name=role_id WITH NAME EQUAL new_role_name=role_id 
        /// </summary>
        public static AstAlterDbRole AlterDbRole(ParserRuleContext ctx, AstRoleId oldRoleName, AstRoleId newRoleName)
        {
            AstAlterDbRole.AstAlterDbRole2 result = new AstAlterDbRole.AstAlterDbRole2(ctx, oldRoleName, newRoleName);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_name
    /// 	 : schema_identifier  schema_authorization?
    /// 	 | schema_identifier?  schema_authorization
    /// </summary>
    public abstract partial class AstCreateSchemaName : AstBnfRule
    {
        
        protected static string _rule = "create_schema_name\r\n\t : schema_identifier  schema_authorization?\r\n\t | schema_iden" +
            "tifier?  schema_authorization";
        
        /// <summary>
        /// create_schema_name : schema_identifier schema_authorization? 
        /// </summary>
        public partial class AstCreateSchemaName1 : AstCreateSchemaName
        {
            
            private AstSchemaIdentifier _schemaIdentifier;
            
            private AstSchemaAuthorization _schemaAuthorization;
            
            internal AstCreateSchemaName1(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier, AstSchemaAuthorization schemaAuthorization) : 
                    base(ctx)
            {
                _schemaIdentifier = schemaIdentifier;
                _schemaAuthorization = schemaAuthorization;
            }
            
            public virtual AstSchemaIdentifier SchemaIdentifier
            {
                get
                {
                    return _schemaIdentifier;
                }
            }
            
            public virtual AstSchemaAuthorization SchemaAuthorization
            {
                get
                {
                    return _schemaAuthorization;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaName(this);
            }
        }
        /// <summary>
        /// create_schema_name : schema_identifier? schema_authorization 
        /// </summary>
        public partial class AstCreateSchemaName2 : AstCreateSchemaName
        {
            
            private AstSchemaIdentifier _schemaIdentifier;
            
            private AstSchemaAuthorization _schemaAuthorization;
            
            internal AstCreateSchemaName2(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier, AstSchemaAuthorization schemaAuthorization) : 
                    base(ctx)
            {
                _schemaIdentifier = schemaIdentifier;
                _schemaAuthorization = schemaAuthorization;
            }
            
            public virtual AstSchemaIdentifier SchemaIdentifier
            {
                get
                {
                    return _schemaIdentifier;
                }
            }
            
            public virtual AstSchemaAuthorization SchemaAuthorization
            {
                get
                {
                    return _schemaAuthorization;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaName(this);
            }
        }
        

        
        internal AstCreateSchemaName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaName(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSchemaName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSchemaName.Resolve(list);
            if ((index == 3))
            {
                return new AstCreateSchemaName.AstCreateSchemaName1(ctx, ((AstSchemaIdentifier)(list[0])), ((AstSchemaAuthorization)(list[1])));
            }
            if ((index == 3))
            {
                return new AstCreateSchemaName.AstCreateSchemaName2(ctx, ((AstSchemaIdentifier)(list[0])), ((AstSchemaAuthorization)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaIdentifier), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSchemaAuthorization), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSchemaIdentifier), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSchemaAuthorization), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_schema_name : 
        ///    schema_identifier schema_authorization? 
        /// </summary>
        public static AstCreateSchemaName CreateSchemaName(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier, AstSchemaAuthorization schemaAuthorization)
        {
            AstCreateSchemaName.AstCreateSchemaName1 result = new AstCreateSchemaName.AstCreateSchemaName1(ctx, schemaIdentifier, schemaAuthorization);
            return result;
        }
    }
    
    /// <summary>
    /// create_schema_target
    /// 	 : create_table
    /// 	 | create_view
    /// 	 | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  TO  owner_id
    /// 	 | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  FROM  owner_id
    /// </summary>
    public abstract partial class AstCreateSchemaTarget : AstBnfRule
    {
        
        protected static string _rule = "create_schema_target\r\n\t : create_table\r\n\t | create_view\r\n\t | grant_deny  enum_dml" +
            "  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  TO  owner_id\r\n\t | REVOKE  enum" +
            "_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  FROM  owner_id";
        
        /// <summary>
        /// create_schema_target : create_table 
        /// </summary>
        public partial class AstCreateSchemaTarget1 : AstCreateSchemaTarget
        {
            
            private AstCreateTable _createTable;
            
            internal AstCreateSchemaTarget1(ParserRuleContext ctx, AstCreateTable createTable) : 
                    base(ctx)
            {
                _createTable = createTable;
            }
            
            public virtual AstCreateTable CreateTable
            {
                get
                {
                    return _createTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : create_view 
        /// </summary>
        public partial class AstCreateSchemaTarget2 : AstCreateSchemaTarget
        {
            
            private AstCreateView _createView;
            
            internal AstCreateSchemaTarget2(ParserRuleContext ctx, AstCreateView createView) : 
                    base(ctx)
            {
                _createView = createView;
            }
            
            public virtual AstCreateView CreateView
            {
                get
                {
                    return _createView;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : grant_deny enum_dml ON SCHEMA DOUBLE_COLON object_identifier TO owner_id 
        /// </summary>
        public partial class AstCreateSchemaTarget3 : AstCreateSchemaTarget
        {
            
            private AstGrantDeny _grantDeny;
            
            private AstEnumDml _enumDml;
            
            private AstObjectIdentifier _objectIdentifier;
            
            private AstOwnerId _ownerId;
            
            internal AstCreateSchemaTarget3(ParserRuleContext ctx, AstGrantDeny grantDeny, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId) : 
                    base(ctx)
            {
                _grantDeny = grantDeny;
                _enumDml = enumDml;
                _objectIdentifier = objectIdentifier;
                _ownerId = ownerId;
            }
            
            public virtual AstGrantDeny GrantDeny
            {
                get
                {
                    return _grantDeny;
                }
            }
            
            public virtual AstEnumDml EnumDml
            {
                get
                {
                    return _enumDml;
                }
            }
            
            public virtual AstObjectIdentifier ObjectIdentifier
            {
                get
                {
                    return _objectIdentifier;
                }
            }
            
            public virtual AstOwnerId OwnerId
            {
                get
                {
                    return _ownerId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        /// <summary>
        /// create_schema_target : REVOKE enum_dml ON SCHEMA DOUBLE_COLON object_identifier FROM owner_id 
        /// </summary>
        public partial class AstCreateSchemaTarget4 : AstCreateSchemaTarget
        {
            
            private AstEnumDml _enumDml;
            
            private AstObjectIdentifier _objectIdentifier;
            
            private AstOwnerId _ownerId;
            
            internal AstCreateSchemaTarget4(ParserRuleContext ctx, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId) : 
                    base(ctx)
            {
                _enumDml = enumDml;
                _objectIdentifier = objectIdentifier;
                _ownerId = ownerId;
            }
            
            public virtual AstEnumDml EnumDml
            {
                get
                {
                    return _enumDml;
                }
            }
            
            public virtual AstObjectIdentifier ObjectIdentifier
            {
                get
                {
                    return _objectIdentifier;
                }
            }
            
            public virtual AstOwnerId OwnerId
            {
                get
                {
                    return _ownerId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSchemaTarget(this);
            }
        }
        

        
        internal AstCreateSchemaTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSchemaTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSchemaTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSchemaTarget Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSchemaTarget.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget1(ctx, ((AstCreateTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget2(ctx, ((AstCreateView)(list[0])));
            }
            if ((index == 5))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget3(ctx, ((AstGrantDeny)(list[0])), ((AstEnumDml)(list[1])), ((AstObjectIdentifier)(list[2])), ((AstOwnerId)(list[3])));
            }
            if ((index == 4))
            {
                return new AstCreateSchemaTarget.AstCreateSchemaTarget4(ctx, ((AstEnumDml)(list[0])), ((AstObjectIdentifier)(list[1])), ((AstOwnerId)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstGrantDeny), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEnumDml), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstObjectIdentifier), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstOwnerId), false, false))
                            {
                                return 3;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstEnumDml), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstObjectIdentifier), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOwnerId), false, false))
                        {
                            return 4;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCreateTable), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateView), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    create_table 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstCreateTable createTable)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget1 result = new AstCreateSchemaTarget.AstCreateSchemaTarget1(ctx, createTable);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    create_view 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstCreateView createView)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget2 result = new AstCreateSchemaTarget.AstCreateSchemaTarget2(ctx, createView);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    grant_deny enum_dml ON SCHEMA :: object_identifier TO owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstGrantDeny grantDeny, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget3 result = new AstCreateSchemaTarget.AstCreateSchemaTarget3(ctx, grantDeny, enumDml, objectIdentifier, ownerId);
            return result;
        }
        
        /// <summary>
        /// create_schema_target : 
        ///    REVOKE enum_dml ON SCHEMA :: object_identifier FROM owner_id 
        /// </summary>
        public static AstCreateSchemaTarget CreateSchemaTarget(ParserRuleContext ctx, AstEnumDml enumDml, AstObjectIdentifier objectIdentifier, AstOwnerId ownerId)
        {
            AstCreateSchemaTarget.AstCreateSchemaTarget4 result = new AstCreateSchemaTarget.AstCreateSchemaTarget4(ctx, enumDml, objectIdentifier, ownerId);
            return result;
        }
    }
    
    /// <summary>
    /// schema_table_ref_impact
    /// 	 : AFTER  insert_update
    /// 	 | BEFORE  update_delate
    /// </summary>
    public abstract partial class AstSchemaTableRefImpact : AstBnfRule
    {
        
        protected static string _rule = "schema_table_ref_impact\r\n\t : AFTER  insert_update\r\n\t | BEFORE  update_delate";
        
        /// <summary>
        /// schema_table_ref_impact : AFTER insert_update 
        /// </summary>
        public partial class AstSchemaTableRefImpact1 : AstSchemaTableRefImpact
        {
            
            private AstInsertUpdate _insertUpdate;
            
            internal AstSchemaTableRefImpact1(ParserRuleContext ctx, AstInsertUpdate insertUpdate) : 
                    base(ctx)
            {
                _insertUpdate = insertUpdate;
            }
            
            public virtual AstInsertUpdate InsertUpdate
            {
                get
                {
                    return _insertUpdate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaTableRefImpact(this);
            }
        }
        /// <summary>
        /// schema_table_ref_impact : BEFORE update_delate 
        /// </summary>
        public partial class AstSchemaTableRefImpact2 : AstSchemaTableRefImpact
        {
            
            private AstUpdateDelate _updateDelate;
            
            internal AstSchemaTableRefImpact2(ParserRuleContext ctx, AstUpdateDelate updateDelate) : 
                    base(ctx)
            {
                _updateDelate = updateDelate;
            }
            
            public virtual AstUpdateDelate UpdateDelate
            {
                get
                {
                    return _updateDelate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaTableRefImpact(this);
            }
        }
        

        
        internal AstSchemaTableRefImpact(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSchemaTableRefImpact(Position p) : 
                base(p)
        {
        }
        
        internal AstSchemaTableRefImpact(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSchemaTableRefImpact Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSchemaTableRefImpact.Resolve(list);
            if ((index == 2))
            {
                return new AstSchemaTableRefImpact.AstSchemaTableRefImpact1(ctx, ((AstInsertUpdate)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSchemaTableRefImpact.AstSchemaTableRefImpact2(ctx, ((AstUpdateDelate)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstInsertUpdate), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateDelate), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// schema_table_ref_impact : 
        ///    AFTER insert_update 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(ParserRuleContext ctx, AstInsertUpdate insertUpdate)
        {
            AstSchemaTableRefImpact.AstSchemaTableRefImpact1 result = new AstSchemaTableRefImpact.AstSchemaTableRefImpact1(ctx, insertUpdate);
            return result;
        }
        
        /// <summary>
        /// schema_table_ref_impact : 
        ///    BEFORE update_delate 
        /// </summary>
        public static AstSchemaTableRefImpact SchemaTableRefImpact(ParserRuleContext ctx, AstUpdateDelate updateDelate)
        {
            AstSchemaTableRefImpact.AstSchemaTableRefImpact2 result = new AstSchemaTableRefImpact.AstSchemaTableRefImpact2(ctx, updateDelate);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_restart
    /// 	 : RESTART  (WITH  decimal)?
    /// </summary>
    public partial class AstAlterSequenceRestart : AstBnfRule
    {
        
        protected static string _rule = "alter_sequence_restart\r\n\t : RESTART  (WITH  decimal)?";
        
        internal AstAlterSequenceRestart(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceRestart(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceRestart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstAlterSequenceRestart(ParserRuleContext ctx, AstDecimal @decimal) : 
                base(ctx)
        {
            _decimal = @decimal;
        }
        
        public virtual AstDecimal _decimal
        {
            get
            {
                return _decimal;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceRestart(this);
        }
        
        /// <summary>
        /// alter_sequence_restart : 
        ///    RESTART WITH decimal 
        /// </summary>
        public static AstAlterSequenceRestart AlterSequenceRestart(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterSequenceRestart result = new AstAlterSequenceRestart(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_increment
    /// 	 : INCREMENT  BY  sequnce_increment = decimal
    /// </summary>
    public partial class AstAlterSequenceIncrement : AstBnfRule
    {
        
        protected static string _rule = "alter_sequence_increment\r\n\t : INCREMENT  BY  sequnce_increment = decimal";
        
        internal AstAlterSequenceIncrement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceIncrement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceIncrement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstAlterSequenceIncrement(ParserRuleContext ctx, AstDecimal sequnceIncrement) : 
                base(ctx)
        {
            _sequnceIncrement = sequnceIncrement;
        }
        
        public virtual AstDecimal _sequnceIncrement
        {
            get
            {
                return _sequnceIncrement;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequenceIncrement(this);
        }
        
        /// <summary>
        /// alter_sequence_increment : 
        ///    INCREMENT BY sequnce_increment=decimal 
        /// </summary>
        public static AstAlterSequenceIncrement AlterSequenceIncrement(ParserRuleContext ctx, AstDecimal sequnceIncrement)
        {
            AstAlterSequenceIncrement result = new AstAlterSequenceIncrement(ctx, sequnceIncrement);
            return result;
        }
    }
    
    /// <summary>
    /// sequence_cache
    /// 	 : (CACHE  decimal | NO  CACHE)
    /// </summary>
    public abstract partial class AstSequenceCache : AstBnfRule
    {
        
        protected static string _rule = "sequence_cache\r\n\t : (CACHE  decimal | NO  CACHE)";
        
        /// <summary>
        /// sequence_cache : CACHE decimal 
        /// </summary>
        public partial class AstSequenceCache1 : AstSequenceCache
        {
            
            private AstDecimal _decimal;
            
            internal AstSequenceCache1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCache(this);
            }
        }
        /// <summary>
        /// sequence_cache : NO CACHE 
        /// </summary>
        public partial class AstSequenceCache2 : AstSequenceCache
        {
            
            internal AstSequenceCache2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCache(this);
            }
        }
        

        
        internal AstSequenceCache(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSequenceCache(Position p) : 
                base(p)
        {
        }
        
        internal AstSequenceCache(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSequenceCache Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSequenceCache.Resolve(list);
            if ((index == 2))
            {
                return new AstSequenceCache.AstSequenceCache1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstSequenceCache.AstSequenceCache2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// sequence_cache : 
        ///    CACHE decimal 
        /// </summary>
        public static AstSequenceCache SequenceCache(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSequenceCache.AstSequenceCache1 result = new AstSequenceCache.AstSequenceCache1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// sequence_cache : 
        ///    NO CACHE 
        /// </summary>
        public static AstSequenceCache SequenceCache(ParserRuleContext ctx)
        {
            AstSequenceCache.AstSequenceCache2 result = new AstSequenceCache.AstSequenceCache2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_max_value
    /// 	 : (MAXVALUE  decimal | NO  MAXVALUE)?
    /// </summary>
    public abstract partial class AstAlterSequenceMaxValue : AstBnfRule
    {
        
        protected static string _rule = "alter_sequence_max_value\r\n\t : (MAXVALUE  decimal | NO  MAXVALUE)?";
        
        /// <summary>
        /// alter_sequence_max_value : MAXVALUE decimal 
        /// </summary>
        public partial class AstAlterSequenceMaxValue1 : AstAlterSequenceMaxValue
        {
            
            private AstDecimal _decimal;
            
            internal AstAlterSequenceMaxValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMaxValue(this);
            }
        }
        /// <summary>
        /// alter_sequence_max_value : NO MAXVALUE 
        /// </summary>
        public partial class AstAlterSequenceMaxValue2 : AstAlterSequenceMaxValue
        {
            
            internal AstAlterSequenceMaxValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMaxValue(this);
            }
        }
        

        
        internal AstAlterSequenceMaxValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMaxValue(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMaxValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterSequenceMaxValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterSequenceMaxValue.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_sequence_max_value : 
        ///    MAXVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMaxValue AlterSequenceMaxValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterSequenceMaxValue.AstAlterSequenceMaxValue1 result = new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_sequence_max_value : 
        ///    NO MAXVALUE 
        /// </summary>
        public static AstAlterSequenceMaxValue AlterSequenceMaxValue(ParserRuleContext ctx)
        {
            AstAlterSequenceMaxValue.AstAlterSequenceMaxValue2 result = new AstAlterSequenceMaxValue.AstAlterSequenceMaxValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_sequence_min_value
    /// 	 : MINVALUE  decimal
    /// 	 | NO  MINVALUE
    /// </summary>
    public abstract partial class AstAlterSequenceMinValue : AstBnfRule
    {
        
        protected static string _rule = "alter_sequence_min_value\r\n\t : MINVALUE  decimal\r\n\t | NO  MINVALUE";
        
        /// <summary>
        /// alter_sequence_min_value : MINVALUE decimal 
        /// </summary>
        public partial class AstAlterSequenceMinValue1 : AstAlterSequenceMinValue
        {
            
            private AstDecimal _decimal;
            
            internal AstAlterSequenceMinValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMinValue(this);
            }
        }
        /// <summary>
        /// alter_sequence_min_value : NO MINVALUE 
        /// </summary>
        public partial class AstAlterSequenceMinValue2 : AstAlterSequenceMinValue
        {
            
            internal AstAlterSequenceMinValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterSequenceMinValue(this);
            }
        }
        

        
        internal AstAlterSequenceMinValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterSequenceMinValue(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterSequenceMinValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterSequenceMinValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterSequenceMinValue.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterSequenceMinValue.AstAlterSequenceMinValue1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAlterSequenceMinValue.AstAlterSequenceMinValue2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_sequence_min_value : 
        ///    MINVALUE decimal 
        /// </summary>
        public static AstAlterSequenceMinValue AlterSequenceMinValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterSequenceMinValue.AstAlterSequenceMinValue1 result = new AstAlterSequenceMinValue.AstAlterSequenceMinValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_sequence_min_value : 
        ///    NO MINVALUE 
        /// </summary>
        public static AstAlterSequenceMinValue AlterSequenceMinValue(ParserRuleContext ctx)
        {
            AstAlterSequenceMinValue.AstAlterSequenceMinValue2 result = new AstAlterSequenceMinValue.AstAlterSequenceMinValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_min_value
    /// 	 : MINVALUE  real?
    /// 	 | NO  MINVALUE
    /// </summary>
    public abstract partial class AstCreateSequenceMinValue : AstBnfRule
    {
        
        protected static string _rule = "create_sequence_min_value\r\n\t : MINVALUE  real?\r\n\t | NO  MINVALUE";
        
        /// <summary>
        /// create_sequence_min_value : MINVALUE real? 
        /// </summary>
        public partial class AstCreateSequenceMinValue1 : AstCreateSequenceMinValue
        {
            
            private AstReal _real;
            
            internal AstCreateSequenceMinValue1(ParserRuleContext ctx, AstReal real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public virtual AstReal Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMinValue(this);
            }
        }
        /// <summary>
        /// create_sequence_min_value : NO MINVALUE 
        /// </summary>
        public partial class AstCreateSequenceMinValue2 : AstCreateSequenceMinValue
        {
            
            internal AstCreateSequenceMinValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMinValue(this);
            }
        }
        

        
        internal AstCreateSequenceMinValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMinValue(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMinValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSequenceMinValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSequenceMinValue.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateSequenceMinValue.AstCreateSequenceMinValue1(ctx, ((AstReal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstCreateSequenceMinValue.AstCreateSequenceMinValue2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_sequence_min_value : 
        ///    MINVALUE real? 
        /// </summary>
        public static AstCreateSequenceMinValue CreateSequenceMinValue(ParserRuleContext ctx, AstReal real)
        {
            AstCreateSequenceMinValue.AstCreateSequenceMinValue1 result = new AstCreateSequenceMinValue.AstCreateSequenceMinValue1(ctx, real);
            return result;
        }
        
        /// <summary>
        /// create_sequence_min_value : 
        ///    NO MINVALUE 
        /// </summary>
        public static AstCreateSequenceMinValue CreateSequenceMinValue(ParserRuleContext ctx)
        {
            AstCreateSequenceMinValue.AstCreateSequenceMinValue2 result = new AstCreateSequenceMinValue.AstCreateSequenceMinValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_sequence_max_value
    /// 	 : MAXVALUE  real?
    /// 	 | NO  MAXVALUE
    /// </summary>
    public abstract partial class AstCreateSequenceMaxValue : AstBnfRule
    {
        
        protected static string _rule = "create_sequence_max_value\r\n\t : MAXVALUE  real?\r\n\t | NO  MAXVALUE";
        
        /// <summary>
        /// create_sequence_max_value : MAXVALUE real? 
        /// </summary>
        public partial class AstCreateSequenceMaxValue1 : AstCreateSequenceMaxValue
        {
            
            private AstReal _real;
            
            internal AstCreateSequenceMaxValue1(ParserRuleContext ctx, AstReal real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public virtual AstReal Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMaxValue(this);
            }
        }
        /// <summary>
        /// create_sequence_max_value : NO MAXVALUE 
        /// </summary>
        public partial class AstCreateSequenceMaxValue2 : AstCreateSequenceMaxValue
        {
            
            internal AstCreateSequenceMaxValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateSequenceMaxValue(this);
            }
        }
        

        
        internal AstCreateSequenceMaxValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateSequenceMaxValue(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateSequenceMaxValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateSequenceMaxValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateSequenceMaxValue.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1(ctx, ((AstReal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_sequence_max_value : 
        ///    MAXVALUE real? 
        /// </summary>
        public static AstCreateSequenceMaxValue CreateSequenceMaxValue(ParserRuleContext ctx, AstReal real)
        {
            AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1 result = new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue1(ctx, real);
            return result;
        }
        
        /// <summary>
        /// create_sequence_max_value : 
        ///    NO MAXVALUE 
        /// </summary>
        public static AstCreateSequenceMaxValue CreateSequenceMaxValue(ParserRuleContext ctx)
        {
            AstCreateSequenceMaxValue.AstCreateSequenceMaxValue2 result = new AstCreateSequenceMaxValue.AstCreateSequenceMaxValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_infos
    /// 	 : (TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public abstract partial class AstAlterServerAuditInfos : AstBnfRule
    {
        
        protected static string _rule = "alter_server_audit_infos\r\n\t : (TO  server_audit_file)?  with_server_audit_file?  " +
            "where_server_audit_condition?\r\n\t | REMOVE  WHERE\r\n\t | MODIFY  NAME  EQUAL  audit" +
            "_id";
        
        /// <summary>
        /// alter_server_audit_infos : TO server_audit_file with_server_audit_file? where_server_audit_condition? 
        /// </summary>
        public partial class AstAlterServerAuditInfos1 : AstAlterServerAuditInfos
        {
            
            private AstServerAuditFile _serverAuditFile;
            
            private AstWithServerAuditFile _withServerAuditFile;
            
            private AstWhereServerAuditCondition _whereServerAuditCondition;
            
            internal AstAlterServerAuditInfos1(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstWithServerAuditFile withServerAuditFile, AstWhereServerAuditCondition whereServerAuditCondition) : 
                    base(ctx)
            {
                _serverAuditFile = serverAuditFile;
                _withServerAuditFile = withServerAuditFile;
                _whereServerAuditCondition = whereServerAuditCondition;
            }
            
            public virtual AstServerAuditFile ServerAuditFile
            {
                get
                {
                    return _serverAuditFile;
                }
            }
            
            public virtual AstWithServerAuditFile WithServerAuditFile
            {
                get
                {
                    return _withServerAuditFile;
                }
            }
            
            public virtual AstWhereServerAuditCondition WhereServerAuditCondition
            {
                get
                {
                    return _whereServerAuditCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        /// <summary>
        /// alter_server_audit_infos : REMOVE WHERE 
        /// </summary>
        public partial class AstAlterServerAuditInfos2 : AstAlterServerAuditInfos
        {
            
            internal AstAlterServerAuditInfos2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        /// <summary>
        /// alter_server_audit_infos : MODIFY NAME EQUAL audit_id 
        /// </summary>
        public partial class AstAlterServerAuditInfos3 : AstAlterServerAuditInfos
        {
            
            private AstAuditId _auditId;
            
            internal AstAlterServerAuditInfos3(ParserRuleContext ctx, AstAuditId auditId) : 
                    base(ctx)
            {
                _auditId = auditId;
            }
            
            public virtual AstAuditId AuditId
            {
                get
                {
                    return _auditId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditInfos(this);
            }
        }
        

        
        internal AstAlterServerAuditInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterServerAuditInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterServerAuditInfos.Resolve(list);
            if ((index == 4))
            {
                return new AstAlterServerAuditInfos.AstAlterServerAuditInfos1(ctx, ((AstServerAuditFile)(list[0])), ((AstWithServerAuditFile)(list[1])), ((AstWhereServerAuditCondition)(list[2])));
            }
            if ((index == 1))
            {
                return new AstAlterServerAuditInfos.AstAlterServerAuditInfos2(ctx);
            }
            if ((index == 2))
            {
                return new AstAlterServerAuditInfos.AstAlterServerAuditInfos3(ctx, ((AstAuditId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerAuditFile), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWithServerAuditFile), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstWhereServerAuditCondition), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAuditId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    TO server_audit_file with_server_audit_file? where_server_audit_condition? 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstWithServerAuditFile withServerAuditFile, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            AstAlterServerAuditInfos.AstAlterServerAuditInfos1 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos1(ctx, serverAuditFile, withServerAuditFile, whereServerAuditCondition);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    REMOVE WHERE 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(ParserRuleContext ctx)
        {
            AstAlterServerAuditInfos.AstAlterServerAuditInfos2 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos2(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_infos : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstAlterServerAuditInfos AlterServerAuditInfos(ParserRuleContext ctx, AstAuditId auditId)
        {
            AstAlterServerAuditInfos.AstAlterServerAuditInfos3 result = new AstAlterServerAuditInfos.AstAlterServerAuditInfos3(ctx, auditId);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_info
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  on_off
    /// </summary>
    public abstract partial class AstServerAuditFileInfo : AstBnfRule
    {
        
        protected static string _rule = "server_audit_file_info\r\n\t : QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n\t | ON_FAI" +
            "LURE  EQUAL  continue_shutdown\r\n\t | STATE  EQUAL  on_off";
        
        /// <summary>
        /// server_audit_file_info : QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public partial class AstServerAuditFileInfo1 : AstServerAuditFileInfo
        {
            
            private AstDecimal _queueDelay;
            
            internal AstServerAuditFileInfo1(ParserRuleContext ctx, AstDecimal queueDelay) : 
                    base(ctx)
            {
                _queueDelay = queueDelay;
            }
            
            public virtual AstDecimal QueueDelay
            {
                get
                {
                    return _queueDelay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        /// <summary>
        /// server_audit_file_info : ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public partial class AstServerAuditFileInfo2 : AstServerAuditFileInfo
        {
            
            private AstContinueShutdown _continueShutdown;
            
            internal AstServerAuditFileInfo2(ParserRuleContext ctx, AstContinueShutdown continueShutdown) : 
                    base(ctx)
            {
                _continueShutdown = continueShutdown;
            }
            
            public virtual AstContinueShutdown ContinueShutdown
            {
                get
                {
                    return _continueShutdown;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        /// <summary>
        /// server_audit_file_info : STATE EQUAL on_off 
        /// </summary>
        public partial class AstServerAuditFileInfo3 : AstServerAuditFileInfo
        {
            
            private AstOnOff _onOff;
            
            internal AstServerAuditFileInfo3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileInfo(this);
            }
        }
        

        
        internal AstServerAuditFileInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerAuditFileInfo Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerAuditFileInfo.Resolve(list);
            if ((index == 2))
            {
                return new AstServerAuditFileInfo.AstServerAuditFileInfo1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileInfo.AstServerAuditFileInfo2(ctx, ((AstContinueShutdown)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileInfo.AstServerAuditFileInfo3(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstContinueShutdown), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(ParserRuleContext ctx, AstDecimal queueDelay)
        {
            AstServerAuditFileInfo.AstServerAuditFileInfo1 result = new AstServerAuditFileInfo.AstServerAuditFileInfo1(ctx, queueDelay);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(ParserRuleContext ctx, AstContinueShutdown continueShutdown)
        {
            AstServerAuditFileInfo.AstServerAuditFileInfo2 result = new AstServerAuditFileInfo.AstServerAuditFileInfo2(ctx, continueShutdown);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_info : 
        ///    STATE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileInfo ServerAuditFileInfo(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServerAuditFileInfo.AstServerAuditFileInfo3 result = new AstServerAuditFileInfo.AstServerAuditFileInfo3(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file
    /// 	 : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET
    /// 	 | APPLICATION_LOG
    /// 	 | SECURITY_LOG
    /// </summary>
    public abstract partial class AstServerAuditFile : AstBnfRule
    {
        
        protected static string _rule = "server_audit_file\r\n\t : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET\r\n\t " +
            "| APPLICATION_LOG\r\n\t | SECURITY_LOG";
        
        /// <summary>
        /// server_audit_file : FILE LR_BRACKET server_audit_file_specs? RR_BRACKET 
        /// </summary>
        public partial class AstServerAuditFile1 : AstServerAuditFile
        {
            
            private AstServerAuditFileSpecs _serverAuditFileSpecs;
            
            internal AstServerAuditFile1(ParserRuleContext ctx, AstServerAuditFileSpecs serverAuditFileSpecs) : 
                    base(ctx)
            {
                _serverAuditFileSpecs = serverAuditFileSpecs;
            }
            
            public virtual AstServerAuditFileSpecs ServerAuditFileSpecs
            {
                get
                {
                    return _serverAuditFileSpecs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        /// <summary>
        /// server_audit_file : APPLICATION_LOG 
        /// </summary>
        public partial class AstServerAuditFile2 : AstServerAuditFile
        {
            
            internal AstServerAuditFile2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        /// <summary>
        /// server_audit_file : SECURITY_LOG 
        /// </summary>
        public partial class AstServerAuditFile3 : AstServerAuditFile
        {
            
            internal AstServerAuditFile3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFile(this);
            }
        }
        

        
        internal AstServerAuditFile(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFile(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFile(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerAuditFile Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerAuditFile.Resolve(list);
            if ((index == 2))
            {
                return new AstServerAuditFile.AstServerAuditFile1(ctx, ((AstServerAuditFileSpecs)(list[0])));
            }
            if ((index == 1))
            {
                return new AstServerAuditFile.AstServerAuditFile2(ctx);
            }
            if ((index == 1))
            {
                return new AstServerAuditFile.AstServerAuditFile3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerAuditFileSpecs), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_audit_file : 
        ///    FILE ( server_audit_file_specs? ) 
        /// </summary>
        public static AstServerAuditFile ServerAuditFile(ParserRuleContext ctx, AstServerAuditFileSpecs serverAuditFileSpecs)
        {
            AstServerAuditFile.AstServerAuditFile1 result = new AstServerAuditFile.AstServerAuditFile1(ctx, serverAuditFileSpecs);
            return result;
        }
        
        /// <summary>
        /// server_audit_file : 
        ///    APPLICATION_LOG 
        /// </summary>
        public static AstServerAuditFile ServerAuditFile(ParserRuleContext ctx)
        {
            AstServerAuditFile.AstServerAuditFile2 result = new AstServerAuditFile.AstServerAuditFile2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// server_audit_file_spec
    /// 	 : FILEPATH  EQUAL  filepath = stringtext
    /// 	 | MAXSIZE  EQUAL  decimal_size_unlimited
    /// 	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
    /// 	 | MAX_FILES  EQUAL  max_files = decimal
    /// 	 | RESERVE_DISK_SPACE  EQUAL  on_off
    /// </summary>
    public abstract partial class AstServerAuditFileSpec : AstBnfRule
    {
        
        protected static string _rule = @"server_audit_file_spec
	 : FILEPATH  EQUAL  filepath = stringtext
	 | MAXSIZE  EQUAL  decimal_size_unlimited
	 | MAX_ROLLOVER_FILES  EQUAL  max_rollover_files = decimal_unlimited
	 | MAX_FILES  EQUAL  max_files = decimal
	 | RESERVE_DISK_SPACE  EQUAL  on_off";
        
        /// <summary>
        /// server_audit_file_spec : FILEPATH EQUAL filepath=stringtext 
        /// </summary>
        public partial class AstServerAuditFileSpec1 : AstServerAuditFileSpec
        {
            
            private AstStringtext _filepath;
            
            internal AstServerAuditFileSpec1(ParserRuleContext ctx, AstStringtext filepath) : 
                    base(ctx)
            {
                _filepath = filepath;
            }
            
            public virtual AstStringtext Filepath
            {
                get
                {
                    return _filepath;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAXSIZE EQUAL decimal_size_unlimited 
        /// </summary>
        public partial class AstServerAuditFileSpec2 : AstServerAuditFileSpec
        {
            
            private AstDecimalSizeUnlimited _decimalSizeUnlimited;
            
            internal AstServerAuditFileSpec2(ParserRuleContext ctx, AstDecimalSizeUnlimited decimalSizeUnlimited) : 
                    base(ctx)
            {
                _decimalSizeUnlimited = decimalSizeUnlimited;
            }
            
            public virtual AstDecimalSizeUnlimited DecimalSizeUnlimited
            {
                get
                {
                    return _decimalSizeUnlimited;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAX_ROLLOVER_FILES EQUAL max_rollover_files=decimal_unlimited 
        /// </summary>
        public partial class AstServerAuditFileSpec3 : AstServerAuditFileSpec
        {
            
            private AstDecimalUnlimited _maxRolloverFiles;
            
            internal AstServerAuditFileSpec3(ParserRuleContext ctx, AstDecimalUnlimited maxRolloverFiles) : 
                    base(ctx)
            {
                _maxRolloverFiles = maxRolloverFiles;
            }
            
            public virtual AstDecimalUnlimited MaxRolloverFiles
            {
                get
                {
                    return _maxRolloverFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : MAX_FILES EQUAL max_files=decimal 
        /// </summary>
        public partial class AstServerAuditFileSpec4 : AstServerAuditFileSpec
        {
            
            private AstDecimal _maxFiles;
            
            internal AstServerAuditFileSpec4(ParserRuleContext ctx, AstDecimal maxFiles) : 
                    base(ctx)
            {
                _maxFiles = maxFiles;
            }
            
            public virtual AstDecimal MaxFiles
            {
                get
                {
                    return _maxFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        /// <summary>
        /// server_audit_file_spec : RESERVE_DISK_SPACE EQUAL on_off 
        /// </summary>
        public partial class AstServerAuditFileSpec5 : AstServerAuditFileSpec
        {
            
            private AstOnOff _onOff;
            
            internal AstServerAuditFileSpec5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerAuditFileSpec(this);
            }
        }
        

        
        internal AstServerAuditFileSpec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerAuditFileSpec(Position p) : 
                base(p)
        {
        }
        
        internal AstServerAuditFileSpec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerAuditFileSpec Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerAuditFileSpec.Resolve(list);
            if ((index == 2))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec2(ctx, ((AstDecimalSizeUnlimited)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec3(ctx, ((AstDecimalUnlimited)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec4(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerAuditFileSpec.AstServerAuditFileSpec5(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalSizeUnlimited), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalUnlimited), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    FILEPATH EQUAL filepath=stringtext 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstStringtext filepath)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec1 result = new AstServerAuditFileSpec.AstServerAuditFileSpec1(ctx, filepath);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAXSIZE EQUAL decimal_size_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstDecimalSizeUnlimited decimalSizeUnlimited)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec2 result = new AstServerAuditFileSpec.AstServerAuditFileSpec2(ctx, decimalSizeUnlimited);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAX_ROLLOVER_FILES EQUAL max_rollover_files=decimal_unlimited 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstDecimalUnlimited maxRolloverFiles)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec3 result = new AstServerAuditFileSpec.AstServerAuditFileSpec3(ctx, maxRolloverFiles);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    MAX_FILES EQUAL max_files=decimal 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstDecimal maxFiles)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec4 result = new AstServerAuditFileSpec.AstServerAuditFileSpec4(ctx, maxFiles);
            return result;
        }
        
        /// <summary>
        /// server_audit_file_spec : 
        ///    RESERVE_DISK_SPACE EQUAL on_off 
        /// </summary>
        public static AstServerAuditFileSpec ServerAuditFileSpec(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServerAuditFileSpec.AstServerAuditFileSpec5 result = new AstServerAuditFileSpec.AstServerAuditFileSpec5(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_unlimited
    /// 	 : decimal
    /// 	 | UNLIMITED
    /// </summary>
    public abstract partial class AstDecimalUnlimited : AstBnfRule
    {
        
        protected static string _rule = "decimal_unlimited\r\n\t : decimal\r\n\t | UNLIMITED";
        
        /// <summary>
        /// decimal_unlimited : decimal 
        /// </summary>
        public partial class AstDecimalUnlimited1 : AstDecimalUnlimited
        {
            
            private AstDecimal _decimal;
            
            internal AstDecimalUnlimited1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalUnlimited(this);
            }
        }
        /// <summary>
        /// decimal_unlimited : UNLIMITED 
        /// </summary>
        public partial class AstDecimalUnlimited2 : AstDecimalUnlimited
        {
            
            internal AstDecimalUnlimited2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalUnlimited(this);
            }
        }
        

        
        internal AstDecimalUnlimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalUnlimited(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalUnlimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecimalUnlimited Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecimalUnlimited.Resolve(list);
            if ((index == 2))
            {
                return new AstDecimalUnlimited.AstDecimalUnlimited1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstDecimalUnlimited.AstDecimalUnlimited2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// decimal_unlimited : 
        ///    decimal 
        /// </summary>
        public static AstDecimalUnlimited DecimalUnlimited(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstDecimalUnlimited.AstDecimalUnlimited1 result = new AstDecimalUnlimited.AstDecimalUnlimited1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// decimal_unlimited : 
        ///    UNLIMITED 
        /// </summary>
        public static AstDecimalUnlimited DecimalUnlimited(ParserRuleContext ctx)
        {
            AstDecimalUnlimited.AstDecimalUnlimited2 result = new AstDecimalUnlimited.AstDecimalUnlimited2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_size_unlimited
    /// 	 : (decimal  size_unity | UNLIMITED)
    /// </summary>
    public abstract partial class AstDecimalSizeUnlimited : AstBnfRule
    {
        
        protected static string _rule = "decimal_size_unlimited\r\n\t : (decimal  size_unity | UNLIMITED)";
        
        /// <summary>
        /// decimal_size_unlimited : decimal size_unity 
        /// </summary>
        public partial class AstDecimalSizeUnlimited1 : AstDecimalSizeUnlimited
        {
            
            private AstDecimal _decimal;
            
            private AstSizeUnity _sizeUnity;
            
            internal AstDecimalSizeUnlimited1(ParserRuleContext ctx, AstDecimal @decimal, AstSizeUnity sizeUnity) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _sizeUnity = sizeUnity;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstSizeUnity SizeUnity
            {
                get
                {
                    return _sizeUnity;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalSizeUnlimited(this);
            }
        }
        /// <summary>
        /// decimal_size_unlimited : UNLIMITED 
        /// </summary>
        public partial class AstDecimalSizeUnlimited2 : AstDecimalSizeUnlimited
        {
            
            internal AstDecimalSizeUnlimited2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalSizeUnlimited(this);
            }
        }
        

        
        internal AstDecimalSizeUnlimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalSizeUnlimited(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalSizeUnlimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecimalSizeUnlimited Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecimalSizeUnlimited.Resolve(list);
            if ((index == 3))
            {
                return new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited1(ctx, ((AstDecimal)(list[0])), ((AstSizeUnity)(list[1])));
            }
            if ((index == 1))
            {
                return new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSizeUnity), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// decimal_size_unlimited : 
        ///    decimal size_unity 
        /// </summary>
        public static AstDecimalSizeUnlimited DecimalSizeUnlimited(ParserRuleContext ctx, AstDecimal @decimal, AstSizeUnity sizeUnity)
        {
            AstDecimalSizeUnlimited.AstDecimalSizeUnlimited1 result = new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited1(ctx, @decimal, sizeUnity);
            return result;
        }
        
        /// <summary>
        /// decimal_size_unlimited : 
        ///    UNLIMITED 
        /// </summary>
        public static AstDecimalSizeUnlimited DecimalSizeUnlimited(ParserRuleContext ctx)
        {
            AstDecimalSizeUnlimited.AstDecimalSizeUnlimited2 result = new AstDecimalSizeUnlimited.AstDecimalSizeUnlimited2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_audit_condition
    /// 	 : COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string
    /// 	 | COMMA?  and_or  NOT?  audit_operator  decimal_string
    /// </summary>
    public abstract partial class AstAlterServerAuditCondition : AstBnfRule
    {
        
        protected static string _rule = "alter_server_audit_condition\r\n\t : COMMA?  (NOT?)  event_field_id  audit_operator " +
            " decimal_string\r\n\t | COMMA?  and_or  NOT?  audit_operator  decimal_string";
        
        /// <summary>
        /// alter_server_audit_condition : COMMA? NOT? event_field_id audit_operator decimal_string 
        /// </summary>
        public partial class AstAlterServerAuditCondition1 : AstAlterServerAuditCondition
        {
            
            private AstEventFieldId _eventFieldId;
            
            private AstAuditOperator _auditOperator;
            
            private AstDecimalString _decimalString;
            
            internal AstAlterServerAuditCondition1(ParserRuleContext ctx, AstEventFieldId eventFieldId, AstAuditOperator auditOperator, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _eventFieldId = eventFieldId;
                _auditOperator = auditOperator;
                _decimalString = decimalString;
            }
            
            public virtual AstEventFieldId EventFieldId
            {
                get
                {
                    return _eventFieldId;
                }
            }
            
            public virtual AstAuditOperator AuditOperator
            {
                get
                {
                    return _auditOperator;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditCondition(this);
            }
        }
        /// <summary>
        /// alter_server_audit_condition : COMMA? and_or NOT? audit_operator decimal_string 
        /// </summary>
        public partial class AstAlterServerAuditCondition2 : AstAlterServerAuditCondition
        {
            
            private AstAndOr _andOr;
            
            private AstAuditOperator _auditOperator;
            
            private AstDecimalString _decimalString;
            
            internal AstAlterServerAuditCondition2(ParserRuleContext ctx, AstAndOr andOr, AstAuditOperator auditOperator, AstDecimalString decimalString) : 
                    base(ctx)
            {
                _andOr = andOr;
                _auditOperator = auditOperator;
                _decimalString = decimalString;
            }
            
            public virtual AstAndOr AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstAuditOperator AuditOperator
            {
                get
                {
                    return _auditOperator;
                }
            }
            
            public virtual AstDecimalString DecimalString
            {
                get
                {
                    return _decimalString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerAuditCondition(this);
            }
        }
        

        
        internal AstAlterServerAuditCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerAuditCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerAuditCondition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterServerAuditCondition Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterServerAuditCondition.Resolve(list);
            if ((index == 4))
            {
                return new AstAlterServerAuditCondition.AstAlterServerAuditCondition1(ctx, ((AstEventFieldId)(list[0])), ((AstAuditOperator)(list[1])), ((AstDecimalString)(list[2])));
            }
            if ((index == 4))
            {
                return new AstAlterServerAuditCondition.AstAlterServerAuditCondition2(ctx, ((AstAndOr)(list[0])), ((AstAuditOperator)(list[1])), ((AstDecimalString)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstEventFieldId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAuditOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimalString), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstAndOr), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAuditOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimalString), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_server_audit_condition : 
        ///    COMMA? NOT? event_field_id audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(ParserRuleContext ctx, AstEventFieldId eventFieldId, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            AstAlterServerAuditCondition.AstAlterServerAuditCondition1 result = new AstAlterServerAuditCondition.AstAlterServerAuditCondition1(ctx, eventFieldId, auditOperator, decimalString);
            return result;
        }
        
        /// <summary>
        /// alter_server_audit_condition : 
        ///    COMMA? and_or NOT? audit_operator decimal_string 
        /// </summary>
        public static AstAlterServerAuditCondition AlterServerAuditCondition(ParserRuleContext ctx, AstAndOr andOr, AstAuditOperator auditOperator, AstDecimalString decimalString)
        {
            AstAlterServerAuditCondition.AstAlterServerAuditCondition2 result = new AstAlterServerAuditCondition.AstAlterServerAuditCondition2(ctx, andOr, auditOperator, decimalString);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_to_infos
    /// 	 : (TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?
    /// 	 | REMOVE  WHERE
    /// 	 | MODIFY  NAME  EQUAL  audit_id
    /// </summary>
    public abstract partial class AstCreateServerAuditToInfos : AstBnfRule
    {
        
        protected static string _rule = "create_server_audit_to_infos\r\n\t : (TO  server_audit_file)?  (WITH  LR_BRACKET  cr" +
            "eate_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition?\r\n\t | REMOV" +
            "E  WHERE\r\n\t | MODIFY  NAME  EQUAL  audit_id";
        
        /// <summary>
        /// create_server_audit_to_infos : TO server_audit_file WITH LR_BRACKET create_server_audit_withs? RR_BRACKET where_server_audit_condition? 
        /// </summary>
        public partial class AstCreateServerAuditToInfos1 : AstCreateServerAuditToInfos
        {
            
            private AstServerAuditFile _serverAuditFile;
            
            private AstCreateServerAuditWiths _createServerAuditWiths;
            
            private AstWhereServerAuditCondition _whereServerAuditCondition;
            
            internal AstCreateServerAuditToInfos1(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstCreateServerAuditWiths createServerAuditWiths, AstWhereServerAuditCondition whereServerAuditCondition) : 
                    base(ctx)
            {
                _serverAuditFile = serverAuditFile;
                _createServerAuditWiths = createServerAuditWiths;
                _whereServerAuditCondition = whereServerAuditCondition;
            }
            
            public virtual AstServerAuditFile ServerAuditFile
            {
                get
                {
                    return _serverAuditFile;
                }
            }
            
            public virtual AstCreateServerAuditWiths CreateServerAuditWiths
            {
                get
                {
                    return _createServerAuditWiths;
                }
            }
            
            public virtual AstWhereServerAuditCondition WhereServerAuditCondition
            {
                get
                {
                    return _whereServerAuditCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        /// <summary>
        /// create_server_audit_to_infos : REMOVE WHERE 
        /// </summary>
        public partial class AstCreateServerAuditToInfos2 : AstCreateServerAuditToInfos
        {
            
            internal AstCreateServerAuditToInfos2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        /// <summary>
        /// create_server_audit_to_infos : MODIFY NAME EQUAL audit_id 
        /// </summary>
        public partial class AstCreateServerAuditToInfos3 : AstCreateServerAuditToInfos
        {
            
            private AstAuditId _auditId;
            
            internal AstCreateServerAuditToInfos3(ParserRuleContext ctx, AstAuditId auditId) : 
                    base(ctx)
            {
                _auditId = auditId;
            }
            
            public virtual AstAuditId AuditId
            {
                get
                {
                    return _auditId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditToInfos(this);
            }
        }
        

        
        internal AstCreateServerAuditToInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditToInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditToInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateServerAuditToInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateServerAuditToInfos.Resolve(list);
            if ((index == 4))
            {
                return new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1(ctx, ((AstServerAuditFile)(list[0])), ((AstCreateServerAuditWiths)(list[1])), ((AstWhereServerAuditCondition)(list[2])));
            }
            if ((index == 1))
            {
                return new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos2(ctx);
            }
            if ((index == 2))
            {
                return new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3(ctx, ((AstAuditId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerAuditFile), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCreateServerAuditWiths), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstWhereServerAuditCondition), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAuditId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    TO server_audit_file WITH ( create_server_audit_withs? ) where_server_audit_condition? 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(ParserRuleContext ctx, AstServerAuditFile serverAuditFile, AstCreateServerAuditWiths createServerAuditWiths, AstWhereServerAuditCondition whereServerAuditCondition)
        {
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos1(ctx, serverAuditFile, createServerAuditWiths, whereServerAuditCondition);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    REMOVE WHERE 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(ParserRuleContext ctx)
        {
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos2 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos2(ctx);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_to_infos : 
        ///    MODIFY NAME EQUAL audit_id 
        /// </summary>
        public static AstCreateServerAuditToInfos CreateServerAuditToInfos(ParserRuleContext ctx, AstAuditId auditId)
        {
            AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3 result = new AstCreateServerAuditToInfos.AstCreateServerAuditToInfos3(ctx, auditId);
            return result;
        }
    }
    
    /// <summary>
    /// create_server_audit_with
    /// 	 : QUEUE_DELAY  EQUAL  queue_delay = decimal
    /// 	 | ON_FAILURE  EQUAL  continue_shutdown
    /// 	 | STATE  EQUAL  state = on_off
    /// 	 | audit1 = audit_guid_id  EQUAL  audit2 = audit_guid_id
    /// </summary>
    public abstract partial class AstCreateServerAuditWith : AstBnfRule
    {
        
        protected static string _rule = "create_server_audit_with\r\n\t : QUEUE_DELAY  EQUAL  queue_delay = decimal\r\n\t | ON_F" +
            "AILURE  EQUAL  continue_shutdown\r\n\t | STATE  EQUAL  state = on_off\r\n\t | audit1 =" +
            " audit_guid_id  EQUAL  audit2 = audit_guid_id";
        
        /// <summary>
        /// create_server_audit_with : QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public partial class AstCreateServerAuditWith1 : AstCreateServerAuditWith
        {
            
            private AstDecimal _queueDelay;
            
            internal AstCreateServerAuditWith1(ParserRuleContext ctx, AstDecimal queueDelay) : 
                    base(ctx)
            {
                _queueDelay = queueDelay;
            }
            
            public virtual AstDecimal QueueDelay
            {
                get
                {
                    return _queueDelay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public partial class AstCreateServerAuditWith2 : AstCreateServerAuditWith
        {
            
            private AstContinueShutdown _continueShutdown;
            
            internal AstCreateServerAuditWith2(ParserRuleContext ctx, AstContinueShutdown continueShutdown) : 
                    base(ctx)
            {
                _continueShutdown = continueShutdown;
            }
            
            public virtual AstContinueShutdown ContinueShutdown
            {
                get
                {
                    return _continueShutdown;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : STATE EQUAL state=on_off 
        /// </summary>
        public partial class AstCreateServerAuditWith3 : AstCreateServerAuditWith
        {
            
            private AstOnOff _state;
            
            internal AstCreateServerAuditWith3(ParserRuleContext ctx, AstOnOff state) : 
                    base(ctx)
            {
                _state = state;
            }
            
            public virtual AstOnOff State
            {
                get
                {
                    return _state;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        /// <summary>
        /// create_server_audit_with : audit1=audit_guid_id EQUAL audit2=audit_guid_id 
        /// </summary>
        public partial class AstCreateServerAuditWith4 : AstCreateServerAuditWith
        {
            
            private AstAuditGuidId _audit1;
            
            private AstAuditGuidId _audit2;
            
            internal AstCreateServerAuditWith4(ParserRuleContext ctx, AstAuditGuidId audit1, AstAuditGuidId audit2) : 
                    base(ctx)
            {
                _audit1 = audit1;
                _audit2 = audit2;
            }
            
            public virtual AstAuditGuidId Audit1
            {
                get
                {
                    return _audit1;
                }
            }
            
            public virtual AstAuditGuidId Audit2
            {
                get
                {
                    return _audit2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateServerAuditWith(this);
            }
        }
        

        
        internal AstCreateServerAuditWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateServerAuditWith(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateServerAuditWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateServerAuditWith Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateServerAuditWith.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith2(ctx, ((AstContinueShutdown)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 3))
            {
                return new AstCreateServerAuditWith.AstCreateServerAuditWith4(ctx, ((AstAuditGuidId)(list[0])), ((AstAuditGuidId)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAuditGuidId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAuditGuidId), false, false))
                    {
                        return 4;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstContinueShutdown), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    QUEUE_DELAY EQUAL queue_delay=decimal 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstDecimal queueDelay)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith1 result = new AstCreateServerAuditWith.AstCreateServerAuditWith1(ctx, queueDelay);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    ON_FAILURE EQUAL continue_shutdown 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstContinueShutdown continueShutdown)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith2 result = new AstCreateServerAuditWith.AstCreateServerAuditWith2(ctx, continueShutdown);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    STATE EQUAL state=on_off 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstOnOff state)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith3 result = new AstCreateServerAuditWith.AstCreateServerAuditWith3(ctx, state);
            return result;
        }
        
        /// <summary>
        /// create_server_audit_with : 
        ///    audit1=audit_guid_id EQUAL audit2=audit_guid_id 
        /// </summary>
        public static AstCreateServerAuditWith CreateServerAuditWith(ParserRuleContext ctx, AstAuditGuidId audit1, AstAuditGuidId audit2)
        {
            AstCreateServerAuditWith.AstCreateServerAuditWith4 result = new AstCreateServerAuditWith.AstCreateServerAuditWith4(ctx, audit1, audit2);
            return result;
        }
    }
    
    /// <summary>
    /// alter_server_configuration
    /// 	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)
    /// </summary>
    public abstract partial class AstAlterServerConfiguration : AstBnfRule
    {
        
        protected static string _rule = @"alter_server_configuration
	 : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL) | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)";
        
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_process_affinity 
        /// </summary>
        public partial class AstAlterServerConfiguration1 : AstAlterServerConfiguration
        {
            
            private AstServerConfigProcessAffinity _serverConfigProcessAffinity;
            
            internal AstAlterServerConfiguration1(ParserRuleContext ctx, AstServerConfigProcessAffinity serverConfigProcessAffinity) : 
                    base(ctx)
            {
                _serverConfigProcessAffinity = serverConfigProcessAffinity;
            }
            
            public virtual AstServerConfigProcessAffinity ServerConfigProcessAffinity
            {
                get
                {
                    return _serverConfigProcessAffinity;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_diagnostic_log 
        /// </summary>
        public partial class AstAlterServerConfiguration2 : AstAlterServerConfiguration
        {
            
            private AstServerConfigDiagnosticLog _serverConfigDiagnosticLog;
            
            internal AstAlterServerConfiguration2(ParserRuleContext ctx, AstServerConfigDiagnosticLog serverConfigDiagnosticLog) : 
                    base(ctx)
            {
                _serverConfigDiagnosticLog = serverConfigDiagnosticLog;
            }
            
            public virtual AstServerConfigDiagnosticLog ServerConfigDiagnosticLog
            {
                get
                {
                    return _serverConfigDiagnosticLog;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_failover 
        /// </summary>
        public partial class AstAlterServerConfiguration3 : AstAlterServerConfiguration
        {
            
            private AstServerConfigFailover _serverConfigFailover;
            
            internal AstAlterServerConfiguration3(ParserRuleContext ctx, AstServerConfigFailover serverConfigFailover) : 
                    base(ctx)
            {
                _serverConfigFailover = serverConfigFailover;
            }
            
            public virtual AstServerConfigFailover ServerConfigFailover
            {
                get
                {
                    return _serverConfigFailover;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL stringtext 
        /// </summary>
        public partial class AstAlterServerConfiguration4 : AstAlterServerConfiguration
        {
            
            private AstStringtext _stringtext;
            
            internal AstAlterServerConfiguration4(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL LOCAL 
        /// </summary>
        public partial class AstAlterServerConfiguration5 : AstAlterServerConfiguration
        {
            
            internal AstAlterServerConfiguration5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET server_config_buffer_pool_ext 
        /// </summary>
        public partial class AstAlterServerConfiguration6 : AstAlterServerConfiguration
        {
            
            private AstServerConfigBufferPoolExt _serverConfigBufferPoolExt;
            
            internal AstAlterServerConfiguration6(ParserRuleContext ctx, AstServerConfigBufferPoolExt serverConfigBufferPoolExt) : 
                    base(ctx)
            {
                _serverConfigBufferPoolExt = serverConfigBufferPoolExt;
            }
            
            public virtual AstServerConfigBufferPoolExt ServerConfigBufferPoolExt
            {
                get
                {
                    return _serverConfigBufferPoolExt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        /// <summary>
        /// alter_server_configuration : ALTER SERVER CONFIGURATION SET SET SOFTNUMA on_off 
        /// </summary>
        public partial class AstAlterServerConfiguration7 : AstAlterServerConfiguration
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterServerConfiguration7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterServerConfiguration(this);
            }
        }
        

        
        internal AstAlterServerConfiguration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterServerConfiguration(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterServerConfiguration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterServerConfiguration Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterServerConfiguration.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration1(ctx, ((AstServerConfigProcessAffinity)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration2(ctx, ((AstServerConfigDiagnosticLog)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration3(ctx, ((AstServerConfigFailover)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration4(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration5(ctx);
            }
            if ((index == 2))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration6(ctx, ((AstServerConfigBufferPoolExt)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterServerConfiguration.AstAlterServerConfiguration7(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstServerConfigProcessAffinity), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstServerConfigDiagnosticLog), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstServerConfigFailover), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstServerConfigBufferPoolExt), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_process_affinity 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigProcessAffinity serverConfigProcessAffinity)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration1 result = new AstAlterServerConfiguration.AstAlterServerConfiguration1(ctx, serverConfigProcessAffinity);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_diagnostic_log 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigDiagnosticLog serverConfigDiagnosticLog)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration2 result = new AstAlterServerConfiguration.AstAlterServerConfiguration2(ctx, serverConfigDiagnosticLog);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_failover 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigFailover serverConfigFailover)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration3 result = new AstAlterServerConfiguration.AstAlterServerConfiguration3(ctx, serverConfigFailover);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL stringtext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration4 result = new AstAlterServerConfiguration.AstAlterServerConfiguration4(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET HADR CLUSTER CONTEXT EQUAL LOCAL 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration5 result = new AstAlterServerConfiguration.AstAlterServerConfiguration5(ctx);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET server_config_buffer_pool_ext 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstServerConfigBufferPoolExt serverConfigBufferPoolExt)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration6 result = new AstAlterServerConfiguration.AstAlterServerConfiguration6(ctx, serverConfigBufferPoolExt);
            return result;
        }
        
        /// <summary>
        /// alter_server_configuration : 
        ///    ALTER SERVER CONFIGURATION SET SET SOFTNUMA on_off 
        /// </summary>
        public static AstAlterServerConfiguration AlterServerConfiguration(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterServerConfiguration.AstAlterServerConfiguration7 result = new AstAlterServerConfiguration.AstAlterServerConfiguration7(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_process_affinity
    /// 	 : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decimal_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)
    /// </summary>
    public abstract partial class AstServerConfigProcessAffinity : AstBnfRule
    {
        
        protected static string _rule = "server_config_process_affinity\r\n\t : PROCESS  AFFINITY  (CPU  EQUAL  (AUTO | decim" +
            "al_range  decimal_ranges) | NUMANODE  EQUAL  decimal_range  decimal_ranges)";
        
        /// <summary>
        /// server_config_process_affinity : PROCESS AFFINITY CPU EQUAL AUTO 
        /// </summary>
        public partial class AstServerConfigProcessAffinity1 : AstServerConfigProcessAffinity
        {
            
            internal AstServerConfigProcessAffinity1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigProcessAffinity(this);
            }
        }
        /// <summary>
        /// server_config_process_affinity : PROCESS AFFINITY CPU EQUAL decimal_range decimal_ranges 
        /// </summary>
        public partial class AstServerConfigProcessAffinity2 : AstServerConfigProcessAffinity
        {
            
            private AstDecimalRange _decimalRange;
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstServerConfigProcessAffinity2(ParserRuleContext ctx, AstDecimalRange decimalRange, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRange = decimalRange;
                _decimalRanges = decimalRanges;
            }
            
            public virtual AstDecimalRange DecimalRange
            {
                get
                {
                    return _decimalRange;
                }
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigProcessAffinity(this);
            }
        }
        /// <summary>
        /// server_config_process_affinity : PROCESS AFFINITY NUMANODE EQUAL decimal_range decimal_ranges 
        /// </summary>
        public partial class AstServerConfigProcessAffinity3 : AstServerConfigProcessAffinity
        {
            
            private AstDecimalRange _decimalRange;
            
            private AstDecimalRanges _decimalRanges;
            
            internal AstServerConfigProcessAffinity3(ParserRuleContext ctx, AstDecimalRange decimalRange, AstDecimalRanges decimalRanges) : 
                    base(ctx)
            {
                _decimalRange = decimalRange;
                _decimalRanges = decimalRanges;
            }
            
            public virtual AstDecimalRange DecimalRange
            {
                get
                {
                    return _decimalRange;
                }
            }
            
            public virtual AstDecimalRanges DecimalRanges
            {
                get
                {
                    return _decimalRanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigProcessAffinity(this);
            }
        }
        

        
        internal AstServerConfigProcessAffinity(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigProcessAffinity(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigProcessAffinity(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerConfigProcessAffinity Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerConfigProcessAffinity.Resolve(list);
            if ((index == 1))
            {
                return new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity1(ctx);
            }
            if ((index == 3))
            {
                return new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity2(ctx, ((AstDecimalRange)(list[0])), ((AstDecimalRanges)(list[1])));
            }
            if ((index == 3))
            {
                return new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity3(ctx, ((AstDecimalRange)(list[0])), ((AstDecimalRanges)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimalRange), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalRanges), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalRange), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalRanges), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_config_process_affinity : 
        ///    PROCESS AFFINITY CPU EQUAL AUTO 
        /// </summary>
        public static AstServerConfigProcessAffinity ServerConfigProcessAffinity(ParserRuleContext ctx)
        {
            AstServerConfigProcessAffinity.AstServerConfigProcessAffinity1 result = new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity1(ctx);
            return result;
        }
        
        /// <summary>
        /// server_config_process_affinity : 
        ///    PROCESS AFFINITY CPU EQUAL decimal_range decimal_ranges 
        /// </summary>
        public static AstServerConfigProcessAffinity ServerConfigProcessAffinity(ParserRuleContext ctx, AstDecimalRange decimalRange, AstDecimalRanges decimalRanges)
        {
            AstServerConfigProcessAffinity.AstServerConfigProcessAffinity2 result = new AstServerConfigProcessAffinity.AstServerConfigProcessAffinity2(ctx, decimalRange, decimalRanges);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_diagnostic_log
    /// 	 : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)
    /// </summary>
    public abstract partial class AstServerConfigDiagnosticLog : AstBnfRule
    {
        
        protected static string _rule = "server_config_diagnostic_log\r\n\t : DIAGNOSTICS  LOG  (on_off | PATH  EQUAL  string" +
            "_or_default | MAX_SIZE  EQUAL  size_value | MAX_FILES  EQUAL  decimal_default)";
        
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG on_off 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog1 : AstServerConfigDiagnosticLog
        {
            
            private AstOnOff _onOff;
            
            internal AstServerConfigDiagnosticLog1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG PATH EQUAL string_or_default 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog2 : AstServerConfigDiagnosticLog
        {
            
            private AstStringOrDefault _stringOrDefault;
            
            internal AstServerConfigDiagnosticLog2(ParserRuleContext ctx, AstStringOrDefault stringOrDefault) : 
                    base(ctx)
            {
                _stringOrDefault = stringOrDefault;
            }
            
            public virtual AstStringOrDefault StringOrDefault
            {
                get
                {
                    return _stringOrDefault;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG MAX_SIZE EQUAL size_value 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog3 : AstServerConfigDiagnosticLog
        {
            
            private AstSizeValue _sizeValue;
            
            internal AstServerConfigDiagnosticLog3(ParserRuleContext ctx, AstSizeValue sizeValue) : 
                    base(ctx)
            {
                _sizeValue = sizeValue;
            }
            
            public virtual AstSizeValue SizeValue
            {
                get
                {
                    return _sizeValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS LOG MAX_FILES EQUAL decimal_default 
        /// </summary>
        public partial class AstServerConfigDiagnosticLog4 : AstServerConfigDiagnosticLog
        {
            
            private AstDecimalDefault _decimalDefault;
            
            internal AstServerConfigDiagnosticLog4(ParserRuleContext ctx, AstDecimalDefault decimalDefault) : 
                    base(ctx)
            {
                _decimalDefault = decimalDefault;
            }
            
            public virtual AstDecimalDefault DecimalDefault
            {
                get
                {
                    return _decimalDefault;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigDiagnosticLog(this);
            }
        }
        

        
        internal AstServerConfigDiagnosticLog(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigDiagnosticLog(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigDiagnosticLog(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerConfigDiagnosticLog Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerConfigDiagnosticLog.Resolve(list);
            if ((index == 2))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog2(ctx, ((AstStringOrDefault)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog3(ctx, ((AstSizeValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog4(ctx, ((AstDecimalDefault)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringOrDefault), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstSizeValue), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalDefault), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG on_off 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog1 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG PATH EQUAL string_or_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstStringOrDefault stringOrDefault)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog2 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog2(ctx, stringOrDefault);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG MAX_SIZE EQUAL size_value 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstSizeValue sizeValue)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog3 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog3(ctx, sizeValue);
            return result;
        }
        
        /// <summary>
        /// server_config_diagnostic_log : 
        ///    DIAGNOSTICS LOG MAX_FILES EQUAL decimal_default 
        /// </summary>
        public static AstServerConfigDiagnosticLog ServerConfigDiagnosticLog(ParserRuleContext ctx, AstDecimalDefault decimalDefault)
        {
            AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog4 result = new AstServerConfigDiagnosticLog.AstServerConfigDiagnosticLog4(ctx, decimalDefault);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_failover
    /// 	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)
    /// </summary>
    public abstract partial class AstServerConfigFailover : AstBnfRule
    {
        
        protected static string _rule = @"server_config_failover
	 : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)";
        
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY VERBOSELOGGING EQUAL verboselogging=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover1 : AstServerConfigFailover
        {
            
            private AstStringOrDefault _verboselogging;
            
            internal AstServerConfigFailover1(ParserRuleContext ctx, AstStringOrDefault verboselogging) : 
                    base(ctx)
            {
                _verboselogging = verboselogging;
            }
            
            public virtual AstStringOrDefault Verboselogging
            {
                get
                {
                    return _verboselogging;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY SQLDUMPERFLAGS EQUAL sqldumperflags=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover2 : AstServerConfigFailover
        {
            
            private AstStringOrDefault _sqldumperflags;
            
            internal AstServerConfigFailover2(ParserRuleContext ctx, AstStringOrDefault sqldumperflags) : 
                    base(ctx)
            {
                _sqldumperflags = sqldumperflags;
            }
            
            public virtual AstStringOrDefault Sqldumperflags
            {
                get
                {
                    return _sqldumperflags;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY SQLDUMPERPATH EQUAL sqldumperpath=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover3 : AstServerConfigFailover
        {
            
            private AstStringOrDefault _sqldumperpath;
            
            internal AstServerConfigFailover3(ParserRuleContext ctx, AstStringOrDefault sqldumperpath) : 
                    base(ctx)
            {
                _sqldumperpath = sqldumperpath;
            }
            
            public virtual AstStringOrDefault Sqldumperpath
            {
                get
                {
                    return _sqldumperpath;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY SQLDUMPERTIMEOUT sqldumpertimeout=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover4 : AstServerConfigFailover
        {
            
            private AstStringOrDefault _sqldumpertimeout;
            
            internal AstServerConfigFailover4(ParserRuleContext ctx, AstStringOrDefault sqldumpertimeout) : 
                    base(ctx)
            {
                _sqldumpertimeout = sqldumpertimeout;
            }
            
            public virtual AstStringOrDefault Sqldumpertimeout
            {
                get
                {
                    return _sqldumpertimeout;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY FAILURECONDITIONLEVEL EQUAL failure=string_or_default 
        /// </summary>
        public partial class AstServerConfigFailover5 : AstServerConfigFailover
        {
            
            private AstStringOrDefault _failure;
            
            internal AstServerConfigFailover5(ParserRuleContext ctx, AstStringOrDefault failure) : 
                    base(ctx)
            {
                _failure = failure;
            }
            
            public virtual AstStringOrDefault Failure
            {
                get
                {
                    return _failure;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        /// <summary>
        /// server_config_failover : FAILOVER CLUSTER PROPERTY HEALTHCHECKTIMEOUT EQUAL health=decimal_default 
        /// </summary>
        public partial class AstServerConfigFailover6 : AstServerConfigFailover
        {
            
            private AstDecimalDefault _health;
            
            internal AstServerConfigFailover6(ParserRuleContext ctx, AstDecimalDefault health) : 
                    base(ctx)
            {
                _health = health;
            }
            
            public virtual AstDecimalDefault Health
            {
                get
                {
                    return _health;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigFailover(this);
            }
        }
        

        
        internal AstServerConfigFailover(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigFailover(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigFailover(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerConfigFailover Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerConfigFailover.Resolve(list);
            if ((index == 2))
            {
                return new AstServerConfigFailover.AstServerConfigFailover1(ctx, ((AstStringOrDefault)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigFailover.AstServerConfigFailover2(ctx, ((AstStringOrDefault)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigFailover.AstServerConfigFailover3(ctx, ((AstStringOrDefault)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigFailover.AstServerConfigFailover4(ctx, ((AstStringOrDefault)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigFailover.AstServerConfigFailover5(ctx, ((AstStringOrDefault)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerConfigFailover.AstServerConfigFailover6(ctx, ((AstDecimalDefault)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringOrDefault), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringOrDefault), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringOrDefault), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringOrDefault), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringOrDefault), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalDefault), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_config_failover : 
        ///    FAILOVER CLUSTER PROPERTY VERBOSELOGGING EQUAL verboselogging=string_or_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(ParserRuleContext ctx, AstStringOrDefault verboselogging)
        {
            AstServerConfigFailover.AstServerConfigFailover1 result = new AstServerConfigFailover.AstServerConfigFailover1(ctx, verboselogging);
            return result;
        }
        
        /// <summary>
        /// server_config_failover : 
        ///    FAILOVER CLUSTER PROPERTY HEALTHCHECKTIMEOUT EQUAL health=decimal_default 
        /// </summary>
        public static AstServerConfigFailover ServerConfigFailover(ParserRuleContext ctx, AstDecimalDefault health)
        {
            AstServerConfigFailover.AstServerConfigFailover6 result = new AstServerConfigFailover.AstServerConfigFailover6(ctx, health);
            return result;
        }
    }
    
    /// <summary>
    /// server_config_buffer_pool_ext
    /// 	 : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILENAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_unity  RR_BRACKET | OFF)
    /// </summary>
    public abstract partial class AstServerConfigBufferPoolExt : AstBnfRule
    {
        
        protected static string _rule = "server_config_buffer_pool_ext\r\n\t : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  FILE" +
            "NAME  EQUAL  filename = stringtext  COMMA  SIZE  EQUAL  size = decimal  size_uni" +
            "ty  RR_BRACKET | OFF)";
        
        /// <summary>
        /// server_config_buffer_pool_ext : BUFFER POOL EXTENSION ON LR_BRACKET FILENAME EQUAL filename=stringtext COMMA SIZE EQUAL size=decimal size_unity RR_BRACKET 
        /// </summary>
        public partial class AstServerConfigBufferPoolExt1 : AstServerConfigBufferPoolExt
        {
            
            private AstStringtext _filename;
            
            private AstDecimal _size;
            
            private AstSizeUnity _sizeUnity;
            
            internal AstServerConfigBufferPoolExt1(ParserRuleContext ctx, AstStringtext filename, AstDecimal size, AstSizeUnity sizeUnity) : 
                    base(ctx)
            {
                _filename = filename;
                _size = size;
                _sizeUnity = sizeUnity;
            }
            
            public virtual AstStringtext Filename
            {
                get
                {
                    return _filename;
                }
            }
            
            public virtual AstDecimal Size
            {
                get
                {
                    return _size;
                }
            }
            
            public virtual AstSizeUnity SizeUnity
            {
                get
                {
                    return _sizeUnity;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigBufferPoolExt(this);
            }
        }
        /// <summary>
        /// server_config_buffer_pool_ext : BUFFER POOL EXTENSION OFF 
        /// </summary>
        public partial class AstServerConfigBufferPoolExt2 : AstServerConfigBufferPoolExt
        {
            
            internal AstServerConfigBufferPoolExt2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerConfigBufferPoolExt(this);
            }
        }
        

        
        internal AstServerConfigBufferPoolExt(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerConfigBufferPoolExt(Position p) : 
                base(p)
        {
        }
        
        internal AstServerConfigBufferPoolExt(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerConfigBufferPoolExt Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerConfigBufferPoolExt.Resolve(list);
            if ((index == 4))
            {
                return new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt1(ctx, ((AstStringtext)(list[0])), ((AstDecimal)(list[1])), ((AstSizeUnity)(list[2])));
            }
            if ((index == 1))
            {
                return new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstSizeUnity), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_config_buffer_pool_ext : 
        ///    BUFFER POOL EXTENSION ON ( FILENAME EQUAL filename=stringtext , SIZE EQUAL size=decimal size_unity ) 
        /// </summary>
        public static AstServerConfigBufferPoolExt ServerConfigBufferPoolExt(ParserRuleContext ctx, AstStringtext filename, AstDecimal size, AstSizeUnity sizeUnity)
        {
            AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt1 result = new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt1(ctx, filename, size, sizeUnity);
            return result;
        }
        
        /// <summary>
        /// server_config_buffer_pool_ext : 
        ///    BUFFER POOL EXTENSION OFF 
        /// </summary>
        public static AstServerConfigBufferPoolExt ServerConfigBufferPoolExt(ParserRuleContext ctx)
        {
            AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt2 result = new AstServerConfigBufferPoolExt.AstServerConfigBufferPoolExt2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// string_or_default
    /// 	 : stringtext
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstStringOrDefault : AstBnfRule
    {
        
        protected static string _rule = "string_or_default\r\n\t : stringtext\r\n\t | DEFAULT";
        
        /// <summary>
        /// string_or_default : stringtext 
        /// </summary>
        public partial class AstStringOrDefault1 : AstStringOrDefault
        {
            
            private AstStringtext _stringtext;
            
            internal AstStringOrDefault1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringOrDefault(this);
            }
        }
        /// <summary>
        /// string_or_default : DEFAULT 
        /// </summary>
        public partial class AstStringOrDefault2 : AstStringOrDefault
        {
            
            internal AstStringOrDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringOrDefault(this);
            }
        }
        

        
        internal AstStringOrDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringOrDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstStringOrDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStringOrDefault Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStringOrDefault.Resolve(list);
            if ((index == 2))
            {
                return new AstStringOrDefault.AstStringOrDefault1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 1))
            {
                return new AstStringOrDefault.AstStringOrDefault2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// string_or_default : 
        ///    stringtext 
        /// </summary>
        public static AstStringOrDefault StringOrDefault(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstStringOrDefault.AstStringOrDefault1 result = new AstStringOrDefault.AstStringOrDefault1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// string_or_default : 
        ///    DEFAULT 
        /// </summary>
        public static AstStringOrDefault StringOrDefault(ParserRuleContext ctx)
        {
            AstStringOrDefault.AstStringOrDefault2 result = new AstStringOrDefault.AstStringOrDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// contract_ref
    /// 	 : contract_id
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstContractRef : AstBnfRule
    {
        
        protected static string _rule = "contract_ref\r\n\t : contract_id\r\n\t | DEFAULT";
        
        /// <summary>
        /// contract_ref : contract_id 
        /// </summary>
        public partial class AstContractRef1 : AstContractRef
        {
            
            private AstContractId _contractId;
            
            internal AstContractRef1(ParserRuleContext ctx, AstContractId contractId) : 
                    base(ctx)
            {
                _contractId = contractId;
            }
            
            public virtual AstContractId ContractId
            {
                get
                {
                    return _contractId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractRef(this);
            }
        }
        /// <summary>
        /// contract_ref : DEFAULT 
        /// </summary>
        public partial class AstContractRef2 : AstContractRef
        {
            
            internal AstContractRef2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractRef(this);
            }
        }
        

        
        internal AstContractRef(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstContractRef(Position p) : 
                base(p)
        {
        }
        
        internal AstContractRef(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstContractRef Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstContractRef.Resolve(list);
            if ((index == 2))
            {
                return new AstContractRef.AstContractRef1(ctx, ((AstContractId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstContractRef.AstContractRef2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstContractId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// contract_ref : 
        ///    contract_id 
        /// </summary>
        public static AstContractRef ContractRef(ParserRuleContext ctx, AstContractId contractId)
        {
            AstContractRef.AstContractRef1 result = new AstContractRef.AstContractRef1(ctx, contractId);
            return result;
        }
        
        /// <summary>
        /// contract_ref : 
        ///    DEFAULT 
        /// </summary>
        public static AstContractRef ContractRef(ParserRuleContext ctx)
        {
            AstContractRef.AstContractRef2 result = new AstContractRef.AstContractRef2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// service_master_key_items
    /// 	 : FORCE?  REGENERATE
    /// 	 | WITH  regenerate_account
    /// </summary>
    public abstract partial class AstServiceMasterKeyItems : AstBnfRule
    {
        
        protected static string _rule = "service_master_key_items\r\n\t : FORCE?  REGENERATE\r\n\t | WITH  regenerate_account";
        
        /// <summary>
        /// service_master_key_items : FORCE? REGENERATE 
        /// </summary>
        public partial class AstServiceMasterKeyItems1 : AstServiceMasterKeyItems
        {
            
            internal AstServiceMasterKeyItems1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceMasterKeyItems(this);
            }
        }
        /// <summary>
        /// service_master_key_items : WITH regenerate_account 
        /// </summary>
        public partial class AstServiceMasterKeyItems2 : AstServiceMasterKeyItems
        {
            
            private AstRegenerateAccount _regenerateAccount;
            
            internal AstServiceMasterKeyItems2(ParserRuleContext ctx, AstRegenerateAccount regenerateAccount) : 
                    base(ctx)
            {
                _regenerateAccount = regenerateAccount;
            }
            
            public virtual AstRegenerateAccount RegenerateAccount
            {
                get
                {
                    return _regenerateAccount;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceMasterKeyItems(this);
            }
        }
        

        
        internal AstServiceMasterKeyItems(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServiceMasterKeyItems(Position p) : 
                base(p)
        {
        }
        
        internal AstServiceMasterKeyItems(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServiceMasterKeyItems Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServiceMasterKeyItems.Resolve(list);
            if ((index == 1))
            {
                return new AstServiceMasterKeyItems.AstServiceMasterKeyItems1(ctx);
            }
            if ((index == 2))
            {
                return new AstServiceMasterKeyItems.AstServiceMasterKeyItems2(ctx, ((AstRegenerateAccount)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRegenerateAccount), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// service_master_key_items : 
        ///    FORCE? REGENERATE 
        /// </summary>
        public static AstServiceMasterKeyItems ServiceMasterKeyItems(ParserRuleContext ctx)
        {
            AstServiceMasterKeyItems.AstServiceMasterKeyItems1 result = new AstServiceMasterKeyItems.AstServiceMasterKeyItems1(ctx);
            return result;
        }
        
        /// <summary>
        /// service_master_key_items : 
        ///    WITH regenerate_account 
        /// </summary>
        public static AstServiceMasterKeyItems ServiceMasterKeyItems(ParserRuleContext ctx, AstRegenerateAccount regenerateAccount)
        {
            AstServiceMasterKeyItems.AstServiceMasterKeyItems2 result = new AstServiceMasterKeyItems.AstServiceMasterKeyItems2(ctx, regenerateAccount);
            return result;
        }
    }
    
    /// <summary>
    /// regenerate_account
    /// 	 : OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  old_pwd
    /// 	 | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  new_password_set
    /// </summary>
    public abstract partial class AstRegenerateAccount : AstBnfRule
    {
        
        protected static string _rule = "regenerate_account\r\n\t : OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMM" +
            "A  old_pwd\r\n\t | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  new_pa" +
            "ssword_set";
        
        /// <summary>
        /// regenerate_account : OLD_ACCOUNT EQUAL acold_account_name=stringtext COMMA old_pwd 
        /// </summary>
        public partial class AstRegenerateAccount1 : AstRegenerateAccount
        {
            
            private AstStringtext _acoldAccountName;
            
            private AstOldPwd _oldPwd;
            
            internal AstRegenerateAccount1(ParserRuleContext ctx, AstStringtext acoldAccountName, AstOldPwd oldPwd) : 
                    base(ctx)
            {
                _acoldAccountName = acoldAccountName;
                _oldPwd = oldPwd;
            }
            
            public virtual AstStringtext AcoldAccountName
            {
                get
                {
                    return _acoldAccountName;
                }
            }
            
            public virtual AstOldPwd OldPwd
            {
                get
                {
                    return _oldPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRegenerateAccount(this);
            }
        }
        /// <summary>
        /// regenerate_account : NEW_ACCOUNT EQUAL new_account_name=stringtext COMMA new_password_set 
        /// </summary>
        public partial class AstRegenerateAccount2 : AstRegenerateAccount
        {
            
            private AstStringtext _newAccountName;
            
            private AstNewPasswordSet _newPasswordSet;
            
            internal AstRegenerateAccount2(ParserRuleContext ctx, AstStringtext newAccountName, AstNewPasswordSet newPasswordSet) : 
                    base(ctx)
            {
                _newAccountName = newAccountName;
                _newPasswordSet = newPasswordSet;
            }
            
            public virtual AstStringtext NewAccountName
            {
                get
                {
                    return _newAccountName;
                }
            }
            
            public virtual AstNewPasswordSet NewPasswordSet
            {
                get
                {
                    return _newPasswordSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRegenerateAccount(this);
            }
        }
        

        
        internal AstRegenerateAccount(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRegenerateAccount(Position p) : 
                base(p)
        {
        }
        
        internal AstRegenerateAccount(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRegenerateAccount Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRegenerateAccount.Resolve(list);
            if ((index == 3))
            {
                return new AstRegenerateAccount.AstRegenerateAccount1(ctx, ((AstStringtext)(list[0])), ((AstOldPwd)(list[1])));
            }
            if ((index == 3))
            {
                return new AstRegenerateAccount.AstRegenerateAccount2(ctx, ((AstStringtext)(list[0])), ((AstNewPasswordSet)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOldPwd), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstNewPasswordSet), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// regenerate_account : 
        ///    OLD_ACCOUNT EQUAL acold_account_name=stringtext , old_pwd 
        /// </summary>
        public static AstRegenerateAccount RegenerateAccount(ParserRuleContext ctx, AstStringtext acoldAccountName, AstOldPwd oldPwd)
        {
            AstRegenerateAccount.AstRegenerateAccount1 result = new AstRegenerateAccount.AstRegenerateAccount1(ctx, acoldAccountName, oldPwd);
            return result;
        }
        
        /// <summary>
        /// regenerate_account : 
        ///    NEW_ACCOUNT EQUAL new_account_name=stringtext , new_password_set 
        /// </summary>
        public static AstRegenerateAccount RegenerateAccount(ParserRuleContext ctx, AstStringtext newAccountName, AstNewPasswordSet newPasswordSet)
        {
            AstRegenerateAccount.AstRegenerateAccount2 result = new AstRegenerateAccount.AstRegenerateAccount2(ctx, newAccountName, newPasswordSet);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_item
    /// 	 : NAME  EQUAL  user_id
    /// 	 | DEFAULT_SCHEMA  EQUAL  schema_id_null
    /// 	 | LOGIN  EQUAL  login_id
    /// 	 | password_setting  old_pwd+
    /// 	 | DEFAULT_LANGUAGE  EQUAL  language_setting_value
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstAlterUserItem : AstBnfRule
    {
        
        protected static string _rule = "alter_user_item\r\n\t : NAME  EQUAL  user_id\r\n\t | DEFAULT_SCHEMA  EQUAL  schema_id_n" +
            "ull\r\n\t | LOGIN  EQUAL  login_id\r\n\t | password_setting  old_pwd+\r\n\t | DEFAULT_LAN" +
            "GUAGE  EQUAL  language_setting_value\r\n\t | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  E" +
            "QUAL  on_off";
        
        /// <summary>
        /// alter_user_item : NAME EQUAL user_id 
        /// </summary>
        public partial class AstAlterUserItem1 : AstAlterUserItem
        {
            
            private AstUserId _userId;
            
            internal AstAlterUserItem1(ParserRuleContext ctx, AstUserId userId) : 
                    base(ctx)
            {
                _userId = userId;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : DEFAULT_SCHEMA EQUAL schema_id_null 
        /// </summary>
        public partial class AstAlterUserItem2 : AstAlterUserItem
        {
            
            private AstSchemaIdNull _schemaIdNull;
            
            internal AstAlterUserItem2(ParserRuleContext ctx, AstSchemaIdNull schemaIdNull) : 
                    base(ctx)
            {
                _schemaIdNull = schemaIdNull;
            }
            
            public virtual AstSchemaIdNull SchemaIdNull
            {
                get
                {
                    return _schemaIdNull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : LOGIN EQUAL login_id 
        /// </summary>
        public partial class AstAlterUserItem3 : AstAlterUserItem
        {
            
            private AstLoginId _loginId;
            
            internal AstAlterUserItem3(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : password_setting old_pwd+ 
        /// </summary>
        public partial class AstAlterUserItem4 : AstAlterUserItem
        {
            
            private AstPasswordSetting _passwordSetting;
            
            private AstOldPwd _oldPwd;
            
            internal AstAlterUserItem4(ParserRuleContext ctx, AstPasswordSetting passwordSetting, AstOldPwd oldPwd) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
                _oldPwd = oldPwd;
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstOldPwd OldPwd
            {
                get
                {
                    return _oldPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public partial class AstAlterUserItem5 : AstAlterUserItem
        {
            
            private AstLanguageSettingValue _languageSettingValue;
            
            internal AstAlterUserItem5(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue) : 
                    base(ctx)
            {
                _languageSettingValue = languageSettingValue;
            }
            
            public virtual AstLanguageSettingValue LanguageSettingValue
            {
                get
                {
                    return _languageSettingValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        /// <summary>
        /// alter_user_item : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstAlterUserItem6 : AstAlterUserItem
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterUserItem6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserItem(this);
            }
        }
        

        
        internal AstAlterUserItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserItem(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterUserItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterUserItem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterUserItem.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterUserItem.AstAlterUserItem1(ctx, ((AstUserId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterUserItem.AstAlterUserItem2(ctx, ((AstSchemaIdNull)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterUserItem.AstAlterUserItem3(ctx, ((AstLoginId)(list[0])));
            }
            if ((index == 3))
            {
                return new AstAlterUserItem.AstAlterUserItem4(ctx, ((AstPasswordSetting)(list[0])), ((AstOldPwd)(list[1])));
            }
            if ((index == 2))
            {
                return new AstAlterUserItem.AstAlterUserItem5(ctx, ((AstLanguageSettingValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterUserItem.AstAlterUserItem6(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPasswordSetting), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOldPwd), false, false))
                    {
                        return 4;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSchemaIdNull), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLoginId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstLanguageSettingValue), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstUserId userId)
        {
            AstAlterUserItem.AstAlterUserItem1 result = new AstAlterUserItem.AstAlterUserItem1(ctx, userId);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    DEFAULT_SCHEMA EQUAL schema_id_null 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstSchemaIdNull schemaIdNull)
        {
            AstAlterUserItem.AstAlterUserItem2 result = new AstAlterUserItem.AstAlterUserItem2(ctx, schemaIdNull);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstAlterUserItem.AstAlterUserItem3 result = new AstAlterUserItem.AstAlterUserItem3(ctx, loginId);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    password_setting old_pwd+ 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstPasswordSetting passwordSetting, IEnumerable<AstOldPwd> oldPwd)
        {
            AstAlterUserItem.AstAlterUserItem4 result = new AstAlterUserItem.AstAlterUserItem4(ctx, passwordSetting, oldPwd);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue)
        {
            AstAlterUserItem.AstAlterUserItem5 result = new AstAlterUserItem.AstAlterUserItem5(ctx, languageSettingValue);
            return result;
        }
        
        /// <summary>
        /// alter_user_item : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserItem AlterUserItem(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterUserItem.AstAlterUserItem6 result = new AstAlterUserItem.AstAlterUserItem6(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// schema_id_null
    /// 	 : schema_identifier
    /// 	 | NULL_
    /// </summary>
    public abstract partial class AstSchemaIdNull : AstBnfRule
    {
        
        protected static string _rule = "schema_id_null\r\n\t : schema_identifier\r\n\t | NULL_";
        
        /// <summary>
        /// schema_id_null : schema_identifier 
        /// </summary>
        public partial class AstSchemaIdNull1 : AstSchemaIdNull
        {
            
            private AstSchemaIdentifier _schemaIdentifier;
            
            internal AstSchemaIdNull1(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier) : 
                    base(ctx)
            {
                _schemaIdentifier = schemaIdentifier;
            }
            
            public virtual AstSchemaIdentifier SchemaIdentifier
            {
                get
                {
                    return _schemaIdentifier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaIdNull(this);
            }
        }
        /// <summary>
        /// schema_id_null : NULL_ 
        /// </summary>
        public partial class AstSchemaIdNull2 : AstSchemaIdNull
        {
            
            internal AstSchemaIdNull2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSchemaIdNull(this);
            }
        }
        

        
        internal AstSchemaIdNull(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSchemaIdNull(Position p) : 
                base(p)
        {
        }
        
        internal AstSchemaIdNull(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSchemaIdNull Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSchemaIdNull.Resolve(list);
            if ((index == 2))
            {
                return new AstSchemaIdNull.AstSchemaIdNull1(ctx, ((AstSchemaIdentifier)(list[0])));
            }
            if ((index == 1))
            {
                return new AstSchemaIdNull.AstSchemaIdNull2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSchemaIdentifier), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// schema_id_null : 
        ///    schema_identifier 
        /// </summary>
        public static AstSchemaIdNull SchemaIdNull(ParserRuleContext ctx, AstSchemaIdentifier schemaIdentifier)
        {
            AstSchemaIdNull.AstSchemaIdNull1 result = new AstSchemaIdNull.AstSchemaIdNull1(ctx, schemaIdentifier);
            return result;
        }
        
        /// <summary>
        /// schema_id_null : 
        ///    NULL_ 
        /// </summary>
        public static AstSchemaIdNull SchemaIdNull(ParserRuleContext ctx)
        {
            AstSchemaIdNull.AstSchemaIdNull2 result = new AstSchemaIdNull.AstSchemaIdNull2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_user
    /// 	 : CREATE  USER  user_id  create_user_with_login
    /// 	 | CREATE  USER  create_user_windows_principal_id
    /// 	 | CREATE  USER  user_id  create_user_without_login?
    /// </summary>
    public abstract partial class AstCreateUser : AstBnfRule
    {
        
        protected static string _rule = "create_user\r\n\t : CREATE  USER  user_id  create_user_with_login\r\n\t | CREATE  USER " +
            " create_user_windows_principal_id\r\n\t | CREATE  USER  user_id  create_user_withou" +
            "t_login?";
        
        /// <summary>
        /// create_user : CREATE USER user_id create_user_with_login 
        /// </summary>
        public partial class AstCreateUser1 : AstCreateUser
        {
            
            private AstUserId _userId;
            
            private AstCreateUserWithLogin _createUserWithLogin;
            
            internal AstCreateUser1(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithLogin createUserWithLogin) : 
                    base(ctx)
            {
                _userId = userId;
                _createUserWithLogin = createUserWithLogin;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstCreateUserWithLogin CreateUserWithLogin
            {
                get
                {
                    return _createUserWithLogin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        /// <summary>
        /// create_user : CREATE USER create_user_windows_principal_id 
        /// </summary>
        public partial class AstCreateUser2 : AstCreateUser
        {
            
            private AstCreateUserWindowsPrincipalId _createUserWindowsPrincipalId;
            
            internal AstCreateUser2(ParserRuleContext ctx, AstCreateUserWindowsPrincipalId createUserWindowsPrincipalId) : 
                    base(ctx)
            {
                _createUserWindowsPrincipalId = createUserWindowsPrincipalId;
            }
            
            public virtual AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId
            {
                get
                {
                    return _createUserWindowsPrincipalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        /// <summary>
        /// create_user : CREATE USER user_id create_user_without_login? 
        /// </summary>
        public partial class AstCreateUser3 : AstCreateUser
        {
            
            private AstUserId _userId;
            
            private AstCreateUserWithoutLogin _createUserWithoutLogin;
            
            internal AstCreateUser3(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithoutLogin createUserWithoutLogin) : 
                    base(ctx)
            {
                _userId = userId;
                _createUserWithoutLogin = createUserWithoutLogin;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstCreateUserWithoutLogin CreateUserWithoutLogin
            {
                get
                {
                    return _createUserWithoutLogin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUser(this);
            }
        }
        

        
        internal AstCreateUser(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUser(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUser(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUser Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUser.Resolve(list);
            if ((index == 3))
            {
                return new AstCreateUser.AstCreateUser1(ctx, ((AstUserId)(list[0])), ((AstCreateUserWithLogin)(list[1])));
            }
            if ((index == 2))
            {
                return new AstCreateUser.AstCreateUser2(ctx, ((AstCreateUserWindowsPrincipalId)(list[0])));
            }
            if ((index == 3))
            {
                return new AstCreateUser.AstCreateUser3(ctx, ((AstUserId)(list[0])), ((AstCreateUserWithoutLogin)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCreateUserWithLogin), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCreateUserWithoutLogin), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCreateUserWindowsPrincipalId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER user_id create_user_with_login 
        /// </summary>
        public static AstCreateUser CreateUser(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithLogin createUserWithLogin)
        {
            AstCreateUser.AstCreateUser1 result = new AstCreateUser.AstCreateUser1(ctx, userId, createUserWithLogin);
            return result;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER create_user_windows_principal_id 
        /// </summary>
        public static AstCreateUser CreateUser(ParserRuleContext ctx, AstCreateUserWindowsPrincipalId createUserWindowsPrincipalId)
        {
            AstCreateUser.AstCreateUser2 result = new AstCreateUser.AstCreateUser2(ctx, createUserWindowsPrincipalId);
            return result;
        }
        
        /// <summary>
        /// create_user : 
        ///    CREATE USER user_id create_user_without_login? 
        /// </summary>
        public static AstCreateUser CreateUser(ParserRuleContext ctx, AstUserId userId, AstCreateUserWithoutLogin createUserWithoutLogin)
        {
            AstCreateUser.AstCreateUser3 result = new AstCreateUser.AstCreateUser3(ctx, userId, createUserWithoutLogin);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_with_login
    /// 	 : (for_from  LOGIN  login_id)?  (WITH  user_settings_shorts)?
    /// </summary>
    public partial class AstCreateUserWithLogin : AstBnfRule
    {
        
        protected static string _rule = "create_user_with_login\r\n\t : (for_from  LOGIN  login_id)?  (WITH  user_settings_sh" +
            "orts)?";
        
        internal AstCreateUserWithLogin(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithLogin(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithLogin(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateUserWithLogin(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId, AstUserSettingsShorts userSettingsShorts) : 
                base(ctx)
        {
            _forFrom = forFrom;
            _loginId = loginId;
            _userSettingsShorts = userSettingsShorts;
        }
        
        public virtual AstForFrom _forFrom
        {
            get
            {
                return _forFrom;
            }
        }
        
        public virtual AstLoginId _loginId
        {
            get
            {
                return _loginId;
            }
        }
        
        public virtual AstUserSettingsShorts _userSettingsShorts
        {
            get
            {
                return _userSettingsShorts;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateUserWithLogin(this);
        }
        
        /// <summary>
        /// create_user_with_login : 
        ///    for_from LOGIN login_id WITH user_settings_shorts 
        /// </summary>
        public static AstCreateUserWithLogin CreateUserWithLogin(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId, AstUserSettingsShorts userSettingsShorts)
        {
            AstCreateUserWithLogin result = new AstCreateUserWithLogin(ctx, forFrom, loginId, userSettingsShorts);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_without_login
    /// 	 : WITHOUT  LOGIN  user_settings_shorts?
    /// 	 | for_from  CERTIFICATE  certificate_id
    /// 	 | for_from  ASYMMETRIC  KEY  asym_key_id
    /// </summary>
    public abstract partial class AstCreateUserWithoutLogin : AstBnfRule
    {
        
        protected static string _rule = "create_user_without_login\r\n\t : WITHOUT  LOGIN  user_settings_shorts?\r\n\t | for_fro" +
            "m  CERTIFICATE  certificate_id\r\n\t | for_from  ASYMMETRIC  KEY  asym_key_id";
        
        /// <summary>
        /// create_user_without_login : WITHOUT LOGIN user_settings_shorts? 
        /// </summary>
        public partial class AstCreateUserWithoutLogin1 : AstCreateUserWithoutLogin
        {
            
            private AstUserSettingsShorts _userSettingsShorts;
            
            internal AstCreateUserWithoutLogin1(ParserRuleContext ctx, AstUserSettingsShorts userSettingsShorts) : 
                    base(ctx)
            {
                _userSettingsShorts = userSettingsShorts;
            }
            
            public virtual AstUserSettingsShorts UserSettingsShorts
            {
                get
                {
                    return _userSettingsShorts;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        /// <summary>
        /// create_user_without_login : for_from CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstCreateUserWithoutLogin2 : AstCreateUserWithoutLogin
        {
            
            private AstForFrom _forFrom;
            
            private AstCertificateId _certificateId;
            
            internal AstCreateUserWithoutLogin2(ParserRuleContext ctx, AstForFrom forFrom, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _forFrom = forFrom;
                _certificateId = certificateId;
            }
            
            public virtual AstForFrom ForFrom
            {
                get
                {
                    return _forFrom;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        /// <summary>
        /// create_user_without_login : for_from ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstCreateUserWithoutLogin3 : AstCreateUserWithoutLogin
        {
            
            private AstForFrom _forFrom;
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstCreateUserWithoutLogin3(ParserRuleContext ctx, AstForFrom forFrom, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _forFrom = forFrom;
                _asymKeyId = asymKeyId;
            }
            
            public virtual AstForFrom ForFrom
            {
                get
                {
                    return _forFrom;
                }
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWithoutLogin(this);
            }
        }
        

        
        internal AstCreateUserWithoutLogin(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWithoutLogin(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserWithoutLogin(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUserWithoutLogin Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUserWithoutLogin.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1(ctx, ((AstUserSettingsShorts)(list[0])));
            }
            if ((index == 3))
            {
                return new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2(ctx, ((AstForFrom)(list[0])), ((AstCertificateId)(list[1])));
            }
            if ((index == 3))
            {
                return new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3(ctx, ((AstForFrom)(list[0])), ((AstAsymKeyId)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstForFrom), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCertificateId), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstForFrom), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsymKeyId), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserSettingsShorts), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    WITHOUT LOGIN user_settings_shorts? 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(ParserRuleContext ctx, AstUserSettingsShorts userSettingsShorts)
        {
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin1(ctx, userSettingsShorts);
            return result;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    for_from CERTIFICATE certificate_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(ParserRuleContext ctx, AstForFrom forFrom, AstCertificateId certificateId)
        {
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin2(ctx, forFrom, certificateId);
            return result;
        }
        
        /// <summary>
        /// create_user_without_login : 
        ///    for_from ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstCreateUserWithoutLogin CreateUserWithoutLogin(ParserRuleContext ctx, AstForFrom forFrom, AstAsymKeyId asymKeyId)
        {
            AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3 result = new AstCreateUserWithoutLogin.AstCreateUserWithoutLogin3(ctx, forFrom, asymKeyId);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_windows_principal_id
    /// 	 : windows_principal_id  (WITH  user_settings)?
    /// 	 | user_id  WITH  password_setting  user_settings?
    /// 	 | user_id  FROM  EXTERNAL  PROVIDER
    /// </summary>
    public abstract partial class AstCreateUserWindowsPrincipalId : AstBnfRule
    {
        
        protected static string _rule = "create_user_windows_principal_id\r\n\t : windows_principal_id  (WITH  user_settings)" +
            "?\r\n\t | user_id  WITH  password_setting  user_settings?\r\n\t | user_id  FROM  EXTER" +
            "NAL  PROVIDER";
        
        /// <summary>
        /// create_user_windows_principal_id : windows_principal_id WITH user_settings 
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId1 : AstCreateUserWindowsPrincipalId
        {
            
            private AstWindowsPrincipalId _windowsPrincipalId;
            
            private AstUserSettings _userSettings;
            
            internal AstCreateUserWindowsPrincipalId1(ParserRuleContext ctx, AstWindowsPrincipalId windowsPrincipalId, AstUserSettings userSettings) : 
                    base(ctx)
            {
                _windowsPrincipalId = windowsPrincipalId;
                _userSettings = userSettings;
            }
            
            public virtual AstWindowsPrincipalId WindowsPrincipalId
            {
                get
                {
                    return _windowsPrincipalId;
                }
            }
            
            public virtual AstUserSettings UserSettings
            {
                get
                {
                    return _userSettings;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        /// <summary>
        /// create_user_windows_principal_id : user_id WITH password_setting user_settings? 
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId2 : AstCreateUserWindowsPrincipalId
        {
            
            private AstUserId _userId;
            
            private AstPasswordSetting _passwordSetting;
            
            private AstUserSettings _userSettings;
            
            internal AstCreateUserWindowsPrincipalId2(ParserRuleContext ctx, AstUserId userId, AstPasswordSetting passwordSetting, AstUserSettings userSettings) : 
                    base(ctx)
            {
                _userId = userId;
                _passwordSetting = passwordSetting;
                _userSettings = userSettings;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public virtual AstUserSettings UserSettings
            {
                get
                {
                    return _userSettings;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        /// <summary>
        /// create_user_windows_principal_id : user_id FROM EXTERNAL PROVIDER 
        /// </summary>
        public partial class AstCreateUserWindowsPrincipalId3 : AstCreateUserWindowsPrincipalId
        {
            
            private AstUserId _userId;
            
            internal AstCreateUserWindowsPrincipalId3(ParserRuleContext ctx, AstUserId userId) : 
                    base(ctx)
            {
                _userId = userId;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserWindowsPrincipalId(this);
            }
        }
        

        
        internal AstCreateUserWindowsPrincipalId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserWindowsPrincipalId(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUserWindowsPrincipalId Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUserWindowsPrincipalId.Resolve(list);
            if ((index == 3))
            {
                return new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1(ctx, ((AstWindowsPrincipalId)(list[0])), ((AstUserSettings)(list[1])));
            }
            if ((index == 4))
            {
                return new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2(ctx, ((AstUserId)(list[0])), ((AstPasswordSetting)(list[1])), ((AstUserSettings)(list[2])));
            }
            if ((index == 2))
            {
                return new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3(ctx, ((AstUserId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPasswordSetting), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstUserSettings), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowsPrincipalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstUserSettings), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    windows_principal_id WITH user_settings 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(ParserRuleContext ctx, AstWindowsPrincipalId windowsPrincipalId, AstUserSettings userSettings)
        {
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId1(ctx, windowsPrincipalId, userSettings);
            return result;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    user_id WITH password_setting user_settings? 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(ParserRuleContext ctx, AstUserId userId, AstPasswordSetting passwordSetting, AstUserSettings userSettings)
        {
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId2(ctx, userId, passwordSetting, userSettings);
            return result;
        }
        
        /// <summary>
        /// create_user_windows_principal_id : 
        ///    user_id FROM EXTERNAL PROVIDER 
        /// </summary>
        public static AstCreateUserWindowsPrincipalId CreateUserWindowsPrincipalId(ParserRuleContext ctx, AstUserId userId)
        {
            AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3 result = new AstCreateUserWindowsPrincipalId.AstCreateUserWindowsPrincipalId3(ctx, userId);
            return result;
        }
    }
    
    /// <summary>
    /// pwd_value
    /// 	 : pwd
    /// 	 | binary_  HASHED
    /// </summary>
    public abstract partial class AstPwdValue : AstBnfRule
    {
        
        protected static string _rule = "pwd_value\r\n\t : pwd\r\n\t | binary_  HASHED";
        
        /// <summary>
        /// pwd_value : pwd 
        /// </summary>
        public partial class AstPwdValue1 : AstPwdValue
        {
            
            private AstPwd _pwd;
            
            internal AstPwdValue1(ParserRuleContext ctx, AstPwd pwd) : 
                    base(ctx)
            {
                _pwd = pwd;
            }
            
            public virtual AstPwd Pwd
            {
                get
                {
                    return _pwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPwdValue(this);
            }
        }
        /// <summary>
        /// pwd_value : binary_ HASHED 
        /// </summary>
        public partial class AstPwdValue2 : AstPwdValue
        {
            
            private AstBinary _binary;
            
            internal AstPwdValue2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPwdValue(this);
            }
        }
        

        
        internal AstPwdValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPwdValue(Position p) : 
                base(p)
        {
        }
        
        internal AstPwdValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPwdValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPwdValue.Resolve(list);
            if ((index == 2))
            {
                return new AstPwdValue.AstPwdValue1(ctx, ((AstPwd)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPwdValue.AstPwdValue2(ctx, ((AstBinary)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPwd), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// pwd_value : 
        ///    pwd 
        /// </summary>
        public static AstPwdValue PwdValue(ParserRuleContext ctx, AstPwd pwd)
        {
            AstPwdValue.AstPwdValue1 result = new AstPwdValue.AstPwdValue1(ctx, pwd);
            return result;
        }
        
        /// <summary>
        /// pwd_value : 
        ///    binary_ HASHED 
        /// </summary>
        public static AstPwdValue PwdValue(ParserRuleContext ctx, AstBinary binary)
        {
            AstPwdValue.AstPwdValue2 result = new AstPwdValue.AstPwdValue2(ctx, binary);
            return result;
        }
    }
    
    /// <summary>
    /// user_settings_short
    /// 	 : default_schema_set
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUserSettingsShort : AstBnfRule
    {
        
        protected static string _rule = "user_settings_short\r\n\t : default_schema_set\r\n\t | ALLOW_ENCRYPTED_VALUE_MODIFICATI" +
            "ONS  EQUAL  on_off";
        
        /// <summary>
        /// user_settings_short : default_schema_set 
        /// </summary>
        public partial class AstUserSettingsShort1 : AstUserSettingsShort
        {
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstUserSettingsShort1(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettingsShort(this);
            }
        }
        /// <summary>
        /// user_settings_short : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstUserSettingsShort2 : AstUserSettingsShort
        {
            
            private AstOnOff _onOff;
            
            internal AstUserSettingsShort2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSettingsShort(this);
            }
        }
        

        
        internal AstUserSettingsShort(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserSettingsShort(Position p) : 
                base(p)
        {
        }
        
        internal AstUserSettingsShort(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUserSettingsShort Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUserSettingsShort.Resolve(list);
            if ((index == 2))
            {
                return new AstUserSettingsShort.AstUserSettingsShort1(ctx, ((AstDefaultSchemaSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUserSettingsShort.AstUserSettingsShort2(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDefaultSchemaSet), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// user_settings_short : 
        ///    default_schema_set 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstUserSettingsShort.AstUserSettingsShort1 result = new AstUserSettingsShort.AstUserSettingsShort1(ctx, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// user_settings_short : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSettingsShort UserSettingsShort(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstUserSettingsShort.AstUserSettingsShort2 result = new AstUserSettingsShort.AstUserSettingsShort2(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// user_setting
    /// 	 : default_schema_set
    /// 	 | DEFAULT_LANGUAGE  EQUAL  language_setting_value
    /// 	 | SID  EQUAL  binary_
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUserSetting : AstBnfRule
    {
        
        protected static string _rule = "user_setting\r\n\t : default_schema_set\r\n\t | DEFAULT_LANGUAGE  EQUAL  language_setti" +
            "ng_value\r\n\t | SID  EQUAL  binary_\r\n\t | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUA" +
            "L  on_off";
        
        /// <summary>
        /// user_setting : default_schema_set 
        /// </summary>
        public partial class AstUserSetting1 : AstUserSetting
        {
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstUserSetting1(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        /// <summary>
        /// user_setting : DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public partial class AstUserSetting2 : AstUserSetting
        {
            
            private AstLanguageSettingValue _languageSettingValue;
            
            internal AstUserSetting2(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue) : 
                    base(ctx)
            {
                _languageSettingValue = languageSettingValue;
            }
            
            public virtual AstLanguageSettingValue LanguageSettingValue
            {
                get
                {
                    return _languageSettingValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        /// <summary>
        /// user_setting : SID EQUAL binary_ 
        /// </summary>
        public partial class AstUserSetting3 : AstUserSetting
        {
            
            private AstBinary _binary;
            
            internal AstUserSetting3(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        /// <summary>
        /// user_setting : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstUserSetting4 : AstUserSetting
        {
            
            private AstOnOff _onOff;
            
            internal AstUserSetting4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserSetting(this);
            }
        }
        

        
        internal AstUserSetting(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserSetting(Position p) : 
                base(p)
        {
        }
        
        internal AstUserSetting(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUserSetting Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUserSetting.Resolve(list);
            if ((index == 2))
            {
                return new AstUserSetting.AstUserSetting1(ctx, ((AstDefaultSchemaSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUserSetting.AstUserSetting2(ctx, ((AstLanguageSettingValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUserSetting.AstUserSetting3(ctx, ((AstBinary)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUserSetting.AstUserSetting4(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDefaultSchemaSet), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLanguageSettingValue), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// user_setting : 
        ///    default_schema_set 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstUserSetting.AstUserSetting1 result = new AstUserSetting.AstUserSetting1(ctx, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// user_setting : 
        ///    DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstLanguageSettingValue languageSettingValue)
        {
            AstUserSetting.AstUserSetting2 result = new AstUserSetting.AstUserSetting2(ctx, languageSettingValue);
            return result;
        }
        
        /// <summary>
        /// user_setting : 
        ///    SID EQUAL binary_ 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstBinary binary)
        {
            AstUserSetting.AstUserSetting3 result = new AstUserSetting.AstUserSetting3(ctx, binary);
            return result;
        }
        
        /// <summary>
        /// user_setting : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstUserSetting UserSetting(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstUserSetting.AstUserSetting4 result = new AstUserSetting.AstUserSetting4(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// create_user_azure_sql_dw
    /// 	 : CREATE  USER  user_id  user_strategy?  (WITH  default_schema_set)?
    /// 	 | CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  default_schema_set)?
    /// </summary>
    public abstract partial class AstCreateUserAzureSqlDw : AstBnfRule
    {
        
        protected static string _rule = "create_user_azure_sql_dw\r\n\t : CREATE  USER  user_id  user_strategy?  (WITH  defau" +
            "lt_schema_set)?\r\n\t | CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  def" +
            "ault_schema_set)?";
        
        /// <summary>
        /// create_user_azure_sql_dw : CREATE USER user_id user_strategy? WITH default_schema_set 
        /// </summary>
        public partial class AstCreateUserAzureSqlDw1 : AstCreateUserAzureSqlDw
        {
            
            private AstUserId _userId;
            
            private AstUserStrategy _userStrategy;
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstCreateUserAzureSqlDw1(ParserRuleContext ctx, AstUserId userId, AstUserStrategy userStrategy, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _userId = userId;
                _userStrategy = userStrategy;
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstUserStrategy UserStrategy
            {
                get
                {
                    return _userStrategy;
                }
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserAzureSqlDw(this);
            }
        }
        /// <summary>
        /// create_user_azure_sql_dw : CREATE USER user_id FROM EXTERNAL PROVIDER WITH default_schema_set 
        /// </summary>
        public partial class AstCreateUserAzureSqlDw2 : AstCreateUserAzureSqlDw
        {
            
            private AstUserId _userId;
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstCreateUserAzureSqlDw2(ParserRuleContext ctx, AstUserId userId, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _userId = userId;
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateUserAzureSqlDw(this);
            }
        }
        

        
        internal AstCreateUserAzureSqlDw(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateUserAzureSqlDw(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateUserAzureSqlDw(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateUserAzureSqlDw Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateUserAzureSqlDw.Resolve(list);
            if ((index == 4))
            {
                return new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1(ctx, ((AstUserId)(list[0])), ((AstUserStrategy)(list[1])), ((AstDefaultSchemaSet)(list[2])));
            }
            if ((index == 3))
            {
                return new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw2(ctx, ((AstUserId)(list[0])), ((AstDefaultSchemaSet)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstUserStrategy), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDefaultSchemaSet), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDefaultSchemaSet), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_user_azure_sql_dw : 
        ///    CREATE USER user_id user_strategy? WITH default_schema_set 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(ParserRuleContext ctx, AstUserId userId, AstUserStrategy userStrategy, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1 result = new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw1(ctx, userId, userStrategy, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// create_user_azure_sql_dw : 
        ///    CREATE USER user_id FROM EXTERNAL PROVIDER WITH default_schema_set 
        /// </summary>
        public static AstCreateUserAzureSqlDw CreateUserAzureSqlDw(ParserRuleContext ctx, AstUserId userId, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw2 result = new AstCreateUserAzureSqlDw.AstCreateUserAzureSqlDw2(ctx, userId, defaultSchemaSet);
            return result;
        }
    }
    
    /// <summary>
    /// user_strategy
    /// 	 : for_from  LOGIN  login_id
    /// 	 | WITHOUT  LOGIN
    /// </summary>
    public abstract partial class AstUserStrategy : AstBnfRule
    {
        
        protected static string _rule = "user_strategy\r\n\t : for_from  LOGIN  login_id\r\n\t | WITHOUT  LOGIN";
        
        /// <summary>
        /// user_strategy : for_from LOGIN login_id 
        /// </summary>
        public partial class AstUserStrategy1 : AstUserStrategy
        {
            
            private AstForFrom _forFrom;
            
            private AstLoginId _loginId;
            
            internal AstUserStrategy1(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId) : 
                    base(ctx)
            {
                _forFrom = forFrom;
                _loginId = loginId;
            }
            
            public virtual AstForFrom ForFrom
            {
                get
                {
                    return _forFrom;
                }
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserStrategy(this);
            }
        }
        /// <summary>
        /// user_strategy : WITHOUT LOGIN 
        /// </summary>
        public partial class AstUserStrategy2 : AstUserStrategy
        {
            
            internal AstUserStrategy2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUserStrategy(this);
            }
        }
        

        
        internal AstUserStrategy(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUserStrategy(Position p) : 
                base(p)
        {
        }
        
        internal AstUserStrategy(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUserStrategy Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUserStrategy.Resolve(list);
            if ((index == 3))
            {
                return new AstUserStrategy.AstUserStrategy1(ctx, ((AstForFrom)(list[0])), ((AstLoginId)(list[1])));
            }
            if ((index == 1))
            {
                return new AstUserStrategy.AstUserStrategy2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstForFrom), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLoginId), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// user_strategy : 
        ///    for_from LOGIN login_id 
        /// </summary>
        public static AstUserStrategy UserStrategy(ParserRuleContext ctx, AstForFrom forFrom, AstLoginId loginId)
        {
            AstUserStrategy.AstUserStrategy1 result = new AstUserStrategy.AstUserStrategy1(ctx, forFrom, loginId);
            return result;
        }
        
        /// <summary>
        /// user_strategy : 
        ///    WITHOUT LOGIN 
        /// </summary>
        public static AstUserStrategy UserStrategy(ParserRuleContext ctx)
        {
            AstUserStrategy.AstUserStrategy2 result = new AstUserStrategy.AstUserStrategy2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql_info
    /// 	 : NAME  EQUAL  user_id
    /// 	 | default_schema_set
    /// 	 | LOGIN  EQUAL  login_id
    /// 	 | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstAlterUserAzureSqlInfo : AstBnfRule
    {
        
        protected static string _rule = "alter_user_azure_sql_info\r\n\t : NAME  EQUAL  user_id\r\n\t | default_schema_set\r\n\t | " +
            "LOGIN  EQUAL  login_id\r\n\t | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off";
        
        /// <summary>
        /// alter_user_azure_sql_info : NAME EQUAL user_id 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo1 : AstAlterUserAzureSqlInfo
        {
            
            private AstUserId _userId;
            
            internal AstAlterUserAzureSqlInfo1(ParserRuleContext ctx, AstUserId userId) : 
                    base(ctx)
            {
                _userId = userId;
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        /// <summary>
        /// alter_user_azure_sql_info : default_schema_set 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo2 : AstAlterUserAzureSqlInfo
        {
            
            private AstDefaultSchemaSet _defaultSchemaSet;
            
            internal AstAlterUserAzureSqlInfo2(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet) : 
                    base(ctx)
            {
                _defaultSchemaSet = defaultSchemaSet;
            }
            
            public virtual AstDefaultSchemaSet DefaultSchemaSet
            {
                get
                {
                    return _defaultSchemaSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        /// <summary>
        /// alter_user_azure_sql_info : LOGIN EQUAL login_id 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo3 : AstAlterUserAzureSqlInfo
        {
            
            private AstLoginId _loginId;
            
            internal AstAlterUserAzureSqlInfo3(ParserRuleContext ctx, AstLoginId loginId) : 
                    base(ctx)
            {
                _loginId = loginId;
            }
            
            public virtual AstLoginId LoginId
            {
                get
                {
                    return _loginId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        /// <summary>
        /// alter_user_azure_sql_info : ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public partial class AstAlterUserAzureSqlInfo4 : AstAlterUserAzureSqlInfo
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterUserAzureSqlInfo4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterUserAzureSqlInfo(this);
            }
        }
        

        
        internal AstAlterUserAzureSqlInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterUserAzureSqlInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterUserAzureSqlInfo Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterUserAzureSqlInfo.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo1(ctx, ((AstUserId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo2(ctx, ((AstDefaultSchemaSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo3(ctx, ((AstLoginId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo4(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUserId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDefaultSchemaSet), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLoginId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    NAME EQUAL user_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstUserId userId)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo1 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo1(ctx, userId);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    default_schema_set 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo2 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo2(ctx, defaultSchemaSet);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    LOGIN EQUAL login_id 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstLoginId loginId)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo3 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo3(ctx, loginId);
            return result;
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : 
        ///    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS EQUAL on_off 
        /// </summary>
        public static AstAlterUserAzureSqlInfo AlterUserAzureSqlInfo(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo4 result = new AstAlterUserAzureSqlInfo.AstAlterUserAzureSqlInfo4(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// workload_group_name
    /// 	 : workload_group_group_id
    /// 	 | DEFAULT_DOUBLE_QUOTE
    /// </summary>
    public abstract partial class AstWorkloadGroupName : AstBnfRule
    {
        
        protected static string _rule = "workload_group_name\r\n\t : workload_group_group_id\r\n\t | DEFAULT_DOUBLE_QUOTE";
        
        /// <summary>
        /// workload_group_name : workload_group_group_id 
        /// </summary>
        public partial class AstWorkloadGroupName1 : AstWorkloadGroupName
        {
            
            private AstWorkloadGroupGroupId _workloadGroupGroupId;
            
            internal AstWorkloadGroupName1(ParserRuleContext ctx, AstWorkloadGroupGroupId workloadGroupGroupId) : 
                    base(ctx)
            {
                _workloadGroupGroupId = workloadGroupGroupId;
            }
            
            public virtual AstWorkloadGroupGroupId WorkloadGroupGroupId
            {
                get
                {
                    return _workloadGroupGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupName(this);
            }
        }
        /// <summary>
        /// workload_group_name : DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstWorkloadGroupName2 : AstWorkloadGroupName
        {
            
            internal AstWorkloadGroupName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupName(this);
            }
        }
        

        
        internal AstWorkloadGroupName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWorkloadGroupName(Position p) : 
                base(p)
        {
        }
        
        internal AstWorkloadGroupName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWorkloadGroupName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWorkloadGroupName.Resolve(list);
            if ((index == 2))
            {
                return new AstWorkloadGroupName.AstWorkloadGroupName1(ctx, ((AstWorkloadGroupGroupId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstWorkloadGroupName.AstWorkloadGroupName2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWorkloadGroupGroupId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// workload_group_name : 
        ///    workload_group_group_id 
        /// </summary>
        public static AstWorkloadGroupName WorkloadGroupName(ParserRuleContext ctx, AstWorkloadGroupGroupId workloadGroupGroupId)
        {
            AstWorkloadGroupName.AstWorkloadGroupName1 result = new AstWorkloadGroupName.AstWorkloadGroupName1(ctx, workloadGroupGroupId);
            return result;
        }
        
        /// <summary>
        /// workload_group_name : 
        ///    DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstWorkloadGroupName WorkloadGroupName(ParserRuleContext ctx)
        {
            AstWorkloadGroupName.AstWorkloadGroupName2 result = new AstWorkloadGroupName.AstWorkloadGroupName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// alter_workload_group_using
    /// 	 : USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public abstract partial class AstAlterWorkloadGroupUsing : AstBnfRule
    {
        
        protected static string _rule = "alter_workload_group_using\r\n\t : USING  (workload_group_pool_id | DEFAULT_DOUBLE_Q" +
            "UOTE)";
        
        /// <summary>
        /// alter_workload_group_using : USING workload_group_pool_id 
        /// </summary>
        public partial class AstAlterWorkloadGroupUsing1 : AstAlterWorkloadGroupUsing
        {
            
            private AstWorkloadGroupPoolId _workloadGroupPoolId;
            
            internal AstAlterWorkloadGroupUsing1(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId) : 
                    base(ctx)
            {
                _workloadGroupPoolId = workloadGroupPoolId;
            }
            
            public virtual AstWorkloadGroupPoolId WorkloadGroupPoolId
            {
                get
                {
                    return _workloadGroupPoolId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterWorkloadGroupUsing(this);
            }
        }
        /// <summary>
        /// alter_workload_group_using : USING DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstAlterWorkloadGroupUsing2 : AstAlterWorkloadGroupUsing
        {
            
            internal AstAlterWorkloadGroupUsing2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterWorkloadGroupUsing(this);
            }
        }
        

        
        internal AstAlterWorkloadGroupUsing(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterWorkloadGroupUsing(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterWorkloadGroupUsing Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterWorkloadGroupUsing.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing1(ctx, ((AstWorkloadGroupPoolId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWorkloadGroupPoolId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_workload_group_using : 
        ///    USING workload_group_pool_id 
        /// </summary>
        public static AstAlterWorkloadGroupUsing AlterWorkloadGroupUsing(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing1 result = new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing1(ctx, workloadGroupPoolId);
            return result;
        }
        
        /// <summary>
        /// alter_workload_group_using : 
        ///    USING DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstAlterWorkloadGroupUsing AlterWorkloadGroupUsing(ParserRuleContext ctx)
        {
            AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing2 result = new AstAlterWorkloadGroupUsing.AstAlterWorkloadGroupUsing2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// workload_option_item
    /// 	 : (IMPORTANCE  EQUAL  importance_level)?  (COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = decimal)?  (COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = decimal)?  (COMMA?  REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = decimal)?  (COMMA?  MAX_DOP  EQUAL  max_dop = decimal)?  (COMMA?  GROUP_MAX_REQUESTS  EQUAL  group_max_requests = decimal)?
    /// </summary>
    public partial class AstWorkloadOptionItem : AstBnfRule
    {
        
        protected static string _rule = @"workload_option_item
	 : (IMPORTANCE  EQUAL  importance_level)?  (COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = decimal)?  (COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = decimal)?  (COMMA?  REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = decimal)?  (COMMA?  MAX_DOP  EQUAL  max_dop = decimal)?  (COMMA?  GROUP_MAX_REQUESTS  EQUAL  group_max_requests = decimal)?";
        
        internal AstWorkloadOptionItem(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstWorkloadOptionItem(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstWorkloadOptionItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstWorkloadOptionItem(ParserRuleContext ctx, AstImportanceLevel importanceLevel, AstDecimal requestMaxMemoryGrant, AstDecimal requestMaxCpuTimeSec, AstDecimal requestMemoryGrantTimeoutSec, AstDecimal maxDop, AstDecimal groupMaxRequests) : 
                base(ctx)
        {
            _importanceLevel = importanceLevel;
            _requestMaxMemoryGrant = requestMaxMemoryGrant;
            _requestMaxCpuTimeSec = requestMaxCpuTimeSec;
            _requestMemoryGrantTimeoutSec = requestMemoryGrantTimeoutSec;
            _maxDop = maxDop;
            _groupMaxRequests = groupMaxRequests;
        }
        
        public virtual AstImportanceLevel _importanceLevel
        {
            get
            {
                return _importanceLevel;
            }
        }
        
        public virtual AstDecimal _requestMaxMemoryGrant
        {
            get
            {
                return _requestMaxMemoryGrant;
            }
        }
        
        public virtual AstDecimal _requestMaxCpuTimeSec
        {
            get
            {
                return _requestMaxCpuTimeSec;
            }
        }
        
        public virtual AstDecimal _requestMemoryGrantTimeoutSec
        {
            get
            {
                return _requestMemoryGrantTimeoutSec;
            }
        }
        
        public virtual AstDecimal _maxDop
        {
            get
            {
                return _maxDop;
            }
        }
        
        public virtual AstDecimal _groupMaxRequests
        {
            get
            {
                return _groupMaxRequests;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadOptionItem(this);
        }
        
        /// <summary>
        /// workload_option_item : 
        ///    IMPORTANCE EQUAL importance_level COMMA? REQUEST_MAX_MEMORY_GRANT_PERCENT EQUAL request_max_memory_grant=decimal COMMA? REQUEST_MAX_CPU_TIME_SEC EQUAL request_max_cpu_time_sec=decimal COMMA? REQUEST_MEMORY_GRANT_TIMEOUT_SEC EQUAL request_memory_grant_timeout_sec=decimal COMMA? MAX_DOP EQUAL max_dop=decimal COMMA? GROUP_MAX_REQUESTS EQUAL group_max_requests=decimal 
        /// </summary>
        public static AstWorkloadOptionItem WorkloadOptionItem(ParserRuleContext ctx, AstImportanceLevel importanceLevel, AstDecimal requestMaxMemoryGrant, AstDecimal requestMaxCpuTimeSec, AstDecimal requestMemoryGrantTimeoutSec, AstDecimal maxDop, AstDecimal groupMaxRequests)
        {
            AstWorkloadOptionItem result = new AstWorkloadOptionItem(ctx, importanceLevel, requestMaxMemoryGrant, requestMaxCpuTimeSec, requestMemoryGrantTimeoutSec, maxDop, groupMaxRequests);
            return result;
        }
    }
    
    /// <summary>
    /// workload_group_id_or_default
    /// 	 : workload_group_pool_id
    /// 	 | DEFAULT_DOUBLE_QUOTE
    /// </summary>
    public abstract partial class AstWorkloadGroupIdOrDefault : AstBnfRule
    {
        
        protected static string _rule = "workload_group_id_or_default\r\n\t : workload_group_pool_id\r\n\t | DEFAULT_DOUBLE_QUOT" +
            "E";
        
        /// <summary>
        /// workload_group_id_or_default : workload_group_pool_id 
        /// </summary>
        public partial class AstWorkloadGroupIdOrDefault1 : AstWorkloadGroupIdOrDefault
        {
            
            private AstWorkloadGroupPoolId _workloadGroupPoolId;
            
            internal AstWorkloadGroupIdOrDefault1(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId) : 
                    base(ctx)
            {
                _workloadGroupPoolId = workloadGroupPoolId;
            }
            
            public virtual AstWorkloadGroupPoolId WorkloadGroupPoolId
            {
                get
                {
                    return _workloadGroupPoolId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupIdOrDefault(this);
            }
        }
        /// <summary>
        /// workload_group_id_or_default : DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstWorkloadGroupIdOrDefault2 : AstWorkloadGroupIdOrDefault
        {
            
            internal AstWorkloadGroupIdOrDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWorkloadGroupIdOrDefault(this);
            }
        }
        

        
        internal AstWorkloadGroupIdOrDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWorkloadGroupIdOrDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstWorkloadGroupIdOrDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWorkloadGroupIdOrDefault Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWorkloadGroupIdOrDefault.Resolve(list);
            if ((index == 2))
            {
                return new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault1(ctx, ((AstWorkloadGroupPoolId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWorkloadGroupPoolId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// workload_group_id_or_default : 
        ///    workload_group_pool_id 
        /// </summary>
        public static AstWorkloadGroupIdOrDefault WorkloadGroupIdOrDefault(ParserRuleContext ctx, AstWorkloadGroupPoolId workloadGroupPoolId)
        {
            AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault1 result = new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault1(ctx, workloadGroupPoolId);
            return result;
        }
        
        /// <summary>
        /// workload_group_id_or_default : 
        ///    DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstWorkloadGroupIdOrDefault WorkloadGroupIdOrDefault(ParserRuleContext ctx)
        {
            AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault2 result = new AstWorkloadGroupIdOrDefault.AstWorkloadGroupIdOrDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// queue_settings
    /// 	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstQueueSettings : AstBnfRule
    {
        
        protected static string _rule = @"queue_settings
	 : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?";
        
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS SELF COMMA? RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings1 : AstQueueSettings
        {
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _activationStatus;
            
            private AstFuncProcNameDatabaseSchemaRef _funcProcNameDatabaseSchemaRef;
            
            private AstDecimal _maxReaders;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings1(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _activationStatus = activationStatus;
                _funcProcNameDatabaseSchemaRef = funcProcNameDatabaseSchemaRef;
                _maxReaders = maxReaders;
                _onOff = onOff;
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff ActivationStatus
            {
                get
                {
                    return _activationStatus;
                }
            }
            
            public virtual AstFuncProcNameDatabaseSchemaRef FuncProcNameDatabaseSchemaRef
            {
                get
                {
                    return _funcProcNameDatabaseSchemaRef;
                }
            }
            
            public virtual AstDecimal MaxReaders
            {
                get
                {
                    return _maxReaders;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS username=stringtext COMMA? RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings2 : AstQueueSettings
        {
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _activationStatus;
            
            private AstFuncProcNameDatabaseSchemaRef _funcProcNameDatabaseSchemaRef;
            
            private AstDecimal _maxReaders;
            
            private AstStringtext _username;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings2(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstStringtext username, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _activationStatus = activationStatus;
                _funcProcNameDatabaseSchemaRef = funcProcNameDatabaseSchemaRef;
                _maxReaders = maxReaders;
                _username = username;
                _onOff = onOff;
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff ActivationStatus
            {
                get
                {
                    return _activationStatus;
                }
            }
            
            public virtual AstFuncProcNameDatabaseSchemaRef FuncProcNameDatabaseSchemaRef
            {
                get
                {
                    return _funcProcNameDatabaseSchemaRef;
                }
            }
            
            public virtual AstDecimal MaxReaders
            {
                get
                {
                    return _maxReaders;
                }
            }
            
            public virtual AstStringtext Username
            {
                get
                {
                    return _username;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS OWNER COMMA? RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings3 : AstQueueSettings
        {
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _activationStatus;
            
            private AstFuncProcNameDatabaseSchemaRef _funcProcNameDatabaseSchemaRef;
            
            private AstDecimal _maxReaders;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings3(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _activationStatus = activationStatus;
                _funcProcNameDatabaseSchemaRef = funcProcNameDatabaseSchemaRef;
                _maxReaders = maxReaders;
                _onOff = onOff;
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff ActivationStatus
            {
                get
                {
                    return _activationStatus;
                }
            }
            
            public virtual AstFuncProcNameDatabaseSchemaRef FuncProcNameDatabaseSchemaRef
            {
                get
                {
                    return _funcProcNameDatabaseSchemaRef;
                }
            }
            
            public virtual AstDecimal MaxReaders
            {
                get
                {
                    return _maxReaders;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        /// <summary>
        /// queue_settings : WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION LR_BRACKET DROP RR_BRACKET COMMA? POISON_MESSAGE_HANDLING LR_BRACKET STATUS EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstQueueSettings4 : AstQueueSettings
        {
            
            private AstOnOff _status;
            
            private AstOnOff _retention;
            
            private AstOnOff _onOff;
            
            internal AstQueueSettings4(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff onOff) : 
                    base(ctx)
            {
                _status = status;
                _retention = retention;
                _onOff = onOff;
            }
            
            public virtual AstOnOff Status
            {
                get
                {
                    return _status;
                }
            }
            
            public virtual AstOnOff Retention
            {
                get
                {
                    return _retention;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueSettings(this);
            }
        }
        

        
        internal AstQueueSettings(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueueSettings(Position p) : 
                base(p)
        {
        }
        
        internal AstQueueSettings(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstQueueSettings Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstQueueSettings.Resolve(list);
            if ((index == 7))
            {
                return new AstQueueSettings.AstQueueSettings1(ctx, ((AstOnOff)(list[0])), ((AstOnOff)(list[1])), ((AstOnOff)(list[2])), ((AstFuncProcNameDatabaseSchemaRef)(list[3])), ((AstDecimal)(list[4])), ((AstOnOff)(list[5])));
            }
            if ((index == 8))
            {
                return new AstQueueSettings.AstQueueSettings2(ctx, ((AstOnOff)(list[0])), ((AstOnOff)(list[1])), ((AstOnOff)(list[2])), ((AstFuncProcNameDatabaseSchemaRef)(list[3])), ((AstDecimal)(list[4])), ((AstStringtext)(list[5])), ((AstOnOff)(list[6])));
            }
            if ((index == 7))
            {
                return new AstQueueSettings.AstQueueSettings3(ctx, ((AstOnOff)(list[0])), ((AstOnOff)(list[1])), ((AstOnOff)(list[2])), ((AstFuncProcNameDatabaseSchemaRef)(list[3])), ((AstDecimal)(list[4])), ((AstOnOff)(list[5])));
            }
            if ((index == 4))
            {
                return new AstQueueSettings.AstQueueSettings4(ctx, ((AstOnOff)(list[0])), ((AstOnOff)(list[1])), ((AstOnOff)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 7))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFuncProcNameDatabaseSchemaRef), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstDecimal), false, false))
                                {
                                    if (AstRoot.Eval(list[5], typeof(AstStringtext), false, false))
                                    {
                                        if (AstRoot.Eval(list[6], typeof(AstOnOff), false, false))
                                        {
                                            return 2;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 6))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFuncProcNameDatabaseSchemaRef), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstDecimal), false, false))
                                {
                                    if (AstRoot.Eval(list[5], typeof(AstOnOff), false, false))
                                    {
                                        return 1;
                                    }
                                }
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFuncProcNameDatabaseSchemaRef), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstDecimal), false, false))
                                {
                                    if (AstRoot.Eval(list[5], typeof(AstOnOff), false, false))
                                    {
                                        return 3;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            return 4;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS SELF COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstOnOff onOff)
        {
            AstQueueSettings.AstQueueSettings1 result = new AstQueueSettings.AstQueueSettings1(ctx, status, retention, activationStatus, funcProcNameDatabaseSchemaRef, maxReaders, onOff);
            return result;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( STATUS EQUAL activation_status=on_off COMMA? PROCEDURE_NAME EQUAL func_proc_name_database_schema_ref COMMA? MAX_QUEUE_READERS EQUAL max_readers=decimal COMMA? EXECUTE AS username=stringtext COMMA? ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff activationStatus, AstFuncProcNameDatabaseSchemaRef funcProcNameDatabaseSchemaRef, AstDecimal maxReaders, AstStringtext username, AstOnOff onOff)
        {
            AstQueueSettings.AstQueueSettings2 result = new AstQueueSettings.AstQueueSettings2(ctx, status, retention, activationStatus, funcProcNameDatabaseSchemaRef, maxReaders, username, onOff);
            return result;
        }
        
        /// <summary>
        /// queue_settings : 
        ///    WITH STATUS EQUAL status=on_off COMMA? RETENTION EQUAL retention=on_off COMMA? ACTIVATION ( DROP ) COMMA? POISON_MESSAGE_HANDLING ( STATUS EQUAL on_off ) 
        /// </summary>
        public static AstQueueSettings QueueSettings(ParserRuleContext ctx, AstOnOff status, AstOnOff retention, AstOnOff onOff)
        {
            AstQueueSettings.AstQueueSettings4 result = new AstQueueSettings.AstQueueSettings4(ctx, status, retention, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// table_or_queue
    /// 	 : complete_table_ref
    /// 	 | queue_id
    /// </summary>
    public abstract partial class AstTableOrQueue : AstBnfRule
    {
        
        protected static string _rule = "table_or_queue\r\n\t : complete_table_ref\r\n\t | queue_id";
        
        /// <summary>
        /// table_or_queue : complete_table_ref 
        /// </summary>
        public partial class AstTableOrQueue1 : AstTableOrQueue
        {
            
            private AstCompleteTableRef _completeTableRef;
            
            internal AstTableOrQueue1(ParserRuleContext ctx, AstCompleteTableRef completeTableRef) : 
                    base(ctx)
            {
                _completeTableRef = completeTableRef;
            }
            
            public virtual AstCompleteTableRef CompleteTableRef
            {
                get
                {
                    return _completeTableRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOrQueue(this);
            }
        }
        /// <summary>
        /// table_or_queue : queue_id 
        /// </summary>
        public partial class AstTableOrQueue2 : AstTableOrQueue
        {
            
            private AstQueueId _queueId;
            
            internal AstTableOrQueue2(ParserRuleContext ctx, AstQueueId queueId) : 
                    base(ctx)
            {
                _queueId = queueId;
            }
            
            public virtual AstQueueId QueueId
            {
                get
                {
                    return _queueId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOrQueue(this);
            }
        }
        

        
        internal AstTableOrQueue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableOrQueue(Position p) : 
                base(p)
        {
        }
        
        internal AstTableOrQueue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableOrQueue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableOrQueue.Resolve(list);
            if ((index == 2))
            {
                return new AstTableOrQueue.AstTableOrQueue1(ctx, ((AstCompleteTableRef)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableOrQueue.AstTableOrQueue2(ctx, ((AstQueueId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCompleteTableRef), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstQueueId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_or_queue : 
        ///    complete_table_ref 
        /// </summary>
        public static AstTableOrQueue TableOrQueue(ParserRuleContext ctx, AstCompleteTableRef completeTableRef)
        {
            AstTableOrQueue.AstTableOrQueue1 result = new AstTableOrQueue.AstTableOrQueue1(ctx, completeTableRef);
            return result;
        }
        
        /// <summary>
        /// table_or_queue : 
        ///    queue_id 
        /// </summary>
        public static AstTableOrQueue TableOrQueue(ParserRuleContext ctx, AstQueueId queueId)
        {
            AstTableOrQueue.AstTableOrQueue2 result = new AstTableOrQueue.AstTableOrQueue2(ctx, queueId);
            return result;
        }
    }
    
    /// <summary>
    /// queue_action
    /// 	 : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?
    /// 	 | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?
    /// 	 | MOVE  TO  id1 = id_default  id2 = id_default
    /// </summary>
    public abstract partial class AstQueueAction : AstBnfRule
    {
        
        protected static string _rule = "queue_action\r\n\t : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)?" +
            "\r\n\t | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)?\r\n\t | MOVE  TO  id1 = id" +
            "_default  id2 = id_default";
        
        /// <summary>
        /// queue_action : REBUILD WITH LR_BRACKET queue_rebuild_options RR_BRACKET 
        /// </summary>
        public partial class AstQueueAction1 : AstQueueAction
        {
            
            private AstQueueRebuildOptions _queueRebuildOptions;
            
            internal AstQueueAction1(ParserRuleContext ctx, AstQueueRebuildOptions queueRebuildOptions) : 
                    base(ctx)
            {
                _queueRebuildOptions = queueRebuildOptions;
            }
            
            public virtual AstQueueRebuildOptions QueueRebuildOptions
            {
                get
                {
                    return _queueRebuildOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        /// <summary>
        /// queue_action : REORGANIZE WITH LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public partial class AstQueueAction2 : AstQueueAction
        {
            
            private AstOnOff _onOff;
            
            internal AstQueueAction2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        /// <summary>
        /// queue_action : MOVE TO id1=id_default id2=id_default 
        /// </summary>
        public partial class AstQueueAction3 : AstQueueAction
        {
            
            private AstIdDefault _id1;
            
            private AstIdDefault _id2;
            
            internal AstQueueAction3(ParserRuleContext ctx, AstIdDefault id1, AstIdDefault id2) : 
                    base(ctx)
            {
                _id1 = id1;
                _id2 = id2;
            }
            
            public virtual AstIdDefault Id1
            {
                get
                {
                    return _id1;
                }
            }
            
            public virtual AstIdDefault Id2
            {
                get
                {
                    return _id2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueueAction(this);
            }
        }
        

        
        internal AstQueueAction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueueAction(Position p) : 
                base(p)
        {
        }
        
        internal AstQueueAction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstQueueAction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstQueueAction.Resolve(list);
            if ((index == 2))
            {
                return new AstQueueAction.AstQueueAction1(ctx, ((AstQueueRebuildOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstQueueAction.AstQueueAction2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 3))
            {
                return new AstQueueAction.AstQueueAction3(ctx, ((AstIdDefault)(list[0])), ((AstIdDefault)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstIdDefault), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstIdDefault), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstQueueRebuildOptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// queue_action : 
        ///    REBUILD WITH ( queue_rebuild_options ) 
        /// </summary>
        public static AstQueueAction QueueAction(ParserRuleContext ctx, AstQueueRebuildOptions queueRebuildOptions)
        {
            AstQueueAction.AstQueueAction1 result = new AstQueueAction.AstQueueAction1(ctx, queueRebuildOptions);
            return result;
        }
        
        /// <summary>
        /// queue_action : 
        ///    REORGANIZE WITH LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstQueueAction QueueAction(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstQueueAction.AstQueueAction2 result = new AstQueueAction.AstQueueAction2(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// queue_action : 
        ///    MOVE TO id1=id_default id2=id_default 
        /// </summary>
        public static AstQueueAction QueueAction(ParserRuleContext ctx, AstIdDefault id1, AstIdDefault id2)
        {
            AstQueueAction.AstQueueAction3 result = new AstQueueAction.AstQueueAction3(ctx, id1, id2);
            return result;
        }
    }
    
    /// <summary>
    /// id_default
    /// 	 : id_
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstIdDefault : AstBnfRule
    {
        
        protected static string _rule = "id_default\r\n\t : id_\r\n\t | DEFAULT";
        
        /// <summary>
        /// id_default : id_ 
        /// </summary>
        public partial class AstIdDefault1 : AstIdDefault
        {
            
            private AstId _id;
            
            internal AstIdDefault1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdDefault(this);
            }
        }
        /// <summary>
        /// id_default : DEFAULT 
        /// </summary>
        public partial class AstIdDefault2 : AstIdDefault
        {
            
            internal AstIdDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIdDefault(this);
            }
        }
        

        
        internal AstIdDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIdDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstIdDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIdDefault Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIdDefault.Resolve(list);
            if ((index == 2))
            {
                return new AstIdDefault.AstIdDefault1(ctx, ((AstId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstIdDefault.AstIdDefault2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// id_default : 
        ///    id_ 
        /// </summary>
        public static AstIdDefault IdDefault(ParserRuleContext ctx, AstId id)
        {
            AstIdDefault.AstIdDefault1 result = new AstIdDefault.AstIdDefault1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// id_default : 
        ///    DEFAULT 
        /// </summary>
        public static AstIdDefault IdDefault(ParserRuleContext ctx)
        {
            AstIdDefault.AstIdDefault2 result = new AstIdDefault.AstIdDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// contract_item_target
    /// 	 : message_type_id
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstContractItemTarget : AstBnfRule
    {
        
        protected static string _rule = "contract_item_target\r\n\t : message_type_id\r\n\t | DEFAULT";
        
        /// <summary>
        /// contract_item_target : message_type_id 
        /// </summary>
        public partial class AstContractItemTarget1 : AstContractItemTarget
        {
            
            private AstMessageTypeId _messageTypeId;
            
            internal AstContractItemTarget1(ParserRuleContext ctx, AstMessageTypeId messageTypeId) : 
                    base(ctx)
            {
                _messageTypeId = messageTypeId;
            }
            
            public virtual AstMessageTypeId MessageTypeId
            {
                get
                {
                    return _messageTypeId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractItemTarget(this);
            }
        }
        /// <summary>
        /// contract_item_target : DEFAULT 
        /// </summary>
        public partial class AstContractItemTarget2 : AstContractItemTarget
        {
            
            internal AstContractItemTarget2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractItemTarget(this);
            }
        }
        

        
        internal AstContractItemTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstContractItemTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstContractItemTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstContractItemTarget Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstContractItemTarget.Resolve(list);
            if ((index == 2))
            {
                return new AstContractItemTarget.AstContractItemTarget1(ctx, ((AstMessageTypeId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstContractItemTarget.AstContractItemTarget2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstMessageTypeId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// contract_item_target : 
        ///    message_type_id 
        /// </summary>
        public static AstContractItemTarget ContractItemTarget(ParserRuleContext ctx, AstMessageTypeId messageTypeId)
        {
            AstContractItemTarget.AstContractItemTarget1 result = new AstContractItemTarget.AstContractItemTarget1(ctx, messageTypeId);
            return result;
        }
        
        /// <summary>
        /// contract_item_target : 
        ///    DEFAULT 
        /// </summary>
        public static AstContractItemTarget ContractItemTarget(ParserRuleContext ctx)
        {
            AstContractItemTarget.AstContractItemTarget2 result = new AstContractItemTarget.AstContractItemTarget2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// when_matche
    /// 	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
    /// 	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
    /// 	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
    /// </summary>
    public abstract partial class AstWhenMatche : AstBnfRule
    {
        
        protected static string _rule = @"when_matche
	 : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+
	 | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched)
	 | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+";
        
        /// <summary>
        /// when_matche : WHEN MATCHED AND search_condition THEN merge_matched 
        /// </summary>
        public partial class AstWhenMatche1 : AstWhenMatche
        {
            
            private AstSearchCondition _searchCondition;
            
            private AstMergeMatched _mergeMatched;
            
            internal AstWhenMatche1(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeMatched mergeMatched) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
                _mergeMatched = mergeMatched;
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public virtual AstMergeMatched MergeMatched
            {
                get
                {
                    return _mergeMatched;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        /// <summary>
        /// when_matche : WHEN NOT MATCHED BY TARGET AND search_condition THEN merge_not_matched 
        /// </summary>
        public partial class AstWhenMatche2 : AstWhenMatche
        {
            
            private AstSearchCondition _searchCondition;
            
            private AstMergeNotMatched _mergeNotMatched;
            
            internal AstWhenMatche2(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeNotMatched mergeNotMatched) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
                _mergeNotMatched = mergeNotMatched;
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public virtual AstMergeNotMatched MergeNotMatched
            {
                get
                {
                    return _mergeNotMatched;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        /// <summary>
        /// when_matche : WHEN NOT MATCHED BY SOURCE AND search_condition THEN merge_matched 
        /// </summary>
        public partial class AstWhenMatche3 : AstWhenMatche
        {
            
            private AstSearchCondition _searchCondition;
            
            private AstMergeMatched _mergeMatched;
            
            internal AstWhenMatche3(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeMatched mergeMatched) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
                _mergeMatched = mergeMatched;
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public virtual AstMergeMatched MergeMatched
            {
                get
                {
                    return _mergeMatched;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWhenMatche(this);
            }
        }
        

        
        internal AstWhenMatche(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWhenMatche(Position p) : 
                base(p)
        {
        }
        
        internal AstWhenMatche(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWhenMatche Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWhenMatche.Resolve(list);
            if ((index == 3))
            {
                return new AstWhenMatche.AstWhenMatche1(ctx, ((AstSearchCondition)(list[0])), ((AstMergeMatched)(list[1])));
            }
            if ((index == 3))
            {
                return new AstWhenMatche.AstWhenMatche2(ctx, ((AstSearchCondition)(list[0])), ((AstMergeNotMatched)(list[1])));
            }
            if ((index == 3))
            {
                return new AstWhenMatche.AstWhenMatche3(ctx, ((AstSearchCondition)(list[0])), ((AstMergeMatched)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMergeMatched), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMergeNotMatched), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMergeMatched), false, false))
                    {
                        return 3;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// when_matche : 
        ///    WHEN MATCHED AND search_condition THEN merge_matched 
        /// </summary>
        public static AstWhenMatche WhenMatche(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeMatched mergeMatched)
        {
            AstWhenMatche.AstWhenMatche1 result = new AstWhenMatche.AstWhenMatche1(ctx, searchCondition, mergeMatched);
            return result;
        }
        
        /// <summary>
        /// when_matche : 
        ///    WHEN NOT MATCHED BY TARGET AND search_condition THEN merge_not_matched 
        /// </summary>
        public static AstWhenMatche WhenMatche(ParserRuleContext ctx, AstSearchCondition searchCondition, AstMergeNotMatched mergeNotMatched)
        {
            AstWhenMatche.AstWhenMatche2 result = new AstWhenMatche.AstWhenMatche2(ctx, searchCondition, mergeNotMatched);
            return result;
        }
    }
    
    /// <summary>
    /// merge_matched
    /// 	 : UPDATE  SET  update_elem_merges
    /// 	 | DELETE
    /// </summary>
    public abstract partial class AstMergeMatched : AstBnfRule
    {
        
        protected static string _rule = "merge_matched\r\n\t : UPDATE  SET  update_elem_merges\r\n\t | DELETE";
        
        /// <summary>
        /// merge_matched : UPDATE SET update_elem_merges 
        /// </summary>
        public partial class AstMergeMatched1 : AstMergeMatched
        {
            
            private AstUpdateElemMerges _updateElemMerges;
            
            internal AstMergeMatched1(ParserRuleContext ctx, AstUpdateElemMerges updateElemMerges) : 
                    base(ctx)
            {
                _updateElemMerges = updateElemMerges;
            }
            
            public virtual AstUpdateElemMerges UpdateElemMerges
            {
                get
                {
                    return _updateElemMerges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeMatched(this);
            }
        }
        /// <summary>
        /// merge_matched : DELETE 
        /// </summary>
        public partial class AstMergeMatched2 : AstMergeMatched
        {
            
            internal AstMergeMatched2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeMatched(this);
            }
        }
        

        
        internal AstMergeMatched(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMergeMatched(Position p) : 
                base(p)
        {
        }
        
        internal AstMergeMatched(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMergeMatched Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMergeMatched.Resolve(list);
            if ((index == 2))
            {
                return new AstMergeMatched.AstMergeMatched1(ctx, ((AstUpdateElemMerges)(list[0])));
            }
            if ((index == 1))
            {
                return new AstMergeMatched.AstMergeMatched2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstUpdateElemMerges), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// merge_matched : 
        ///    UPDATE SET update_elem_merges 
        /// </summary>
        public static AstMergeMatched MergeMatched(ParserRuleContext ctx, AstUpdateElemMerges updateElemMerges)
        {
            AstMergeMatched.AstMergeMatched1 result = new AstMergeMatched.AstMergeMatched1(ctx, updateElemMerges);
            return result;
        }
        
        /// <summary>
        /// merge_matched : 
        ///    DELETE 
        /// </summary>
        public static AstMergeMatched MergeMatched(ParserRuleContext ctx)
        {
            AstMergeMatched.AstMergeMatched2 result = new AstMergeMatched.AstMergeMatched2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// merge_not_matched
    /// 	 : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | DEFAULT  VALUES)
    /// </summary>
    public abstract partial class AstMergeNotMatched : AstBnfRule
    {
        
        protected static string _rule = "merge_not_matched\r\n\t : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (tabl" +
            "e_value_constructor | DEFAULT  VALUES)";
        
        /// <summary>
        /// merge_not_matched : INSERT LR_BRACKET column_name_list RR_BRACKET table_value_constructor 
        /// </summary>
        public partial class AstMergeNotMatched1 : AstMergeNotMatched
        {
            
            private AstColumnNameList _columnNameList;
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstMergeNotMatched1(ParserRuleContext ctx, AstColumnNameList columnNameList, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _columnNameList = columnNameList;
                _tableValueConstructor = tableValueConstructor;
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeNotMatched(this);
            }
        }
        /// <summary>
        /// merge_not_matched : INSERT LR_BRACKET column_name_list RR_BRACKET DEFAULT VALUES 
        /// </summary>
        public partial class AstMergeNotMatched2 : AstMergeNotMatched
        {
            
            private AstColumnNameList _columnNameList;
            
            internal AstMergeNotMatched2(ParserRuleContext ctx, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _columnNameList = columnNameList;
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMergeNotMatched(this);
            }
        }
        

        
        internal AstMergeNotMatched(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMergeNotMatched(Position p) : 
                base(p)
        {
        }
        
        internal AstMergeNotMatched(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMergeNotMatched Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMergeNotMatched.Resolve(list);
            if ((index == 3))
            {
                return new AstMergeNotMatched.AstMergeNotMatched1(ctx, ((AstColumnNameList)(list[0])), ((AstTableValueConstructor)(list[1])));
            }
            if ((index == 2))
            {
                return new AstMergeNotMatched.AstMergeNotMatched2(ctx, ((AstColumnNameList)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnNameList), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTableValueConstructor), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnNameList), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// merge_not_matched : 
        ///    INSERT ( column_name_list ) table_value_constructor 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(ParserRuleContext ctx, AstColumnNameList columnNameList, AstTableValueConstructor tableValueConstructor)
        {
            AstMergeNotMatched.AstMergeNotMatched1 result = new AstMergeNotMatched.AstMergeNotMatched1(ctx, columnNameList, tableValueConstructor);
            return result;
        }
        
        /// <summary>
        /// merge_not_matched : 
        ///    INSERT ( column_name_list ) DEFAULT VALUES 
        /// </summary>
        public static AstMergeNotMatched MergeNotMatched(ParserRuleContext ctx, AstColumnNameList columnNameList)
        {
            AstMergeNotMatched.AstMergeNotMatched2 result = new AstMergeNotMatched.AstMergeNotMatched2(ctx, columnNameList);
            return result;
        }
    }
    
    /// <summary>
    /// delete_statement_from
    /// 	 : ddl_object
    /// 	 | rowset_function_limited
    /// 	 | table_var = local_id
    /// </summary>
    public abstract partial class AstDeleteStatementFrom : AstBnfRule
    {
        
        protected static string _rule = "delete_statement_from\r\n\t : ddl_object\r\n\t | rowset_function_limited\r\n\t | table_var" +
            " = local_id";
        
        /// <summary>
        /// delete_statement_from : ddl_object 
        /// </summary>
        public partial class AstDeleteStatementFrom1 : AstDeleteStatementFrom
        {
            
            private AstDdlObject _ddlObject;
            
            internal AstDeleteStatementFrom1(ParserRuleContext ctx, AstDdlObject ddlObject) : 
                    base(ctx)
            {
                _ddlObject = ddlObject;
            }
            
            public virtual AstDdlObject DdlObject
            {
                get
                {
                    return _ddlObject;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        /// <summary>
        /// delete_statement_from : rowset_function_limited 
        /// </summary>
        public partial class AstDeleteStatementFrom2 : AstDeleteStatementFrom
        {
            
            private AstRowsetFunctionLimited _rowsetFunctionLimited;
            
            internal AstDeleteStatementFrom2(ParserRuleContext ctx, AstRowsetFunctionLimited rowsetFunctionLimited) : 
                    base(ctx)
            {
                _rowsetFunctionLimited = rowsetFunctionLimited;
            }
            
            public virtual AstRowsetFunctionLimited RowsetFunctionLimited
            {
                get
                {
                    return _rowsetFunctionLimited;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        /// <summary>
        /// delete_statement_from : table_var=local_id 
        /// </summary>
        public partial class AstDeleteStatementFrom3 : AstDeleteStatementFrom
        {
            
            private AstLocalId _tableVar;
            
            internal AstDeleteStatementFrom3(ParserRuleContext ctx, AstLocalId tableVar) : 
                    base(ctx)
            {
                _tableVar = tableVar;
            }
            
            public virtual AstLocalId TableVar
            {
                get
                {
                    return _tableVar;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeleteStatementFrom(this);
            }
        }
        

        
        internal AstDeleteStatementFrom(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeleteStatementFrom(Position p) : 
                base(p)
        {
        }
        
        internal AstDeleteStatementFrom(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDeleteStatementFrom Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDeleteStatementFrom.Resolve(list);
            if ((index == 2))
            {
                return new AstDeleteStatementFrom.AstDeleteStatementFrom1(ctx, ((AstDdlObject)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDeleteStatementFrom.AstDeleteStatementFrom2(ctx, ((AstRowsetFunctionLimited)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDeleteStatementFrom.AstDeleteStatementFrom3(ctx, ((AstLocalId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDdlObject), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstRowsetFunctionLimited), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    ddl_object 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(ParserRuleContext ctx, AstDdlObject ddlObject)
        {
            AstDeleteStatementFrom.AstDeleteStatementFrom1 result = new AstDeleteStatementFrom.AstDeleteStatementFrom1(ctx, ddlObject);
            return result;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    rowset_function_limited 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(ParserRuleContext ctx, AstRowsetFunctionLimited rowsetFunctionLimited)
        {
            AstDeleteStatementFrom.AstDeleteStatementFrom2 result = new AstDeleteStatementFrom.AstDeleteStatementFrom2(ctx, rowsetFunctionLimited);
            return result;
        }
        
        /// <summary>
        /// delete_statement_from : 
        ///    table_var=local_id 
        /// </summary>
        public static AstDeleteStatementFrom DeleteStatementFrom(ParserRuleContext ctx, AstLocalId tableVar)
        {
            AstDeleteStatementFrom.AstDeleteStatementFrom3 result = new AstDeleteStatementFrom.AstDeleteStatementFrom3(ctx, tableVar);
            return result;
        }
    }
    
    /// <summary>
    /// insert_statement_value
    /// 	 : table_value_constructor
    /// 	 | derived_table
    /// 	 | execute_statement
    /// 	 | DEFAULT  VALUES
    /// </summary>
    public abstract partial class AstInsertStatementValue : AstBnfRule
    {
        
        protected static string _rule = "insert_statement_value\r\n\t : table_value_constructor\r\n\t | derived_table\r\n\t | execu" +
            "te_statement\r\n\t | DEFAULT  VALUES";
        
        /// <summary>
        /// insert_statement_value : table_value_constructor 
        /// </summary>
        public partial class AstInsertStatementValue1 : AstInsertStatementValue
        {
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstInsertStatementValue1(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _tableValueConstructor = tableValueConstructor;
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : derived_table 
        /// </summary>
        public partial class AstInsertStatementValue2 : AstInsertStatementValue
        {
            
            private AstDerivedTable _derivedTable;
            
            internal AstInsertStatementValue2(ParserRuleContext ctx, AstDerivedTable derivedTable) : 
                    base(ctx)
            {
                _derivedTable = derivedTable;
            }
            
            public virtual AstDerivedTable DerivedTable
            {
                get
                {
                    return _derivedTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : execute_statement 
        /// </summary>
        public partial class AstInsertStatementValue3 : AstInsertStatementValue
        {
            
            private AstExecuteStatement _executeStatement;
            
            internal AstInsertStatementValue3(ParserRuleContext ctx, AstExecuteStatement executeStatement) : 
                    base(ctx)
            {
                _executeStatement = executeStatement;
            }
            
            public virtual AstExecuteStatement ExecuteStatement
            {
                get
                {
                    return _executeStatement;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        /// <summary>
        /// insert_statement_value : DEFAULT VALUES 
        /// </summary>
        public partial class AstInsertStatementValue4 : AstInsertStatementValue
        {
            
            internal AstInsertStatementValue4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitInsertStatementValue(this);
            }
        }
        

        
        internal AstInsertStatementValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstInsertStatementValue(Position p) : 
                base(p)
        {
        }
        
        internal AstInsertStatementValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstInsertStatementValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstInsertStatementValue.Resolve(list);
            if ((index == 2))
            {
                return new AstInsertStatementValue.AstInsertStatementValue1(ctx, ((AstTableValueConstructor)(list[0])));
            }
            if ((index == 2))
            {
                return new AstInsertStatementValue.AstInsertStatementValue2(ctx, ((AstDerivedTable)(list[0])));
            }
            if ((index == 2))
            {
                return new AstInsertStatementValue.AstInsertStatementValue3(ctx, ((AstExecuteStatement)(list[0])));
            }
            if ((index == 1))
            {
                return new AstInsertStatementValue.AstInsertStatementValue4(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableValueConstructor), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDerivedTable), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatement), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    table_value_constructor 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor)
        {
            AstInsertStatementValue.AstInsertStatementValue1 result = new AstInsertStatementValue.AstInsertStatementValue1(ctx, tableValueConstructor);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    derived_table 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx, AstDerivedTable derivedTable)
        {
            AstInsertStatementValue.AstInsertStatementValue2 result = new AstInsertStatementValue.AstInsertStatementValue2(ctx, derivedTable);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    execute_statement 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx, AstExecuteStatement executeStatement)
        {
            AstInsertStatementValue.AstInsertStatementValue3 result = new AstInsertStatementValue.AstInsertStatementValue3(ctx, executeStatement);
            return result;
        }
        
        /// <summary>
        /// insert_statement_value : 
        ///    DEFAULT VALUES 
        /// </summary>
        public static AstInsertStatementValue InsertStatementValue(ParserRuleContext ctx)
        {
            AstInsertStatementValue.AstInsertStatementValue4 result = new AstInsertStatementValue.AstInsertStatementValue4(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// receive_mode
    /// 	 : receive_mode_enum
    /// 	 | top_clause
    /// </summary>
    public abstract partial class AstReceiveMode : AstBnfRule
    {
        
        protected static string _rule = "receive_mode\r\n\t : receive_mode_enum\r\n\t | top_clause";
        
        /// <summary>
        /// receive_mode : receive_mode_enum 
        /// </summary>
        public partial class AstReceiveMode1 : AstReceiveMode
        {
            
            private AstReceiveModeEnum _receiveModeEnum;
            
            internal AstReceiveMode1(ParserRuleContext ctx, AstReceiveModeEnum receiveModeEnum) : 
                    base(ctx)
            {
                _receiveModeEnum = receiveModeEnum;
            }
            
            public virtual AstReceiveModeEnum ReceiveModeEnum
            {
                get
                {
                    return _receiveModeEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReceiveMode(this);
            }
        }
        /// <summary>
        /// receive_mode : top_clause 
        /// </summary>
        public partial class AstReceiveMode2 : AstReceiveMode
        {
            
            private AstTopClause _topClause;
            
            internal AstReceiveMode2(ParserRuleContext ctx, AstTopClause topClause) : 
                    base(ctx)
            {
                _topClause = topClause;
            }
            
            public virtual AstTopClause TopClause
            {
                get
                {
                    return _topClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReceiveMode(this);
            }
        }
        

        
        internal AstReceiveMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReceiveMode(Position p) : 
                base(p)
        {
        }
        
        internal AstReceiveMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstReceiveMode Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstReceiveMode.Resolve(list);
            if ((index == 2))
            {
                return new AstReceiveMode.AstReceiveMode1(ctx, ((AstReceiveModeEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstReceiveMode.AstReceiveMode2(ctx, ((AstTopClause)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReceiveModeEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTopClause), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// receive_mode : 
        ///    receive_mode_enum 
        /// </summary>
        public static AstReceiveMode ReceiveMode(ParserRuleContext ctx, AstReceiveModeEnum receiveModeEnum)
        {
            AstReceiveMode.AstReceiveMode1 result = new AstReceiveMode.AstReceiveMode1(ctx, receiveModeEnum);
            return result;
        }
        
        /// <summary>
        /// receive_mode : 
        ///    top_clause 
        /// </summary>
        public static AstReceiveMode ReceiveMode(ParserRuleContext ctx, AstTopClause topClause)
        {
            AstReceiveMode.AstReceiveMode2 result = new AstReceiveMode.AstReceiveMode2(ctx, topClause);
            return result;
        }
    }
    
    /// <summary>
    /// timespan
    /// 	 : (local_id | constant)
    /// </summary>
    public abstract partial class AstTimespan : AstBnfRule
    {
        
        protected static string _rule = "timespan\r\n\t : (local_id | constant)";
        
        /// <summary>
        /// timespan : local_id 
        /// </summary>
        public partial class AstTimespan1 : AstTimespan
        {
            
            private AstLocalId _localId;
            
            internal AstTimespan1(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTimespan(this);
            }
        }
        /// <summary>
        /// timespan : constant 
        /// </summary>
        public partial class AstTimespan2 : AstTimespan
        {
            
            private AstConstant _constant;
            
            internal AstTimespan2(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTimespan(this);
            }
        }
        

        
        internal AstTimespan(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTimespan(Position p) : 
                base(p)
        {
        }
        
        internal AstTimespan(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTimespan Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTimespan.Resolve(list);
            if ((index == 2))
            {
                return new AstTimespan.AstTimespan1(ctx, ((AstLocalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTimespan.AstTimespan2(ctx, ((AstConstant)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// timespan : 
        ///    local_id 
        /// </summary>
        public static AstTimespan Timespan(ParserRuleContext ctx, AstLocalId localId)
        {
            AstTimespan.AstTimespan1 result = new AstTimespan.AstTimespan1(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// timespan : 
        ///    constant 
        /// </summary>
        public static AstTimespan Timespan(ParserRuleContext ctx, AstConstant constant)
        {
            AstTimespan.AstTimespan2 result = new AstTimespan.AstTimespan2(ctx, constant);
            return result;
        }
    }
    
    /// <summary>
    /// relational_index_option
    /// 	 : rebuild_index_option
    /// 	 | DROP_EXISTING  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// </summary>
    public abstract partial class AstRelationalIndexOption : AstBnfRule
    {
        
        protected static string _rule = "relational_index_option\r\n\t : rebuild_index_option\r\n\t | DROP_EXISTING  EQUAL  on_o" +
            "ff\r\n\t | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off";
        
        /// <summary>
        /// relational_index_option : rebuild_index_option 
        /// </summary>
        public partial class AstRelationalIndexOption1 : AstRelationalIndexOption
        {
            
            private AstRebuildIndexOption _rebuildIndexOption;
            
            internal AstRelationalIndexOption1(ParserRuleContext ctx, AstRebuildIndexOption rebuildIndexOption) : 
                    base(ctx)
            {
                _rebuildIndexOption = rebuildIndexOption;
            }
            
            public virtual AstRebuildIndexOption RebuildIndexOption
            {
                get
                {
                    return _rebuildIndexOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        /// <summary>
        /// relational_index_option : DROP_EXISTING EQUAL on_off 
        /// </summary>
        public partial class AstRelationalIndexOption2 : AstRelationalIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRelationalIndexOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        /// <summary>
        /// relational_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY EQUAL on_off 
        /// </summary>
        public partial class AstRelationalIndexOption3 : AstRelationalIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRelationalIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRelationalIndexOption(this);
            }
        }
        

        
        internal AstRelationalIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRelationalIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRelationalIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRelationalIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRelationalIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstRelationalIndexOption.AstRelationalIndexOption1(ctx, ((AstRebuildIndexOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRelationalIndexOption.AstRelationalIndexOption2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRelationalIndexOption.AstRelationalIndexOption3(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRebuildIndexOption), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// relational_index_option : 
        ///    rebuild_index_option 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(ParserRuleContext ctx, AstRebuildIndexOption rebuildIndexOption)
        {
            AstRelationalIndexOption.AstRelationalIndexOption1 result = new AstRelationalIndexOption.AstRelationalIndexOption1(ctx, rebuildIndexOption);
            return result;
        }
        
        /// <summary>
        /// relational_index_option : 
        ///    DROP_EXISTING EQUAL on_off 
        /// </summary>
        public static AstRelationalIndexOption RelationalIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstRelationalIndexOption.AstRelationalIndexOption2 result = new AstRelationalIndexOption.AstRelationalIndexOption2(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// index_status
    /// 	 : index_status_enum
    /// 	 | RESUME  resumable_index_options?
    /// 	 | reorganize_partition
    /// 	 | set_index_options
    /// 	 | rebuild_partition
    /// </summary>
    public abstract partial class AstIndexStatus : AstBnfRule
    {
        
        protected static string _rule = "index_status\r\n\t : index_status_enum\r\n\t | RESUME  resumable_index_options?\r\n\t | re" +
            "organize_partition\r\n\t | set_index_options\r\n\t | rebuild_partition";
        
        /// <summary>
        /// index_status : index_status_enum 
        /// </summary>
        public partial class AstIndexStatus1 : AstIndexStatus
        {
            
            private AstIndexStatusEnum _indexStatusEnum;
            
            internal AstIndexStatus1(ParserRuleContext ctx, AstIndexStatusEnum indexStatusEnum) : 
                    base(ctx)
            {
                _indexStatusEnum = indexStatusEnum;
            }
            
            public virtual AstIndexStatusEnum IndexStatusEnum
            {
                get
                {
                    return _indexStatusEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : RESUME resumable_index_options? 
        /// </summary>
        public partial class AstIndexStatus2 : AstIndexStatus
        {
            
            private AstResumableIndexOptions _resumableIndexOptions;
            
            internal AstIndexStatus2(ParserRuleContext ctx, AstResumableIndexOptions resumableIndexOptions) : 
                    base(ctx)
            {
                _resumableIndexOptions = resumableIndexOptions;
            }
            
            public virtual AstResumableIndexOptions ResumableIndexOptions
            {
                get
                {
                    return _resumableIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : reorganize_partition 
        /// </summary>
        public partial class AstIndexStatus3 : AstIndexStatus
        {
            
            private AstReorganizePartition _reorganizePartition;
            
            internal AstIndexStatus3(ParserRuleContext ctx, AstReorganizePartition reorganizePartition) : 
                    base(ctx)
            {
                _reorganizePartition = reorganizePartition;
            }
            
            public virtual AstReorganizePartition ReorganizePartition
            {
                get
                {
                    return _reorganizePartition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : set_index_options 
        /// </summary>
        public partial class AstIndexStatus4 : AstIndexStatus
        {
            
            private AstSetIndexOptions _setIndexOptions;
            
            internal AstIndexStatus4(ParserRuleContext ctx, AstSetIndexOptions setIndexOptions) : 
                    base(ctx)
            {
                _setIndexOptions = setIndexOptions;
            }
            
            public virtual AstSetIndexOptions SetIndexOptions
            {
                get
                {
                    return _setIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        /// <summary>
        /// index_status : rebuild_partition 
        /// </summary>
        public partial class AstIndexStatus5 : AstIndexStatus
        {
            
            private AstRebuildPartition _rebuildPartition;
            
            internal AstIndexStatus5(ParserRuleContext ctx, AstRebuildPartition rebuildPartition) : 
                    base(ctx)
            {
                _rebuildPartition = rebuildPartition;
            }
            
            public virtual AstRebuildPartition RebuildPartition
            {
                get
                {
                    return _rebuildPartition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexStatus(this);
            }
        }
        

        
        internal AstIndexStatus(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexStatus(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexStatus(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIndexStatus Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIndexStatus.Resolve(list);
            if ((index == 2))
            {
                return new AstIndexStatus.AstIndexStatus1(ctx, ((AstIndexStatusEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstIndexStatus.AstIndexStatus2(ctx, ((AstResumableIndexOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstIndexStatus.AstIndexStatus3(ctx, ((AstReorganizePartition)(list[0])));
            }
            if ((index == 2))
            {
                return new AstIndexStatus.AstIndexStatus4(ctx, ((AstSetIndexOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstIndexStatus.AstIndexStatus5(ctx, ((AstRebuildPartition)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexStatusEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstResumableIndexOptions), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstReorganizePartition), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstSetIndexOptions), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstRebuildPartition), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// index_status : 
        ///    index_status_enum 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstIndexStatusEnum indexStatusEnum)
        {
            AstIndexStatus.AstIndexStatus1 result = new AstIndexStatus.AstIndexStatus1(ctx, indexStatusEnum);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    RESUME resumable_index_options? 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstResumableIndexOptions resumableIndexOptions)
        {
            AstIndexStatus.AstIndexStatus2 result = new AstIndexStatus.AstIndexStatus2(ctx, resumableIndexOptions);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    reorganize_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstReorganizePartition reorganizePartition)
        {
            AstIndexStatus.AstIndexStatus3 result = new AstIndexStatus.AstIndexStatus3(ctx, reorganizePartition);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    set_index_options 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstSetIndexOptions setIndexOptions)
        {
            AstIndexStatus.AstIndexStatus4 result = new AstIndexStatus.AstIndexStatus4(ctx, setIndexOptions);
            return result;
        }
        
        /// <summary>
        /// index_status : 
        ///    rebuild_partition 
        /// </summary>
        public static AstIndexStatus IndexStatus(ParserRuleContext ctx, AstRebuildPartition rebuildPartition)
        {
            AstIndexStatus.AstIndexStatus5 result = new AstIndexStatus.AstIndexStatus5(ctx, rebuildPartition);
            return result;
        }
    }
    
    /// <summary>
    /// index_name
    /// 	 : (id_ | ALL)
    /// </summary>
    public abstract partial class AstIndexName : AstBnfRule
    {
        
        protected static string _rule = "index_name\r\n\t : (id_ | ALL)";
        
        /// <summary>
        /// index_name : id_ 
        /// </summary>
        public partial class AstIndexName1 : AstIndexName
        {
            
            private AstId _id;
            
            internal AstIndexName1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexName(this);
            }
        }
        /// <summary>
        /// index_name : ALL 
        /// </summary>
        public partial class AstIndexName2 : AstIndexName
        {
            
            internal AstIndexName2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexName(this);
            }
        }
        

        
        internal AstIndexName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexName(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIndexName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIndexName.Resolve(list);
            if ((index == 2))
            {
                return new AstIndexName.AstIndexName1(ctx, ((AstId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstIndexName.AstIndexName2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// index_name : 
        ///    id_ 
        /// </summary>
        public static AstIndexName IndexName(ParserRuleContext ctx, AstId id)
        {
            AstIndexName.AstIndexName1 result = new AstIndexName.AstIndexName1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// index_name : 
        ///    ALL 
        /// </summary>
        public static AstIndexName IndexName(ParserRuleContext ctx)
        {
            AstIndexName.AstIndexName2 result = new AstIndexName.AstIndexName2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// resumable_index_option
    /// 	 : MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?
    /// 	 | low_priority_lock_wait
    /// </summary>
    public abstract partial class AstResumableIndexOption : AstBnfRule
    {
        
        protected static string _rule = "resumable_index_option\r\n\t : MAXDOP  EQUAL  max_degree_of_parallelism = decimal\r\n\t" +
            " | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES?\r\n\t | low_priority_lock_" +
            "wait";
        
        /// <summary>
        /// resumable_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstResumableIndexOption1 : AstResumableIndexOption
        {
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstResumableIndexOption1(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        /// <summary>
        /// resumable_index_option : MAX_DURATION EQUAL max_duration=decimal MINUTES? 
        /// </summary>
        public partial class AstResumableIndexOption2 : AstResumableIndexOption
        {
            
            private AstDecimal _maxDuration;
            
            internal AstResumableIndexOption2(ParserRuleContext ctx, AstDecimal maxDuration) : 
                    base(ctx)
            {
                _maxDuration = maxDuration;
            }
            
            public virtual AstDecimal MaxDuration
            {
                get
                {
                    return _maxDuration;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        /// <summary>
        /// resumable_index_option : low_priority_lock_wait 
        /// </summary>
        public partial class AstResumableIndexOption3 : AstResumableIndexOption
        {
            
            private AstLowPriorityLockWait _lowPriorityLockWait;
            
            internal AstResumableIndexOption3(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait) : 
                    base(ctx)
            {
                _lowPriorityLockWait = lowPriorityLockWait;
            }
            
            public virtual AstLowPriorityLockWait LowPriorityLockWait
            {
                get
                {
                    return _lowPriorityLockWait;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitResumableIndexOption(this);
            }
        }
        

        
        internal AstResumableIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstResumableIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstResumableIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstResumableIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstResumableIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstResumableIndexOption.AstResumableIndexOption1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstResumableIndexOption.AstResumableIndexOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstResumableIndexOption.AstResumableIndexOption3(ctx, ((AstLowPriorityLockWait)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLowPriorityLockWait), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// resumable_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism)
        {
            AstResumableIndexOption.AstResumableIndexOption1 result = new AstResumableIndexOption.AstResumableIndexOption1(ctx, maxDegreeOfParallelism);
            return result;
        }
        
        /// <summary>
        /// resumable_index_option : 
        ///    low_priority_lock_wait 
        /// </summary>
        public static AstResumableIndexOption ResumableIndexOption(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait)
        {
            AstResumableIndexOption.AstResumableIndexOption3 result = new AstResumableIndexOption.AstResumableIndexOption3(ctx, lowPriorityLockWait);
            return result;
        }
    }
    
    /// <summary>
    /// reorganize_option
    /// 	 : LOB_COMPACTION  EQUAL  on_off
    /// 	 | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
    /// </summary>
    public abstract partial class AstReorganizeOption : AstBnfRule
    {
        
        protected static string _rule = "reorganize_option\r\n\t : LOB_COMPACTION  EQUAL  on_off\r\n\t | COMPRESS_ALL_ROW_GROUPS" +
            "  EQUAL  on_off";
        
        /// <summary>
        /// reorganize_option : LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public partial class AstReorganizeOption1 : AstReorganizeOption
        {
            
            private AstOnOff _onOff;
            
            internal AstReorganizeOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReorganizeOption(this);
            }
        }
        /// <summary>
        /// reorganize_option : COMPRESS_ALL_ROW_GROUPS EQUAL on_off 
        /// </summary>
        public partial class AstReorganizeOption2 : AstReorganizeOption
        {
            
            private AstOnOff _onOff;
            
            internal AstReorganizeOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReorganizeOption(this);
            }
        }
        

        
        internal AstReorganizeOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReorganizeOption(Position p) : 
                base(p)
        {
        }
        
        internal AstReorganizeOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstReorganizeOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstReorganizeOption.Resolve(list);
            if ((index == 2))
            {
                return new AstReorganizeOption.AstReorganizeOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstReorganizeOption.AstReorganizeOption2(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// reorganize_option : 
        ///    LOB_COMPACTION EQUAL on_off 
        /// </summary>
        public static AstReorganizeOption ReorganizeOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstReorganizeOption.AstReorganizeOption1 result = new AstReorganizeOption.AstReorganizeOption1(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// set_index_option
    /// 	 : ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// </summary>
    public abstract partial class AstSetIndexOption : AstBnfRule
    {
        
        protected static string _rule = @"set_index_option
	 : ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?";
        
        /// <summary>
        /// set_index_option : ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption1 : AstSetIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : ALLOW_PAGE_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption2 : AstSetIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption3 : AstSetIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : IGNORE_DUP_KEY EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption4 : AstSetIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : STATISTICS_NORECOMPUTE EQUAL on_off 
        /// </summary>
        public partial class AstSetIndexOption5 : AstSetIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSetIndexOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        /// <summary>
        /// set_index_option : COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public partial class AstSetIndexOption6 : AstSetIndexOption
        {
            
            private AstDecimal _delay;
            
            internal AstSetIndexOption6(ParserRuleContext ctx, AstDecimal delay) : 
                    base(ctx)
            {
                _delay = delay;
            }
            
            public virtual AstDecimal Delay
            {
                get
                {
                    return _delay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetIndexOption(this);
            }
        }
        

        
        internal AstSetIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSetIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSetIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSetIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstSetIndexOption.AstSetIndexOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetIndexOption.AstSetIndexOption2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetIndexOption.AstSetIndexOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetIndexOption.AstSetIndexOption4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetIndexOption.AstSetIndexOption5(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetIndexOption.AstSetIndexOption6(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// set_index_option : 
        ///    ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSetIndexOption.AstSetIndexOption1 result = new AstSetIndexOption.AstSetIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// set_index_option : 
        ///    COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public static AstSetIndexOption SetIndexOption(ParserRuleContext ctx, AstDecimal delay)
        {
            AstSetIndexOption.AstSetIndexOption6 result = new AstSetIndexOption.AstSetIndexOption6(ctx, delay);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_partition
    /// 	 : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?
    /// 	 | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?
    /// </summary>
    public abstract partial class AstRebuildPartition : AstBnfRule
    {
        
        protected static string _rule = "rebuild_partition\r\n\t : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options?\r" +
            "\n\t | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?" +
            "";
        
        /// <summary>
        /// rebuild_partition : REBUILD PARTITION EQUAL ALL rebuild_index_options? 
        /// </summary>
        public partial class AstRebuildPartition1 : AstRebuildPartition
        {
            
            private AstRebuildIndexOptions _rebuildIndexOptions;
            
            internal AstRebuildPartition1(ParserRuleContext ctx, AstRebuildIndexOptions rebuildIndexOptions) : 
                    base(ctx)
            {
                _rebuildIndexOptions = rebuildIndexOptions;
            }
            
            public virtual AstRebuildIndexOptions RebuildIndexOptions
            {
                get
                {
                    return _rebuildIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildPartition(this);
            }
        }
        /// <summary>
        /// rebuild_partition : REBUILD PARTITION EQUAL decimal single_partition_rebuild_index_options? 
        /// </summary>
        public partial class AstRebuildPartition2 : AstRebuildPartition
        {
            
            private AstDecimal _decimal;
            
            private AstSinglePartitionRebuildIndexOptions _singlePartitionRebuildIndexOptions;
            
            internal AstRebuildPartition2(ParserRuleContext ctx, AstDecimal @decimal, AstSinglePartitionRebuildIndexOptions singlePartitionRebuildIndexOptions) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _singlePartitionRebuildIndexOptions = singlePartitionRebuildIndexOptions;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstSinglePartitionRebuildIndexOptions SinglePartitionRebuildIndexOptions
            {
                get
                {
                    return _singlePartitionRebuildIndexOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildPartition(this);
            }
        }
        

        
        internal AstRebuildPartition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRebuildPartition(Position p) : 
                base(p)
        {
        }
        
        internal AstRebuildPartition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRebuildPartition Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRebuildPartition.Resolve(list);
            if ((index == 2))
            {
                return new AstRebuildPartition.AstRebuildPartition1(ctx, ((AstRebuildIndexOptions)(list[0])));
            }
            if ((index == 3))
            {
                return new AstRebuildPartition.AstRebuildPartition2(ctx, ((AstDecimal)(list[0])), ((AstSinglePartitionRebuildIndexOptions)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSinglePartitionRebuildIndexOptions), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRebuildIndexOptions), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rebuild_partition : 
        ///    REBUILD PARTITION EQUAL ALL rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(ParserRuleContext ctx, AstRebuildIndexOptions rebuildIndexOptions)
        {
            AstRebuildPartition.AstRebuildPartition1 result = new AstRebuildPartition.AstRebuildPartition1(ctx, rebuildIndexOptions);
            return result;
        }
        
        /// <summary>
        /// rebuild_partition : 
        ///    REBUILD PARTITION EQUAL decimal single_partition_rebuild_index_options? 
        /// </summary>
        public static AstRebuildPartition RebuildPartition(ParserRuleContext ctx, AstDecimal @decimal, AstSinglePartitionRebuildIndexOptions singlePartitionRebuildIndexOptions)
        {
            AstRebuildPartition.AstRebuildPartition2 result = new AstRebuildPartition.AstRebuildPartition2(ctx, @decimal, singlePartitionRebuildIndexOptions);
            return result;
        }
    }
    
    /// <summary>
    /// rebuild_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | STATISTICS_INCREMENTAL  EQUAL  on_off
    /// 	 | ONLINE  EQUAL  online_value
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public abstract partial class AstRebuildIndexOption : AstBnfRule
    {
        
        protected static string _rule = @"rebuild_index_option
	 : PAD_INDEX  EQUAL  on_off
	 | FILLFACTOR  EQUAL  decimal
	 | SORT_IN_TEMPDB  EQUAL  on_off
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | STATISTICS_INCREMENTAL  EQUAL  on_off
	 | ONLINE  EQUAL  online_value
	 | RESUMABLE  EQUAL  on_off
	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
	 | ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?";
        
        /// <summary>
        /// rebuild_index_option : PAD_INDEX EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption1 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : FILLFACTOR EQUAL decimal 
        /// </summary>
        public partial class AstRebuildIndexOption2 : AstRebuildIndexOption
        {
            
            private AstDecimal _decimal;
            
            internal AstRebuildIndexOption2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption3 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : IGNORE_DUP_KEY EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption4 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : STATISTICS_NORECOMPUTE EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption5 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : STATISTICS_INCREMENTAL EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption6 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstRebuildIndexOption7 : AstRebuildIndexOption
        {
            
            private AstOnlineValue _onlineValue;
            
            internal AstRebuildIndexOption7(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : RESUMABLE EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption8 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : MAX_DURATION EQUAL times=decimal MINUTES? 
        /// </summary>
        public partial class AstRebuildIndexOption9 : AstRebuildIndexOption
        {
            
            private AstDecimal _times;
            
            internal AstRebuildIndexOption9(ParserRuleContext ctx, AstDecimal times) : 
                    base(ctx)
            {
                _times = times;
            }
            
            public virtual AstDecimal Times
            {
                get
                {
                    return _times;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption10 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption10(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : ALLOW_PAGE_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstRebuildIndexOption11 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRebuildIndexOption11(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstRebuildIndexOption12 : AstRebuildIndexOption
        {
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstRebuildIndexOption12(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public partial class AstRebuildIndexOption13 : AstRebuildIndexOption
        {
            
            private AstDatacompressionMode _datacompressionMode;
            
            private AstOnPartitions _onPartitions;
            
            internal AstRebuildIndexOption13(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _datacompressionMode = datacompressionMode;
                _onPartitions = onPartitions;
            }
            
            public virtual AstDatacompressionMode DatacompressionMode
            {
                get
                {
                    return _datacompressionMode;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// rebuild_index_option : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstRebuildIndexOption14 : AstRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            private AstOnPartitions _onPartitions;
            
            internal AstRebuildIndexOption14(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRebuildIndexOption(this);
            }
        }
        

        
        internal AstRebuildIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRebuildIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRebuildIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRebuildIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRebuildIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption5(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption6(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption7(ctx, ((AstOnlineValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption8(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption9(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption10(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption11(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption12(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 3))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption13(ctx, ((AstDatacompressionMode)(list[0])), ((AstOnPartitions)(list[1])));
            }
            if ((index == 3))
            {
                return new AstRebuildIndexOption.AstRebuildIndexOption14(ctx, ((AstOnOff)(list[0])), ((AstOnPartitions)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatacompressionMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 13;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 14;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnlineValue), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 12;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstRebuildIndexOption.AstRebuildIndexOption1 result = new AstRebuildIndexOption.AstRebuildIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstRebuildIndexOption.AstRebuildIndexOption2 result = new AstRebuildIndexOption.AstRebuildIndexOption2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstRebuildIndexOption.AstRebuildIndexOption7 result = new AstRebuildIndexOption.AstRebuildIndexOption7(ctx, onlineValue);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            AstRebuildIndexOption.AstRebuildIndexOption13 result = new AstRebuildIndexOption.AstRebuildIndexOption13(ctx, datacompressionMode, onPartitions);
            return result;
        }
        
        /// <summary>
        /// rebuild_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstRebuildIndexOption RebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstRebuildIndexOption.AstRebuildIndexOption14 result = new AstRebuildIndexOption.AstRebuildIndexOption14(ctx, onOff, onPartitions);
            return result;
        }
    }
    
    /// <summary>
    /// online_value
    /// 	 : ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)?
    /// 	 | OFF
    /// </summary>
    public abstract partial class AstOnlineValue : AstBnfRule
    {
        
        protected static string _rule = "online_value\r\n\t : ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)?\r\n\t | OFF";
        
        /// <summary>
        /// online_value : ON LR_BRACKET low_priority_lock_wait RR_BRACKET 
        /// </summary>
        public partial class AstOnlineValue1 : AstOnlineValue
        {
            
            private AstLowPriorityLockWait _lowPriorityLockWait;
            
            internal AstOnlineValue1(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait) : 
                    base(ctx)
            {
                _lowPriorityLockWait = lowPriorityLockWait;
            }
            
            public virtual AstLowPriorityLockWait LowPriorityLockWait
            {
                get
                {
                    return _lowPriorityLockWait;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnlineValue(this);
            }
        }
        /// <summary>
        /// online_value : OFF 
        /// </summary>
        public partial class AstOnlineValue2 : AstOnlineValue
        {
            
            internal AstOnlineValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnlineValue(this);
            }
        }
        

        
        internal AstOnlineValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnlineValue(Position p) : 
                base(p)
        {
        }
        
        internal AstOnlineValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstOnlineValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstOnlineValue.Resolve(list);
            if ((index == 2))
            {
                return new AstOnlineValue.AstOnlineValue1(ctx, ((AstLowPriorityLockWait)(list[0])));
            }
            if ((index == 1))
            {
                return new AstOnlineValue.AstOnlineValue2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLowPriorityLockWait), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// online_value : 
        ///    ON ( low_priority_lock_wait ) 
        /// </summary>
        public static AstOnlineValue OnlineValue(ParserRuleContext ctx, AstLowPriorityLockWait lowPriorityLockWait)
        {
            AstOnlineValue.AstOnlineValue1 result = new AstOnlineValue.AstOnlineValue1(ctx, lowPriorityLockWait);
            return result;
        }
        
        /// <summary>
        /// online_value : 
        ///    OFF 
        /// </summary>
        public static AstOnlineValue OnlineValue(ParserRuleContext ctx)
        {
            AstOnlineValue.AstOnlineValue2 result = new AstOnlineValue.AstOnlineValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_option
    /// 	 : SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | ONLINE  EQUAL  online_value
    /// </summary>
    public abstract partial class AstSinglePartitionRebuildIndexOption : AstBnfRule
    {
        
        protected static string _rule = @"single_partition_rebuild_index_option
	 : SORT_IN_TEMPDB  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | RESUMABLE  EQUAL  on_off
	 | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
	 | ONLINE  EQUAL  online_value";
        
        /// <summary>
        /// single_partition_rebuild_index_option : SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption1 : AstSinglePartitionRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSinglePartitionRebuildIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption2 : AstSinglePartitionRebuildIndexOption
        {
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstSinglePartitionRebuildIndexOption2(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : RESUMABLE EQUAL on_off 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption3 : AstSinglePartitionRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSinglePartitionRebuildIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption4 : AstSinglePartitionRebuildIndexOption
        {
            
            private AstDatacompressionMode _datacompressionMode;
            
            private AstOnPartitions _onPartitions;
            
            internal AstSinglePartitionRebuildIndexOption4(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _datacompressionMode = datacompressionMode;
                _onPartitions = onPartitions;
            }
            
            public virtual AstDatacompressionMode DatacompressionMode
            {
                get
                {
                    return _datacompressionMode;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption5 : AstSinglePartitionRebuildIndexOption
        {
            
            private AstOnOff _onOff;
            
            private AstOnPartitions _onPartitions;
            
            internal AstSinglePartitionRebuildIndexOption5(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        /// <summary>
        /// single_partition_rebuild_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstSinglePartitionRebuildIndexOption6 : AstSinglePartitionRebuildIndexOption
        {
            
            private AstOnlineValue _onlineValue;
            
            internal AstSinglePartitionRebuildIndexOption6(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSinglePartitionRebuildIndexOption(this);
            }
        }
        

        
        internal AstSinglePartitionRebuildIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSinglePartitionRebuildIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSinglePartitionRebuildIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSinglePartitionRebuildIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 3))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4(ctx, ((AstDatacompressionMode)(list[0])), ((AstOnPartitions)(list[1])));
            }
            if ((index == 3))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5(ctx, ((AstOnOff)(list[0])), ((AstOnPartitions)(list[1])));
            }
            if ((index == 2))
            {
                return new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6(ctx, ((AstOnlineValue)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatacompressionMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnlineValue), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption2(ctx, maxDegreeOfParallelism);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_mode on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstDatacompressionMode datacompressionMode, AstOnPartitions onPartitions)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption4(ctx, datacompressionMode, onPartitions);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption5(ctx, onOff, onPartitions);
            return result;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstSinglePartitionRebuildIndexOption SinglePartitionRebuildIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6 result = new AstSinglePartitionRebuildIndexOption.AstSinglePartitionRebuildIndexOption6(ctx, onlineValue);
            return result;
        }
    }
    
    /// <summary>
    /// partition_nums
    /// 	 : partition_number = decimal  (TO  to_partition_number = decimal)?
    /// </summary>
    public partial class AstPartitionNums : AstBnfRule
    {
        
        protected static string _rule = "partition_nums\r\n\t : partition_number = decimal  (TO  to_partition_number = decima" +
            "l)?";
        
        internal AstPartitionNums(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPartitionNums(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartitionNums(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstPartitionNums(ParserRuleContext ctx, AstDecimal partitionNumber, AstDecimal toPartitionNumber) : 
                base(ctx)
        {
            _partitionNumber = partitionNumber;
            _toPartitionNumber = toPartitionNumber;
        }
        
        public virtual AstDecimal _partitionNumber
        {
            get
            {
                return _partitionNumber;
            }
        }
        
        public virtual AstDecimal _toPartitionNumber
        {
            get
            {
                return _toPartitionNumber;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionNums(this);
        }
        
        /// <summary>
        /// partition_nums : 
        ///    partition_number=decimal TO to_partition_number=decimal 
        /// </summary>
        public static AstPartitionNums PartitionNums(ParserRuleContext ctx, AstDecimal partitionNumber, AstDecimal toPartitionNumber)
        {
            AstPartitionNums result = new AstPartitionNums(ctx, partitionNumber, toPartitionNumber);
            return result;
        }
    }
    
    /// <summary>
    /// columnstore_index_option
    /// 	 : DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | ONLINE  EQUAL  online = on_off
    /// 	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
    /// 	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
    /// </summary>
    public abstract partial class AstColumnstoreIndexOption : AstBnfRule
    {
        
        protected static string _rule = @"columnstore_index_option
	 : DROP_EXISTING  EQUAL  drop_existing = on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | ONLINE  EQUAL  online = on_off
	 | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
	 | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?";
        
        /// <summary>
        /// columnstore_index_option : DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public partial class AstColumnstoreIndexOption1 : AstColumnstoreIndexOption
        {
            
            private AstOnOff _dropExisting;
            
            internal AstColumnstoreIndexOption1(ParserRuleContext ctx, AstOnOff dropExisting) : 
                    base(ctx)
            {
                _dropExisting = dropExisting;
            }
            
            public virtual AstOnOff DropExisting
            {
                get
                {
                    return _dropExisting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstColumnstoreIndexOption2 : AstColumnstoreIndexOption
        {
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstColumnstoreIndexOption2(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : ONLINE EQUAL online=on_off 
        /// </summary>
        public partial class AstColumnstoreIndexOption3 : AstColumnstoreIndexOption
        {
            
            private AstOnOff _online;
            
            internal AstColumnstoreIndexOption3(ParserRuleContext ctx, AstOnOff online) : 
                    base(ctx)
            {
                _online = online;
            }
            
            public virtual AstOnOff Online
            {
                get
                {
                    return _online;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : COMPRESSION_DELAY EQUAL delay=decimal MINUTES? 
        /// </summary>
        public partial class AstColumnstoreIndexOption4 : AstColumnstoreIndexOption
        {
            
            private AstDecimal _delay;
            
            internal AstColumnstoreIndexOption4(ParserRuleContext ctx, AstDecimal delay) : 
                    base(ctx)
            {
                _delay = delay;
            }
            
            public virtual AstDecimal Delay
            {
                get
                {
                    return _delay;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        /// <summary>
        /// columnstore_index_option : DATA_COMPRESSION EQUAL datacompression_column_mode on_partitions? 
        /// </summary>
        public partial class AstColumnstoreIndexOption5 : AstColumnstoreIndexOption
        {
            
            private AstDatacompressionColumnMode _datacompressionColumnMode;
            
            private AstOnPartitions _onPartitions;
            
            internal AstColumnstoreIndexOption5(ParserRuleContext ctx, AstDatacompressionColumnMode datacompressionColumnMode, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _datacompressionColumnMode = datacompressionColumnMode;
                _onPartitions = onPartitions;
            }
            
            public virtual AstDatacompressionColumnMode DatacompressionColumnMode
            {
                get
                {
                    return _datacompressionColumnMode;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnstoreIndexOption(this);
            }
        }
        

        
        internal AstColumnstoreIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnstoreIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnstoreIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnstoreIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnstoreIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption4(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 3))
            {
                return new AstColumnstoreIndexOption.AstColumnstoreIndexOption5(ctx, ((AstDatacompressionColumnMode)(list[0])), ((AstOnPartitions)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatacompressionColumnMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(ParserRuleContext ctx, AstOnOff dropExisting)
        {
            AstColumnstoreIndexOption.AstColumnstoreIndexOption1 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption1(ctx, dropExisting);
            return result;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism)
        {
            AstColumnstoreIndexOption.AstColumnstoreIndexOption2 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption2(ctx, maxDegreeOfParallelism);
            return result;
        }
        
        /// <summary>
        /// columnstore_index_option : 
        ///    DATA_COMPRESSION EQUAL datacompression_column_mode on_partitions? 
        /// </summary>
        public static AstColumnstoreIndexOption ColumnstoreIndexOption(ParserRuleContext ctx, AstDatacompressionColumnMode datacompressionColumnMode, AstOnPartitions onPartitions)
        {
            AstColumnstoreIndexOption.AstColumnstoreIndexOption5 result = new AstColumnstoreIndexOption.AstColumnstoreIndexOption5(ctx, datacompressionColumnMode, onPartitions);
            return result;
        }
    }
    
    /// <summary>
    /// xml_index_option
    /// 	 : PAD_INDEX  EQUAL  pad_index = on_off
    /// 	 | FILLFACTOR  EQUAL  fillfactor = decimal
    /// 	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
    /// 	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
    /// 	 | DROP_EXISTING  EQUAL  drop_existing = on_off
    /// 	 | ONLINE  EQUAL  online_value
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | XML_COMPRESSION  EQUAL  xml_compression = on_off
    /// </summary>
    public abstract partial class AstXmlIndexOption : AstBnfRule
    {
        
        protected static string _rule = @"xml_index_option
	 : PAD_INDEX  EQUAL  pad_index = on_off
	 | FILLFACTOR  EQUAL  fillfactor = decimal
	 | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off
	 | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off
	 | DROP_EXISTING  EQUAL  drop_existing = on_off
	 | ONLINE  EQUAL  online_value
	 | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | XML_COMPRESSION  EQUAL  xml_compression = on_off";
        
        /// <summary>
        /// xml_index_option : PAD_INDEX EQUAL pad_index=on_off 
        /// </summary>
        public partial class AstXmlIndexOption1 : AstXmlIndexOption
        {
            
            private AstOnOff _padIndex;
            
            internal AstXmlIndexOption1(ParserRuleContext ctx, AstOnOff padIndex) : 
                    base(ctx)
            {
                _padIndex = padIndex;
            }
            
            public virtual AstOnOff PadIndex
            {
                get
                {
                    return _padIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : FILLFACTOR EQUAL fillfactor=decimal 
        /// </summary>
        public partial class AstXmlIndexOption2 : AstXmlIndexOption
        {
            
            private AstDecimal _fillfactor;
            
            internal AstXmlIndexOption2(ParserRuleContext ctx, AstDecimal fillfactor) : 
                    base(ctx)
            {
                _fillfactor = fillfactor;
            }
            
            public virtual AstDecimal Fillfactor
            {
                get
                {
                    return _fillfactor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : SORT_IN_TEMPDB EQUAL sort_in_tempdb=on_off 
        /// </summary>
        public partial class AstXmlIndexOption3 : AstXmlIndexOption
        {
            
            private AstOnOff _sortInTempdb;
            
            internal AstXmlIndexOption3(ParserRuleContext ctx, AstOnOff sortInTempdb) : 
                    base(ctx)
            {
                _sortInTempdb = sortInTempdb;
            }
            
            public virtual AstOnOff SortInTempdb
            {
                get
                {
                    return _sortInTempdb;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : IGNORE_DUP_KEY EQUAL ignore_dup_key=on_off 
        /// </summary>
        public partial class AstXmlIndexOption4 : AstXmlIndexOption
        {
            
            private AstOnOff _ignoreDupKey;
            
            internal AstXmlIndexOption4(ParserRuleContext ctx, AstOnOff ignoreDupKey) : 
                    base(ctx)
            {
                _ignoreDupKey = ignoreDupKey;
            }
            
            public virtual AstOnOff IgnoreDupKey
            {
                get
                {
                    return _ignoreDupKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : DROP_EXISTING EQUAL drop_existing=on_off 
        /// </summary>
        public partial class AstXmlIndexOption5 : AstXmlIndexOption
        {
            
            private AstOnOff _dropExisting;
            
            internal AstXmlIndexOption5(ParserRuleContext ctx, AstOnOff dropExisting) : 
                    base(ctx)
            {
                _dropExisting = dropExisting;
            }
            
            public virtual AstOnOff DropExisting
            {
                get
                {
                    return _dropExisting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstXmlIndexOption6 : AstXmlIndexOption
        {
            
            private AstOnlineValue _onlineValue;
            
            internal AstXmlIndexOption6(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ALLOW_ROW_LOCKS EQUAL allow_row_loks=on_off 
        /// </summary>
        public partial class AstXmlIndexOption7 : AstXmlIndexOption
        {
            
            private AstOnOff _allowRowLoks;
            
            internal AstXmlIndexOption7(ParserRuleContext ctx, AstOnOff allowRowLoks) : 
                    base(ctx)
            {
                _allowRowLoks = allowRowLoks;
            }
            
            public virtual AstOnOff AllowRowLoks
            {
                get
                {
                    return _allowRowLoks;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : ALLOW_PAGE_LOCKS EQUAL allow_page_locks=on_off 
        /// </summary>
        public partial class AstXmlIndexOption8 : AstXmlIndexOption
        {
            
            private AstOnOff _allowPageLocks;
            
            internal AstXmlIndexOption8(ParserRuleContext ctx, AstOnOff allowPageLocks) : 
                    base(ctx)
            {
                _allowPageLocks = allowPageLocks;
            }
            
            public virtual AstOnOff AllowPageLocks
            {
                get
                {
                    return _allowPageLocks;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstXmlIndexOption9 : AstXmlIndexOption
        {
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstXmlIndexOption9(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        /// <summary>
        /// xml_index_option : XML_COMPRESSION EQUAL xml_compression=on_off 
        /// </summary>
        public partial class AstXmlIndexOption10 : AstXmlIndexOption
        {
            
            private AstOnOff _xmlCompression;
            
            internal AstXmlIndexOption10(ParserRuleContext ctx, AstOnOff xmlCompression) : 
                    base(ctx)
            {
                _xmlCompression = xmlCompression;
            }
            
            public virtual AstOnOff XmlCompression
            {
                get
                {
                    return _xmlCompression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlIndexOption(this);
            }
        }
        

        
        internal AstXmlIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption5(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption6(ctx, ((AstOnlineValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption7(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption8(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption9(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlIndexOption.AstXmlIndexOption10(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnlineValue), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 10;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    PAD_INDEX EQUAL pad_index=on_off 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(ParserRuleContext ctx, AstOnOff padIndex)
        {
            AstXmlIndexOption.AstXmlIndexOption1 result = new AstXmlIndexOption.AstXmlIndexOption1(ctx, padIndex);
            return result;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    FILLFACTOR EQUAL fillfactor=decimal 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(ParserRuleContext ctx, AstDecimal fillfactor)
        {
            AstXmlIndexOption.AstXmlIndexOption2 result = new AstXmlIndexOption.AstXmlIndexOption2(ctx, fillfactor);
            return result;
        }
        
        /// <summary>
        /// xml_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstXmlIndexOption XmlIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstXmlIndexOption.AstXmlIndexOption6 result = new AstXmlIndexOption.AstXmlIndexOption6(ctx, onlineValue);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_declaration_arguments
    /// 	 : procedure_params
    /// 	 | LR_BRACKET  procedure_params  RR_BRACKET
    /// </summary>
    public abstract partial class AstProcedureDeclarationArguments : AstBnfRule
    {
        
        protected static string _rule = "procedure_declaration_arguments\r\n\t : procedure_params\r\n\t | LR_BRACKET  procedure_" +
            "params  RR_BRACKET";
        
        /// <summary>
        /// procedure_declaration_arguments : procedure_params 
        /// </summary>
        public partial class AstProcedureDeclarationArguments1 : AstProcedureDeclarationArguments
        {
            
            private AstProcedureParams _procedureParams;
            
            internal AstProcedureDeclarationArguments1(ParserRuleContext ctx, AstProcedureParams procedureParams) : 
                    base(ctx)
            {
                _procedureParams = procedureParams;
            }
            
            public virtual AstProcedureParams ProcedureParams
            {
                get
                {
                    return _procedureParams;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclarationArguments(this);
            }
        }
        /// <summary>
        /// procedure_declaration_arguments : LR_BRACKET procedure_params RR_BRACKET 
        /// </summary>
        public partial class AstProcedureDeclarationArguments2 : AstProcedureDeclarationArguments
        {
            
            private AstProcedureParams _procedureParams;
            
            internal AstProcedureDeclarationArguments2(ParserRuleContext ctx, AstProcedureParams procedureParams) : 
                    base(ctx)
            {
                _procedureParams = procedureParams;
            }
            
            public virtual AstProcedureParams ProcedureParams
            {
                get
                {
                    return _procedureParams;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclarationArguments(this);
            }
        }
        

        
        internal AstProcedureDeclarationArguments(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureDeclarationArguments(Position p) : 
                base(p)
        {
        }
        
        internal AstProcedureDeclarationArguments(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstProcedureDeclarationArguments Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstProcedureDeclarationArguments.Resolve(list);
            if ((index == 2))
            {
                return new AstProcedureDeclarationArguments.AstProcedureDeclarationArguments1(ctx, ((AstProcedureParams)(list[0])));
            }
            if ((index == 2))
            {
                return new AstProcedureDeclarationArguments.AstProcedureDeclarationArguments2(ctx, ((AstProcedureParams)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstProcedureParams), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstProcedureParams), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// procedure_declaration_arguments : 
        ///    procedure_params 
        /// </summary>
        public static AstProcedureDeclarationArguments ProcedureDeclarationArguments(ParserRuleContext ctx, AstProcedureParams procedureParams)
        {
            AstProcedureDeclarationArguments.AstProcedureDeclarationArguments1 result = new AstProcedureDeclarationArguments.AstProcedureDeclarationArguments1(ctx, procedureParams);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_declaration
    /// 	 : procedure_declaration_create
    /// 	 | ALTER
    /// </summary>
    public abstract partial class AstProcedureDeclaration : AstBnfRule
    {
        
        protected static string _rule = "procedure_declaration\r\n\t : procedure_declaration_create\r\n\t | ALTER";
        
        /// <summary>
        /// procedure_declaration : procedure_declaration_create 
        /// </summary>
        public partial class AstProcedureDeclaration1 : AstProcedureDeclaration
        {
            
            private AstProcedureDeclarationCreate _procedureDeclarationCreate;
            
            internal AstProcedureDeclaration1(ParserRuleContext ctx, AstProcedureDeclarationCreate procedureDeclarationCreate) : 
                    base(ctx)
            {
                _procedureDeclarationCreate = procedureDeclarationCreate;
            }
            
            public virtual AstProcedureDeclarationCreate ProcedureDeclarationCreate
            {
                get
                {
                    return _procedureDeclarationCreate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclaration(this);
            }
        }
        /// <summary>
        /// procedure_declaration : ALTER 
        /// </summary>
        public partial class AstProcedureDeclaration2 : AstProcedureDeclaration
        {
            
            internal AstProcedureDeclaration2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureDeclaration(this);
            }
        }
        

        
        internal AstProcedureDeclaration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureDeclaration(Position p) : 
                base(p)
        {
        }
        
        internal AstProcedureDeclaration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstProcedureDeclaration Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstProcedureDeclaration.Resolve(list);
            if ((index == 2))
            {
                return new AstProcedureDeclaration.AstProcedureDeclaration1(ctx, ((AstProcedureDeclarationCreate)(list[0])));
            }
            if ((index == 1))
            {
                return new AstProcedureDeclaration.AstProcedureDeclaration2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstProcedureDeclarationCreate), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// procedure_declaration : 
        ///    procedure_declaration_create 
        /// </summary>
        public static AstProcedureDeclaration ProcedureDeclaration(ParserRuleContext ctx, AstProcedureDeclarationCreate procedureDeclarationCreate)
        {
            AstProcedureDeclaration.AstProcedureDeclaration1 result = new AstProcedureDeclaration.AstProcedureDeclaration1(ctx, procedureDeclarationCreate);
            return result;
        }
        
        /// <summary>
        /// procedure_declaration : 
        ///    ALTER 
        /// </summary>
        public static AstProcedureDeclaration ProcedureDeclaration(ParserRuleContext ctx)
        {
            AstProcedureDeclaration.AstProcedureDeclaration2 result = new AstProcedureDeclaration.AstProcedureDeclaration2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_declaration_create
    /// 	 : CREATE  (OR  alter_replace)?
    /// </summary>
    public partial class AstProcedureDeclarationCreate : AstBnfRule
    {
        
        protected static string _rule = "procedure_declaration_create\r\n\t : CREATE  (OR  alter_replace)?";
        
        internal AstProcedureDeclarationCreate(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstProcedureDeclarationCreate(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstProcedureDeclarationCreate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstProcedureDeclarationCreate(ParserRuleContext ctx, AstAlterReplace alterReplace) : 
                base(ctx)
        {
            _alterReplace = alterReplace;
        }
        
        public virtual AstAlterReplace _alterReplace
        {
            get
            {
                return _alterReplace;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureDeclarationCreate(this);
        }
        
        /// <summary>
        /// procedure_declaration_create : 
        ///    CREATE OR alter_replace 
        /// </summary>
        public static AstProcedureDeclarationCreate ProcedureDeclarationCreate(ParserRuleContext ctx, AstAlterReplace alterReplace)
        {
            AstProcedureDeclarationCreate result = new AstProcedureDeclarationCreate(ctx, alterReplace);
            return result;
        }
    }
    
    /// <summary>
    /// replication_alias
    /// 	 : as_external_name
    /// 	 | sql_clause
    /// </summary>
    public abstract partial class AstReplicationAlias : AstBnfRule
    {
        
        protected static string _rule = "replication_alias\r\n\t : as_external_name\r\n\t | sql_clause";
        
        /// <summary>
        /// replication_alias : as_external_name 
        /// </summary>
        public partial class AstReplicationAlias1 : AstReplicationAlias
        {
            
            private AstAsExternalName _asExternalName;
            
            internal AstReplicationAlias1(ParserRuleContext ctx, AstAsExternalName asExternalName) : 
                    base(ctx)
            {
                _asExternalName = asExternalName;
            }
            
            public virtual AstAsExternalName AsExternalName
            {
                get
                {
                    return _asExternalName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReplicationAlias(this);
            }
        }
        /// <summary>
        /// replication_alias : sql_clause 
        /// </summary>
        public partial class AstReplicationAlias2 : AstReplicationAlias
        {
            
            private AstSqlClause _sqlClause;
            
            internal AstReplicationAlias2(ParserRuleContext ctx, AstSqlClause sqlClause) : 
                    base(ctx)
            {
                _sqlClause = sqlClause;
            }
            
            public virtual AstSqlClause SqlClause
            {
                get
                {
                    return _sqlClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitReplicationAlias(this);
            }
        }
        

        
        internal AstReplicationAlias(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstReplicationAlias(Position p) : 
                base(p)
        {
        }
        
        internal AstReplicationAlias(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstReplicationAlias Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstReplicationAlias.Resolve(list);
            if ((index == 2))
            {
                return new AstReplicationAlias.AstReplicationAlias1(ctx, ((AstAsExternalName)(list[0])));
            }
            if ((index == 2))
            {
                return new AstReplicationAlias.AstReplicationAlias2(ctx, ((AstSqlClause)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAsExternalName), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSqlClause), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// replication_alias : 
        ///    as_external_name 
        /// </summary>
        public static AstReplicationAlias ReplicationAlias(ParserRuleContext ctx, AstAsExternalName asExternalName)
        {
            AstReplicationAlias.AstReplicationAlias1 result = new AstReplicationAlias.AstReplicationAlias1(ctx, asExternalName);
            return result;
        }
        
        /// <summary>
        /// replication_alias : 
        ///    sql_clause 
        /// </summary>
        public static AstReplicationAlias ReplicationAlias(ParserRuleContext ctx, AstSqlClause sqlClause)
        {
            AstReplicationAlias.AstReplicationAlias2 result = new AstReplicationAlias.AstReplicationAlias2(ctx, sqlClause);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter_trigger
    /// 	 : create_or_alter_dml_trigger
    /// 	 | create_or_alter_ddl_trigger
    /// </summary>
    public abstract partial class AstCreateOrAlterTrigger : AstBnfRule
    {
        
        protected static string _rule = "create_or_alter_trigger\r\n\t : create_or_alter_dml_trigger\r\n\t | create_or_alter_ddl" +
            "_trigger";
        
        /// <summary>
        /// create_or_alter_trigger : create_or_alter_dml_trigger 
        /// </summary>
        public partial class AstCreateOrAlterTrigger1 : AstCreateOrAlterTrigger
        {
            
            private AstCreateOrAlterDmlTrigger _createOrAlterDmlTrigger;
            
            internal AstCreateOrAlterTrigger1(ParserRuleContext ctx, AstCreateOrAlterDmlTrigger createOrAlterDmlTrigger) : 
                    base(ctx)
            {
                _createOrAlterDmlTrigger = createOrAlterDmlTrigger;
            }
            
            public virtual AstCreateOrAlterDmlTrigger CreateOrAlterDmlTrigger
            {
                get
                {
                    return _createOrAlterDmlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlterTrigger(this);
            }
        }
        /// <summary>
        /// create_or_alter_trigger : create_or_alter_ddl_trigger 
        /// </summary>
        public partial class AstCreateOrAlterTrigger2 : AstCreateOrAlterTrigger
        {
            
            private AstCreateOrAlterDdlTrigger _createOrAlterDdlTrigger;
            
            internal AstCreateOrAlterTrigger2(ParserRuleContext ctx, AstCreateOrAlterDdlTrigger createOrAlterDdlTrigger) : 
                    base(ctx)
            {
                _createOrAlterDdlTrigger = createOrAlterDdlTrigger;
            }
            
            public virtual AstCreateOrAlterDdlTrigger CreateOrAlterDdlTrigger
            {
                get
                {
                    return _createOrAlterDdlTrigger;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlterTrigger(this);
            }
        }
        

        
        internal AstCreateOrAlterTrigger(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlterTrigger(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlterTrigger(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateOrAlterTrigger Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateOrAlterTrigger.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1(ctx, ((AstCreateOrAlterDmlTrigger)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2(ctx, ((AstCreateOrAlterDdlTrigger)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterDmlTrigger), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateOrAlterDdlTrigger), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_or_alter_trigger : 
        ///    create_or_alter_dml_trigger 
        /// </summary>
        public static AstCreateOrAlterTrigger CreateOrAlterTrigger(ParserRuleContext ctx, AstCreateOrAlterDmlTrigger createOrAlterDmlTrigger)
        {
            AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1 result = new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger1(ctx, createOrAlterDmlTrigger);
            return result;
        }
        
        /// <summary>
        /// create_or_alter_trigger : 
        ///    create_or_alter_ddl_trigger 
        /// </summary>
        public static AstCreateOrAlterTrigger CreateOrAlterTrigger(ParserRuleContext ctx, AstCreateOrAlterDdlTrigger createOrAlterDdlTrigger)
        {
            AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2 result = new AstCreateOrAlterTrigger.AstCreateOrAlterTrigger2(ctx, createOrAlterDdlTrigger);
            return result;
        }
    }
    
    /// <summary>
    /// create_or_alter
    /// 	 : CREATE  (OR  ALTER)?
    /// 	 | ALTER
    /// </summary>
    public abstract partial class AstCreateOrAlter : AstBnfRule
    {
        
        protected static string _rule = "create_or_alter\r\n\t : CREATE  (OR  ALTER)?\r\n\t | ALTER";
        
        /// <summary>
        /// create_or_alter : CREATE OR ALTER 
        /// </summary>
        public partial class AstCreateOrAlter1 : AstCreateOrAlter
        {
            
            internal AstCreateOrAlter1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlter(this);
            }
        }
        /// <summary>
        /// create_or_alter : ALTER 
        /// </summary>
        public partial class AstCreateOrAlter2 : AstCreateOrAlter
        {
            
            internal AstCreateOrAlter2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateOrAlter(this);
            }
        }
        

        
        internal AstCreateOrAlter(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateOrAlter(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateOrAlter(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateOrAlter Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateOrAlter.Resolve(list);
            if ((index == 1))
            {
                return new AstCreateOrAlter.AstCreateOrAlter1(ctx);
            }
            if ((index == 1))
            {
                return new AstCreateOrAlter.AstCreateOrAlter2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// create_or_alter : 
        ///    CREATE OR ALTER 
        /// </summary>
        public static AstCreateOrAlter CreateOrAlter(ParserRuleContext ctx)
        {
            AstCreateOrAlter.AstCreateOrAlter1 result = new AstCreateOrAlter.AstCreateOrAlter1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// for_after_instead
    /// 	 : FOR
    /// 	 | AFTER
    /// 	 | INSTEAD  OF
    /// </summary>
    public abstract partial class AstForAfterInstead : AstBnfRule
    {
        
        protected static string _rule = "for_after_instead\r\n\t : FOR\r\n\t | AFTER\r\n\t | INSTEAD  OF";
        
        /// <summary>
        /// for_after_instead : FOR 
        /// </summary>
        public partial class AstForAfterInstead1 : AstForAfterInstead
        {
            
            internal AstForAfterInstead1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        /// <summary>
        /// for_after_instead : AFTER 
        /// </summary>
        public partial class AstForAfterInstead2 : AstForAfterInstead
        {
            
            internal AstForAfterInstead2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        /// <summary>
        /// for_after_instead : INSTEAD OF 
        /// </summary>
        public partial class AstForAfterInstead3 : AstForAfterInstead
        {
            
            internal AstForAfterInstead3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForAfterInstead(this);
            }
        }
        

        
        internal AstForAfterInstead(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstForAfterInstead(Position p) : 
                base(p)
        {
        }
        
        internal AstForAfterInstead(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstForAfterInstead Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstForAfterInstead.Resolve(list);
            if ((index == 1))
            {
                return new AstForAfterInstead.AstForAfterInstead1(ctx);
            }
            if ((index == 1))
            {
                return new AstForAfterInstead.AstForAfterInstead2(ctx);
            }
            if ((index == 1))
            {
                return new AstForAfterInstead.AstForAfterInstead3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// for_after_instead : 
        ///    FOR 
        /// </summary>
        public static AstForAfterInstead ForAfterInstead(ParserRuleContext ctx)
        {
            AstForAfterInstead.AstForAfterInstead1 result = new AstForAfterInstead.AstForAfterInstead1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// dml_trigger_option
    /// 	 : ENCRYPTION
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstDmlTriggerOption : AstBnfRule
    {
        
        protected static string _rule = "dml_trigger_option\r\n\t : ENCRYPTION\r\n\t | execute_clause";
        
        /// <summary>
        /// dml_trigger_option : ENCRYPTION 
        /// </summary>
        public partial class AstDmlTriggerOption1 : AstDmlTriggerOption
        {
            
            internal AstDmlTriggerOption1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlTriggerOption(this);
            }
        }
        /// <summary>
        /// dml_trigger_option : execute_clause 
        /// </summary>
        public partial class AstDmlTriggerOption2 : AstDmlTriggerOption
        {
            
            private AstExecuteClause _executeClause;
            
            internal AstDmlTriggerOption2(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDmlTriggerOption(this);
            }
        }
        

        
        internal AstDmlTriggerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDmlTriggerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstDmlTriggerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDmlTriggerOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDmlTriggerOption.Resolve(list);
            if ((index == 1))
            {
                return new AstDmlTriggerOption.AstDmlTriggerOption1(ctx);
            }
            if ((index == 2))
            {
                return new AstDmlTriggerOption.AstDmlTriggerOption2(ctx, ((AstExecuteClause)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// dml_trigger_option : 
        ///    ENCRYPTION 
        /// </summary>
        public static AstDmlTriggerOption DmlTriggerOption(ParserRuleContext ctx)
        {
            AstDmlTriggerOption.AstDmlTriggerOption1 result = new AstDmlTriggerOption.AstDmlTriggerOption1(ctx);
            return result;
        }
        
        /// <summary>
        /// dml_trigger_option : 
        ///    execute_clause 
        /// </summary>
        public static AstDmlTriggerOption DmlTriggerOption(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstDmlTriggerOption.AstDmlTriggerOption2 result = new AstDmlTriggerOption.AstDmlTriggerOption2(ctx, executeClause);
            return result;
        }
    }
    
    /// <summary>
    /// procedure_option
    /// 	 : procedure_option_enum
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstProcedureOption : AstBnfRule
    {
        
        protected static string _rule = "procedure_option\r\n\t : procedure_option_enum\r\n\t | execute_clause";
        
        /// <summary>
        /// procedure_option : procedure_option_enum 
        /// </summary>
        public partial class AstProcedureOption1 : AstProcedureOption
        {
            
            private AstProcedureOptionEnum _procedureOptionEnum;
            
            internal AstProcedureOption1(ParserRuleContext ctx, AstProcedureOptionEnum procedureOptionEnum) : 
                    base(ctx)
            {
                _procedureOptionEnum = procedureOptionEnum;
            }
            
            public virtual AstProcedureOptionEnum ProcedureOptionEnum
            {
                get
                {
                    return _procedureOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureOption(this);
            }
        }
        /// <summary>
        /// procedure_option : execute_clause 
        /// </summary>
        public partial class AstProcedureOption2 : AstProcedureOption
        {
            
            private AstExecuteClause _executeClause;
            
            internal AstProcedureOption2(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitProcedureOption(this);
            }
        }
        

        
        internal AstProcedureOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstProcedureOption(Position p) : 
                base(p)
        {
        }
        
        internal AstProcedureOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstProcedureOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstProcedureOption.Resolve(list);
            if ((index == 2))
            {
                return new AstProcedureOption.AstProcedureOption1(ctx, ((AstProcedureOptionEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstProcedureOption.AstProcedureOption2(ctx, ((AstExecuteClause)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstProcedureOptionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// procedure_option : 
        ///    procedure_option_enum 
        /// </summary>
        public static AstProcedureOption ProcedureOption(ParserRuleContext ctx, AstProcedureOptionEnum procedureOptionEnum)
        {
            AstProcedureOption.AstProcedureOption1 result = new AstProcedureOption.AstProcedureOption1(ctx, procedureOptionEnum);
            return result;
        }
        
        /// <summary>
        /// procedure_option : 
        ///    execute_clause 
        /// </summary>
        public static AstProcedureOption ProcedureOption(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstProcedureOption.AstProcedureOption2 result = new AstProcedureOption.AstProcedureOption2(ctx, executeClause);
            return result;
        }
    }
    
    /// <summary>
    /// function_option
    /// 	 : function_option_enum
    /// 	 | execute_clause
    /// </summary>
    public abstract partial class AstFunctionOption : AstBnfRule
    {
        
        protected static string _rule = "function_option\r\n\t : function_option_enum\r\n\t | execute_clause";
        
        /// <summary>
        /// function_option : function_option_enum 
        /// </summary>
        public partial class AstFunctionOption1 : AstFunctionOption
        {
            
            private AstFunctionOptionEnum _functionOptionEnum;
            
            internal AstFunctionOption1(ParserRuleContext ctx, AstFunctionOptionEnum functionOptionEnum) : 
                    base(ctx)
            {
                _functionOptionEnum = functionOptionEnum;
            }
            
            public virtual AstFunctionOptionEnum FunctionOptionEnum
            {
                get
                {
                    return _functionOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionOption(this);
            }
        }
        /// <summary>
        /// function_option : execute_clause 
        /// </summary>
        public partial class AstFunctionOption2 : AstFunctionOption
        {
            
            private AstExecuteClause _executeClause;
            
            internal AstFunctionOption2(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionOption(this);
            }
        }
        

        
        internal AstFunctionOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFunctionOption(Position p) : 
                base(p)
        {
        }
        
        internal AstFunctionOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFunctionOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFunctionOption.Resolve(list);
            if ((index == 2))
            {
                return new AstFunctionOption.AstFunctionOption1(ctx, ((AstFunctionOptionEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFunctionOption.AstFunctionOption2(ctx, ((AstExecuteClause)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFunctionOptionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// function_option : 
        ///    function_option_enum 
        /// </summary>
        public static AstFunctionOption FunctionOption(ParserRuleContext ctx, AstFunctionOptionEnum functionOptionEnum)
        {
            AstFunctionOption.AstFunctionOption1 result = new AstFunctionOption.AstFunctionOption1(ctx, functionOptionEnum);
            return result;
        }
        
        /// <summary>
        /// function_option : 
        ///    execute_clause 
        /// </summary>
        public static AstFunctionOption FunctionOption(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstFunctionOption.AstFunctionOption2 result = new AstFunctionOption.AstFunctionOption2(ctx, executeClause);
            return result;
        }
    }
    
    /// <summary>
    /// statistics_with
    /// 	 : FULLSCAN
    /// 	 | SAMPLE  decimal  percent_row
    /// 	 | STATS_STREAM
    /// </summary>
    public abstract partial class AstStatisticsWith : AstBnfRule
    {
        
        protected static string _rule = "statistics_with\r\n\t : FULLSCAN\r\n\t | SAMPLE  decimal  percent_row\r\n\t | STATS_STREAM" +
            "";
        
        /// <summary>
        /// statistics_with : FULLSCAN 
        /// </summary>
        public partial class AstStatisticsWith1 : AstStatisticsWith
        {
            
            internal AstStatisticsWith1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        /// <summary>
        /// statistics_with : SAMPLE decimal percent_row 
        /// </summary>
        public partial class AstStatisticsWith2 : AstStatisticsWith
        {
            
            private AstDecimal _decimal;
            
            private AstPercentRow _percentRow;
            
            internal AstStatisticsWith2(ParserRuleContext ctx, AstDecimal @decimal, AstPercentRow percentRow) : 
                    base(ctx)
            {
                _decimal = @decimal;
                _percentRow = percentRow;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstPercentRow PercentRow
            {
                get
                {
                    return _percentRow;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        /// <summary>
        /// statistics_with : STATS_STREAM 
        /// </summary>
        public partial class AstStatisticsWith3 : AstStatisticsWith
        {
            
            internal AstStatisticsWith3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStatisticsWith(this);
            }
        }
        

        
        internal AstStatisticsWith(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStatisticsWith(Position p) : 
                base(p)
        {
        }
        
        internal AstStatisticsWith(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStatisticsWith Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStatisticsWith.Resolve(list);
            if ((index == 1))
            {
                return new AstStatisticsWith.AstStatisticsWith1(ctx);
            }
            if ((index == 3))
            {
                return new AstStatisticsWith.AstStatisticsWith2(ctx, ((AstDecimal)(list[0])), ((AstPercentRow)(list[1])));
            }
            if ((index == 1))
            {
                return new AstStatisticsWith.AstStatisticsWith3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPercentRow), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// statistics_with : 
        ///    FULLSCAN 
        /// </summary>
        public static AstStatisticsWith StatisticsWith(ParserRuleContext ctx)
        {
            AstStatisticsWith.AstStatisticsWith1 result = new AstStatisticsWith.AstStatisticsWith1(ctx);
            return result;
        }
        
        /// <summary>
        /// statistics_with : 
        ///    SAMPLE decimal percent_row 
        /// </summary>
        public static AstStatisticsWith StatisticsWith(ParserRuleContext ctx, AstDecimal @decimal, AstPercentRow percentRow)
        {
            AstStatisticsWith.AstStatisticsWith2 result = new AstStatisticsWith.AstStatisticsWith2(ctx, @decimal, percentRow);
            return result;
        }
    }
    
    /// <summary>
    /// update_statistics_option
    /// 	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
    /// 	 | RESAMPLE  on_partitions?
    /// 	 | STATS_STREAM  EQUAL  stats_stream_ = expression
    /// 	 | ROWCOUNT  EQUAL  decimal
    /// 	 | PAGECOUNT  EQUAL  decimal
    /// 	 | ALL
    /// 	 | COLUMNS
    /// 	 | INDEX
    /// 	 | NORECOMPUTE
    /// 	 | INCREMENTAL  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
    /// 	 | AUTO_DROP  EQUAL  on_off
    /// </summary>
    public abstract partial class AstUpdateStatisticsOption : AstBnfRule
    {
        
        protected static string _rule = @"update_statistics_option
	 : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
	 | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?)
	 | RESAMPLE  on_partitions?
	 | STATS_STREAM  EQUAL  stats_stream_ = expression
	 | ROWCOUNT  EQUAL  decimal
	 | PAGECOUNT  EQUAL  decimal
	 | ALL
	 | COLUMNS
	 | INDEX
	 | NORECOMPUTE
	 | INCREMENTAL  EQUAL  on_off
	 | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal
	 | AUTO_DROP  EQUAL  on_off";
        
        /// <summary>
        /// update_statistics_option : FULLSCAN COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption1 : AstUpdateStatisticsOption
        {
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : SAMPLE number=decimal percent_row COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption2 : AstUpdateStatisticsOption
        {
            
            private AstDecimal _number;
            
            private AstPercentRow _percentRow;
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption2(ParserRuleContext ctx, AstDecimal number, AstPercentRow percentRow, AstOnOff onOff) : 
                    base(ctx)
            {
                _number = number;
                _percentRow = percentRow;
                _onOff = onOff;
            }
            
            public virtual AstDecimal Number
            {
                get
                {
                    return _number;
                }
            }
            
            public virtual AstPercentRow PercentRow
            {
                get
                {
                    return _percentRow;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : RESAMPLE on_partitions? 
        /// </summary>
        public partial class AstUpdateStatisticsOption3 : AstUpdateStatisticsOption
        {
            
            private AstOnPartitions _onPartitions;
            
            internal AstUpdateStatisticsOption3(ParserRuleContext ctx, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _onPartitions = onPartitions;
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : STATS_STREAM EQUAL stats_stream_=expression 
        /// </summary>
        public partial class AstUpdateStatisticsOption4 : AstUpdateStatisticsOption
        {
            
            private AstExpression _statsStream;
            
            internal AstUpdateStatisticsOption4(ParserRuleContext ctx, AstExpression statsStream) : 
                    base(ctx)
            {
                _statsStream = statsStream;
            }
            
            public virtual AstExpression StatsStream
            {
                get
                {
                    return _statsStream;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : ROWCOUNT EQUAL decimal 
        /// </summary>
        public partial class AstUpdateStatisticsOption5 : AstUpdateStatisticsOption
        {
            
            private AstDecimal _decimal;
            
            internal AstUpdateStatisticsOption5(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : PAGECOUNT EQUAL decimal 
        /// </summary>
        public partial class AstUpdateStatisticsOption6 : AstUpdateStatisticsOption
        {
            
            private AstDecimal _decimal;
            
            internal AstUpdateStatisticsOption6(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : ALL 
        /// </summary>
        public partial class AstUpdateStatisticsOption7 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : COLUMNS 
        /// </summary>
        public partial class AstUpdateStatisticsOption8 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : INDEX 
        /// </summary>
        public partial class AstUpdateStatisticsOption9 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : NORECOMPUTE 
        /// </summary>
        public partial class AstUpdateStatisticsOption10 : AstUpdateStatisticsOption
        {
            
            internal AstUpdateStatisticsOption10(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : INCREMENTAL EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption11 : AstUpdateStatisticsOption
        {
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption11(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : MAXDOP EQUAL max_dregree_of_parallelism=decimal 
        /// </summary>
        public partial class AstUpdateStatisticsOption12 : AstUpdateStatisticsOption
        {
            
            private AstDecimal _maxDregreeOfParallelism;
            
            internal AstUpdateStatisticsOption12(ParserRuleContext ctx, AstDecimal maxDregreeOfParallelism) : 
                    base(ctx)
            {
                _maxDregreeOfParallelism = maxDregreeOfParallelism;
            }
            
            public virtual AstDecimal MaxDregreeOfParallelism
            {
                get
                {
                    return _maxDregreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        /// <summary>
        /// update_statistics_option : AUTO_DROP EQUAL on_off 
        /// </summary>
        public partial class AstUpdateStatisticsOption13 : AstUpdateStatisticsOption
        {
            
            private AstOnOff _onOff;
            
            internal AstUpdateStatisticsOption13(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateStatisticsOption(this);
            }
        }
        

        
        internal AstUpdateStatisticsOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateStatisticsOption(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateStatisticsOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateStatisticsOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateStatisticsOption.Resolve(list);
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 4))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption2(ctx, ((AstDecimal)(list[0])), ((AstPercentRow)(list[1])), ((AstOnOff)(list[2])));
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption3(ctx, ((AstOnPartitions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption4(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption5(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption6(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption7(ctx);
            }
            if ((index == 1))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption8(ctx);
            }
            if ((index == 1))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption9(ctx);
            }
            if ((index == 1))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption10(ctx);
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption11(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption12(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateStatisticsOption.AstUpdateStatisticsOption13(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPercentRow), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnPartitions), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 9;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    FULLSCAN COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption1 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    SAMPLE number=decimal percent_row COMMA? PERSIST_SAMPLE_PERCENT EQUAL on_off 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstDecimal number, AstPercentRow percentRow, AstOnOff onOff)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption2 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption2(ctx, number, percentRow, onOff);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    RESAMPLE on_partitions? 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstOnPartitions onPartitions)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption3 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption3(ctx, onPartitions);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    STATS_STREAM EQUAL stats_stream_=expression 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstExpression statsStream)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption4 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption4(ctx, statsStream);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    ROWCOUNT EQUAL decimal 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption5 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption5(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// update_statistics_option : 
        ///    ALL 
        /// </summary>
        public static AstUpdateStatisticsOption UpdateStatisticsOption(ParserRuleContext ctx)
        {
            AstUpdateStatisticsOption.AstUpdateStatisticsOption7 result = new AstUpdateStatisticsOption.AstUpdateStatisticsOption7(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// table_indices
    /// 	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | INDEX  id_  CLUSTERED  COLUMNSTORE
    /// 	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
    /// </summary>
    public abstract partial class AstTableIndices : AstBnfRule
    {
        
        protected static string _rule = @"table_indices
	 : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET
	 | INDEX  id_  CLUSTERED  COLUMNSTORE
	 | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?";
        
        /// <summary>
        /// table_indices : INDEX id_ UNIQUE? clustered? LR_BRACKET column_name_list_with_order RR_BRACKET 
        /// </summary>
        public partial class AstTableIndices1 : AstTableIndices
        {
            
            private AstId _id;
            
            private AstClustered _clustered;
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            internal AstTableIndices1(ParserRuleContext ctx, AstId id, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder) : 
                    base(ctx)
            {
                _id = id;
                _clustered = clustered;
                _columnNameListWithOrder = columnNameListWithOrder;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public virtual AstClustered Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        /// <summary>
        /// table_indices : INDEX id_ CLUSTERED COLUMNSTORE 
        /// </summary>
        public partial class AstTableIndices2 : AstTableIndices
        {
            
            private AstId _id;
            
            internal AstTableIndices2(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        /// <summary>
        /// table_indices : INDEX id_ NONCLUSTERED? COLUMNSTORE LR_BRACKET column_name_list RR_BRACKET create_table_index_options? ON group_id 
        /// </summary>
        public partial class AstTableIndices3 : AstTableIndices
        {
            
            private AstId _id;
            
            private AstColumnNameList _columnNameList;
            
            private AstCreateTableIndexOptions _createTableIndexOptions;
            
            private AstGroupId _groupId;
            
            internal AstTableIndices3(ParserRuleContext ctx, AstId id, AstColumnNameList columnNameList, AstCreateTableIndexOptions createTableIndexOptions, AstGroupId groupId) : 
                    base(ctx)
            {
                _id = id;
                _columnNameList = columnNameList;
                _createTableIndexOptions = createTableIndexOptions;
                _groupId = groupId;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public virtual AstCreateTableIndexOptions CreateTableIndexOptions
            {
                get
                {
                    return _createTableIndexOptions;
                }
            }
            
            public virtual AstGroupId GroupId
            {
                get
                {
                    return _groupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableIndices(this);
            }
        }
        

        
        internal AstTableIndices(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableIndices(Position p) : 
                base(p)
        {
        }
        
        internal AstTableIndices(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableIndices Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableIndices.Resolve(list);
            if ((index == 4))
            {
                return new AstTableIndices.AstTableIndices1(ctx, ((AstId)(list[0])), ((AstClustered)(list[1])), ((AstColumnNameListWithOrder)(list[2])));
            }
            if ((index == 2))
            {
                return new AstTableIndices.AstTableIndices2(ctx, ((AstId)(list[0])));
            }
            if ((index == 5))
            {
                return new AstTableIndices.AstTableIndices3(ctx, ((AstId)(list[0])), ((AstColumnNameList)(list[1])), ((AstCreateTableIndexOptions)(list[2])), ((AstGroupId)(list[3])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameList), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstCreateTableIndexOptions), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstGroupId), false, false))
                            {
                                return 3;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstClustered), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstColumnNameListWithOrder), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ UNIQUE? clustered? ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableIndices TableIndices(ParserRuleContext ctx, AstId id, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            AstTableIndices.AstTableIndices1 result = new AstTableIndices.AstTableIndices1(ctx, id, clustered, columnNameListWithOrder);
            return result;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ CLUSTERED COLUMNSTORE 
        /// </summary>
        public static AstTableIndices TableIndices(ParserRuleContext ctx, AstId id)
        {
            AstTableIndices.AstTableIndices2 result = new AstTableIndices.AstTableIndices2(ctx, id);
            return result;
        }
        
        /// <summary>
        /// table_indices : 
        ///    INDEX id_ NONCLUSTERED? COLUMNSTORE ( column_name_list ) create_table_index_options? ON group_id 
        /// </summary>
        public static AstTableIndices TableIndices(ParserRuleContext ctx, AstId id, AstColumnNameList columnNameList, AstCreateTableIndexOptions createTableIndexOptions, AstGroupId groupId)
        {
            AstTableIndices.AstTableIndices3 result = new AstTableIndices.AstTableIndices3(ctx, id, columnNameList, createTableIndexOptions, groupId);
            return result;
        }
    }
    
    /// <summary>
    /// tbl_option
    /// 	 : WITH  LR_BRACKET  tableoptions  RR_BRACKET
    /// 	 | tableoptions
    /// </summary>
    public abstract partial class AstTblOption : AstBnfRule
    {
        
        protected static string _rule = "tbl_option\r\n\t : WITH  LR_BRACKET  tableoptions  RR_BRACKET\r\n\t | tableoptions";
        
        /// <summary>
        /// tbl_option : WITH LR_BRACKET tableoptions RR_BRACKET 
        /// </summary>
        public partial class AstTblOption1 : AstTblOption
        {
            
            private AstTableoptions _tableoptions;
            
            internal AstTblOption1(ParserRuleContext ctx, AstTableoptions tableoptions) : 
                    base(ctx)
            {
                _tableoptions = tableoptions;
            }
            
            public virtual AstTableoptions Tableoptions
            {
                get
                {
                    return _tableoptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTblOption(this);
            }
        }
        /// <summary>
        /// tbl_option : tableoptions 
        /// </summary>
        public partial class AstTblOption2 : AstTblOption
        {
            
            private AstTableoptions _tableoptions;
            
            internal AstTblOption2(ParserRuleContext ctx, AstTableoptions tableoptions) : 
                    base(ctx)
            {
                _tableoptions = tableoptions;
            }
            
            public virtual AstTableoptions Tableoptions
            {
                get
                {
                    return _tableoptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTblOption(this);
            }
        }
        

        
        internal AstTblOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTblOption(Position p) : 
                base(p)
        {
        }
        
        internal AstTblOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTblOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTblOption.Resolve(list);
            if ((index == 2))
            {
                return new AstTblOption.AstTblOption1(ctx, ((AstTableoptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTblOption.AstTblOption2(ctx, ((AstTableoptions)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableoptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableoptions), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// tbl_option : 
        ///    WITH ( tableoptions ) 
        /// </summary>
        public static AstTblOption TblOption(ParserRuleContext ctx, AstTableoptions tableoptions)
        {
            AstTblOption.AstTblOption1 result = new AstTblOption.AstTblOption1(ctx, tableoptions);
            return result;
        }
    }
    
    /// <summary>
    /// tableoption
    /// 	 : table_opt_varname  EQUAL  table_opt_var_value
    /// 	 | tableoption_cluster_mode
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | table_distribution
    /// 	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public abstract partial class AstTableoption : AstBnfRule
    {
        
        protected static string _rule = @"tableoption
	 : table_opt_varname  EQUAL  table_opt_var_value
	 | tableoption_cluster_mode
	 | FILLFACTOR  EQUAL  decimal
	 | table_distribution
	 | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?";
        
        /// <summary>
        /// tableoption : table_opt_varname EQUAL table_opt_var_value 
        /// </summary>
        public partial class AstTableoption1 : AstTableoption
        {
            
            private AstTableOptVarname _tableOptVarname;
            
            private AstTableOptVarValue _tableOptVarValue;
            
            internal AstTableoption1(ParserRuleContext ctx, AstTableOptVarname tableOptVarname, AstTableOptVarValue tableOptVarValue) : 
                    base(ctx)
            {
                _tableOptVarname = tableOptVarname;
                _tableOptVarValue = tableOptVarValue;
            }
            
            public virtual AstTableOptVarname TableOptVarname
            {
                get
                {
                    return _tableOptVarname;
                }
            }
            
            public virtual AstTableOptVarValue TableOptVarValue
            {
                get
                {
                    return _tableOptVarValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : tableoption_cluster_mode 
        /// </summary>
        public partial class AstTableoption2 : AstTableoption
        {
            
            private AstTableoptionClusterMode _tableoptionClusterMode;
            
            internal AstTableoption2(ParserRuleContext ctx, AstTableoptionClusterMode tableoptionClusterMode) : 
                    base(ctx)
            {
                _tableoptionClusterMode = tableoptionClusterMode;
            }
            
            public virtual AstTableoptionClusterMode TableoptionClusterMode
            {
                get
                {
                    return _tableoptionClusterMode;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : FILLFACTOR EQUAL decimal 
        /// </summary>
        public partial class AstTableoption3 : AstTableoption
        {
            
            private AstDecimal _decimal;
            
            internal AstTableoption3(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : table_distribution 
        /// </summary>
        public partial class AstTableoption4 : AstTableoption
        {
            
            private AstTableDistribution _tableDistribution;
            
            internal AstTableoption4(ParserRuleContext ctx, AstTableDistribution tableDistribution) : 
                    base(ctx)
            {
                _tableDistribution = tableDistribution;
            }
            
            public virtual AstTableDistribution TableDistribution
            {
                get
                {
                    return _tableDistribution;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : DATA_COMPRESSION EQUAL compression_mode on_partitions? 
        /// </summary>
        public partial class AstTableoption5 : AstTableoption
        {
            
            private AstCompressionMode _compressionMode;
            
            private AstOnPartitions _onPartitions;
            
            internal AstTableoption5(ParserRuleContext ctx, AstCompressionMode compressionMode, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _compressionMode = compressionMode;
                _onPartitions = onPartitions;
            }
            
            public virtual AstCompressionMode CompressionMode
            {
                get
                {
                    return _compressionMode;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        /// <summary>
        /// tableoption : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstTableoption6 : AstTableoption
        {
            
            private AstOnOff _onOff;
            
            private AstOnPartitions _onPartitions;
            
            internal AstTableoption6(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableoption(this);
            }
        }
        

        
        internal AstTableoption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableoption(Position p) : 
                base(p)
        {
        }
        
        internal AstTableoption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableoption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableoption.Resolve(list);
            if ((index == 3))
            {
                return new AstTableoption.AstTableoption1(ctx, ((AstTableOptVarname)(list[0])), ((AstTableOptVarValue)(list[1])));
            }
            if ((index == 2))
            {
                return new AstTableoption.AstTableoption2(ctx, ((AstTableoptionClusterMode)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableoption.AstTableoption3(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableoption.AstTableoption4(ctx, ((AstTableDistribution)(list[0])));
            }
            if ((index == 3))
            {
                return new AstTableoption.AstTableoption5(ctx, ((AstCompressionMode)(list[0])), ((AstOnPartitions)(list[1])));
            }
            if ((index == 3))
            {
                return new AstTableoption.AstTableoption6(ctx, ((AstOnOff)(list[0])), ((AstOnPartitions)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableOptVarname), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTableOptVarValue), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCompressionMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 6;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableoptionClusterMode), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableDistribution), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// tableoption : 
        ///    table_opt_varname EQUAL table_opt_var_value 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstTableOptVarname tableOptVarname, AstTableOptVarValue tableOptVarValue)
        {
            AstTableoption.AstTableoption1 result = new AstTableoption.AstTableoption1(ctx, tableOptVarname, tableOptVarValue);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    tableoption_cluster_mode 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstTableoptionClusterMode tableoptionClusterMode)
        {
            AstTableoption.AstTableoption2 result = new AstTableoption.AstTableoption2(ctx, tableoptionClusterMode);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTableoption.AstTableoption3 result = new AstTableoption.AstTableoption3(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    table_distribution 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstTableDistribution tableDistribution)
        {
            AstTableoption.AstTableoption4 result = new AstTableoption.AstTableoption4(ctx, tableDistribution);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    DATA_COMPRESSION EQUAL compression_mode on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstCompressionMode compressionMode, AstOnPartitions onPartitions)
        {
            AstTableoption.AstTableoption5 result = new AstTableoption.AstTableoption5(ctx, compressionMode, onPartitions);
            return result;
        }
        
        /// <summary>
        /// tableoption : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstTableoption Tableoption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstTableoption.AstTableoption6 result = new AstTableoption.AstTableoption6(ctx, onOff, onPartitions);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_varname
    /// 	 : (simple_id | keyword)
    /// </summary>
    public abstract partial class AstTableOptVarname : AstBnfRule
    {
        
        protected static string _rule = "table_opt_varname\r\n\t : (simple_id | keyword)";
        
        /// <summary>
        /// table_opt_varname : simple_id 
        /// </summary>
        public partial class AstTableOptVarname1 : AstTableOptVarname
        {
            
            private AstSimpleId _simpleId;
            
            internal AstTableOptVarname1(ParserRuleContext ctx, AstSimpleId simpleId) : 
                    base(ctx)
            {
                _simpleId = simpleId;
            }
            
            public virtual AstSimpleId SimpleId
            {
                get
                {
                    return _simpleId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarname(this);
            }
        }
        /// <summary>
        /// table_opt_varname : keyword 
        /// </summary>
        public partial class AstTableOptVarname2 : AstTableOptVarname
        {
            
            private AstKeyword _keyword;
            
            internal AstTableOptVarname2(ParserRuleContext ctx, AstKeyword keyword) : 
                    base(ctx)
            {
                _keyword = keyword;
            }
            
            public virtual AstKeyword Keyword
            {
                get
                {
                    return _keyword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarname(this);
            }
        }
        

        
        internal AstTableOptVarname(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarname(Position p) : 
                base(p)
        {
        }
        
        internal AstTableOptVarname(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableOptVarname Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableOptVarname.Resolve(list);
            if ((index == 2))
            {
                return new AstTableOptVarname.AstTableOptVarname1(ctx, ((AstSimpleId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableOptVarname.AstTableOptVarname2(ctx, ((AstKeyword)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSimpleId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstKeyword), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_opt_varname : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(ParserRuleContext ctx, AstSimpleId simpleId)
        {
            AstTableOptVarname.AstTableOptVarname1 result = new AstTableOptVarname.AstTableOptVarname1(ctx, simpleId);
            return result;
        }
        
        /// <summary>
        /// table_opt_varname : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarname TableOptVarname(ParserRuleContext ctx, AstKeyword keyword)
        {
            AstTableOptVarname.AstTableOptVarname2 result = new AstTableOptVarname.AstTableOptVarname2(ctx, keyword);
            return result;
        }
    }
    
    /// <summary>
    /// table_opt_var_value
    /// 	 : (simple_id | keyword | on_off | decimal)
    /// </summary>
    public abstract partial class AstTableOptVarValue : AstBnfRule
    {
        
        protected static string _rule = "table_opt_var_value\r\n\t : (simple_id | keyword | on_off | decimal)";
        
        /// <summary>
        /// table_opt_var_value : simple_id 
        /// </summary>
        public partial class AstTableOptVarValue1 : AstTableOptVarValue
        {
            
            private AstSimpleId _simpleId;
            
            internal AstTableOptVarValue1(ParserRuleContext ctx, AstSimpleId simpleId) : 
                    base(ctx)
            {
                _simpleId = simpleId;
            }
            
            public virtual AstSimpleId SimpleId
            {
                get
                {
                    return _simpleId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        /// <summary>
        /// table_opt_var_value : keyword 
        /// </summary>
        public partial class AstTableOptVarValue2 : AstTableOptVarValue
        {
            
            private AstKeyword _keyword;
            
            internal AstTableOptVarValue2(ParserRuleContext ctx, AstKeyword keyword) : 
                    base(ctx)
            {
                _keyword = keyword;
            }
            
            public virtual AstKeyword Keyword
            {
                get
                {
                    return _keyword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        /// <summary>
        /// table_opt_var_value : on_off 
        /// </summary>
        public partial class AstTableOptVarValue3 : AstTableOptVarValue
        {
            
            private AstOnOff _onOff;
            
            internal AstTableOptVarValue3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        /// <summary>
        /// table_opt_var_value : decimal 
        /// </summary>
        public partial class AstTableOptVarValue4 : AstTableOptVarValue
        {
            
            private AstDecimal _decimal;
            
            internal AstTableOptVarValue4(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableOptVarValue(this);
            }
        }
        

        
        internal AstTableOptVarValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableOptVarValue(Position p) : 
                base(p)
        {
        }
        
        internal AstTableOptVarValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableOptVarValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableOptVarValue.Resolve(list);
            if ((index == 2))
            {
                return new AstTableOptVarValue.AstTableOptVarValue1(ctx, ((AstSimpleId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableOptVarValue.AstTableOptVarValue2(ctx, ((AstKeyword)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableOptVarValue.AstTableOptVarValue3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableOptVarValue.AstTableOptVarValue4(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSimpleId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstKeyword), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    simple_id 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstSimpleId simpleId)
        {
            AstTableOptVarValue.AstTableOptVarValue1 result = new AstTableOptVarValue.AstTableOptVarValue1(ctx, simpleId);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    keyword 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstKeyword keyword)
        {
            AstTableOptVarValue.AstTableOptVarValue2 result = new AstTableOptVarValue.AstTableOptVarValue2(ctx, keyword);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    on_off 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstTableOptVarValue.AstTableOptVarValue3 result = new AstTableOptVarValue.AstTableOptVarValue3(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// table_opt_var_value : 
        ///    decimal 
        /// </summary>
        public static AstTableOptVarValue TableOptVarValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTableOptVarValue.AstTableOptVarValue4 result = new AstTableOptVarValue.AstTableOptVarValue4(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// table_distribution
    /// 	 : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET
    /// 	 | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// </summary>
    public abstract partial class AstTableDistribution : AstBnfRule
    {
        
        protected static string _rule = "table_distribution\r\n\t : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET\r\n\t" +
            " | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET";
        
        /// <summary>
        /// table_distribution : DISTRIBUTION EQUAL HASH LR_BRACKET id_ RR_BRACKET 
        /// </summary>
        public partial class AstTableDistribution1 : AstTableDistribution
        {
            
            private AstId _id;
            
            internal AstTableDistribution1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableDistribution(this);
            }
        }
        /// <summary>
        /// table_distribution : CLUSTERED INDEX LR_BRACKET column_name_list_with_order RR_BRACKET 
        /// </summary>
        public partial class AstTableDistribution2 : AstTableDistribution
        {
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            internal AstTableDistribution2(ParserRuleContext ctx, AstColumnNameListWithOrder columnNameListWithOrder) : 
                    base(ctx)
            {
                _columnNameListWithOrder = columnNameListWithOrder;
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableDistribution(this);
            }
        }
        

        
        internal AstTableDistribution(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableDistribution(Position p) : 
                base(p)
        {
        }
        
        internal AstTableDistribution(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableDistribution Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableDistribution.Resolve(list);
            if ((index == 2))
            {
                return new AstTableDistribution.AstTableDistribution1(ctx, ((AstId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableDistribution.AstTableDistribution2(ctx, ((AstColumnNameListWithOrder)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstColumnNameListWithOrder), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_distribution : 
        ///    DISTRIBUTION EQUAL HASH ( id_ ) 
        /// </summary>
        public static AstTableDistribution TableDistribution(ParserRuleContext ctx, AstId id)
        {
            AstTableDistribution.AstTableDistribution1 result = new AstTableDistribution.AstTableDistribution1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// table_distribution : 
        ///    CLUSTERED INDEX ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableDistribution TableDistribution(ParserRuleContext ctx, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            AstTableDistribution.AstTableDistribution2 result = new AstTableDistribution.AstTableDistribution2(ctx, columnNameListWithOrder);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  alter_table_constraint_foreign
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstAlterTableConstraint : AstBnfRule
    {
        
        protected static string _rule = "alter_table_constraint\r\n\t : (CONSTRAINT  constraint_id)?  alter_table_constraint_" +
            "foreign\r\n\t | CHECK  LR_BRACKET  search_condition  RR_BRACKET";
        
        /// <summary>
        /// alter_table_constraint : CONSTRAINT constraint_id alter_table_constraint_foreign 
        /// </summary>
        public partial class AstAlterTableConstraint1 : AstAlterTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstAlterTableConstraintForeign _alterTableConstraintForeign;
            
            internal AstAlterTableConstraint1(ParserRuleContext ctx, AstConstraintId constraintId, AstAlterTableConstraintForeign alterTableConstraintForeign) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _alterTableConstraintForeign = alterTableConstraintForeign;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstAlterTableConstraintForeign AlterTableConstraintForeign
            {
                get
                {
                    return _alterTableConstraintForeign;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableConstraint(this);
            }
        }
        /// <summary>
        /// alter_table_constraint : CHECK LR_BRACKET search_condition RR_BRACKET 
        /// </summary>
        public partial class AstAlterTableConstraint2 : AstAlterTableConstraint
        {
            
            private AstSearchCondition _searchCondition;
            
            internal AstAlterTableConstraint2(ParserRuleContext ctx, AstSearchCondition searchCondition) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableConstraint(this);
            }
        }
        

        
        internal AstAlterTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterTableConstraint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterTableConstraint.Resolve(list);
            if ((index == 3))
            {
                return new AstAlterTableConstraint.AstAlterTableConstraint1(ctx, ((AstConstraintId)(list[0])), ((AstAlterTableConstraintForeign)(list[1])));
            }
            if ((index == 2))
            {
                return new AstAlterTableConstraint.AstAlterTableConstraint2(ctx, ((AstSearchCondition)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAlterTableConstraintForeign), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_table_constraint : 
        ///    CONSTRAINT constraint_id alter_table_constraint_foreign 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstAlterTableConstraintForeign alterTableConstraintForeign)
        {
            AstAlterTableConstraint.AstAlterTableConstraint1 result = new AstAlterTableConstraint.AstAlterTableConstraint1(ctx, constraintId, alterTableConstraintForeign);
            return result;
        }
        
        /// <summary>
        /// alter_table_constraint : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstAlterTableConstraint AlterTableConstraint(ParserRuleContext ctx, AstSearchCondition searchCondition)
        {
            AstAlterTableConstraint.AstAlterTableConstraint2 result = new AstAlterTableConstraint.AstAlterTableConstraint2(ctx, searchCondition);
            return result;
        }
    }
    
    /// <summary>
    /// constraint_delete_or_update
    /// 	 : on_delete
    /// 	 | on_update
    /// </summary>
    public abstract partial class AstConstraintDeleteOrUpdate : AstBnfRule
    {
        
        protected static string _rule = "constraint_delete_or_update\r\n\t : on_delete\r\n\t | on_update";
        
        /// <summary>
        /// constraint_delete_or_update : on_delete 
        /// </summary>
        public partial class AstConstraintDeleteOrUpdate1 : AstConstraintDeleteOrUpdate
        {
            
            private AstOnDelete _onDelete;
            
            internal AstConstraintDeleteOrUpdate1(ParserRuleContext ctx, AstOnDelete onDelete) : 
                    base(ctx)
            {
                _onDelete = onDelete;
            }
            
            public virtual AstOnDelete OnDelete
            {
                get
                {
                    return _onDelete;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstraintDeleteOrUpdate(this);
            }
        }
        /// <summary>
        /// constraint_delete_or_update : on_update 
        /// </summary>
        public partial class AstConstraintDeleteOrUpdate2 : AstConstraintDeleteOrUpdate
        {
            
            private AstOnUpdate _onUpdate;
            
            internal AstConstraintDeleteOrUpdate2(ParserRuleContext ctx, AstOnUpdate onUpdate) : 
                    base(ctx)
            {
                _onUpdate = onUpdate;
            }
            
            public virtual AstOnUpdate OnUpdate
            {
                get
                {
                    return _onUpdate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstraintDeleteOrUpdate(this);
            }
        }
        

        
        internal AstConstraintDeleteOrUpdate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstraintDeleteOrUpdate(Position p) : 
                base(p)
        {
        }
        
        internal AstConstraintDeleteOrUpdate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstraintDeleteOrUpdate Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstraintDeleteOrUpdate.Resolve(list);
            if ((index == 2))
            {
                return new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1(ctx, ((AstOnDelete)(list[0])));
            }
            if ((index == 2))
            {
                return new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2(ctx, ((AstOnUpdate)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnDelete), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnUpdate), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// constraint_delete_or_update : 
        ///    on_delete 
        /// </summary>
        public static AstConstraintDeleteOrUpdate ConstraintDeleteOrUpdate(ParserRuleContext ctx, AstOnDelete onDelete)
        {
            AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1 result = new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate1(ctx, onDelete);
            return result;
        }
        
        /// <summary>
        /// constraint_delete_or_update : 
        ///    on_update 
        /// </summary>
        public static AstConstraintDeleteOrUpdate ConstraintDeleteOrUpdate(ParserRuleContext ctx, AstOnUpdate onUpdate)
        {
            AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2 result = new AstConstraintDeleteOrUpdate.AstConstraintDeleteOrUpdate2(ctx, onUpdate);
            return result;
        }
    }
    
    /// <summary>
    /// switch_partition
    /// 	 : (PARTITION?  source_partition_number_expression = expression)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expression = expression)?  (WITH  low_priority_lock_wait)?
    /// </summary>
    public partial class AstSwitchPartition : AstBnfRule
    {
        
        protected static string _rule = "switch_partition\r\n\t : (PARTITION?  source_partition_number_expression = expressio" +
            "n)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expr" +
            "ession = expression)?  (WITH  low_priority_lock_wait)?";
        
        internal AstSwitchPartition(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSwitchPartition(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSwitchPartition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstSwitchPartition(ParserRuleContext ctx, AstExpression sourcePartitionNumberExpression, AstFullTableRef targetTable, AstExpression targetPartitionNumberExpression, AstLowPriorityLockWait lowPriorityLockWait) : 
                base(ctx)
        {
            _sourcePartitionNumberExpression = sourcePartitionNumberExpression;
            _targetTable = targetTable;
            _targetPartitionNumberExpression = targetPartitionNumberExpression;
            _lowPriorityLockWait = lowPriorityLockWait;
        }
        
        public virtual AstExpression _sourcePartitionNumberExpression
        {
            get
            {
                return _sourcePartitionNumberExpression;
            }
        }
        
        public virtual AstFullTableRef _targetTable
        {
            get
            {
                return _targetTable;
            }
        }
        
        public virtual AstExpression _targetPartitionNumberExpression
        {
            get
            {
                return _targetPartitionNumberExpression;
            }
        }
        
        public virtual AstLowPriorityLockWait _lowPriorityLockWait
        {
            get
            {
                return _lowPriorityLockWait;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchPartition(this);
        }
        
        /// <summary>
        /// switch_partition : 
        ///    PARTITION? source_partition_number_expression=expression TO target_table=full_table_ref PARTITION target_partition_number_expression=expression WITH low_priority_lock_wait 
        /// </summary>
        public static AstSwitchPartition SwitchPartition(ParserRuleContext ctx, AstExpression sourcePartitionNumberExpression, AstFullTableRef targetTable, AstExpression targetPartitionNumberExpression, AstLowPriorityLockWait lowPriorityLockWait)
        {
            AstSwitchPartition result = new AstSwitchPartition(ctx, sourcePartitionNumberExpression, targetTable, targetPartitionNumberExpression, lowPriorityLockWait);
            return result;
        }
    }
    
    /// <summary>
    /// low_priority_lock_wait
    /// 	 : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = timespan  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = abord_after_mode  RR_BRACKET
    /// </summary>
    public partial class AstLowPriorityLockWait : AstBnfRule
    {
        
        protected static string _rule = "low_priority_lock_wait\r\n\t : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL" +
            "  max_duration = timespan  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after" +
            "_wait = abord_after_mode  RR_BRACKET";
        
        internal AstLowPriorityLockWait(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstLowPriorityLockWait(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstLowPriorityLockWait(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstLowPriorityLockWait(ParserRuleContext ctx, AstTimespan maxDuration, AstAbordAfterMode abortAfterWait) : 
                base(ctx)
        {
            _maxDuration = maxDuration;
            _abortAfterWait = abortAfterWait;
        }
        
        public virtual AstTimespan _maxDuration
        {
            get
            {
                return _maxDuration;
            }
        }
        
        public virtual AstAbordAfterMode _abortAfterWait
        {
            get
            {
                return _abortAfterWait;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLowPriorityLockWait(this);
        }
        
        /// <summary>
        /// low_priority_lock_wait : 
        ///    WAIT_AT_LOW_PRIORITY ( MAX_DURATION EQUAL max_duration=timespan MINUTES? , ABORT_AFTER_WAIT EQUAL abort_after_wait=abord_after_mode ) 
        /// </summary>
        public static AstLowPriorityLockWait LowPriorityLockWait(ParserRuleContext ctx, AstTimespan maxDuration, AstAbordAfterMode abortAfterWait)
        {
            AstLowPriorityLockWait result = new AstLowPriorityLockWait(ctx, maxDuration, abortAfterWait);
            return result;
        }
    }
    
    /// <summary>
    /// alter_database_new_infos
    /// 	 : MODIFY  NAME  EQUAL  database_id
    /// 	 | COLLATE  collation_id
    /// 	 | SET  database_optionspec  (WITH  termination)?
    /// 	 | add_or_modify_files
    /// 	 | add_or_modify_filegroups
    /// </summary>
    public abstract partial class AstAlterDatabaseNewInfos : AstBnfRule
    {
        
        protected static string _rule = "alter_database_new_infos\r\n\t : MODIFY  NAME  EQUAL  database_id\r\n\t | COLLATE  coll" +
            "ation_id\r\n\t | SET  database_optionspec  (WITH  termination)?\r\n\t | add_or_modify_" +
            "files\r\n\t | add_or_modify_filegroups";
        
        /// <summary>
        /// alter_database_new_infos : MODIFY NAME EQUAL database_id 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos1 : AstAlterDatabaseNewInfos
        {
            
            private AstDatabaseId _databaseId;
            
            internal AstAlterDatabaseNewInfos1(ParserRuleContext ctx, AstDatabaseId databaseId) : 
                    base(ctx)
            {
                _databaseId = databaseId;
            }
            
            public virtual AstDatabaseId DatabaseId
            {
                get
                {
                    return _databaseId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : COLLATE collation_id 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos2 : AstAlterDatabaseNewInfos
        {
            
            private AstCollationId _collationId;
            
            internal AstAlterDatabaseNewInfos2(ParserRuleContext ctx, AstCollationId collationId) : 
                    base(ctx)
            {
                _collationId = collationId;
            }
            
            public virtual AstCollationId CollationId
            {
                get
                {
                    return _collationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : SET database_optionspec WITH termination 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos3 : AstAlterDatabaseNewInfos
        {
            
            private AstDatabaseOptionspec _databaseOptionspec;
            
            private AstTermination _termination;
            
            internal AstAlterDatabaseNewInfos3(ParserRuleContext ctx, AstDatabaseOptionspec databaseOptionspec, AstTermination termination) : 
                    base(ctx)
            {
                _databaseOptionspec = databaseOptionspec;
                _termination = termination;
            }
            
            public virtual AstDatabaseOptionspec DatabaseOptionspec
            {
                get
                {
                    return _databaseOptionspec;
                }
            }
            
            public virtual AstTermination Termination
            {
                get
                {
                    return _termination;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : add_or_modify_files 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos4 : AstAlterDatabaseNewInfos
        {
            
            private AstAddOrModifyFiles _addOrModifyFiles;
            
            internal AstAlterDatabaseNewInfos4(ParserRuleContext ctx, AstAddOrModifyFiles addOrModifyFiles) : 
                    base(ctx)
            {
                _addOrModifyFiles = addOrModifyFiles;
            }
            
            public virtual AstAddOrModifyFiles AddOrModifyFiles
            {
                get
                {
                    return _addOrModifyFiles;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        /// <summary>
        /// alter_database_new_infos : add_or_modify_filegroups 
        /// </summary>
        public partial class AstAlterDatabaseNewInfos5 : AstAlterDatabaseNewInfos
        {
            
            private AstAddOrModifyFilegroups _addOrModifyFilegroups;
            
            internal AstAlterDatabaseNewInfos5(ParserRuleContext ctx, AstAddOrModifyFilegroups addOrModifyFilegroups) : 
                    base(ctx)
            {
                _addOrModifyFilegroups = addOrModifyFilegroups;
            }
            
            public virtual AstAddOrModifyFilegroups AddOrModifyFilegroups
            {
                get
                {
                    return _addOrModifyFilegroups;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterDatabaseNewInfos(this);
            }
        }
        

        
        internal AstAlterDatabaseNewInfos(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterDatabaseNewInfos(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterDatabaseNewInfos(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterDatabaseNewInfos Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterDatabaseNewInfos.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1(ctx, ((AstDatabaseId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2(ctx, ((AstCollationId)(list[0])));
            }
            if ((index == 3))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3(ctx, ((AstDatabaseOptionspec)(list[0])), ((AstTermination)(list[1])));
            }
            if ((index == 2))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4(ctx, ((AstAddOrModifyFiles)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5(ctx, ((AstAddOrModifyFilegroups)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseOptionspec), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTermination), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCollationId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAddOrModifyFiles), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstAddOrModifyFilegroups), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    MODIFY NAME EQUAL database_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstDatabaseId databaseId)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos1(ctx, databaseId);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstCollationId collationId)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos2(ctx, collationId);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    SET database_optionspec WITH termination 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstDatabaseOptionspec databaseOptionspec, AstTermination termination)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos3(ctx, databaseOptionspec, termination);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    add_or_modify_files 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstAddOrModifyFiles addOrModifyFiles)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos4(ctx, addOrModifyFiles);
            return result;
        }
        
        /// <summary>
        /// alter_database_new_infos : 
        ///    add_or_modify_filegroups 
        /// </summary>
        public static AstAlterDatabaseNewInfos AlterDatabaseNewInfos(ParserRuleContext ctx, AstAddOrModifyFilegroups addOrModifyFilegroups)
        {
            AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5 result = new AstAlterDatabaseNewInfos.AstAlterDatabaseNewInfos5(ctx, addOrModifyFilegroups);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_files
    /// 	 : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?
    /// 	 | ADD  LOG  FILE  filespecs
    /// 	 | REMOVE  FILE  file_group_id
    /// 	 | MODIFY  FILE  filespec
    /// </summary>
    public abstract partial class AstAddOrModifyFiles : AstBnfRule
    {
        
        protected static string _rule = "add_or_modify_files\r\n\t : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)?\r\n\t" +
            " | ADD  LOG  FILE  filespecs\r\n\t | REMOVE  FILE  file_group_id\r\n\t | MODIFY  FILE " +
            " filespec";
        
        /// <summary>
        /// add_or_modify_files : ADD FILE filespecs TO FILEGROUP file_group_id 
        /// </summary>
        public partial class AstAddOrModifyFiles1 : AstAddOrModifyFiles
        {
            
            private AstFilespecs _filespecs;
            
            private AstFileGroupId _fileGroupId;
            
            internal AstAddOrModifyFiles1(ParserRuleContext ctx, AstFilespecs filespecs, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _filespecs = filespecs;
                _fileGroupId = fileGroupId;
            }
            
            public virtual AstFilespecs Filespecs
            {
                get
                {
                    return _filespecs;
                }
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : ADD LOG FILE filespecs 
        /// </summary>
        public partial class AstAddOrModifyFiles2 : AstAddOrModifyFiles
        {
            
            private AstFilespecs _filespecs;
            
            internal AstAddOrModifyFiles2(ParserRuleContext ctx, AstFilespecs filespecs) : 
                    base(ctx)
            {
                _filespecs = filespecs;
            }
            
            public virtual AstFilespecs Filespecs
            {
                get
                {
                    return _filespecs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : REMOVE FILE file_group_id 
        /// </summary>
        public partial class AstAddOrModifyFiles3 : AstAddOrModifyFiles
        {
            
            private AstFileGroupId _fileGroupId;
            
            internal AstAddOrModifyFiles3(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        /// <summary>
        /// add_or_modify_files : MODIFY FILE filespec 
        /// </summary>
        public partial class AstAddOrModifyFiles4 : AstAddOrModifyFiles
        {
            
            private AstFilespec _filespec;
            
            internal AstAddOrModifyFiles4(ParserRuleContext ctx, AstFilespec filespec) : 
                    base(ctx)
            {
                _filespec = filespec;
            }
            
            public virtual AstFilespec Filespec
            {
                get
                {
                    return _filespec;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFiles(this);
            }
        }
        

        
        internal AstAddOrModifyFiles(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFiles(Position p) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFiles(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAddOrModifyFiles Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAddOrModifyFiles.Resolve(list);
            if ((index == 3))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles1(ctx, ((AstFilespecs)(list[0])), ((AstFileGroupId)(list[1])));
            }
            if ((index == 2))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles2(ctx, ((AstFilespecs)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles3(ctx, ((AstFileGroupId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAddOrModifyFiles.AstAddOrModifyFiles4(ctx, ((AstFilespec)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFilespecs), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFileGroupId), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFilespecs), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstFilespec), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    ADD FILE filespecs TO FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFilespecs filespecs, AstFileGroupId fileGroupId)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles1 result = new AstAddOrModifyFiles.AstAddOrModifyFiles1(ctx, filespecs, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    ADD LOG FILE filespecs 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFilespecs filespecs)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles2 result = new AstAddOrModifyFiles.AstAddOrModifyFiles2(ctx, filespecs);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    REMOVE FILE file_group_id 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles3 result = new AstAddOrModifyFiles.AstAddOrModifyFiles3(ctx, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_files : 
        ///    MODIFY FILE filespec 
        /// </summary>
        public static AstAddOrModifyFiles AddOrModifyFiles(ParserRuleContext ctx, AstFilespec filespec)
        {
            AstAddOrModifyFiles.AstAddOrModifyFiles4 result = new AstAddOrModifyFiles.AstAddOrModifyFiles4(ctx, filespec);
            return result;
        }
    }
    
    /// <summary>
    /// add_or_modify_filegroups
    /// 	 : ADD  FILEGROUP  file_group_id  filegroup_predicate?
    /// 	 | REMOVE  FILEGROUP  file_group_id
    /// 	 | MODIFY  FILEGROUP  file_group_id  modify_filegroups_options
    /// </summary>
    public abstract partial class AstAddOrModifyFilegroups : AstBnfRule
    {
        
        protected static string _rule = "add_or_modify_filegroups\r\n\t : ADD  FILEGROUP  file_group_id  filegroup_predicate?" +
            "\r\n\t | REMOVE  FILEGROUP  file_group_id\r\n\t | MODIFY  FILEGROUP  file_group_id  mo" +
            "dify_filegroups_options";
        
        /// <summary>
        /// add_or_modify_filegroups : ADD FILEGROUP file_group_id filegroup_predicate? 
        /// </summary>
        public partial class AstAddOrModifyFilegroups1 : AstAddOrModifyFilegroups
        {
            
            private AstFileGroupId _fileGroupId;
            
            private AstFilegroupPredicate _filegroupPredicate;
            
            internal AstAddOrModifyFilegroups1(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstFilegroupPredicate filegroupPredicate) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
                _filegroupPredicate = filegroupPredicate;
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public virtual AstFilegroupPredicate FilegroupPredicate
            {
                get
                {
                    return _filegroupPredicate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        /// <summary>
        /// add_or_modify_filegroups : REMOVE FILEGROUP file_group_id 
        /// </summary>
        public partial class AstAddOrModifyFilegroups2 : AstAddOrModifyFilegroups
        {
            
            private AstFileGroupId _fileGroupId;
            
            internal AstAddOrModifyFilegroups2(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        /// <summary>
        /// add_or_modify_filegroups : MODIFY FILEGROUP file_group_id modify_filegroups_options 
        /// </summary>
        public partial class AstAddOrModifyFilegroups3 : AstAddOrModifyFilegroups
        {
            
            private AstFileGroupId _fileGroupId;
            
            private AstModifyFilegroupsOptions _modifyFilegroupsOptions;
            
            internal AstAddOrModifyFilegroups3(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstModifyFilegroupsOptions modifyFilegroupsOptions) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
                _modifyFilegroupsOptions = modifyFilegroupsOptions;
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public virtual AstModifyFilegroupsOptions ModifyFilegroupsOptions
            {
                get
                {
                    return _modifyFilegroupsOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAddOrModifyFilegroups(this);
            }
        }
        

        
        internal AstAddOrModifyFilegroups(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAddOrModifyFilegroups(Position p) : 
                base(p)
        {
        }
        
        internal AstAddOrModifyFilegroups(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAddOrModifyFilegroups Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAddOrModifyFilegroups.Resolve(list);
            if ((index == 3))
            {
                return new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1(ctx, ((AstFileGroupId)(list[0])), ((AstFilegroupPredicate)(list[1])));
            }
            if ((index == 2))
            {
                return new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2(ctx, ((AstFileGroupId)(list[0])));
            }
            if ((index == 3))
            {
                return new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3(ctx, ((AstFileGroupId)(list[0])), ((AstModifyFilegroupsOptions)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFilegroupPredicate), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstModifyFilegroupsOptions), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    ADD FILEGROUP file_group_id filegroup_predicate? 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstFilegroupPredicate filegroupPredicate)
        {
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups1(ctx, fileGroupId, filegroupPredicate);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    REMOVE FILEGROUP file_group_id 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups2(ctx, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// add_or_modify_filegroups : 
        ///    MODIFY FILEGROUP file_group_id modify_filegroups_options 
        /// </summary>
        public static AstAddOrModifyFilegroups AddOrModifyFilegroups(ParserRuleContext ctx, AstFileGroupId fileGroupId, AstModifyFilegroupsOptions modifyFilegroupsOptions)
        {
            AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3 result = new AstAddOrModifyFilegroups.AstAddOrModifyFilegroups3(ctx, fileGroupId, modifyFilegroupsOptions);
            return result;
        }
    }
    
    /// <summary>
    /// modify_filegroups_options
    /// 	 : filegroup_updatability_option
    /// 	 | DEFAULT
    /// 	 | NAME  EQUAL  file_group_id
    /// 	 | AUTOGROW_SINGLE_FILE
    /// 	 | AUTOGROW_ALL_FILES
    /// </summary>
    public abstract partial class AstModifyFilegroupsOptions : AstBnfRule
    {
        
        protected static string _rule = "modify_filegroups_options\r\n\t : filegroup_updatability_option\r\n\t | DEFAULT\r\n\t | NA" +
            "ME  EQUAL  file_group_id\r\n\t | AUTOGROW_SINGLE_FILE\r\n\t | AUTOGROW_ALL_FILES";
        
        /// <summary>
        /// modify_filegroups_options : filegroup_updatability_option 
        /// </summary>
        public partial class AstModifyFilegroupsOptions1 : AstModifyFilegroupsOptions
        {
            
            private AstFilegroupUpdatabilityOption _filegroupUpdatabilityOption;
            
            internal AstModifyFilegroupsOptions1(ParserRuleContext ctx, AstFilegroupUpdatabilityOption filegroupUpdatabilityOption) : 
                    base(ctx)
            {
                _filegroupUpdatabilityOption = filegroupUpdatabilityOption;
            }
            
            public virtual AstFilegroupUpdatabilityOption FilegroupUpdatabilityOption
            {
                get
                {
                    return _filegroupUpdatabilityOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : DEFAULT 
        /// </summary>
        public partial class AstModifyFilegroupsOptions2 : AstModifyFilegroupsOptions
        {
            
            internal AstModifyFilegroupsOptions2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : NAME EQUAL file_group_id 
        /// </summary>
        public partial class AstModifyFilegroupsOptions3 : AstModifyFilegroupsOptions
        {
            
            private AstFileGroupId _fileGroupId;
            
            internal AstModifyFilegroupsOptions3(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : AUTOGROW_SINGLE_FILE 
        /// </summary>
        public partial class AstModifyFilegroupsOptions4 : AstModifyFilegroupsOptions
        {
            
            internal AstModifyFilegroupsOptions4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        /// <summary>
        /// modify_filegroups_options : AUTOGROW_ALL_FILES 
        /// </summary>
        public partial class AstModifyFilegroupsOptions5 : AstModifyFilegroupsOptions
        {
            
            internal AstModifyFilegroupsOptions5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyFilegroupsOptions(this);
            }
        }
        

        
        internal AstModifyFilegroupsOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstModifyFilegroupsOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstModifyFilegroupsOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstModifyFilegroupsOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstModifyFilegroupsOptions.Resolve(list);
            if ((index == 2))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions1(ctx, ((AstFilegroupUpdatabilityOption)(list[0])));
            }
            if ((index == 1))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions2(ctx);
            }
            if ((index == 2))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions3(ctx, ((AstFileGroupId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions4(ctx);
            }
            if ((index == 1))
            {
                return new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions5(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFilegroupUpdatabilityOption), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// modify_filegroups_options : 
        ///    filegroup_updatability_option 
        /// </summary>
        public static AstModifyFilegroupsOptions ModifyFilegroupsOptions(ParserRuleContext ctx, AstFilegroupUpdatabilityOption filegroupUpdatabilityOption)
        {
            AstModifyFilegroupsOptions.AstModifyFilegroupsOptions1 result = new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions1(ctx, filegroupUpdatabilityOption);
            return result;
        }
        
        /// <summary>
        /// modify_filegroups_options : 
        ///    DEFAULT 
        /// </summary>
        public static AstModifyFilegroupsOptions ModifyFilegroupsOptions(ParserRuleContext ctx)
        {
            AstModifyFilegroupsOptions.AstModifyFilegroupsOptions2 result = new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions2(ctx);
            return result;
        }
        
        /// <summary>
        /// modify_filegroups_options : 
        ///    NAME EQUAL file_group_id 
        /// </summary>
        public static AstModifyFilegroupsOptions ModifyFilegroupsOptions(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstModifyFilegroupsOptions.AstModifyFilegroupsOptions3 result = new AstModifyFilegroupsOptions.AstModifyFilegroupsOptions3(ctx, fileGroupId);
            return result;
        }
    }
    
    /// <summary>
    /// database_optionspec
    /// 	 : auto_option
    /// 	 | change_tracking_set
    /// 	 | containment_option
    /// 	 | cursor_option
    /// 	 | database_mirroring_option
    /// 	 | date_correlation_optimization_option
    /// 	 | db_encryption_option
    /// 	 | db_state_option
    /// 	 | db_update_option
    /// 	 | db_user_access_option
    /// 	 | delayed_durability_option
    /// 	 | external_access_option
    /// 	 | database_filestream
    /// 	 | hadr_options
    /// 	 | mixed_page_allocation_option
    /// 	 | parameterization_option
    /// 	 | recovery_option
    /// 	 | service_broker_option
    /// 	 | snapshot_option
    /// 	 | sql_option
    /// 	 | target_recovery_time_option
    /// 	 | termination
    /// </summary>
    public abstract partial class AstDatabaseOptionspec : AstBnfRule
    {
        
        protected static string _rule = @"database_optionspec
	 : auto_option
	 | change_tracking_set
	 | containment_option
	 | cursor_option
	 | database_mirroring_option
	 | date_correlation_optimization_option
	 | db_encryption_option
	 | db_state_option
	 | db_update_option
	 | db_user_access_option
	 | delayed_durability_option
	 | external_access_option
	 | database_filestream
	 | hadr_options
	 | mixed_page_allocation_option
	 | parameterization_option
	 | recovery_option
	 | service_broker_option
	 | snapshot_option
	 | sql_option
	 | target_recovery_time_option
	 | termination";
        
        /// <summary>
        /// database_optionspec : auto_option 
        /// </summary>
        public partial class AstDatabaseOptionspec1 : AstDatabaseOptionspec
        {
            
            private AstAutoOption _autoOption;
            
            internal AstDatabaseOptionspec1(ParserRuleContext ctx, AstAutoOption autoOption) : 
                    base(ctx)
            {
                _autoOption = autoOption;
            }
            
            public virtual AstAutoOption AutoOption
            {
                get
                {
                    return _autoOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : change_tracking_set 
        /// </summary>
        public partial class AstDatabaseOptionspec2 : AstDatabaseOptionspec
        {
            
            private AstChangeTrackingSet _changeTrackingSet;
            
            internal AstDatabaseOptionspec2(ParserRuleContext ctx, AstChangeTrackingSet changeTrackingSet) : 
                    base(ctx)
            {
                _changeTrackingSet = changeTrackingSet;
            }
            
            public virtual AstChangeTrackingSet ChangeTrackingSet
            {
                get
                {
                    return _changeTrackingSet;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : containment_option 
        /// </summary>
        public partial class AstDatabaseOptionspec3 : AstDatabaseOptionspec
        {
            
            private AstContainmentOption _containmentOption;
            
            internal AstDatabaseOptionspec3(ParserRuleContext ctx, AstContainmentOption containmentOption) : 
                    base(ctx)
            {
                _containmentOption = containmentOption;
            }
            
            public virtual AstContainmentOption ContainmentOption
            {
                get
                {
                    return _containmentOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : cursor_option 
        /// </summary>
        public partial class AstDatabaseOptionspec4 : AstDatabaseOptionspec
        {
            
            private AstCursorOption _cursorOption;
            
            internal AstDatabaseOptionspec4(ParserRuleContext ctx, AstCursorOption cursorOption) : 
                    base(ctx)
            {
                _cursorOption = cursorOption;
            }
            
            public virtual AstCursorOption CursorOption
            {
                get
                {
                    return _cursorOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : database_mirroring_option 
        /// </summary>
        public partial class AstDatabaseOptionspec5 : AstDatabaseOptionspec
        {
            
            private AstDatabaseMirroringOption _databaseMirroringOption;
            
            internal AstDatabaseOptionspec5(ParserRuleContext ctx, AstDatabaseMirroringOption databaseMirroringOption) : 
                    base(ctx)
            {
                _databaseMirroringOption = databaseMirroringOption;
            }
            
            public virtual AstDatabaseMirroringOption DatabaseMirroringOption
            {
                get
                {
                    return _databaseMirroringOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : date_correlation_optimization_option 
        /// </summary>
        public partial class AstDatabaseOptionspec6 : AstDatabaseOptionspec
        {
            
            private AstDateCorrelationOptimizationOption _dateCorrelationOptimizationOption;
            
            internal AstDatabaseOptionspec6(ParserRuleContext ctx, AstDateCorrelationOptimizationOption dateCorrelationOptimizationOption) : 
                    base(ctx)
            {
                _dateCorrelationOptimizationOption = dateCorrelationOptimizationOption;
            }
            
            public virtual AstDateCorrelationOptimizationOption DateCorrelationOptimizationOption
            {
                get
                {
                    return _dateCorrelationOptimizationOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_encryption_option 
        /// </summary>
        public partial class AstDatabaseOptionspec7 : AstDatabaseOptionspec
        {
            
            private AstDbEncryptionOption _dbEncryptionOption;
            
            internal AstDatabaseOptionspec7(ParserRuleContext ctx, AstDbEncryptionOption dbEncryptionOption) : 
                    base(ctx)
            {
                _dbEncryptionOption = dbEncryptionOption;
            }
            
            public virtual AstDbEncryptionOption DbEncryptionOption
            {
                get
                {
                    return _dbEncryptionOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_state_option 
        /// </summary>
        public partial class AstDatabaseOptionspec8 : AstDatabaseOptionspec
        {
            
            private AstDbStateOption _dbStateOption;
            
            internal AstDatabaseOptionspec8(ParserRuleContext ctx, AstDbStateOption dbStateOption) : 
                    base(ctx)
            {
                _dbStateOption = dbStateOption;
            }
            
            public virtual AstDbStateOption DbStateOption
            {
                get
                {
                    return _dbStateOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_update_option 
        /// </summary>
        public partial class AstDatabaseOptionspec9 : AstDatabaseOptionspec
        {
            
            private AstDbUpdateOption _dbUpdateOption;
            
            internal AstDatabaseOptionspec9(ParserRuleContext ctx, AstDbUpdateOption dbUpdateOption) : 
                    base(ctx)
            {
                _dbUpdateOption = dbUpdateOption;
            }
            
            public virtual AstDbUpdateOption DbUpdateOption
            {
                get
                {
                    return _dbUpdateOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : db_user_access_option 
        /// </summary>
        public partial class AstDatabaseOptionspec10 : AstDatabaseOptionspec
        {
            
            private AstDbUserAccessOption _dbUserAccessOption;
            
            internal AstDatabaseOptionspec10(ParserRuleContext ctx, AstDbUserAccessOption dbUserAccessOption) : 
                    base(ctx)
            {
                _dbUserAccessOption = dbUserAccessOption;
            }
            
            public virtual AstDbUserAccessOption DbUserAccessOption
            {
                get
                {
                    return _dbUserAccessOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : delayed_durability_option 
        /// </summary>
        public partial class AstDatabaseOptionspec11 : AstDatabaseOptionspec
        {
            
            private AstDelayedDurabilityOption _delayedDurabilityOption;
            
            internal AstDatabaseOptionspec11(ParserRuleContext ctx, AstDelayedDurabilityOption delayedDurabilityOption) : 
                    base(ctx)
            {
                _delayedDurabilityOption = delayedDurabilityOption;
            }
            
            public virtual AstDelayedDurabilityOption DelayedDurabilityOption
            {
                get
                {
                    return _delayedDurabilityOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : external_access_option 
        /// </summary>
        public partial class AstDatabaseOptionspec12 : AstDatabaseOptionspec
        {
            
            private AstExternalAccessOption _externalAccessOption;
            
            internal AstDatabaseOptionspec12(ParserRuleContext ctx, AstExternalAccessOption externalAccessOption) : 
                    base(ctx)
            {
                _externalAccessOption = externalAccessOption;
            }
            
            public virtual AstExternalAccessOption ExternalAccessOption
            {
                get
                {
                    return _externalAccessOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : database_filestream 
        /// </summary>
        public partial class AstDatabaseOptionspec13 : AstDatabaseOptionspec
        {
            
            private AstDatabaseFilestream _databaseFilestream;
            
            internal AstDatabaseOptionspec13(ParserRuleContext ctx, AstDatabaseFilestream databaseFilestream) : 
                    base(ctx)
            {
                _databaseFilestream = databaseFilestream;
            }
            
            public virtual AstDatabaseFilestream DatabaseFilestream
            {
                get
                {
                    return _databaseFilestream;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : hadr_options 
        /// </summary>
        public partial class AstDatabaseOptionspec14 : AstDatabaseOptionspec
        {
            
            private AstHadrOptions _hadrOptions;
            
            internal AstDatabaseOptionspec14(ParserRuleContext ctx, AstHadrOptions hadrOptions) : 
                    base(ctx)
            {
                _hadrOptions = hadrOptions;
            }
            
            public virtual AstHadrOptions HadrOptions
            {
                get
                {
                    return _hadrOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : mixed_page_allocation_option 
        /// </summary>
        public partial class AstDatabaseOptionspec15 : AstDatabaseOptionspec
        {
            
            private AstMixedPageAllocationOption _mixedPageAllocationOption;
            
            internal AstDatabaseOptionspec15(ParserRuleContext ctx, AstMixedPageAllocationOption mixedPageAllocationOption) : 
                    base(ctx)
            {
                _mixedPageAllocationOption = mixedPageAllocationOption;
            }
            
            public virtual AstMixedPageAllocationOption MixedPageAllocationOption
            {
                get
                {
                    return _mixedPageAllocationOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : parameterization_option 
        /// </summary>
        public partial class AstDatabaseOptionspec16 : AstDatabaseOptionspec
        {
            
            private AstParameterizationOption _parameterizationOption;
            
            internal AstDatabaseOptionspec16(ParserRuleContext ctx, AstParameterizationOption parameterizationOption) : 
                    base(ctx)
            {
                _parameterizationOption = parameterizationOption;
            }
            
            public virtual AstParameterizationOption ParameterizationOption
            {
                get
                {
                    return _parameterizationOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : recovery_option 
        /// </summary>
        public partial class AstDatabaseOptionspec17 : AstDatabaseOptionspec
        {
            
            private AstRecoveryOption _recoveryOption;
            
            internal AstDatabaseOptionspec17(ParserRuleContext ctx, AstRecoveryOption recoveryOption) : 
                    base(ctx)
            {
                _recoveryOption = recoveryOption;
            }
            
            public virtual AstRecoveryOption RecoveryOption
            {
                get
                {
                    return _recoveryOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : service_broker_option 
        /// </summary>
        public partial class AstDatabaseOptionspec18 : AstDatabaseOptionspec
        {
            
            private AstServiceBrokerOption _serviceBrokerOption;
            
            internal AstDatabaseOptionspec18(ParserRuleContext ctx, AstServiceBrokerOption serviceBrokerOption) : 
                    base(ctx)
            {
                _serviceBrokerOption = serviceBrokerOption;
            }
            
            public virtual AstServiceBrokerOption ServiceBrokerOption
            {
                get
                {
                    return _serviceBrokerOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : snapshot_option 
        /// </summary>
        public partial class AstDatabaseOptionspec19 : AstDatabaseOptionspec
        {
            
            private AstSnapshotOption _snapshotOption;
            
            internal AstDatabaseOptionspec19(ParserRuleContext ctx, AstSnapshotOption snapshotOption) : 
                    base(ctx)
            {
                _snapshotOption = snapshotOption;
            }
            
            public virtual AstSnapshotOption SnapshotOption
            {
                get
                {
                    return _snapshotOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : sql_option 
        /// </summary>
        public partial class AstDatabaseOptionspec20 : AstDatabaseOptionspec
        {
            
            private AstSqlOption _sqlOption;
            
            internal AstDatabaseOptionspec20(ParserRuleContext ctx, AstSqlOption sqlOption) : 
                    base(ctx)
            {
                _sqlOption = sqlOption;
            }
            
            public virtual AstSqlOption SqlOption
            {
                get
                {
                    return _sqlOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : target_recovery_time_option 
        /// </summary>
        public partial class AstDatabaseOptionspec21 : AstDatabaseOptionspec
        {
            
            private AstTargetRecoveryTimeOption _targetRecoveryTimeOption;
            
            internal AstDatabaseOptionspec21(ParserRuleContext ctx, AstTargetRecoveryTimeOption targetRecoveryTimeOption) : 
                    base(ctx)
            {
                _targetRecoveryTimeOption = targetRecoveryTimeOption;
            }
            
            public virtual AstTargetRecoveryTimeOption TargetRecoveryTimeOption
            {
                get
                {
                    return _targetRecoveryTimeOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        /// <summary>
        /// database_optionspec : termination 
        /// </summary>
        public partial class AstDatabaseOptionspec22 : AstDatabaseOptionspec
        {
            
            private AstTermination _termination;
            
            internal AstDatabaseOptionspec22(ParserRuleContext ctx, AstTermination termination) : 
                    base(ctx)
            {
                _termination = termination;
            }
            
            public virtual AstTermination Termination
            {
                get
                {
                    return _termination;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseOptionspec(this);
            }
        }
        

        
        internal AstDatabaseOptionspec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseOptionspec(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseOptionspec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDatabaseOptionspec Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDatabaseOptionspec.Resolve(list);
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec1(ctx, ((AstAutoOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec2(ctx, ((AstChangeTrackingSet)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec3(ctx, ((AstContainmentOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec4(ctx, ((AstCursorOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec5(ctx, ((AstDatabaseMirroringOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec6(ctx, ((AstDateCorrelationOptimizationOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec7(ctx, ((AstDbEncryptionOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec8(ctx, ((AstDbStateOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec9(ctx, ((AstDbUpdateOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec10(ctx, ((AstDbUserAccessOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec11(ctx, ((AstDelayedDurabilityOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec12(ctx, ((AstExternalAccessOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec13(ctx, ((AstDatabaseFilestream)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec14(ctx, ((AstHadrOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec15(ctx, ((AstMixedPageAllocationOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec16(ctx, ((AstParameterizationOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec17(ctx, ((AstRecoveryOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec18(ctx, ((AstServiceBrokerOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec19(ctx, ((AstSnapshotOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec20(ctx, ((AstSqlOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec21(ctx, ((AstTargetRecoveryTimeOption)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseOptionspec.AstDatabaseOptionspec22(ctx, ((AstTermination)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAutoOption), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstChangeTrackingSet), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstContainmentOption), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorOption), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstDatabaseMirroringOption), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDateCorrelationOptimizationOption), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbEncryptionOption), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbStateOption), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbUpdateOption), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstDbUserAccessOption), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstDelayedDurabilityOption), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstExternalAccessOption), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstDatabaseFilestream), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstHadrOptions), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstMixedPageAllocationOption), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstParameterizationOption), false, false))
                {
                    return 16;
                }
                if (AstRoot.Eval(list[0], typeof(AstRecoveryOption), false, false))
                {
                    return 17;
                }
                if (AstRoot.Eval(list[0], typeof(AstServiceBrokerOption), false, false))
                {
                    return 18;
                }
                if (AstRoot.Eval(list[0], typeof(AstSnapshotOption), false, false))
                {
                    return 19;
                }
                if (AstRoot.Eval(list[0], typeof(AstSqlOption), false, false))
                {
                    return 20;
                }
                if (AstRoot.Eval(list[0], typeof(AstTargetRecoveryTimeOption), false, false))
                {
                    return 21;
                }
                if (AstRoot.Eval(list[0], typeof(AstTermination), false, false))
                {
                    return 22;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    auto_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstAutoOption autoOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec1 result = new AstDatabaseOptionspec.AstDatabaseOptionspec1(ctx, autoOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    change_tracking_set 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstChangeTrackingSet changeTrackingSet)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec2 result = new AstDatabaseOptionspec.AstDatabaseOptionspec2(ctx, changeTrackingSet);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    containment_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstContainmentOption containmentOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec3 result = new AstDatabaseOptionspec.AstDatabaseOptionspec3(ctx, containmentOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    cursor_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstCursorOption cursorOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec4 result = new AstDatabaseOptionspec.AstDatabaseOptionspec4(ctx, cursorOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    database_mirroring_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDatabaseMirroringOption databaseMirroringOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec5 result = new AstDatabaseOptionspec.AstDatabaseOptionspec5(ctx, databaseMirroringOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    date_correlation_optimization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDateCorrelationOptimizationOption dateCorrelationOptimizationOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec6 result = new AstDatabaseOptionspec.AstDatabaseOptionspec6(ctx, dateCorrelationOptimizationOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_encryption_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbEncryptionOption dbEncryptionOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec7 result = new AstDatabaseOptionspec.AstDatabaseOptionspec7(ctx, dbEncryptionOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_state_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbStateOption dbStateOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec8 result = new AstDatabaseOptionspec.AstDatabaseOptionspec8(ctx, dbStateOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_update_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbUpdateOption dbUpdateOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec9 result = new AstDatabaseOptionspec.AstDatabaseOptionspec9(ctx, dbUpdateOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    db_user_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDbUserAccessOption dbUserAccessOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec10 result = new AstDatabaseOptionspec.AstDatabaseOptionspec10(ctx, dbUserAccessOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    delayed_durability_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDelayedDurabilityOption delayedDurabilityOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec11 result = new AstDatabaseOptionspec.AstDatabaseOptionspec11(ctx, delayedDurabilityOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    external_access_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstExternalAccessOption externalAccessOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec12 result = new AstDatabaseOptionspec.AstDatabaseOptionspec12(ctx, externalAccessOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    database_filestream 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstDatabaseFilestream databaseFilestream)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec13 result = new AstDatabaseOptionspec.AstDatabaseOptionspec13(ctx, databaseFilestream);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    hadr_options 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstHadrOptions hadrOptions)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec14 result = new AstDatabaseOptionspec.AstDatabaseOptionspec14(ctx, hadrOptions);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    mixed_page_allocation_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstMixedPageAllocationOption mixedPageAllocationOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec15 result = new AstDatabaseOptionspec.AstDatabaseOptionspec15(ctx, mixedPageAllocationOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    parameterization_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstParameterizationOption parameterizationOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec16 result = new AstDatabaseOptionspec.AstDatabaseOptionspec16(ctx, parameterizationOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    recovery_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstRecoveryOption recoveryOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec17 result = new AstDatabaseOptionspec.AstDatabaseOptionspec17(ctx, recoveryOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    service_broker_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstServiceBrokerOption serviceBrokerOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec18 result = new AstDatabaseOptionspec.AstDatabaseOptionspec18(ctx, serviceBrokerOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    snapshot_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstSnapshotOption snapshotOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec19 result = new AstDatabaseOptionspec.AstDatabaseOptionspec19(ctx, snapshotOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    sql_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstSqlOption sqlOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec20 result = new AstDatabaseOptionspec.AstDatabaseOptionspec20(ctx, sqlOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    target_recovery_time_option 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstTargetRecoveryTimeOption targetRecoveryTimeOption)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec21 result = new AstDatabaseOptionspec.AstDatabaseOptionspec21(ctx, targetRecoveryTimeOption);
            return result;
        }
        
        /// <summary>
        /// database_optionspec : 
        ///    termination 
        /// </summary>
        public static AstDatabaseOptionspec DatabaseOptionspec(ParserRuleContext ctx, AstTermination termination)
        {
            AstDatabaseOptionspec.AstDatabaseOptionspec22 result = new AstDatabaseOptionspec.AstDatabaseOptionspec22(ctx, termination);
            return result;
        }
    }
    
    /// <summary>
    /// auto_option
    /// 	 : AUTO_CLOSE  on_off
    /// 	 | AUTO_CREATE_STATISTICS  statistic_value
    /// 	 | AUTO_SHRINK  on_off
    /// 	 | AUTO_UPDATE_STATISTICS  on_off
    /// 	 | AUTO_UPDATE_STATISTICS_ASYNC  on_off
    /// </summary>
    public abstract partial class AstAutoOption : AstBnfRule
    {
        
        protected static string _rule = "auto_option\r\n\t : AUTO_CLOSE  on_off\r\n\t | AUTO_CREATE_STATISTICS  statistic_value\r" +
            "\n\t | AUTO_SHRINK  on_off\r\n\t | AUTO_UPDATE_STATISTICS  on_off\r\n\t | AUTO_UPDATE_ST" +
            "ATISTICS_ASYNC  on_off";
        
        /// <summary>
        /// auto_option : AUTO_CLOSE on_off 
        /// </summary>
        public partial class AstAutoOption1 : AstAutoOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAutoOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_CREATE_STATISTICS statistic_value 
        /// </summary>
        public partial class AstAutoOption2 : AstAutoOption
        {
            
            private AstStatisticValue _statisticValue;
            
            internal AstAutoOption2(ParserRuleContext ctx, AstStatisticValue statisticValue) : 
                    base(ctx)
            {
                _statisticValue = statisticValue;
            }
            
            public virtual AstStatisticValue StatisticValue
            {
                get
                {
                    return _statisticValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_SHRINK on_off 
        /// </summary>
        public partial class AstAutoOption3 : AstAutoOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAutoOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_UPDATE_STATISTICS on_off 
        /// </summary>
        public partial class AstAutoOption4 : AstAutoOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAutoOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        /// <summary>
        /// auto_option : AUTO_UPDATE_STATISTICS_ASYNC on_off 
        /// </summary>
        public partial class AstAutoOption5 : AstAutoOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAutoOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAutoOption(this);
            }
        }
        

        
        internal AstAutoOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAutoOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAutoOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAutoOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAutoOption.Resolve(list);
            if ((index == 2))
            {
                return new AstAutoOption.AstAutoOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAutoOption.AstAutoOption2(ctx, ((AstStatisticValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAutoOption.AstAutoOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAutoOption.AstAutoOption4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAutoOption.AstAutoOption5(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStatisticValue), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// auto_option : 
        ///    AUTO_CLOSE on_off 
        /// </summary>
        public static AstAutoOption AutoOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAutoOption.AstAutoOption1 result = new AstAutoOption.AstAutoOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// auto_option : 
        ///    AUTO_CREATE_STATISTICS statistic_value 
        /// </summary>
        public static AstAutoOption AutoOption(ParserRuleContext ctx, AstStatisticValue statisticValue)
        {
            AstAutoOption.AstAutoOption2 result = new AstAutoOption.AstAutoOption2(ctx, statisticValue);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking_set
    /// 	 : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_list)
    /// </summary>
    public abstract partial class AstChangeTrackingSet : AstBnfRule
    {
        
        protected static string _rule = "change_tracking_set\r\n\t : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_optio" +
            "n_list)";
        
        /// <summary>
        /// change_tracking_set : CHANGE_TRACKING EQUAL OFF 
        /// </summary>
        public partial class AstChangeTrackingSet1 : AstChangeTrackingSet
        {
            
            internal AstChangeTrackingSet1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingSet(this);
            }
        }
        /// <summary>
        /// change_tracking_set : CHANGE_TRACKING EQUAL ON change_tracking_option_list 
        /// </summary>
        public partial class AstChangeTrackingSet2 : AstChangeTrackingSet
        {
            
            private AstChangeTrackingOptionList _changeTrackingOptionList;
            
            internal AstChangeTrackingSet2(ParserRuleContext ctx, AstChangeTrackingOptionList changeTrackingOptionList) : 
                    base(ctx)
            {
                _changeTrackingOptionList = changeTrackingOptionList;
            }
            
            public virtual AstChangeTrackingOptionList ChangeTrackingOptionList
            {
                get
                {
                    return _changeTrackingOptionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingSet(this);
            }
        }
        

        
        internal AstChangeTrackingSet(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTrackingSet(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTrackingSet(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstChangeTrackingSet Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstChangeTrackingSet.Resolve(list);
            if ((index == 1))
            {
                return new AstChangeTrackingSet.AstChangeTrackingSet1(ctx);
            }
            if ((index == 2))
            {
                return new AstChangeTrackingSet.AstChangeTrackingSet2(ctx, ((AstChangeTrackingOptionList)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstChangeTrackingOptionList), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// change_tracking_set : 
        ///    CHANGE_TRACKING EQUAL OFF 
        /// </summary>
        public static AstChangeTrackingSet ChangeTrackingSet(ParserRuleContext ctx)
        {
            AstChangeTrackingSet.AstChangeTrackingSet1 result = new AstChangeTrackingSet.AstChangeTrackingSet1(ctx);
            return result;
        }
        
        /// <summary>
        /// change_tracking_set : 
        ///    CHANGE_TRACKING EQUAL ON change_tracking_option_list 
        /// </summary>
        public static AstChangeTrackingSet ChangeTrackingSet(ParserRuleContext ctx, AstChangeTrackingOptionList changeTrackingOptionList)
        {
            AstChangeTrackingSet.AstChangeTrackingSet2 result = new AstChangeTrackingSet.AstChangeTrackingSet2(ctx, changeTrackingOptionList);
            return result;
        }
    }
    
    /// <summary>
    /// change_tracking_option_list
    /// 	 : AUTO_CLEANUP  EQUAL  on_off
    /// 	 | CHANGE_RETENTION  EQUAL  period
    /// </summary>
    public abstract partial class AstChangeTrackingOptionList : AstBnfRule
    {
        
        protected static string _rule = "change_tracking_option_list\r\n\t : AUTO_CLEANUP  EQUAL  on_off\r\n\t | CHANGE_RETENTIO" +
            "N  EQUAL  period";
        
        /// <summary>
        /// change_tracking_option_list : AUTO_CLEANUP EQUAL on_off 
        /// </summary>
        public partial class AstChangeTrackingOptionList1 : AstChangeTrackingOptionList
        {
            
            private AstOnOff _onOff;
            
            internal AstChangeTrackingOptionList1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingOptionList(this);
            }
        }
        /// <summary>
        /// change_tracking_option_list : CHANGE_RETENTION EQUAL period 
        /// </summary>
        public partial class AstChangeTrackingOptionList2 : AstChangeTrackingOptionList
        {
            
            private AstPeriod _period;
            
            internal AstChangeTrackingOptionList2(ParserRuleContext ctx, AstPeriod period) : 
                    base(ctx)
            {
                _period = period;
            }
            
            public virtual AstPeriod Period
            {
                get
                {
                    return _period;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTrackingOptionList(this);
            }
        }
        

        
        internal AstChangeTrackingOptionList(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTrackingOptionList(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTrackingOptionList(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstChangeTrackingOptionList Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstChangeTrackingOptionList.Resolve(list);
            if ((index == 2))
            {
                return new AstChangeTrackingOptionList.AstChangeTrackingOptionList1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstChangeTrackingOptionList.AstChangeTrackingOptionList2(ctx, ((AstPeriod)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstPeriod), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// change_tracking_option_list : 
        ///    AUTO_CLEANUP EQUAL on_off 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstChangeTrackingOptionList.AstChangeTrackingOptionList1 result = new AstChangeTrackingOptionList.AstChangeTrackingOptionList1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// change_tracking_option_list : 
        ///    CHANGE_RETENTION EQUAL period 
        /// </summary>
        public static AstChangeTrackingOptionList ChangeTrackingOptionList(ParserRuleContext ctx, AstPeriod period)
        {
            AstChangeTrackingOptionList.AstChangeTrackingOptionList2 result = new AstChangeTrackingOptionList.AstChangeTrackingOptionList2(ctx, period);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_option
    /// 	 : CURSOR_CLOSE_ON_COMMIT  on_off
    /// 	 | CURSOR_DEFAULT  local_global
    /// </summary>
    public abstract partial class AstCursorOption : AstBnfRule
    {
        
        protected static string _rule = "cursor_option\r\n\t : CURSOR_CLOSE_ON_COMMIT  on_off\r\n\t | CURSOR_DEFAULT  local_glob" +
            "al";
        
        /// <summary>
        /// cursor_option : CURSOR_CLOSE_ON_COMMIT on_off 
        /// </summary>
        public partial class AstCursorOption1 : AstCursorOption
        {
            
            private AstOnOff _onOff;
            
            internal AstCursorOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorOption(this);
            }
        }
        /// <summary>
        /// cursor_option : CURSOR_DEFAULT local_global 
        /// </summary>
        public partial class AstCursorOption2 : AstCursorOption
        {
            
            private AstLocalGlobal _localGlobal;
            
            internal AstCursorOption2(ParserRuleContext ctx, AstLocalGlobal localGlobal) : 
                    base(ctx)
            {
                _localGlobal = localGlobal;
            }
            
            public virtual AstLocalGlobal LocalGlobal
            {
                get
                {
                    return _localGlobal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorOption(this);
            }
        }
        

        
        internal AstCursorOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCursorOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCursorOption.Resolve(list);
            if ((index == 2))
            {
                return new AstCursorOption.AstCursorOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCursorOption.AstCursorOption2(ctx, ((AstLocalGlobal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalGlobal), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// cursor_option : 
        ///    CURSOR_CLOSE_ON_COMMIT on_off 
        /// </summary>
        public static AstCursorOption CursorOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstCursorOption.AstCursorOption1 result = new AstCursorOption.AstCursorOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// cursor_option : 
        ///    CURSOR_DEFAULT local_global 
        /// </summary>
        public static AstCursorOption CursorOption(ParserRuleContext ctx, AstLocalGlobal localGlobal)
        {
            AstCursorOption.AstCursorOption2 result = new AstCursorOption.AstCursorOption2(ctx, localGlobal);
            return result;
        }
    }
    
    /// <summary>
    /// listener_ip_addr
    /// 	 : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)
    /// </summary>
    public abstract partial class AstListenerIpAddr : AstBnfRule
    {
        
        protected static string _rule = "listener_ip_addr\r\n\t : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)";
        
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL ALL 
        /// </summary>
        public partial class AstListenerIpAddr1 : AstListenerIpAddr
        {
            
            internal AstListenerIpAddr1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL ipv4 
        /// </summary>
        public partial class AstListenerIpAddr2 : AstListenerIpAddr
        {
            
            private AstIpv4 _ipv4;
            
            internal AstListenerIpAddr2(ParserRuleContext ctx, AstIpv4 ipv4) : 
                    base(ctx)
            {
                _ipv4 = ipv4;
            }
            
            public virtual AstIpv4 Ipv4
            {
                get
                {
                    return _ipv4;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL ipv6 
        /// </summary>
        public partial class AstListenerIpAddr3 : AstListenerIpAddr
        {
            
            private AstIpv6 _ipv6;
            
            internal AstListenerIpAddr3(ParserRuleContext ctx, AstIpv6 ipv6) : 
                    base(ctx)
            {
                _ipv6 = ipv6;
            }
            
            public virtual AstIpv6 Ipv6
            {
                get
                {
                    return _ipv6;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        /// <summary>
        /// listener_ip_addr : LISTENER_IP EQUAL stringtext 
        /// </summary>
        public partial class AstListenerIpAddr4 : AstListenerIpAddr
        {
            
            private AstStringtext _stringtext;
            
            internal AstListenerIpAddr4(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitListenerIpAddr(this);
            }
        }
        

        
        internal AstListenerIpAddr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstListenerIpAddr(Position p) : 
                base(p)
        {
        }
        
        internal AstListenerIpAddr(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstListenerIpAddr Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstListenerIpAddr.Resolve(list);
            if ((index == 1))
            {
                return new AstListenerIpAddr.AstListenerIpAddr1(ctx);
            }
            if ((index == 2))
            {
                return new AstListenerIpAddr.AstListenerIpAddr2(ctx, ((AstIpv4)(list[0])));
            }
            if ((index == 2))
            {
                return new AstListenerIpAddr.AstListenerIpAddr3(ctx, ((AstIpv6)(list[0])));
            }
            if ((index == 2))
            {
                return new AstListenerIpAddr.AstListenerIpAddr4(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstIpv4), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstIpv6), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL ALL 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx)
        {
            AstListenerIpAddr.AstListenerIpAddr1 result = new AstListenerIpAddr.AstListenerIpAddr1(ctx);
            return result;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL ipv4 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx, AstIpv4 ipv4)
        {
            AstListenerIpAddr.AstListenerIpAddr2 result = new AstListenerIpAddr.AstListenerIpAddr2(ctx, ipv4);
            return result;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL ipv6 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx, AstIpv6 ipv6)
        {
            AstListenerIpAddr.AstListenerIpAddr3 result = new AstListenerIpAddr.AstListenerIpAddr3(ctx, ipv6);
            return result;
        }
        
        /// <summary>
        /// listener_ip_addr : 
        ///    LISTENER_IP EQUAL stringtext 
        /// </summary>
        public static AstListenerIpAddr ListenerIpAddr(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstListenerIpAddr.AstListenerIpAddr4 result = new AstListenerIpAddr.AstListenerIpAddr4(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// authentication_configuration
    /// 	 : AUTHENTICATION  EQUAL  (WINDOWS  authentication_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  authentication_mode?)
    /// </summary>
    public abstract partial class AstAuthenticationConfiguration : AstBnfRule
    {
        
        protected static string _rule = "authentication_configuration\r\n\t : AUTHENTICATION  EQUAL  (WINDOWS  authentication" +
            "_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  " +
            "authentication_mode?)";
        
        /// <summary>
        /// authentication_configuration : AUTHENTICATION EQUAL WINDOWS authentication_mode? CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstAuthenticationConfiguration1 : AstAuthenticationConfiguration
        {
            
            private AstAuthenticationMode _authenticationMode;
            
            private AstCertificateId _certificateId;
            
            internal AstAuthenticationConfiguration1(ParserRuleContext ctx, AstAuthenticationMode authenticationMode, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _authenticationMode = authenticationMode;
                _certificateId = certificateId;
            }
            
            public virtual AstAuthenticationMode AuthenticationMode
            {
                get
                {
                    return _authenticationMode;
                }
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthenticationConfiguration(this);
            }
        }
        /// <summary>
        /// authentication_configuration : AUTHENTICATION EQUAL CERTIFICATE certificate_id WINDOWS? authentication_mode? 
        /// </summary>
        public partial class AstAuthenticationConfiguration2 : AstAuthenticationConfiguration
        {
            
            private AstCertificateId _certificateId;
            
            private AstAuthenticationMode _authenticationMode;
            
            internal AstAuthenticationConfiguration2(ParserRuleContext ctx, AstCertificateId certificateId, AstAuthenticationMode authenticationMode) : 
                    base(ctx)
            {
                _certificateId = certificateId;
                _authenticationMode = authenticationMode;
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public virtual AstAuthenticationMode AuthenticationMode
            {
                get
                {
                    return _authenticationMode;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAuthenticationConfiguration(this);
            }
        }
        

        
        internal AstAuthenticationConfiguration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAuthenticationConfiguration(Position p) : 
                base(p)
        {
        }
        
        internal AstAuthenticationConfiguration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAuthenticationConfiguration Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAuthenticationConfiguration.Resolve(list);
            if ((index == 3))
            {
                return new AstAuthenticationConfiguration.AstAuthenticationConfiguration1(ctx, ((AstAuthenticationMode)(list[0])), ((AstCertificateId)(list[1])));
            }
            if ((index == 3))
            {
                return new AstAuthenticationConfiguration.AstAuthenticationConfiguration2(ctx, ((AstCertificateId)(list[0])), ((AstAuthenticationMode)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAuthenticationMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCertificateId), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAuthenticationMode), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// authentication_configuration : 
        ///    AUTHENTICATION EQUAL WINDOWS authentication_mode? CERTIFICATE certificate_id 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(ParserRuleContext ctx, AstAuthenticationMode authenticationMode, AstCertificateId certificateId)
        {
            AstAuthenticationConfiguration.AstAuthenticationConfiguration1 result = new AstAuthenticationConfiguration.AstAuthenticationConfiguration1(ctx, authenticationMode, certificateId);
            return result;
        }
        
        /// <summary>
        /// authentication_configuration : 
        ///    AUTHENTICATION EQUAL CERTIFICATE certificate_id WINDOWS? authentication_mode? 
        /// </summary>
        public static AstAuthenticationConfiguration AuthenticationConfiguration(ParserRuleContext ctx, AstCertificateId certificateId, AstAuthenticationMode authenticationMode)
        {
            AstAuthenticationConfiguration.AstAuthenticationConfiguration2 result = new AstAuthenticationConfiguration.AstAuthenticationConfiguration2(ctx, certificateId, authenticationMode);
            return result;
        }
    }
    
    /// <summary>
    /// mirroring_set_option
    /// 	 : mirroring_partner  partner_option
    /// 	 | mirroring_witness  witness_option
    /// </summary>
    public abstract partial class AstMirroringSetOption : AstBnfRule
    {
        
        protected static string _rule = "mirroring_set_option\r\n\t : mirroring_partner  partner_option\r\n\t | mirroring_witnes" +
            "s  witness_option";
        
        /// <summary>
        /// mirroring_set_option : mirroring_partner partner_option 
        /// </summary>
        public partial class AstMirroringSetOption1 : AstMirroringSetOption
        {
            
            private AstMirroringPartner _mirroringPartner;
            
            private AstPartnerOption _partnerOption;
            
            internal AstMirroringSetOption1(ParserRuleContext ctx, AstMirroringPartner mirroringPartner, AstPartnerOption partnerOption) : 
                    base(ctx)
            {
                _mirroringPartner = mirroringPartner;
                _partnerOption = partnerOption;
            }
            
            public virtual AstMirroringPartner MirroringPartner
            {
                get
                {
                    return _mirroringPartner;
                }
            }
            
            public virtual AstPartnerOption PartnerOption
            {
                get
                {
                    return _partnerOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMirroringSetOption(this);
            }
        }
        /// <summary>
        /// mirroring_set_option : mirroring_witness witness_option 
        /// </summary>
        public partial class AstMirroringSetOption2 : AstMirroringSetOption
        {
            
            private AstMirroringWitness _mirroringWitness;
            
            private AstWitnessOption _witnessOption;
            
            internal AstMirroringSetOption2(ParserRuleContext ctx, AstMirroringWitness mirroringWitness, AstWitnessOption witnessOption) : 
                    base(ctx)
            {
                _mirroringWitness = mirroringWitness;
                _witnessOption = witnessOption;
            }
            
            public virtual AstMirroringWitness MirroringWitness
            {
                get
                {
                    return _mirroringWitness;
                }
            }
            
            public virtual AstWitnessOption WitnessOption
            {
                get
                {
                    return _witnessOption;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMirroringSetOption(this);
            }
        }
        

        
        internal AstMirroringSetOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMirroringSetOption(Position p) : 
                base(p)
        {
        }
        
        internal AstMirroringSetOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMirroringSetOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMirroringSetOption.Resolve(list);
            if ((index == 3))
            {
                return new AstMirroringSetOption.AstMirroringSetOption1(ctx, ((AstMirroringPartner)(list[0])), ((AstPartnerOption)(list[1])));
            }
            if ((index == 3))
            {
                return new AstMirroringSetOption.AstMirroringSetOption2(ctx, ((AstMirroringWitness)(list[0])), ((AstWitnessOption)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstMirroringPartner), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPartnerOption), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstMirroringWitness), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWitnessOption), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// mirroring_set_option : 
        ///    mirroring_partner partner_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(ParserRuleContext ctx, AstMirroringPartner mirroringPartner, AstPartnerOption partnerOption)
        {
            AstMirroringSetOption.AstMirroringSetOption1 result = new AstMirroringSetOption.AstMirroringSetOption1(ctx, mirroringPartner, partnerOption);
            return result;
        }
        
        /// <summary>
        /// mirroring_set_option : 
        ///    mirroring_witness witness_option 
        /// </summary>
        public static AstMirroringSetOption MirroringSetOption(ParserRuleContext ctx, AstMirroringWitness mirroringWitness, AstWitnessOption witnessOption)
        {
            AstMirroringSetOption.AstMirroringSetOption2 result = new AstMirroringSetOption.AstMirroringSetOption2(ctx, mirroringWitness, witnessOption);
            return result;
        }
    }
    
    /// <summary>
    /// partner_option
    /// 	 : witness_partner_equal  partner_server
    /// 	 | TIMEOUT  decimal
    /// 	 | partner_option_enum
    /// </summary>
    public abstract partial class AstPartnerOption : AstBnfRule
    {
        
        protected static string _rule = "partner_option\r\n\t : witness_partner_equal  partner_server\r\n\t | TIMEOUT  decimal\r\n" +
            "\t | partner_option_enum";
        
        /// <summary>
        /// partner_option : witness_partner_equal partner_server 
        /// </summary>
        public partial class AstPartnerOption1 : AstPartnerOption
        {
            
            private AstWitnessPartnerEqual _witnessPartnerEqual;
            
            private AstPartnerServer _partnerServer;
            
            internal AstPartnerOption1(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstPartnerServer partnerServer) : 
                    base(ctx)
            {
                _witnessPartnerEqual = witnessPartnerEqual;
                _partnerServer = partnerServer;
            }
            
            public virtual AstWitnessPartnerEqual WitnessPartnerEqual
            {
                get
                {
                    return _witnessPartnerEqual;
                }
            }
            
            public virtual AstPartnerServer PartnerServer
            {
                get
                {
                    return _partnerServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        /// <summary>
        /// partner_option : TIMEOUT decimal 
        /// </summary>
        public partial class AstPartnerOption2 : AstPartnerOption
        {
            
            private AstDecimal _decimal;
            
            internal AstPartnerOption2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        /// <summary>
        /// partner_option : partner_option_enum 
        /// </summary>
        public partial class AstPartnerOption3 : AstPartnerOption
        {
            
            private AstPartnerOptionEnum _partnerOptionEnum;
            
            internal AstPartnerOption3(ParserRuleContext ctx, AstPartnerOptionEnum partnerOptionEnum) : 
                    base(ctx)
            {
                _partnerOptionEnum = partnerOptionEnum;
            }
            
            public virtual AstPartnerOptionEnum PartnerOptionEnum
            {
                get
                {
                    return _partnerOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPartnerOption(this);
            }
        }
        

        
        internal AstPartnerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPartnerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstPartnerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPartnerOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPartnerOption.Resolve(list);
            if ((index == 3))
            {
                return new AstPartnerOption.AstPartnerOption1(ctx, ((AstWitnessPartnerEqual)(list[0])), ((AstPartnerServer)(list[1])));
            }
            if ((index == 2))
            {
                return new AstPartnerOption.AstPartnerOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPartnerOption.AstPartnerOption3(ctx, ((AstPartnerOptionEnum)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWitnessPartnerEqual), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPartnerServer), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstPartnerOptionEnum), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// partner_option : 
        ///    witness_partner_equal partner_server 
        /// </summary>
        public static AstPartnerOption PartnerOption(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstPartnerServer partnerServer)
        {
            AstPartnerOption.AstPartnerOption1 result = new AstPartnerOption.AstPartnerOption1(ctx, witnessPartnerEqual, partnerServer);
            return result;
        }
        
        /// <summary>
        /// partner_option : 
        ///    TIMEOUT decimal 
        /// </summary>
        public static AstPartnerOption PartnerOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstPartnerOption.AstPartnerOption2 result = new AstPartnerOption.AstPartnerOption2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// partner_option : 
        ///    partner_option_enum 
        /// </summary>
        public static AstPartnerOption PartnerOption(ParserRuleContext ctx, AstPartnerOptionEnum partnerOptionEnum)
        {
            AstPartnerOption.AstPartnerOption3 result = new AstPartnerOption.AstPartnerOption3(ctx, partnerOptionEnum);
            return result;
        }
    }
    
    /// <summary>
    /// witness_option
    /// 	 : witness_partner_equal  witness_server
    /// 	 | OFF
    /// </summary>
    public abstract partial class AstWitnessOption : AstBnfRule
    {
        
        protected static string _rule = "witness_option\r\n\t : witness_partner_equal  witness_server\r\n\t | OFF";
        
        /// <summary>
        /// witness_option : witness_partner_equal witness_server 
        /// </summary>
        public partial class AstWitnessOption1 : AstWitnessOption
        {
            
            private AstWitnessPartnerEqual _witnessPartnerEqual;
            
            private AstWitnessServer _witnessServer;
            
            internal AstWitnessOption1(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstWitnessServer witnessServer) : 
                    base(ctx)
            {
                _witnessPartnerEqual = witnessPartnerEqual;
                _witnessServer = witnessServer;
            }
            
            public virtual AstWitnessPartnerEqual WitnessPartnerEqual
            {
                get
                {
                    return _witnessPartnerEqual;
                }
            }
            
            public virtual AstWitnessServer WitnessServer
            {
                get
                {
                    return _witnessServer;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWitnessOption(this);
            }
        }
        /// <summary>
        /// witness_option : OFF 
        /// </summary>
        public partial class AstWitnessOption2 : AstWitnessOption
        {
            
            internal AstWitnessOption2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWitnessOption(this);
            }
        }
        

        
        internal AstWitnessOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWitnessOption(Position p) : 
                base(p)
        {
        }
        
        internal AstWitnessOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWitnessOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWitnessOption.Resolve(list);
            if ((index == 3))
            {
                return new AstWitnessOption.AstWitnessOption1(ctx, ((AstWitnessPartnerEqual)(list[0])), ((AstWitnessServer)(list[1])));
            }
            if ((index == 1))
            {
                return new AstWitnessOption.AstWitnessOption2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWitnessPartnerEqual), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWitnessServer), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// witness_option : 
        ///    witness_partner_equal witness_server 
        /// </summary>
        public static AstWitnessOption WitnessOption(ParserRuleContext ctx, AstWitnessPartnerEqual witnessPartnerEqual, AstWitnessServer witnessServer)
        {
            AstWitnessOption.AstWitnessOption1 result = new AstWitnessOption.AstWitnessOption1(ctx, witnessPartnerEqual, witnessServer);
            return result;
        }
        
        /// <summary>
        /// witness_option : 
        ///    OFF 
        /// </summary>
        public static AstWitnessOption WitnessOption(ParserRuleContext ctx)
        {
            AstWitnessOption.AstWitnessOption2 result = new AstWitnessOption.AstWitnessOption2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// partner_server_tcp_prefix
    /// 	 : TCP  COLON  DOUBLE_FORWARD_SLASH
    /// </summary>
    public partial class AstPartnerServerTcpPrefix : AstBnfRule
    {
        
        protected static string _rule = "partner_server_tcp_prefix\r\n\t : TCP  COLON  DOUBLE_FORWARD_SLASH";
        
        internal AstPartnerServerTcpPrefix(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstPartnerServerTcpPrefix(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstPartnerServerTcpPrefix(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstPartnerServerTcpPrefix(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServerTcpPrefix(this);
        }
        
        /// <summary>
        /// partner_server_tcp_prefix : 
        ///    TCP : DOUBLE_FORWARD_SLASH 
        /// </summary>
        public static AstPartnerServerTcpPrefix PartnerServerTcpPrefix(ParserRuleContext ctx)
        {
            AstPartnerServerTcpPrefix result = new AstPartnerServerTcpPrefix(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// external_access_option
    /// 	 : DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// 	 | DEFAULT_LANGUAGE  EQUAL  language_setting
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  language_setting
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// </summary>
    public abstract partial class AstExternalAccessOption : AstBnfRule
    {
        
        protected static string _rule = @"external_access_option
	 : DB_CHAINING  on_off
	 | TRUSTWORTHY  on_off
	 | DEFAULT_LANGUAGE  EQUAL  language_setting
	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  language_setting
	 | NESTED_TRIGGERS  EQUAL  on_off
	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal";
        
        /// <summary>
        /// external_access_option : DB_CHAINING on_off 
        /// </summary>
        public partial class AstExternalAccessOption1 : AstExternalAccessOption
        {
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TRUSTWORTHY on_off 
        /// </summary>
        public partial class AstExternalAccessOption2 : AstExternalAccessOption
        {
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : DEFAULT_LANGUAGE EQUAL language_setting 
        /// </summary>
        public partial class AstExternalAccessOption3 : AstExternalAccessOption
        {
            
            private AstLanguageSetting _languageSetting;
            
            internal AstExternalAccessOption3(ParserRuleContext ctx, AstLanguageSetting languageSetting) : 
                    base(ctx)
            {
                _languageSetting = languageSetting;
            }
            
            public virtual AstLanguageSetting LanguageSetting
            {
                get
                {
                    return _languageSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : DEFAULT_FULLTEXT_LANGUAGE EQUAL language_setting 
        /// </summary>
        public partial class AstExternalAccessOption4 : AstExternalAccessOption
        {
            
            private AstLanguageSetting _languageSetting;
            
            internal AstExternalAccessOption4(ParserRuleContext ctx, AstLanguageSetting languageSetting) : 
                    base(ctx)
            {
                _languageSetting = languageSetting;
            }
            
            public virtual AstLanguageSetting LanguageSetting
            {
                get
                {
                    return _languageSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public partial class AstExternalAccessOption5 : AstExternalAccessOption
        {
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TRANSFORM_NOISE_WORDS EQUAL on_off 
        /// </summary>
        public partial class AstExternalAccessOption6 : AstExternalAccessOption
        {
            
            private AstOnOff _onOff;
            
            internal AstExternalAccessOption6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        /// <summary>
        /// external_access_option : TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public partial class AstExternalAccessOption7 : AstExternalAccessOption
        {
            
            private AstDecimal _decimal;
            
            internal AstExternalAccessOption7(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExternalAccessOption(this);
            }
        }
        

        
        internal AstExternalAccessOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExternalAccessOption(Position p) : 
                base(p)
        {
        }
        
        internal AstExternalAccessOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExternalAccessOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExternalAccessOption.Resolve(list);
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption3(ctx, ((AstLanguageSetting)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption4(ctx, ((AstLanguageSetting)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption5(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption6(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExternalAccessOption.AstExternalAccessOption7(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLanguageSetting), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstLanguageSetting), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 7;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    DB_CHAINING on_off 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstExternalAccessOption.AstExternalAccessOption1 result = new AstExternalAccessOption.AstExternalAccessOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    DEFAULT_LANGUAGE EQUAL language_setting 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(ParserRuleContext ctx, AstLanguageSetting languageSetting)
        {
            AstExternalAccessOption.AstExternalAccessOption3 result = new AstExternalAccessOption.AstExternalAccessOption3(ctx, languageSetting);
            return result;
        }
        
        /// <summary>
        /// external_access_option : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstExternalAccessOption ExternalAccessOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstExternalAccessOption.AstExternalAccessOption7 result = new AstExternalAccessOption.AstExternalAccessOption7(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// language_setting_value
    /// 	 : NONE
    /// 	 | lcid = decimal
    /// 	 | language_id
    /// </summary>
    public abstract partial class AstLanguageSettingValue : AstBnfRule
    {
        
        protected static string _rule = "language_setting_value\r\n\t : NONE\r\n\t | lcid = decimal\r\n\t | language_id";
        
        /// <summary>
        /// language_setting_value : NONE 
        /// </summary>
        public partial class AstLanguageSettingValue1 : AstLanguageSettingValue
        {
            
            internal AstLanguageSettingValue1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLanguageSettingValue(this);
            }
        }
        /// <summary>
        /// language_setting_value : lcid=decimal 
        /// </summary>
        public partial class AstLanguageSettingValue2 : AstLanguageSettingValue
        {
            
            private AstDecimal _lcid;
            
            internal AstLanguageSettingValue2(ParserRuleContext ctx, AstDecimal lcid) : 
                    base(ctx)
            {
                _lcid = lcid;
            }
            
            public virtual AstDecimal Lcid
            {
                get
                {
                    return _lcid;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLanguageSettingValue(this);
            }
        }
        /// <summary>
        /// language_setting_value : language_id 
        /// </summary>
        public partial class AstLanguageSettingValue3 : AstLanguageSettingValue
        {
            
            private AstLanguageId _languageId;
            
            internal AstLanguageSettingValue3(ParserRuleContext ctx, AstLanguageId languageId) : 
                    base(ctx)
            {
                _languageId = languageId;
            }
            
            public virtual AstLanguageId LanguageId
            {
                get
                {
                    return _languageId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLanguageSettingValue(this);
            }
        }
        

        
        internal AstLanguageSettingValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLanguageSettingValue(Position p) : 
                base(p)
        {
        }
        
        internal AstLanguageSettingValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstLanguageSettingValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstLanguageSettingValue.Resolve(list);
            if ((index == 1))
            {
                return new AstLanguageSettingValue.AstLanguageSettingValue1(ctx);
            }
            if ((index == 2))
            {
                return new AstLanguageSettingValue.AstLanguageSettingValue2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstLanguageSettingValue.AstLanguageSettingValue3(ctx, ((AstLanguageId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLanguageId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// language_setting_value : 
        ///    NONE 
        /// </summary>
        public static AstLanguageSettingValue LanguageSettingValue(ParserRuleContext ctx)
        {
            AstLanguageSettingValue.AstLanguageSettingValue1 result = new AstLanguageSettingValue.AstLanguageSettingValue1(ctx);
            return result;
        }
        
        /// <summary>
        /// language_setting_value : 
        ///    lcid=decimal 
        /// </summary>
        public static AstLanguageSettingValue LanguageSettingValue(ParserRuleContext ctx, AstDecimal lcid)
        {
            AstLanguageSettingValue.AstLanguageSettingValue2 result = new AstLanguageSettingValue.AstLanguageSettingValue2(ctx, lcid);
            return result;
        }
        
        /// <summary>
        /// language_setting_value : 
        ///    language_id 
        /// </summary>
        public static AstLanguageSettingValue LanguageSettingValue(ParserRuleContext ctx, AstLanguageId languageId)
        {
            AstLanguageSettingValue.AstLanguageSettingValue3 result = new AstLanguageSettingValue.AstLanguageSettingValue3(ctx, languageId);
            return result;
        }
    }
    
    /// <summary>
    /// hadr_options
    /// 	 : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_resume)
    /// </summary>
    public abstract partial class AstHadrOptions : AstBnfRule
    {
        
        protected static string _rule = "hadr_options\r\n\t : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_r" +
            "esume)";
        
        /// <summary>
        /// hadr_options : HADR AVAILABILITY GROUP EQUAL group_id 
        /// </summary>
        public partial class AstHadrOptions1 : AstHadrOptions
        {
            
            private AstGroupId _groupId;
            
            internal AstHadrOptions1(ParserRuleContext ctx, AstGroupId groupId) : 
                    base(ctx)
            {
                _groupId = groupId;
            }
            
            public virtual AstGroupId GroupId
            {
                get
                {
                    return _groupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHadrOptions(this);
            }
        }
        /// <summary>
        /// hadr_options : HADR OFF 
        /// </summary>
        public partial class AstHadrOptions2 : AstHadrOptions
        {
            
            internal AstHadrOptions2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHadrOptions(this);
            }
        }
        /// <summary>
        /// hadr_options : HADR suspend_resume 
        /// </summary>
        public partial class AstHadrOptions3 : AstHadrOptions
        {
            
            private AstSuspendResume _suspendResume;
            
            internal AstHadrOptions3(ParserRuleContext ctx, AstSuspendResume suspendResume) : 
                    base(ctx)
            {
                _suspendResume = suspendResume;
            }
            
            public virtual AstSuspendResume SuspendResume
            {
                get
                {
                    return _suspendResume;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHadrOptions(this);
            }
        }
        

        
        internal AstHadrOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHadrOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstHadrOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstHadrOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstHadrOptions.Resolve(list);
            if ((index == 2))
            {
                return new AstHadrOptions.AstHadrOptions1(ctx, ((AstGroupId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstHadrOptions.AstHadrOptions2(ctx);
            }
            if ((index == 2))
            {
                return new AstHadrOptions.AstHadrOptions3(ctx, ((AstSuspendResume)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstGroupId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSuspendResume), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR AVAILABILITY GROUP EQUAL group_id 
        /// </summary>
        public static AstHadrOptions HadrOptions(ParserRuleContext ctx, AstGroupId groupId)
        {
            AstHadrOptions.AstHadrOptions1 result = new AstHadrOptions.AstHadrOptions1(ctx, groupId);
            return result;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR OFF 
        /// </summary>
        public static AstHadrOptions HadrOptions(ParserRuleContext ctx)
        {
            AstHadrOptions.AstHadrOptions2 result = new AstHadrOptions.AstHadrOptions2(ctx);
            return result;
        }
        
        /// <summary>
        /// hadr_options : 
        ///    HADR suspend_resume 
        /// </summary>
        public static AstHadrOptions HadrOptions(ParserRuleContext ctx, AstSuspendResume suspendResume)
        {
            AstHadrOptions.AstHadrOptions3 result = new AstHadrOptions.AstHadrOptions3(ctx, suspendResume);
            return result;
        }
    }
    
    /// <summary>
    /// recovery_option
    /// 	 : recovery_option_enum
    /// 	 | TORN_PAGE_DETECTION  on_off
    /// 	 | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
    /// </summary>
    public abstract partial class AstRecoveryOption : AstBnfRule
    {
        
        protected static string _rule = "recovery_option\r\n\t : recovery_option_enum\r\n\t | TORN_PAGE_DETECTION  on_off\r\n\t | A" +
            "CCELERATED_DATABASE_RECOVERY  EQUAL  on_off";
        
        /// <summary>
        /// recovery_option : recovery_option_enum 
        /// </summary>
        public partial class AstRecoveryOption1 : AstRecoveryOption
        {
            
            private AstRecoveryOptionEnum _recoveryOptionEnum;
            
            internal AstRecoveryOption1(ParserRuleContext ctx, AstRecoveryOptionEnum recoveryOptionEnum) : 
                    base(ctx)
            {
                _recoveryOptionEnum = recoveryOptionEnum;
            }
            
            public virtual AstRecoveryOptionEnum RecoveryOptionEnum
            {
                get
                {
                    return _recoveryOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        /// <summary>
        /// recovery_option : TORN_PAGE_DETECTION on_off 
        /// </summary>
        public partial class AstRecoveryOption2 : AstRecoveryOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRecoveryOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        /// <summary>
        /// recovery_option : ACCELERATED_DATABASE_RECOVERY EQUAL on_off 
        /// </summary>
        public partial class AstRecoveryOption3 : AstRecoveryOption
        {
            
            private AstOnOff _onOff;
            
            internal AstRecoveryOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRecoveryOption(this);
            }
        }
        

        
        internal AstRecoveryOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRecoveryOption(Position p) : 
                base(p)
        {
        }
        
        internal AstRecoveryOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRecoveryOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRecoveryOption.Resolve(list);
            if ((index == 2))
            {
                return new AstRecoveryOption.AstRecoveryOption1(ctx, ((AstRecoveryOptionEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRecoveryOption.AstRecoveryOption2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRecoveryOption.AstRecoveryOption3(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRecoveryOptionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// recovery_option : 
        ///    recovery_option_enum 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(ParserRuleContext ctx, AstRecoveryOptionEnum recoveryOptionEnum)
        {
            AstRecoveryOption.AstRecoveryOption1 result = new AstRecoveryOption.AstRecoveryOption1(ctx, recoveryOptionEnum);
            return result;
        }
        
        /// <summary>
        /// recovery_option : 
        ///    TORN_PAGE_DETECTION on_off 
        /// </summary>
        public static AstRecoveryOption RecoveryOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstRecoveryOption.AstRecoveryOption2 result = new AstRecoveryOption.AstRecoveryOption2(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// service_broker_option
    /// 	 : ENABLE_BROKER
    /// 	 | DISABLE_BROKER
    /// 	 | NEW_BROKER
    /// 	 | ERROR_BROKER_CONVERSATIONS
    /// 	 | HONOR_BROKER_PRIORITY  on_off
    /// </summary>
    public abstract partial class AstServiceBrokerOption : AstBnfRule
    {
        
        protected static string _rule = "service_broker_option\r\n\t : ENABLE_BROKER\r\n\t | DISABLE_BROKER\r\n\t | NEW_BROKER\r\n\t |" +
            " ERROR_BROKER_CONVERSATIONS\r\n\t | HONOR_BROKER_PRIORITY  on_off";
        
        /// <summary>
        /// service_broker_option : ENABLE_BROKER 
        /// </summary>
        public partial class AstServiceBrokerOption1 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : DISABLE_BROKER 
        /// </summary>
        public partial class AstServiceBrokerOption2 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : NEW_BROKER 
        /// </summary>
        public partial class AstServiceBrokerOption3 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : ERROR_BROKER_CONVERSATIONS 
        /// </summary>
        public partial class AstServiceBrokerOption4 : AstServiceBrokerOption
        {
            
            internal AstServiceBrokerOption4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        /// <summary>
        /// service_broker_option : HONOR_BROKER_PRIORITY on_off 
        /// </summary>
        public partial class AstServiceBrokerOption5 : AstServiceBrokerOption
        {
            
            private AstOnOff _onOff;
            
            internal AstServiceBrokerOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceBrokerOption(this);
            }
        }
        

        
        internal AstServiceBrokerOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServiceBrokerOption(Position p) : 
                base(p)
        {
        }
        
        internal AstServiceBrokerOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServiceBrokerOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServiceBrokerOption.Resolve(list);
            if ((index == 1))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption1(ctx);
            }
            if ((index == 1))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption2(ctx);
            }
            if ((index == 1))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption3(ctx);
            }
            if ((index == 1))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption4(ctx);
            }
            if ((index == 2))
            {
                return new AstServiceBrokerOption.AstServiceBrokerOption5(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// service_broker_option : 
        ///    ENABLE_BROKER 
        /// </summary>
        public static AstServiceBrokerOption ServiceBrokerOption(ParserRuleContext ctx)
        {
            AstServiceBrokerOption.AstServiceBrokerOption1 result = new AstServiceBrokerOption.AstServiceBrokerOption1(ctx);
            return result;
        }
        
        /// <summary>
        /// service_broker_option : 
        ///    HONOR_BROKER_PRIORITY on_off 
        /// </summary>
        public static AstServiceBrokerOption ServiceBrokerOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstServiceBrokerOption.AstServiceBrokerOption5 result = new AstServiceBrokerOption.AstServiceBrokerOption5(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// snapshot_option
    /// 	 : ALLOW_SNAPSHOT_ISOLATION  on_off
    /// 	 | READ_COMMITTED_SNAPSHOT  on_off
    /// 	 | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
    /// </summary>
    public abstract partial class AstSnapshotOption : AstBnfRule
    {
        
        protected static string _rule = "snapshot_option\r\n\t : ALLOW_SNAPSHOT_ISOLATION  on_off\r\n\t | READ_COMMITTED_SNAPSHO" +
            "T  on_off\r\n\t | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off";
        
        /// <summary>
        /// snapshot_option : ALLOW_SNAPSHOT_ISOLATION on_off 
        /// </summary>
        public partial class AstSnapshotOption1 : AstSnapshotOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSnapshotOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        /// <summary>
        /// snapshot_option : READ_COMMITTED_SNAPSHOT on_off 
        /// </summary>
        public partial class AstSnapshotOption2 : AstSnapshotOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSnapshotOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        /// <summary>
        /// snapshot_option : MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT=on_off 
        /// </summary>
        public partial class AstSnapshotOption3 : AstSnapshotOption
        {
            
            private AstOnOff _MEMORYOPTIMIZEDELEVATETOSNAPSHOT;
            
            internal AstSnapshotOption3(ParserRuleContext ctx, AstOnOff mEMORYOPTIMIZEDELEVATETOSNAPSHOT) : 
                    base(ctx)
            {
                _MEMORYOPTIMIZEDELEVATETOSNAPSHOT = mEMORYOPTIMIZEDELEVATETOSNAPSHOT;
            }
            
            public virtual AstOnOff MemoryOptimizedElevateToSnapshot
            {
                get
                {
                    return _MEMORYOPTIMIZEDELEVATETOSNAPSHOT;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSnapshotOption(this);
            }
        }
        

        
        internal AstSnapshotOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSnapshotOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSnapshotOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSnapshotOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSnapshotOption.Resolve(list);
            if ((index == 2))
            {
                return new AstSnapshotOption.AstSnapshotOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSnapshotOption.AstSnapshotOption2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSnapshotOption.AstSnapshotOption3(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// snapshot_option : 
        ///    ALLOW_SNAPSHOT_ISOLATION on_off 
        /// </summary>
        public static AstSnapshotOption SnapshotOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSnapshotOption.AstSnapshotOption1 result = new AstSnapshotOption.AstSnapshotOption1(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// sql_option
    /// 	 : ANSI_NULL_DEFAULT  on_off
    /// 	 | ANSI_NULLS  on_off
    /// 	 | ANSI_PADDING  on_off
    /// 	 | ANSI_WARNINGS  on_off
    /// 	 | ARITHABORT  on_off
    /// 	 | COMPATIBILITY_LEVEL  EQUAL  decimal
    /// 	 | CONCAT_NULL_YIELDS_NULL  on_off
    /// 	 | NUMERIC_ROUNDABORT  on_off
    /// 	 | QUOTED_IDENTIFIER  on_off
    /// 	 | RECURSIVE_TRIGGERS  on_off
    /// </summary>
    public abstract partial class AstSqlOption : AstBnfRule
    {
        
        protected static string _rule = @"sql_option
	 : ANSI_NULL_DEFAULT  on_off
	 | ANSI_NULLS  on_off
	 | ANSI_PADDING  on_off
	 | ANSI_WARNINGS  on_off
	 | ARITHABORT  on_off
	 | COMPATIBILITY_LEVEL  EQUAL  decimal
	 | CONCAT_NULL_YIELDS_NULL  on_off
	 | NUMERIC_ROUNDABORT  on_off
	 | QUOTED_IDENTIFIER  on_off
	 | RECURSIVE_TRIGGERS  on_off";
        
        /// <summary>
        /// sql_option : ANSI_NULL_DEFAULT on_off 
        /// </summary>
        public partial class AstSqlOption1 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_NULLS on_off 
        /// </summary>
        public partial class AstSqlOption2 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption2(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_PADDING on_off 
        /// </summary>
        public partial class AstSqlOption3 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ANSI_WARNINGS on_off 
        /// </summary>
        public partial class AstSqlOption4 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : ARITHABORT on_off 
        /// </summary>
        public partial class AstSqlOption5 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : COMPATIBILITY_LEVEL EQUAL decimal 
        /// </summary>
        public partial class AstSqlOption6 : AstSqlOption
        {
            
            private AstDecimal _decimal;
            
            internal AstSqlOption6(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : CONCAT_NULL_YIELDS_NULL on_off 
        /// </summary>
        public partial class AstSqlOption7 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : NUMERIC_ROUNDABORT on_off 
        /// </summary>
        public partial class AstSqlOption8 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : QUOTED_IDENTIFIER on_off 
        /// </summary>
        public partial class AstSqlOption9 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption9(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        /// <summary>
        /// sql_option : RECURSIVE_TRIGGERS on_off 
        /// </summary>
        public partial class AstSqlOption10 : AstSqlOption
        {
            
            private AstOnOff _onOff;
            
            internal AstSqlOption10(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlOption(this);
            }
        }
        

        
        internal AstSqlOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlOption(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSqlOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSqlOption.Resolve(list);
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption2(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption5(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption6(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption7(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption8(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption9(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlOption.AstSqlOption10(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 10;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// sql_option : 
        ///    ANSI_NULL_DEFAULT on_off 
        /// </summary>
        public static AstSqlOption SqlOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSqlOption.AstSqlOption1 result = new AstSqlOption.AstSqlOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// sql_option : 
        ///    COMPATIBILITY_LEVEL EQUAL decimal 
        /// </summary>
        public static AstSqlOption SqlOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSqlOption.AstSqlOption6 result = new AstSqlOption.AstSqlOption6(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// termination
    /// 	 : ROLLBACK  AFTER  seconds = decimal
    /// 	 | ROLLBACK  IMMEDIATE
    /// 	 | NO_WAIT
    /// </summary>
    public abstract partial class AstTermination : AstBnfRule
    {
        
        protected static string _rule = "termination\r\n\t : ROLLBACK  AFTER  seconds = decimal\r\n\t | ROLLBACK  IMMEDIATE\r\n\t |" +
            " NO_WAIT";
        
        /// <summary>
        /// termination : ROLLBACK AFTER seconds=decimal 
        /// </summary>
        public partial class AstTermination1 : AstTermination
        {
            
            private AstDecimal _seconds;
            
            internal AstTermination1(ParserRuleContext ctx, AstDecimal seconds) : 
                    base(ctx)
            {
                _seconds = seconds;
            }
            
            public virtual AstDecimal Seconds
            {
                get
                {
                    return _seconds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        /// <summary>
        /// termination : ROLLBACK IMMEDIATE 
        /// </summary>
        public partial class AstTermination2 : AstTermination
        {
            
            internal AstTermination2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        /// <summary>
        /// termination : NO_WAIT 
        /// </summary>
        public partial class AstTermination3 : AstTermination
        {
            
            internal AstTermination3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTermination(this);
            }
        }
        

        
        internal AstTermination(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTermination(Position p) : 
                base(p)
        {
        }
        
        internal AstTermination(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTermination Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTermination.Resolve(list);
            if ((index == 2))
            {
                return new AstTermination.AstTermination1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstTermination.AstTermination2(ctx);
            }
            if ((index == 1))
            {
                return new AstTermination.AstTermination3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// termination : 
        ///    ROLLBACK AFTER seconds=decimal 
        /// </summary>
        public static AstTermination Termination(ParserRuleContext ctx, AstDecimal seconds)
        {
            AstTermination.AstTermination1 result = new AstTermination.AstTermination1(ctx, seconds);
            return result;
        }
        
        /// <summary>
        /// termination : 
        ///    ROLLBACK IMMEDIATE 
        /// </summary>
        public static AstTermination Termination(ParserRuleContext ctx)
        {
            AstTermination.AstTermination2 result = new AstTermination.AstTermination2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// if_exists
    /// 	 : IF  EXISTS
    /// </summary>
    public partial class AstIfExists : AstBnfRule
    {
        
        protected static string _rule = "if_exists\r\n\t : IF  EXISTS";
        
        internal AstIfExists(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstIfExists(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstIfExists(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstIfExists(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfExists(this);
        }
        
        /// <summary>
        /// if_exists : 
        ///    IF EXISTS 
        /// </summary>
        public static AstIfExists IfExists(ParserRuleContext ctx)
        {
            AstIfExists result = new AstIfExists(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_type
    /// 	 : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateType : AstBnfRule
    {
        
        protected static string _rule = "create_type\r\n\t : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_" +
            "value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?";
        
        internal AstCreateType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCreateType(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCreateType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCreateType(ParserRuleContext ctx, AstSchemaTypeRef name, AstDataType dataType, AstDefaultValue defaultValue, AstColumnDefTableConstraints columnDefTableConstraints) : 
                base(ctx)
        {
            _name = name;
            _dataType = dataType;
            _defaultValue = defaultValue;
            _columnDefTableConstraints = columnDefTableConstraints;
        }
        
        public virtual AstSchemaTypeRef _name
        {
            get
            {
                return _name;
            }
        }
        
        public virtual AstDataType _dataType
        {
            get
            {
                return _dataType;
            }
        }
        
        public virtual AstDefaultValue _defaultValue
        {
            get
            {
                return _defaultValue;
            }
        }
        
        public virtual AstColumnDefTableConstraints _columnDefTableConstraints
        {
            get
            {
                return _columnDefTableConstraints;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateType(this);
        }
        
        /// <summary>
        /// create_type : 
        ///    CREATE TYPE name=schema_type_ref FROM data_type default_value AS TABLE ( column_def_table_constraints ) 
        /// </summary>
        public static AstCreateType CreateType(ParserRuleContext ctx, AstSchemaTypeRef name, AstDataType dataType, AstDefaultValue defaultValue, AstColumnDefTableConstraints columnDefTableConstraints)
        {
            AstCreateType result = new AstCreateType(ctx, name, dataType, defaultValue, columnDefTableConstraints);
            return result;
        }
    }
    
    /// <summary>
    /// drop_type
    /// 	 : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref
    /// </summary>
    public partial class AstDropType : AstBnfRule
    {
        
        protected static string _rule = "drop_type\r\n\t : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref";
        
        internal AstDropType(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDropType(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDropType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDropType(ParserRuleContext ctx, AstSchemaTypeRef name) : 
                base(ctx)
        {
            _name = name;
        }
        
        public virtual AstSchemaTypeRef _name
        {
            get
            {
                return _name;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropType(this);
        }
        
        /// <summary>
        /// drop_type : 
        ///    DROP TYPE IF EXISTS name=schema_type_ref 
        /// </summary>
        public static AstDropType DropType(ParserRuleContext ctx, AstSchemaTypeRef name)
        {
            AstDropType result = new AstDropType(ctx, name);
            return result;
        }
    }
    
    /// <summary>
    /// rowset_function_limited
    /// 	 : openquery_args
    /// 	 | open_data_source
    /// </summary>
    public abstract partial class AstRowsetFunctionLimited : AstBnfRule
    {
        
        protected static string _rule = "rowset_function_limited\r\n\t : openquery_args\r\n\t | open_data_source";
        
        /// <summary>
        /// rowset_function_limited : openquery_args 
        /// </summary>
        public partial class AstRowsetFunctionLimited1 : AstRowsetFunctionLimited
        {
            
            private AstOpenqueryArgs _openqueryArgs;
            
            internal AstRowsetFunctionLimited1(ParserRuleContext ctx, AstOpenqueryArgs openqueryArgs) : 
                    base(ctx)
            {
                _openqueryArgs = openqueryArgs;
            }
            
            public virtual AstOpenqueryArgs OpenqueryArgs
            {
                get
                {
                    return _openqueryArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunctionLimited(this);
            }
        }
        /// <summary>
        /// rowset_function_limited : open_data_source 
        /// </summary>
        public partial class AstRowsetFunctionLimited2 : AstRowsetFunctionLimited
        {
            
            private AstOpenDataSource _openDataSource;
            
            internal AstRowsetFunctionLimited2(ParserRuleContext ctx, AstOpenDataSource openDataSource) : 
                    base(ctx)
            {
                _openDataSource = openDataSource;
            }
            
            public virtual AstOpenDataSource OpenDataSource
            {
                get
                {
                    return _openDataSource;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunctionLimited(this);
            }
        }
        

        
        internal AstRowsetFunctionLimited(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRowsetFunctionLimited(Position p) : 
                base(p)
        {
        }
        
        internal AstRowsetFunctionLimited(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRowsetFunctionLimited Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRowsetFunctionLimited.Resolve(list);
            if ((index == 2))
            {
                return new AstRowsetFunctionLimited.AstRowsetFunctionLimited1(ctx, ((AstOpenqueryArgs)(list[0])));
            }
            if ((index == 2))
            {
                return new AstRowsetFunctionLimited.AstRowsetFunctionLimited2(ctx, ((AstOpenDataSource)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOpenqueryArgs), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstOpenDataSource), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rowset_function_limited : 
        ///    openquery_args 
        /// </summary>
        public static AstRowsetFunctionLimited RowsetFunctionLimited(ParserRuleContext ctx, AstOpenqueryArgs openqueryArgs)
        {
            AstRowsetFunctionLimited.AstRowsetFunctionLimited1 result = new AstRowsetFunctionLimited.AstRowsetFunctionLimited1(ctx, openqueryArgs);
            return result;
        }
        
        /// <summary>
        /// rowset_function_limited : 
        ///    open_data_source 
        /// </summary>
        public static AstRowsetFunctionLimited RowsetFunctionLimited(ParserRuleContext ctx, AstOpenDataSource openDataSource)
        {
            AstRowsetFunctionLimited.AstRowsetFunctionLimited2 result = new AstRowsetFunctionLimited.AstRowsetFunctionLimited2(ctx, openDataSource);
            return result;
        }
    }
    
    /// <summary>
    /// declare_statement
    /// 	 : DECLARE  local_id  AS?  declare_object_table
    /// 	 | DECLARE  declare_locals
    /// 	 | DECLARE  local_id  AS?  xml_type_definition
    /// 	 | WITH  XMLNAMESPACES  LR_BRACKET  xml_declarations  RR_BRACKET
    /// </summary>
    public abstract partial class AstDeclareStatement : AstBnfRule
    {
        
        protected static string _rule = "declare_statement\r\n\t : DECLARE  local_id  AS?  declare_object_table\r\n\t | DECLARE " +
            " declare_locals\r\n\t | DECLARE  local_id  AS?  xml_type_definition\r\n\t | WITH  XMLN" +
            "AMESPACES  LR_BRACKET  xml_declarations  RR_BRACKET";
        
        /// <summary>
        /// declare_statement : DECLARE local_id AS? declare_object_table 
        /// </summary>
        public partial class AstDeclareStatement1 : AstDeclareStatement
        {
            
            private AstLocalId _localId;
            
            private AstDeclareObjectTable _declareObjectTable;
            
            internal AstDeclareStatement1(ParserRuleContext ctx, AstLocalId localId, AstDeclareObjectTable declareObjectTable) : 
                    base(ctx)
            {
                _localId = localId;
                _declareObjectTable = declareObjectTable;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstDeclareObjectTable DeclareObjectTable
            {
                get
                {
                    return _declareObjectTable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : DECLARE declare_locals 
        /// </summary>
        public partial class AstDeclareStatement2 : AstDeclareStatement
        {
            
            private AstDeclareLocals _declareLocals;
            
            internal AstDeclareStatement2(ParserRuleContext ctx, AstDeclareLocals declareLocals) : 
                    base(ctx)
            {
                _declareLocals = declareLocals;
            }
            
            public virtual AstDeclareLocals DeclareLocals
            {
                get
                {
                    return _declareLocals;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : DECLARE local_id AS? xml_type_definition 
        /// </summary>
        public partial class AstDeclareStatement3 : AstDeclareStatement
        {
            
            private AstLocalId _localId;
            
            private AstXmlTypeDefinition _xmlTypeDefinition;
            
            internal AstDeclareStatement3(ParserRuleContext ctx, AstLocalId localId, AstXmlTypeDefinition xmlTypeDefinition) : 
                    base(ctx)
            {
                _localId = localId;
                _xmlTypeDefinition = xmlTypeDefinition;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstXmlTypeDefinition XmlTypeDefinition
            {
                get
                {
                    return _xmlTypeDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        /// <summary>
        /// declare_statement : WITH XMLNAMESPACES LR_BRACKET xml_declarations RR_BRACKET 
        /// </summary>
        public partial class AstDeclareStatement4 : AstDeclareStatement
        {
            
            private AstXmlDeclarations _xmlDeclarations;
            
            internal AstDeclareStatement4(ParserRuleContext ctx, AstXmlDeclarations xmlDeclarations) : 
                    base(ctx)
            {
                _xmlDeclarations = xmlDeclarations;
            }
            
            public virtual AstXmlDeclarations XmlDeclarations
            {
                get
                {
                    return _xmlDeclarations;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareStatement(this);
            }
        }
        

        
        internal AstDeclareStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDeclareStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDeclareStatement.Resolve(list);
            if ((index == 3))
            {
                return new AstDeclareStatement.AstDeclareStatement1(ctx, ((AstLocalId)(list[0])), ((AstDeclareObjectTable)(list[1])));
            }
            if ((index == 2))
            {
                return new AstDeclareStatement.AstDeclareStatement2(ctx, ((AstDeclareLocals)(list[0])));
            }
            if ((index == 3))
            {
                return new AstDeclareStatement.AstDeclareStatement3(ctx, ((AstLocalId)(list[0])), ((AstXmlTypeDefinition)(list[1])));
            }
            if ((index == 2))
            {
                return new AstDeclareStatement.AstDeclareStatement4(ctx, ((AstXmlDeclarations)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDeclareObjectTable), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstXmlTypeDefinition), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDeclareLocals), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstXmlDeclarations), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE local_id AS? declare_object_table 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstLocalId localId, AstDeclareObjectTable declareObjectTable)
        {
            AstDeclareStatement.AstDeclareStatement1 result = new AstDeclareStatement.AstDeclareStatement1(ctx, localId, declareObjectTable);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE declare_locals 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstDeclareLocals declareLocals)
        {
            AstDeclareStatement.AstDeclareStatement2 result = new AstDeclareStatement.AstDeclareStatement2(ctx, declareLocals);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    DECLARE local_id AS? xml_type_definition 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstLocalId localId, AstXmlTypeDefinition xmlTypeDefinition)
        {
            AstDeclareStatement.AstDeclareStatement3 result = new AstDeclareStatement.AstDeclareStatement3(ctx, localId, xmlTypeDefinition);
            return result;
        }
        
        /// <summary>
        /// declare_statement : 
        ///    WITH XMLNAMESPACES ( xml_declarations ) 
        /// </summary>
        public static AstDeclareStatement DeclareStatement(ParserRuleContext ctx, AstXmlDeclarations xmlDeclarations)
        {
            AstDeclareStatement.AstDeclareStatement4 result = new AstDeclareStatement.AstDeclareStatement4(ctx, xmlDeclarations);
            return result;
        }
    }
    
    /// <summary>
    /// declare_object_table
    /// 	 : table_type_definition
    /// 	 | full_table_ref
    /// </summary>
    public abstract partial class AstDeclareObjectTable : AstBnfRule
    {
        
        protected static string _rule = "declare_object_table\r\n\t : table_type_definition\r\n\t | full_table_ref";
        
        /// <summary>
        /// declare_object_table : table_type_definition 
        /// </summary>
        public partial class AstDeclareObjectTable1 : AstDeclareObjectTable
        {
            
            private AstTableTypeDefinition _tableTypeDefinition;
            
            internal AstDeclareObjectTable1(ParserRuleContext ctx, AstTableTypeDefinition tableTypeDefinition) : 
                    base(ctx)
            {
                _tableTypeDefinition = tableTypeDefinition;
            }
            
            public virtual AstTableTypeDefinition TableTypeDefinition
            {
                get
                {
                    return _tableTypeDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareObjectTable(this);
            }
        }
        /// <summary>
        /// declare_object_table : full_table_ref 
        /// </summary>
        public partial class AstDeclareObjectTable2 : AstDeclareObjectTable
        {
            
            private AstFullTableRef _fullTableRef;
            
            internal AstDeclareObjectTable2(ParserRuleContext ctx, AstFullTableRef fullTableRef) : 
                    base(ctx)
            {
                _fullTableRef = fullTableRef;
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareObjectTable(this);
            }
        }
        

        
        internal AstDeclareObjectTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareObjectTable(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareObjectTable(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDeclareObjectTable Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDeclareObjectTable.Resolve(list);
            if ((index == 2))
            {
                return new AstDeclareObjectTable.AstDeclareObjectTable1(ctx, ((AstTableTypeDefinition)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDeclareObjectTable.AstDeclareObjectTable2(ctx, ((AstFullTableRef)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableTypeDefinition), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// declare_object_table : 
        ///    table_type_definition 
        /// </summary>
        public static AstDeclareObjectTable DeclareObjectTable(ParserRuleContext ctx, AstTableTypeDefinition tableTypeDefinition)
        {
            AstDeclareObjectTable.AstDeclareObjectTable1 result = new AstDeclareObjectTable.AstDeclareObjectTable1(ctx, tableTypeDefinition);
            return result;
        }
        
        /// <summary>
        /// declare_object_table : 
        ///    full_table_ref 
        /// </summary>
        public static AstDeclareObjectTable DeclareObjectTable(ParserRuleContext ctx, AstFullTableRef fullTableRef)
        {
            AstDeclareObjectTable.AstDeclareObjectTable2 result = new AstDeclareObjectTable.AstDeclareObjectTable2(ctx, fullTableRef);
            return result;
        }
    }
    
    /// <summary>
    /// xml_declaration
    /// 	 : xml_namespace_uri = stringtext  AS  id_
    /// 	 | DEFAULT  stringtext
    /// </summary>
    public abstract partial class AstXmlDeclaration : AstBnfRule
    {
        
        protected static string _rule = "xml_declaration\r\n\t : xml_namespace_uri = stringtext  AS  id_\r\n\t | DEFAULT  string" +
            "text";
        
        /// <summary>
        /// xml_declaration : xml_namespace_uri=stringtext AS id_ 
        /// </summary>
        public partial class AstXmlDeclaration1 : AstXmlDeclaration
        {
            
            private AstStringtext _xmlNamespaceUri;
            
            private AstId _id;
            
            internal AstXmlDeclaration1(ParserRuleContext ctx, AstStringtext xmlNamespaceUri, AstId id) : 
                    base(ctx)
            {
                _xmlNamespaceUri = xmlNamespaceUri;
                _id = id;
            }
            
            public virtual AstStringtext XmlNamespaceUri
            {
                get
                {
                    return _xmlNamespaceUri;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDeclaration(this);
            }
        }
        /// <summary>
        /// xml_declaration : DEFAULT stringtext 
        /// </summary>
        public partial class AstXmlDeclaration2 : AstXmlDeclaration
        {
            
            private AstStringtext _stringtext;
            
            internal AstXmlDeclaration2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDeclaration(this);
            }
        }
        

        
        internal AstXmlDeclaration(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlDeclaration(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlDeclaration(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlDeclaration Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlDeclaration.Resolve(list);
            if ((index == 3))
            {
                return new AstXmlDeclaration.AstXmlDeclaration1(ctx, ((AstStringtext)(list[0])), ((AstId)(list[1])));
            }
            if ((index == 2))
            {
                return new AstXmlDeclaration.AstXmlDeclaration2(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// xml_declaration : 
        ///    xml_namespace_uri=stringtext AS id_ 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(ParserRuleContext ctx, AstStringtext xmlNamespaceUri, AstId id)
        {
            AstXmlDeclaration.AstXmlDeclaration1 result = new AstXmlDeclaration.AstXmlDeclaration1(ctx, xmlNamespaceUri, id);
            return result;
        }
        
        /// <summary>
        /// xml_declaration : 
        ///    DEFAULT stringtext 
        /// </summary>
        public static AstXmlDeclaration XmlDeclaration(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstXmlDeclaration.AstXmlDeclaration2 result = new AstXmlDeclaration.AstXmlDeclaration2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_statement
    /// 	 : CLOSE  GLOBAL?  cursor_name
    /// 	 | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name
    /// 	 | declare_cursor
    /// 	 | fetch_cursor
    /// 	 | OPEN  GLOBAL?  cursor_name
    /// </summary>
    public abstract partial class AstCursorStatement : AstBnfRule
    {
        
        protected static string _rule = "cursor_statement\r\n\t : CLOSE  GLOBAL?  cursor_name\r\n\t | DEALLOCATE  GLOBAL?  CURSO" +
            "R?  cursor_name\r\n\t | declare_cursor\r\n\t | fetch_cursor\r\n\t | OPEN  GLOBAL?  cursor" +
            "_name";
        
        /// <summary>
        /// cursor_statement : CLOSE GLOBAL? cursor_name 
        /// </summary>
        public partial class AstCursorStatement1 : AstCursorStatement
        {
            
            private AstCursorName _cursorName;
            
            internal AstCursorStatement1(ParserRuleContext ctx, AstCursorName cursorName) : 
                    base(ctx)
            {
                _cursorName = cursorName;
            }
            
            public virtual AstCursorName CursorName
            {
                get
                {
                    return _cursorName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : DEALLOCATE GLOBAL? CURSOR? cursor_name 
        /// </summary>
        public partial class AstCursorStatement2 : AstCursorStatement
        {
            
            private AstCursorName _cursorName;
            
            internal AstCursorStatement2(ParserRuleContext ctx, AstCursorName cursorName) : 
                    base(ctx)
            {
                _cursorName = cursorName;
            }
            
            public virtual AstCursorName CursorName
            {
                get
                {
                    return _cursorName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : declare_cursor 
        /// </summary>
        public partial class AstCursorStatement3 : AstCursorStatement
        {
            
            private AstDeclareCursor _declareCursor;
            
            internal AstCursorStatement3(ParserRuleContext ctx, AstDeclareCursor declareCursor) : 
                    base(ctx)
            {
                _declareCursor = declareCursor;
            }
            
            public virtual AstDeclareCursor DeclareCursor
            {
                get
                {
                    return _declareCursor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : fetch_cursor 
        /// </summary>
        public partial class AstCursorStatement4 : AstCursorStatement
        {
            
            private AstFetchCursor _fetchCursor;
            
            internal AstCursorStatement4(ParserRuleContext ctx, AstFetchCursor fetchCursor) : 
                    base(ctx)
            {
                _fetchCursor = fetchCursor;
            }
            
            public virtual AstFetchCursor FetchCursor
            {
                get
                {
                    return _fetchCursor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        /// <summary>
        /// cursor_statement : OPEN GLOBAL? cursor_name 
        /// </summary>
        public partial class AstCursorStatement5 : AstCursorStatement
        {
            
            private AstCursorName _cursorName;
            
            internal AstCursorStatement5(ParserRuleContext ctx, AstCursorName cursorName) : 
                    base(ctx)
            {
                _cursorName = cursorName;
            }
            
            public virtual AstCursorName CursorName
            {
                get
                {
                    return _cursorName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorStatement(this);
            }
        }
        

        
        internal AstCursorStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCursorStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCursorStatement.Resolve(list);
            if ((index == 2))
            {
                return new AstCursorStatement.AstCursorStatement1(ctx, ((AstCursorName)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCursorStatement.AstCursorStatement2(ctx, ((AstCursorName)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCursorStatement.AstCursorStatement3(ctx, ((AstDeclareCursor)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCursorStatement.AstCursorStatement4(ctx, ((AstFetchCursor)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCursorStatement.AstCursorStatement5(ctx, ((AstCursorName)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCursorName), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorName), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeclareCursor), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstFetchCursor), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstCursorName), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    CLOSE GLOBAL? cursor_name 
        /// </summary>
        public static AstCursorStatement CursorStatement(ParserRuleContext ctx, AstCursorName cursorName)
        {
            AstCursorStatement.AstCursorStatement1 result = new AstCursorStatement.AstCursorStatement1(ctx, cursorName);
            return result;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    declare_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(ParserRuleContext ctx, AstDeclareCursor declareCursor)
        {
            AstCursorStatement.AstCursorStatement3 result = new AstCursorStatement.AstCursorStatement3(ctx, declareCursor);
            return result;
        }
        
        /// <summary>
        /// cursor_statement : 
        ///    fetch_cursor 
        /// </summary>
        public static AstCursorStatement CursorStatement(ParserRuleContext ctx, AstFetchCursor fetchCursor)
        {
            AstCursorStatement.AstCursorStatement4 result = new AstCursorStatement.AstCursorStatement4(ctx, fetchCursor);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to
    /// 	 : TO  (logical_device_ids  TO  disk_tape_url_values)
    /// </summary>
    public partial class AstBackupTo : AstBnfRule
    {
        
        protected static string _rule = "backup_to\r\n\t : TO  (logical_device_ids  TO  disk_tape_url_values)";
        
        internal AstBackupTo(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstBackupTo(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstBackupTo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstBackupTo(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds, AstDiskTapeUrlValues diskTapeUrlValues) : 
                base(ctx)
        {
            _logicalDeviceIds = logicalDeviceIds;
            _diskTapeUrlValues = diskTapeUrlValues;
        }
        
        public virtual AstLogicalDeviceIds _logicalDeviceIds
        {
            get
            {
                return _logicalDeviceIds;
            }
        }
        
        public virtual AstDiskTapeUrlValues _diskTapeUrlValues
        {
            get
            {
                return _diskTapeUrlValues;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupTo(this);
        }
        
        /// <summary>
        /// backup_to : 
        ///    TO logical_device_ids TO disk_tape_url_values 
        /// </summary>
        public static AstBackupTo BackupTo(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds, AstDiskTapeUrlValues diskTapeUrlValues)
        {
            AstBackupTo result = new AstBackupTo(ctx, logicalDeviceIds, diskTapeUrlValues);
            return result;
        }
    }
    
    /// <summary>
    /// backup_to_mirror
    /// 	 : MIRROR  TO  (logical_device_ids | disk_tape_url_values)
    /// </summary>
    public abstract partial class AstBackupToMirror : AstBnfRule
    {
        
        protected static string _rule = "backup_to_mirror\r\n\t : MIRROR  TO  (logical_device_ids | disk_tape_url_values)";
        
        /// <summary>
        /// backup_to_mirror : MIRROR TO logical_device_ids 
        /// </summary>
        public partial class AstBackupToMirror1 : AstBackupToMirror
        {
            
            private AstLogicalDeviceIds _logicalDeviceIds;
            
            internal AstBackupToMirror1(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds) : 
                    base(ctx)
            {
                _logicalDeviceIds = logicalDeviceIds;
            }
            
            public virtual AstLogicalDeviceIds LogicalDeviceIds
            {
                get
                {
                    return _logicalDeviceIds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupToMirror(this);
            }
        }
        /// <summary>
        /// backup_to_mirror : MIRROR TO disk_tape_url_values 
        /// </summary>
        public partial class AstBackupToMirror2 : AstBackupToMirror
        {
            
            private AstDiskTapeUrlValues _diskTapeUrlValues;
            
            internal AstBackupToMirror2(ParserRuleContext ctx, AstDiskTapeUrlValues diskTapeUrlValues) : 
                    base(ctx)
            {
                _diskTapeUrlValues = diskTapeUrlValues;
            }
            
            public virtual AstDiskTapeUrlValues DiskTapeUrlValues
            {
                get
                {
                    return _diskTapeUrlValues;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupToMirror(this);
            }
        }
        

        
        internal AstBackupToMirror(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupToMirror(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupToMirror(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBackupToMirror Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBackupToMirror.Resolve(list);
            if ((index == 2))
            {
                return new AstBackupToMirror.AstBackupToMirror1(ctx, ((AstLogicalDeviceIds)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupToMirror.AstBackupToMirror2(ctx, ((AstDiskTapeUrlValues)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLogicalDeviceIds), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDiskTapeUrlValues), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// backup_to_mirror : 
        ///    MIRROR TO logical_device_ids 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(ParserRuleContext ctx, AstLogicalDeviceIds logicalDeviceIds)
        {
            AstBackupToMirror.AstBackupToMirror1 result = new AstBackupToMirror.AstBackupToMirror1(ctx, logicalDeviceIds);
            return result;
        }
        
        /// <summary>
        /// backup_to_mirror : 
        ///    MIRROR TO disk_tape_url_values 
        /// </summary>
        public static AstBackupToMirror BackupToMirror(ParserRuleContext ctx, AstDiskTapeUrlValues diskTapeUrlValues)
        {
            AstBackupToMirror.AstBackupToMirror2 result = new AstBackupToMirror.AstBackupToMirror2(ctx, diskTapeUrlValues);
            return result;
        }
    }
    
    /// <summary>
    /// backup_certificate_private_key
    /// 	 : FILE  EQUAL  private_key_file = stringtext
    /// 	 | by_password_crypt
    /// </summary>
    public abstract partial class AstBackupCertificatePrivateKey : AstBnfRule
    {
        
        protected static string _rule = "backup_certificate_private_key\r\n\t : FILE  EQUAL  private_key_file = stringtext\r\n\t" +
            " | by_password_crypt";
        
        /// <summary>
        /// backup_certificate_private_key : FILE EQUAL private_key_file=stringtext 
        /// </summary>
        public partial class AstBackupCertificatePrivateKey1 : AstBackupCertificatePrivateKey
        {
            
            private AstStringtext _privateKeyFile;
            
            internal AstBackupCertificatePrivateKey1(ParserRuleContext ctx, AstStringtext privateKeyFile) : 
                    base(ctx)
            {
                _privateKeyFile = privateKeyFile;
            }
            
            public virtual AstStringtext PrivateKeyFile
            {
                get
                {
                    return _privateKeyFile;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupCertificatePrivateKey(this);
            }
        }
        /// <summary>
        /// backup_certificate_private_key : by_password_crypt 
        /// </summary>
        public partial class AstBackupCertificatePrivateKey2 : AstBackupCertificatePrivateKey
        {
            
            private AstByPasswordCrypt _byPasswordCrypt;
            
            internal AstBackupCertificatePrivateKey2(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt) : 
                    base(ctx)
            {
                _byPasswordCrypt = byPasswordCrypt;
            }
            
            public virtual AstByPasswordCrypt ByPasswordCrypt
            {
                get
                {
                    return _byPasswordCrypt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupCertificatePrivateKey(this);
            }
        }
        

        
        internal AstBackupCertificatePrivateKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupCertificatePrivateKey(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupCertificatePrivateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBackupCertificatePrivateKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBackupCertificatePrivateKey.Resolve(list);
            if ((index == 2))
            {
                return new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2(ctx, ((AstByPasswordCrypt)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstByPasswordCrypt), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// backup_certificate_private_key : 
        ///    FILE EQUAL private_key_file=stringtext 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(ParserRuleContext ctx, AstStringtext privateKeyFile)
        {
            AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1 result = new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey1(ctx, privateKeyFile);
            return result;
        }
        
        /// <summary>
        /// backup_certificate_private_key : 
        ///    by_password_crypt 
        /// </summary>
        public static AstBackupCertificatePrivateKey BackupCertificatePrivateKey(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt)
        {
            AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2 result = new AstBackupCertificatePrivateKey.AstBackupCertificatePrivateKey2(ctx, byPasswordCrypt);
            return result;
        }
    }
    
    /// <summary>
    /// backup_setting
    /// 	 : DIFFERENTIAL
    /// 	 | COPY_ONLY
    /// 	 | CREDENTIAL
    /// 	 | FILE_SNAPSHOT
    /// 	 | NO_CHECKSUM
    /// 	 | CHECKSUM
    /// 	 | STOP_ON_ERROR
    /// 	 | CONTINUE_AFTER_ERROR
    /// 	 | RESTART
    /// 	 | DESCRIPTION  EQUAL  string_id
    /// 	 | NAME  EQUAL  backup_id
    /// 	 | EXPIREDATE  EQUAL  string_id
    /// 	 | RETAINDAYS  EQUAL  decimal_id
    /// 	 | MEDIADESCRIPTION  EQUAL  string_id
    /// 	 | MEDIANAME  EQUAL  stringtext
    /// 	 | BLOCKSIZE  EQUAL  decimal_id
    /// 	 | BUFFERCOUNT  EQUAL  decimal_id
    /// 	 | MAXTRANSFER  EQUAL  decimal_id
    /// 	 | STATS  (EQUAL  decimal)?
    /// 	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  server_certificate_value  RR_BRACKET
    /// 	 | compression
    /// 	 | rewind
    /// 	 | load_moun_load
    /// 	 | init_no_init
    /// 	 | no_skip
    /// 	 | format_noformat
    /// </summary>
    public abstract partial class AstBackupSetting : AstBnfRule
    {
        
        protected static string _rule = @"backup_setting
	 : DIFFERENTIAL
	 | COPY_ONLY
	 | CREDENTIAL
	 | FILE_SNAPSHOT
	 | NO_CHECKSUM
	 | CHECKSUM
	 | STOP_ON_ERROR
	 | CONTINUE_AFTER_ERROR
	 | RESTART
	 | DESCRIPTION  EQUAL  string_id
	 | NAME  EQUAL  backup_id
	 | EXPIREDATE  EQUAL  string_id
	 | RETAINDAYS  EQUAL  decimal_id
	 | MEDIADESCRIPTION  EQUAL  string_id
	 | MEDIANAME  EQUAL  stringtext
	 | BLOCKSIZE  EQUAL  decimal_id
	 | BUFFERCOUNT  EQUAL  decimal_id
	 | MAXTRANSFER  EQUAL  decimal_id
	 | STATS  (EQUAL  decimal)?
	 | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  server_certificate_value  RR_BRACKET
	 | compression
	 | rewind
	 | load_moun_load
	 | init_no_init
	 | no_skip
	 | format_noformat";
        
        /// <summary>
        /// backup_setting : DIFFERENTIAL 
        /// </summary>
        public partial class AstBackupSetting1 : AstBackupSetting
        {
            
            internal AstBackupSetting1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : COPY_ONLY 
        /// </summary>
        public partial class AstBackupSetting2 : AstBackupSetting
        {
            
            internal AstBackupSetting2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CREDENTIAL 
        /// </summary>
        public partial class AstBackupSetting3 : AstBackupSetting
        {
            
            internal AstBackupSetting3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : FILE_SNAPSHOT 
        /// </summary>
        public partial class AstBackupSetting4 : AstBackupSetting
        {
            
            internal AstBackupSetting4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : NO_CHECKSUM 
        /// </summary>
        public partial class AstBackupSetting5 : AstBackupSetting
        {
            
            internal AstBackupSetting5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CHECKSUM 
        /// </summary>
        public partial class AstBackupSetting6 : AstBackupSetting
        {
            
            internal AstBackupSetting6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : STOP_ON_ERROR 
        /// </summary>
        public partial class AstBackupSetting7 : AstBackupSetting
        {
            
            internal AstBackupSetting7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : CONTINUE_AFTER_ERROR 
        /// </summary>
        public partial class AstBackupSetting8 : AstBackupSetting
        {
            
            internal AstBackupSetting8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : RESTART 
        /// </summary>
        public partial class AstBackupSetting9 : AstBackupSetting
        {
            
            internal AstBackupSetting9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : DESCRIPTION EQUAL string_id 
        /// </summary>
        public partial class AstBackupSetting10 : AstBackupSetting
        {
            
            private AstStringId _stringId;
            
            internal AstBackupSetting10(ParserRuleContext ctx, AstStringId stringId) : 
                    base(ctx)
            {
                _stringId = stringId;
            }
            
            public virtual AstStringId StringId
            {
                get
                {
                    return _stringId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : NAME EQUAL backup_id 
        /// </summary>
        public partial class AstBackupSetting11 : AstBackupSetting
        {
            
            private AstBackupId _backupId;
            
            internal AstBackupSetting11(ParserRuleContext ctx, AstBackupId backupId) : 
                    base(ctx)
            {
                _backupId = backupId;
            }
            
            public virtual AstBackupId BackupId
            {
                get
                {
                    return _backupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : EXPIREDATE EQUAL string_id 
        /// </summary>
        public partial class AstBackupSetting12 : AstBackupSetting
        {
            
            private AstStringId _stringId;
            
            internal AstBackupSetting12(ParserRuleContext ctx, AstStringId stringId) : 
                    base(ctx)
            {
                _stringId = stringId;
            }
            
            public virtual AstStringId StringId
            {
                get
                {
                    return _stringId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : RETAINDAYS EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting13 : AstBackupSetting
        {
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting13(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MEDIADESCRIPTION EQUAL string_id 
        /// </summary>
        public partial class AstBackupSetting14 : AstBackupSetting
        {
            
            private AstStringId _stringId;
            
            internal AstBackupSetting14(ParserRuleContext ctx, AstStringId stringId) : 
                    base(ctx)
            {
                _stringId = stringId;
            }
            
            public virtual AstStringId StringId
            {
                get
                {
                    return _stringId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MEDIANAME EQUAL stringtext 
        /// </summary>
        public partial class AstBackupSetting15 : AstBackupSetting
        {
            
            private AstStringtext _stringtext;
            
            internal AstBackupSetting15(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : BLOCKSIZE EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting16 : AstBackupSetting
        {
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting16(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : BUFFERCOUNT EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting17 : AstBackupSetting
        {
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting17(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : MAXTRANSFER EQUAL decimal_id 
        /// </summary>
        public partial class AstBackupSetting18 : AstBackupSetting
        {
            
            private AstDecimalId _decimalId;
            
            internal AstBackupSetting18(ParserRuleContext ctx, AstDecimalId decimalId) : 
                    base(ctx)
            {
                _decimalId = decimalId;
            }
            
            public virtual AstDecimalId DecimalId
            {
                get
                {
                    return _decimalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : STATS EQUAL decimal 
        /// </summary>
        public partial class AstBackupSetting19 : AstBackupSetting
        {
            
            private AstDecimal _decimal;
            
            internal AstBackupSetting19(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : ENCRYPTION LR_BRACKET ALGORITHM EQUAL algorithm_short COMMA SERVER CERTIFICATE EQUAL server_certificate_value RR_BRACKET 
        /// </summary>
        public partial class AstBackupSetting20 : AstBackupSetting
        {
            
            private AstAlgorithmShort _algorithmShort;
            
            private AstServerCertificateValue _serverCertificateValue;
            
            internal AstBackupSetting20(ParserRuleContext ctx, AstAlgorithmShort algorithmShort, AstServerCertificateValue serverCertificateValue) : 
                    base(ctx)
            {
                _algorithmShort = algorithmShort;
                _serverCertificateValue = serverCertificateValue;
            }
            
            public virtual AstAlgorithmShort AlgorithmShort
            {
                get
                {
                    return _algorithmShort;
                }
            }
            
            public virtual AstServerCertificateValue ServerCertificateValue
            {
                get
                {
                    return _serverCertificateValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : compression 
        /// </summary>
        public partial class AstBackupSetting21 : AstBackupSetting
        {
            
            private AstCompression _compression;
            
            internal AstBackupSetting21(ParserRuleContext ctx, AstCompression compression) : 
                    base(ctx)
            {
                _compression = compression;
            }
            
            public virtual AstCompression Compression
            {
                get
                {
                    return _compression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : rewind 
        /// </summary>
        public partial class AstBackupSetting22 : AstBackupSetting
        {
            
            private AstRewind _rewind;
            
            internal AstBackupSetting22(ParserRuleContext ctx, AstRewind rewind) : 
                    base(ctx)
            {
                _rewind = rewind;
            }
            
            public virtual AstRewind Rewind
            {
                get
                {
                    return _rewind;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : load_moun_load 
        /// </summary>
        public partial class AstBackupSetting23 : AstBackupSetting
        {
            
            private AstLoadMounLoad _loadMounLoad;
            
            internal AstBackupSetting23(ParserRuleContext ctx, AstLoadMounLoad loadMounLoad) : 
                    base(ctx)
            {
                _loadMounLoad = loadMounLoad;
            }
            
            public virtual AstLoadMounLoad LoadMounLoad
            {
                get
                {
                    return _loadMounLoad;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : init_no_init 
        /// </summary>
        public partial class AstBackupSetting24 : AstBackupSetting
        {
            
            private AstInitNoInit _initNoInit;
            
            internal AstBackupSetting24(ParserRuleContext ctx, AstInitNoInit initNoInit) : 
                    base(ctx)
            {
                _initNoInit = initNoInit;
            }
            
            public virtual AstInitNoInit InitNoInit
            {
                get
                {
                    return _initNoInit;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : no_skip 
        /// </summary>
        public partial class AstBackupSetting25 : AstBackupSetting
        {
            
            private AstNoSkip _noSkip;
            
            internal AstBackupSetting25(ParserRuleContext ctx, AstNoSkip noSkip) : 
                    base(ctx)
            {
                _noSkip = noSkip;
            }
            
            public virtual AstNoSkip NoSkip
            {
                get
                {
                    return _noSkip;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        /// <summary>
        /// backup_setting : format_noformat 
        /// </summary>
        public partial class AstBackupSetting26 : AstBackupSetting
        {
            
            private AstFormatNoformat _formatNoformat;
            
            internal AstBackupSetting26(ParserRuleContext ctx, AstFormatNoformat formatNoformat) : 
                    base(ctx)
            {
                _formatNoformat = formatNoformat;
            }
            
            public virtual AstFormatNoformat FormatNoformat
            {
                get
                {
                    return _formatNoformat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBackupSetting(this);
            }
        }
        

        
        internal AstBackupSetting(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBackupSetting(Position p) : 
                base(p)
        {
        }
        
        internal AstBackupSetting(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBackupSetting Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBackupSetting.Resolve(list);
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting1(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting2(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting3(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting4(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting5(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting6(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting7(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting8(ctx);
            }
            if ((index == 1))
            {
                return new AstBackupSetting.AstBackupSetting9(ctx);
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting10(ctx, ((AstStringId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting11(ctx, ((AstBackupId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting12(ctx, ((AstStringId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting13(ctx, ((AstDecimalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting14(ctx, ((AstStringId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting15(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting16(ctx, ((AstDecimalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting17(ctx, ((AstDecimalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting18(ctx, ((AstDecimalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting19(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBackupSetting.AstBackupSetting20(ctx, ((AstAlgorithmShort)(list[0])), ((AstServerCertificateValue)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting21(ctx, ((AstCompression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting22(ctx, ((AstRewind)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting23(ctx, ((AstLoadMounLoad)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting24(ctx, ((AstInitNoInit)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting25(ctx, ((AstNoSkip)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBackupSetting.AstBackupSetting26(ctx, ((AstFormatNoformat)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstAlgorithmShort), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstServerCertificateValue), false, false))
                    {
                        return 11;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBackupId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringId), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimalId), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstCompression), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstRewind), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstLoadMounLoad), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstInitNoInit), false, false))
                {
                    return 15;
                }
                if (AstRoot.Eval(list[0], typeof(AstNoSkip), false, false))
                {
                    return 16;
                }
                if (AstRoot.Eval(list[0], typeof(AstFormatNoformat), false, false))
                {
                    return 17;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    DIFFERENTIAL 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx)
        {
            AstBackupSetting.AstBackupSetting1 result = new AstBackupSetting.AstBackupSetting1(ctx);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    DESCRIPTION EQUAL string_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstStringId stringId)
        {
            AstBackupSetting.AstBackupSetting10 result = new AstBackupSetting.AstBackupSetting10(ctx, stringId);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    NAME EQUAL backup_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstBackupId backupId)
        {
            AstBackupSetting.AstBackupSetting11 result = new AstBackupSetting.AstBackupSetting11(ctx, backupId);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    RETAINDAYS EQUAL decimal_id 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstDecimalId decimalId)
        {
            AstBackupSetting.AstBackupSetting13 result = new AstBackupSetting.AstBackupSetting13(ctx, decimalId);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    MEDIANAME EQUAL stringtext 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstBackupSetting.AstBackupSetting15 result = new AstBackupSetting.AstBackupSetting15(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    STATS EQUAL decimal 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstBackupSetting.AstBackupSetting19 result = new AstBackupSetting.AstBackupSetting19(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    ENCRYPTION ( ALGORITHM EQUAL algorithm_short , SERVER CERTIFICATE EQUAL server_certificate_value ) 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstAlgorithmShort algorithmShort, AstServerCertificateValue serverCertificateValue)
        {
            AstBackupSetting.AstBackupSetting20 result = new AstBackupSetting.AstBackupSetting20(ctx, algorithmShort, serverCertificateValue);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    compression 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstCompression compression)
        {
            AstBackupSetting.AstBackupSetting21 result = new AstBackupSetting.AstBackupSetting21(ctx, compression);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    rewind 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstRewind rewind)
        {
            AstBackupSetting.AstBackupSetting22 result = new AstBackupSetting.AstBackupSetting22(ctx, rewind);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    load_moun_load 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstLoadMounLoad loadMounLoad)
        {
            AstBackupSetting.AstBackupSetting23 result = new AstBackupSetting.AstBackupSetting23(ctx, loadMounLoad);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    init_no_init 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstInitNoInit initNoInit)
        {
            AstBackupSetting.AstBackupSetting24 result = new AstBackupSetting.AstBackupSetting24(ctx, initNoInit);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    no_skip 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstNoSkip noSkip)
        {
            AstBackupSetting.AstBackupSetting25 result = new AstBackupSetting.AstBackupSetting25(ctx, noSkip);
            return result;
        }
        
        /// <summary>
        /// backup_setting : 
        ///    format_noformat 
        /// </summary>
        public static AstBackupSetting BackupSetting(ParserRuleContext ctx, AstFormatNoformat formatNoformat)
        {
            AstBackupSetting.AstBackupSetting26 result = new AstBackupSetting.AstBackupSetting26(ctx, formatNoformat);
            return result;
        }
    }
    
    /// <summary>
    /// server_certificate_value
    /// 	 : encryptor_id
    /// 	 | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id
    /// </summary>
    public abstract partial class AstServerCertificateValue : AstBnfRule
    {
        
        protected static string _rule = "server_certificate_value\r\n\t : encryptor_id\r\n\t | SERVER  ASYMMETRIC  KEY  EQUAL  e" +
            "ncryptor_id";
        
        /// <summary>
        /// server_certificate_value : encryptor_id 
        /// </summary>
        public partial class AstServerCertificateValue1 : AstServerCertificateValue
        {
            
            private AstEncryptorId _encryptorId;
            
            internal AstServerCertificateValue1(ParserRuleContext ctx, AstEncryptorId encryptorId) : 
                    base(ctx)
            {
                _encryptorId = encryptorId;
            }
            
            public virtual AstEncryptorId EncryptorId
            {
                get
                {
                    return _encryptorId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerCertificateValue(this);
            }
        }
        /// <summary>
        /// server_certificate_value : SERVER ASYMMETRIC KEY EQUAL encryptor_id 
        /// </summary>
        public partial class AstServerCertificateValue2 : AstServerCertificateValue
        {
            
            private AstEncryptorId _encryptorId;
            
            internal AstServerCertificateValue2(ParserRuleContext ctx, AstEncryptorId encryptorId) : 
                    base(ctx)
            {
                _encryptorId = encryptorId;
            }
            
            public virtual AstEncryptorId EncryptorId
            {
                get
                {
                    return _encryptorId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServerCertificateValue(this);
            }
        }
        

        
        internal AstServerCertificateValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServerCertificateValue(Position p) : 
                base(p)
        {
        }
        
        internal AstServerCertificateValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServerCertificateValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServerCertificateValue.Resolve(list);
            if ((index == 2))
            {
                return new AstServerCertificateValue.AstServerCertificateValue1(ctx, ((AstEncryptorId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServerCertificateValue.AstServerCertificateValue2(ctx, ((AstEncryptorId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEncryptorId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstEncryptorId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// server_certificate_value : 
        ///    encryptor_id 
        /// </summary>
        public static AstServerCertificateValue ServerCertificateValue(ParserRuleContext ctx, AstEncryptorId encryptorId)
        {
            AstServerCertificateValue.AstServerCertificateValue1 result = new AstServerCertificateValue.AstServerCertificateValue1(ctx, encryptorId);
            return result;
        }
    }
    
    /// <summary>
    /// kill_statement
    /// 	 : KILL  (kill_process | kill_query_notification | kill_stats_job)
    /// </summary>
    public abstract partial class AstKillStatement : AstBnfRule
    {
        
        protected static string _rule = "kill_statement\r\n\t : KILL  (kill_process | kill_query_notification | kill_stats_jo" +
            "b)";
        
        /// <summary>
        /// kill_statement : KILL kill_process 
        /// </summary>
        public partial class AstKillStatement1 : AstKillStatement
        {
            
            private AstKillProcess _killProcess;
            
            internal AstKillStatement1(ParserRuleContext ctx, AstKillProcess killProcess) : 
                    base(ctx)
            {
                _killProcess = killProcess;
            }
            
            public virtual AstKillProcess KillProcess
            {
                get
                {
                    return _killProcess;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillStatement(this);
            }
        }
        /// <summary>
        /// kill_statement : KILL kill_query_notification 
        /// </summary>
        public partial class AstKillStatement2 : AstKillStatement
        {
            
            private AstKillQueryNotification _killQueryNotification;
            
            internal AstKillStatement2(ParserRuleContext ctx, AstKillQueryNotification killQueryNotification) : 
                    base(ctx)
            {
                _killQueryNotification = killQueryNotification;
            }
            
            public virtual AstKillQueryNotification KillQueryNotification
            {
                get
                {
                    return _killQueryNotification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillStatement(this);
            }
        }
        /// <summary>
        /// kill_statement : KILL kill_stats_job 
        /// </summary>
        public partial class AstKillStatement3 : AstKillStatement
        {
            
            private AstKillStatsJob _killStatsJob;
            
            internal AstKillStatement3(ParserRuleContext ctx, AstKillStatsJob killStatsJob) : 
                    base(ctx)
            {
                _killStatsJob = killStatsJob;
            }
            
            public virtual AstKillStatsJob KillStatsJob
            {
                get
                {
                    return _killStatsJob;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillStatement(this);
            }
        }
        

        
        internal AstKillStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKillStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstKillStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstKillStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstKillStatement.Resolve(list);
            if ((index == 2))
            {
                return new AstKillStatement.AstKillStatement1(ctx, ((AstKillProcess)(list[0])));
            }
            if ((index == 2))
            {
                return new AstKillStatement.AstKillStatement2(ctx, ((AstKillQueryNotification)(list[0])));
            }
            if ((index == 2))
            {
                return new AstKillStatement.AstKillStatement3(ctx, ((AstKillStatsJob)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstKillProcess), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstKillQueryNotification), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstKillStatsJob), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_process 
        /// </summary>
        public static AstKillStatement KillStatement(ParserRuleContext ctx, AstKillProcess killProcess)
        {
            AstKillStatement.AstKillStatement1 result = new AstKillStatement.AstKillStatement1(ctx, killProcess);
            return result;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_query_notification 
        /// </summary>
        public static AstKillStatement KillStatement(ParserRuleContext ctx, AstKillQueryNotification killQueryNotification)
        {
            AstKillStatement.AstKillStatement2 result = new AstKillStatement.AstKillStatement2(ctx, killQueryNotification);
            return result;
        }
        
        /// <summary>
        /// kill_statement : 
        ///    KILL kill_stats_job 
        /// </summary>
        public static AstKillStatement KillStatement(ParserRuleContext ctx, AstKillStatsJob killStatsJob)
        {
            AstKillStatement.AstKillStatement3 result = new AstKillStatement.AstKillStatement3(ctx, killStatsJob);
            return result;
        }
    }
    
    /// <summary>
    /// kill_process
    /// 	 : (session = decimal_string | UOW)  (WITH  STATUSONLY)?
    /// </summary>
    public abstract partial class AstKillProcess : AstBnfRule
    {
        
        protected static string _rule = "kill_process\r\n\t : (session = decimal_string | UOW)  (WITH  STATUSONLY)?";
        
        /// <summary>
        /// kill_process : session=decimal_string WITH STATUSONLY 
        /// </summary>
        public partial class AstKillProcess1 : AstKillProcess
        {
            
            private AstDecimalString _session;
            
            internal AstKillProcess1(ParserRuleContext ctx, AstDecimalString session) : 
                    base(ctx)
            {
                _session = session;
            }
            
            public virtual AstDecimalString Session
            {
                get
                {
                    return _session;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillProcess(this);
            }
        }
        /// <summary>
        /// kill_process : UOW WITH STATUSONLY 
        /// </summary>
        public partial class AstKillProcess2 : AstKillProcess
        {
            
            internal AstKillProcess2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillProcess(this);
            }
        }
        

        
        internal AstKillProcess(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKillProcess(Position p) : 
                base(p)
        {
        }
        
        internal AstKillProcess(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstKillProcess Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstKillProcess.Resolve(list);
            if ((index == 2))
            {
                return new AstKillProcess.AstKillProcess1(ctx, ((AstDecimalString)(list[0])));
            }
            if ((index == 1))
            {
                return new AstKillProcess.AstKillProcess2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimalString), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// kill_process : 
        ///    session=decimal_string WITH STATUSONLY 
        /// </summary>
        public static AstKillProcess KillProcess(ParserRuleContext ctx, AstDecimalString session)
        {
            AstKillProcess.AstKillProcess1 result = new AstKillProcess.AstKillProcess1(ctx, session);
            return result;
        }
        
        /// <summary>
        /// kill_process : 
        ///    UOW WITH STATUSONLY 
        /// </summary>
        public static AstKillProcess KillProcess(ParserRuleContext ctx)
        {
            AstKillProcess.AstKillProcess2 result = new AstKillProcess.AstKillProcess2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// kill_query_notification
    /// 	 : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription = decimal)
    /// </summary>
    public abstract partial class AstKillQueryNotification : AstBnfRule
    {
        
        protected static string _rule = "kill_query_notification\r\n\t : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscripti" +
            "on = decimal)";
        
        /// <summary>
        /// kill_query_notification : QUERY NOTIFICATION SUBSCRIPTION ALL 
        /// </summary>
        public partial class AstKillQueryNotification1 : AstKillQueryNotification
        {
            
            internal AstKillQueryNotification1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillQueryNotification(this);
            }
        }
        /// <summary>
        /// kill_query_notification : QUERY NOTIFICATION SUBSCRIPTION subscription=decimal 
        /// </summary>
        public partial class AstKillQueryNotification2 : AstKillQueryNotification
        {
            
            private AstDecimal _subscription;
            
            internal AstKillQueryNotification2(ParserRuleContext ctx, AstDecimal subscription) : 
                    base(ctx)
            {
                _subscription = subscription;
            }
            
            public virtual AstDecimal Subscription
            {
                get
                {
                    return _subscription;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKillQueryNotification(this);
            }
        }
        

        
        internal AstKillQueryNotification(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKillQueryNotification(Position p) : 
                base(p)
        {
        }
        
        internal AstKillQueryNotification(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstKillQueryNotification Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstKillQueryNotification.Resolve(list);
            if ((index == 1))
            {
                return new AstKillQueryNotification.AstKillQueryNotification1(ctx);
            }
            if ((index == 2))
            {
                return new AstKillQueryNotification.AstKillQueryNotification2(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// kill_query_notification : 
        ///    QUERY NOTIFICATION SUBSCRIPTION ALL 
        /// </summary>
        public static AstKillQueryNotification KillQueryNotification(ParserRuleContext ctx)
        {
            AstKillQueryNotification.AstKillQueryNotification1 result = new AstKillQueryNotification.AstKillQueryNotification1(ctx);
            return result;
        }
        
        /// <summary>
        /// kill_query_notification : 
        ///    QUERY NOTIFICATION SUBSCRIPTION subscription=decimal 
        /// </summary>
        public static AstKillQueryNotification KillQueryNotification(ParserRuleContext ctx, AstDecimal subscription)
        {
            AstKillQueryNotification.AstKillQueryNotification2 result = new AstKillQueryNotification.AstKillQueryNotification2(ctx, subscription);
            return result;
        }
    }
    
    /// <summary>
    /// kill_stats_job
    /// 	 : STATS  JOB  job = decimal
    /// </summary>
    public partial class AstKillStatsJob : AstBnfRule
    {
        
        protected static string _rule = "kill_stats_job\r\n\t : STATS  JOB  job = decimal";
        
        internal AstKillStatsJob(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstKillStatsJob(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstKillStatsJob(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstKillStatsJob(ParserRuleContext ctx, AstDecimal job) : 
                base(ctx)
        {
            _job = job;
        }
        
        public virtual AstDecimal _job
        {
            get
            {
                return _job;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitKillStatsJob(this);
        }
        
        /// <summary>
        /// kill_stats_job : 
        ///    STATS JOB job=decimal 
        /// </summary>
        public static AstKillStatsJob KillStatsJob(ParserRuleContext ctx, AstDecimal job)
        {
            AstKillStatsJob result = new AstKillStatsJob(ctx, job);
            return result;
        }
    }
    
    /// <summary>
    /// execute_body
    /// 	 : (return_status = local_id  EQUAL)?  body_kind  execute_statement_arg?
    /// 	 | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  server_id)?
    /// </summary>
    public abstract partial class AstExecuteBody : AstBnfRule
    {
        
        protected static string _rule = "execute_body\r\n\t : (return_status = local_id  EQUAL)?  body_kind  execute_statemen" +
            "t_arg?\r\n\t | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL" +
            "  stringtext)?  (AT_KEYWORD  server_id)?";
        
        /// <summary>
        /// execute_body : return_status=local_id EQUAL body_kind execute_statement_arg? 
        /// </summary>
        public partial class AstExecuteBody1 : AstExecuteBody
        {
            
            private AstLocalId _returnStatus;
            
            private AstBodyKind _bodyKind;
            
            private AstExecuteStatementArg _executeStatementArg;
            
            internal AstExecuteBody1(ParserRuleContext ctx, AstLocalId returnStatus, AstBodyKind bodyKind, AstExecuteStatementArg executeStatementArg) : 
                    base(ctx)
            {
                _returnStatus = returnStatus;
                _bodyKind = bodyKind;
                _executeStatementArg = executeStatementArg;
            }
            
            public virtual AstLocalId ReturnStatus
            {
                get
                {
                    return _returnStatus;
                }
            }
            
            public virtual AstBodyKind BodyKind
            {
                get
                {
                    return _bodyKind;
                }
            }
            
            public virtual AstExecuteStatementArg ExecuteStatementArg
            {
                get
                {
                    return _executeStatementArg;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteBody(this);
            }
        }
        /// <summary>
        /// execute_body : LR_BRACKET execute_var_strings RR_BRACKET AS? login_user EQUAL stringtext AT_KEYWORD server_id 
        /// </summary>
        public partial class AstExecuteBody2 : AstExecuteBody
        {
            
            private AstExecuteVarStrings _executeVarStrings;
            
            private AstLoginUser _loginUser;
            
            private AstStringtext _stringtext;
            
            private AstServerId _serverId;
            
            internal AstExecuteBody2(ParserRuleContext ctx, AstExecuteVarStrings executeVarStrings, AstLoginUser loginUser, AstStringtext stringtext, AstServerId serverId) : 
                    base(ctx)
            {
                _executeVarStrings = executeVarStrings;
                _loginUser = loginUser;
                _stringtext = stringtext;
                _serverId = serverId;
            }
            
            public virtual AstExecuteVarStrings ExecuteVarStrings
            {
                get
                {
                    return _executeVarStrings;
                }
            }
            
            public virtual AstLoginUser LoginUser
            {
                get
                {
                    return _loginUser;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstServerId ServerId
            {
                get
                {
                    return _serverId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteBody(this);
            }
        }
        

        
        internal AstExecuteBody(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteBody(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteBody(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteBody Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteBody.Resolve(list);
            if ((index == 4))
            {
                return new AstExecuteBody.AstExecuteBody1(ctx, ((AstLocalId)(list[0])), ((AstBodyKind)(list[1])), ((AstExecuteStatementArg)(list[2])));
            }
            if ((index == 5))
            {
                return new AstExecuteBody.AstExecuteBody2(ctx, ((AstExecuteVarStrings)(list[0])), ((AstLoginUser)(list[1])), ((AstStringtext)(list[2])), ((AstServerId)(list[3])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteVarStrings), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLoginUser), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstStringtext), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstServerId), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstBodyKind), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExecuteStatementArg), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_body : 
        ///    return_status=local_id EQUAL body_kind execute_statement_arg? 
        /// </summary>
        public static AstExecuteBody ExecuteBody(ParserRuleContext ctx, AstLocalId returnStatus, AstBodyKind bodyKind, AstExecuteStatementArg executeStatementArg)
        {
            AstExecuteBody.AstExecuteBody1 result = new AstExecuteBody.AstExecuteBody1(ctx, returnStatus, bodyKind, executeStatementArg);
            return result;
        }
        
        /// <summary>
        /// execute_body : 
        ///    ( execute_var_strings ) AS? login_user EQUAL stringtext AT_KEYWORD server_id 
        /// </summary>
        public static AstExecuteBody ExecuteBody(ParserRuleContext ctx, AstExecuteVarStrings executeVarStrings, AstLoginUser loginUser, AstStringtext stringtext, AstServerId serverId)
        {
            AstExecuteBody.AstExecuteBody2 result = new AstExecuteBody.AstExecuteBody2(ctx, executeVarStrings, loginUser, stringtext, serverId);
            return result;
        }
    }
    
    /// <summary>
    /// body_kind
    /// 	 : func_proc_name_server_database_schema
    /// 	 | execute_var_string
    /// </summary>
    public abstract partial class AstBodyKind : AstBnfRule
    {
        
        protected static string _rule = "body_kind\r\n\t : func_proc_name_server_database_schema\r\n\t | execute_var_string";
        
        /// <summary>
        /// body_kind : func_proc_name_server_database_schema 
        /// </summary>
        public partial class AstBodyKind1 : AstBodyKind
        {
            
            private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
            
            internal AstBodyKind1(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema) : 
                    base(ctx)
            {
                _funcProcNameServerDatabaseSchema = funcProcNameServerDatabaseSchema;
            }
            
            public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
            {
                get
                {
                    return _funcProcNameServerDatabaseSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBodyKind(this);
            }
        }
        /// <summary>
        /// body_kind : execute_var_string 
        /// </summary>
        public partial class AstBodyKind2 : AstBodyKind
        {
            
            private AstExecuteVarString _executeVarString;
            
            internal AstBodyKind2(ParserRuleContext ctx, AstExecuteVarString executeVarString) : 
                    base(ctx)
            {
                _executeVarString = executeVarString;
            }
            
            public virtual AstExecuteVarString ExecuteVarString
            {
                get
                {
                    return _executeVarString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBodyKind(this);
            }
        }
        

        
        internal AstBodyKind(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBodyKind(Position p) : 
                base(p)
        {
        }
        
        internal AstBodyKind(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBodyKind Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBodyKind.Resolve(list);
            if ((index == 2))
            {
                return new AstBodyKind.AstBodyKind1(ctx, ((AstFuncProcNameServerDatabaseSchema)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBodyKind.AstBodyKind2(ctx, ((AstExecuteVarString)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFuncProcNameServerDatabaseSchema), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExecuteVarString), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// body_kind : 
        ///    func_proc_name_server_database_schema 
        /// </summary>
        public static AstBodyKind BodyKind(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema)
        {
            AstBodyKind.AstBodyKind1 result = new AstBodyKind.AstBodyKind1(ctx, funcProcNameServerDatabaseSchema);
            return result;
        }
        
        /// <summary>
        /// body_kind : 
        ///    execute_var_string 
        /// </summary>
        public static AstBodyKind BodyKind(ParserRuleContext ctx, AstExecuteVarString executeVarString)
        {
            AstBodyKind.AstBodyKind2 result = new AstBodyKind.AstBodyKind2(ctx, executeVarString);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg
    /// 	 : execute_statement_arg_unnamed  execute_statement_args?
    /// 	 | execute_statement_arg_nameds
    /// </summary>
    public abstract partial class AstExecuteStatementArg : AstBnfRule
    {
        
        protected static string _rule = "execute_statement_arg\r\n\t : execute_statement_arg_unnamed  execute_statement_args?" +
            "\r\n\t | execute_statement_arg_nameds";
        
        /// <summary>
        /// execute_statement_arg : execute_statement_arg_unnamed execute_statement_args? 
        /// </summary>
        public partial class AstExecuteStatementArg1 : AstExecuteStatementArg
        {
            
            private AstExecuteStatementArgUnnamed _executeStatementArgUnnamed;
            
            private AstExecuteStatementArgs _executeStatementArgs;
            
            internal AstExecuteStatementArg1(ParserRuleContext ctx, AstExecuteStatementArgUnnamed executeStatementArgUnnamed, AstExecuteStatementArgs executeStatementArgs) : 
                    base(ctx)
            {
                _executeStatementArgUnnamed = executeStatementArgUnnamed;
                _executeStatementArgs = executeStatementArgs;
            }
            
            public virtual AstExecuteStatementArgUnnamed ExecuteStatementArgUnnamed
            {
                get
                {
                    return _executeStatementArgUnnamed;
                }
            }
            
            public virtual AstExecuteStatementArgs ExecuteStatementArgs
            {
                get
                {
                    return _executeStatementArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteStatementArg(this);
            }
        }
        /// <summary>
        /// execute_statement_arg : execute_statement_arg_nameds 
        /// </summary>
        public partial class AstExecuteStatementArg2 : AstExecuteStatementArg
        {
            
            private AstExecuteStatementArgNameds _executeStatementArgNameds;
            
            internal AstExecuteStatementArg2(ParserRuleContext ctx, AstExecuteStatementArgNameds executeStatementArgNameds) : 
                    base(ctx)
            {
                _executeStatementArgNameds = executeStatementArgNameds;
            }
            
            public virtual AstExecuteStatementArgNameds ExecuteStatementArgNameds
            {
                get
                {
                    return _executeStatementArgNameds;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteStatementArg(this);
            }
        }
        

        
        internal AstExecuteStatementArg(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArg(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArg(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteStatementArg Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteStatementArg.Resolve(list);
            if ((index == 3))
            {
                return new AstExecuteStatementArg.AstExecuteStatementArg1(ctx, ((AstExecuteStatementArgUnnamed)(list[0])), ((AstExecuteStatementArgs)(list[1])));
            }
            if ((index == 2))
            {
                return new AstExecuteStatementArg.AstExecuteStatementArg2(ctx, ((AstExecuteStatementArgNameds)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatementArgUnnamed), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExecuteStatementArgs), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteStatementArgNameds), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_statement_arg : 
        ///    execute_statement_arg_unnamed execute_statement_args? 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(ParserRuleContext ctx, AstExecuteStatementArgUnnamed executeStatementArgUnnamed, AstExecuteStatementArgs executeStatementArgs)
        {
            AstExecuteStatementArg.AstExecuteStatementArg1 result = new AstExecuteStatementArg.AstExecuteStatementArg1(ctx, executeStatementArgUnnamed, executeStatementArgs);
            return result;
        }
        
        /// <summary>
        /// execute_statement_arg : 
        ///    execute_statement_arg_nameds 
        /// </summary>
        public static AstExecuteStatementArg ExecuteStatementArg(ParserRuleContext ctx, AstExecuteStatementArgNameds executeStatementArgNameds)
        {
            AstExecuteStatementArg.AstExecuteStatementArg2 result = new AstExecuteStatementArg.AstExecuteStatementArg2(ctx, executeStatementArgNameds);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_named
    /// 	 : name = local_id  EQUAL  value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgNamed : AstBnfRule
    {
        
        protected static string _rule = "execute_statement_arg_named\r\n\t : name = local_id  EQUAL  value = execute_paramete" +
            "r";
        
        internal AstExecuteStatementArgNamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgNamed(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgNamed(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstExecuteStatementArgNamed(ParserRuleContext ctx, AstLocalId name, AstExecuteParameter value) : 
                base(ctx)
        {
            _name = name;
            _value = value;
        }
        
        public virtual AstLocalId _name
        {
            get
            {
                return _name;
            }
        }
        
        public virtual AstExecuteParameter _value
        {
            get
            {
                return _value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNamed(this);
        }
        
        /// <summary>
        /// execute_statement_arg_named : 
        ///    name=local_id EQUAL value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgNamed ExecuteStatementArgNamed(ParserRuleContext ctx, AstLocalId name, AstExecuteParameter value)
        {
            AstExecuteStatementArgNamed result = new AstExecuteStatementArgNamed(ctx, name, value);
            return result;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_unnamed
    /// 	 : value = execute_parameter
    /// </summary>
    public partial class AstExecuteStatementArgUnnamed : AstBnfRule
    {
        
        protected static string _rule = "execute_statement_arg_unnamed\r\n\t : value = execute_parameter";
        
        internal AstExecuteStatementArgUnnamed(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstExecuteStatementArgUnnamed(ParserRuleContext ctx, AstExecuteParameter value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public virtual AstExecuteParameter _value
        {
            get
            {
                return _value;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgUnnamed(this);
        }
        
        /// <summary>
        /// execute_statement_arg_unnamed : 
        ///    value=execute_parameter 
        /// </summary>
        public static AstExecuteStatementArgUnnamed ExecuteStatementArgUnnamed(ParserRuleContext ctx, AstExecuteParameter value)
        {
            AstExecuteStatementArgUnnamed result = new AstExecuteStatementArgUnnamed(ctx, value);
            return result;
        }
    }
    
    /// <summary>
    /// execute_parameter
    /// 	 : constant
    /// 	 | local_id  output_out?
    /// 	 | id_
    /// 	 | DEFAULT
    /// 	 | NULL_
    /// </summary>
    public abstract partial class AstExecuteParameter : AstBnfRule
    {
        
        protected static string _rule = "execute_parameter\r\n\t : constant\r\n\t | local_id  output_out?\r\n\t | id_\r\n\t | DEFAULT\r" +
            "\n\t | NULL_";
        
        /// <summary>
        /// execute_parameter : constant 
        /// </summary>
        public partial class AstExecuteParameter1 : AstExecuteParameter
        {
            
            private AstConstant _constant;
            
            internal AstExecuteParameter1(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : local_id output_out? 
        /// </summary>
        public partial class AstExecuteParameter2 : AstExecuteParameter
        {
            
            private AstLocalId _localId;
            
            private AstOutputOut _outputOut;
            
            internal AstExecuteParameter2(ParserRuleContext ctx, AstLocalId localId, AstOutputOut outputOut) : 
                    base(ctx)
            {
                _localId = localId;
                _outputOut = outputOut;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstOutputOut OutputOut
            {
                get
                {
                    return _outputOut;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : id_ 
        /// </summary>
        public partial class AstExecuteParameter3 : AstExecuteParameter
        {
            
            private AstId _id;
            
            internal AstExecuteParameter3(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : DEFAULT 
        /// </summary>
        public partial class AstExecuteParameter4 : AstExecuteParameter
        {
            
            internal AstExecuteParameter4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        /// <summary>
        /// execute_parameter : NULL_ 
        /// </summary>
        public partial class AstExecuteParameter5 : AstExecuteParameter
        {
            
            internal AstExecuteParameter5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteParameter(this);
            }
        }
        

        
        internal AstExecuteParameter(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteParameter(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteParameter(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteParameter Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteParameter.Resolve(list);
            if ((index == 2))
            {
                return new AstExecuteParameter.AstExecuteParameter1(ctx, ((AstConstant)(list[0])));
            }
            if ((index == 3))
            {
                return new AstExecuteParameter.AstExecuteParameter2(ctx, ((AstLocalId)(list[0])), ((AstOutputOut)(list[1])));
            }
            if ((index == 2))
            {
                return new AstExecuteParameter.AstExecuteParameter3(ctx, ((AstId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstExecuteParameter.AstExecuteParameter4(ctx);
            }
            if ((index == 1))
            {
                return new AstExecuteParameter.AstExecuteParameter5(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOutputOut), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    constant 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx, AstConstant constant)
        {
            AstExecuteParameter.AstExecuteParameter1 result = new AstExecuteParameter.AstExecuteParameter1(ctx, constant);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    local_id output_out? 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx, AstLocalId localId, AstOutputOut outputOut)
        {
            AstExecuteParameter.AstExecuteParameter2 result = new AstExecuteParameter.AstExecuteParameter2(ctx, localId, outputOut);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    id_ 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx, AstId id)
        {
            AstExecuteParameter.AstExecuteParameter3 result = new AstExecuteParameter.AstExecuteParameter3(ctx, id);
            return result;
        }
        
        /// <summary>
        /// execute_parameter : 
        ///    DEFAULT 
        /// </summary>
        public static AstExecuteParameter ExecuteParameter(ParserRuleContext ctx)
        {
            AstExecuteParameter.AstExecuteParameter4 result = new AstExecuteParameter.AstExecuteParameter4(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// execute_var_string
    /// 	 : source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string)?)?
    /// 	 | stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?
    /// </summary>
    public abstract partial class AstExecuteVarString : AstBnfRule
    {
        
        protected static string _rule = "execute_var_string\r\n\t : source = local_id  output_out?  (PLUS  more = local_id  (" +
            "PLUS  execute_var_string)?)?\r\n\t | stringtext  (PLUS  local_id  (PLUS  execute_va" +
            "r_string)?)?";
        
        /// <summary>
        /// execute_var_string : source=local_id output_out? PLUS more=local_id PLUS execute_var_string 
        /// </summary>
        public partial class AstExecuteVarString1 : AstExecuteVarString
        {
            
            private AstLocalId _source;
            
            private AstOutputOut _outputOut;
            
            private AstLocalId _more;
            
            private AstExecuteVarString _executeVarString;
            
            internal AstExecuteVarString1(ParserRuleContext ctx, AstLocalId source, AstOutputOut outputOut, AstLocalId more, AstExecuteVarString executeVarString) : 
                    base(ctx)
            {
                _source = source;
                _outputOut = outputOut;
                _more = more;
                _executeVarString = executeVarString;
            }
            
            public virtual AstLocalId Source
            {
                get
                {
                    return _source;
                }
            }
            
            public virtual AstOutputOut OutputOut
            {
                get
                {
                    return _outputOut;
                }
            }
            
            public virtual AstLocalId More
            {
                get
                {
                    return _more;
                }
            }
            
            public virtual AstExecuteVarString ExecuteVarString
            {
                get
                {
                    return _executeVarString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteVarString(this);
            }
        }
        /// <summary>
        /// execute_var_string : stringtext PLUS local_id PLUS execute_var_string 
        /// </summary>
        public partial class AstExecuteVarString2 : AstExecuteVarString
        {
            
            private AstStringtext _stringtext;
            
            private AstLocalId _localId;
            
            private AstExecuteVarString _executeVarString;
            
            internal AstExecuteVarString2(ParserRuleContext ctx, AstStringtext stringtext, AstLocalId localId, AstExecuteVarString executeVarString) : 
                    base(ctx)
            {
                _stringtext = stringtext;
                _localId = localId;
                _executeVarString = executeVarString;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstExecuteVarString ExecuteVarString
            {
                get
                {
                    return _executeVarString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteVarString(this);
            }
        }
        

        
        internal AstExecuteVarString(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteVarString(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteVarString(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteVarString Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteVarString.Resolve(list);
            if ((index == 5))
            {
                return new AstExecuteVarString.AstExecuteVarString1(ctx, ((AstLocalId)(list[0])), ((AstOutputOut)(list[1])), ((AstLocalId)(list[2])), ((AstExecuteVarString)(list[3])));
            }
            if ((index == 4))
            {
                return new AstExecuteVarString.AstExecuteVarString2(ctx, ((AstStringtext)(list[0])), ((AstLocalId)(list[1])), ((AstExecuteVarString)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOutputOut), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstLocalId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExecuteVarString), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstLocalId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExecuteVarString), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_var_string : 
        ///    source=local_id output_out? PLUS more=local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(ParserRuleContext ctx, AstLocalId source, AstOutputOut outputOut, AstLocalId more, AstExecuteVarString executeVarString)
        {
            AstExecuteVarString.AstExecuteVarString1 result = new AstExecuteVarString.AstExecuteVarString1(ctx, source, outputOut, more, executeVarString);
            return result;
        }
        
        /// <summary>
        /// execute_var_string : 
        ///    stringtext PLUS local_id PLUS execute_var_string 
        /// </summary>
        public static AstExecuteVarString ExecuteVarString(ParserRuleContext ctx, AstStringtext stringtext, AstLocalId localId, AstExecuteVarString executeVarString)
        {
            AstExecuteVarString.AstExecuteVarString2 result = new AstExecuteVarString.AstExecuteVarString2(ctx, stringtext, localId, executeVarString);
            return result;
        }
    }
    
    /// <summary>
    /// security_statement
    /// 	 : execute_clause
    /// 	 | GRANT  grant_mode  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?
    /// 	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?
    /// 	 | open_key
    /// 	 | close_key
    /// 	 | create_key
    /// 	 | create_certificate
    /// </summary>
    public abstract partial class AstSecurityStatement : AstBnfRule
    {
        
        protected static string _rule = @"security_statement
	 : execute_clause
	 | GRANT  grant_mode  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)?
	 | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)?
	 | open_key
	 | close_key
	 | create_key
	 | create_certificate";
        
        /// <summary>
        /// security_statement : execute_clause 
        /// </summary>
        public partial class AstSecurityStatement1 : AstSecurityStatement
        {
            
            private AstExecuteClause _executeClause;
            
            internal AstSecurityStatement1(ParserRuleContext ctx, AstExecuteClause executeClause) : 
                    base(ctx)
            {
                _executeClause = executeClause;
            }
            
            public virtual AstExecuteClause ExecuteClause
            {
                get
                {
                    return _executeClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : GRANT grant_mode ON class_type_for_grant DOUBLE_COLON table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id 
        /// </summary>
        public partial class AstSecurityStatement2 : AstSecurityStatement
        {
            
            private AstGrantMode _grantMode;
            
            private AstClassTypeForGrant _classTypeForGrant;
            
            private AstFullTableRef _table;
            
            private AstToPrincipalRincipalIds _toPrincipalRincipalIds;
            
            private AstPrincipalId _asPrincipal;
            
            internal AstSecurityStatement2(ParserRuleContext ctx, AstGrantMode grantMode, AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal) : 
                    base(ctx)
            {
                _grantMode = grantMode;
                _classTypeForGrant = classTypeForGrant;
                _table = table;
                _toPrincipalRincipalIds = toPrincipalRincipalIds;
                _asPrincipal = asPrincipal;
            }
            
            public virtual AstGrantMode GrantMode
            {
                get
                {
                    return _grantMode;
                }
            }
            
            public virtual AstClassTypeForGrant ClassTypeForGrant
            {
                get
                {
                    return _classTypeForGrant;
                }
            }
            
            public virtual AstFullTableRef Table
            {
                get
                {
                    return _table;
                }
            }
            
            public virtual AstToPrincipalRincipalIds ToPrincipalRincipalIds
            {
                get
                {
                    return _toPrincipalRincipalIds;
                }
            }
            
            public virtual AstPrincipalId AsPrincipal
            {
                get
                {
                    return _asPrincipal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : REVERT LR_BRACKET WITH COOKIE EQUAL local_id RR_BRACKET 
        /// </summary>
        public partial class AstSecurityStatement3 : AstSecurityStatement
        {
            
            private AstLocalId _localId;
            
            internal AstSecurityStatement3(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : open_key 
        /// </summary>
        public partial class AstSecurityStatement4 : AstSecurityStatement
        {
            
            private AstOpenKey _openKey;
            
            internal AstSecurityStatement4(ParserRuleContext ctx, AstOpenKey openKey) : 
                    base(ctx)
            {
                _openKey = openKey;
            }
            
            public virtual AstOpenKey OpenKey
            {
                get
                {
                    return _openKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : close_key 
        /// </summary>
        public partial class AstSecurityStatement5 : AstSecurityStatement
        {
            
            private AstCloseKey _closeKey;
            
            internal AstSecurityStatement5(ParserRuleContext ctx, AstCloseKey closeKey) : 
                    base(ctx)
            {
                _closeKey = closeKey;
            }
            
            public virtual AstCloseKey CloseKey
            {
                get
                {
                    return _closeKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : create_key 
        /// </summary>
        public partial class AstSecurityStatement6 : AstSecurityStatement
        {
            
            private AstCreateKey _createKey;
            
            internal AstSecurityStatement6(ParserRuleContext ctx, AstCreateKey createKey) : 
                    base(ctx)
            {
                _createKey = createKey;
            }
            
            public virtual AstCreateKey CreateKey
            {
                get
                {
                    return _createKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        /// <summary>
        /// security_statement : create_certificate 
        /// </summary>
        public partial class AstSecurityStatement7 : AstSecurityStatement
        {
            
            private AstCreateCertificate _createCertificate;
            
            internal AstSecurityStatement7(ParserRuleContext ctx, AstCreateCertificate createCertificate) : 
                    base(ctx)
            {
                _createCertificate = createCertificate;
            }
            
            public virtual AstCreateCertificate CreateCertificate
            {
                get
                {
                    return _createCertificate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSecurityStatement(this);
            }
        }
        

        
        internal AstSecurityStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSecurityStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstSecurityStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSecurityStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSecurityStatement.Resolve(list);
            if ((index == 2))
            {
                return new AstSecurityStatement.AstSecurityStatement1(ctx, ((AstExecuteClause)(list[0])));
            }
            if ((index == 6))
            {
                return new AstSecurityStatement.AstSecurityStatement2(ctx, ((AstGrantMode)(list[0])), ((AstClassTypeForGrant)(list[1])), ((AstFullTableRef)(list[2])), ((AstToPrincipalRincipalIds)(list[3])), ((AstPrincipalId)(list[4])));
            }
            if ((index == 2))
            {
                return new AstSecurityStatement.AstSecurityStatement3(ctx, ((AstLocalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSecurityStatement.AstSecurityStatement4(ctx, ((AstOpenKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSecurityStatement.AstSecurityStatement5(ctx, ((AstCloseKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSecurityStatement.AstSecurityStatement6(ctx, ((AstCreateKey)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSecurityStatement.AstSecurityStatement7(ctx, ((AstCreateCertificate)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstGrantMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstClassTypeForGrant), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstFullTableRef), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstToPrincipalRincipalIds), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstPrincipalId), false, false))
                                {
                                    return 2;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteClause), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOpenKey), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstCloseKey), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateKey), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreateCertificate), false, false))
                {
                    return 7;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// security_statement : 
        ///    execute_clause 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstExecuteClause executeClause)
        {
            AstSecurityStatement.AstSecurityStatement1 result = new AstSecurityStatement.AstSecurityStatement1(ctx, executeClause);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    GRANT grant_mode ON class_type_for_grant :: table=full_table_ref TO to_principal_rincipal_ids WITH GRANT OPTION AS as_principal=principal_id 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstGrantMode grantMode, AstClassTypeForGrant classTypeForGrant, AstFullTableRef table, AstToPrincipalRincipalIds toPrincipalRincipalIds, AstPrincipalId asPrincipal)
        {
            AstSecurityStatement.AstSecurityStatement2 result = new AstSecurityStatement.AstSecurityStatement2(ctx, grantMode, classTypeForGrant, table, toPrincipalRincipalIds, asPrincipal);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    REVERT ( WITH COOKIE EQUAL local_id ) 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstLocalId localId)
        {
            AstSecurityStatement.AstSecurityStatement3 result = new AstSecurityStatement.AstSecurityStatement3(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    open_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstOpenKey openKey)
        {
            AstSecurityStatement.AstSecurityStatement4 result = new AstSecurityStatement.AstSecurityStatement4(ctx, openKey);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    close_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstCloseKey closeKey)
        {
            AstSecurityStatement.AstSecurityStatement5 result = new AstSecurityStatement.AstSecurityStatement5(ctx, closeKey);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    create_key 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstCreateKey createKey)
        {
            AstSecurityStatement.AstSecurityStatement6 result = new AstSecurityStatement.AstSecurityStatement6(ctx, createKey);
            return result;
        }
        
        /// <summary>
        /// security_statement : 
        ///    create_certificate 
        /// </summary>
        public static AstSecurityStatement SecurityStatement(ParserRuleContext ctx, AstCreateCertificate createCertificate)
        {
            AstSecurityStatement.AstSecurityStatement7 result = new AstSecurityStatement.AstSecurityStatement7(ctx, createCertificate);
            return result;
        }
    }
    
    /// <summary>
    /// grant_mode
    /// 	 : ALL  PRIVILEGES?
    /// 	 | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstGrantMode : AstBnfRule
    {
        
        protected static string _rule = "grant_mode\r\n\t : ALL  PRIVILEGES?\r\n\t | grant_permission  (LR_BRACKET  column_name_" +
            "list  RR_BRACKET)?";
        
        /// <summary>
        /// grant_mode : ALL PRIVILEGES? 
        /// </summary>
        public partial class AstGrantMode1 : AstGrantMode
        {
            
            internal AstGrantMode1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantMode(this);
            }
        }
        /// <summary>
        /// grant_mode : grant_permission LR_BRACKET column_name_list RR_BRACKET 
        /// </summary>
        public partial class AstGrantMode2 : AstGrantMode
        {
            
            private AstGrantPermission _grantPermission;
            
            private AstColumnNameList _columnNameList;
            
            internal AstGrantMode2(ParserRuleContext ctx, AstGrantPermission grantPermission, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _grantPermission = grantPermission;
                _columnNameList = columnNameList;
            }
            
            public virtual AstGrantPermission GrantPermission
            {
                get
                {
                    return _grantPermission;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantMode(this);
            }
        }
        

        
        internal AstGrantMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGrantMode(Position p) : 
                base(p)
        {
        }
        
        internal AstGrantMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstGrantMode Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstGrantMode.Resolve(list);
            if ((index == 1))
            {
                return new AstGrantMode.AstGrantMode1(ctx);
            }
            if ((index == 3))
            {
                return new AstGrantMode.AstGrantMode2(ctx, ((AstGrantPermission)(list[0])), ((AstColumnNameList)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstGrantPermission), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameList), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// grant_mode : 
        ///    ALL PRIVILEGES? 
        /// </summary>
        public static AstGrantMode GrantMode(ParserRuleContext ctx)
        {
            AstGrantMode.AstGrantMode1 result = new AstGrantMode.AstGrantMode1(ctx);
            return result;
        }
        
        /// <summary>
        /// grant_mode : 
        ///    grant_permission ( column_name_list ) 
        /// </summary>
        public static AstGrantMode GrantMode(ParserRuleContext ctx, AstGrantPermission grantPermission, AstColumnNameList columnNameList)
        {
            AstGrantMode.AstGrantMode2 result = new AstGrantMode.AstGrantMode2(ctx, grantPermission, columnNameList);
            return result;
        }
    }
    
    /// <summary>
    /// existing_keys
    /// 	 : ASSEMBLY  assembly_id
    /// 	 | EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstExistingKeys : AstBnfRule
    {
        
        protected static string _rule = "existing_keys\r\n\t : ASSEMBLY  assembly_id\r\n\t | EXECUTABLE?  FILE  EQUAL  path_to_f" +
            "ile = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACK" +
            "ET)?";
        
        /// <summary>
        /// existing_keys : ASSEMBLY assembly_id 
        /// </summary>
        public partial class AstExistingKeys1 : AstExistingKeys
        {
            
            private AstAssemblyId _assemblyId;
            
            internal AstExistingKeys1(ParserRuleContext ctx, AstAssemblyId assemblyId) : 
                    base(ctx)
            {
                _assemblyId = assemblyId;
            }
            
            public virtual AstAssemblyId AssemblyId
            {
                get
                {
                    return _assemblyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistingKeys(this);
            }
        }
        /// <summary>
        /// existing_keys : EXECUTABLE? FILE EQUAL path_to_file=stringtext WITH PRIVATE KEY LR_BRACKET private_key_options RR_BRACKET 
        /// </summary>
        public partial class AstExistingKeys2 : AstExistingKeys
        {
            
            private AstStringtext _pathToFile;
            
            private AstPrivateKeyOptions _privateKeyOptions;
            
            internal AstExistingKeys2(ParserRuleContext ctx, AstStringtext pathToFile, AstPrivateKeyOptions privateKeyOptions) : 
                    base(ctx)
            {
                _pathToFile = pathToFile;
                _privateKeyOptions = privateKeyOptions;
            }
            
            public virtual AstStringtext PathToFile
            {
                get
                {
                    return _pathToFile;
                }
            }
            
            public virtual AstPrivateKeyOptions PrivateKeyOptions
            {
                get
                {
                    return _privateKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistingKeys(this);
            }
        }
        

        
        internal AstExistingKeys(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExistingKeys(Position p) : 
                base(p)
        {
        }
        
        internal AstExistingKeys(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExistingKeys Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExistingKeys.Resolve(list);
            if ((index == 2))
            {
                return new AstExistingKeys.AstExistingKeys1(ctx, ((AstAssemblyId)(list[0])));
            }
            if ((index == 3))
            {
                return new AstExistingKeys.AstExistingKeys2(ctx, ((AstStringtext)(list[0])), ((AstPrivateKeyOptions)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPrivateKeyOptions), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAssemblyId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// existing_keys : 
        ///    ASSEMBLY assembly_id 
        /// </summary>
        public static AstExistingKeys ExistingKeys(ParserRuleContext ctx, AstAssemblyId assemblyId)
        {
            AstExistingKeys.AstExistingKeys1 result = new AstExistingKeys.AstExistingKeys1(ctx, assemblyId);
            return result;
        }
        
        /// <summary>
        /// existing_keys : 
        ///    EXECUTABLE? FILE EQUAL path_to_file=stringtext WITH PRIVATE KEY ( private_key_options ) 
        /// </summary>
        public static AstExistingKeys ExistingKeys(ParserRuleContext ctx, AstStringtext pathToFile, AstPrivateKeyOptions privateKeyOptions)
        {
            AstExistingKeys.AstExistingKeys2 result = new AstExistingKeys.AstExistingKeys2(ctx, pathToFile, privateKeyOptions);
            return result;
        }
    }
    
    /// <summary>
    /// private_key_options
    /// 	 : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encryption_decryption  BY  password_setting)?
    /// </summary>
    public abstract partial class AstPrivateKeyOptions : AstBnfRule
    {
        
        protected static string _rule = "private_key_options\r\n\t : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encr" +
            "yption_decryption  BY  password_setting)?";
        
        /// <summary>
        /// private_key_options : FILE EQUAL path=stringtext COMMA encryption_decryption BY password_setting 
        /// </summary>
        public partial class AstPrivateKeyOptions1 : AstPrivateKeyOptions
        {
            
            private AstStringtext _path;
            
            private AstEncryptionDecryption _encryptionDecryption;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstPrivateKeyOptions1(ParserRuleContext ctx, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _path = path;
                _encryptionDecryption = encryptionDecryption;
                _passwordSetting = passwordSetting;
            }
            
            public virtual AstStringtext Path
            {
                get
                {
                    return _path;
                }
            }
            
            public virtual AstEncryptionDecryption EncryptionDecryption
            {
                get
                {
                    return _encryptionDecryption;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivateKeyOptions(this);
            }
        }
        /// <summary>
        /// private_key_options : binary_ EQUAL path=stringtext COMMA encryption_decryption BY password_setting 
        /// </summary>
        public partial class AstPrivateKeyOptions2 : AstPrivateKeyOptions
        {
            
            private AstBinary _binary;
            
            private AstStringtext _path;
            
            private AstEncryptionDecryption _encryptionDecryption;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstPrivateKeyOptions2(ParserRuleContext ctx, AstBinary binary, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _binary = binary;
                _path = path;
                _encryptionDecryption = encryptionDecryption;
                _passwordSetting = passwordSetting;
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public virtual AstStringtext Path
            {
                get
                {
                    return _path;
                }
            }
            
            public virtual AstEncryptionDecryption EncryptionDecryption
            {
                get
                {
                    return _encryptionDecryption;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivateKeyOptions(this);
            }
        }
        

        
        internal AstPrivateKeyOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrivateKeyOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstPrivateKeyOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPrivateKeyOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPrivateKeyOptions.Resolve(list);
            if ((index == 4))
            {
                return new AstPrivateKeyOptions.AstPrivateKeyOptions1(ctx, ((AstStringtext)(list[0])), ((AstEncryptionDecryption)(list[1])), ((AstPasswordSetting)(list[2])));
            }
            if ((index == 5))
            {
                return new AstPrivateKeyOptions.AstPrivateKeyOptions2(ctx, ((AstBinary)(list[0])), ((AstStringtext)(list[1])), ((AstEncryptionDecryption)(list[2])), ((AstPasswordSetting)(list[3])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstEncryptionDecryption), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstPasswordSetting), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstEncryptionDecryption), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstPasswordSetting), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// private_key_options : 
        ///    FILE EQUAL path=stringtext , encryption_decryption BY password_setting 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(ParserRuleContext ctx, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting)
        {
            AstPrivateKeyOptions.AstPrivateKeyOptions1 result = new AstPrivateKeyOptions.AstPrivateKeyOptions1(ctx, path, encryptionDecryption, passwordSetting);
            return result;
        }
        
        /// <summary>
        /// private_key_options : 
        ///    binary_ EQUAL path=stringtext , encryption_decryption BY password_setting 
        /// </summary>
        public static AstPrivateKeyOptions PrivateKeyOptions(ParserRuleContext ctx, AstBinary binary, AstStringtext path, AstEncryptionDecryption encryptionDecryption, AstPasswordSetting passwordSetting)
        {
            AstPrivateKeyOptions.AstPrivateKeyOptions2 result = new AstPrivateKeyOptions.AstPrivateKeyOptions2(ctx, binary, path, encryptionDecryption, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// open_key
    /// 	 : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism
    /// 	 | OPEN  MASTER  KEY  decryption_by_pwd
    /// </summary>
    public abstract partial class AstOpenKey : AstBnfRule
    {
        
        protected static string _rule = "open_key\r\n\t : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_" +
            "mechanism\r\n\t | OPEN  MASTER  KEY  decryption_by_pwd";
        
        /// <summary>
        /// open_key : OPEN SYMMETRIC KEY symmetric_key_id DECRYPTION BY decryption_mechanism 
        /// </summary>
        public partial class AstOpenKey1 : AstOpenKey
        {
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            private AstDecryptionMechanism _decryptionMechanism;
            
            internal AstOpenKey1(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstDecryptionMechanism decryptionMechanism) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
                _decryptionMechanism = decryptionMechanism;
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public virtual AstDecryptionMechanism DecryptionMechanism
            {
                get
                {
                    return _decryptionMechanism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOpenKey(this);
            }
        }
        /// <summary>
        /// open_key : OPEN MASTER KEY decryption_by_pwd 
        /// </summary>
        public partial class AstOpenKey2 : AstOpenKey
        {
            
            private AstDecryptionByPwd _decryptionByPwd;
            
            internal AstOpenKey2(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd) : 
                    base(ctx)
            {
                _decryptionByPwd = decryptionByPwd;
            }
            
            public virtual AstDecryptionByPwd DecryptionByPwd
            {
                get
                {
                    return _decryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOpenKey(this);
            }
        }
        

        
        internal AstOpenKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOpenKey(Position p) : 
                base(p)
        {
        }
        
        internal AstOpenKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstOpenKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstOpenKey.Resolve(list);
            if ((index == 3))
            {
                return new AstOpenKey.AstOpenKey1(ctx, ((AstSymmetricKeyId)(list[0])), ((AstDecryptionMechanism)(list[1])));
            }
            if ((index == 2))
            {
                return new AstOpenKey.AstOpenKey2(ctx, ((AstDecryptionByPwd)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecryptionMechanism), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecryptionByPwd), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// open_key : 
        ///    OPEN SYMMETRIC KEY symmetric_key_id DECRYPTION BY decryption_mechanism 
        /// </summary>
        public static AstOpenKey OpenKey(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstDecryptionMechanism decryptionMechanism)
        {
            AstOpenKey.AstOpenKey1 result = new AstOpenKey.AstOpenKey1(ctx, symmetricKeyId, decryptionMechanism);
            return result;
        }
        
        /// <summary>
        /// open_key : 
        ///    OPEN MASTER KEY decryption_by_pwd 
        /// </summary>
        public static AstOpenKey OpenKey(ParserRuleContext ctx, AstDecryptionByPwd decryptionByPwd)
        {
            AstOpenKey.AstOpenKey2 result = new AstOpenKey.AstOpenKey2(ctx, decryptionByPwd);
            return result;
        }
    }
    
    /// <summary>
    /// close_key
    /// 	 : CLOSE  SYMMETRIC  KEY  symmetric_key_id
    /// 	 | CLOSE  ALL  SYMMETRIC  KEYS
    /// 	 | CLOSE  MASTER  KEY
    /// </summary>
    public abstract partial class AstCloseKey : AstBnfRule
    {
        
        protected static string _rule = "close_key\r\n\t : CLOSE  SYMMETRIC  KEY  symmetric_key_id\r\n\t | CLOSE  ALL  SYMMETRIC" +
            "  KEYS\r\n\t | CLOSE  MASTER  KEY";
        
        /// <summary>
        /// close_key : CLOSE SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public partial class AstCloseKey1 : AstCloseKey
        {
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            internal AstCloseKey1(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        /// <summary>
        /// close_key : CLOSE ALL SYMMETRIC KEYS 
        /// </summary>
        public partial class AstCloseKey2 : AstCloseKey
        {
            
            internal AstCloseKey2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        /// <summary>
        /// close_key : CLOSE MASTER KEY 
        /// </summary>
        public partial class AstCloseKey3 : AstCloseKey
        {
            
            internal AstCloseKey3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCloseKey(this);
            }
        }
        

        
        internal AstCloseKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCloseKey(Position p) : 
                base(p)
        {
        }
        
        internal AstCloseKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCloseKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCloseKey.Resolve(list);
            if ((index == 2))
            {
                return new AstCloseKey.AstCloseKey1(ctx, ((AstSymmetricKeyId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstCloseKey.AstCloseKey2(ctx);
            }
            if ((index == 1))
            {
                return new AstCloseKey.AstCloseKey3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// close_key : 
        ///    CLOSE SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstCloseKey CloseKey(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId)
        {
            AstCloseKey.AstCloseKey1 result = new AstCloseKey.AstCloseKey1(ctx, symmetricKeyId);
            return result;
        }
        
        /// <summary>
        /// close_key : 
        ///    CLOSE ALL SYMMETRIC KEYS 
        /// </summary>
        public static AstCloseKey CloseKey(ParserRuleContext ctx)
        {
            AstCloseKey.AstCloseKey2 result = new AstCloseKey.AstCloseKey2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// create_key
    /// 	 : CREATE  MASTER  KEY  encryption_by_pwd
    /// 	 | CREATE  SYMMETRIC  KEY  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  create_key_options
    /// </summary>
    public abstract partial class AstCreateKey : AstBnfRule
    {
        
        protected static string _rule = "create_key\r\n\t : CREATE  MASTER  KEY  encryption_by_pwd\r\n\t | CREATE  SYMMETRIC  KE" +
            "Y  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  " +
            "WITH  create_key_options";
        
        /// <summary>
        /// create_key : CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public partial class AstCreateKey1 : AstCreateKey
        {
            
            private AstEncryptionByPwd _encryptionByPwd;
            
            internal AstCreateKey1(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd) : 
                    base(ctx)
            {
                _encryptionByPwd = encryptionByPwd;
            }
            
            public virtual AstEncryptionByPwd EncryptionByPwd
            {
                get
                {
                    return _encryptionByPwd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKey(this);
            }
        }
        /// <summary>
        /// create_key : CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH create_key_options 
        /// </summary>
        public partial class AstCreateKey2 : AstCreateKey
        {
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            private AstUserId _userId;
            
            private AstProviderId _providerId;
            
            private AstCreateKeyOptions _createKeyOptions;
            
            internal AstCreateKey2(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstCreateKeyOptions createKeyOptions) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
                _userId = userId;
                _providerId = providerId;
                _createKeyOptions = createKeyOptions;
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public virtual AstUserId UserId
            {
                get
                {
                    return _userId;
                }
            }
            
            public virtual AstProviderId ProviderId
            {
                get
                {
                    return _providerId;
                }
            }
            
            public virtual AstCreateKeyOptions CreateKeyOptions
            {
                get
                {
                    return _createKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKey(this);
            }
        }
        

        
        internal AstCreateKey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateKey(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateKey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateKey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateKey.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateKey.AstCreateKey1(ctx, ((AstEncryptionByPwd)(list[0])));
            }
            if ((index == 5))
            {
                return new AstCreateKey.AstCreateKey2(ctx, ((AstSymmetricKeyId)(list[0])), ((AstUserId)(list[1])), ((AstProviderId)(list[2])), ((AstCreateKeyOptions)(list[3])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstUserId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstProviderId), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstCreateKeyOptions), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstEncryptionByPwd), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_key : 
        ///    CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public static AstCreateKey CreateKey(ParserRuleContext ctx, AstEncryptionByPwd encryptionByPwd)
        {
            AstCreateKey.AstCreateKey1 result = new AstCreateKey.AstCreateKey1(ctx, encryptionByPwd);
            return result;
        }
        
        /// <summary>
        /// create_key : 
        ///    CREATE SYMMETRIC KEY symmetric_key_id AUTHORIZATION user_id FROM PROVIDER provider_id WITH create_key_options 
        /// </summary>
        public static AstCreateKey CreateKey(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId, AstUserId userId, AstProviderId providerId, AstCreateKeyOptions createKeyOptions)
        {
            AstCreateKey.AstCreateKey2 result = new AstCreateKey.AstCreateKey2(ctx, symmetricKeyId, userId, providerId, createKeyOptions);
            return result;
        }
    }
    
    /// <summary>
    /// create_key_option
    /// 	 : key_options
    /// 	 | ENCRYPTION  BY  encryption_mechanism
    /// </summary>
    public abstract partial class AstCreateKeyOption : AstBnfRule
    {
        
        protected static string _rule = "create_key_option\r\n\t : key_options\r\n\t | ENCRYPTION  BY  encryption_mechanism";
        
        /// <summary>
        /// create_key_option : key_options 
        /// </summary>
        public partial class AstCreateKeyOption1 : AstCreateKeyOption
        {
            
            private AstKeyOptions _keyOptions;
            
            internal AstCreateKeyOption1(ParserRuleContext ctx, AstKeyOptions keyOptions) : 
                    base(ctx)
            {
                _keyOptions = keyOptions;
            }
            
            public virtual AstKeyOptions KeyOptions
            {
                get
                {
                    return _keyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKeyOption(this);
            }
        }
        /// <summary>
        /// create_key_option : ENCRYPTION BY encryption_mechanism 
        /// </summary>
        public partial class AstCreateKeyOption2 : AstCreateKeyOption
        {
            
            private AstEncryptionMechanism _encryptionMechanism;
            
            internal AstCreateKeyOption2(ParserRuleContext ctx, AstEncryptionMechanism encryptionMechanism) : 
                    base(ctx)
            {
                _encryptionMechanism = encryptionMechanism;
            }
            
            public virtual AstEncryptionMechanism EncryptionMechanism
            {
                get
                {
                    return _encryptionMechanism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateKeyOption(this);
            }
        }
        

        
        internal AstCreateKeyOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateKeyOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateKeyOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateKeyOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateKeyOption.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateKeyOption.AstCreateKeyOption1(ctx, ((AstKeyOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateKeyOption.AstCreateKeyOption2(ctx, ((AstEncryptionMechanism)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstKeyOptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstEncryptionMechanism), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_key_option : 
        ///    key_options 
        /// </summary>
        public static AstCreateKeyOption CreateKeyOption(ParserRuleContext ctx, AstKeyOptions keyOptions)
        {
            AstCreateKeyOption.AstCreateKeyOption1 result = new AstCreateKeyOption.AstCreateKeyOption1(ctx, keyOptions);
            return result;
        }
        
        /// <summary>
        /// create_key_option : 
        ///    ENCRYPTION BY encryption_mechanism 
        /// </summary>
        public static AstCreateKeyOption CreateKeyOption(ParserRuleContext ctx, AstEncryptionMechanism encryptionMechanism)
        {
            AstCreateKeyOption.AstCreateKeyOption2 result = new AstCreateKeyOption.AstCreateKeyOption2(ctx, encryptionMechanism);
            return result;
        }
    }
    
    /// <summary>
    /// key_options
    /// 	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
    /// 	 | ALGORITHM  EQUAL  algorithm
    /// 	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
    /// 	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
    /// 	 | CREATION_DISPOSITION  EQUAL  creation_disposition
    /// </summary>
    public abstract partial class AstKeyOptions : AstBnfRule
    {
        
        protected static string _rule = @"key_options
	 : KEY_SOURCE  EQUAL  pass_phrase = stringtext
	 | ALGORITHM  EQUAL  algorithm
	 | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext
	 | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext
	 | CREATION_DISPOSITION  EQUAL  creation_disposition";
        
        /// <summary>
        /// key_options : KEY_SOURCE EQUAL pass_phrase=stringtext 
        /// </summary>
        public partial class AstKeyOptions1 : AstKeyOptions
        {
            
            private AstStringtext _passPhrase;
            
            internal AstKeyOptions1(ParserRuleContext ctx, AstStringtext passPhrase) : 
                    base(ctx)
            {
                _passPhrase = passPhrase;
            }
            
            public virtual AstStringtext PassPhrase
            {
                get
                {
                    return _passPhrase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : ALGORITHM EQUAL algorithm 
        /// </summary>
        public partial class AstKeyOptions2 : AstKeyOptions
        {
            
            private AstAlgorithm _algorithm;
            
            internal AstKeyOptions2(ParserRuleContext ctx, AstAlgorithm algorithm) : 
                    base(ctx)
            {
                _algorithm = algorithm;
            }
            
            public virtual AstAlgorithm Algorithm
            {
                get
                {
                    return _algorithm;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : IDENTITY_VALUE EQUAL identity_phrase=stringtext 
        /// </summary>
        public partial class AstKeyOptions3 : AstKeyOptions
        {
            
            private AstStringtext _identityPhrase;
            
            internal AstKeyOptions3(ParserRuleContext ctx, AstStringtext identityPhrase) : 
                    base(ctx)
            {
                _identityPhrase = identityPhrase;
            }
            
            public virtual AstStringtext IdentityPhrase
            {
                get
                {
                    return _identityPhrase;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : PROVIDER_KEY_NAME EQUAL key_name_in_provider=stringtext 
        /// </summary>
        public partial class AstKeyOptions4 : AstKeyOptions
        {
            
            private AstStringtext _keyNameInProvider;
            
            internal AstKeyOptions4(ParserRuleContext ctx, AstStringtext keyNameInProvider) : 
                    base(ctx)
            {
                _keyNameInProvider = keyNameInProvider;
            }
            
            public virtual AstStringtext KeyNameInProvider
            {
                get
                {
                    return _keyNameInProvider;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        /// <summary>
        /// key_options : CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public partial class AstKeyOptions5 : AstKeyOptions
        {
            
            private AstCreationDisposition _creationDisposition;
            
            internal AstKeyOptions5(ParserRuleContext ctx, AstCreationDisposition creationDisposition) : 
                    base(ctx)
            {
                _creationDisposition = creationDisposition;
            }
            
            public virtual AstCreationDisposition CreationDisposition
            {
                get
                {
                    return _creationDisposition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitKeyOptions(this);
            }
        }
        

        
        internal AstKeyOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstKeyOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstKeyOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstKeyOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstKeyOptions.Resolve(list);
            if ((index == 2))
            {
                return new AstKeyOptions.AstKeyOptions1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstKeyOptions.AstKeyOptions2(ctx, ((AstAlgorithm)(list[0])));
            }
            if ((index == 2))
            {
                return new AstKeyOptions.AstKeyOptions3(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstKeyOptions.AstKeyOptions4(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstKeyOptions.AstKeyOptions5(ctx, ((AstCreationDisposition)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAlgorithm), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstCreationDisposition), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// key_options : 
        ///    KEY_SOURCE EQUAL pass_phrase=stringtext 
        /// </summary>
        public static AstKeyOptions KeyOptions(ParserRuleContext ctx, AstStringtext passPhrase)
        {
            AstKeyOptions.AstKeyOptions1 result = new AstKeyOptions.AstKeyOptions1(ctx, passPhrase);
            return result;
        }
        
        /// <summary>
        /// key_options : 
        ///    ALGORITHM EQUAL algorithm 
        /// </summary>
        public static AstKeyOptions KeyOptions(ParserRuleContext ctx, AstAlgorithm algorithm)
        {
            AstKeyOptions.AstKeyOptions2 result = new AstKeyOptions.AstKeyOptions2(ctx, algorithm);
            return result;
        }
        
        /// <summary>
        /// key_options : 
        ///    CREATION_DISPOSITION EQUAL creation_disposition 
        /// </summary>
        public static AstKeyOptions KeyOptions(ParserRuleContext ctx, AstCreationDisposition creationDisposition)
        {
            AstKeyOptions.AstKeyOptions5 result = new AstKeyOptions.AstKeyOptions5(ctx, creationDisposition);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_mechanism
    /// 	 : CERTIFICATE  certificate_id
    /// 	 | ASYMMETRIC  KEY  asym_key_id
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | password_setting
    /// </summary>
    public abstract partial class AstEncryptionMechanism : AstBnfRule
    {
        
        protected static string _rule = "encryption_mechanism\r\n\t : CERTIFICATE  certificate_id\r\n\t | ASYMMETRIC  KEY  asym_" +
            "key_id\r\n\t | SYMMETRIC  KEY  symmetric_key_id\r\n\t | password_setting";
        
        /// <summary>
        /// encryption_mechanism : CERTIFICATE certificate_id 
        /// </summary>
        public partial class AstEncryptionMechanism1 : AstEncryptionMechanism
        {
            
            private AstCertificateId _certificateId;
            
            internal AstEncryptionMechanism1(ParserRuleContext ctx, AstCertificateId certificateId) : 
                    base(ctx)
            {
                _certificateId = certificateId;
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public partial class AstEncryptionMechanism2 : AstEncryptionMechanism
        {
            
            private AstAsymKeyId _asymKeyId;
            
            internal AstEncryptionMechanism2(ParserRuleContext ctx, AstAsymKeyId asymKeyId) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public partial class AstEncryptionMechanism3 : AstEncryptionMechanism
        {
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            internal AstEncryptionMechanism3(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        /// <summary>
        /// encryption_mechanism : password_setting 
        /// </summary>
        public partial class AstEncryptionMechanism4 : AstEncryptionMechanism
        {
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstEncryptionMechanism4(ParserRuleContext ctx, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionMechanism(this);
            }
        }
        

        
        internal AstEncryptionMechanism(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionMechanism(Position p) : 
                base(p)
        {
        }
        
        internal AstEncryptionMechanism(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEncryptionMechanism Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEncryptionMechanism.Resolve(list);
            if ((index == 2))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism1(ctx, ((AstCertificateId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism2(ctx, ((AstAsymKeyId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism3(ctx, ((AstSymmetricKeyId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstEncryptionMechanism.AstEncryptionMechanism4(ctx, ((AstPasswordSetting)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAsymKeyId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstPasswordSetting), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    CERTIFICATE certificate_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstCertificateId certificateId)
        {
            AstEncryptionMechanism.AstEncryptionMechanism1 result = new AstEncryptionMechanism.AstEncryptionMechanism1(ctx, certificateId);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstAsymKeyId asymKeyId)
        {
            AstEncryptionMechanism.AstEncryptionMechanism2 result = new AstEncryptionMechanism.AstEncryptionMechanism2(ctx, asymKeyId);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId)
        {
            AstEncryptionMechanism.AstEncryptionMechanism3 result = new AstEncryptionMechanism.AstEncryptionMechanism3(ctx, symmetricKeyId);
            return result;
        }
        
        /// <summary>
        /// encryption_mechanism : 
        ///    password_setting 
        /// </summary>
        public static AstEncryptionMechanism EncryptionMechanism(ParserRuleContext ctx, AstPasswordSetting passwordSetting)
        {
            AstEncryptionMechanism.AstEncryptionMechanism4 result = new AstEncryptionMechanism.AstEncryptionMechanism4(ctx, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// decryption_mechanism
    /// 	 : CERTIFICATE  certificate_id  (WITH  password_setting)?
    /// 	 | ASYMMETRIC  KEY  asym_key_id  (WITH  password_setting)?
    /// 	 | SYMMETRIC  KEY  symmetric_key_id
    /// 	 | password_setting
    /// </summary>
    public abstract partial class AstDecryptionMechanism : AstBnfRule
    {
        
        protected static string _rule = "decryption_mechanism\r\n\t : CERTIFICATE  certificate_id  (WITH  password_setting)?\r" +
            "\n\t | ASYMMETRIC  KEY  asym_key_id  (WITH  password_setting)?\r\n\t | SYMMETRIC  KEY" +
            "  symmetric_key_id\r\n\t | password_setting";
        
        /// <summary>
        /// decryption_mechanism : CERTIFICATE certificate_id WITH password_setting 
        /// </summary>
        public partial class AstDecryptionMechanism1 : AstDecryptionMechanism
        {
            
            private AstCertificateId _certificateId;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstDecryptionMechanism1(ParserRuleContext ctx, AstCertificateId certificateId, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _certificateId = certificateId;
                _passwordSetting = passwordSetting;
            }
            
            public virtual AstCertificateId CertificateId
            {
                get
                {
                    return _certificateId;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : ASYMMETRIC KEY asym_key_id WITH password_setting 
        /// </summary>
        public partial class AstDecryptionMechanism2 : AstDecryptionMechanism
        {
            
            private AstAsymKeyId _asymKeyId;
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstDecryptionMechanism2(ParserRuleContext ctx, AstAsymKeyId asymKeyId, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _asymKeyId = asymKeyId;
                _passwordSetting = passwordSetting;
            }
            
            public virtual AstAsymKeyId AsymKeyId
            {
                get
                {
                    return _asymKeyId;
                }
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public partial class AstDecryptionMechanism3 : AstDecryptionMechanism
        {
            
            private AstSymmetricKeyId _symmetricKeyId;
            
            internal AstDecryptionMechanism3(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId) : 
                    base(ctx)
            {
                _symmetricKeyId = symmetricKeyId;
            }
            
            public virtual AstSymmetricKeyId SymmetricKeyId
            {
                get
                {
                    return _symmetricKeyId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        /// <summary>
        /// decryption_mechanism : password_setting 
        /// </summary>
        public partial class AstDecryptionMechanism4 : AstDecryptionMechanism
        {
            
            private AstPasswordSetting _passwordSetting;
            
            internal AstDecryptionMechanism4(ParserRuleContext ctx, AstPasswordSetting passwordSetting) : 
                    base(ctx)
            {
                _passwordSetting = passwordSetting;
            }
            
            public virtual AstPasswordSetting PasswordSetting
            {
                get
                {
                    return _passwordSetting;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecryptionMechanism(this);
            }
        }
        

        
        internal AstDecryptionMechanism(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecryptionMechanism(Position p) : 
                base(p)
        {
        }
        
        internal AstDecryptionMechanism(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecryptionMechanism Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecryptionMechanism.Resolve(list);
            if ((index == 3))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism1(ctx, ((AstCertificateId)(list[0])), ((AstPasswordSetting)(list[1])));
            }
            if ((index == 3))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism2(ctx, ((AstAsymKeyId)(list[0])), ((AstPasswordSetting)(list[1])));
            }
            if ((index == 2))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism3(ctx, ((AstSymmetricKeyId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDecryptionMechanism.AstDecryptionMechanism4(ctx, ((AstPasswordSetting)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstCertificateId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPasswordSetting), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstAsymKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPasswordSetting), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSymmetricKeyId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstPasswordSetting), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    CERTIFICATE certificate_id WITH password_setting 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstCertificateId certificateId, AstPasswordSetting passwordSetting)
        {
            AstDecryptionMechanism.AstDecryptionMechanism1 result = new AstDecryptionMechanism.AstDecryptionMechanism1(ctx, certificateId, passwordSetting);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    ASYMMETRIC KEY asym_key_id WITH password_setting 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstAsymKeyId asymKeyId, AstPasswordSetting passwordSetting)
        {
            AstDecryptionMechanism.AstDecryptionMechanism2 result = new AstDecryptionMechanism.AstDecryptionMechanism2(ctx, asymKeyId, passwordSetting);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    SYMMETRIC KEY symmetric_key_id 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstSymmetricKeyId symmetricKeyId)
        {
            AstDecryptionMechanism.AstDecryptionMechanism3 result = new AstDecryptionMechanism.AstDecryptionMechanism3(ctx, symmetricKeyId);
            return result;
        }
        
        /// <summary>
        /// decryption_mechanism : 
        ///    password_setting 
        /// </summary>
        public static AstDecryptionMechanism DecryptionMechanism(ParserRuleContext ctx, AstPasswordSetting passwordSetting)
        {
            AstDecryptionMechanism.AstDecryptionMechanism4 result = new AstDecryptionMechanism.AstDecryptionMechanism4(ctx, passwordSetting);
            return result;
        }
    }
    
    /// <summary>
    /// grant_permission
    /// 	 : grant_permission_enum
    /// 	 | grant_permission_alter
    /// 	 | grant_permission_create
    /// </summary>
    public abstract partial class AstGrantPermission : AstBnfRule
    {
        
        protected static string _rule = "grant_permission\r\n\t : grant_permission_enum\r\n\t | grant_permission_alter\r\n\t | gran" +
            "t_permission_create";
        
        /// <summary>
        /// grant_permission : grant_permission_enum 
        /// </summary>
        public partial class AstGrantPermission1 : AstGrantPermission
        {
            
            private AstGrantPermissionEnum _grantPermissionEnum;
            
            internal AstGrantPermission1(ParserRuleContext ctx, AstGrantPermissionEnum grantPermissionEnum) : 
                    base(ctx)
            {
                _grantPermissionEnum = grantPermissionEnum;
            }
            
            public virtual AstGrantPermissionEnum GrantPermissionEnum
            {
                get
                {
                    return _grantPermissionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        /// <summary>
        /// grant_permission : grant_permission_alter 
        /// </summary>
        public partial class AstGrantPermission2 : AstGrantPermission
        {
            
            private AstGrantPermissionAlter _grantPermissionAlter;
            
            internal AstGrantPermission2(ParserRuleContext ctx, AstGrantPermissionAlter grantPermissionAlter) : 
                    base(ctx)
            {
                _grantPermissionAlter = grantPermissionAlter;
            }
            
            public virtual AstGrantPermissionAlter GrantPermissionAlter
            {
                get
                {
                    return _grantPermissionAlter;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        /// <summary>
        /// grant_permission : grant_permission_create 
        /// </summary>
        public partial class AstGrantPermission3 : AstGrantPermission
        {
            
            private AstGrantPermissionCreate _grantPermissionCreate;
            
            internal AstGrantPermission3(ParserRuleContext ctx, AstGrantPermissionCreate grantPermissionCreate) : 
                    base(ctx)
            {
                _grantPermissionCreate = grantPermissionCreate;
            }
            
            public virtual AstGrantPermissionCreate GrantPermissionCreate
            {
                get
                {
                    return _grantPermissionCreate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGrantPermission(this);
            }
        }
        

        
        internal AstGrantPermission(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGrantPermission(Position p) : 
                base(p)
        {
        }
        
        internal AstGrantPermission(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstGrantPermission Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstGrantPermission.Resolve(list);
            if ((index == 2))
            {
                return new AstGrantPermission.AstGrantPermission1(ctx, ((AstGrantPermissionEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstGrantPermission.AstGrantPermission2(ctx, ((AstGrantPermissionAlter)(list[0])));
            }
            if ((index == 2))
            {
                return new AstGrantPermission.AstGrantPermission3(ctx, ((AstGrantPermissionCreate)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstGrantPermissionEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstGrantPermissionAlter), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstGrantPermissionCreate), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_enum 
        /// </summary>
        public static AstGrantPermission GrantPermission(ParserRuleContext ctx, AstGrantPermissionEnum grantPermissionEnum)
        {
            AstGrantPermission.AstGrantPermission1 result = new AstGrantPermission.AstGrantPermission1(ctx, grantPermissionEnum);
            return result;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_alter 
        /// </summary>
        public static AstGrantPermission GrantPermission(ParserRuleContext ctx, AstGrantPermissionAlter grantPermissionAlter)
        {
            AstGrantPermission.AstGrantPermission2 result = new AstGrantPermission.AstGrantPermission2(ctx, grantPermissionAlter);
            return result;
        }
        
        /// <summary>
        /// grant_permission : 
        ///    grant_permission_create 
        /// </summary>
        public static AstGrantPermission GrantPermission(ParserRuleContext ctx, AstGrantPermissionCreate grantPermissionCreate)
        {
            AstGrantPermission.AstGrantPermission3 result = new AstGrantPermission.AstGrantPermission3(ctx, grantPermissionCreate);
            return result;
        }
    }
    
    /// <summary>
    /// set_statement
    /// 	 : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression
    /// 	 | SET  local_id  assignment_operator  expression
    /// 	 | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  cursor_mode)?
    /// 	 | set_special
    /// </summary>
    public abstract partial class AstSetStatement : AstBnfRule
    {
        
        protected static string _rule = "set_statement\r\n\t : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression\r\n\t" +
            " | SET  local_id  assignment_operator  expression\r\n\t | SET  local_id  EQUAL  CUR" +
            "SOR  declare_set_cursor_common  (FOR  cursor_mode)?\r\n\t | set_special";
        
        /// <summary>
        /// set_statement : SET local_id DOT member_name=id_ EQUAL expression 
        /// </summary>
        public partial class AstSetStatement1 : AstSetStatement
        {
            
            private AstLocalId _localId;
            
            private AstId _memberName;
            
            private AstExpression _expression;
            
            internal AstSetStatement1(ParserRuleContext ctx, AstLocalId localId, AstId memberName, AstExpression expression) : 
                    base(ctx)
            {
                _localId = localId;
                _memberName = memberName;
                _expression = expression;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstId MemberName
            {
                get
                {
                    return _memberName;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : SET local_id assignment_operator expression 
        /// </summary>
        public partial class AstSetStatement2 : AstSetStatement
        {
            
            private AstLocalId _localId;
            
            private AstAssignmentOperator _assignmentOperator;
            
            private AstExpression _expression;
            
            internal AstSetStatement2(ParserRuleContext ctx, AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression) : 
                    base(ctx)
            {
                _localId = localId;
                _assignmentOperator = assignmentOperator;
                _expression = expression;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstAssignmentOperator AssignmentOperator
            {
                get
                {
                    return _assignmentOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : SET local_id EQUAL CURSOR declare_set_cursor_common FOR cursor_mode 
        /// </summary>
        public partial class AstSetStatement3 : AstSetStatement
        {
            
            private AstLocalId _localId;
            
            private AstDeclareSetCursorCommon _declareSetCursorCommon;
            
            private AstCursorMode _cursorMode;
            
            internal AstSetStatement3(ParserRuleContext ctx, AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon, AstCursorMode cursorMode) : 
                    base(ctx)
            {
                _localId = localId;
                _declareSetCursorCommon = declareSetCursorCommon;
                _cursorMode = cursorMode;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstDeclareSetCursorCommon DeclareSetCursorCommon
            {
                get
                {
                    return _declareSetCursorCommon;
                }
            }
            
            public virtual AstCursorMode CursorMode
            {
                get
                {
                    return _cursorMode;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        /// <summary>
        /// set_statement : set_special 
        /// </summary>
        public partial class AstSetStatement4 : AstSetStatement
        {
            
            private AstSetSpecial _setSpecial;
            
            internal AstSetStatement4(ParserRuleContext ctx, AstSetSpecial setSpecial) : 
                    base(ctx)
            {
                _setSpecial = setSpecial;
            }
            
            public virtual AstSetSpecial SetSpecial
            {
                get
                {
                    return _setSpecial;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetStatement(this);
            }
        }
        

        
        internal AstSetStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstSetStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSetStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSetStatement.Resolve(list);
            if ((index == 4))
            {
                return new AstSetStatement.AstSetStatement1(ctx, ((AstLocalId)(list[0])), ((AstId)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 4))
            {
                return new AstSetStatement.AstSetStatement2(ctx, ((AstLocalId)(list[0])), ((AstAssignmentOperator)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 4))
            {
                return new AstSetStatement.AstSetStatement3(ctx, ((AstLocalId)(list[0])), ((AstDeclareSetCursorCommon)(list[1])), ((AstCursorMode)(list[2])));
            }
            if ((index == 2))
            {
                return new AstSetStatement.AstSetStatement4(ctx, ((AstSetSpecial)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAssignmentOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDeclareSetCursorCommon), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstCursorMode), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSetSpecial), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id . member_name=id_ EQUAL expression 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstLocalId localId, AstId memberName, AstExpression expression)
        {
            AstSetStatement.AstSetStatement1 result = new AstSetStatement.AstSetStatement1(ctx, localId, memberName, expression);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id assignment_operator expression 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstLocalId localId, AstAssignmentOperator assignmentOperator, AstExpression expression)
        {
            AstSetStatement.AstSetStatement2 result = new AstSetStatement.AstSetStatement2(ctx, localId, assignmentOperator, expression);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    SET local_id EQUAL CURSOR declare_set_cursor_common FOR cursor_mode 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstLocalId localId, AstDeclareSetCursorCommon declareSetCursorCommon, AstCursorMode cursorMode)
        {
            AstSetStatement.AstSetStatement3 result = new AstSetStatement.AstSetStatement3(ctx, localId, declareSetCursorCommon, cursorMode);
            return result;
        }
        
        /// <summary>
        /// set_statement : 
        ///    set_special 
        /// </summary>
        public static AstSetStatement SetStatement(ParserRuleContext ctx, AstSetSpecial setSpecial)
        {
            AstSetStatement.AstSetStatement4 result = new AstSetStatement.AstSetStatement4(ctx, setSpecial);
            return result;
        }
    }
    
    /// <summary>
    /// cursor_mode
    /// 	 : READ  ONLY
    /// 	 | UPDATE  (OF  column_name_list)?
    /// </summary>
    public abstract partial class AstCursorMode : AstBnfRule
    {
        
        protected static string _rule = "cursor_mode\r\n\t : READ  ONLY\r\n\t | UPDATE  (OF  column_name_list)?";
        
        /// <summary>
        /// cursor_mode : READ ONLY 
        /// </summary>
        public partial class AstCursorMode1 : AstCursorMode
        {
            
            internal AstCursorMode1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorMode(this);
            }
        }
        /// <summary>
        /// cursor_mode : UPDATE OF column_name_list 
        /// </summary>
        public partial class AstCursorMode2 : AstCursorMode
        {
            
            private AstColumnNameList _columnNameList;
            
            internal AstCursorMode2(ParserRuleContext ctx, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _columnNameList = columnNameList;
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCursorMode(this);
            }
        }
        

        
        internal AstCursorMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCursorMode(Position p) : 
                base(p)
        {
        }
        
        internal AstCursorMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCursorMode Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCursorMode.Resolve(list);
            if ((index == 1))
            {
                return new AstCursorMode.AstCursorMode1(ctx);
            }
            if ((index == 2))
            {
                return new AstCursorMode.AstCursorMode2(ctx, ((AstColumnNameList)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnNameList), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// cursor_mode : 
        ///    READ ONLY 
        /// </summary>
        public static AstCursorMode CursorMode(ParserRuleContext ctx)
        {
            AstCursorMode.AstCursorMode1 result = new AstCursorMode.AstCursorMode1(ctx);
            return result;
        }
        
        /// <summary>
        /// cursor_mode : 
        ///    UPDATE OF column_name_list 
        /// </summary>
        public static AstCursorMode CursorMode(ParserRuleContext ctx, AstColumnNameList columnNameList)
        {
            AstCursorMode.AstCursorMode2 result = new AstCursorMode.AstCursorMode2(ctx, columnNameList);
            return result;
        }
    }
    
    /// <summary>
    /// transaction_statement
    /// 	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
    /// 	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
    /// 	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
    /// 	 | COMMIT  WORK?
    /// 	 | COMMIT  transaction_identifier
    /// 	 | ROLLBACK  transaction_identifier
    /// 	 | ROLLBACK  transaction  transaction_ref?
    /// 	 | ROLLBACK  WORK?
    /// 	 | SAVE  transaction  transaction_ref?
    /// </summary>
    public abstract partial class AstTransactionStatement : AstBnfRule
    {
        
        protected static string _rule = @"transaction_statement
	 : BEGIN  DISTRIBUTED  transaction  transaction_ref?
	 | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)?
	 | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)?
	 | COMMIT  WORK?
	 | COMMIT  transaction_identifier
	 | ROLLBACK  transaction_identifier
	 | ROLLBACK  transaction  transaction_ref?
	 | ROLLBACK  WORK?
	 | SAVE  transaction  transaction_ref?";
        
        /// <summary>
        /// transaction_statement : BEGIN DISTRIBUTED transaction transaction_ref? 
        /// </summary>
        public partial class AstTransactionStatement1 : AstTransactionStatement
        {
            
            private AstTransaction _transaction;
            
            private AstTransactionRef _transactionRef;
            
            internal AstTransactionStatement1(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : BEGIN transaction transaction_ref WITH MARK mark=stringtext 
        /// </summary>
        public partial class AstTransactionStatement2 : AstTransactionStatement
        {
            
            private AstTransaction _transaction;
            
            private AstTransactionRef _transactionRef;
            
            private AstStringtext _mark;
            
            internal AstTransactionStatement2(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstStringtext mark) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
                _mark = mark;
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public virtual AstStringtext Mark
            {
                get
                {
                    return _mark;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT transaction transaction_ref WITH LR_BRACKET DELAYED_DURABILITY EQUAL on_off RR_BRACKET 
        /// </summary>
        public partial class AstTransactionStatement3 : AstTransactionStatement
        {
            
            private AstTransaction _transaction;
            
            private AstTransactionRef _transactionRef;
            
            private AstOnOff _onOff;
            
            internal AstTransactionStatement3(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstOnOff onOff) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
                _onOff = onOff;
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT WORK? 
        /// </summary>
        public partial class AstTransactionStatement4 : AstTransactionStatement
        {
            
            internal AstTransactionStatement4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : COMMIT transaction_identifier 
        /// </summary>
        public partial class AstTransactionStatement5 : AstTransactionStatement
        {
            
            private AstTransactionIdentifier _transactionIdentifier;
            
            internal AstTransactionStatement5(ParserRuleContext ctx, AstTransactionIdentifier transactionIdentifier) : 
                    base(ctx)
            {
                _transactionIdentifier = transactionIdentifier;
            }
            
            public virtual AstTransactionIdentifier TransactionIdentifier
            {
                get
                {
                    return _transactionIdentifier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK transaction_identifier 
        /// </summary>
        public partial class AstTransactionStatement6 : AstTransactionStatement
        {
            
            private AstTransactionIdentifier _transactionIdentifier;
            
            internal AstTransactionStatement6(ParserRuleContext ctx, AstTransactionIdentifier transactionIdentifier) : 
                    base(ctx)
            {
                _transactionIdentifier = transactionIdentifier;
            }
            
            public virtual AstTransactionIdentifier TransactionIdentifier
            {
                get
                {
                    return _transactionIdentifier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK transaction transaction_ref? 
        /// </summary>
        public partial class AstTransactionStatement7 : AstTransactionStatement
        {
            
            private AstTransaction _transaction;
            
            private AstTransactionRef _transactionRef;
            
            internal AstTransactionStatement7(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : ROLLBACK WORK? 
        /// </summary>
        public partial class AstTransactionStatement8 : AstTransactionStatement
        {
            
            internal AstTransactionStatement8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        /// <summary>
        /// transaction_statement : SAVE transaction transaction_ref? 
        /// </summary>
        public partial class AstTransactionStatement9 : AstTransactionStatement
        {
            
            private AstTransaction _transaction;
            
            private AstTransactionRef _transactionRef;
            
            internal AstTransactionStatement9(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef) : 
                    base(ctx)
            {
                _transaction = transaction;
                _transactionRef = transactionRef;
            }
            
            public virtual AstTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
            }
            
            public virtual AstTransactionRef TransactionRef
            {
                get
                {
                    return _transactionRef;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionStatement(this);
            }
        }
        

        
        internal AstTransactionStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTransactionStatement(Position p) : 
                base(p)
        {
        }
        
        internal AstTransactionStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTransactionStatement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTransactionStatement.Resolve(list);
            if ((index == 3))
            {
                return new AstTransactionStatement.AstTransactionStatement1(ctx, ((AstTransaction)(list[0])), ((AstTransactionRef)(list[1])));
            }
            if ((index == 4))
            {
                return new AstTransactionStatement.AstTransactionStatement2(ctx, ((AstTransaction)(list[0])), ((AstTransactionRef)(list[1])), ((AstStringtext)(list[2])));
            }
            if ((index == 4))
            {
                return new AstTransactionStatement.AstTransactionStatement3(ctx, ((AstTransaction)(list[0])), ((AstTransactionRef)(list[1])), ((AstOnOff)(list[2])));
            }
            if ((index == 1))
            {
                return new AstTransactionStatement.AstTransactionStatement4(ctx);
            }
            if ((index == 2))
            {
                return new AstTransactionStatement.AstTransactionStatement5(ctx, ((AstTransactionIdentifier)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTransactionStatement.AstTransactionStatement6(ctx, ((AstTransactionIdentifier)(list[0])));
            }
            if ((index == 3))
            {
                return new AstTransactionStatement.AstTransactionStatement7(ctx, ((AstTransaction)(list[0])), ((AstTransactionRef)(list[1])));
            }
            if ((index == 1))
            {
                return new AstTransactionStatement.AstTransactionStatement8(ctx);
            }
            if ((index == 3))
            {
                return new AstTransactionStatement.AstTransactionStatement9(ctx, ((AstTransaction)(list[0])), ((AstTransactionRef)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstStringtext), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOnOff), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), false, false))
                    {
                        return 6;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTransaction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTransactionRef), false, false))
                    {
                        return 7;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTransactionIdentifier), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstTransactionIdentifier), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    BEGIN DISTRIBUTED transaction transaction_ref? 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef)
        {
            AstTransactionStatement.AstTransactionStatement1 result = new AstTransactionStatement.AstTransactionStatement1(ctx, transaction, transactionRef);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    BEGIN transaction transaction_ref WITH MARK mark=stringtext 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstStringtext mark)
        {
            AstTransactionStatement.AstTransactionStatement2 result = new AstTransactionStatement.AstTransactionStatement2(ctx, transaction, transactionRef, mark);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT transaction transaction_ref WITH ( DELAYED_DURABILITY EQUAL on_off ) 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransaction transaction, AstTransactionRef transactionRef, AstOnOff onOff)
        {
            AstTransactionStatement.AstTransactionStatement3 result = new AstTransactionStatement.AstTransactionStatement3(ctx, transaction, transactionRef, onOff);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT WORK? 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx)
        {
            AstTransactionStatement.AstTransactionStatement4 result = new AstTransactionStatement.AstTransactionStatement4(ctx);
            return result;
        }
        
        /// <summary>
        /// transaction_statement : 
        ///    COMMIT transaction_identifier 
        /// </summary>
        public static AstTransactionStatement TransactionStatement(ParserRuleContext ctx, AstTransactionIdentifier transactionIdentifier)
        {
            AstTransactionStatement.AstTransactionStatement5 result = new AstTransactionStatement.AstTransactionStatement5(ctx, transactionIdentifier);
            return result;
        }
    }
    
    /// <summary>
    /// go_statement
    /// 	 : GO  (count = decimal)?
    /// </summary>
    public partial class AstGoStatement : AstBnfRule
    {
        
        protected static string _rule = "go_statement\r\n\t : GO  (count = decimal)?";
        
        internal AstGoStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGoStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGoStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstGoStatement(ParserRuleContext ctx, AstDecimal count) : 
                base(ctx)
        {
            _count = count;
        }
        
        public virtual AstDecimal _count
        {
            get
            {
                return _count;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatement(this);
        }
        
        /// <summary>
        /// go_statement : 
        ///    GO count=decimal 
        /// </summary>
        public static AstGoStatement GoStatement(ParserRuleContext ctx, AstDecimal count)
        {
            AstGoStatement result = new AstGoStatement(ctx, count);
            return result;
        }
    }
    
    /// <summary>
    /// setuser_statement
    /// 	 : SETUSER  user = stringtext
    /// </summary>
    public partial class AstSetuserStatement : AstBnfRule
    {
        
        protected static string _rule = "setuser_statement\r\n\t : SETUSER  user = stringtext";
        
        internal AstSetuserStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSetuserStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSetuserStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstSetuserStatement(ParserRuleContext ctx, AstStringtext user) : 
                base(ctx)
        {
            _user = user;
        }
        
        public virtual AstStringtext _user
        {
            get
            {
                return _user;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetuserStatement(this);
        }
        
        /// <summary>
        /// setuser_statement : 
        ///    SETUSER user=stringtext 
        /// </summary>
        public static AstSetuserStatement SetuserStatement(ParserRuleContext ctx, AstStringtext user)
        {
            AstSetuserStatement result = new AstSetuserStatement(ctx, user);
            return result;
        }
    }
    
    /// <summary>
    /// reconfigure_statement
    /// 	 : RECONFIGURE  (WITH  OVERRIDE)?
    /// </summary>
    public partial class AstReconfigureStatement : AstBnfRule
    {
        
        protected static string _rule = "reconfigure_statement\r\n\t : RECONFIGURE  (WITH  OVERRIDE)?";
        
        internal AstReconfigureStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstReconfigureStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstReconfigureStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstReconfigureStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReconfigureStatement(this);
        }
        
        /// <summary>
        /// reconfigure_statement : 
        ///    RECONFIGURE WITH OVERRIDE 
        /// </summary>
        public static AstReconfigureStatement ReconfigureStatement(ParserRuleContext ctx)
        {
            AstReconfigureStatement result = new AstReconfigureStatement(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// shutdown_statement
    /// 	 : SHUTDOWN  (WITH  NOWAIT)?
    /// </summary>
    public partial class AstShutdownStatement : AstBnfRule
    {
        
        protected static string _rule = "shutdown_statement\r\n\t : SHUTDOWN  (WITH  NOWAIT)?";
        
        internal AstShutdownStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstShutdownStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstShutdownStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstShutdownStatement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitShutdownStatement(this);
        }
        
        /// <summary>
        /// shutdown_statement : 
        ///    SHUTDOWN WITH NOWAIT 
        /// </summary>
        public static AstShutdownStatement ShutdownStatement(ParserRuleContext ctx)
        {
            AstShutdownStatement result = new AstShutdownStatement(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// checkpoint_statement
    /// 	 : CHECKPOINT  (checkPointDuration = decimal)?
    /// </summary>
    public partial class AstCheckpointStatement : AstBnfRule
    {
        
        protected static string _rule = "checkpoint_statement\r\n\t : CHECKPOINT  (checkPointDuration = decimal)?";
        
        internal AstCheckpointStatement(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCheckpointStatement(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCheckpointStatement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCheckpointStatement(ParserRuleContext ctx, AstDecimal checkPointDuration) : 
                base(ctx)
        {
            _checkPointDuration = checkPointDuration;
        }
        
        public virtual AstDecimal _checkPointDuration
        {
            get
            {
                return _checkPointDuration;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckpointStatement(this);
        }
        
        /// <summary>
        /// checkpoint_statement : 
        ///    CHECKPOINT checkPointDuration=decimal 
        /// </summary>
        public static AstCheckpointStatement CheckpointStatement(ParserRuleContext ctx, AstDecimal checkPointDuration)
        {
            AstCheckpointStatement result = new AstCheckpointStatement(ctx, checkPointDuration);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_special
    /// 	 : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  dbcc_special_size  RR_BRACKET)?
    /// </summary>
    public partial class AstDbccSpecial : AstBnfRule
    {
        
        protected static string _rule = "dbcc_special\r\n\t : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  dbcc_special_size  R" +
            "R_BRACKET)?";
        
        internal AstDbccSpecial(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDbccSpecial(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccSpecial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDbccSpecial(ParserRuleContext ctx, AstDbccSpecialSize dbccSpecialSize) : 
                base(ctx)
        {
            _dbccSpecialSize = dbccSpecialSize;
        }
        
        public virtual AstDbccSpecialSize _dbccSpecialSize
        {
            get
            {
                return _dbccSpecialSize;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccSpecial(this);
        }
        
        /// <summary>
        /// dbcc_special : 
        ///    DBCC SHRINKLOG ( SIZE EQUAL dbcc_special_size ) 
        /// </summary>
        public static AstDbccSpecial DbccSpecial(ParserRuleContext ctx, AstDbccSpecialSize dbccSpecialSize)
        {
            AstDbccSpecial result = new AstDbccSpecial(ctx, dbccSpecialSize);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_special_size
    /// 	 : constant_expression  id_
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstDbccSpecialSize : AstBnfRule
    {
        
        protected static string _rule = "dbcc_special_size\r\n\t : constant_expression  id_\r\n\t | DEFAULT";
        
        /// <summary>
        /// dbcc_special_size : constant_expression id_ 
        /// </summary>
        public partial class AstDbccSpecialSize1 : AstDbccSpecialSize
        {
            
            private AstConstantExpression _constantExpression;
            
            private AstId _id;
            
            internal AstDbccSpecialSize1(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id) : 
                    base(ctx)
            {
                _constantExpression = constantExpression;
                _id = id;
            }
            
            public virtual AstConstantExpression ConstantExpression
            {
                get
                {
                    return _constantExpression;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccSpecialSize(this);
            }
        }
        /// <summary>
        /// dbcc_special_size : DEFAULT 
        /// </summary>
        public partial class AstDbccSpecialSize2 : AstDbccSpecialSize
        {
            
            internal AstDbccSpecialSize2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccSpecialSize(this);
            }
        }
        

        
        internal AstDbccSpecialSize(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDbccSpecialSize(Position p) : 
                base(p)
        {
        }
        
        internal AstDbccSpecialSize(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDbccSpecialSize Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDbccSpecialSize.Resolve(list);
            if ((index == 3))
            {
                return new AstDbccSpecialSize.AstDbccSpecialSize1(ctx, ((AstConstantExpression)(list[0])), ((AstId)(list[1])));
            }
            if ((index == 1))
            {
                return new AstDbccSpecialSize.AstDbccSpecialSize2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstantExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// dbcc_special_size : 
        ///    constant_expression id_ 
        /// </summary>
        public static AstDbccSpecialSize DbccSpecialSize(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id)
        {
            AstDbccSpecialSize.AstDbccSpecialSize1 result = new AstDbccSpecialSize.AstDbccSpecialSize1(ctx, constantExpression, id);
            return result;
        }
        
        /// <summary>
        /// dbcc_special_size : 
        ///    DEFAULT 
        /// </summary>
        public static AstDbccSpecialSize DbccSpecialSize(ParserRuleContext ctx)
        {
            AstDbccSpecialSize.AstDbccSpecialSize2 result = new AstDbccSpecialSize.AstDbccSpecialSize2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_clause
    /// 	 : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbcc_options)?
    /// </summary>
    public partial class AstDbccClause : AstBnfRule
    {
        
        protected static string _rule = "dbcc_clause\r\n\t : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRAC" +
            "KET)?  (WITH  dbcc_options)?";
        
        internal AstDbccClause(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstDbccClause(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstDbccClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstDbccClause(ParserRuleContext ctx, AstDbccCommand name, AstExpressionList expressionList, AstDbccOptions dbccOptions) : 
                base(ctx)
        {
            _name = name;
            _expressionList = expressionList;
            _dbccOptions = dbccOptions;
        }
        
        public virtual AstDbccCommand _name
        {
            get
            {
                return _name;
            }
        }
        
        public virtual AstExpressionList _expressionList
        {
            get
            {
                return _expressionList;
            }
        }
        
        public virtual AstDbccOptions _dbccOptions
        {
            get
            {
                return _dbccOptions;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccClause(this);
        }
        
        /// <summary>
        /// dbcc_clause : 
        ///    DBCC name=dbcc_command ( expression_list ) WITH dbcc_options 
        /// </summary>
        public static AstDbccClause DbccClause(ParserRuleContext ctx, AstDbccCommand name, AstExpressionList expressionList, AstDbccOptions dbccOptions)
        {
            AstDbccClause result = new AstDbccClause(ctx, name, expressionList, dbccOptions);
            return result;
        }
    }
    
    /// <summary>
    /// dbcc_command
    /// 	 : simple_id
    /// 	 | keyword
    /// </summary>
    public abstract partial class AstDbccCommand : AstBnfRule
    {
        
        protected static string _rule = "dbcc_command\r\n\t : simple_id\r\n\t | keyword";
        
        /// <summary>
        /// dbcc_command : simple_id 
        /// </summary>
        public partial class AstDbccCommand1 : AstDbccCommand
        {
            
            private AstSimpleId _simpleId;
            
            internal AstDbccCommand1(ParserRuleContext ctx, AstSimpleId simpleId) : 
                    base(ctx)
            {
                _simpleId = simpleId;
            }
            
            public virtual AstSimpleId SimpleId
            {
                get
                {
                    return _simpleId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccCommand(this);
            }
        }
        /// <summary>
        /// dbcc_command : keyword 
        /// </summary>
        public partial class AstDbccCommand2 : AstDbccCommand
        {
            
            private AstKeyword _keyword;
            
            internal AstDbccCommand2(ParserRuleContext ctx, AstKeyword keyword) : 
                    base(ctx)
            {
                _keyword = keyword;
            }
            
            public virtual AstKeyword Keyword
            {
                get
                {
                    return _keyword;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDbccCommand(this);
            }
        }
        

        
        internal AstDbccCommand(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDbccCommand(Position p) : 
                base(p)
        {
        }
        
        internal AstDbccCommand(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDbccCommand Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDbccCommand.Resolve(list);
            if ((index == 2))
            {
                return new AstDbccCommand.AstDbccCommand1(ctx, ((AstSimpleId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDbccCommand.AstDbccCommand2(ctx, ((AstKeyword)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSimpleId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstKeyword), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// dbcc_command : 
        ///    simple_id 
        /// </summary>
        public static AstDbccCommand DbccCommand(ParserRuleContext ctx, AstSimpleId simpleId)
        {
            AstDbccCommand.AstDbccCommand1 result = new AstDbccCommand.AstDbccCommand1(ctx, simpleId);
            return result;
        }
        
        /// <summary>
        /// dbcc_command : 
        ///    keyword 
        /// </summary>
        public static AstDbccCommand DbccCommand(ParserRuleContext ctx, AstKeyword keyword)
        {
            AstDbccCommand.AstDbccCommand2 result = new AstDbccCommand.AstDbccCommand2(ctx, keyword);
            return result;
        }
    }
    
    /// <summary>
    /// execute_clause_mode
    /// 	 : execute_clause_mode_enum
    /// 	 | stringtext
    /// </summary>
    public abstract partial class AstExecuteClauseMode : AstBnfRule
    {
        
        protected static string _rule = "execute_clause_mode\r\n\t : execute_clause_mode_enum\r\n\t | stringtext";
        
        /// <summary>
        /// execute_clause_mode : execute_clause_mode_enum 
        /// </summary>
        public partial class AstExecuteClauseMode1 : AstExecuteClauseMode
        {
            
            private AstExecuteClauseModeEnum _executeClauseModeEnum;
            
            internal AstExecuteClauseMode1(ParserRuleContext ctx, AstExecuteClauseModeEnum executeClauseModeEnum) : 
                    base(ctx)
            {
                _executeClauseModeEnum = executeClauseModeEnum;
            }
            
            public virtual AstExecuteClauseModeEnum ExecuteClauseModeEnum
            {
                get
                {
                    return _executeClauseModeEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteClauseMode(this);
            }
        }
        /// <summary>
        /// execute_clause_mode : stringtext 
        /// </summary>
        public partial class AstExecuteClauseMode2 : AstExecuteClauseMode
        {
            
            private AstStringtext _stringtext;
            
            internal AstExecuteClauseMode2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExecuteClauseMode(this);
            }
        }
        

        
        internal AstExecuteClauseMode(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExecuteClauseMode(Position p) : 
                base(p)
        {
        }
        
        internal AstExecuteClauseMode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExecuteClauseMode Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExecuteClauseMode.Resolve(list);
            if ((index == 2))
            {
                return new AstExecuteClauseMode.AstExecuteClauseMode1(ctx, ((AstExecuteClauseModeEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExecuteClauseMode.AstExecuteClauseMode2(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExecuteClauseModeEnum), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// execute_clause_mode : 
        ///    execute_clause_mode_enum 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(ParserRuleContext ctx, AstExecuteClauseModeEnum executeClauseModeEnum)
        {
            AstExecuteClauseMode.AstExecuteClauseMode1 result = new AstExecuteClauseMode.AstExecuteClauseMode1(ctx, executeClauseModeEnum);
            return result;
        }
        
        /// <summary>
        /// execute_clause_mode : 
        ///    stringtext 
        /// </summary>
        public static AstExecuteClauseMode ExecuteClauseMode(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstExecuteClauseMode.AstExecuteClauseMode2 result = new AstExecuteClauseMode.AstExecuteClauseMode2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// table_type_indice
    /// 	 : type_indice  LR_BRACKET  column_name_list_with_order  RR_BRACKET
    /// 	 | CHECK  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstTableTypeIndice : AstBnfRule
    {
        
        protected static string _rule = "table_type_indice\r\n\t : type_indice  LR_BRACKET  column_name_list_with_order  RR_B" +
            "RACKET\r\n\t | CHECK  LR_BRACKET  search_condition  RR_BRACKET";
        
        /// <summary>
        /// table_type_indice : type_indice LR_BRACKET column_name_list_with_order RR_BRACKET 
        /// </summary>
        public partial class AstTableTypeIndice1 : AstTableTypeIndice
        {
            
            private AstTypeIndice _typeIndice;
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            internal AstTableTypeIndice1(ParserRuleContext ctx, AstTypeIndice typeIndice, AstColumnNameListWithOrder columnNameListWithOrder) : 
                    base(ctx)
            {
                _typeIndice = typeIndice;
                _columnNameListWithOrder = columnNameListWithOrder;
            }
            
            public virtual AstTypeIndice TypeIndice
            {
                get
                {
                    return _typeIndice;
                }
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableTypeIndice(this);
            }
        }
        /// <summary>
        /// table_type_indice : CHECK LR_BRACKET search_condition RR_BRACKET 
        /// </summary>
        public partial class AstTableTypeIndice2 : AstTableTypeIndice
        {
            
            private AstSearchCondition _searchCondition;
            
            internal AstTableTypeIndice2(ParserRuleContext ctx, AstSearchCondition searchCondition) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableTypeIndice(this);
            }
        }
        

        
        internal AstTableTypeIndice(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableTypeIndice(Position p) : 
                base(p)
        {
        }
        
        internal AstTableTypeIndice(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableTypeIndice Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableTypeIndice.Resolve(list);
            if ((index == 3))
            {
                return new AstTableTypeIndice.AstTableTypeIndice1(ctx, ((AstTypeIndice)(list[0])), ((AstColumnNameListWithOrder)(list[1])));
            }
            if ((index == 2))
            {
                return new AstTableTypeIndice.AstTableTypeIndice2(ctx, ((AstSearchCondition)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstTypeIndice), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameListWithOrder), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    type_indice ( column_name_list_with_order ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(ParserRuleContext ctx, AstTypeIndice typeIndice, AstColumnNameListWithOrder columnNameListWithOrder)
        {
            AstTableTypeIndice.AstTableTypeIndice1 result = new AstTableTypeIndice.AstTableTypeIndice1(ctx, typeIndice, columnNameListWithOrder);
            return result;
        }
        
        /// <summary>
        /// table_type_indice : 
        ///    CHECK ( search_condition ) 
        /// </summary>
        public static AstTableTypeIndice TableTypeIndice(ParserRuleContext ctx, AstSearchCondition searchCondition)
        {
            AstTableTypeIndice.AstTableTypeIndice2 result = new AstTableTypeIndice.AstTableTypeIndice2(ctx, searchCondition);
            return result;
        }
    }
    
    /// <summary>
    /// type_indice
    /// 	 : indice_name  clustered?
    /// 	 | UNIQUE
    /// </summary>
    public abstract partial class AstTypeIndice : AstBnfRule
    {
        
        protected static string _rule = "type_indice\r\n\t : indice_name  clustered?\r\n\t | UNIQUE";
        
        /// <summary>
        /// type_indice : indice_name clustered? 
        /// </summary>
        public partial class AstTypeIndice1 : AstTypeIndice
        {
            
            private AstIndiceName _indiceName;
            
            private AstClustered _clustered;
            
            internal AstTypeIndice1(ParserRuleContext ctx, AstIndiceName indiceName, AstClustered clustered) : 
                    base(ctx)
            {
                _indiceName = indiceName;
                _clustered = clustered;
            }
            
            public virtual AstIndiceName IndiceName
            {
                get
                {
                    return _indiceName;
                }
            }
            
            public virtual AstClustered Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTypeIndice(this);
            }
        }
        /// <summary>
        /// type_indice : UNIQUE 
        /// </summary>
        public partial class AstTypeIndice2 : AstTypeIndice
        {
            
            internal AstTypeIndice2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTypeIndice(this);
            }
        }
        

        
        internal AstTypeIndice(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTypeIndice(Position p) : 
                base(p)
        {
        }
        
        internal AstTypeIndice(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTypeIndice Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTypeIndice.Resolve(list);
            if ((index == 3))
            {
                return new AstTypeIndice.AstTypeIndice1(ctx, ((AstIndiceName)(list[0])), ((AstClustered)(list[1])));
            }
            if ((index == 1))
            {
                return new AstTypeIndice.AstTypeIndice2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndiceName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstClustered), false, false))
                    {
                        return 1;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// type_indice : 
        ///    indice_name clustered? 
        /// </summary>
        public static AstTypeIndice TypeIndice(ParserRuleContext ctx, AstIndiceName indiceName, AstClustered clustered)
        {
            AstTypeIndice.AstTypeIndice1 result = new AstTypeIndice.AstTypeIndice1(ctx, indiceName, clustered);
            return result;
        }
        
        /// <summary>
        /// type_indice : 
        ///    UNIQUE 
        /// </summary>
        public static AstTypeIndice TypeIndice(ParserRuleContext ctx)
        {
            AstTypeIndice.AstTypeIndice2 result = new AstTypeIndice.AstTypeIndice2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// indice_name
    /// 	 : PRIMARY  KEY
    /// 	 | INDEX  index_id
    /// </summary>
    public abstract partial class AstIndiceName : AstBnfRule
    {
        
        protected static string _rule = "indice_name\r\n\t : PRIMARY  KEY\r\n\t | INDEX  index_id";
        
        /// <summary>
        /// indice_name : PRIMARY KEY 
        /// </summary>
        public partial class AstIndiceName1 : AstIndiceName
        {
            
            internal AstIndiceName1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndiceName(this);
            }
        }
        /// <summary>
        /// indice_name : INDEX index_id 
        /// </summary>
        public partial class AstIndiceName2 : AstIndiceName
        {
            
            private AstIndexId _indexId;
            
            internal AstIndiceName2(ParserRuleContext ctx, AstIndexId indexId) : 
                    base(ctx)
            {
                _indexId = indexId;
            }
            
            public virtual AstIndexId IndexId
            {
                get
                {
                    return _indexId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndiceName(this);
            }
        }
        

        
        internal AstIndiceName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndiceName(Position p) : 
                base(p)
        {
        }
        
        internal AstIndiceName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIndiceName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIndiceName.Resolve(list);
            if ((index == 1))
            {
                return new AstIndiceName.AstIndiceName1(ctx);
            }
            if ((index == 2))
            {
                return new AstIndiceName.AstIndiceName2(ctx, ((AstIndexId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexId), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// indice_name : 
        ///    PRIMARY KEY 
        /// </summary>
        public static AstIndiceName IndiceName(ParserRuleContext ctx)
        {
            AstIndiceName.AstIndiceName1 result = new AstIndiceName.AstIndiceName1(ctx);
            return result;
        }
        
        /// <summary>
        /// indice_name : 
        ///    INDEX index_id 
        /// </summary>
        public static AstIndiceName IndiceName(ParserRuleContext ctx, AstIndexId indexId)
        {
            AstIndiceName.AstIndiceName2 result = new AstIndiceName.AstIndiceName2(ctx, indexId);
            return result;
        }
    }
    
    /// <summary>
    /// xml_schema_collection
    /// 	 : left = ID  DOT  right = ID
    /// </summary>
    public partial class AstXmlSchemaCollection : AstBnfRule
    {
        
        protected static string _rule = "xml_schema_collection\r\n\t : left = ID  DOT  right = ID";
        
        internal AstXmlSchemaCollection(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstXmlSchemaCollection(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstXmlSchemaCollection(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstXmlSchemaCollection(ParserRuleContext ctx, String left, String right) : 
                base(ctx)
        {
            _left = left;
            _right = right;
        }
        
        public virtual String _left
        {
            get
            {
                return _left;
            }
        }
        
        public virtual String _right
        {
            get
            {
                return _right;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlSchemaCollection(this);
        }
        
        /// <summary>
        /// xml_schema_collection : 
        ///    left=ID . right=ID 
        /// </summary>
        public static AstXmlSchemaCollection XmlSchemaCollection(ParserRuleContext ctx, String left, String right)
        {
            AstXmlSchemaCollection result = new AstXmlSchemaCollection(ctx, left, right);
            return result;
        }
    }
    
    /// <summary>
    /// column_def_table_constraint
    /// 	 : column_definition
    /// 	 | materialized_column_definition
    /// 	 | table_constraint
    /// </summary>
    public abstract partial class AstColumnDefTableConstraint : AstBnfRule
    {
        
        protected static string _rule = "column_def_table_constraint\r\n\t : column_definition\r\n\t | materialized_column_defin" +
            "ition\r\n\t | table_constraint";
        
        /// <summary>
        /// column_def_table_constraint : column_definition 
        /// </summary>
        public partial class AstColumnDefTableConstraint1 : AstColumnDefTableConstraint
        {
            
            private AstColumnDefinition _columnDefinition;
            
            internal AstColumnDefTableConstraint1(ParserRuleContext ctx, AstColumnDefinition columnDefinition) : 
                    base(ctx)
            {
                _columnDefinition = columnDefinition;
            }
            
            public virtual AstColumnDefinition ColumnDefinition
            {
                get
                {
                    return _columnDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        /// <summary>
        /// column_def_table_constraint : materialized_column_definition 
        /// </summary>
        public partial class AstColumnDefTableConstraint2 : AstColumnDefTableConstraint
        {
            
            private AstMaterializedColumnDefinition _materializedColumnDefinition;
            
            internal AstColumnDefTableConstraint2(ParserRuleContext ctx, AstMaterializedColumnDefinition materializedColumnDefinition) : 
                    base(ctx)
            {
                _materializedColumnDefinition = materializedColumnDefinition;
            }
            
            public virtual AstMaterializedColumnDefinition MaterializedColumnDefinition
            {
                get
                {
                    return _materializedColumnDefinition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        /// <summary>
        /// column_def_table_constraint : table_constraint 
        /// </summary>
        public partial class AstColumnDefTableConstraint3 : AstColumnDefTableConstraint
        {
            
            private AstTableConstraint _tableConstraint;
            
            internal AstColumnDefTableConstraint3(ParserRuleContext ctx, AstTableConstraint tableConstraint) : 
                    base(ctx)
            {
                _tableConstraint = tableConstraint;
            }
            
            public virtual AstTableConstraint TableConstraint
            {
                get
                {
                    return _tableConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefTableConstraint(this);
            }
        }
        

        
        internal AstColumnDefTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnDefTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnDefTableConstraint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnDefTableConstraint.Resolve(list);
            if ((index == 2))
            {
                return new AstColumnDefTableConstraint.AstColumnDefTableConstraint1(ctx, ((AstColumnDefinition)(list[0])));
            }
            if ((index == 2))
            {
                return new AstColumnDefTableConstraint.AstColumnDefTableConstraint2(ctx, ((AstMaterializedColumnDefinition)(list[0])));
            }
            if ((index == 2))
            {
                return new AstColumnDefTableConstraint.AstColumnDefTableConstraint3(ctx, ((AstTableConstraint)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnDefinition), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstMaterializedColumnDefinition), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableConstraint), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(ParserRuleContext ctx, AstColumnDefinition columnDefinition)
        {
            AstColumnDefTableConstraint.AstColumnDefTableConstraint1 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint1(ctx, columnDefinition);
            return result;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    materialized_column_definition 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(ParserRuleContext ctx, AstMaterializedColumnDefinition materializedColumnDefinition)
        {
            AstColumnDefTableConstraint.AstColumnDefTableConstraint2 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint2(ctx, materializedColumnDefinition);
            return result;
        }
        
        /// <summary>
        /// column_def_table_constraint : 
        ///    table_constraint 
        /// </summary>
        public static AstColumnDefTableConstraint ColumnDefTableConstraint(ParserRuleContext ctx, AstTableConstraint tableConstraint)
        {
            AstColumnDefTableConstraint.AstColumnDefTableConstraint3 result = new AstColumnDefTableConstraint.AstColumnDefTableConstraint3(ctx, tableConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// column_definition_element
    /// 	 : FILESTREAM
    /// 	 | COLLATE  collation_id
    /// 	 | SPARSE
    /// 	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
    /// 	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
    /// 	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
    /// 	 | NOT  FOR  REPLICATION
    /// 	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
    /// 	 | ROWGUIDCOL
    /// 	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
    /// 	 | column_constraint
    /// </summary>
    public abstract partial class AstColumnDefinitionElement : AstBnfRule
    {
        
        protected static string _rule = @"column_definition_element
	 : FILESTREAM
	 | COLLATE  collation_id
	 | SPARSE
	 | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET
	 | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression
	 | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)?
	 | NOT  FOR  REPLICATION
	 | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD?
	 | ROWGUIDCOL
	 | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET
	 | column_constraint";
        
        /// <summary>
        /// column_definition_element : FILESTREAM 
        /// </summary>
        public partial class AstColumnDefinitionElement1 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : COLLATE collation_id 
        /// </summary>
        public partial class AstColumnDefinitionElement2 : AstColumnDefinitionElement
        {
            
            private AstCollationId _collationId;
            
            internal AstColumnDefinitionElement2(ParserRuleContext ctx, AstCollationId collationId) : 
                    base(ctx)
            {
                _collationId = collationId;
            }
            
            public virtual AstCollationId CollationId
            {
                get
                {
                    return _collationId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : SPARSE 
        /// </summary>
        public partial class AstColumnDefinitionElement3 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : MASKED WITH LR_BRACKET FUNCTION EQUAL mask_function=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstColumnDefinitionElement4 : AstColumnDefinitionElement
        {
            
            private AstStringtext _maskFunction;
            
            internal AstColumnDefinitionElement4(ParserRuleContext ctx, AstStringtext maskFunction) : 
                    base(ctx)
            {
                _maskFunction = maskFunction;
            }
            
            public virtual AstStringtext MaskFunction
            {
                get
                {
                    return _maskFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : CONSTRAINT constraint_id DEFAULT constant_expr=expression 
        /// </summary>
        public partial class AstColumnDefinitionElement5 : AstColumnDefinitionElement
        {
            
            private AstConstraintId _constraintId;
            
            private AstExpression _constantExpr;
            
            internal AstColumnDefinitionElement5(ParserRuleContext ctx, AstConstraintId constraintId, AstExpression constantExpr) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _constantExpr = constantExpr;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstExpression ConstantExpr
            {
                get
                {
                    return _constantExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : IDENTITY LR_BRACKET seed=decimal COMMA increment=decimal RR_BRACKET 
        /// </summary>
        public partial class AstColumnDefinitionElement6 : AstColumnDefinitionElement
        {
            
            private AstDecimal _seed;
            
            private AstDecimal _increment;
            
            internal AstColumnDefinitionElement6(ParserRuleContext ctx, AstDecimal seed, AstDecimal increment) : 
                    base(ctx)
            {
                _seed = seed;
                _increment = increment;
            }
            
            public virtual AstDecimal Seed
            {
                get
                {
                    return _seed;
                }
            }
            
            public virtual AstDecimal Increment
            {
                get
                {
                    return _increment;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : NOT FOR REPLICATION 
        /// </summary>
        public partial class AstColumnDefinitionElement7 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : GENERATED ALWAYS AS generation_mode start_end HIDDEN_KEYWORD? 
        /// </summary>
        public partial class AstColumnDefinitionElement8 : AstColumnDefinitionElement
        {
            
            private AstGenerationMode _generationMode;
            
            private AstStartEnd _startEnd;
            
            internal AstColumnDefinitionElement8(ParserRuleContext ctx, AstGenerationMode generationMode, AstStartEnd startEnd) : 
                    base(ctx)
            {
                _generationMode = generationMode;
                _startEnd = startEnd;
            }
            
            public virtual AstGenerationMode GenerationMode
            {
                get
                {
                    return _generationMode;
                }
            }
            
            public virtual AstStartEnd StartEnd
            {
                get
                {
                    return _startEnd;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : ROWGUIDCOL 
        /// </summary>
        public partial class AstColumnDefinitionElement9 : AstColumnDefinitionElement
        {
            
            internal AstColumnDefinitionElement9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : ENCRYPTED WITH LR_BRACKET column_encryption_key_id EQUAL key_name=stringtext COMMA ENCRYPTION_TYPE EQUAL encryption_mode COMMA ALGORITHM EQUAL algo=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstColumnDefinitionElement10 : AstColumnDefinitionElement
        {
            
            private AstColumnEncryptionKeyId _columnEncryptionKeyId;
            
            private AstStringtext _keyName;
            
            private AstEncryptionMode _encryptionMode;
            
            private AstStringtext _algo;
            
            internal AstColumnDefinitionElement10(ParserRuleContext ctx, AstColumnEncryptionKeyId columnEncryptionKeyId, AstStringtext keyName, AstEncryptionMode encryptionMode, AstStringtext algo) : 
                    base(ctx)
            {
                _columnEncryptionKeyId = columnEncryptionKeyId;
                _keyName = keyName;
                _encryptionMode = encryptionMode;
                _algo = algo;
            }
            
            public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
            {
                get
                {
                    return _columnEncryptionKeyId;
                }
            }
            
            public virtual AstStringtext KeyName
            {
                get
                {
                    return _keyName;
                }
            }
            
            public virtual AstEncryptionMode EncryptionMode
            {
                get
                {
                    return _encryptionMode;
                }
            }
            
            public virtual AstStringtext Algo
            {
                get
                {
                    return _algo;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        /// <summary>
        /// column_definition_element : column_constraint 
        /// </summary>
        public partial class AstColumnDefinitionElement11 : AstColumnDefinitionElement
        {
            
            private AstColumnConstraint _columnConstraint;
            
            internal AstColumnDefinitionElement11(ParserRuleContext ctx, AstColumnConstraint columnConstraint) : 
                    base(ctx)
            {
                _columnConstraint = columnConstraint;
            }
            
            public virtual AstColumnConstraint ColumnConstraint
            {
                get
                {
                    return _columnConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnDefinitionElement(this);
            }
        }
        

        
        internal AstColumnDefinitionElement(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnDefinitionElement(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnDefinitionElement(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnDefinitionElement Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnDefinitionElement.Resolve(list);
            if ((index == 1))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement1(ctx);
            }
            if ((index == 2))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement2(ctx, ((AstCollationId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement3(ctx);
            }
            if ((index == 2))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement4(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 3))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement5(ctx, ((AstConstraintId)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement6(ctx, ((AstDecimal)(list[0])), ((AstDecimal)(list[1])));
            }
            if ((index == 1))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement7(ctx);
            }
            if ((index == 3))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement8(ctx, ((AstGenerationMode)(list[0])), ((AstStartEnd)(list[1])));
            }
            if ((index == 1))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement9(ctx);
            }
            if ((index == 5))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement10(ctx, ((AstColumnEncryptionKeyId)(list[0])), ((AstStringtext)(list[1])), ((AstEncryptionMode)(list[2])), ((AstStringtext)(list[3])));
            }
            if ((index == 2))
            {
                return new AstColumnDefinitionElement.AstColumnDefinitionElement11(ctx, ((AstColumnConstraint)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnEncryptionKeyId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstEncryptionMode), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstStringtext), false, false))
                            {
                                return 6;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstGenerationMode), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStartEnd), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstCollationId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstColumnConstraint), false, false))
                {
                    return 7;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    FILESTREAM 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement1 result = new AstColumnDefinitionElement.AstColumnDefinitionElement1(ctx);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstCollationId collationId)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement2 result = new AstColumnDefinitionElement.AstColumnDefinitionElement2(ctx, collationId);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    MASKED WITH ( FUNCTION EQUAL mask_function=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstStringtext maskFunction)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement4 result = new AstColumnDefinitionElement.AstColumnDefinitionElement4(ctx, maskFunction);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    CONSTRAINT constraint_id DEFAULT constant_expr=expression 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstConstraintId constraintId, AstExpression constantExpr)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement5 result = new AstColumnDefinitionElement.AstColumnDefinitionElement5(ctx, constraintId, constantExpr);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    IDENTITY ( seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstDecimal seed, AstDecimal increment)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement6 result = new AstColumnDefinitionElement.AstColumnDefinitionElement6(ctx, seed, increment);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    GENERATED ALWAYS AS generation_mode start_end HIDDEN_KEYWORD? 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstGenerationMode generationMode, AstStartEnd startEnd)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement8 result = new AstColumnDefinitionElement.AstColumnDefinitionElement8(ctx, generationMode, startEnd);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    ENCRYPTED WITH ( column_encryption_key_id EQUAL key_name=stringtext , ENCRYPTION_TYPE EQUAL encryption_mode , ALGORITHM EQUAL algo=stringtext ) 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstColumnEncryptionKeyId columnEncryptionKeyId, AstStringtext keyName, AstEncryptionMode encryptionMode, AstStringtext algo)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement10 result = new AstColumnDefinitionElement.AstColumnDefinitionElement10(ctx, columnEncryptionKeyId, keyName, encryptionMode, algo);
            return result;
        }
        
        /// <summary>
        /// column_definition_element : 
        ///    column_constraint 
        /// </summary>
        public static AstColumnDefinitionElement ColumnDefinitionElement(ParserRuleContext ctx, AstColumnConstraint columnConstraint)
        {
            AstColumnDefinitionElement.AstColumnDefinitionElement11 result = new AstColumnDefinitionElement.AstColumnDefinitionElement11(ctx, columnConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// column_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)
    /// </summary>
    public abstract partial class AstColumnConstraint : AstBnfRule
    {
        
        protected static string _rule = "column_constraint\r\n\t : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key" +
            "_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_option" +
            "s) | check_constraint)";
        
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id null_notnull 
        /// </summary>
        public partial class AstColumnConstraint1 : AstColumnConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstNullNotnull _nullNotnull;
            
            internal AstColumnConstraint1(ParserRuleContext ctx, AstConstraintId constraintId, AstNullNotnull nullNotnull) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _nullNotnull = nullNotnull;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstNullNotnull NullNotnull
            {
                get
                {
                    return _nullNotnull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id primary_key_unique clustered? primary_key_options 
        /// </summary>
        public partial class AstColumnConstraint2 : AstColumnConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstPrimaryKeyUnique _primaryKeyUnique;
            
            private AstClustered _clustered;
            
            private AstPrimaryKeyOptions _primaryKeyOptions;
            
            internal AstColumnConstraint2(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstPrimaryKeyOptions primaryKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _primaryKeyUnique = primaryKeyUnique;
                _clustered = clustered;
                _primaryKeyOptions = primaryKeyOptions;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstPrimaryKeyUnique PrimaryKeyUnique
            {
                get
                {
                    return _primaryKeyUnique;
                }
            }
            
            public virtual AstClustered Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public virtual AstPrimaryKeyOptions PrimaryKeyOptions
            {
                get
                {
                    return _primaryKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id FOREIGN KEY foreign_key_options 
        /// </summary>
        public partial class AstColumnConstraint3 : AstColumnConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstForeignKeyOptions _foreignKeyOptions;
            
            internal AstColumnConstraint3(ParserRuleContext ctx, AstConstraintId constraintId, AstForeignKeyOptions foreignKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _foreignKeyOptions = foreignKeyOptions;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstForeignKeyOptions ForeignKeyOptions
            {
                get
                {
                    return _foreignKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        /// <summary>
        /// column_constraint : CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public partial class AstColumnConstraint4 : AstColumnConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstCheckConstraint _checkConstraint;
            
            internal AstColumnConstraint4(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _checkConstraint = checkConstraint;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstCheckConstraint CheckConstraint
            {
                get
                {
                    return _checkConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnConstraint(this);
            }
        }
        

        
        internal AstColumnConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnConstraint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnConstraint.Resolve(list);
            if ((index == 3))
            {
                return new AstColumnConstraint.AstColumnConstraint1(ctx, ((AstConstraintId)(list[0])), ((AstNullNotnull)(list[1])));
            }
            if ((index == 5))
            {
                return new AstColumnConstraint.AstColumnConstraint2(ctx, ((AstConstraintId)(list[0])), ((AstPrimaryKeyUnique)(list[1])), ((AstClustered)(list[2])), ((AstPrimaryKeyOptions)(list[3])));
            }
            if ((index == 3))
            {
                return new AstColumnConstraint.AstColumnConstraint3(ctx, ((AstConstraintId)(list[0])), ((AstForeignKeyOptions)(list[1])));
            }
            if ((index == 3))
            {
                return new AstColumnConstraint.AstColumnConstraint4(ctx, ((AstConstraintId)(list[0])), ((AstCheckConstraint)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPrimaryKeyUnique), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstClustered), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstPrimaryKeyOptions), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstNullNotnull), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstForeignKeyOptions), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCheckConstraint), false, false))
                    {
                        return 4;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id null_notnull 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstNullNotnull nullNotnull)
        {
            AstColumnConstraint.AstColumnConstraint1 result = new AstColumnConstraint.AstColumnConstraint1(ctx, constraintId, nullNotnull);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? primary_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstPrimaryKeyOptions primaryKeyOptions)
        {
            AstColumnConstraint.AstColumnConstraint2 result = new AstColumnConstraint.AstColumnConstraint2(ctx, constraintId, primaryKeyUnique, clustered, primaryKeyOptions);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id FOREIGN KEY foreign_key_options 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstForeignKeyOptions foreignKeyOptions)
        {
            AstColumnConstraint.AstColumnConstraint3 result = new AstColumnConstraint.AstColumnConstraint3(ctx, constraintId, foreignKeyOptions);
            return result;
        }
        
        /// <summary>
        /// column_constraint : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstColumnConstraint ColumnConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            AstColumnConstraint.AstColumnConstraint4 result = new AstColumnConstraint.AstColumnConstraint4(ctx, constraintId, checkConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// on_partition_or_filegroup
    /// 	 : ON  ((partition_scheme_id  LR_BRACKET  partition_column_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)
    /// </summary>
    public abstract partial class AstOnPartitionOrFilegroup : AstBnfRule
    {
        
        protected static string _rule = "on_partition_or_filegroup\r\n\t : ON  ((partition_scheme_id  LR_BRACKET  partition_c" +
            "olumn_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)";
        
        /// <summary>
        /// on_partition_or_filegroup : ON partition_scheme_id LR_BRACKET partition_column_id RR_BRACKET 
        /// </summary>
        public partial class AstOnPartitionOrFilegroup1 : AstOnPartitionOrFilegroup
        {
            
            private AstPartitionSchemeId _partitionSchemeId;
            
            private AstPartitionColumnId _partitionColumnId;
            
            internal AstOnPartitionOrFilegroup1(ParserRuleContext ctx, AstPartitionSchemeId partitionSchemeId, AstPartitionColumnId partitionColumnId) : 
                    base(ctx)
            {
                _partitionSchemeId = partitionSchemeId;
                _partitionColumnId = partitionColumnId;
            }
            
            public virtual AstPartitionSchemeId PartitionSchemeId
            {
                get
                {
                    return _partitionSchemeId;
                }
            }
            
            public virtual AstPartitionColumnId PartitionColumnId
            {
                get
                {
                    return _partitionColumnId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnPartitionOrFilegroup(this);
            }
        }
        /// <summary>
        /// on_partition_or_filegroup : ON file_group_id 
        /// </summary>
        public partial class AstOnPartitionOrFilegroup2 : AstOnPartitionOrFilegroup
        {
            
            private AstFileGroupId _fileGroupId;
            
            internal AstOnPartitionOrFilegroup2(ParserRuleContext ctx, AstFileGroupId fileGroupId) : 
                    base(ctx)
            {
                _fileGroupId = fileGroupId;
            }
            
            public virtual AstFileGroupId FileGroupId
            {
                get
                {
                    return _fileGroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnPartitionOrFilegroup(this);
            }
        }
        /// <summary>
        /// on_partition_or_filegroup : ON DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public partial class AstOnPartitionOrFilegroup3 : AstOnPartitionOrFilegroup
        {
            
            internal AstOnPartitionOrFilegroup3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnPartitionOrFilegroup(this);
            }
        }
        

        
        internal AstOnPartitionOrFilegroup(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnPartitionOrFilegroup(Position p) : 
                base(p)
        {
        }
        
        internal AstOnPartitionOrFilegroup(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstOnPartitionOrFilegroup Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstOnPartitionOrFilegroup.Resolve(list);
            if ((index == 3))
            {
                return new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup1(ctx, ((AstPartitionSchemeId)(list[0])), ((AstPartitionColumnId)(list[1])));
            }
            if ((index == 2))
            {
                return new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup2(ctx, ((AstFileGroupId)(list[0])));
            }
            if ((index == 1))
            {
                return new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPartitionSchemeId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPartitionColumnId), false, false))
                    {
                        return 1;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroupId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON partition_scheme_id ( partition_column_id ) 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(ParserRuleContext ctx, AstPartitionSchemeId partitionSchemeId, AstPartitionColumnId partitionColumnId)
        {
            AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup1 result = new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup1(ctx, partitionSchemeId, partitionColumnId);
            return result;
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON file_group_id 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(ParserRuleContext ctx, AstFileGroupId fileGroupId)
        {
            AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup2 result = new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup2(ctx, fileGroupId);
            return result;
        }
        
        /// <summary>
        /// on_partition_or_filegroup : 
        ///    ON DEFAULT_DOUBLE_QUOTE 
        /// </summary>
        public static AstOnPartitionOrFilegroup OnPartitionOrFilegroup(ParserRuleContext ctx)
        {
            AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup3 result = new AstOnPartitionOrFilegroup.AstOnPartitionOrFilegroup3(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// table_constraint
    /// 	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)
    /// </summary>
    public abstract partial class AstTableConstraint : AstBnfRule
    {
        
        protected static string _rule = @"table_constraint
	 : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)";
        
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id primary_key_unique clustered? LR_BRACKET column_name_list_with_order RR_BRACKET primary_key_options 
        /// </summary>
        public partial class AstTableConstraint1 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstPrimaryKeyUnique _primaryKeyUnique;
            
            private AstClustered _clustered;
            
            private AstColumnNameListWithOrder _columnNameListWithOrder;
            
            private AstPrimaryKeyOptions _primaryKeyOptions;
            
            internal AstTableConstraint1(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder, AstPrimaryKeyOptions primaryKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _primaryKeyUnique = primaryKeyUnique;
                _clustered = clustered;
                _columnNameListWithOrder = columnNameListWithOrder;
                _primaryKeyOptions = primaryKeyOptions;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstPrimaryKeyUnique PrimaryKeyUnique
            {
                get
                {
                    return _primaryKeyUnique;
                }
            }
            
            public virtual AstClustered Clustered
            {
                get
                {
                    return _clustered;
                }
            }
            
            public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
            {
                get
                {
                    return _columnNameListWithOrder;
                }
            }
            
            public virtual AstPrimaryKeyOptions PrimaryKeyOptions
            {
                get
                {
                    return _primaryKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id FOREIGN KEY LR_BRACKET fk=column_name_list RR_BRACKET foreign_key_options 
        /// </summary>
        public partial class AstTableConstraint2 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstColumnNameList _fk;
            
            private AstForeignKeyOptions _foreignKeyOptions;
            
            internal AstTableConstraint2(ParserRuleContext ctx, AstConstraintId constraintId, AstColumnNameList fk, AstForeignKeyOptions foreignKeyOptions) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _fk = fk;
                _foreignKeyOptions = foreignKeyOptions;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstColumnNameList Fk
            {
                get
                {
                    return _fk;
                }
            }
            
            public virtual AstForeignKeyOptions ForeignKeyOptions
            {
                get
                {
                    return _foreignKeyOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id CONNECTION LR_BRACKET connection_nodes RR_BRACKET 
        /// </summary>
        public partial class AstTableConstraint3 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstConnectionNodes _connectionNodes;
            
            internal AstTableConstraint3(ParserRuleContext ctx, AstConstraintId constraintId, AstConnectionNodes connectionNodes) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _connectionNodes = connectionNodes;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstConnectionNodes ConnectionNodes
            {
                get
                {
                    return _connectionNodes;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? stringtext RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint4 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstStringtext _stringtext;
            
            private AstId _id;
            
            internal AstTableConstraint4(ParserRuleContext ctx, AstConstraintId constraintId, AstStringtext stringtext, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _stringtext = stringtext;
                _id = id;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? PLUS RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint5 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstId _id;
            
            internal AstTableConstraint5(ParserRuleContext ctx, AstConstraintId constraintId, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _id = id;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? function_call RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint6 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstFunctionCall _functionCall;
            
            private AstId _id;
            
            internal AstTableConstraint6(ParserRuleContext ctx, AstConstraintId constraintId, AstFunctionCall functionCall, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _functionCall = functionCall;
                _id = id;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? decimal RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint7 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstDecimal _decimal;
            
            private AstId _id;
            
            internal AstTableConstraint7(ParserRuleContext ctx, AstConstraintId constraintId, AstDecimal @decimal, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _decimal = @decimal;
                _id = id;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id DEFAULT LR_BRACKET? NEXT VALUE FOR full_table_ref RR_BRACKET? FOR id_ 
        /// </summary>
        public partial class AstTableConstraint8 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstFullTableRef _fullTableRef;
            
            private AstId _id;
            
            internal AstTableConstraint8(ParserRuleContext ctx, AstConstraintId constraintId, AstFullTableRef fullTableRef, AstId id) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _fullTableRef = fullTableRef;
                _id = id;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        /// <summary>
        /// table_constraint : CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public partial class AstTableConstraint9 : AstTableConstraint
        {
            
            private AstConstraintId _constraintId;
            
            private AstCheckConstraint _checkConstraint;
            
            internal AstTableConstraint9(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint) : 
                    base(ctx)
            {
                _constraintId = constraintId;
                _checkConstraint = checkConstraint;
            }
            
            public virtual AstConstraintId ConstraintId
            {
                get
                {
                    return _constraintId;
                }
            }
            
            public virtual AstCheckConstraint CheckConstraint
            {
                get
                {
                    return _checkConstraint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableConstraint(this);
            }
        }
        

        
        internal AstTableConstraint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableConstraint(Position p) : 
                base(p)
        {
        }
        
        internal AstTableConstraint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableConstraint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableConstraint.Resolve(list);
            if ((index == 6))
            {
                return new AstTableConstraint.AstTableConstraint1(ctx, ((AstConstraintId)(list[0])), ((AstPrimaryKeyUnique)(list[1])), ((AstClustered)(list[2])), ((AstColumnNameListWithOrder)(list[3])), ((AstPrimaryKeyOptions)(list[4])));
            }
            if ((index == 4))
            {
                return new AstTableConstraint.AstTableConstraint2(ctx, ((AstConstraintId)(list[0])), ((AstColumnNameList)(list[1])), ((AstForeignKeyOptions)(list[2])));
            }
            if ((index == 3))
            {
                return new AstTableConstraint.AstTableConstraint3(ctx, ((AstConstraintId)(list[0])), ((AstConnectionNodes)(list[1])));
            }
            if ((index == 4))
            {
                return new AstTableConstraint.AstTableConstraint4(ctx, ((AstConstraintId)(list[0])), ((AstStringtext)(list[1])), ((AstId)(list[2])));
            }
            if ((index == 3))
            {
                return new AstTableConstraint.AstTableConstraint5(ctx, ((AstConstraintId)(list[0])), ((AstId)(list[1])));
            }
            if ((index == 4))
            {
                return new AstTableConstraint.AstTableConstraint6(ctx, ((AstConstraintId)(list[0])), ((AstFunctionCall)(list[1])), ((AstId)(list[2])));
            }
            if ((index == 4))
            {
                return new AstTableConstraint.AstTableConstraint7(ctx, ((AstConstraintId)(list[0])), ((AstDecimal)(list[1])), ((AstId)(list[2])));
            }
            if ((index == 4))
            {
                return new AstTableConstraint.AstTableConstraint8(ctx, ((AstConstraintId)(list[0])), ((AstFullTableRef)(list[1])), ((AstId)(list[2])));
            }
            if ((index == 3))
            {
                return new AstTableConstraint.AstTableConstraint9(ctx, ((AstConstraintId)(list[0])), ((AstCheckConstraint)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstPrimaryKeyUnique), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstClustered), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstColumnNameListWithOrder), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstPrimaryKeyOptions), false, false))
                                {
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameList), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstForeignKeyOptions), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstId), false, false))
                        {
                            return 4;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFunctionCall), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstId), false, false))
                        {
                            return 6;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstId), false, false))
                        {
                            return 7;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFullTableRef), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstId), false, false))
                        {
                            return 8;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstConnectionNodes), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstConstraintId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstCheckConstraint), false, false))
                    {
                        return 9;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id primary_key_unique clustered? ( column_name_list_with_order ) primary_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstPrimaryKeyUnique primaryKeyUnique, AstClustered clustered, AstColumnNameListWithOrder columnNameListWithOrder, AstPrimaryKeyOptions primaryKeyOptions)
        {
            AstTableConstraint.AstTableConstraint1 result = new AstTableConstraint.AstTableConstraint1(ctx, constraintId, primaryKeyUnique, clustered, columnNameListWithOrder, primaryKeyOptions);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id FOREIGN KEY ( fk=column_name_list ) foreign_key_options 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstColumnNameList fk, AstForeignKeyOptions foreignKeyOptions)
        {
            AstTableConstraint.AstTableConstraint2 result = new AstTableConstraint.AstTableConstraint2(ctx, constraintId, fk, foreignKeyOptions);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id CONNECTION ( connection_nodes ) 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstConnectionNodes connectionNodes)
        {
            AstTableConstraint.AstTableConstraint3 result = new AstTableConstraint.AstTableConstraint3(ctx, constraintId, connectionNodes);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? stringtext RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstStringtext stringtext, AstId id)
        {
            AstTableConstraint.AstTableConstraint4 result = new AstTableConstraint.AstTableConstraint4(ctx, constraintId, stringtext, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? PLUS RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstId id)
        {
            AstTableConstraint.AstTableConstraint5 result = new AstTableConstraint.AstTableConstraint5(ctx, constraintId, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? function_call RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstFunctionCall functionCall, AstId id)
        {
            AstTableConstraint.AstTableConstraint6 result = new AstTableConstraint.AstTableConstraint6(ctx, constraintId, functionCall, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? decimal RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstDecimal @decimal, AstId id)
        {
            AstTableConstraint.AstTableConstraint7 result = new AstTableConstraint.AstTableConstraint7(ctx, constraintId, @decimal, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id DEFAULT LR_BRACKET? NEXT VALUE FOR full_table_ref RR_BRACKET? FOR id_ 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstFullTableRef fullTableRef, AstId id)
        {
            AstTableConstraint.AstTableConstraint8 result = new AstTableConstraint.AstTableConstraint8(ctx, constraintId, fullTableRef, id);
            return result;
        }
        
        /// <summary>
        /// table_constraint : 
        ///    CONSTRAINT constraint_id check_constraint 
        /// </summary>
        public static AstTableConstraint TableConstraint(ParserRuleContext ctx, AstConstraintId constraintId, AstCheckConstraint checkConstraint)
        {
            AstTableConstraint.AstTableConstraint9 result = new AstTableConstraint.AstTableConstraint9(ctx, constraintId, checkConstraint);
            return result;
        }
    }
    
    /// <summary>
    /// connection_node
    /// 	 : from_node_table = id_  TO  to_node_table = id_
    /// </summary>
    public partial class AstConnectionNode : AstBnfRule
    {
        
        protected static string _rule = "connection_node\r\n\t : from_node_table = id_  TO  to_node_table = id_";
        
        internal AstConnectionNode(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstConnectionNode(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstConnectionNode(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstConnectionNode(ParserRuleContext ctx, AstId fromNodeTable, AstId toNodeTable) : 
                base(ctx)
        {
            _fromNodeTable = fromNodeTable;
            _toNodeTable = toNodeTable;
        }
        
        public virtual AstId _fromNodeTable
        {
            get
            {
                return _fromNodeTable;
            }
        }
        
        public virtual AstId _toNodeTable
        {
            get
            {
                return _toNodeTable;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNode(this);
        }
        
        /// <summary>
        /// connection_node : 
        ///    from_node_table=id_ TO to_node_table=id_ 
        /// </summary>
        public static AstConnectionNode ConnectionNode(ParserRuleContext ctx, AstId fromNodeTable, AstId toNodeTable)
        {
            AstConnectionNode result = new AstConnectionNode(ctx, fromNodeTable, toNodeTable);
            return result;
        }
    }
    
    /// <summary>
    /// alter_table_index_option
    /// 	 : PAD_INDEX  EQUAL  on_off
    /// 	 | FILLFACTOR  EQUAL  decimal
    /// 	 | IGNORE_DUP_KEY  EQUAL  on_off
    /// 	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
    /// 	 | ALLOW_ROW_LOCKS  EQUAL  on_off
    /// 	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
    /// 	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
    /// 	 | SORT_IN_TEMPDB  EQUAL  on_off
    /// 	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
    /// 	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
    /// 	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// 	 | table_distribution
    /// 	 | ONLINE  EQUAL  online_value
    /// 	 | RESUMABLE  EQUAL  on_off
    /// 	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?
    /// </summary>
    public abstract partial class AstAlterTableIndexOption : AstBnfRule
    {
        
        protected static string _rule = @"alter_table_index_option
	 : PAD_INDEX  EQUAL  on_off
	 | FILLFACTOR  EQUAL  decimal
	 | IGNORE_DUP_KEY  EQUAL  on_off
	 | STATISTICS_NORECOMPUTE  EQUAL  on_off
	 | ALLOW_ROW_LOCKS  EQUAL  on_off
	 | ALLOW_PAGE_LOCKS  EQUAL  on_off
	 | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
	 | SORT_IN_TEMPDB  EQUAL  on_off
	 | MAXDOP  EQUAL  max_degree_of_parallelism = decimal
	 | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions?
	 | XML_COMPRESSION  EQUAL  on_off  on_partitions?
	 | table_distribution
	 | ONLINE  EQUAL  online_value
	 | RESUMABLE  EQUAL  on_off
	 | MAX_DURATION  EQUAL  times = decimal  MINUTES?";
        
        /// <summary>
        /// alter_table_index_option : PAD_INDEX EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption1 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption1(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : FILLFACTOR EQUAL decimal 
        /// </summary>
        public partial class AstAlterTableIndexOption2 : AstAlterTableIndexOption
        {
            
            private AstDecimal _decimal;
            
            internal AstAlterTableIndexOption2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : IGNORE_DUP_KEY EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption3 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : STATISTICS_NORECOMPUTE EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption4 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ALLOW_ROW_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption5 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ALLOW_PAGE_LOCKS EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption6 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption6(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : OPTIMIZE_FOR_SEQUENTIAL_KEY EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption7 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : SORT_IN_TEMPDB EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption8 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : MAXDOP EQUAL max_degree_of_parallelism=decimal 
        /// </summary>
        public partial class AstAlterTableIndexOption9 : AstAlterTableIndexOption
        {
            
            private AstDecimal _maxDegreeOfParallelism;
            
            internal AstAlterTableIndexOption9(ParserRuleContext ctx, AstDecimal maxDegreeOfParallelism) : 
                    base(ctx)
            {
                _maxDegreeOfParallelism = maxDegreeOfParallelism;
            }
            
            public virtual AstDecimal MaxDegreeOfParallelism
            {
                get
                {
                    return _maxDegreeOfParallelism;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public partial class AstAlterTableIndexOption10 : AstAlterTableIndexOption
        {
            
            private AstIndexStrategy _indexStrategy;
            
            private AstOnPartitions _onPartitions;
            
            internal AstAlterTableIndexOption10(ParserRuleContext ctx, AstIndexStrategy indexStrategy, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _indexStrategy = indexStrategy;
                _onPartitions = onPartitions;
            }
            
            public virtual AstIndexStrategy IndexStrategy
            {
                get
                {
                    return _indexStrategy;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public partial class AstAlterTableIndexOption11 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            private AstOnPartitions _onPartitions;
            
            internal AstAlterTableIndexOption11(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions) : 
                    base(ctx)
            {
                _onOff = onOff;
                _onPartitions = onPartitions;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public virtual AstOnPartitions OnPartitions
            {
                get
                {
                    return _onPartitions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : table_distribution 
        /// </summary>
        public partial class AstAlterTableIndexOption12 : AstAlterTableIndexOption
        {
            
            private AstTableDistribution _tableDistribution;
            
            internal AstAlterTableIndexOption12(ParserRuleContext ctx, AstTableDistribution tableDistribution) : 
                    base(ctx)
            {
                _tableDistribution = tableDistribution;
            }
            
            public virtual AstTableDistribution TableDistribution
            {
                get
                {
                    return _tableDistribution;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : ONLINE EQUAL online_value 
        /// </summary>
        public partial class AstAlterTableIndexOption13 : AstAlterTableIndexOption
        {
            
            private AstOnlineValue _onlineValue;
            
            internal AstAlterTableIndexOption13(ParserRuleContext ctx, AstOnlineValue onlineValue) : 
                    base(ctx)
            {
                _onlineValue = onlineValue;
            }
            
            public virtual AstOnlineValue OnlineValue
            {
                get
                {
                    return _onlineValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : RESUMABLE EQUAL on_off 
        /// </summary>
        public partial class AstAlterTableIndexOption14 : AstAlterTableIndexOption
        {
            
            private AstOnOff _onOff;
            
            internal AstAlterTableIndexOption14(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        /// <summary>
        /// alter_table_index_option : MAX_DURATION EQUAL times=decimal MINUTES? 
        /// </summary>
        public partial class AstAlterTableIndexOption15 : AstAlterTableIndexOption
        {
            
            private AstDecimal _times;
            
            internal AstAlterTableIndexOption15(ParserRuleContext ctx, AstDecimal times) : 
                    base(ctx)
            {
                _times = times;
            }
            
            public virtual AstDecimal Times
            {
                get
                {
                    return _times;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAlterTableIndexOption(this);
            }
        }
        

        
        internal AstAlterTableIndexOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAlterTableIndexOption(Position p) : 
                base(p)
        {
        }
        
        internal AstAlterTableIndexOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAlterTableIndexOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAlterTableIndexOption.Resolve(list);
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption1(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption3(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption5(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption6(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption7(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption8(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption9(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 3))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption10(ctx, ((AstIndexStrategy)(list[0])), ((AstOnPartitions)(list[1])));
            }
            if ((index == 3))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption11(ctx, ((AstOnOff)(list[0])), ((AstOnPartitions)(list[1])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption12(ctx, ((AstTableDistribution)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption13(ctx, ((AstOnlineValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption14(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAlterTableIndexOption.AstAlterTableIndexOption15(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexStrategy), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 10;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnPartitions), false, false))
                    {
                        return 11;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableDistribution), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnlineValue), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 15;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption1 result = new AstAlterTableIndexOption.AstAlterTableIndexOption1(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption2 result = new AstAlterTableIndexOption.AstAlterTableIndexOption2(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstIndexStrategy indexStrategy, AstOnPartitions onPartitions)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption10 result = new AstAlterTableIndexOption.AstAlterTableIndexOption10(ctx, indexStrategy, onPartitions);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstOnOff onOff, AstOnPartitions onPartitions)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption11 result = new AstAlterTableIndexOption.AstAlterTableIndexOption11(ctx, onOff, onPartitions);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    table_distribution 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstTableDistribution tableDistribution)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption12 result = new AstAlterTableIndexOption.AstAlterTableIndexOption12(ctx, tableDistribution);
            return result;
        }
        
        /// <summary>
        /// alter_table_index_option : 
        ///    ONLINE EQUAL online_value 
        /// </summary>
        public static AstAlterTableIndexOption AlterTableIndexOption(ParserRuleContext ctx, AstOnlineValue onlineValue)
        {
            AstAlterTableIndexOption.AstAlterTableIndexOption13 result = new AstAlterTableIndexOption.AstAlterTableIndexOption13(ctx, onlineValue);
            return result;
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partial
    /// 	 : local_global
    /// 	 | declare_set_cursor_common_partial_enum
    /// </summary>
    public abstract partial class AstDeclareSetCursorCommonPartial : AstBnfRule
    {
        
        protected static string _rule = "declare_set_cursor_common_partial\r\n\t : local_global\r\n\t | declare_set_cursor_commo" +
            "n_partial_enum";
        
        /// <summary>
        /// declare_set_cursor_common_partial : local_global 
        /// </summary>
        public partial class AstDeclareSetCursorCommonPartial1 : AstDeclareSetCursorCommonPartial
        {
            
            private AstLocalGlobal _localGlobal;
            
            internal AstDeclareSetCursorCommonPartial1(ParserRuleContext ctx, AstLocalGlobal localGlobal) : 
                    base(ctx)
            {
                _localGlobal = localGlobal;
            }
            
            public virtual AstLocalGlobal LocalGlobal
            {
                get
                {
                    return _localGlobal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareSetCursorCommonPartial(this);
            }
        }
        /// <summary>
        /// declare_set_cursor_common_partial : declare_set_cursor_common_partial_enum 
        /// </summary>
        public partial class AstDeclareSetCursorCommonPartial2 : AstDeclareSetCursorCommonPartial
        {
            
            private AstDeclareSetCursorCommonPartialEnum _declareSetCursorCommonPartialEnum;
            
            internal AstDeclareSetCursorCommonPartial2(ParserRuleContext ctx, AstDeclareSetCursorCommonPartialEnum declareSetCursorCommonPartialEnum) : 
                    base(ctx)
            {
                _declareSetCursorCommonPartialEnum = declareSetCursorCommonPartialEnum;
            }
            
            public virtual AstDeclareSetCursorCommonPartialEnum DeclareSetCursorCommonPartialEnum
            {
                get
                {
                    return _declareSetCursorCommonPartialEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDeclareSetCursorCommonPartial(this);
            }
        }
        

        
        internal AstDeclareSetCursorCommonPartial(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(Position p) : 
                base(p)
        {
        }
        
        internal AstDeclareSetCursorCommonPartial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDeclareSetCursorCommonPartial Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDeclareSetCursorCommonPartial.Resolve(list);
            if ((index == 2))
            {
                return new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1(ctx, ((AstLocalGlobal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2(ctx, ((AstDeclareSetCursorCommonPartialEnum)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalGlobal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeclareSetCursorCommonPartialEnum), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial : 
        ///    local_global 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(ParserRuleContext ctx, AstLocalGlobal localGlobal)
        {
            AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1 result = new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial1(ctx, localGlobal);
            return result;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial : 
        ///    declare_set_cursor_common_partial_enum 
        /// </summary>
        public static AstDeclareSetCursorCommonPartial DeclareSetCursorCommonPartial(ParserRuleContext ctx, AstDeclareSetCursorCommonPartialEnum declareSetCursorCommonPartialEnum)
        {
            AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2 result = new AstDeclareSetCursorCommonPartial.AstDeclareSetCursorCommonPartial2(ctx, declareSetCursorCommonPartialEnum);
            return result;
        }
    }
    
    /// <summary>
    /// set_special
    /// 	 : SET  left = id_  set_special_set_value
    /// 	 | SET  STATISTICS  statistic_kind  statistics = on_off
    /// 	 | SET  ROWCOUNT  local_id_decimal
    /// 	 | SET  TEXTSIZE  decimal
    /// 	 | SET  TRANSACTION  ISOLATION  LEVEL  transaction_level
    /// 	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off
    /// 	 | SET  special_lists  list = on_off
    /// 	 | SET  modify_method
    /// </summary>
    public abstract partial class AstSetSpecial : AstBnfRule
    {
        
        protected static string _rule = @"set_special
	 : SET  left = id_  set_special_set_value
	 | SET  STATISTICS  statistic_kind  statistics = on_off
	 | SET  ROWCOUNT  local_id_decimal
	 | SET  TEXTSIZE  decimal
	 | SET  TRANSACTION  ISOLATION  LEVEL  transaction_level
	 | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off
	 | SET  special_lists  list = on_off
	 | SET  modify_method";
        
        /// <summary>
        /// set_special : SET left=id_ set_special_set_value 
        /// </summary>
        public partial class AstSetSpecial1 : AstSetSpecial
        {
            
            private AstId _left;
            
            private AstSetSpecialSetValue _setSpecialSetValue;
            
            internal AstSetSpecial1(ParserRuleContext ctx, AstId left, AstSetSpecialSetValue setSpecialSetValue) : 
                    base(ctx)
            {
                _left = left;
                _setSpecialSetValue = setSpecialSetValue;
            }
            
            public virtual AstId Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstSetSpecialSetValue SetSpecialSetValue
            {
                get
                {
                    return _setSpecialSetValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET STATISTICS statistic_kind statistics=on_off 
        /// </summary>
        public partial class AstSetSpecial2 : AstSetSpecial
        {
            
            private AstStatisticKind _statisticKind;
            
            private AstOnOff _statistics;
            
            internal AstSetSpecial2(ParserRuleContext ctx, AstStatisticKind statisticKind, AstOnOff statistics) : 
                    base(ctx)
            {
                _statisticKind = statisticKind;
                _statistics = statistics;
            }
            
            public virtual AstStatisticKind StatisticKind
            {
                get
                {
                    return _statisticKind;
                }
            }
            
            public virtual AstOnOff Statistics
            {
                get
                {
                    return _statistics;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET ROWCOUNT local_id_decimal 
        /// </summary>
        public partial class AstSetSpecial3 : AstSetSpecial
        {
            
            private AstLocalIdDecimal _localIdDecimal;
            
            internal AstSetSpecial3(ParserRuleContext ctx, AstLocalIdDecimal localIdDecimal) : 
                    base(ctx)
            {
                _localIdDecimal = localIdDecimal;
            }
            
            public virtual AstLocalIdDecimal LocalIdDecimal
            {
                get
                {
                    return _localIdDecimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET TEXTSIZE decimal 
        /// </summary>
        public partial class AstSetSpecial4 : AstSetSpecial
        {
            
            private AstDecimal _decimal;
            
            internal AstSetSpecial4(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET TRANSACTION ISOLATION LEVEL transaction_level 
        /// </summary>
        public partial class AstSetSpecial5 : AstSetSpecial
        {
            
            private AstTransactionLevel _transactionLevel;
            
            internal AstSetSpecial5(ParserRuleContext ctx, AstTransactionLevel transactionLevel) : 
                    base(ctx)
            {
                _transactionLevel = transactionLevel;
            }
            
            public virtual AstTransactionLevel TransactionLevel
            {
                get
                {
                    return _transactionLevel;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET IDENTITY_INSERT full_table_ref identity_insert=on_off 
        /// </summary>
        public partial class AstSetSpecial6 : AstSetSpecial
        {
            
            private AstFullTableRef _fullTableRef;
            
            private AstOnOff _identityInsert;
            
            internal AstSetSpecial6(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstOnOff identityInsert) : 
                    base(ctx)
            {
                _fullTableRef = fullTableRef;
                _identityInsert = identityInsert;
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public virtual AstOnOff IdentityInsert
            {
                get
                {
                    return _identityInsert;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET special_lists list=on_off 
        /// </summary>
        public partial class AstSetSpecial7 : AstSetSpecial
        {
            
            private AstSpecialLists _specialLists;
            
            private AstOnOff _list;
            
            internal AstSetSpecial7(ParserRuleContext ctx, AstSpecialLists specialLists, AstOnOff list) : 
                    base(ctx)
            {
                _specialLists = specialLists;
                _list = list;
            }
            
            public virtual AstSpecialLists SpecialLists
            {
                get
                {
                    return _specialLists;
                }
            }
            
            public virtual AstOnOff List
            {
                get
                {
                    return _list;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        /// <summary>
        /// set_special : SET modify_method 
        /// </summary>
        public partial class AstSetSpecial8 : AstSetSpecial
        {
            
            private AstModifyMethod _modifyMethod;
            
            internal AstSetSpecial8(ParserRuleContext ctx, AstModifyMethod modifyMethod) : 
                    base(ctx)
            {
                _modifyMethod = modifyMethod;
            }
            
            public virtual AstModifyMethod ModifyMethod
            {
                get
                {
                    return _modifyMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecial(this);
            }
        }
        

        
        internal AstSetSpecial(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecial(Position p) : 
                base(p)
        {
        }
        
        internal AstSetSpecial(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSetSpecial Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSetSpecial.Resolve(list);
            if ((index == 3))
            {
                return new AstSetSpecial.AstSetSpecial1(ctx, ((AstId)(list[0])), ((AstSetSpecialSetValue)(list[1])));
            }
            if ((index == 3))
            {
                return new AstSetSpecial.AstSetSpecial2(ctx, ((AstStatisticKind)(list[0])), ((AstOnOff)(list[1])));
            }
            if ((index == 2))
            {
                return new AstSetSpecial.AstSetSpecial3(ctx, ((AstLocalIdDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetSpecial.AstSetSpecial4(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetSpecial.AstSetSpecial5(ctx, ((AstTransactionLevel)(list[0])));
            }
            if ((index == 3))
            {
                return new AstSetSpecial.AstSetSpecial6(ctx, ((AstFullTableRef)(list[0])), ((AstOnOff)(list[1])));
            }
            if ((index == 3))
            {
                return new AstSetSpecial.AstSetSpecial7(ctx, ((AstSpecialLists)(list[0])), ((AstOnOff)(list[1])));
            }
            if ((index == 2))
            {
                return new AstSetSpecial.AstSetSpecial8(ctx, ((AstModifyMethod)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSetSpecialSetValue), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstStatisticKind), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        return 6;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSpecialLists), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOnOff), false, false))
                    {
                        return 7;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalIdDecimal), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstTransactionLevel), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstModifyMethod), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET left=id_ set_special_set_value 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstId left, AstSetSpecialSetValue setSpecialSetValue)
        {
            AstSetSpecial.AstSetSpecial1 result = new AstSetSpecial.AstSetSpecial1(ctx, left, setSpecialSetValue);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET STATISTICS statistic_kind statistics=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstStatisticKind statisticKind, AstOnOff statistics)
        {
            AstSetSpecial.AstSetSpecial2 result = new AstSetSpecial.AstSetSpecial2(ctx, statisticKind, statistics);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET ROWCOUNT local_id_decimal 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstLocalIdDecimal localIdDecimal)
        {
            AstSetSpecial.AstSetSpecial3 result = new AstSetSpecial.AstSetSpecial3(ctx, localIdDecimal);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET TEXTSIZE decimal 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSetSpecial.AstSetSpecial4 result = new AstSetSpecial.AstSetSpecial4(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET TRANSACTION ISOLATION LEVEL transaction_level 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstTransactionLevel transactionLevel)
        {
            AstSetSpecial.AstSetSpecial5 result = new AstSetSpecial.AstSetSpecial5(ctx, transactionLevel);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET IDENTITY_INSERT full_table_ref identity_insert=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstOnOff identityInsert)
        {
            AstSetSpecial.AstSetSpecial6 result = new AstSetSpecial.AstSetSpecial6(ctx, fullTableRef, identityInsert);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET special_lists list=on_off 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstSpecialLists specialLists, AstOnOff list)
        {
            AstSetSpecial.AstSetSpecial7 result = new AstSetSpecial.AstSetSpecial7(ctx, specialLists, list);
            return result;
        }
        
        /// <summary>
        /// set_special : 
        ///    SET modify_method 
        /// </summary>
        public static AstSetSpecial SetSpecial(ParserRuleContext ctx, AstModifyMethod modifyMethod)
        {
            AstSetSpecial.AstSetSpecial8 result = new AstSetSpecial.AstSetSpecial8(ctx, modifyMethod);
            return result;
        }
    }
    
    /// <summary>
    /// transaction_level
    /// 	 : transaction_isolation
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstTransactionLevel : AstBnfRule
    {
        
        protected static string _rule = "transaction_level\r\n\t : transaction_isolation\r\n\t | decimal";
        
        /// <summary>
        /// transaction_level : transaction_isolation 
        /// </summary>
        public partial class AstTransactionLevel1 : AstTransactionLevel
        {
            
            private AstTransactionIsolation _transactionIsolation;
            
            internal AstTransactionLevel1(ParserRuleContext ctx, AstTransactionIsolation transactionIsolation) : 
                    base(ctx)
            {
                _transactionIsolation = transactionIsolation;
            }
            
            public virtual AstTransactionIsolation TransactionIsolation
            {
                get
                {
                    return _transactionIsolation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionLevel(this);
            }
        }
        /// <summary>
        /// transaction_level : decimal 
        /// </summary>
        public partial class AstTransactionLevel2 : AstTransactionLevel
        {
            
            private AstDecimal _decimal;
            
            internal AstTransactionLevel2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTransactionLevel(this);
            }
        }
        

        
        internal AstTransactionLevel(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTransactionLevel(Position p) : 
                base(p)
        {
        }
        
        internal AstTransactionLevel(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTransactionLevel Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTransactionLevel.Resolve(list);
            if ((index == 2))
            {
                return new AstTransactionLevel.AstTransactionLevel1(ctx, ((AstTransactionIsolation)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTransactionLevel.AstTransactionLevel2(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTransactionIsolation), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// transaction_level : 
        ///    transaction_isolation 
        /// </summary>
        public static AstTransactionLevel TransactionLevel(ParserRuleContext ctx, AstTransactionIsolation transactionIsolation)
        {
            AstTransactionLevel.AstTransactionLevel1 result = new AstTransactionLevel.AstTransactionLevel1(ctx, transactionIsolation);
            return result;
        }
        
        /// <summary>
        /// transaction_level : 
        ///    decimal 
        /// </summary>
        public static AstTransactionLevel TransactionLevel(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTransactionLevel.AstTransactionLevel2 result = new AstTransactionLevel.AstTransactionLevel2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// local_id_decimal
    /// 	 : local_id
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstLocalIdDecimal : AstBnfRule
    {
        
        protected static string _rule = "local_id_decimal\r\n\t : local_id\r\n\t | decimal";
        
        /// <summary>
        /// local_id_decimal : local_id 
        /// </summary>
        public partial class AstLocalIdDecimal1 : AstLocalIdDecimal
        {
            
            private AstLocalId _localId;
            
            internal AstLocalIdDecimal1(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLocalIdDecimal(this);
            }
        }
        /// <summary>
        /// local_id_decimal : decimal 
        /// </summary>
        public partial class AstLocalIdDecimal2 : AstLocalIdDecimal
        {
            
            private AstDecimal _decimal;
            
            internal AstLocalIdDecimal2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitLocalIdDecimal(this);
            }
        }
        

        
        internal AstLocalIdDecimal(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstLocalIdDecimal(Position p) : 
                base(p)
        {
        }
        
        internal AstLocalIdDecimal(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstLocalIdDecimal Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstLocalIdDecimal.Resolve(list);
            if ((index == 2))
            {
                return new AstLocalIdDecimal.AstLocalIdDecimal1(ctx, ((AstLocalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstLocalIdDecimal.AstLocalIdDecimal2(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// local_id_decimal : 
        ///    local_id 
        /// </summary>
        public static AstLocalIdDecimal LocalIdDecimal(ParserRuleContext ctx, AstLocalId localId)
        {
            AstLocalIdDecimal.AstLocalIdDecimal1 result = new AstLocalIdDecimal.AstLocalIdDecimal1(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// local_id_decimal : 
        ///    decimal 
        /// </summary>
        public static AstLocalIdDecimal LocalIdDecimal(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstLocalIdDecimal.AstLocalIdDecimal2 result = new AstLocalIdDecimal.AstLocalIdDecimal2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// set_special_set_value
    /// 	 : id_
    /// 	 | constant_local_id
    /// 	 | on_off
    /// </summary>
    public abstract partial class AstSetSpecialSetValue : AstBnfRule
    {
        
        protected static string _rule = "set_special_set_value\r\n\t : id_\r\n\t | constant_local_id\r\n\t | on_off";
        
        /// <summary>
        /// set_special_set_value : id_ 
        /// </summary>
        public partial class AstSetSpecialSetValue1 : AstSetSpecialSetValue
        {
            
            private AstId _id;
            
            internal AstSetSpecialSetValue1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecialSetValue(this);
            }
        }
        /// <summary>
        /// set_special_set_value : constant_local_id 
        /// </summary>
        public partial class AstSetSpecialSetValue2 : AstSetSpecialSetValue
        {
            
            private AstConstantLocalId _constantLocalId;
            
            internal AstSetSpecialSetValue2(ParserRuleContext ctx, AstConstantLocalId constantLocalId) : 
                    base(ctx)
            {
                _constantLocalId = constantLocalId;
            }
            
            public virtual AstConstantLocalId ConstantLocalId
            {
                get
                {
                    return _constantLocalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecialSetValue(this);
            }
        }
        /// <summary>
        /// set_special_set_value : on_off 
        /// </summary>
        public partial class AstSetSpecialSetValue3 : AstSetSpecialSetValue
        {
            
            private AstOnOff _onOff;
            
            internal AstSetSpecialSetValue3(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSetSpecialSetValue(this);
            }
        }
        

        
        internal AstSetSpecialSetValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSetSpecialSetValue(Position p) : 
                base(p)
        {
        }
        
        internal AstSetSpecialSetValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSetSpecialSetValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSetSpecialSetValue.Resolve(list);
            if ((index == 2))
            {
                return new AstSetSpecialSetValue.AstSetSpecialSetValue1(ctx, ((AstId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetSpecialSetValue.AstSetSpecialSetValue2(ctx, ((AstConstantLocalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSetSpecialSetValue.AstSetSpecialSetValue3(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstConstantLocalId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    id_ 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(ParserRuleContext ctx, AstId id)
        {
            AstSetSpecialSetValue.AstSetSpecialSetValue1 result = new AstSetSpecialSetValue.AstSetSpecialSetValue1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    constant_local_id 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(ParserRuleContext ctx, AstConstantLocalId constantLocalId)
        {
            AstSetSpecialSetValue.AstSetSpecialSetValue2 result = new AstSetSpecialSetValue.AstSetSpecialSetValue2(ctx, constantLocalId);
            return result;
        }
        
        /// <summary>
        /// set_special_set_value : 
        ///    on_off 
        /// </summary>
        public static AstSetSpecialSetValue SetSpecialSetValue(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstSetSpecialSetValue.AstSetSpecialSetValue3 result = new AstSetSpecialSetValue.AstSetSpecialSetValue3(ctx, onOff);
            return result;
        }
    }
    
    /// <summary>
    /// constant_local_id
    /// 	 : constant
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstConstantLocalId : AstBnfRule
    {
        
        protected static string _rule = "constant_local_id\r\n\t : constant\r\n\t | local_id";
        
        /// <summary>
        /// constant_local_id : constant 
        /// </summary>
        public partial class AstConstantLocalId1 : AstConstantLocalId
        {
            
            private AstConstant _constant;
            
            internal AstConstantLocalId1(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantLocalId(this);
            }
        }
        /// <summary>
        /// constant_local_id : local_id 
        /// </summary>
        public partial class AstConstantLocalId2 : AstConstantLocalId
        {
            
            private AstLocalId _localId;
            
            internal AstConstantLocalId2(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantLocalId(this);
            }
        }
        

        
        internal AstConstantLocalId(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstantLocalId(Position p) : 
                base(p)
        {
        }
        
        internal AstConstantLocalId(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstantLocalId Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstantLocalId.Resolve(list);
            if ((index == 2))
            {
                return new AstConstantLocalId.AstConstantLocalId1(ctx, ((AstConstant)(list[0])));
            }
            if ((index == 2))
            {
                return new AstConstantLocalId.AstConstantLocalId2(ctx, ((AstLocalId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// constant_local_id : 
        ///    constant 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(ParserRuleContext ctx, AstConstant constant)
        {
            AstConstantLocalId.AstConstantLocalId1 result = new AstConstantLocalId.AstConstantLocalId1(ctx, constant);
            return result;
        }
        
        /// <summary>
        /// constant_local_id : 
        ///    local_id 
        /// </summary>
        public static AstConstantLocalId ConstantLocalId(ParserRuleContext ctx, AstLocalId localId)
        {
            AstConstantLocalId.AstConstantLocalId2 result = new AstConstantLocalId.AstConstantLocalId2(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// expression
    /// 	 : primitive_expression
    /// 	 | function_call
    /// 	 | expression  DOT  expression_chained
    /// 	 | expression  DOT  hierarchyid_call
    /// 	 | expression  COLLATE  id_
    /// 	 | case_expression
    /// 	 | full_column_name
    /// 	 | bracket_expression
    /// 	 | unary_operator_expression
    /// 	 | left = expression  op = expression_operator  right = expression
    /// 	 | expression  time_zone
    /// 	 | over_clause
    /// 	 | DOLLAR_ACTION
    /// </summary>
    public abstract partial class AstExpression : AstBnfRule
    {
        
        protected static string _rule = @"expression
	 : primitive_expression
	 | function_call
	 | expression  DOT  expression_chained
	 | expression  DOT  hierarchyid_call
	 | expression  COLLATE  id_
	 | case_expression
	 | full_column_name
	 | bracket_expression
	 | unary_operator_expression
	 | left = expression  op = expression_operator  right = expression
	 | expression  time_zone
	 | over_clause
	 | DOLLAR_ACTION";
        
        /// <summary>
        /// expression : primitive_expression 
        /// </summary>
        public partial class AstExpression1 : AstExpression
        {
            
            private AstPrimitiveExpression _primitiveExpression;
            
            internal AstExpression1(ParserRuleContext ctx, AstPrimitiveExpression primitiveExpression) : 
                    base(ctx)
            {
                _primitiveExpression = primitiveExpression;
            }
            
            public virtual AstPrimitiveExpression PrimitiveExpression
            {
                get
                {
                    return _primitiveExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : function_call 
        /// </summary>
        public partial class AstExpression2 : AstExpression
        {
            
            private AstFunctionCall _functionCall;
            
            internal AstExpression2(ParserRuleContext ctx, AstFunctionCall functionCall) : 
                    base(ctx)
            {
                _functionCall = functionCall;
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression DOT expression_chained 
        /// </summary>
        public partial class AstExpression3 : AstExpression
        {
            
            private AstExpression _expression;
            
            private AstExpressionChained _expressionChained;
            
            internal AstExpression3(ParserRuleContext ctx, AstExpression expression, AstExpressionChained expressionChained) : 
                    base(ctx)
            {
                _expression = expression;
                _expressionChained = expressionChained;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstExpressionChained ExpressionChained
            {
                get
                {
                    return _expressionChained;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression DOT hierarchyid_call 
        /// </summary>
        public partial class AstExpression4 : AstExpression
        {
            
            private AstExpression _expression;
            
            private AstHierarchyidCall _hierarchyidCall;
            
            internal AstExpression4(ParserRuleContext ctx, AstExpression expression, AstHierarchyidCall hierarchyidCall) : 
                    base(ctx)
            {
                _expression = expression;
                _hierarchyidCall = hierarchyidCall;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstHierarchyidCall HierarchyidCall
            {
                get
                {
                    return _hierarchyidCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression COLLATE id_ 
        /// </summary>
        public partial class AstExpression5 : AstExpression
        {
            
            private AstExpression _expression;
            
            private AstId _id;
            
            internal AstExpression5(ParserRuleContext ctx, AstExpression expression, AstId id) : 
                    base(ctx)
            {
                _expression = expression;
                _id = id;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : case_expression 
        /// </summary>
        public partial class AstExpression6 : AstExpression
        {
            
            private AstCaseExpression _caseExpression;
            
            internal AstExpression6(ParserRuleContext ctx, AstCaseExpression caseExpression) : 
                    base(ctx)
            {
                _caseExpression = caseExpression;
            }
            
            public virtual AstCaseExpression CaseExpression
            {
                get
                {
                    return _caseExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : full_column_name 
        /// </summary>
        public partial class AstExpression7 : AstExpression
        {
            
            private AstFullColumnName _fullColumnName;
            
            internal AstExpression7(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : bracket_expression 
        /// </summary>
        public partial class AstExpression8 : AstExpression
        {
            
            private AstBracketExpression _bracketExpression;
            
            internal AstExpression8(ParserRuleContext ctx, AstBracketExpression bracketExpression) : 
                    base(ctx)
            {
                _bracketExpression = bracketExpression;
            }
            
            public virtual AstBracketExpression BracketExpression
            {
                get
                {
                    return _bracketExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : unary_operator_expression 
        /// </summary>
        public partial class AstExpression9 : AstExpression
        {
            
            private AstUnaryOperatorExpression _unaryOperatorExpression;
            
            internal AstExpression9(ParserRuleContext ctx, AstUnaryOperatorExpression unaryOperatorExpression) : 
                    base(ctx)
            {
                _unaryOperatorExpression = unaryOperatorExpression;
            }
            
            public virtual AstUnaryOperatorExpression UnaryOperatorExpression
            {
                get
                {
                    return _unaryOperatorExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : left=expression op=expression_operator right=expression 
        /// </summary>
        public partial class AstExpression10 : AstExpression
        {
            
            private AstExpression _left;
            
            private AstExpressionOperator _op;
            
            private AstExpression _right;
            
            internal AstExpression10(ParserRuleContext ctx, AstExpression left, AstExpressionOperator op, AstExpression right) : 
                    base(ctx)
            {
                _left = left;
                _op = op;
                _right = right;
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpressionOperator Op
            {
                get
                {
                    return _op;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : expression time_zone 
        /// </summary>
        public partial class AstExpression11 : AstExpression
        {
            
            private AstExpression _expression;
            
            private AstTimeZone _timeZone;
            
            internal AstExpression11(ParserRuleContext ctx, AstExpression expression, AstTimeZone timeZone) : 
                    base(ctx)
            {
                _expression = expression;
                _timeZone = timeZone;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstTimeZone TimeZone
            {
                get
                {
                    return _timeZone;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : over_clause 
        /// </summary>
        public partial class AstExpression12 : AstExpression
        {
            
            private AstOverClause _overClause;
            
            internal AstExpression12(ParserRuleContext ctx, AstOverClause overClause) : 
                    base(ctx)
            {
                _overClause = overClause;
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        /// <summary>
        /// expression : DOLLAR_ACTION 
        /// </summary>
        public partial class AstExpression13 : AstExpression
        {
            
            internal AstExpression13(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpression(this);
            }
        }
        

        
        internal AstExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExpression.Resolve(list);
            if ((index == 2))
            {
                return new AstExpression.AstExpression1(ctx, ((AstPrimitiveExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExpression.AstExpression2(ctx, ((AstFunctionCall)(list[0])));
            }
            if ((index == 3))
            {
                return new AstExpression.AstExpression3(ctx, ((AstExpression)(list[0])), ((AstExpressionChained)(list[1])));
            }
            if ((index == 3))
            {
                return new AstExpression.AstExpression4(ctx, ((AstExpression)(list[0])), ((AstHierarchyidCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstExpression.AstExpression5(ctx, ((AstExpression)(list[0])), ((AstId)(list[1])));
            }
            if ((index == 2))
            {
                return new AstExpression.AstExpression6(ctx, ((AstCaseExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExpression.AstExpression7(ctx, ((AstFullColumnName)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExpression.AstExpression8(ctx, ((AstBracketExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExpression.AstExpression9(ctx, ((AstUnaryOperatorExpression)(list[0])));
            }
            if ((index == 4))
            {
                return new AstExpression.AstExpression10(ctx, ((AstExpression)(list[0])), ((AstExpressionOperator)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 3))
            {
                return new AstExpression.AstExpression11(ctx, ((AstExpression)(list[0])), ((AstTimeZone)(list[1])));
            }
            if ((index == 2))
            {
                return new AstExpression.AstExpression12(ctx, ((AstOverClause)(list[0])));
            }
            if ((index == 1))
            {
                return new AstExpression.AstExpression13(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 10;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionChained), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstHierarchyidCall), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstTimeZone), false, false))
                    {
                        return 11;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPrimitiveExpression), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstCaseExpression), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstBracketExpression), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstUnaryOperatorExpression), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstOverClause), false, false))
                {
                    return 12;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// expression : 
        ///    primitive_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstPrimitiveExpression primitiveExpression)
        {
            AstExpression.AstExpression1 result = new AstExpression.AstExpression1(ctx, primitiveExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    function_call 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstFunctionCall functionCall)
        {
            AstExpression.AstExpression2 result = new AstExpression.AstExpression2(ctx, functionCall);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . expression_chained 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstExpressionChained expressionChained)
        {
            AstExpression.AstExpression3 result = new AstExpression.AstExpression3(ctx, expression, expressionChained);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression . hierarchyid_call 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstHierarchyidCall hierarchyidCall)
        {
            AstExpression.AstExpression4 result = new AstExpression.AstExpression4(ctx, expression, hierarchyidCall);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression COLLATE id_ 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstId id)
        {
            AstExpression.AstExpression5 result = new AstExpression.AstExpression5(ctx, expression, id);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    case_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstCaseExpression caseExpression)
        {
            AstExpression.AstExpression6 result = new AstExpression.AstExpression6(ctx, caseExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    full_column_name 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstExpression.AstExpression7 result = new AstExpression.AstExpression7(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    bracket_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstBracketExpression bracketExpression)
        {
            AstExpression.AstExpression8 result = new AstExpression.AstExpression8(ctx, bracketExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    unary_operator_expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstUnaryOperatorExpression unaryOperatorExpression)
        {
            AstExpression.AstExpression9 result = new AstExpression.AstExpression9(ctx, unaryOperatorExpression);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    left=expression op=expression_operator right=expression 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression left, AstExpressionOperator op, AstExpression right)
        {
            AstExpression.AstExpression10 result = new AstExpression.AstExpression10(ctx, left, op, right);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    expression time_zone 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstExpression expression, AstTimeZone timeZone)
        {
            AstExpression.AstExpression11 result = new AstExpression.AstExpression11(ctx, expression, timeZone);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    over_clause 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx, AstOverClause overClause)
        {
            AstExpression.AstExpression12 result = new AstExpression.AstExpression12(ctx, overClause);
            return result;
        }
        
        /// <summary>
        /// expression : 
        ///    DOLLAR_ACTION 
        /// </summary>
        public static AstExpression Expression(ParserRuleContext ctx)
        {
            AstExpression.AstExpression13 result = new AstExpression.AstExpression13(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// expression_chained
    /// 	 : value_call
    /// 	 | query_call
    /// 	 | exist_call
    /// 	 | modify_call
    /// </summary>
    public abstract partial class AstExpressionChained : AstBnfRule
    {
        
        protected static string _rule = "expression_chained\r\n\t : value_call\r\n\t | query_call\r\n\t | exist_call\r\n\t | modify_ca" +
            "ll";
        
        /// <summary>
        /// expression_chained : value_call 
        /// </summary>
        public partial class AstExpressionChained1 : AstExpressionChained
        {
            
            private AstValueCall _valueCall;
            
            internal AstExpressionChained1(ParserRuleContext ctx, AstValueCall valueCall) : 
                    base(ctx)
            {
                _valueCall = valueCall;
            }
            
            public virtual AstValueCall ValueCall
            {
                get
                {
                    return _valueCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        /// <summary>
        /// expression_chained : query_call 
        /// </summary>
        public partial class AstExpressionChained2 : AstExpressionChained
        {
            
            private AstQueryCall _queryCall;
            
            internal AstExpressionChained2(ParserRuleContext ctx, AstQueryCall queryCall) : 
                    base(ctx)
            {
                _queryCall = queryCall;
            }
            
            public virtual AstQueryCall QueryCall
            {
                get
                {
                    return _queryCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        /// <summary>
        /// expression_chained : exist_call 
        /// </summary>
        public partial class AstExpressionChained3 : AstExpressionChained
        {
            
            private AstExistCall _existCall;
            
            internal AstExpressionChained3(ParserRuleContext ctx, AstExistCall existCall) : 
                    base(ctx)
            {
                _existCall = existCall;
            }
            
            public virtual AstExistCall ExistCall
            {
                get
                {
                    return _existCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        /// <summary>
        /// expression_chained : modify_call 
        /// </summary>
        public partial class AstExpressionChained4 : AstExpressionChained
        {
            
            private AstModifyCall _modifyCall;
            
            internal AstExpressionChained4(ParserRuleContext ctx, AstModifyCall modifyCall) : 
                    base(ctx)
            {
                _modifyCall = modifyCall;
            }
            
            public virtual AstModifyCall ModifyCall
            {
                get
                {
                    return _modifyCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionChained(this);
            }
        }
        

        
        internal AstExpressionChained(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpressionChained(Position p) : 
                base(p)
        {
        }
        
        internal AstExpressionChained(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExpressionChained Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExpressionChained.Resolve(list);
            if ((index == 2))
            {
                return new AstExpressionChained.AstExpressionChained1(ctx, ((AstValueCall)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExpressionChained.AstExpressionChained2(ctx, ((AstQueryCall)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExpressionChained.AstExpressionChained3(ctx, ((AstExistCall)(list[0])));
            }
            if ((index == 2))
            {
                return new AstExpressionChained.AstExpressionChained4(ctx, ((AstModifyCall)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstValueCall), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstQueryCall), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstExistCall), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstModifyCall), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    value_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstValueCall valueCall)
        {
            AstExpressionChained.AstExpressionChained1 result = new AstExpressionChained.AstExpressionChained1(ctx, valueCall);
            return result;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    query_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstQueryCall queryCall)
        {
            AstExpressionChained.AstExpressionChained2 result = new AstExpressionChained.AstExpressionChained2(ctx, queryCall);
            return result;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    exist_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstExistCall existCall)
        {
            AstExpressionChained.AstExpressionChained3 result = new AstExpressionChained.AstExpressionChained3(ctx, existCall);
            return result;
        }
        
        /// <summary>
        /// expression_chained : 
        ///    modify_call 
        /// </summary>
        public static AstExpressionChained ExpressionChained(ParserRuleContext ctx, AstModifyCall modifyCall)
        {
            AstExpressionChained.AstExpressionChained4 result = new AstExpressionChained.AstExpressionChained4(ctx, modifyCall);
            return result;
        }
    }
    
    /// <summary>
    /// primitive_expression
    /// 	 : DEFAULT
    /// 	 | NULL_
    /// 	 | local_id
    /// 	 | constant
    /// </summary>
    public abstract partial class AstPrimitiveExpression : AstBnfRule
    {
        
        protected static string _rule = "primitive_expression\r\n\t : DEFAULT\r\n\t | NULL_\r\n\t | local_id\r\n\t | constant";
        
        /// <summary>
        /// primitive_expression : DEFAULT 
        /// </summary>
        public partial class AstPrimitiveExpression1 : AstPrimitiveExpression
        {
            
            internal AstPrimitiveExpression1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : NULL_ 
        /// </summary>
        public partial class AstPrimitiveExpression2 : AstPrimitiveExpression
        {
            
            internal AstPrimitiveExpression2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : local_id 
        /// </summary>
        public partial class AstPrimitiveExpression3 : AstPrimitiveExpression
        {
            
            private AstLocalId _localId;
            
            internal AstPrimitiveExpression3(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        /// <summary>
        /// primitive_expression : constant 
        /// </summary>
        public partial class AstPrimitiveExpression4 : AstPrimitiveExpression
        {
            
            private AstConstant _constant;
            
            internal AstPrimitiveExpression4(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrimitiveExpression(this);
            }
        }
        

        
        internal AstPrimitiveExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrimitiveExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstPrimitiveExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPrimitiveExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPrimitiveExpression.Resolve(list);
            if ((index == 1))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression1(ctx);
            }
            if ((index == 1))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression2(ctx);
            }
            if ((index == 2))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression3(ctx, ((AstLocalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPrimitiveExpression.AstPrimitiveExpression4(ctx, ((AstConstant)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    DEFAULT 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(ParserRuleContext ctx)
        {
            AstPrimitiveExpression.AstPrimitiveExpression1 result = new AstPrimitiveExpression.AstPrimitiveExpression1(ctx);
            return result;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    local_id 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(ParserRuleContext ctx, AstLocalId localId)
        {
            AstPrimitiveExpression.AstPrimitiveExpression3 result = new AstPrimitiveExpression.AstPrimitiveExpression3(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// primitive_expression : 
        ///    constant 
        /// </summary>
        public static AstPrimitiveExpression PrimitiveExpression(ParserRuleContext ctx, AstConstant constant)
        {
            AstPrimitiveExpression.AstPrimitiveExpression4 result = new AstPrimitiveExpression.AstPrimitiveExpression4(ctx, constant);
            return result;
        }
    }
    
    /// <summary>
    /// case_expression
    /// 	 : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END
    /// 	 | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
    /// </summary>
    public abstract partial class AstCaseExpression : AstBnfRule
    {
        
        protected static string _rule = "case_expression\r\n\t : CASE  caseExpr = expression  switch_section+  (ELSE  elseExp" +
            "r = expression)?  END\r\n\t | CASE  switch_search_condition_section+  (ELSE  elseEx" +
            "pr = expression)?  END";
        
        /// <summary>
        /// case_expression : CASE caseExpr=expression switch_section+ ELSE elseExpr=expression END 
        /// </summary>
        public partial class AstCaseExpression1 : AstCaseExpression
        {
            
            private AstExpression _caseExpr;
            
            private AstSwitchSection _switchSection;
            
            private AstExpression _elseExpr;
            
            internal AstCaseExpression1(ParserRuleContext ctx, AstExpression caseExpr, AstSwitchSection switchSection, AstExpression elseExpr) : 
                    base(ctx)
            {
                _caseExpr = caseExpr;
                _switchSection = switchSection;
                _elseExpr = elseExpr;
            }
            
            public virtual AstExpression Caseexpr
            {
                get
                {
                    return _caseExpr;
                }
            }
            
            public virtual AstSwitchSection SwitchSection
            {
                get
                {
                    return _switchSection;
                }
            }
            
            public virtual AstExpression Elseexpr
            {
                get
                {
                    return _elseExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCaseExpression(this);
            }
        }
        /// <summary>
        /// case_expression : CASE switch_search_condition_section+ ELSE elseExpr=expression END 
        /// </summary>
        public partial class AstCaseExpression2 : AstCaseExpression
        {
            
            private AstSwitchSearchConditionSection _switchSearchConditionSection;
            
            private AstExpression _elseExpr;
            
            internal AstCaseExpression2(ParserRuleContext ctx, AstSwitchSearchConditionSection switchSearchConditionSection, AstExpression elseExpr) : 
                    base(ctx)
            {
                _switchSearchConditionSection = switchSearchConditionSection;
                _elseExpr = elseExpr;
            }
            
            public virtual AstSwitchSearchConditionSection SwitchSearchConditionSection
            {
                get
                {
                    return _switchSearchConditionSection;
                }
            }
            
            public virtual AstExpression Elseexpr
            {
                get
                {
                    return _elseExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCaseExpression(this);
            }
        }
        

        
        internal AstCaseExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCaseExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstCaseExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCaseExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCaseExpression.Resolve(list);
            if ((index == 4))
            {
                return new AstCaseExpression.AstCaseExpression1(ctx, ((AstExpression)(list[0])), ((AstSwitchSection)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 3))
            {
                return new AstCaseExpression.AstCaseExpression2(ctx, ((AstSwitchSearchConditionSection)(list[0])), ((AstExpression)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSwitchSection), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSwitchSearchConditionSection), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// case_expression : 
        ///    CASE caseExpr=expression switch_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(ParserRuleContext ctx, AstExpression caseExpr, IEnumerable<AstSwitchSection> switchSection, AstExpression elseExpr)
        {
            AstCaseExpression.AstCaseExpression1 result = new AstCaseExpression.AstCaseExpression1(ctx, caseExpr, switchSection, elseExpr);
            return result;
        }
        
        /// <summary>
        /// case_expression : 
        ///    CASE switch_search_condition_section+ ELSE elseExpr=expression END 
        /// </summary>
        public static AstCaseExpression CaseExpression(ParserRuleContext ctx, IEnumerable<AstSwitchSearchConditionSection> switchSearchConditionSection, AstExpression elseExpr)
        {
            AstCaseExpression.AstCaseExpression2 result = new AstCaseExpression.AstCaseExpression2(ctx, switchSearchConditionSection, elseExpr);
            return result;
        }
    }
    
    /// <summary>
    /// unary_operator_expression
    /// 	 : BIT_NOT  expression
    /// 	 | plus_minus  expression
    /// </summary>
    public abstract partial class AstUnaryOperatorExpression : AstBnfRule
    {
        
        protected static string _rule = "unary_operator_expression\r\n\t : BIT_NOT  expression\r\n\t | plus_minus  expression";
        
        /// <summary>
        /// unary_operator_expression : BIT_NOT expression 
        /// </summary>
        public partial class AstUnaryOperatorExpression1 : AstUnaryOperatorExpression
        {
            
            private AstExpression _expression;
            
            internal AstUnaryOperatorExpression1(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUnaryOperatorExpression(this);
            }
        }
        /// <summary>
        /// unary_operator_expression : plus_minus expression 
        /// </summary>
        public partial class AstUnaryOperatorExpression2 : AstUnaryOperatorExpression
        {
            
            private AstPlusMinus _plusMinus;
            
            private AstExpression _expression;
            
            internal AstUnaryOperatorExpression2(ParserRuleContext ctx, AstPlusMinus plusMinus, AstExpression expression) : 
                    base(ctx)
            {
                _plusMinus = plusMinus;
                _expression = expression;
            }
            
            public virtual AstPlusMinus PlusMinus
            {
                get
                {
                    return _plusMinus;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUnaryOperatorExpression(this);
            }
        }
        

        
        internal AstUnaryOperatorExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUnaryOperatorExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstUnaryOperatorExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUnaryOperatorExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUnaryOperatorExpression.Resolve(list);
            if ((index == 2))
            {
                return new AstUnaryOperatorExpression.AstUnaryOperatorExpression1(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstUnaryOperatorExpression.AstUnaryOperatorExpression2(ctx, ((AstPlusMinus)(list[0])), ((AstExpression)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPlusMinus), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// unary_operator_expression : 
        ///    BIT_NOT expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(ParserRuleContext ctx, AstExpression expression)
        {
            AstUnaryOperatorExpression.AstUnaryOperatorExpression1 result = new AstUnaryOperatorExpression.AstUnaryOperatorExpression1(ctx, expression);
            return result;
        }
        
        /// <summary>
        /// unary_operator_expression : 
        ///    plus_minus expression 
        /// </summary>
        public static AstUnaryOperatorExpression UnaryOperatorExpression(ParserRuleContext ctx, AstPlusMinus plusMinus, AstExpression expression)
        {
            AstUnaryOperatorExpression.AstUnaryOperatorExpression2 result = new AstUnaryOperatorExpression.AstUnaryOperatorExpression2(ctx, plusMinus, expression);
            return result;
        }
    }
    
    /// <summary>
    /// bracket_expression
    /// 	 : LR_BRACKET  expression  RR_BRACKET
    /// 	 | LR_BRACKET  subquery  RR_BRACKET
    /// </summary>
    public abstract partial class AstBracketExpression : AstBnfRule
    {
        
        protected static string _rule = "bracket_expression\r\n\t : LR_BRACKET  expression  RR_BRACKET\r\n\t | LR_BRACKET  subqu" +
            "ery  RR_BRACKET";
        
        /// <summary>
        /// bracket_expression : LR_BRACKET expression RR_BRACKET 
        /// </summary>
        public partial class AstBracketExpression1 : AstBracketExpression
        {
            
            private AstExpression _expression;
            
            internal AstBracketExpression1(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBracketExpression(this);
            }
        }
        /// <summary>
        /// bracket_expression : LR_BRACKET subquery RR_BRACKET 
        /// </summary>
        public partial class AstBracketExpression2 : AstBracketExpression
        {
            
            private AstSubquery _subquery;
            
            internal AstBracketExpression2(ParserRuleContext ctx, AstSubquery subquery) : 
                    base(ctx)
            {
                _subquery = subquery;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBracketExpression(this);
            }
        }
        

        
        internal AstBracketExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBracketExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstBracketExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBracketExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBracketExpression.Resolve(list);
            if ((index == 2))
            {
                return new AstBracketExpression.AstBracketExpression1(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBracketExpression.AstBracketExpression2(ctx, ((AstSubquery)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// bracket_expression : 
        ///    ( expression ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(ParserRuleContext ctx, AstExpression expression)
        {
            AstBracketExpression.AstBracketExpression1 result = new AstBracketExpression.AstBracketExpression1(ctx, expression);
            return result;
        }
        
        /// <summary>
        /// bracket_expression : 
        ///    ( subquery ) 
        /// </summary>
        public static AstBracketExpression BracketExpression(ParserRuleContext ctx, AstSubquery subquery)
        {
            AstBracketExpression.AstBracketExpression2 result = new AstBracketExpression.AstBracketExpression2(ctx, subquery);
            return result;
        }
    }
    
    /// <summary>
    /// constant_expression
    /// 	 : NULL_
    /// 	 | constant
    /// 	 | function_call
    /// 	 | local_id
    /// 	 | LR_BRACKET  constant_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstConstantExpression : AstBnfRule
    {
        
        protected static string _rule = "constant_expression\r\n\t : NULL_\r\n\t | constant\r\n\t | function_call\r\n\t | local_id\r\n\t " +
            "| LR_BRACKET  constant_expression  RR_BRACKET";
        
        /// <summary>
        /// constant_expression : NULL_ 
        /// </summary>
        public partial class AstConstantExpression1 : AstConstantExpression
        {
            
            internal AstConstantExpression1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : constant 
        /// </summary>
        public partial class AstConstantExpression2 : AstConstantExpression
        {
            
            private AstConstant _constant;
            
            internal AstConstantExpression2(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : function_call 
        /// </summary>
        public partial class AstConstantExpression3 : AstConstantExpression
        {
            
            private AstFunctionCall _functionCall;
            
            internal AstConstantExpression3(ParserRuleContext ctx, AstFunctionCall functionCall) : 
                    base(ctx)
            {
                _functionCall = functionCall;
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : local_id 
        /// </summary>
        public partial class AstConstantExpression4 : AstConstantExpression
        {
            
            private AstLocalId _localId;
            
            internal AstConstantExpression4(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        /// <summary>
        /// constant_expression : LR_BRACKET constant_expression RR_BRACKET 
        /// </summary>
        public partial class AstConstantExpression5 : AstConstantExpression
        {
            
            private AstConstantExpression _constantExpression;
            
            internal AstConstantExpression5(ParserRuleContext ctx, AstConstantExpression constantExpression) : 
                    base(ctx)
            {
                _constantExpression = constantExpression;
            }
            
            public virtual AstConstantExpression ConstantExpression
            {
                get
                {
                    return _constantExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstantExpression(this);
            }
        }
        

        
        internal AstConstantExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstantExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstConstantExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstantExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstantExpression.Resolve(list);
            if ((index == 1))
            {
                return new AstConstantExpression.AstConstantExpression1(ctx);
            }
            if ((index == 2))
            {
                return new AstConstantExpression.AstConstantExpression2(ctx, ((AstConstant)(list[0])));
            }
            if ((index == 2))
            {
                return new AstConstantExpression.AstConstantExpression3(ctx, ((AstFunctionCall)(list[0])));
            }
            if ((index == 2))
            {
                return new AstConstantExpression.AstConstantExpression4(ctx, ((AstLocalId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstConstantExpression.AstConstantExpression5(ctx, ((AstConstantExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstConstantExpression), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    NULL_ 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx)
        {
            AstConstantExpression.AstConstantExpression1 result = new AstConstantExpression.AstConstantExpression1(ctx);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    constant 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstConstant constant)
        {
            AstConstantExpression.AstConstantExpression2 result = new AstConstantExpression.AstConstantExpression2(ctx, constant);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    function_call 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstFunctionCall functionCall)
        {
            AstConstantExpression.AstConstantExpression3 result = new AstConstantExpression.AstConstantExpression3(ctx, functionCall);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    local_id 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstLocalId localId)
        {
            AstConstantExpression.AstConstantExpression4 result = new AstConstantExpression.AstConstantExpression4(ctx, localId);
            return result;
        }
        
        /// <summary>
        /// constant_expression : 
        ///    ( constant_expression ) 
        /// </summary>
        public static AstConstantExpression ConstantExpression(ParserRuleContext ctx, AstConstantExpression constantExpression)
        {
            AstConstantExpression.AstConstantExpression5 result = new AstConstantExpression.AstConstantExpression5(ctx, constantExpression);
            return result;
        }
    }
    
    /// <summary>
    /// common_table_expression
    /// 	 : expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACKET
    /// </summary>
    public partial class AstCommonTableExpression : AstBnfRule
    {
        
        protected static string _rule = "common_table_expression\r\n\t : expression_name = id_  (LR_BRACKET  columns = column" +
            "_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACK" +
            "ET";
        
        internal AstCommonTableExpression(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstCommonTableExpression(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstCommonTableExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstCommonTableExpression(ParserRuleContext ctx, AstId expressionName, AstColumnNameList columns, AstSelectStatement cteQuery) : 
                base(ctx)
        {
            _expressionName = expressionName;
            _columns = columns;
            _cteQuery = cteQuery;
        }
        
        public virtual AstId _expressionName
        {
            get
            {
                return _expressionName;
            }
        }
        
        public virtual AstColumnNameList _columns
        {
            get
            {
                return _columns;
            }
        }
        
        public virtual AstSelectStatement _cteQuery
        {
            get
            {
                return _cteQuery;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCommonTableExpression(this);
        }
        
        /// <summary>
        /// common_table_expression : 
        ///    expression_name=id_ ( columns=column_name_list ) AS ( cte_query=select_statement ) 
        /// </summary>
        public static AstCommonTableExpression CommonTableExpression(ParserRuleContext ctx, AstId expressionName, AstColumnNameList columns, AstSelectStatement cteQuery)
        {
            AstCommonTableExpression result = new AstCommonTableExpression(ctx, expressionName, columns, cteQuery);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem
    /// 	 : local_id  EQUAL  full_column_name  update_operator  expression
    /// 	 | column_ref  update_operator  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstUpdateElem : AstBnfRule
    {
        
        protected static string _rule = "update_elem\r\n\t : local_id  EQUAL  full_column_name  update_operator  expression\r\n" +
            "\t | column_ref  update_operator  expression\r\n\t | udt_column_id  DOT  method_id  " +
            "LR_BRACKET  expression_list  RR_BRACKET";
        
        /// <summary>
        /// update_elem : local_id EQUAL full_column_name update_operator expression 
        /// </summary>
        public partial class AstUpdateElem1 : AstUpdateElem
        {
            
            private AstLocalId _localId;
            
            private AstFullColumnName _fullColumnName;
            
            private AstUpdateOperator _updateOperator;
            
            private AstExpression _expression;
            
            internal AstUpdateElem1(ParserRuleContext ctx, AstLocalId localId, AstFullColumnName fullColumnName, AstUpdateOperator updateOperator, AstExpression expression) : 
                    base(ctx)
            {
                _localId = localId;
                _fullColumnName = fullColumnName;
                _updateOperator = updateOperator;
                _expression = expression;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public virtual AstUpdateOperator UpdateOperator
            {
                get
                {
                    return _updateOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        /// <summary>
        /// update_elem : column_ref update_operator expression 
        /// </summary>
        public partial class AstUpdateElem2 : AstUpdateElem
        {
            
            private AstColumnRef _columnRef;
            
            private AstUpdateOperator _updateOperator;
            
            private AstExpression _expression;
            
            internal AstUpdateElem2(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression) : 
                    base(ctx)
            {
                _columnRef = columnRef;
                _updateOperator = updateOperator;
                _expression = expression;
            }
            
            public virtual AstColumnRef ColumnRef
            {
                get
                {
                    return _columnRef;
                }
            }
            
            public virtual AstUpdateOperator UpdateOperator
            {
                get
                {
                    return _updateOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        /// <summary>
        /// update_elem : udt_column_id DOT method_id LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstUpdateElem3 : AstUpdateElem
        {
            
            private AstUdtColumnId _udtColumnId;
            
            private AstMethodId _methodId;
            
            private AstExpressionList _expressionList;
            
            internal AstUpdateElem3(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _methodId = methodId;
                _expressionList = expressionList;
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstMethodId MethodId
            {
                get
                {
                    return _methodId;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElem(this);
            }
        }
        

        
        internal AstUpdateElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElem(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateElem.Resolve(list);
            if ((index == 5))
            {
                return new AstUpdateElem.AstUpdateElem1(ctx, ((AstLocalId)(list[0])), ((AstFullColumnName)(list[1])), ((AstUpdateOperator)(list[2])), ((AstExpression)(list[3])));
            }
            if ((index == 4))
            {
                return new AstUpdateElem.AstUpdateElem2(ctx, ((AstColumnRef)(list[0])), ((AstUpdateOperator)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 4))
            {
                return new AstUpdateElem.AstUpdateElem3(ctx, ((AstUdtColumnId)(list[0])), ((AstMethodId)(list[1])), ((AstExpressionList)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFullColumnName), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstUpdateOperator), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstUpdateOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMethodId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpressionList), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_elem : 
        ///    local_id EQUAL full_column_name update_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(ParserRuleContext ctx, AstLocalId localId, AstFullColumnName fullColumnName, AstUpdateOperator updateOperator, AstExpression expression)
        {
            AstUpdateElem.AstUpdateElem1 result = new AstUpdateElem.AstUpdateElem1(ctx, localId, fullColumnName, updateOperator, expression);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    column_ref update_operator expression 
        /// </summary>
        public static AstUpdateElem UpdateElem(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression)
        {
            AstUpdateElem.AstUpdateElem2 result = new AstUpdateElem.AstUpdateElem2(ctx, columnRef, updateOperator, expression);
            return result;
        }
        
        /// <summary>
        /// update_elem : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElem UpdateElem(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            AstUpdateElem.AstUpdateElem3 result = new AstUpdateElem.AstUpdateElem3(ctx, udtColumnId, methodId, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// column_ref
    /// 	 : full_column_name
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstColumnRef : AstBnfRule
    {
        
        protected static string _rule = "column_ref\r\n\t : full_column_name\r\n\t | local_id";
        
        /// <summary>
        /// column_ref : full_column_name 
        /// </summary>
        public partial class AstColumnRef1 : AstColumnRef
        {
            
            private AstFullColumnName _fullColumnName;
            
            internal AstColumnRef1(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnRef(this);
            }
        }
        /// <summary>
        /// column_ref : local_id 
        /// </summary>
        public partial class AstColumnRef2 : AstColumnRef
        {
            
            private AstLocalId _localId;
            
            internal AstColumnRef2(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnRef(this);
            }
        }
        

        
        internal AstColumnRef(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnRef(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnRef(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnRef Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnRef.Resolve(list);
            if ((index == 2))
            {
                return new AstColumnRef.AstColumnRef1(ctx, ((AstFullColumnName)(list[0])));
            }
            if ((index == 2))
            {
                return new AstColumnRef.AstColumnRef2(ctx, ((AstLocalId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// column_ref : 
        ///    full_column_name 
        /// </summary>
        public static AstColumnRef ColumnRef(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstColumnRef.AstColumnRef1 result = new AstColumnRef.AstColumnRef1(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// column_ref : 
        ///    local_id 
        /// </summary>
        public static AstColumnRef ColumnRef(ParserRuleContext ctx, AstLocalId localId)
        {
            AstColumnRef.AstColumnRef2 result = new AstColumnRef.AstColumnRef2(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// update_operator
    /// 	 : EQUAL
    /// 	 | assignment_operator
    /// </summary>
    public abstract partial class AstUpdateOperator : AstBnfRule
    {
        
        protected static string _rule = "update_operator\r\n\t : EQUAL\r\n\t | assignment_operator";
        
        /// <summary>
        /// update_operator : EQUAL 
        /// </summary>
        public partial class AstUpdateOperator1 : AstUpdateOperator
        {
            
            internal AstUpdateOperator1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOperator(this);
            }
        }
        /// <summary>
        /// update_operator : assignment_operator 
        /// </summary>
        public partial class AstUpdateOperator2 : AstUpdateOperator
        {
            
            private AstAssignmentOperator _assignmentOperator;
            
            internal AstUpdateOperator2(ParserRuleContext ctx, AstAssignmentOperator assignmentOperator) : 
                    base(ctx)
            {
                _assignmentOperator = assignmentOperator;
            }
            
            public virtual AstAssignmentOperator AssignmentOperator
            {
                get
                {
                    return _assignmentOperator;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOperator(this);
            }
        }
        

        
        internal AstUpdateOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateOperator(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateOperator Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateOperator.Resolve(list);
            if ((index == 1))
            {
                return new AstUpdateOperator.AstUpdateOperator1(ctx);
            }
            if ((index == 2))
            {
                return new AstUpdateOperator.AstUpdateOperator2(ctx, ((AstAssignmentOperator)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAssignmentOperator), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_operator : 
        ///    EQUAL 
        /// </summary>
        public static AstUpdateOperator UpdateOperator(ParserRuleContext ctx)
        {
            AstUpdateOperator.AstUpdateOperator1 result = new AstUpdateOperator.AstUpdateOperator1(ctx);
            return result;
        }
        
        /// <summary>
        /// update_operator : 
        ///    assignment_operator 
        /// </summary>
        public static AstUpdateOperator UpdateOperator(ParserRuleContext ctx, AstAssignmentOperator assignmentOperator)
        {
            AstUpdateOperator.AstUpdateOperator2 result = new AstUpdateOperator.AstUpdateOperator2(ctx, assignmentOperator);
            return result;
        }
    }
    
    /// <summary>
    /// update_elem_merge
    /// 	 : column_ref  update_operator  expression
    /// 	 | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstUpdateElemMerge : AstBnfRule
    {
        
        protected static string _rule = "update_elem_merge\r\n\t : column_ref  update_operator  expression\r\n\t | udt_column_id" +
            "  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET";
        
        /// <summary>
        /// update_elem_merge : column_ref update_operator expression 
        /// </summary>
        public partial class AstUpdateElemMerge1 : AstUpdateElemMerge
        {
            
            private AstColumnRef _columnRef;
            
            private AstUpdateOperator _updateOperator;
            
            private AstExpression _expression;
            
            internal AstUpdateElemMerge1(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression) : 
                    base(ctx)
            {
                _columnRef = columnRef;
                _updateOperator = updateOperator;
                _expression = expression;
            }
            
            public virtual AstColumnRef ColumnRef
            {
                get
                {
                    return _columnRef;
                }
            }
            
            public virtual AstUpdateOperator UpdateOperator
            {
                get
                {
                    return _updateOperator;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElemMerge(this);
            }
        }
        /// <summary>
        /// update_elem_merge : udt_column_id DOT method_id LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstUpdateElemMerge2 : AstUpdateElemMerge
        {
            
            private AstUdtColumnId _udtColumnId;
            
            private AstMethodId _methodId;
            
            private AstExpressionList _expressionList;
            
            internal AstUpdateElemMerge2(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _methodId = methodId;
                _expressionList = expressionList;
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstMethodId MethodId
            {
                get
                {
                    return _methodId;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateElemMerge(this);
            }
        }
        

        
        internal AstUpdateElemMerge(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateElemMerge(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateElemMerge(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateElemMerge Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateElemMerge.Resolve(list);
            if ((index == 4))
            {
                return new AstUpdateElemMerge.AstUpdateElemMerge1(ctx, ((AstColumnRef)(list[0])), ((AstUpdateOperator)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 4))
            {
                return new AstUpdateElemMerge.AstUpdateElemMerge2(ctx, ((AstUdtColumnId)(list[0])), ((AstMethodId)(list[1])), ((AstExpressionList)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstUpdateOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstMethodId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpressionList), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    column_ref update_operator expression 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(ParserRuleContext ctx, AstColumnRef columnRef, AstUpdateOperator updateOperator, AstExpression expression)
        {
            AstUpdateElemMerge.AstUpdateElemMerge1 result = new AstUpdateElemMerge.AstUpdateElemMerge1(ctx, columnRef, updateOperator, expression);
            return result;
        }
        
        /// <summary>
        /// update_elem_merge : 
        ///    udt_column_id . method_id ( expression_list ) 
        /// </summary>
        public static AstUpdateElemMerge UpdateElemMerge(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstMethodId methodId, AstExpressionList expressionList)
        {
            AstUpdateElemMerge.AstUpdateElemMerge2 result = new AstUpdateElemMerge.AstUpdateElemMerge2(ctx, udtColumnId, methodId, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// search_condition
    /// 	 : NOT*  sub_search_condition
    /// 	 | left = search_condition  and_or  right = search_condition
    /// </summary>
    public abstract partial class AstSearchCondition : AstBnfRule
    {
        
        protected static string _rule = "search_condition\r\n\t : NOT*  sub_search_condition\r\n\t | left = search_condition  an" +
            "d_or  right = search_condition";
        
        /// <summary>
        /// search_condition : NOT* sub_search_condition 
        /// </summary>
        public partial class AstSearchCondition1 : AstSearchCondition
        {
            
            private AstSubSearchCondition _subSearchCondition;
            
            internal AstSearchCondition1(ParserRuleContext ctx, AstSubSearchCondition subSearchCondition) : 
                    base(ctx)
            {
                _subSearchCondition = subSearchCondition;
            }
            
            public virtual AstSubSearchCondition SubSearchCondition
            {
                get
                {
                    return _subSearchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSearchCondition(this);
            }
        }
        /// <summary>
        /// search_condition : left=search_condition and_or right=search_condition 
        /// </summary>
        public partial class AstSearchCondition2 : AstSearchCondition
        {
            
            private AstSearchCondition _left;
            
            private AstAndOr _andOr;
            
            private AstSearchCondition _right;
            
            internal AstSearchCondition2(ParserRuleContext ctx, AstSearchCondition left, AstAndOr andOr, AstSearchCondition right) : 
                    base(ctx)
            {
                _left = left;
                _andOr = andOr;
                _right = right;
            }
            
            public virtual AstSearchCondition Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstAndOr AndOr
            {
                get
                {
                    return _andOr;
                }
            }
            
            public virtual AstSearchCondition Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSearchCondition(this);
            }
        }
        

        
        internal AstSearchCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSearchCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstSearchCondition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSearchCondition Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSearchCondition.Resolve(list);
            if ((index == 2))
            {
                return new AstSearchCondition.AstSearchCondition1(ctx, ((AstSubSearchCondition)(list[0])));
            }
            if ((index == 4))
            {
                return new AstSearchCondition.AstSearchCondition2(ctx, ((AstSearchCondition)(list[0])), ((AstAndOr)(list[1])), ((AstSearchCondition)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAndOr), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstSearchCondition), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSubSearchCondition), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// search_condition : 
        ///    NOT* sub_search_condition 
        /// </summary>
        public static AstSearchCondition SearchCondition(ParserRuleContext ctx, AstSubSearchCondition subSearchCondition)
        {
            AstSearchCondition.AstSearchCondition1 result = new AstSearchCondition.AstSearchCondition1(ctx, subSearchCondition);
            return result;
        }
        
        /// <summary>
        /// search_condition : 
        ///    left=search_condition and_or right=search_condition 
        /// </summary>
        public static AstSearchCondition SearchCondition(ParserRuleContext ctx, AstSearchCondition left, AstAndOr andOr, AstSearchCondition right)
        {
            AstSearchCondition.AstSearchCondition2 result = new AstSearchCondition.AstSearchCondition2(ctx, left, andOr, right);
            return result;
        }
    }
    
    /// <summary>
    /// sub_search_condition
    /// 	 : predicate_expr
    /// 	 | LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public abstract partial class AstSubSearchCondition : AstBnfRule
    {
        
        protected static string _rule = "sub_search_condition\r\n\t : predicate_expr\r\n\t | LR_BRACKET  search_condition  RR_BR" +
            "ACKET";
        
        /// <summary>
        /// sub_search_condition : predicate_expr 
        /// </summary>
        public partial class AstSubSearchCondition1 : AstSubSearchCondition
        {
            
            private AstPredicateExpr _predicateExpr;
            
            internal AstSubSearchCondition1(ParserRuleContext ctx, AstPredicateExpr predicateExpr) : 
                    base(ctx)
            {
                _predicateExpr = predicateExpr;
            }
            
            public virtual AstPredicateExpr PredicateExpr
            {
                get
                {
                    return _predicateExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSubSearchCondition(this);
            }
        }
        /// <summary>
        /// sub_search_condition : LR_BRACKET search_condition RR_BRACKET 
        /// </summary>
        public partial class AstSubSearchCondition2 : AstSubSearchCondition
        {
            
            private AstSearchCondition _searchCondition;
            
            internal AstSubSearchCondition2(ParserRuleContext ctx, AstSearchCondition searchCondition) : 
                    base(ctx)
            {
                _searchCondition = searchCondition;
            }
            
            public virtual AstSearchCondition SearchCondition
            {
                get
                {
                    return _searchCondition;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSubSearchCondition(this);
            }
        }
        

        
        internal AstSubSearchCondition(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSubSearchCondition(Position p) : 
                base(p)
        {
        }
        
        internal AstSubSearchCondition(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSubSearchCondition Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSubSearchCondition.Resolve(list);
            if ((index == 2))
            {
                return new AstSubSearchCondition.AstSubSearchCondition1(ctx, ((AstPredicateExpr)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSubSearchCondition.AstSubSearchCondition2(ctx, ((AstSearchCondition)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPredicateExpr), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// sub_search_condition : 
        ///    predicate_expr 
        /// </summary>
        public static AstSubSearchCondition SubSearchCondition(ParserRuleContext ctx, AstPredicateExpr predicateExpr)
        {
            AstSubSearchCondition.AstSubSearchCondition1 result = new AstSubSearchCondition.AstSubSearchCondition1(ctx, predicateExpr);
            return result;
        }
        
        /// <summary>
        /// sub_search_condition : 
        ///    ( search_condition ) 
        /// </summary>
        public static AstSubSearchCondition SubSearchCondition(ParserRuleContext ctx, AstSearchCondition searchCondition)
        {
            AstSubSearchCondition.AstSubSearchCondition2 result = new AstSubSearchCondition.AstSubSearchCondition2(ctx, searchCondition);
            return result;
        }
    }
    
    /// <summary>
    /// predicate_expr
    /// 	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | freetext_predicate
    /// 	 | predicate_binary
    /// 	 | predicate_multi_assign
    /// 	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
    /// 	 | predicate_tier
    /// 	 | predicate_not_in
    /// 	 | predicate_not_like
    /// 	 | expression  IS  null_notnull
    /// </summary>
    public abstract partial class AstPredicateExpr : AstBnfRule
    {
        
        protected static string _rule = @"predicate_expr
	 : EXISTS  LR_BRACKET  subquery  RR_BRACKET
	 | freetext_predicate
	 | predicate_binary
	 | predicate_multi_assign
	 | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET
	 | predicate_tier
	 | predicate_not_in
	 | predicate_not_like
	 | expression  IS  null_notnull";
        
        /// <summary>
        /// predicate_expr : EXISTS LR_BRACKET subquery RR_BRACKET 
        /// </summary>
        public partial class AstPredicateExpr1 : AstPredicateExpr
        {
            
            private AstSubquery _subquery;
            
            internal AstPredicateExpr1(ParserRuleContext ctx, AstSubquery subquery) : 
                    base(ctx)
            {
                _subquery = subquery;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : freetext_predicate 
        /// </summary>
        public partial class AstPredicateExpr2 : AstPredicateExpr
        {
            
            private AstFreetextPredicate _freetextPredicate;
            
            internal AstPredicateExpr2(ParserRuleContext ctx, AstFreetextPredicate freetextPredicate) : 
                    base(ctx)
            {
                _freetextPredicate = freetextPredicate;
            }
            
            public virtual AstFreetextPredicate FreetextPredicate
            {
                get
                {
                    return _freetextPredicate;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_binary 
        /// </summary>
        public partial class AstPredicateExpr3 : AstPredicateExpr
        {
            
            private AstPredicateBinary _predicateBinary;
            
            internal AstPredicateExpr3(ParserRuleContext ctx, AstPredicateBinary predicateBinary) : 
                    base(ctx)
            {
                _predicateBinary = predicateBinary;
            }
            
            public virtual AstPredicateBinary PredicateBinary
            {
                get
                {
                    return _predicateBinary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_multi_assign 
        /// </summary>
        public partial class AstPredicateExpr4 : AstPredicateExpr
        {
            
            private AstPredicateMultiAssign _predicateMultiAssign;
            
            internal AstPredicateExpr4(ParserRuleContext ctx, AstPredicateMultiAssign predicateMultiAssign) : 
                    base(ctx)
            {
                _predicateMultiAssign = predicateMultiAssign;
            }
            
            public virtual AstPredicateMultiAssign PredicateMultiAssign
            {
                get
                {
                    return _predicateMultiAssign;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : expression comparison_operator all_some_any LR_BRACKET subquery RR_BRACKET 
        /// </summary>
        public partial class AstPredicateExpr5 : AstPredicateExpr
        {
            
            private AstExpression _expression;
            
            private AstComparisonOperator _comparisonOperator;
            
            private AstAllSomeAny _allSomeAny;
            
            private AstSubquery _subquery;
            
            internal AstPredicateExpr5(ParserRuleContext ctx, AstExpression expression, AstComparisonOperator comparisonOperator, AstAllSomeAny allSomeAny, AstSubquery subquery) : 
                    base(ctx)
            {
                _expression = expression;
                _comparisonOperator = comparisonOperator;
                _allSomeAny = allSomeAny;
                _subquery = subquery;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstComparisonOperator ComparisonOperator
            {
                get
                {
                    return _comparisonOperator;
                }
            }
            
            public virtual AstAllSomeAny AllSomeAny
            {
                get
                {
                    return _allSomeAny;
                }
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_tier 
        /// </summary>
        public partial class AstPredicateExpr6 : AstPredicateExpr
        {
            
            private AstPredicateTier _predicateTier;
            
            internal AstPredicateExpr6(ParserRuleContext ctx, AstPredicateTier predicateTier) : 
                    base(ctx)
            {
                _predicateTier = predicateTier;
            }
            
            public virtual AstPredicateTier PredicateTier
            {
                get
                {
                    return _predicateTier;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_not_in 
        /// </summary>
        public partial class AstPredicateExpr7 : AstPredicateExpr
        {
            
            private AstPredicateNotIn _predicateNotIn;
            
            internal AstPredicateExpr7(ParserRuleContext ctx, AstPredicateNotIn predicateNotIn) : 
                    base(ctx)
            {
                _predicateNotIn = predicateNotIn;
            }
            
            public virtual AstPredicateNotIn PredicateNotIn
            {
                get
                {
                    return _predicateNotIn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : predicate_not_like 
        /// </summary>
        public partial class AstPredicateExpr8 : AstPredicateExpr
        {
            
            private AstPredicateNotLike _predicateNotLike;
            
            internal AstPredicateExpr8(ParserRuleContext ctx, AstPredicateNotLike predicateNotLike) : 
                    base(ctx)
            {
                _predicateNotLike = predicateNotLike;
            }
            
            public virtual AstPredicateNotLike PredicateNotLike
            {
                get
                {
                    return _predicateNotLike;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        /// <summary>
        /// predicate_expr : expression IS null_notnull 
        /// </summary>
        public partial class AstPredicateExpr9 : AstPredicateExpr
        {
            
            private AstExpression _expression;
            
            private AstNullNotnull _nullNotnull;
            
            internal AstPredicateExpr9(ParserRuleContext ctx, AstExpression expression, AstNullNotnull nullNotnull) : 
                    base(ctx)
            {
                _expression = expression;
                _nullNotnull = nullNotnull;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstNullNotnull NullNotnull
            {
                get
                {
                    return _nullNotnull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateExpr(this);
            }
        }
        

        
        internal AstPredicateExpr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPredicateExpr(Position p) : 
                base(p)
        {
        }
        
        internal AstPredicateExpr(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPredicateExpr Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPredicateExpr.Resolve(list);
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr1(ctx, ((AstSubquery)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr2(ctx, ((AstFreetextPredicate)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr3(ctx, ((AstPredicateBinary)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr4(ctx, ((AstPredicateMultiAssign)(list[0])));
            }
            if ((index == 5))
            {
                return new AstPredicateExpr.AstPredicateExpr5(ctx, ((AstExpression)(list[0])), ((AstComparisonOperator)(list[1])), ((AstAllSomeAny)(list[2])), ((AstSubquery)(list[3])));
            }
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr6(ctx, ((AstPredicateTier)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr7(ctx, ((AstPredicateNotIn)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPredicateExpr.AstPredicateExpr8(ctx, ((AstPredicateNotLike)(list[0])));
            }
            if ((index == 3))
            {
                return new AstPredicateExpr.AstPredicateExpr9(ctx, ((AstExpression)(list[0])), ((AstNullNotnull)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstComparisonOperator), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAllSomeAny), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstSubquery), false, false))
                            {
                                return 5;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstNullNotnull), false, false))
                    {
                        return 9;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFreetextPredicate), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateBinary), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateMultiAssign), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateTier), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateNotIn), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstPredicateNotLike), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    EXISTS ( subquery ) 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstSubquery subquery)
        {
            AstPredicateExpr.AstPredicateExpr1 result = new AstPredicateExpr.AstPredicateExpr1(ctx, subquery);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    freetext_predicate 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstFreetextPredicate freetextPredicate)
        {
            AstPredicateExpr.AstPredicateExpr2 result = new AstPredicateExpr.AstPredicateExpr2(ctx, freetextPredicate);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_binary 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateBinary predicateBinary)
        {
            AstPredicateExpr.AstPredicateExpr3 result = new AstPredicateExpr.AstPredicateExpr3(ctx, predicateBinary);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_multi_assign 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateMultiAssign predicateMultiAssign)
        {
            AstPredicateExpr.AstPredicateExpr4 result = new AstPredicateExpr.AstPredicateExpr4(ctx, predicateMultiAssign);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    expression comparison_operator all_some_any ( subquery ) 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstExpression expression, AstComparisonOperator comparisonOperator, AstAllSomeAny allSomeAny, AstSubquery subquery)
        {
            AstPredicateExpr.AstPredicateExpr5 result = new AstPredicateExpr.AstPredicateExpr5(ctx, expression, comparisonOperator, allSomeAny, subquery);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_tier 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateTier predicateTier)
        {
            AstPredicateExpr.AstPredicateExpr6 result = new AstPredicateExpr.AstPredicateExpr6(ctx, predicateTier);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_not_in 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateNotIn predicateNotIn)
        {
            AstPredicateExpr.AstPredicateExpr7 result = new AstPredicateExpr.AstPredicateExpr7(ctx, predicateNotIn);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    predicate_not_like 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstPredicateNotLike predicateNotLike)
        {
            AstPredicateExpr.AstPredicateExpr8 result = new AstPredicateExpr.AstPredicateExpr8(ctx, predicateNotLike);
            return result;
        }
        
        /// <summary>
        /// predicate_expr : 
        ///    expression IS null_notnull 
        /// </summary>
        public static AstPredicateExpr PredicateExpr(ParserRuleContext ctx, AstExpression expression, AstNullNotnull nullNotnull)
        {
            AstPredicateExpr.AstPredicateExpr9 result = new AstPredicateExpr.AstPredicateExpr9(ctx, expression, nullNotnull);
            return result;
        }
    }
    
    /// <summary>
    /// query_expression
    /// 	 : query_specification
    /// 	 | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  ALL?  right = query_expression)?
    /// 	 | query_specification  select_order_by_clause?  unions = sql_unions
    /// </summary>
    public abstract partial class AstQueryExpression : AstBnfRule
    {
        
        protected static string _rule = "query_expression\r\n\t : query_specification\r\n\t | LR_BRACKET  left = query_expressio" +
            "n  RR_BRACKET  (UNION  ALL?  right = query_expression)?\r\n\t | query_specification" +
            "  select_order_by_clause?  unions = sql_unions";
        
        /// <summary>
        /// query_expression : query_specification 
        /// </summary>
        public partial class AstQueryExpression1 : AstQueryExpression
        {
            
            private AstQuerySpecification _querySpecification;
            
            internal AstQueryExpression1(ParserRuleContext ctx, AstQuerySpecification querySpecification) : 
                    base(ctx)
            {
                _querySpecification = querySpecification;
            }
            
            public virtual AstQuerySpecification QuerySpecification
            {
                get
                {
                    return _querySpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        /// <summary>
        /// query_expression : LR_BRACKET left=query_expression RR_BRACKET UNION ALL? right=query_expression 
        /// </summary>
        public partial class AstQueryExpression2 : AstQueryExpression
        {
            
            private AstQueryExpression _left;
            
            private AstQueryExpression _right;
            
            internal AstQueryExpression2(ParserRuleContext ctx, AstQueryExpression left, AstQueryExpression right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public virtual AstQueryExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstQueryExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        /// <summary>
        /// query_expression : query_specification select_order_by_clause? unions=sql_unions 
        /// </summary>
        public partial class AstQueryExpression3 : AstQueryExpression
        {
            
            private AstQuerySpecification _querySpecification;
            
            private AstSelectOrderByClause _selectOrderByClause;
            
            private AstSqlUnions _unions;
            
            internal AstQueryExpression3(ParserRuleContext ctx, AstQuerySpecification querySpecification, AstSelectOrderByClause selectOrderByClause, AstSqlUnions unions) : 
                    base(ctx)
            {
                _querySpecification = querySpecification;
                _selectOrderByClause = selectOrderByClause;
                _unions = unions;
            }
            
            public virtual AstQuerySpecification QuerySpecification
            {
                get
                {
                    return _querySpecification;
                }
            }
            
            public virtual AstSelectOrderByClause SelectOrderByClause
            {
                get
                {
                    return _selectOrderByClause;
                }
            }
            
            public virtual AstSqlUnions Unions
            {
                get
                {
                    return _unions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryExpression(this);
            }
        }
        

        
        internal AstQueryExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueryExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstQueryExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstQueryExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstQueryExpression.Resolve(list);
            if ((index == 2))
            {
                return new AstQueryExpression.AstQueryExpression1(ctx, ((AstQuerySpecification)(list[0])));
            }
            if ((index == 3))
            {
                return new AstQueryExpression.AstQueryExpression2(ctx, ((AstQueryExpression)(list[0])), ((AstQueryExpression)(list[1])));
            }
            if ((index == 4))
            {
                return new AstQueryExpression.AstQueryExpression3(ctx, ((AstQuerySpecification)(list[0])), ((AstSelectOrderByClause)(list[1])), ((AstSqlUnions)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstQuerySpecification), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstSelectOrderByClause), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstSqlUnions), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstQueryExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstQueryExpression), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstQuerySpecification), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// query_expression : 
        ///    query_specification 
        /// </summary>
        public static AstQueryExpression QueryExpression(ParserRuleContext ctx, AstQuerySpecification querySpecification)
        {
            AstQueryExpression.AstQueryExpression1 result = new AstQueryExpression.AstQueryExpression1(ctx, querySpecification);
            return result;
        }
        
        /// <summary>
        /// query_expression : 
        ///    ( left=query_expression ) UNION ALL? right=query_expression 
        /// </summary>
        public static AstQueryExpression QueryExpression(ParserRuleContext ctx, AstQueryExpression left, AstQueryExpression right)
        {
            AstQueryExpression.AstQueryExpression2 result = new AstQueryExpression.AstQueryExpression2(ctx, left, right);
            return result;
        }
        
        /// <summary>
        /// query_expression : 
        ///    query_specification select_order_by_clause? unions=sql_unions 
        /// </summary>
        public static AstQueryExpression QueryExpression(ParserRuleContext ctx, AstQuerySpecification querySpecification, AstSelectOrderByClause selectOrderByClause, AstSqlUnions unions)
        {
            AstQueryExpression.AstQueryExpression3 result = new AstQueryExpression.AstQueryExpression3(ctx, querySpecification, selectOrderByClause, unions);
            return result;
        }
    }
    
    /// <summary>
    /// sql_union_def
    /// 	 : query_specification
    /// 	 | LR_BRACKET  query_expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstSqlUnionDef : AstBnfRule
    {
        
        protected static string _rule = "sql_union_def\r\n\t : query_specification\r\n\t | LR_BRACKET  query_expression  RR_BRAC" +
            "KET";
        
        /// <summary>
        /// sql_union_def : query_specification 
        /// </summary>
        public partial class AstSqlUnionDef1 : AstSqlUnionDef
        {
            
            private AstQuerySpecification _querySpecification;
            
            internal AstSqlUnionDef1(ParserRuleContext ctx, AstQuerySpecification querySpecification) : 
                    base(ctx)
            {
                _querySpecification = querySpecification;
            }
            
            public virtual AstQuerySpecification QuerySpecification
            {
                get
                {
                    return _querySpecification;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlUnionDef(this);
            }
        }
        /// <summary>
        /// sql_union_def : LR_BRACKET query_expression RR_BRACKET 
        /// </summary>
        public partial class AstSqlUnionDef2 : AstSqlUnionDef
        {
            
            private AstQueryExpression _queryExpression;
            
            internal AstSqlUnionDef2(ParserRuleContext ctx, AstQueryExpression queryExpression) : 
                    base(ctx)
            {
                _queryExpression = queryExpression;
            }
            
            public virtual AstQueryExpression QueryExpression
            {
                get
                {
                    return _queryExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSqlUnionDef(this);
            }
        }
        

        
        internal AstSqlUnionDef(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSqlUnionDef(Position p) : 
                base(p)
        {
        }
        
        internal AstSqlUnionDef(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSqlUnionDef Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSqlUnionDef.Resolve(list);
            if ((index == 2))
            {
                return new AstSqlUnionDef.AstSqlUnionDef1(ctx, ((AstQuerySpecification)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSqlUnionDef.AstSqlUnionDef2(ctx, ((AstQueryExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstQuerySpecification), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstQueryExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// sql_union_def : 
        ///    query_specification 
        /// </summary>
        public static AstSqlUnionDef SqlUnionDef(ParserRuleContext ctx, AstQuerySpecification querySpecification)
        {
            AstSqlUnionDef.AstSqlUnionDef1 result = new AstSqlUnionDef.AstSqlUnionDef1(ctx, querySpecification);
            return result;
        }
        
        /// <summary>
        /// sql_union_def : 
        ///    ( query_expression ) 
        /// </summary>
        public static AstSqlUnionDef SqlUnionDef(ParserRuleContext ctx, AstQueryExpression queryExpression)
        {
            AstSqlUnionDef.AstSqlUnionDef2 result = new AstSqlUnionDef.AstSqlUnionDef2(ctx, queryExpression);
            return result;
        }
    }
    
    /// <summary>
    /// top_clause
    /// 	 : TOP  (top_percent | top_count)  (WITH  TIES)?
    /// </summary>
    public abstract partial class AstTopClause : AstBnfRule
    {
        
        protected static string _rule = "top_clause\r\n\t : TOP  (top_percent | top_count)  (WITH  TIES)?";
        
        /// <summary>
        /// top_clause : TOP top_percent WITH TIES 
        /// </summary>
        public partial class AstTopClause1 : AstTopClause
        {
            
            private AstTopPercent _topPercent;
            
            internal AstTopClause1(ParserRuleContext ctx, AstTopPercent topPercent) : 
                    base(ctx)
            {
                _topPercent = topPercent;
            }
            
            public virtual AstTopPercent TopPercent
            {
                get
                {
                    return _topPercent;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopClause(this);
            }
        }
        /// <summary>
        /// top_clause : TOP top_count WITH TIES 
        /// </summary>
        public partial class AstTopClause2 : AstTopClause
        {
            
            private AstTopCount _topCount;
            
            internal AstTopClause2(ParserRuleContext ctx, AstTopCount topCount) : 
                    base(ctx)
            {
                _topCount = topCount;
            }
            
            public virtual AstTopCount TopCount
            {
                get
                {
                    return _topCount;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopClause(this);
            }
        }
        

        
        internal AstTopClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopClause(Position p) : 
                base(p)
        {
        }
        
        internal AstTopClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTopClause Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTopClause.Resolve(list);
            if ((index == 2))
            {
                return new AstTopClause.AstTopClause1(ctx, ((AstTopPercent)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTopClause.AstTopClause2(ctx, ((AstTopCount)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTopPercent), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTopCount), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// top_clause : 
        ///    TOP top_percent WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(ParserRuleContext ctx, AstTopPercent topPercent)
        {
            AstTopClause.AstTopClause1 result = new AstTopClause.AstTopClause1(ctx, topPercent);
            return result;
        }
        
        /// <summary>
        /// top_clause : 
        ///    TOP top_count WITH TIES 
        /// </summary>
        public static AstTopClause TopClause(ParserRuleContext ctx, AstTopCount topCount)
        {
            AstTopClause.AstTopClause2 result = new AstTopClause.AstTopClause2(ctx, topCount);
            return result;
        }
    }
    
    /// <summary>
    /// top_percent
    /// 	 : percent_constant  PERCENT
    /// 	 | LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
    /// </summary>
    public abstract partial class AstTopPercent : AstBnfRule
    {
        
        protected static string _rule = "top_percent\r\n\t : percent_constant  PERCENT\r\n\t | LR_BRACKET  topper_expression = e" +
            "xpression  RR_BRACKET  PERCENT";
        
        /// <summary>
        /// top_percent : percent_constant PERCENT 
        /// </summary>
        public partial class AstTopPercent1 : AstTopPercent
        {
            
            private AstPercentConstant _percentConstant;
            
            internal AstTopPercent1(ParserRuleContext ctx, AstPercentConstant percentConstant) : 
                    base(ctx)
            {
                _percentConstant = percentConstant;
            }
            
            public virtual AstPercentConstant PercentConstant
            {
                get
                {
                    return _percentConstant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopPercent(this);
            }
        }
        /// <summary>
        /// top_percent : LR_BRACKET topper_expression=expression RR_BRACKET PERCENT 
        /// </summary>
        public partial class AstTopPercent2 : AstTopPercent
        {
            
            private AstExpression _topperExpression;
            
            internal AstTopPercent2(ParserRuleContext ctx, AstExpression topperExpression) : 
                    base(ctx)
            {
                _topperExpression = topperExpression;
            }
            
            public virtual AstExpression TopperExpression
            {
                get
                {
                    return _topperExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopPercent(this);
            }
        }
        

        
        internal AstTopPercent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopPercent(Position p) : 
                base(p)
        {
        }
        
        internal AstTopPercent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTopPercent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTopPercent.Resolve(list);
            if ((index == 2))
            {
                return new AstTopPercent.AstTopPercent1(ctx, ((AstPercentConstant)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTopPercent.AstTopPercent2(ctx, ((AstExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstPercentConstant), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// top_percent : 
        ///    percent_constant PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(ParserRuleContext ctx, AstPercentConstant percentConstant)
        {
            AstTopPercent.AstTopPercent1 result = new AstTopPercent.AstTopPercent1(ctx, percentConstant);
            return result;
        }
        
        /// <summary>
        /// top_percent : 
        ///    ( topper_expression=expression ) PERCENT 
        /// </summary>
        public static AstTopPercent TopPercent(ParserRuleContext ctx, AstExpression topperExpression)
        {
            AstTopPercent.AstTopPercent2 result = new AstTopPercent.AstTopPercent2(ctx, topperExpression);
            return result;
        }
    }
    
    /// <summary>
    /// percent_constant
    /// 	 : real
    /// 	 | float
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstPercentConstant : AstBnfRule
    {
        
        protected static string _rule = "percent_constant\r\n\t : real\r\n\t | float\r\n\t | decimal";
        
        /// <summary>
        /// percent_constant : real 
        /// </summary>
        public partial class AstPercentConstant1 : AstPercentConstant
        {
            
            private AstReal _real;
            
            internal AstPercentConstant1(ParserRuleContext ctx, AstReal real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public virtual AstReal Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        /// <summary>
        /// percent_constant : float 
        /// </summary>
        public partial class AstPercentConstant2 : AstPercentConstant
        {
            
            private AstFloat _float;
            
            internal AstPercentConstant2(ParserRuleContext ctx, AstFloat @float) : 
                    base(ctx)
            {
                _float = @float;
            }
            
            public virtual AstFloat Float
            {
                get
                {
                    return _float;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        /// <summary>
        /// percent_constant : decimal 
        /// </summary>
        public partial class AstPercentConstant3 : AstPercentConstant
        {
            
            private AstDecimal _decimal;
            
            internal AstPercentConstant3(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPercentConstant(this);
            }
        }
        

        
        internal AstPercentConstant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPercentConstant(Position p) : 
                base(p)
        {
        }
        
        internal AstPercentConstant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPercentConstant Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPercentConstant.Resolve(list);
            if ((index == 2))
            {
                return new AstPercentConstant.AstPercentConstant1(ctx, ((AstReal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPercentConstant.AstPercentConstant2(ctx, ((AstFloat)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPercentConstant.AstPercentConstant3(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstReal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFloat), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    real 
        /// </summary>
        public static AstPercentConstant PercentConstant(ParserRuleContext ctx, AstReal real)
        {
            AstPercentConstant.AstPercentConstant1 result = new AstPercentConstant.AstPercentConstant1(ctx, real);
            return result;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    float 
        /// </summary>
        public static AstPercentConstant PercentConstant(ParserRuleContext ctx, AstFloat @float)
        {
            AstPercentConstant.AstPercentConstant2 result = new AstPercentConstant.AstPercentConstant2(ctx, @float);
            return result;
        }
        
        /// <summary>
        /// percent_constant : 
        ///    decimal 
        /// </summary>
        public static AstPercentConstant PercentConstant(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstPercentConstant.AstPercentConstant3 result = new AstPercentConstant.AstPercentConstant3(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// top_count
    /// 	 : count_constant = decimal
    /// 	 | LR_BRACKET  topcount_expression = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstTopCount : AstBnfRule
    {
        
        protected static string _rule = "top_count\r\n\t : count_constant = decimal\r\n\t | LR_BRACKET  topcount_expression = ex" +
            "pression  RR_BRACKET";
        
        /// <summary>
        /// top_count : count_constant=decimal 
        /// </summary>
        public partial class AstTopCount1 : AstTopCount
        {
            
            private AstDecimal _countConstant;
            
            internal AstTopCount1(ParserRuleContext ctx, AstDecimal countConstant) : 
                    base(ctx)
            {
                _countConstant = countConstant;
            }
            
            public virtual AstDecimal CountConstant
            {
                get
                {
                    return _countConstant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopCount(this);
            }
        }
        /// <summary>
        /// top_count : LR_BRACKET topcount_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstTopCount2 : AstTopCount
        {
            
            private AstExpression _topcountExpression;
            
            internal AstTopCount2(ParserRuleContext ctx, AstExpression topcountExpression) : 
                    base(ctx)
            {
                _topcountExpression = topcountExpression;
            }
            
            public virtual AstExpression TopcountExpression
            {
                get
                {
                    return _topcountExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTopCount(this);
            }
        }
        

        
        internal AstTopCount(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTopCount(Position p) : 
                base(p)
        {
        }
        
        internal AstTopCount(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTopCount Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTopCount.Resolve(list);
            if ((index == 2))
            {
                return new AstTopCount.AstTopCount1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTopCount.AstTopCount2(ctx, ((AstExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// top_count : 
        ///    count_constant=decimal 
        /// </summary>
        public static AstTopCount TopCount(ParserRuleContext ctx, AstDecimal countConstant)
        {
            AstTopCount.AstTopCount1 result = new AstTopCount.AstTopCount1(ctx, countConstant);
            return result;
        }
        
        /// <summary>
        /// top_count : 
        ///    ( topcount_expression=expression ) 
        /// </summary>
        public static AstTopCount TopCount(ParserRuleContext ctx, AstExpression topcountExpression)
        {
            AstTopCount.AstTopCount2 result = new AstTopCount.AstTopCount2(ctx, topcountExpression);
            return result;
        }
    }
    
    /// <summary>
    /// for_clause
    /// 	 : FOR  BROWSE
    /// 	 | for_clause_xml_raw
    /// 	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
    /// 	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
    /// 	 | for_clause_json
    /// </summary>
    public abstract partial class AstForClause : AstBnfRule
    {
        
        protected static string _rule = @"for_clause
	 : FOR  BROWSE
	 | for_clause_xml_raw
	 | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)?
	 | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)?
	 | for_clause_json";
        
        /// <summary>
        /// for_clause : FOR BROWSE 
        /// </summary>
        public partial class AstForClause1 : AstForClause
        {
            
            internal AstForClause1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : for_clause_xml_raw 
        /// </summary>
        public partial class AstForClause2 : AstForClause
        {
            
            private AstForClauseXmlRaw _forClauseXmlRaw;
            
            internal AstForClause2(ParserRuleContext ctx, AstForClauseXmlRaw forClauseXmlRaw) : 
                    base(ctx)
            {
                _forClauseXmlRaw = forClauseXmlRaw;
            }
            
            public virtual AstForClauseXmlRaw ForClauseXmlRaw
            {
                get
                {
                    return _forClauseXmlRaw;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : FOR XML EXPLICIT xml_common_directives? COMMA XMLDATA 
        /// </summary>
        public partial class AstForClause3 : AstForClause
        {
            
            private AstXmlCommonDirectives _xmlCommonDirectives;
            
            internal AstForClause3(ParserRuleContext ctx, AstXmlCommonDirectives xmlCommonDirectives) : 
                    base(ctx)
            {
                _xmlCommonDirectives = xmlCommonDirectives;
            }
            
            public virtual AstXmlCommonDirectives XmlCommonDirectives
            {
                get
                {
                    return _xmlCommonDirectives;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : FOR XML PATH LR_BRACKET stringtext RR_BRACKET xml_common_directives? COMMA ELEMENTS absent_xsinil? 
        /// </summary>
        public partial class AstForClause4 : AstForClause
        {
            
            private AstStringtext _stringtext;
            
            private AstXmlCommonDirectives _xmlCommonDirectives;
            
            private AstAbsentXsinil _absentXsinil;
            
            internal AstForClause4(ParserRuleContext ctx, AstStringtext stringtext, AstXmlCommonDirectives xmlCommonDirectives, AstAbsentXsinil absentXsinil) : 
                    base(ctx)
            {
                _stringtext = stringtext;
                _xmlCommonDirectives = xmlCommonDirectives;
                _absentXsinil = absentXsinil;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public virtual AstXmlCommonDirectives XmlCommonDirectives
            {
                get
                {
                    return _xmlCommonDirectives;
                }
            }
            
            public virtual AstAbsentXsinil AbsentXsinil
            {
                get
                {
                    return _absentXsinil;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        /// <summary>
        /// for_clause : for_clause_json 
        /// </summary>
        public partial class AstForClause5 : AstForClause
        {
            
            private AstForClauseJson _forClauseJson;
            
            internal AstForClause5(ParserRuleContext ctx, AstForClauseJson forClauseJson) : 
                    base(ctx)
            {
                _forClauseJson = forClauseJson;
            }
            
            public virtual AstForClauseJson ForClauseJson
            {
                get
                {
                    return _forClauseJson;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitForClause(this);
            }
        }
        

        
        internal AstForClause(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstForClause(Position p) : 
                base(p)
        {
        }
        
        internal AstForClause(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstForClause Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstForClause.Resolve(list);
            if ((index == 1))
            {
                return new AstForClause.AstForClause1(ctx);
            }
            if ((index == 2))
            {
                return new AstForClause.AstForClause2(ctx, ((AstForClauseXmlRaw)(list[0])));
            }
            if ((index == 2))
            {
                return new AstForClause.AstForClause3(ctx, ((AstXmlCommonDirectives)(list[0])));
            }
            if ((index == 4))
            {
                return new AstForClause.AstForClause4(ctx, ((AstStringtext)(list[0])), ((AstXmlCommonDirectives)(list[1])), ((AstAbsentXsinil)(list[2])));
            }
            if ((index == 2))
            {
                return new AstForClause.AstForClause5(ctx, ((AstForClauseJson)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstXmlCommonDirectives), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAbsentXsinil), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstForClauseXmlRaw), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstXmlCommonDirectives), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstForClauseJson), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR BROWSE 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx)
        {
            AstForClause.AstForClause1 result = new AstForClause.AstForClause1(ctx);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    for_clause_xml_raw 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstForClauseXmlRaw forClauseXmlRaw)
        {
            AstForClause.AstForClause2 result = new AstForClause.AstForClause2(ctx, forClauseXmlRaw);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR XML EXPLICIT xml_common_directives? , XMLDATA 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstXmlCommonDirectives xmlCommonDirectives)
        {
            AstForClause.AstForClause3 result = new AstForClause.AstForClause3(ctx, xmlCommonDirectives);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    FOR XML PATH ( stringtext ) xml_common_directives? , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstStringtext stringtext, AstXmlCommonDirectives xmlCommonDirectives, AstAbsentXsinil absentXsinil)
        {
            AstForClause.AstForClause4 result = new AstForClause.AstForClause4(ctx, stringtext, xmlCommonDirectives, absentXsinil);
            return result;
        }
        
        /// <summary>
        /// for_clause : 
        ///    for_clause_json 
        /// </summary>
        public static AstForClause ForClause(ParserRuleContext ctx, AstForClauseJson forClauseJson)
        {
            AstForClause.AstForClause5 result = new AstForClause.AstForClause5(ctx, forClauseJson);
            return result;
        }
    }
    
    /// <summary>
    /// xml_common_directive
    /// 	 : BINARY_KEYWORD  BASE64
    /// 	 | TYPE
    /// 	 | ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET)?
    /// </summary>
    public abstract partial class AstXmlCommonDirective : AstBnfRule
    {
        
        protected static string _rule = "xml_common_directive\r\n\t : BINARY_KEYWORD  BASE64\r\n\t | TYPE\r\n\t | ROOTWORD  (LR_BRA" +
            "CKET  stringtext  RR_BRACKET)?";
        
        /// <summary>
        /// xml_common_directive : BINARY_KEYWORD BASE64 
        /// </summary>
        public partial class AstXmlCommonDirective1 : AstXmlCommonDirective
        {
            
            internal AstXmlCommonDirective1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        /// <summary>
        /// xml_common_directive : TYPE 
        /// </summary>
        public partial class AstXmlCommonDirective2 : AstXmlCommonDirective
        {
            
            internal AstXmlCommonDirective2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        /// <summary>
        /// xml_common_directive : ROOTWORD LR_BRACKET stringtext RR_BRACKET 
        /// </summary>
        public partial class AstXmlCommonDirective3 : AstXmlCommonDirective
        {
            
            private AstStringtext _stringtext;
            
            internal AstXmlCommonDirective3(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlCommonDirective(this);
            }
        }
        

        
        internal AstXmlCommonDirective(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlCommonDirective(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlCommonDirective(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlCommonDirective Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlCommonDirective.Resolve(list);
            if ((index == 1))
            {
                return new AstXmlCommonDirective.AstXmlCommonDirective1(ctx);
            }
            if ((index == 1))
            {
                return new AstXmlCommonDirective.AstXmlCommonDirective2(ctx);
            }
            if ((index == 2))
            {
                return new AstXmlCommonDirective.AstXmlCommonDirective3(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// xml_common_directive : 
        ///    BINARY_KEYWORD BASE64 
        /// </summary>
        public static AstXmlCommonDirective XmlCommonDirective(ParserRuleContext ctx)
        {
            AstXmlCommonDirective.AstXmlCommonDirective1 result = new AstXmlCommonDirective.AstXmlCommonDirective1(ctx);
            return result;
        }
        
        /// <summary>
        /// xml_common_directive : 
        ///    ROOTWORD ( stringtext ) 
        /// </summary>
        public static AstXmlCommonDirective XmlCommonDirective(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstXmlCommonDirective.AstXmlCommonDirective3 result = new AstXmlCommonDirective.AstXmlCommonDirective3(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// clause_json_info
    /// 	 : ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET)
    /// 	 | INCLUDE_NULL_VALUES
    /// 	 | WITHOUT_ARRAY_WRAPPER
    /// </summary>
    public abstract partial class AstClauseJsonInfo : AstBnfRule
    {
        
        protected static string _rule = "clause_json_info\r\n\t : ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET)\r\n\t | INCLUDE" +
            "_NULL_VALUES\r\n\t | WITHOUT_ARRAY_WRAPPER";
        
        /// <summary>
        /// clause_json_info : ROOTWORD LR_BRACKET stringtext RR_BRACKET 
        /// </summary>
        public partial class AstClauseJsonInfo1 : AstClauseJsonInfo
        {
            
            private AstStringtext _stringtext;
            
            internal AstClauseJsonInfo1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        /// <summary>
        /// clause_json_info : INCLUDE_NULL_VALUES 
        /// </summary>
        public partial class AstClauseJsonInfo2 : AstClauseJsonInfo
        {
            
            internal AstClauseJsonInfo2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        /// <summary>
        /// clause_json_info : WITHOUT_ARRAY_WRAPPER 
        /// </summary>
        public partial class AstClauseJsonInfo3 : AstClauseJsonInfo
        {
            
            internal AstClauseJsonInfo3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitClauseJsonInfo(this);
            }
        }
        

        
        internal AstClauseJsonInfo(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstClauseJsonInfo(Position p) : 
                base(p)
        {
        }
        
        internal AstClauseJsonInfo(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstClauseJsonInfo Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstClauseJsonInfo.Resolve(list);
            if ((index == 2))
            {
                return new AstClauseJsonInfo.AstClauseJsonInfo1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 1))
            {
                return new AstClauseJsonInfo.AstClauseJsonInfo2(ctx);
            }
            if ((index == 1))
            {
                return new AstClauseJsonInfo.AstClauseJsonInfo3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// clause_json_info : 
        ///    ROOTWORD ( stringtext ) 
        /// </summary>
        public static AstClauseJsonInfo ClauseJsonInfo(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstClauseJsonInfo.AstClauseJsonInfo1 result = new AstClauseJsonInfo.AstClauseJsonInfo1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// clause_json_info : 
        ///    INCLUDE_NULL_VALUES 
        /// </summary>
        public static AstClauseJsonInfo ClauseJsonInfo(ParserRuleContext ctx)
        {
            AstClauseJsonInfo.AstClauseJsonInfo2 result = new AstClauseJsonInfo.AstClauseJsonInfo2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// order_by_expression
    /// 	 : order_by = expression  (ascending = ASC | descending = DESC)?
    /// </summary>
    public abstract partial class AstOrderByExpression : AstBnfRule
    {
        
        protected static string _rule = "order_by_expression\r\n\t : order_by = expression  (ascending = ASC | descending = D" +
            "ESC)?";
        
        /// <summary>
        /// order_by_expression : order_by=expression ascending=ASC 
        /// </summary>
        public partial class AstOrderByExpression1 : AstOrderByExpression
        {
            
            private AstExpression _orderBy;
            
            internal AstOrderByExpression1(ParserRuleContext ctx, AstExpression orderBy) : 
                    base(ctx)
            {
                _orderBy = orderBy;
            }
            
            public virtual AstExpression OrderBy
            {
                get
                {
                    return _orderBy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOrderByExpression(this);
            }
        }
        /// <summary>
        /// order_by_expression : order_by=expression descending=DESC 
        /// </summary>
        public partial class AstOrderByExpression2 : AstOrderByExpression
        {
            
            private AstExpression _orderBy;
            
            internal AstOrderByExpression2(ParserRuleContext ctx, AstExpression orderBy) : 
                    base(ctx)
            {
                _orderBy = orderBy;
            }
            
            public virtual AstExpression OrderBy
            {
                get
                {
                    return _orderBy;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOrderByExpression(this);
            }
        }
        

        
        internal AstOrderByExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOrderByExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstOrderByExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstOrderByExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstOrderByExpression.Resolve(list);
            if ((index == 2))
            {
                return new AstOrderByExpression.AstOrderByExpression1(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstOrderByExpression.AstOrderByExpression2(ctx, ((AstExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// order_by_expression : 
        ///    order_by=expression ascending=ASC 
        /// </summary>
        public static AstOrderByExpression OrderByExpression(ParserRuleContext ctx, AstExpression orderBy)
        {
            AstOrderByExpression.AstOrderByExpression1 result = new AstOrderByExpression.AstOrderByExpression1(ctx, orderBy);
            return result;
        }
    }
    
    /// <summary>
    /// grouping_sets_item
    /// 	 : grouping_sets_list
    /// 	 | LR_BRACKET  grouping_sets_list?  RR_BRACKET
    /// </summary>
    public abstract partial class AstGroupingSetsItem : AstBnfRule
    {
        
        protected static string _rule = "grouping_sets_item\r\n\t : grouping_sets_list\r\n\t | LR_BRACKET  grouping_sets_list?  " +
            "RR_BRACKET";
        
        /// <summary>
        /// grouping_sets_item : grouping_sets_list 
        /// </summary>
        public partial class AstGroupingSetsItem1 : AstGroupingSetsItem
        {
            
            private AstGroupingSetsList _groupingSetsList;
            
            internal AstGroupingSetsItem1(ParserRuleContext ctx, AstGroupingSetsList groupingSetsList) : 
                    base(ctx)
            {
                _groupingSetsList = groupingSetsList;
            }
            
            public virtual AstGroupingSetsList GroupingSetsList
            {
                get
                {
                    return _groupingSetsList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGroupingSetsItem(this);
            }
        }
        /// <summary>
        /// grouping_sets_item : LR_BRACKET grouping_sets_list? RR_BRACKET 
        /// </summary>
        public partial class AstGroupingSetsItem2 : AstGroupingSetsItem
        {
            
            private AstGroupingSetsList _groupingSetsList;
            
            internal AstGroupingSetsItem2(ParserRuleContext ctx, AstGroupingSetsList groupingSetsList) : 
                    base(ctx)
            {
                _groupingSetsList = groupingSetsList;
            }
            
            public virtual AstGroupingSetsList GroupingSetsList
            {
                get
                {
                    return _groupingSetsList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitGroupingSetsItem(this);
            }
        }
        

        
        internal AstGroupingSetsItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstGroupingSetsItem(Position p) : 
                base(p)
        {
        }
        
        internal AstGroupingSetsItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstGroupingSetsItem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstGroupingSetsItem.Resolve(list);
            if ((index == 2))
            {
                return new AstGroupingSetsItem.AstGroupingSetsItem1(ctx, ((AstGroupingSetsList)(list[0])));
            }
            if ((index == 2))
            {
                return new AstGroupingSetsItem.AstGroupingSetsItem2(ctx, ((AstGroupingSetsList)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstGroupingSetsList), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstGroupingSetsList), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// grouping_sets_item : 
        ///    grouping_sets_list 
        /// </summary>
        public static AstGroupingSetsItem GroupingSetsItem(ParserRuleContext ctx, AstGroupingSetsList groupingSetsList)
        {
            AstGroupingSetsItem.AstGroupingSetsItem1 result = new AstGroupingSetsItem.AstGroupingSetsItem1(ctx, groupingSetsList);
            return result;
        }
    }
    
    /// <summary>
    /// update_option
    /// 	 : FAST  number_rows = decimal
    /// 	 | MAXDOP  number_of_processors = decimal
    /// 	 | MAXRECURSION  number_recursion = decimal
    /// 	 | USE  PLAN  stringtext
    /// 	 | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET
    /// 	 | update_option_enum
    /// </summary>
    public abstract partial class AstUpdateOption : AstBnfRule
    {
        
        protected static string _rule = "update_option\r\n\t : FAST  number_rows = decimal\r\n\t | MAXDOP  number_of_processors " +
            "= decimal\r\n\t | MAXRECURSION  number_recursion = decimal\r\n\t | USE  PLAN  stringte" +
            "xt\r\n\t | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET\r\n\t | update_opt" +
            "ion_enum";
        
        /// <summary>
        /// update_option : FAST number_rows=decimal 
        /// </summary>
        public partial class AstUpdateOption1 : AstUpdateOption
        {
            
            private AstDecimal _numberRows;
            
            internal AstUpdateOption1(ParserRuleContext ctx, AstDecimal numberRows) : 
                    base(ctx)
            {
                _numberRows = numberRows;
            }
            
            public virtual AstDecimal NumberRows
            {
                get
                {
                    return _numberRows;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : MAXDOP number_of_processors=decimal 
        /// </summary>
        public partial class AstUpdateOption2 : AstUpdateOption
        {
            
            private AstDecimal _numberOfProcessors;
            
            internal AstUpdateOption2(ParserRuleContext ctx, AstDecimal numberOfProcessors) : 
                    base(ctx)
            {
                _numberOfProcessors = numberOfProcessors;
            }
            
            public virtual AstDecimal NumberOfProcessors
            {
                get
                {
                    return _numberOfProcessors;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : MAXRECURSION number_recursion=decimal 
        /// </summary>
        public partial class AstUpdateOption3 : AstUpdateOption
        {
            
            private AstDecimal _numberRecursion;
            
            internal AstUpdateOption3(ParserRuleContext ctx, AstDecimal numberRecursion) : 
                    base(ctx)
            {
                _numberRecursion = numberRecursion;
            }
            
            public virtual AstDecimal NumberRecursion
            {
                get
                {
                    return _numberRecursion;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : USE PLAN stringtext 
        /// </summary>
        public partial class AstUpdateOption4 : AstUpdateOption
        {
            
            private AstStringtext _stringtext;
            
            internal AstUpdateOption4(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : OPTIMIZE FOR LR_BRACKET optimize_for_args RR_BRACKET 
        /// </summary>
        public partial class AstUpdateOption5 : AstUpdateOption
        {
            
            private AstOptimizeForArgs _optimizeForArgs;
            
            internal AstUpdateOption5(ParserRuleContext ctx, AstOptimizeForArgs optimizeForArgs) : 
                    base(ctx)
            {
                _optimizeForArgs = optimizeForArgs;
            }
            
            public virtual AstOptimizeForArgs OptimizeForArgs
            {
                get
                {
                    return _optimizeForArgs;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        /// <summary>
        /// update_option : update_option_enum 
        /// </summary>
        public partial class AstUpdateOption6 : AstUpdateOption
        {
            
            private AstUpdateOptionEnum _updateOptionEnum;
            
            internal AstUpdateOption6(ParserRuleContext ctx, AstUpdateOptionEnum updateOptionEnum) : 
                    base(ctx)
            {
                _updateOptionEnum = updateOptionEnum;
            }
            
            public virtual AstUpdateOptionEnum UpdateOptionEnum
            {
                get
                {
                    return _updateOptionEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdateOption(this);
            }
        }
        

        
        internal AstUpdateOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdateOption(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdateOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdateOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdateOption.Resolve(list);
            if ((index == 2))
            {
                return new AstUpdateOption.AstUpdateOption1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateOption.AstUpdateOption2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateOption.AstUpdateOption3(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateOption.AstUpdateOption4(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateOption.AstUpdateOption5(ctx, ((AstOptimizeForArgs)(list[0])));
            }
            if ((index == 2))
            {
                return new AstUpdateOption.AstUpdateOption6(ctx, ((AstUpdateOptionEnum)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOptimizeForArgs), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdateOptionEnum), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// update_option : 
        ///    FAST number_rows=decimal 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstDecimal numberRows)
        {
            AstUpdateOption.AstUpdateOption1 result = new AstUpdateOption.AstUpdateOption1(ctx, numberRows);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    USE PLAN stringtext 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstUpdateOption.AstUpdateOption4 result = new AstUpdateOption.AstUpdateOption4(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    OPTIMIZE FOR ( optimize_for_args ) 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstOptimizeForArgs optimizeForArgs)
        {
            AstUpdateOption.AstUpdateOption5 result = new AstUpdateOption.AstUpdateOption5(ctx, optimizeForArgs);
            return result;
        }
        
        /// <summary>
        /// update_option : 
        ///    update_option_enum 
        /// </summary>
        public static AstUpdateOption UpdateOption(ParserRuleContext ctx, AstUpdateOptionEnum updateOptionEnum)
        {
            AstUpdateOption.AstUpdateOption6 result = new AstUpdateOption.AstUpdateOption6(ctx, updateOptionEnum);
            return result;
        }
    }
    
    /// <summary>
    /// asterisk
    /// 	 : star_asterisk
    /// 	 | table_asterisk
    /// 	 | updated_asterisk
    /// </summary>
    public abstract partial class AstAsterisk : AstBnfRule
    {
        
        protected static string _rule = "asterisk\r\n\t : star_asterisk\r\n\t | table_asterisk\r\n\t | updated_asterisk";
        
        /// <summary>
        /// asterisk : star_asterisk 
        /// </summary>
        public partial class AstAsterisk1 : AstAsterisk
        {
            
            private AstStarAsterisk _starAsterisk;
            
            internal AstAsterisk1(ParserRuleContext ctx, AstStarAsterisk starAsterisk) : 
                    base(ctx)
            {
                _starAsterisk = starAsterisk;
            }
            
            public virtual AstStarAsterisk StarAsterisk
            {
                get
                {
                    return _starAsterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        /// <summary>
        /// asterisk : table_asterisk 
        /// </summary>
        public partial class AstAsterisk2 : AstAsterisk
        {
            
            private AstTableAsterisk _tableAsterisk;
            
            internal AstAsterisk2(ParserRuleContext ctx, AstTableAsterisk tableAsterisk) : 
                    base(ctx)
            {
                _tableAsterisk = tableAsterisk;
            }
            
            public virtual AstTableAsterisk TableAsterisk
            {
                get
                {
                    return _tableAsterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        /// <summary>
        /// asterisk : updated_asterisk 
        /// </summary>
        public partial class AstAsterisk3 : AstAsterisk
        {
            
            private AstUpdatedAsterisk _updatedAsterisk;
            
            internal AstAsterisk3(ParserRuleContext ctx, AstUpdatedAsterisk updatedAsterisk) : 
                    base(ctx)
            {
                _updatedAsterisk = updatedAsterisk;
            }
            
            public virtual AstUpdatedAsterisk UpdatedAsterisk
            {
                get
                {
                    return _updatedAsterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAsterisk(this);
            }
        }
        

        
        internal AstAsterisk(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAsterisk(Position p) : 
                base(p)
        {
        }
        
        internal AstAsterisk(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAsterisk Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAsterisk.Resolve(list);
            if ((index == 2))
            {
                return new AstAsterisk.AstAsterisk1(ctx, ((AstStarAsterisk)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAsterisk.AstAsterisk2(ctx, ((AstTableAsterisk)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAsterisk.AstAsterisk3(ctx, ((AstUpdatedAsterisk)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStarAsterisk), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableAsterisk), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstUpdatedAsterisk), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// asterisk : 
        ///    star_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(ParserRuleContext ctx, AstStarAsterisk starAsterisk)
        {
            AstAsterisk.AstAsterisk1 result = new AstAsterisk.AstAsterisk1(ctx, starAsterisk);
            return result;
        }
        
        /// <summary>
        /// asterisk : 
        ///    table_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(ParserRuleContext ctx, AstTableAsterisk tableAsterisk)
        {
            AstAsterisk.AstAsterisk2 result = new AstAsterisk.AstAsterisk2(ctx, tableAsterisk);
            return result;
        }
        
        /// <summary>
        /// asterisk : 
        ///    updated_asterisk 
        /// </summary>
        public static AstAsterisk Asterisk(ParserRuleContext ctx, AstUpdatedAsterisk updatedAsterisk)
        {
            AstAsterisk.AstAsterisk3 result = new AstAsterisk.AstAsterisk3(ctx, updatedAsterisk);
            return result;
        }
    }
    
    /// <summary>
    /// column_elem_target
    /// 	 : full_column_name
    /// 	 | DOLLAR  IDENTITY
    /// 	 | DOLLAR  ROWGUID
    /// 	 | NULL_
    /// </summary>
    public abstract partial class AstColumnElemTarget : AstBnfRule
    {
        
        protected static string _rule = "column_elem_target\r\n\t : full_column_name\r\n\t | DOLLAR  IDENTITY\r\n\t | DOLLAR  ROWGU" +
            "ID\r\n\t | NULL_";
        
        /// <summary>
        /// column_elem_target : full_column_name 
        /// </summary>
        public partial class AstColumnElemTarget1 : AstColumnElemTarget
        {
            
            private AstFullColumnName _fullColumnName;
            
            internal AstColumnElemTarget1(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : DOLLAR IDENTITY 
        /// </summary>
        public partial class AstColumnElemTarget2 : AstColumnElemTarget
        {
            
            internal AstColumnElemTarget2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : DOLLAR ROWGUID 
        /// </summary>
        public partial class AstColumnElemTarget3 : AstColumnElemTarget
        {
            
            internal AstColumnElemTarget3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        /// <summary>
        /// column_elem_target : NULL_ 
        /// </summary>
        public partial class AstColumnElemTarget4 : AstColumnElemTarget
        {
            
            internal AstColumnElemTarget4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitColumnElemTarget(this);
            }
        }
        

        
        internal AstColumnElemTarget(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstColumnElemTarget(Position p) : 
                base(p)
        {
        }
        
        internal AstColumnElemTarget(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstColumnElemTarget Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstColumnElemTarget.Resolve(list);
            if ((index == 2))
            {
                return new AstColumnElemTarget.AstColumnElemTarget1(ctx, ((AstFullColumnName)(list[0])));
            }
            if ((index == 1))
            {
                return new AstColumnElemTarget.AstColumnElemTarget2(ctx);
            }
            if ((index == 1))
            {
                return new AstColumnElemTarget.AstColumnElemTarget3(ctx);
            }
            if ((index == 1))
            {
                return new AstColumnElemTarget.AstColumnElemTarget4(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// column_elem_target : 
        ///    full_column_name 
        /// </summary>
        public static AstColumnElemTarget ColumnElemTarget(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstColumnElemTarget.AstColumnElemTarget1 result = new AstColumnElemTarget.AstColumnElemTarget1(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// column_elem_target : 
        ///    $ IDENTITY 
        /// </summary>
        public static AstColumnElemTarget ColumnElemTarget(ParserRuleContext ctx)
        {
            AstColumnElemTarget.AstColumnElemTarget2 result = new AstColumnElemTarget.AstColumnElemTarget2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// udt_elem
    /// 	 : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias?
    /// 	 | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_alias?
    /// </summary>
    public abstract partial class AstUdtElem : AstBnfRule
    {
        
        protected static string _rule = "udt_elem\r\n\t : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_co" +
            "lumn_alias?\r\n\t | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_argumen" +
            "ts?  as_column_alias?";
        
        /// <summary>
        /// udt_elem : udt_column_id DOT non_static_attr_id udt_method_arguments as_column_alias? 
        /// </summary>
        public partial class AstUdtElem1 : AstUdtElem
        {
            
            private AstUdtColumnId _udtColumnId;
            
            private AstNonStaticAttrId _nonStaticAttrId;
            
            private AstUdtMethodArguments _udtMethodArguments;
            
            private AstAsColumnAlias _asColumnAlias;
            
            internal AstUdtElem1(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstNonStaticAttrId nonStaticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _nonStaticAttrId = nonStaticAttrId;
                _udtMethodArguments = udtMethodArguments;
                _asColumnAlias = asColumnAlias;
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstNonStaticAttrId NonStaticAttrId
            {
                get
                {
                    return _nonStaticAttrId;
                }
            }
            
            public virtual AstUdtMethodArguments UdtMethodArguments
            {
                get
                {
                    return _udtMethodArguments;
                }
            }
            
            public virtual AstAsColumnAlias AsColumnAlias
            {
                get
                {
                    return _asColumnAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUdtElem(this);
            }
        }
        /// <summary>
        /// udt_elem : udt_column_id DOUBLE_COLON static_attr_id udt_method_arguments? as_column_alias? 
        /// </summary>
        public partial class AstUdtElem2 : AstUdtElem
        {
            
            private AstUdtColumnId _udtColumnId;
            
            private AstStaticAttrId _staticAttrId;
            
            private AstUdtMethodArguments _udtMethodArguments;
            
            private AstAsColumnAlias _asColumnAlias;
            
            internal AstUdtElem2(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstStaticAttrId staticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias) : 
                    base(ctx)
            {
                _udtColumnId = udtColumnId;
                _staticAttrId = staticAttrId;
                _udtMethodArguments = udtMethodArguments;
                _asColumnAlias = asColumnAlias;
            }
            
            public virtual AstUdtColumnId UdtColumnId
            {
                get
                {
                    return _udtColumnId;
                }
            }
            
            public virtual AstStaticAttrId StaticAttrId
            {
                get
                {
                    return _staticAttrId;
                }
            }
            
            public virtual AstUdtMethodArguments UdtMethodArguments
            {
                get
                {
                    return _udtMethodArguments;
                }
            }
            
            public virtual AstAsColumnAlias AsColumnAlias
            {
                get
                {
                    return _asColumnAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUdtElem(this);
            }
        }
        

        
        internal AstUdtElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUdtElem(Position p) : 
                base(p)
        {
        }
        
        internal AstUdtElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUdtElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUdtElem.Resolve(list);
            if ((index == 5))
            {
                return new AstUdtElem.AstUdtElem1(ctx, ((AstUdtColumnId)(list[0])), ((AstNonStaticAttrId)(list[1])), ((AstUdtMethodArguments)(list[2])), ((AstAsColumnAlias)(list[3])));
            }
            if ((index == 5))
            {
                return new AstUdtElem.AstUdtElem2(ctx, ((AstUdtColumnId)(list[0])), ((AstStaticAttrId)(list[1])), ((AstUdtMethodArguments)(list[2])), ((AstAsColumnAlias)(list[3])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstNonStaticAttrId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstUdtMethodArguments), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstAsColumnAlias), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstUdtColumnId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStaticAttrId), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstUdtMethodArguments), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstAsColumnAlias), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// udt_elem : 
        ///    udt_column_id . non_static_attr_id udt_method_arguments as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstNonStaticAttrId nonStaticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            AstUdtElem.AstUdtElem1 result = new AstUdtElem.AstUdtElem1(ctx, udtColumnId, nonStaticAttrId, udtMethodArguments, asColumnAlias);
            return result;
        }
        
        /// <summary>
        /// udt_elem : 
        ///    udt_column_id :: static_attr_id udt_method_arguments? as_column_alias? 
        /// </summary>
        public static AstUdtElem UdtElem(ParserRuleContext ctx, AstUdtColumnId udtColumnId, AstStaticAttrId staticAttrId, AstUdtMethodArguments udtMethodArguments, AstAsColumnAlias asColumnAlias)
        {
            AstUdtElem.AstUdtElem2 result = new AstUdtElem.AstUdtElem2(ctx, udtColumnId, staticAttrId, udtMethodArguments, asColumnAlias);
            return result;
        }
    }
    
    /// <summary>
    /// expression_elem
    /// 	 : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression
    /// 	 | expressionAs = expression  as_column_alias?
    /// </summary>
    public abstract partial class AstExpressionElem : AstBnfRule
    {
        
        protected static string _rule = "expression_elem\r\n\t : leftAlias = column_alias  eq = EQUAL  leftAssignment = expre" +
            "ssion\r\n\t | expressionAs = expression  as_column_alias?";
        
        /// <summary>
        /// expression_elem : leftAlias=column_alias eq=EQUAL leftAssignment=expression 
        /// </summary>
        public partial class AstExpressionElem1 : AstExpressionElem
        {
            
            private AstColumnAlias _leftAlias;
            
            private AstExpression _leftAssignment;
            
            internal AstExpressionElem1(ParserRuleContext ctx, AstColumnAlias leftAlias, AstExpression leftAssignment) : 
                    base(ctx)
            {
                _leftAlias = leftAlias;
                _leftAssignment = leftAssignment;
            }
            
            public virtual AstColumnAlias Leftalias
            {
                get
                {
                    return _leftAlias;
                }
            }
            
            public virtual AstExpression Leftassignment
            {
                get
                {
                    return _leftAssignment;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionElem(this);
            }
        }
        /// <summary>
        /// expression_elem : expressionAs=expression as_column_alias? 
        /// </summary>
        public partial class AstExpressionElem2 : AstExpressionElem
        {
            
            private AstExpression _expressionAs;
            
            private AstAsColumnAlias _asColumnAlias;
            
            internal AstExpressionElem2(ParserRuleContext ctx, AstExpression expressionAs, AstAsColumnAlias asColumnAlias) : 
                    base(ctx)
            {
                _expressionAs = expressionAs;
                _asColumnAlias = asColumnAlias;
            }
            
            public virtual AstExpression Expressionas
            {
                get
                {
                    return _expressionAs;
                }
            }
            
            public virtual AstAsColumnAlias AsColumnAlias
            {
                get
                {
                    return _asColumnAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionElem(this);
            }
        }
        

        
        internal AstExpressionElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpressionElem(Position p) : 
                base(p)
        {
        }
        
        internal AstExpressionElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExpressionElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExpressionElem.Resolve(list);
            if ((index == 3))
            {
                return new AstExpressionElem.AstExpressionElem1(ctx, ((AstColumnAlias)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstExpressionElem.AstExpressionElem2(ctx, ((AstExpression)(list[0])), ((AstAsColumnAlias)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstColumnAlias), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsColumnAlias), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// expression_elem : 
        ///    leftAlias=column_alias eq=EQUAL leftAssignment=expression 
        /// </summary>
        public static AstExpressionElem ExpressionElem(ParserRuleContext ctx, AstColumnAlias leftAlias, AstExpression leftAssignment)
        {
            AstExpressionElem.AstExpressionElem1 result = new AstExpressionElem.AstExpressionElem1(ctx, leftAlias, leftAssignment);
            return result;
        }
        
        /// <summary>
        /// expression_elem : 
        ///    expressionAs=expression as_column_alias? 
        /// </summary>
        public static AstExpressionElem ExpressionElem(ParserRuleContext ctx, AstExpression expressionAs, AstAsColumnAlias asColumnAlias)
        {
            AstExpressionElem.AstExpressionElem2 result = new AstExpressionElem.AstExpressionElem2(ctx, expressionAs, asColumnAlias);
            return result;
        }
    }
    
    /// <summary>
    /// select_list_elem
    /// 	 : asterisk
    /// 	 | column_elem
    /// 	 | udt_elem
    /// 	 | expression_assign_elem
    /// 	 | expression_elem
    /// </summary>
    public abstract partial class AstSelectListElem : AstBnfRule
    {
        
        protected static string _rule = "select_list_elem\r\n\t : asterisk\r\n\t | column_elem\r\n\t | udt_elem\r\n\t | expression_ass" +
            "ign_elem\r\n\t | expression_elem";
        
        /// <summary>
        /// select_list_elem : asterisk 
        /// </summary>
        public partial class AstSelectListElem1 : AstSelectListElem
        {
            
            private AstAsterisk _asterisk;
            
            internal AstSelectListElem1(ParserRuleContext ctx, AstAsterisk asterisk) : 
                    base(ctx)
            {
                _asterisk = asterisk;
            }
            
            public virtual AstAsterisk Asterisk
            {
                get
                {
                    return _asterisk;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : column_elem 
        /// </summary>
        public partial class AstSelectListElem2 : AstSelectListElem
        {
            
            private AstColumnElem _columnElem;
            
            internal AstSelectListElem2(ParserRuleContext ctx, AstColumnElem columnElem) : 
                    base(ctx)
            {
                _columnElem = columnElem;
            }
            
            public virtual AstColumnElem ColumnElem
            {
                get
                {
                    return _columnElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : udt_elem 
        /// </summary>
        public partial class AstSelectListElem3 : AstSelectListElem
        {
            
            private AstUdtElem _udtElem;
            
            internal AstSelectListElem3(ParserRuleContext ctx, AstUdtElem udtElem) : 
                    base(ctx)
            {
                _udtElem = udtElem;
            }
            
            public virtual AstUdtElem UdtElem
            {
                get
                {
                    return _udtElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : expression_assign_elem 
        /// </summary>
        public partial class AstSelectListElem4 : AstSelectListElem
        {
            
            private AstExpressionAssignElem _expressionAssignElem;
            
            internal AstSelectListElem4(ParserRuleContext ctx, AstExpressionAssignElem expressionAssignElem) : 
                    base(ctx)
            {
                _expressionAssignElem = expressionAssignElem;
            }
            
            public virtual AstExpressionAssignElem ExpressionAssignElem
            {
                get
                {
                    return _expressionAssignElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        /// <summary>
        /// select_list_elem : expression_elem 
        /// </summary>
        public partial class AstSelectListElem5 : AstSelectListElem
        {
            
            private AstExpressionElem _expressionElem;
            
            internal AstSelectListElem5(ParserRuleContext ctx, AstExpressionElem expressionElem) : 
                    base(ctx)
            {
                _expressionElem = expressionElem;
            }
            
            public virtual AstExpressionElem ExpressionElem
            {
                get
                {
                    return _expressionElem;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSelectListElem(this);
            }
        }
        

        
        internal AstSelectListElem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSelectListElem(Position p) : 
                base(p)
        {
        }
        
        internal AstSelectListElem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSelectListElem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSelectListElem.Resolve(list);
            if ((index == 2))
            {
                return new AstSelectListElem.AstSelectListElem1(ctx, ((AstAsterisk)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSelectListElem.AstSelectListElem2(ctx, ((AstColumnElem)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSelectListElem.AstSelectListElem3(ctx, ((AstUdtElem)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSelectListElem.AstSelectListElem4(ctx, ((AstExpressionAssignElem)(list[0])));
            }
            if ((index == 2))
            {
                return new AstSelectListElem.AstSelectListElem5(ctx, ((AstExpressionElem)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAsterisk), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstColumnElem), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstUdtElem), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionAssignElem), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionElem), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    asterisk 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstAsterisk asterisk)
        {
            AstSelectListElem.AstSelectListElem1 result = new AstSelectListElem.AstSelectListElem1(ctx, asterisk);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    column_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstColumnElem columnElem)
        {
            AstSelectListElem.AstSelectListElem2 result = new AstSelectListElem.AstSelectListElem2(ctx, columnElem);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    udt_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstUdtElem udtElem)
        {
            AstSelectListElem.AstSelectListElem3 result = new AstSelectListElem.AstSelectListElem3(ctx, udtElem);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    expression_assign_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstExpressionAssignElem expressionAssignElem)
        {
            AstSelectListElem.AstSelectListElem4 result = new AstSelectListElem.AstSelectListElem4(ctx, expressionAssignElem);
            return result;
        }
        
        /// <summary>
        /// select_list_elem : 
        ///    expression_elem 
        /// </summary>
        public static AstSelectListElem SelectListElem(ParserRuleContext ctx, AstExpressionElem expressionElem)
        {
            AstSelectListElem.AstSelectListElem5 result = new AstSelectListElem.AstSelectListElem5(ctx, expressionElem);
            return result;
        }
    }
    
    /// <summary>
    /// table_source
    /// 	 : table_source_item_joined
    /// 	 | LR_BRACKET  table_source  RR_BRACKET
    /// </summary>
    public abstract partial class AstTableSource : AstBnfRule
    {
        
        protected static string _rule = "table_source\r\n\t : table_source_item_joined\r\n\t | LR_BRACKET  table_source  RR_BRAC" +
            "KET";
        
        /// <summary>
        /// table_source : table_source_item_joined 
        /// </summary>
        public partial class AstTableSource1 : AstTableSource
        {
            
            private AstTableSourceItemJoined _tableSourceItemJoined;
            
            internal AstTableSource1(ParserRuleContext ctx, AstTableSourceItemJoined tableSourceItemJoined) : 
                    base(ctx)
            {
                _tableSourceItemJoined = tableSourceItemJoined;
            }
            
            public virtual AstTableSourceItemJoined TableSourceItemJoined
            {
                get
                {
                    return _tableSourceItemJoined;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSource(this);
            }
        }
        /// <summary>
        /// table_source : LR_BRACKET table_source RR_BRACKET 
        /// </summary>
        public partial class AstTableSource2 : AstTableSource
        {
            
            private AstTableSource _tableSource;
            
            internal AstTableSource2(ParserRuleContext ctx, AstTableSource tableSource) : 
                    base(ctx)
            {
                _tableSource = tableSource;
            }
            
            public virtual AstTableSource TableSource
            {
                get
                {
                    return _tableSource;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSource(this);
            }
        }
        

        
        internal AstTableSource(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSource(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSource(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableSource Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableSource.Resolve(list);
            if ((index == 2))
            {
                return new AstTableSource.AstTableSource1(ctx, ((AstTableSourceItemJoined)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableSource.AstTableSource2(ctx, ((AstTableSource)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableSourceItemJoined), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableSource), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_source : 
        ///    table_source_item_joined 
        /// </summary>
        public static AstTableSource TableSource(ParserRuleContext ctx, AstTableSourceItemJoined tableSourceItemJoined)
        {
            AstTableSource.AstTableSource1 result = new AstTableSource.AstTableSource1(ctx, tableSourceItemJoined);
            return result;
        }
        
        /// <summary>
        /// table_source : 
        ///    ( table_source ) 
        /// </summary>
        public static AstTableSource TableSource(ParserRuleContext ctx, AstTableSource tableSource)
        {
            AstTableSource.AstTableSource2 result = new AstTableSource.AstTableSource2(ctx, tableSource);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item_joined
    /// 	 : table_source_item  joins += join_part
    /// 	 | LR_BRACKET  table_source_item_joined  RR_BRACKET  joins += join_part
    /// </summary>
    public abstract partial class AstTableSourceItemJoined : AstBnfRule
    {
        
        protected static string _rule = "table_source_item_joined\r\n\t : table_source_item  joins += join_part\r\n\t | LR_BRACK" +
            "ET  table_source_item_joined  RR_BRACKET  joins += join_part";
        
        /// <summary>
        /// table_source_item_joined : table_source_item joins=join_part 
        /// </summary>
        public partial class AstTableSourceItemJoined1 : AstTableSourceItemJoined
        {
            
            private AstTableSourceItem _tableSourceItem;
            
            private AstJoinPart _joins;
            
            internal AstTableSourceItemJoined1(ParserRuleContext ctx, AstTableSourceItem tableSourceItem, AstJoinPart joins) : 
                    base(ctx)
            {
                _tableSourceItem = tableSourceItem;
                _joins = joins;
            }
            
            public virtual AstTableSourceItem TableSourceItem
            {
                get
                {
                    return _tableSourceItem;
                }
            }
            
            public virtual AstJoinPart Joins
            {
                get
                {
                    return _joins;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItemJoined(this);
            }
        }
        /// <summary>
        /// table_source_item_joined : LR_BRACKET table_source_item_joined RR_BRACKET joins=join_part 
        /// </summary>
        public partial class AstTableSourceItemJoined2 : AstTableSourceItemJoined
        {
            
            private AstTableSourceItemJoined _tableSourceItemJoined;
            
            private AstJoinPart _joins;
            
            internal AstTableSourceItemJoined2(ParserRuleContext ctx, AstTableSourceItemJoined tableSourceItemJoined, AstJoinPart joins) : 
                    base(ctx)
            {
                _tableSourceItemJoined = tableSourceItemJoined;
                _joins = joins;
            }
            
            public virtual AstTableSourceItemJoined TableSourceItemJoined
            {
                get
                {
                    return _tableSourceItemJoined;
                }
            }
            
            public virtual AstJoinPart Joins
            {
                get
                {
                    return _joins;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItemJoined(this);
            }
        }
        

        
        internal AstTableSourceItemJoined(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItemJoined(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSourceItemJoined(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableSourceItemJoined Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableSourceItemJoined.Resolve(list);
            if ((index == 3))
            {
                return new AstTableSourceItemJoined.AstTableSourceItemJoined1(ctx, ((AstTableSourceItem)(list[0])), ((AstJoinPart)(list[1])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItemJoined.AstTableSourceItemJoined2(ctx, ((AstTableSourceItemJoined)(list[0])), ((AstJoinPart)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstTableSourceItem), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstJoinPart), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstTableSourceItemJoined), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstJoinPart), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_source_item_joined : 
        ///    table_source_item joins=join_part 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(ParserRuleContext ctx, AstTableSourceItem tableSourceItem, AstJoinPart joins)
        {
            AstTableSourceItemJoined.AstTableSourceItemJoined1 result = new AstTableSourceItemJoined.AstTableSourceItemJoined1(ctx, tableSourceItem, joins);
            return result;
        }
        
        /// <summary>
        /// table_source_item_joined : 
        ///    ( table_source_item_joined ) joins=join_part 
        /// </summary>
        public static AstTableSourceItemJoined TableSourceItemJoined(ParserRuleContext ctx, AstTableSourceItemJoined tableSourceItemJoined, AstJoinPart joins)
        {
            AstTableSourceItemJoined.AstTableSourceItemJoined2 result = new AstTableSourceItemJoined.AstTableSourceItemJoined2(ctx, tableSourceItemJoined, joins);
            return result;
        }
    }
    
    /// <summary>
    /// table_source_item
    /// 	 : complete_table_ref  deprecated_table_hint  as_table_alias
    /// 	 | complete_table_ref  as_table_alias?  table_hints?
    /// 	 | rowset_function  as_table_alias?
    /// 	 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias_column?
    /// 	 | change_table  as_table_alias?
    /// 	 | nodes_method  as_table_alias_column?
    /// 	 | function_call  as_table_alias_column?
    /// 	 | loc_id = local_id  as_table_alias?
    /// 	 | loc_id_call = local_id  DOT  loc_fcall = function_call  as_table_alias_column?
    /// 	 | open_xml
    /// 	 | open_json
    /// 	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
    /// </summary>
    public abstract partial class AstTableSourceItem : AstBnfRule
    {
        
        protected static string _rule = @"table_source_item
	 : complete_table_ref  deprecated_table_hint  as_table_alias
	 | complete_table_ref  as_table_alias?  table_hints?
	 | rowset_function  as_table_alias?
	 | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias_column?
	 | change_table  as_table_alias?
	 | nodes_method  as_table_alias_column?
	 | function_call  as_table_alias_column?
	 | loc_id = local_id  as_table_alias?
	 | loc_id_call = local_id  DOT  loc_fcall = function_call  as_table_alias_column?
	 | open_xml
	 | open_json
	 | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?";
        
        /// <summary>
        /// table_source_item : complete_table_ref deprecated_table_hint as_table_alias 
        /// </summary>
        public partial class AstTableSourceItem1 : AstTableSourceItem
        {
            
            private AstCompleteTableRef _completeTableRef;
            
            private AstDeprecatedTableHint _deprecatedTableHint;
            
            private AstAsTableAlias _asTableAlias;
            
            internal AstTableSourceItem1(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstDeprecatedTableHint deprecatedTableHint, AstAsTableAlias asTableAlias) : 
                    base(ctx)
            {
                _completeTableRef = completeTableRef;
                _deprecatedTableHint = deprecatedTableHint;
                _asTableAlias = asTableAlias;
            }
            
            public virtual AstCompleteTableRef CompleteTableRef
            {
                get
                {
                    return _completeTableRef;
                }
            }
            
            public virtual AstDeprecatedTableHint DeprecatedTableHint
            {
                get
                {
                    return _deprecatedTableHint;
                }
            }
            
            public virtual AstAsTableAlias AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : complete_table_ref as_table_alias? table_hints? 
        /// </summary>
        public partial class AstTableSourceItem2 : AstTableSourceItem
        {
            
            private AstCompleteTableRef _completeTableRef;
            
            private AstAsTableAlias _asTableAlias;
            
            private AstTableHints _tableHints;
            
            internal AstTableSourceItem2(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstTableHints tableHints) : 
                    base(ctx)
            {
                _completeTableRef = completeTableRef;
                _asTableAlias = asTableAlias;
                _tableHints = tableHints;
            }
            
            public virtual AstCompleteTableRef CompleteTableRef
            {
                get
                {
                    return _completeTableRef;
                }
            }
            
            public virtual AstAsTableAlias AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public virtual AstTableHints TableHints
            {
                get
                {
                    return _tableHints;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : rowset_function as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem3 : AstTableSourceItem
        {
            
            private AstRowsetFunction _rowsetFunction;
            
            private AstAsTableAlias _asTableAlias;
            
            internal AstTableSourceItem3(ParserRuleContext ctx, AstRowsetFunction rowsetFunction, AstAsTableAlias asTableAlias) : 
                    base(ctx)
            {
                _rowsetFunction = rowsetFunction;
                _asTableAlias = asTableAlias;
            }
            
            public virtual AstRowsetFunction RowsetFunction
            {
                get
                {
                    return _rowsetFunction;
                }
            }
            
            public virtual AstAsTableAlias AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : LR_BRACKET derived_table RR_BRACKET as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem4 : AstTableSourceItem
        {
            
            private AstDerivedTable _derivedTable;
            
            private AstAsTableAliasColumn _asTableAliasColumn;
            
            internal AstTableSourceItem4(ParserRuleContext ctx, AstDerivedTable derivedTable, AstAsTableAliasColumn asTableAliasColumn) : 
                    base(ctx)
            {
                _derivedTable = derivedTable;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public virtual AstDerivedTable DerivedTable
            {
                get
                {
                    return _derivedTable;
                }
            }
            
            public virtual AstAsTableAliasColumn AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : change_table as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem5 : AstTableSourceItem
        {
            
            private AstChangeTable _changeTable;
            
            private AstAsTableAlias _asTableAlias;
            
            internal AstTableSourceItem5(ParserRuleContext ctx, AstChangeTable changeTable, AstAsTableAlias asTableAlias) : 
                    base(ctx)
            {
                _changeTable = changeTable;
                _asTableAlias = asTableAlias;
            }
            
            public virtual AstChangeTable ChangeTable
            {
                get
                {
                    return _changeTable;
                }
            }
            
            public virtual AstAsTableAlias AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : nodes_method as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem6 : AstTableSourceItem
        {
            
            private AstNodesMethod _nodesMethod;
            
            private AstAsTableAliasColumn _asTableAliasColumn;
            
            internal AstTableSourceItem6(ParserRuleContext ctx, AstNodesMethod nodesMethod, AstAsTableAliasColumn asTableAliasColumn) : 
                    base(ctx)
            {
                _nodesMethod = nodesMethod;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public virtual AstNodesMethod NodesMethod
            {
                get
                {
                    return _nodesMethod;
                }
            }
            
            public virtual AstAsTableAliasColumn AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : function_call as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem7 : AstTableSourceItem
        {
            
            private AstFunctionCall _functionCall;
            
            private AstAsTableAliasColumn _asTableAliasColumn;
            
            internal AstTableSourceItem7(ParserRuleContext ctx, AstFunctionCall functionCall, AstAsTableAliasColumn asTableAliasColumn) : 
                    base(ctx)
            {
                _functionCall = functionCall;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public virtual AstFunctionCall FunctionCall
            {
                get
                {
                    return _functionCall;
                }
            }
            
            public virtual AstAsTableAliasColumn AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : loc_id=local_id as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem8 : AstTableSourceItem
        {
            
            private AstLocalId _locId;
            
            private AstAsTableAlias _asTableAlias;
            
            internal AstTableSourceItem8(ParserRuleContext ctx, AstLocalId locId, AstAsTableAlias asTableAlias) : 
                    base(ctx)
            {
                _locId = locId;
                _asTableAlias = asTableAlias;
            }
            
            public virtual AstLocalId LocId
            {
                get
                {
                    return _locId;
                }
            }
            
            public virtual AstAsTableAlias AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : loc_id_call=local_id DOT loc_fcall=function_call as_table_alias_column? 
        /// </summary>
        public partial class AstTableSourceItem9 : AstTableSourceItem
        {
            
            private AstLocalId _locIdCall;
            
            private AstFunctionCall _locFcall;
            
            private AstAsTableAliasColumn _asTableAliasColumn;
            
            internal AstTableSourceItem9(ParserRuleContext ctx, AstLocalId locIdCall, AstFunctionCall locFcall, AstAsTableAliasColumn asTableAliasColumn) : 
                    base(ctx)
            {
                _locIdCall = locIdCall;
                _locFcall = locFcall;
                _asTableAliasColumn = asTableAliasColumn;
            }
            
            public virtual AstLocalId LocIdCall
            {
                get
                {
                    return _locIdCall;
                }
            }
            
            public virtual AstFunctionCall LocFcall
            {
                get
                {
                    return _locFcall;
                }
            }
            
            public virtual AstAsTableAliasColumn AsTableAliasColumn
            {
                get
                {
                    return _asTableAliasColumn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : open_xml 
        /// </summary>
        public partial class AstTableSourceItem10 : AstTableSourceItem
        {
            
            private AstOpenXml _openXml;
            
            internal AstTableSourceItem10(ParserRuleContext ctx, AstOpenXml openXml) : 
                    base(ctx)
            {
                _openXml = openXml;
            }
            
            public virtual AstOpenXml OpenXml
            {
                get
                {
                    return _openXml;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : open_json 
        /// </summary>
        public partial class AstTableSourceItem11 : AstTableSourceItem
        {
            
            private AstOpenJson _openJson;
            
            internal AstTableSourceItem11(ParserRuleContext ctx, AstOpenJson openJson) : 
                    base(ctx)
            {
                _openJson = openJson;
            }
            
            public virtual AstOpenJson OpenJson
            {
                get
                {
                    return _openJson;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        /// <summary>
        /// table_source_item : DOUBLE_COLON oldstyle_fcall=function_call as_table_alias? 
        /// </summary>
        public partial class AstTableSourceItem12 : AstTableSourceItem
        {
            
            private AstFunctionCall _oldstyleFcall;
            
            private AstAsTableAlias _asTableAlias;
            
            internal AstTableSourceItem12(ParserRuleContext ctx, AstFunctionCall oldstyleFcall, AstAsTableAlias asTableAlias) : 
                    base(ctx)
            {
                _oldstyleFcall = oldstyleFcall;
                _asTableAlias = asTableAlias;
            }
            
            public virtual AstFunctionCall OldstyleFcall
            {
                get
                {
                    return _oldstyleFcall;
                }
            }
            
            public virtual AstAsTableAlias AsTableAlias
            {
                get
                {
                    return _asTableAlias;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableSourceItem(this);
            }
        }
        

        
        internal AstTableSourceItem(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableSourceItem(Position p) : 
                base(p)
        {
        }
        
        internal AstTableSourceItem(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableSourceItem Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableSourceItem.Resolve(list);
            if ((index == 4))
            {
                return new AstTableSourceItem.AstTableSourceItem1(ctx, ((AstCompleteTableRef)(list[0])), ((AstDeprecatedTableHint)(list[1])), ((AstAsTableAlias)(list[2])));
            }
            if ((index == 4))
            {
                return new AstTableSourceItem.AstTableSourceItem2(ctx, ((AstCompleteTableRef)(list[0])), ((AstAsTableAlias)(list[1])), ((AstTableHints)(list[2])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem3(ctx, ((AstRowsetFunction)(list[0])), ((AstAsTableAlias)(list[1])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem4(ctx, ((AstDerivedTable)(list[0])), ((AstAsTableAliasColumn)(list[1])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem5(ctx, ((AstChangeTable)(list[0])), ((AstAsTableAlias)(list[1])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem6(ctx, ((AstNodesMethod)(list[0])), ((AstAsTableAliasColumn)(list[1])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem7(ctx, ((AstFunctionCall)(list[0])), ((AstAsTableAliasColumn)(list[1])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem8(ctx, ((AstLocalId)(list[0])), ((AstAsTableAlias)(list[1])));
            }
            if ((index == 4))
            {
                return new AstTableSourceItem.AstTableSourceItem9(ctx, ((AstLocalId)(list[0])), ((AstFunctionCall)(list[1])), ((AstAsTableAliasColumn)(list[2])));
            }
            if ((index == 2))
            {
                return new AstTableSourceItem.AstTableSourceItem10(ctx, ((AstOpenXml)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableSourceItem.AstTableSourceItem11(ctx, ((AstOpenJson)(list[0])));
            }
            if ((index == 3))
            {
                return new AstTableSourceItem.AstTableSourceItem12(ctx, ((AstFunctionCall)(list[0])), ((AstAsTableAlias)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstCompleteTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDeprecatedTableHint), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAsTableAlias), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCompleteTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstTableHints), false, false))
                        {
                            return 2;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFunctionCall), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstAsTableAliasColumn), false, false))
                        {
                            return 9;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstRowsetFunction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDerivedTable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAliasColumn), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstChangeTable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstNodesMethod), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAliasColumn), false, false))
                    {
                        return 6;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAliasColumn), false, false))
                    {
                        return 7;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        return 8;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFunctionCall), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAsTableAlias), false, false))
                    {
                        return 12;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOpenXml), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstOpenJson), false, false))
                {
                    return 11;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref deprecated_table_hint as_table_alias 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstDeprecatedTableHint deprecatedTableHint, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem1 result = new AstTableSourceItem.AstTableSourceItem1(ctx, completeTableRef, deprecatedTableHint, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    complete_table_ref as_table_alias? table_hints? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstCompleteTableRef completeTableRef, AstAsTableAlias asTableAlias, AstTableHints tableHints)
        {
            AstTableSourceItem.AstTableSourceItem2 result = new AstTableSourceItem.AstTableSourceItem2(ctx, completeTableRef, asTableAlias, tableHints);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    rowset_function as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstRowsetFunction rowsetFunction, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem3 result = new AstTableSourceItem.AstTableSourceItem3(ctx, rowsetFunction, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    ( derived_table ) as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstDerivedTable derivedTable, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem4 result = new AstTableSourceItem.AstTableSourceItem4(ctx, derivedTable, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    change_table as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstChangeTable changeTable, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem5 result = new AstTableSourceItem.AstTableSourceItem5(ctx, changeTable, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    nodes_method as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstNodesMethod nodesMethod, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem6 result = new AstTableSourceItem.AstTableSourceItem6(ctx, nodesMethod, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    function_call as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstFunctionCall functionCall, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem7 result = new AstTableSourceItem.AstTableSourceItem7(ctx, functionCall, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    loc_id=local_id as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstLocalId locId, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem8 result = new AstTableSourceItem.AstTableSourceItem8(ctx, locId, asTableAlias);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    loc_id_call=local_id . loc_fcall=function_call as_table_alias_column? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstLocalId locIdCall, AstFunctionCall locFcall, AstAsTableAliasColumn asTableAliasColumn)
        {
            AstTableSourceItem.AstTableSourceItem9 result = new AstTableSourceItem.AstTableSourceItem9(ctx, locIdCall, locFcall, asTableAliasColumn);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    open_xml 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstOpenXml openXml)
        {
            AstTableSourceItem.AstTableSourceItem10 result = new AstTableSourceItem.AstTableSourceItem10(ctx, openXml);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    open_json 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstOpenJson openJson)
        {
            AstTableSourceItem.AstTableSourceItem11 result = new AstTableSourceItem.AstTableSourceItem11(ctx, openJson);
            return result;
        }
        
        /// <summary>
        /// table_source_item : 
        ///    :: oldstyle_fcall=function_call as_table_alias? 
        /// </summary>
        public static AstTableSourceItem TableSourceItem(ParserRuleContext ctx, AstFunctionCall oldstyleFcall, AstAsTableAlias asTableAlias)
        {
            AstTableSourceItem.AstTableSourceItem12 result = new AstTableSourceItem.AstTableSourceItem12(ctx, oldstyleFcall, asTableAlias);
            return result;
        }
    }
    
    /// <summary>
    /// table_hints
    /// 	 : with_table_hints
    /// 	 | deprecated_table_hint
    /// 	 | sybase_legacy_hints
    /// </summary>
    public abstract partial class AstTableHints : AstBnfRule
    {
        
        protected static string _rule = "table_hints\r\n\t : with_table_hints\r\n\t | deprecated_table_hint\r\n\t | sybase_legacy_h" +
            "ints";
        
        /// <summary>
        /// table_hints : with_table_hints 
        /// </summary>
        public partial class AstTableHints1 : AstTableHints
        {
            
            private AstWithTableHints _withTableHints;
            
            internal AstTableHints1(ParserRuleContext ctx, AstWithTableHints withTableHints) : 
                    base(ctx)
            {
                _withTableHints = withTableHints;
            }
            
            public virtual AstWithTableHints WithTableHints
            {
                get
                {
                    return _withTableHints;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHints(this);
            }
        }
        /// <summary>
        /// table_hints : deprecated_table_hint 
        /// </summary>
        public partial class AstTableHints2 : AstTableHints
        {
            
            private AstDeprecatedTableHint _deprecatedTableHint;
            
            internal AstTableHints2(ParserRuleContext ctx, AstDeprecatedTableHint deprecatedTableHint) : 
                    base(ctx)
            {
                _deprecatedTableHint = deprecatedTableHint;
            }
            
            public virtual AstDeprecatedTableHint DeprecatedTableHint
            {
                get
                {
                    return _deprecatedTableHint;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHints(this);
            }
        }
        /// <summary>
        /// table_hints : sybase_legacy_hints 
        /// </summary>
        public partial class AstTableHints3 : AstTableHints
        {
            
            private AstSybaseLegacyHints _sybaseLegacyHints;
            
            internal AstTableHints3(ParserRuleContext ctx, AstSybaseLegacyHints sybaseLegacyHints) : 
                    base(ctx)
            {
                _sybaseLegacyHints = sybaseLegacyHints;
            }
            
            public virtual AstSybaseLegacyHints SybaseLegacyHints
            {
                get
                {
                    return _sybaseLegacyHints;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHints(this);
            }
        }
        

        
        internal AstTableHints(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableHints(Position p) : 
                base(p)
        {
        }
        
        internal AstTableHints(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableHints Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableHints.Resolve(list);
            if ((index == 2))
            {
                return new AstTableHints.AstTableHints1(ctx, ((AstWithTableHints)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableHints.AstTableHints2(ctx, ((AstDeprecatedTableHint)(list[0])));
            }
            if ((index == 2))
            {
                return new AstTableHints.AstTableHints3(ctx, ((AstSybaseLegacyHints)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWithTableHints), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDeprecatedTableHint), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstSybaseLegacyHints), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_hints : 
        ///    with_table_hints 
        /// </summary>
        public static AstTableHints TableHints(ParserRuleContext ctx, AstWithTableHints withTableHints)
        {
            AstTableHints.AstTableHints1 result = new AstTableHints.AstTableHints1(ctx, withTableHints);
            return result;
        }
        
        /// <summary>
        /// table_hints : 
        ///    deprecated_table_hint 
        /// </summary>
        public static AstTableHints TableHints(ParserRuleContext ctx, AstDeprecatedTableHint deprecatedTableHint)
        {
            AstTableHints.AstTableHints2 result = new AstTableHints.AstTableHints2(ctx, deprecatedTableHint);
            return result;
        }
        
        /// <summary>
        /// table_hints : 
        ///    sybase_legacy_hints 
        /// </summary>
        public static AstTableHints TableHints(ParserRuleContext ctx, AstSybaseLegacyHints sybaseLegacyHints)
        {
            AstTableHints.AstTableHints3 result = new AstTableHints.AstTableHints3(ctx, sybaseLegacyHints);
            return result;
        }
    }
    
    /// <summary>
    /// change_table
    /// 	 : change_table_changes
    /// 	 | change_table_version
    /// </summary>
    public abstract partial class AstChangeTable : AstBnfRule
    {
        
        protected static string _rule = "change_table\r\n\t : change_table_changes\r\n\t | change_table_version";
        
        /// <summary>
        /// change_table : change_table_changes 
        /// </summary>
        public partial class AstChangeTable1 : AstChangeTable
        {
            
            private AstChangeTableChanges _changeTableChanges;
            
            internal AstChangeTable1(ParserRuleContext ctx, AstChangeTableChanges changeTableChanges) : 
                    base(ctx)
            {
                _changeTableChanges = changeTableChanges;
            }
            
            public virtual AstChangeTableChanges ChangeTableChanges
            {
                get
                {
                    return _changeTableChanges;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTable(this);
            }
        }
        /// <summary>
        /// change_table : change_table_version 
        /// </summary>
        public partial class AstChangeTable2 : AstChangeTable
        {
            
            private AstChangeTableVersion _changeTableVersion;
            
            internal AstChangeTable2(ParserRuleContext ctx, AstChangeTableVersion changeTableVersion) : 
                    base(ctx)
            {
                _changeTableVersion = changeTableVersion;
            }
            
            public virtual AstChangeTableVersion ChangeTableVersion
            {
                get
                {
                    return _changeTableVersion;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTable(this);
            }
        }
        

        
        internal AstChangeTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTable(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTable(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstChangeTable Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstChangeTable.Resolve(list);
            if ((index == 2))
            {
                return new AstChangeTable.AstChangeTable1(ctx, ((AstChangeTableChanges)(list[0])));
            }
            if ((index == 2))
            {
                return new AstChangeTable.AstChangeTable2(ctx, ((AstChangeTableVersion)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstChangeTableChanges), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstChangeTableVersion), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// change_table : 
        ///    change_table_changes 
        /// </summary>
        public static AstChangeTable ChangeTable(ParserRuleContext ctx, AstChangeTableChanges changeTableChanges)
        {
            AstChangeTable.AstChangeTable1 result = new AstChangeTable.AstChangeTable1(ctx, changeTableChanges);
            return result;
        }
        
        /// <summary>
        /// change_table : 
        ///    change_table_version 
        /// </summary>
        public static AstChangeTable ChangeTable(ParserRuleContext ctx, AstChangeTableVersion changeTableVersion)
        {
            AstChangeTable.AstChangeTable2 result = new AstChangeTable.AstChangeTable2(ctx, changeTableVersion);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_changes
    /// 	 : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET
    /// </summary>
    public abstract partial class AstChangeTableChanges : AstBnfRule
    {
        
        protected static string _rule = "change_table_changes\r\n\t : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_ta" +
            "ble_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET";
        
        /// <summary>
        /// change_table_changes : CHANGETABLE LR_BRACKET CHANGES changetable=full_table_ref COMMA NULL_ RR_BRACKET 
        /// </summary>
        public partial class AstChangeTableChanges1 : AstChangeTableChanges
        {
            
            private AstFullTableRef _changetable;
            
            internal AstChangeTableChanges1(ParserRuleContext ctx, AstFullTableRef changetable) : 
                    base(ctx)
            {
                _changetable = changetable;
            }
            
            public virtual AstFullTableRef Changetable
            {
                get
                {
                    return _changetable;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTableChanges(this);
            }
        }
        /// <summary>
        /// change_table_changes : CHANGETABLE LR_BRACKET CHANGES changetable=full_table_ref COMMA decimal_local_id RR_BRACKET 
        /// </summary>
        public partial class AstChangeTableChanges2 : AstChangeTableChanges
        {
            
            private AstFullTableRef _changetable;
            
            private AstDecimalLocalId _decimalLocalId;
            
            internal AstChangeTableChanges2(ParserRuleContext ctx, AstFullTableRef changetable, AstDecimalLocalId decimalLocalId) : 
                    base(ctx)
            {
                _changetable = changetable;
                _decimalLocalId = decimalLocalId;
            }
            
            public virtual AstFullTableRef Changetable
            {
                get
                {
                    return _changetable;
                }
            }
            
            public virtual AstDecimalLocalId DecimalLocalId
            {
                get
                {
                    return _decimalLocalId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitChangeTableChanges(this);
            }
        }
        

        
        internal AstChangeTableChanges(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableChanges(Position p) : 
                base(p)
        {
        }
        
        internal AstChangeTableChanges(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstChangeTableChanges Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstChangeTableChanges.Resolve(list);
            if ((index == 2))
            {
                return new AstChangeTableChanges.AstChangeTableChanges1(ctx, ((AstFullTableRef)(list[0])));
            }
            if ((index == 3))
            {
                return new AstChangeTableChanges.AstChangeTableChanges2(ctx, ((AstFullTableRef)(list[0])), ((AstDecimalLocalId)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalLocalId), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// change_table_changes : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , NULL_ ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(ParserRuleContext ctx, AstFullTableRef changetable)
        {
            AstChangeTableChanges.AstChangeTableChanges1 result = new AstChangeTableChanges.AstChangeTableChanges1(ctx, changetable);
            return result;
        }
        
        /// <summary>
        /// change_table_changes : 
        ///    CHANGETABLE ( CHANGES changetable=full_table_ref , decimal_local_id ) 
        /// </summary>
        public static AstChangeTableChanges ChangeTableChanges(ParserRuleContext ctx, AstFullTableRef changetable, AstDecimalLocalId decimalLocalId)
        {
            AstChangeTableChanges.AstChangeTableChanges2 result = new AstChangeTableChanges.AstChangeTableChanges2(ctx, changetable, decimalLocalId);
            return result;
        }
    }
    
    /// <summary>
    /// change_table_version
    /// 	 : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET
    /// </summary>
    public partial class AstChangeTableVersion : AstBnfRule
    {
        
        protected static string _rule = "change_table_version\r\n\t : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_t" +
            "able_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_l" +
            "ist  RR_BRACKET";
        
        internal AstChangeTableVersion(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstChangeTableVersion(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstChangeTableVersion(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstChangeTableVersion(ParserRuleContext ctx, AstFullTableRef versiontable, AstFullColumnNameList pkColumns, AstSelectList pkValues) : 
                base(ctx)
        {
            _versiontable = versiontable;
            _pkColumns = pkColumns;
            _pkValues = pkValues;
        }
        
        public virtual AstFullTableRef _versiontable
        {
            get
            {
                return _versiontable;
            }
        }
        
        public virtual AstFullColumnNameList _pkColumns
        {
            get
            {
                return _pkColumns;
            }
        }
        
        public virtual AstSelectList _pkValues
        {
            get
            {
                return _pkValues;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTableVersion(this);
        }
        
        /// <summary>
        /// change_table_version : 
        ///    CHANGETABLE ( VERSION versiontable=full_table_ref , pk_columns=full_column_name_list , pk_values=select_list ) 
        /// </summary>
        public static AstChangeTableVersion ChangeTableVersion(ParserRuleContext ctx, AstFullTableRef versiontable, AstFullColumnNameList pkColumns, AstSelectList pkValues)
        {
            AstChangeTableVersion result = new AstChangeTableVersion(ctx, versiontable, pkColumns, pkValues);
            return result;
        }
    }
    
    /// <summary>
    /// join_part
    /// 	 : join_on
    /// 	 | cross_join
    /// 	 | apply_enum
    /// 	 | pivot_join
    /// 	 | unpivot_join
    /// </summary>
    public abstract partial class AstJoinPart : AstBnfRule
    {
        
        protected static string _rule = "join_part\r\n\t : join_on\r\n\t | cross_join\r\n\t | apply_enum\r\n\t | pivot_join\r\n\t | unpiv" +
            "ot_join";
        
        /// <summary>
        /// join_part : join_on 
        /// </summary>
        public partial class AstJoinPart1 : AstJoinPart
        {
            
            private AstJoinOn _joinOn;
            
            internal AstJoinPart1(ParserRuleContext ctx, AstJoinOn joinOn) : 
                    base(ctx)
            {
                _joinOn = joinOn;
            }
            
            public virtual AstJoinOn JoinOn
            {
                get
                {
                    return _joinOn;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : cross_join 
        /// </summary>
        public partial class AstJoinPart2 : AstJoinPart
        {
            
            private AstCrossJoin _crossJoin;
            
            internal AstJoinPart2(ParserRuleContext ctx, AstCrossJoin crossJoin) : 
                    base(ctx)
            {
                _crossJoin = crossJoin;
            }
            
            public virtual AstCrossJoin CrossJoin
            {
                get
                {
                    return _crossJoin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : apply_enum 
        /// </summary>
        public partial class AstJoinPart3 : AstJoinPart
        {
            
            private AstApplyEnum _applyEnum;
            
            internal AstJoinPart3(ParserRuleContext ctx, AstApplyEnum applyEnum) : 
                    base(ctx)
            {
                _applyEnum = applyEnum;
            }
            
            public virtual AstApplyEnum ApplyEnum
            {
                get
                {
                    return _applyEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : pivot_join 
        /// </summary>
        public partial class AstJoinPart4 : AstJoinPart
        {
            
            private AstPivotJoin _pivotJoin;
            
            internal AstJoinPart4(ParserRuleContext ctx, AstPivotJoin pivotJoin) : 
                    base(ctx)
            {
                _pivotJoin = pivotJoin;
            }
            
            public virtual AstPivotJoin PivotJoin
            {
                get
                {
                    return _pivotJoin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        /// <summary>
        /// join_part : unpivot_join 
        /// </summary>
        public partial class AstJoinPart5 : AstJoinPart
        {
            
            private AstUnpivotJoin _unpivotJoin;
            
            internal AstJoinPart5(ParserRuleContext ctx, AstUnpivotJoin unpivotJoin) : 
                    base(ctx)
            {
                _unpivotJoin = unpivotJoin;
            }
            
            public virtual AstUnpivotJoin UnpivotJoin
            {
                get
                {
                    return _unpivotJoin;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitJoinPart(this);
            }
        }
        

        
        internal AstJoinPart(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstJoinPart(Position p) : 
                base(p)
        {
        }
        
        internal AstJoinPart(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstJoinPart Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstJoinPart.Resolve(list);
            if ((index == 2))
            {
                return new AstJoinPart.AstJoinPart1(ctx, ((AstJoinOn)(list[0])));
            }
            if ((index == 2))
            {
                return new AstJoinPart.AstJoinPart2(ctx, ((AstCrossJoin)(list[0])));
            }
            if ((index == 2))
            {
                return new AstJoinPart.AstJoinPart3(ctx, ((AstApplyEnum)(list[0])));
            }
            if ((index == 2))
            {
                return new AstJoinPart.AstJoinPart4(ctx, ((AstPivotJoin)(list[0])));
            }
            if ((index == 2))
            {
                return new AstJoinPart.AstJoinPart5(ctx, ((AstUnpivotJoin)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstJoinOn), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstCrossJoin), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstApplyEnum), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstPivotJoin), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstUnpivotJoin), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// join_part : 
        ///    join_on 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstJoinOn joinOn)
        {
            AstJoinPart.AstJoinPart1 result = new AstJoinPart.AstJoinPart1(ctx, joinOn);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    cross_join 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstCrossJoin crossJoin)
        {
            AstJoinPart.AstJoinPart2 result = new AstJoinPart.AstJoinPart2(ctx, crossJoin);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    apply_enum 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstApplyEnum applyEnum)
        {
            AstJoinPart.AstJoinPart3 result = new AstJoinPart.AstJoinPart3(ctx, applyEnum);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    pivot_join 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstPivotJoin pivotJoin)
        {
            AstJoinPart.AstJoinPart4 result = new AstJoinPart.AstJoinPart4(ctx, pivotJoin);
            return result;
        }
        
        /// <summary>
        /// join_part : 
        ///    unpivot_join 
        /// </summary>
        public static AstJoinPart JoinPart(ParserRuleContext ctx, AstUnpivotJoin unpivotJoin)
        {
            AstJoinPart.AstJoinPart5 result = new AstJoinPart.AstJoinPart5(ctx, unpivotJoin);
            return result;
        }
    }
    
    /// <summary>
    /// rowset_function
    /// 	 : OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET
    /// 	 | OPENROWSET  LR_BRACKET  BULK  data_file = stringtext  COMMA  buk_extended_options  RR_BRACKET
    /// </summary>
    public abstract partial class AstRowsetFunction : AstBnfRule
    {
        
        protected static string _rule = "rowset_function\r\n\t : OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  co" +
            "nnectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET\r\n\t | OPENROWSET" +
            "  LR_BRACKET  BULK  data_file = stringtext  COMMA  buk_extended_options  RR_BRAC" +
            "KET";
        
        /// <summary>
        /// rowset_function : OPENROWSET LR_BRACKET providerName=stringtext COMMA connectionString=stringtext COMMA sql=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstRowsetFunction1 : AstRowsetFunction
        {
            
            private AstStringtext _providerName;
            
            private AstStringtext _connectionString;
            
            private AstStringtext _sql;
            
            internal AstRowsetFunction1(ParserRuleContext ctx, AstStringtext providerName, AstStringtext connectionString, AstStringtext sql) : 
                    base(ctx)
            {
                _providerName = providerName;
                _connectionString = connectionString;
                _sql = sql;
            }
            
            public virtual AstStringtext Providername
            {
                get
                {
                    return _providerName;
                }
            }
            
            public virtual AstStringtext Connectionstring
            {
                get
                {
                    return _connectionString;
                }
            }
            
            public virtual AstStringtext Sql
            {
                get
                {
                    return _sql;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunction(this);
            }
        }
        /// <summary>
        /// rowset_function : OPENROWSET LR_BRACKET BULK data_file=stringtext COMMA buk_extended_options RR_BRACKET 
        /// </summary>
        public partial class AstRowsetFunction2 : AstRowsetFunction
        {
            
            private AstStringtext _dataFile;
            
            private AstBukExtendedOptions _bukExtendedOptions;
            
            internal AstRowsetFunction2(ParserRuleContext ctx, AstStringtext dataFile, AstBukExtendedOptions bukExtendedOptions) : 
                    base(ctx)
            {
                _dataFile = dataFile;
                _bukExtendedOptions = bukExtendedOptions;
            }
            
            public virtual AstStringtext DataFile
            {
                get
                {
                    return _dataFile;
                }
            }
            
            public virtual AstBukExtendedOptions BukExtendedOptions
            {
                get
                {
                    return _bukExtendedOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRowsetFunction(this);
            }
        }
        

        
        internal AstRowsetFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRowsetFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstRowsetFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRowsetFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRowsetFunction.Resolve(list);
            if ((index == 4))
            {
                return new AstRowsetFunction.AstRowsetFunction1(ctx, ((AstStringtext)(list[0])), ((AstStringtext)(list[1])), ((AstStringtext)(list[2])));
            }
            if ((index == 3))
            {
                return new AstRowsetFunction.AstRowsetFunction2(ctx, ((AstStringtext)(list[0])), ((AstBukExtendedOptions)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstStringtext), false, false))
                        {
                            return 1;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstBukExtendedOptions), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// rowset_function : 
        ///    OPENROWSET ( providerName=stringtext , connectionString=stringtext , sql=stringtext ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(ParserRuleContext ctx, AstStringtext providerName, AstStringtext connectionString, AstStringtext sql)
        {
            AstRowsetFunction.AstRowsetFunction1 result = new AstRowsetFunction.AstRowsetFunction1(ctx, providerName, connectionString, sql);
            return result;
        }
        
        /// <summary>
        /// rowset_function : 
        ///    OPENROWSET ( BULK data_file=stringtext , buk_extended_options ) 
        /// </summary>
        public static AstRowsetFunction RowsetFunction(ParserRuleContext ctx, AstStringtext dataFile, AstBukExtendedOptions bukExtendedOptions)
        {
            AstRowsetFunction.AstRowsetFunction2 result = new AstRowsetFunction.AstRowsetFunction2(ctx, dataFile, bukExtendedOptions);
            return result;
        }
    }
    
    /// <summary>
    /// buk_extended_options
    /// 	 : bulk_options
    /// 	 | id_
    /// </summary>
    public abstract partial class AstBukExtendedOptions : AstBnfRule
    {
        
        protected static string _rule = "buk_extended_options\r\n\t : bulk_options\r\n\t | id_";
        
        /// <summary>
        /// buk_extended_options : bulk_options 
        /// </summary>
        public partial class AstBukExtendedOptions1 : AstBukExtendedOptions
        {
            
            private AstBulkOptions _bulkOptions;
            
            internal AstBukExtendedOptions1(ParserRuleContext ctx, AstBulkOptions bulkOptions) : 
                    base(ctx)
            {
                _bulkOptions = bulkOptions;
            }
            
            public virtual AstBulkOptions BulkOptions
            {
                get
                {
                    return _bulkOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBukExtendedOptions(this);
            }
        }
        /// <summary>
        /// buk_extended_options : id_ 
        /// </summary>
        public partial class AstBukExtendedOptions2 : AstBukExtendedOptions
        {
            
            private AstId _id;
            
            internal AstBukExtendedOptions2(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBukExtendedOptions(this);
            }
        }
        

        
        internal AstBukExtendedOptions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBukExtendedOptions(Position p) : 
                base(p)
        {
        }
        
        internal AstBukExtendedOptions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBukExtendedOptions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBukExtendedOptions.Resolve(list);
            if ((index == 2))
            {
                return new AstBukExtendedOptions.AstBukExtendedOptions1(ctx, ((AstBulkOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBukExtendedOptions.AstBukExtendedOptions2(ctx, ((AstId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstBulkOptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// buk_extended_options : 
        ///    bulk_options 
        /// </summary>
        public static AstBukExtendedOptions BukExtendedOptions(ParserRuleContext ctx, AstBulkOptions bulkOptions)
        {
            AstBukExtendedOptions.AstBukExtendedOptions1 result = new AstBukExtendedOptions.AstBukExtendedOptions1(ctx, bulkOptions);
            return result;
        }
        
        /// <summary>
        /// buk_extended_options : 
        ///    id_ 
        /// </summary>
        public static AstBukExtendedOptions BukExtendedOptions(ParserRuleContext ctx, AstId id)
        {
            AstBukExtendedOptions.AstBukExtendedOptions2 result = new AstBukExtendedOptions.AstBukExtendedOptions2(ctx, id);
            return result;
        }
    }
    
    /// <summary>
    /// derived_table
    /// 	 : subquery
    /// 	 | LR_BRACKET  subqueries  RR_BRACKET
    /// 	 | table_value_constructor
    /// 	 | LR_BRACKET  table_value_constructor  RR_BRACKET
    /// </summary>
    public abstract partial class AstDerivedTable : AstBnfRule
    {
        
        protected static string _rule = "derived_table\r\n\t : subquery\r\n\t | LR_BRACKET  subqueries  RR_BRACKET\r\n\t | table_va" +
            "lue_constructor\r\n\t | LR_BRACKET  table_value_constructor  RR_BRACKET";
        
        /// <summary>
        /// derived_table : subquery 
        /// </summary>
        public partial class AstDerivedTable1 : AstDerivedTable
        {
            
            private AstSubquery _subquery;
            
            internal AstDerivedTable1(ParserRuleContext ctx, AstSubquery subquery) : 
                    base(ctx)
            {
                _subquery = subquery;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : LR_BRACKET subqueries RR_BRACKET 
        /// </summary>
        public partial class AstDerivedTable2 : AstDerivedTable
        {
            
            private AstSubqueries _subqueries;
            
            internal AstDerivedTable2(ParserRuleContext ctx, AstSubqueries subqueries) : 
                    base(ctx)
            {
                _subqueries = subqueries;
            }
            
            public virtual AstSubqueries Subqueries
            {
                get
                {
                    return _subqueries;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : table_value_constructor 
        /// </summary>
        public partial class AstDerivedTable3 : AstDerivedTable
        {
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstDerivedTable3(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _tableValueConstructor = tableValueConstructor;
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        /// <summary>
        /// derived_table : LR_BRACKET table_value_constructor RR_BRACKET 
        /// </summary>
        public partial class AstDerivedTable4 : AstDerivedTable
        {
            
            private AstTableValueConstructor _tableValueConstructor;
            
            internal AstDerivedTable4(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor) : 
                    base(ctx)
            {
                _tableValueConstructor = tableValueConstructor;
            }
            
            public virtual AstTableValueConstructor TableValueConstructor
            {
                get
                {
                    return _tableValueConstructor;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDerivedTable(this);
            }
        }
        

        
        internal AstDerivedTable(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDerivedTable(Position p) : 
                base(p)
        {
        }
        
        internal AstDerivedTable(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDerivedTable Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDerivedTable.Resolve(list);
            if ((index == 2))
            {
                return new AstDerivedTable.AstDerivedTable1(ctx, ((AstSubquery)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDerivedTable.AstDerivedTable2(ctx, ((AstSubqueries)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDerivedTable.AstDerivedTable3(ctx, ((AstTableValueConstructor)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDerivedTable.AstDerivedTable4(ctx, ((AstTableValueConstructor)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstSubqueries), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableValueConstructor), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstTableValueConstructor), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// derived_table : 
        ///    subquery 
        /// </summary>
        public static AstDerivedTable DerivedTable(ParserRuleContext ctx, AstSubquery subquery)
        {
            AstDerivedTable.AstDerivedTable1 result = new AstDerivedTable.AstDerivedTable1(ctx, subquery);
            return result;
        }
        
        /// <summary>
        /// derived_table : 
        ///    ( subqueries ) 
        /// </summary>
        public static AstDerivedTable DerivedTable(ParserRuleContext ctx, AstSubqueries subqueries)
        {
            AstDerivedTable.AstDerivedTable2 result = new AstDerivedTable.AstDerivedTable2(ctx, subqueries);
            return result;
        }
        
        /// <summary>
        /// derived_table : 
        ///    table_value_constructor 
        /// </summary>
        public static AstDerivedTable DerivedTable(ParserRuleContext ctx, AstTableValueConstructor tableValueConstructor)
        {
            AstDerivedTable.AstDerivedTable3 result = new AstDerivedTable.AstDerivedTable3(ctx, tableValueConstructor);
            return result;
        }
    }
    
    /// <summary>
    /// function_call
    /// 	 : ranking_windowed_function
    /// 	 | aggregate_windowed_function
    /// 	 | analytic_windowed_function
    /// 	 | built_in_functions
    /// 	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
    /// 	 | freetext_function
    /// 	 | partition_function
    /// 	 | hierarchyid_static_method
    /// </summary>
    public abstract partial class AstFunctionCall : AstBnfRule
    {
        
        protected static string _rule = @"function_call
	 : ranking_windowed_function
	 | aggregate_windowed_function
	 | analytic_windowed_function
	 | built_in_functions
	 | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET
	 | freetext_function
	 | partition_function
	 | hierarchyid_static_method";
        
        /// <summary>
        /// function_call : ranking_windowed_function 
        /// </summary>
        public partial class AstFunctionCall1 : AstFunctionCall
        {
            
            private AstRankingWindowedFunction _rankingWindowedFunction;
            
            internal AstFunctionCall1(ParserRuleContext ctx, AstRankingWindowedFunction rankingWindowedFunction) : 
                    base(ctx)
            {
                _rankingWindowedFunction = rankingWindowedFunction;
            }
            
            public virtual AstRankingWindowedFunction RankingWindowedFunction
            {
                get
                {
                    return _rankingWindowedFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : aggregate_windowed_function 
        /// </summary>
        public partial class AstFunctionCall2 : AstFunctionCall
        {
            
            private AstAggregateWindowedFunction _aggregateWindowedFunction;
            
            internal AstFunctionCall2(ParserRuleContext ctx, AstAggregateWindowedFunction aggregateWindowedFunction) : 
                    base(ctx)
            {
                _aggregateWindowedFunction = aggregateWindowedFunction;
            }
            
            public virtual AstAggregateWindowedFunction AggregateWindowedFunction
            {
                get
                {
                    return _aggregateWindowedFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : analytic_windowed_function 
        /// </summary>
        public partial class AstFunctionCall3 : AstFunctionCall
        {
            
            private AstAnalyticWindowedFunction _analyticWindowedFunction;
            
            internal AstFunctionCall3(ParserRuleContext ctx, AstAnalyticWindowedFunction analyticWindowedFunction) : 
                    base(ctx)
            {
                _analyticWindowedFunction = analyticWindowedFunction;
            }
            
            public virtual AstAnalyticWindowedFunction AnalyticWindowedFunction
            {
                get
                {
                    return _analyticWindowedFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : built_in_functions 
        /// </summary>
        public partial class AstFunctionCall4 : AstFunctionCall
        {
            
            private AstBuiltInFunctions _builtInFunctions;
            
            internal AstFunctionCall4(ParserRuleContext ctx, AstBuiltInFunctions builtInFunctions) : 
                    base(ctx)
            {
                _builtInFunctions = builtInFunctions;
            }
            
            public virtual AstBuiltInFunctions BuiltInFunctions
            {
                get
                {
                    return _builtInFunctions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : scalar_function_name LR_BRACKET expression_list? RR_BRACKET 
        /// </summary>
        public partial class AstFunctionCall5 : AstFunctionCall
        {
            
            private AstScalarFunctionName _scalarFunctionName;
            
            private AstExpressionList _expressionList;
            
            internal AstFunctionCall5(ParserRuleContext ctx, AstScalarFunctionName scalarFunctionName, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _scalarFunctionName = scalarFunctionName;
                _expressionList = expressionList;
            }
            
            public virtual AstScalarFunctionName ScalarFunctionName
            {
                get
                {
                    return _scalarFunctionName;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : freetext_function 
        /// </summary>
        public partial class AstFunctionCall6 : AstFunctionCall
        {
            
            private AstFreetextFunction _freetextFunction;
            
            internal AstFunctionCall6(ParserRuleContext ctx, AstFreetextFunction freetextFunction) : 
                    base(ctx)
            {
                _freetextFunction = freetextFunction;
            }
            
            public virtual AstFreetextFunction FreetextFunction
            {
                get
                {
                    return _freetextFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : partition_function 
        /// </summary>
        public partial class AstFunctionCall7 : AstFunctionCall
        {
            
            private AstPartitionFunction _partitionFunction;
            
            internal AstFunctionCall7(ParserRuleContext ctx, AstPartitionFunction partitionFunction) : 
                    base(ctx)
            {
                _partitionFunction = partitionFunction;
            }
            
            public virtual AstPartitionFunction PartitionFunction
            {
                get
                {
                    return _partitionFunction;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        /// <summary>
        /// function_call : hierarchyid_static_method 
        /// </summary>
        public partial class AstFunctionCall8 : AstFunctionCall
        {
            
            private AstHierarchyidStaticMethod _hierarchyidStaticMethod;
            
            internal AstFunctionCall8(ParserRuleContext ctx, AstHierarchyidStaticMethod hierarchyidStaticMethod) : 
                    base(ctx)
            {
                _hierarchyidStaticMethod = hierarchyidStaticMethod;
            }
            
            public virtual AstHierarchyidStaticMethod HierarchyidStaticMethod
            {
                get
                {
                    return _hierarchyidStaticMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFunctionCall(this);
            }
        }
        

        
        internal AstFunctionCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFunctionCall(Position p) : 
                base(p)
        {
        }
        
        internal AstFunctionCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFunctionCall Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFunctionCall.Resolve(list);
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall1(ctx, ((AstRankingWindowedFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall2(ctx, ((AstAggregateWindowedFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall3(ctx, ((AstAnalyticWindowedFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall4(ctx, ((AstBuiltInFunctions)(list[0])));
            }
            if ((index == 3))
            {
                return new AstFunctionCall.AstFunctionCall5(ctx, ((AstScalarFunctionName)(list[0])), ((AstExpressionList)(list[1])));
            }
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall6(ctx, ((AstFreetextFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall7(ctx, ((AstPartitionFunction)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFunctionCall.AstFunctionCall8(ctx, ((AstHierarchyidStaticMethod)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstScalarFunctionName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionList), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstRankingWindowedFunction), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstAggregateWindowedFunction), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstAnalyticWindowedFunction), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstBuiltInFunctions), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstFreetextFunction), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstPartitionFunction), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstHierarchyidStaticMethod), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// function_call : 
        ///    ranking_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstRankingWindowedFunction rankingWindowedFunction)
        {
            AstFunctionCall.AstFunctionCall1 result = new AstFunctionCall.AstFunctionCall1(ctx, rankingWindowedFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    aggregate_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstAggregateWindowedFunction aggregateWindowedFunction)
        {
            AstFunctionCall.AstFunctionCall2 result = new AstFunctionCall.AstFunctionCall2(ctx, aggregateWindowedFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    analytic_windowed_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstAnalyticWindowedFunction analyticWindowedFunction)
        {
            AstFunctionCall.AstFunctionCall3 result = new AstFunctionCall.AstFunctionCall3(ctx, analyticWindowedFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    built_in_functions 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstBuiltInFunctions builtInFunctions)
        {
            AstFunctionCall.AstFunctionCall4 result = new AstFunctionCall.AstFunctionCall4(ctx, builtInFunctions);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    scalar_function_name ( expression_list? ) 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstScalarFunctionName scalarFunctionName, AstExpressionList expressionList)
        {
            AstFunctionCall.AstFunctionCall5 result = new AstFunctionCall.AstFunctionCall5(ctx, scalarFunctionName, expressionList);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    freetext_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstFreetextFunction freetextFunction)
        {
            AstFunctionCall.AstFunctionCall6 result = new AstFunctionCall.AstFunctionCall6(ctx, freetextFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    partition_function 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstPartitionFunction partitionFunction)
        {
            AstFunctionCall.AstFunctionCall7 result = new AstFunctionCall.AstFunctionCall7(ctx, partitionFunction);
            return result;
        }
        
        /// <summary>
        /// function_call : 
        ///    hierarchyid_static_method 
        /// </summary>
        public static AstFunctionCall FunctionCall(ParserRuleContext ctx, AstHierarchyidStaticMethod hierarchyidStaticMethod)
        {
            AstFunctionCall.AstFunctionCall8 result = new AstFunctionCall.AstFunctionCall8(ctx, hierarchyidStaticMethod);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_function
    /// 	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
    /// 	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
    /// 	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstFreetextFunction : AstBnfRule
    {
        
        protected static string _rule = @"freetext_function
	 : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET
	 | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET
	 | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET";
        
        /// <summary>
        /// freetext_function : containstable_freetexttable LR_BRACKET freetext_table_andcolumn_names COMMA expression_language COMMA expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextFunction1 : AstFreetextFunction
        {
            
            private AstContainstableFreetexttable _containstableFreetexttable;
            
            private AstFreetextTableAndcolumnNames _freetextTableAndcolumnNames;
            
            private AstExpressionLanguage _expressionLanguage;
            
            private AstExpression _expression;
            
            internal AstFreetextFunction1(ParserRuleContext ctx, AstContainstableFreetexttable containstableFreetexttable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage, AstExpression expression) : 
                    base(ctx)
            {
                _containstableFreetexttable = containstableFreetexttable;
                _freetextTableAndcolumnNames = freetextTableAndcolumnNames;
                _expressionLanguage = expressionLanguage;
                _expression = expression;
            }
            
            public virtual AstContainstableFreetexttable ContainstableFreetexttable
            {
                get
                {
                    return _containstableFreetexttable;
                }
            }
            
            public virtual AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames
            {
                get
                {
                    return _freetextTableAndcolumnNames;
                }
            }
            
            public virtual AstExpressionLanguage ExpressionLanguage
            {
                get
                {
                    return _expressionLanguage;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        /// <summary>
        /// freetext_function : semantic_table LR_BRACKET freetext_table_andcolumn_names COMMA expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextFunction2 : AstFreetextFunction
        {
            
            private AstSemanticTable _semanticTable;
            
            private AstFreetextTableAndcolumnNames _freetextTableAndcolumnNames;
            
            private AstExpression _expression;
            
            internal AstFreetextFunction2(ParserRuleContext ctx, AstSemanticTable semanticTable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpression expression) : 
                    base(ctx)
            {
                _semanticTable = semanticTable;
                _freetextTableAndcolumnNames = freetextTableAndcolumnNames;
                _expression = expression;
            }
            
            public virtual AstSemanticTable SemanticTable
            {
                get
                {
                    return _semanticTable;
                }
            }
            
            public virtual AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames
            {
                get
                {
                    return _freetextTableAndcolumnNames;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        /// <summary>
        /// freetext_function : SEMANTICSIMILARITYDETAILSTABLE LR_BRACKET full_table_ref COMMA name1=full_column_name COMMA expr1=expression COMMA name2=full_column_name COMMA expr2=expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextFunction3 : AstFreetextFunction
        {
            
            private AstFullTableRef _fullTableRef;
            
            private AstFullColumnName _name1;
            
            private AstExpression _expr1;
            
            private AstFullColumnName _name2;
            
            private AstExpression _expr2;
            
            internal AstFreetextFunction3(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstFullColumnName name1, AstExpression expr1, AstFullColumnName name2, AstExpression expr2) : 
                    base(ctx)
            {
                _fullTableRef = fullTableRef;
                _name1 = name1;
                _expr1 = expr1;
                _name2 = name2;
                _expr2 = expr2;
            }
            
            public virtual AstFullTableRef FullTableRef
            {
                get
                {
                    return _fullTableRef;
                }
            }
            
            public virtual AstFullColumnName Name1
            {
                get
                {
                    return _name1;
                }
            }
            
            public virtual AstExpression Expr1
            {
                get
                {
                    return _expr1;
                }
            }
            
            public virtual AstFullColumnName Name2
            {
                get
                {
                    return _name2;
                }
            }
            
            public virtual AstExpression Expr2
            {
                get
                {
                    return _expr2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextFunction(this);
            }
        }
        

        
        internal AstFreetextFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFreetextFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstFreetextFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFreetextFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFreetextFunction.Resolve(list);
            if ((index == 5))
            {
                return new AstFreetextFunction.AstFreetextFunction1(ctx, ((AstContainstableFreetexttable)(list[0])), ((AstFreetextTableAndcolumnNames)(list[1])), ((AstExpressionLanguage)(list[2])), ((AstExpression)(list[3])));
            }
            if ((index == 4))
            {
                return new AstFreetextFunction.AstFreetextFunction2(ctx, ((AstSemanticTable)(list[0])), ((AstFreetextTableAndcolumnNames)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 6))
            {
                return new AstFreetextFunction.AstFreetextFunction3(ctx, ((AstFullTableRef)(list[0])), ((AstFullColumnName)(list[1])), ((AstExpression)(list[2])), ((AstFullColumnName)(list[3])), ((AstExpression)(list[4])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 5))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFullColumnName), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstFullColumnName), false, false))
                            {
                                if (AstRoot.Eval(list[4], typeof(AstExpression), false, false))
                                {
                                    return 3;
                                }
                            }
                        }
                    }
                }
            }
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstContainstableFreetexttable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFreetextTableAndcolumnNames), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpressionLanguage), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 1;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstSemanticTable), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstFreetextTableAndcolumnNames), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    containstable_freetexttable ( freetext_table_andcolumn_names , expression_language , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(ParserRuleContext ctx, AstContainstableFreetexttable containstableFreetexttable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage, AstExpression expression)
        {
            AstFreetextFunction.AstFreetextFunction1 result = new AstFreetextFunction.AstFreetextFunction1(ctx, containstableFreetexttable, freetextTableAndcolumnNames, expressionLanguage, expression);
            return result;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    semantic_table ( freetext_table_andcolumn_names , expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(ParserRuleContext ctx, AstSemanticTable semanticTable, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpression expression)
        {
            AstFreetextFunction.AstFreetextFunction2 result = new AstFreetextFunction.AstFreetextFunction2(ctx, semanticTable, freetextTableAndcolumnNames, expression);
            return result;
        }
        
        /// <summary>
        /// freetext_function : 
        ///    SEMANTICSIMILARITYDETAILSTABLE ( full_table_ref , name1=full_column_name , expr1=expression , name2=full_column_name , expr2=expression ) 
        /// </summary>
        public static AstFreetextFunction FreetextFunction(ParserRuleContext ctx, AstFullTableRef fullTableRef, AstFullColumnName name1, AstExpression expr1, AstFullColumnName name2, AstExpression expr2)
        {
            AstFreetextFunction.AstFreetextFunction3 result = new AstFreetextFunction.AstFreetextFunction3(ctx, fullTableRef, name1, expr1, name2, expr2);
            return result;
        }
    }
    
    /// <summary>
    /// freetext_predicate
    /// 	 : CONTAINS  LR_BRACKET  predicate_contains  COMMA  rule = expression  RR_BRACKET
    /// 	 | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
    /// </summary>
    public abstract partial class AstFreetextPredicate : AstBnfRule
    {
        
        protected static string _rule = "freetext_predicate\r\n\t : CONTAINS  LR_BRACKET  predicate_contains  COMMA  rule = e" +
            "xpression  RR_BRACKET\r\n\t | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names " +
            " COMMA  expression_language  RR_BRACKET";
        
        /// <summary>
        /// freetext_predicate : CONTAINS LR_BRACKET predicate_contains COMMA rule=expression RR_BRACKET 
        /// </summary>
        public partial class AstFreetextPredicate1 : AstFreetextPredicate
        {
            
            private AstPredicateContains _predicateContains;
            
            private AstExpression _rule;
            
            internal AstFreetextPredicate1(ParserRuleContext ctx, AstPredicateContains predicateContains, AstExpression rule) : 
                    base(ctx)
            {
                _predicateContains = predicateContains;
                _rule = rule;
            }
            
            public virtual AstPredicateContains PredicateContains
            {
                get
                {
                    return _predicateContains;
                }
            }
            
            public virtual AstExpression Rule
            {
                get
                {
                    return _rule;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextPredicate(this);
            }
        }
        /// <summary>
        /// freetext_predicate : FREETEXT LR_BRACKET freetext_table_andcolumn_names COMMA expression_language RR_BRACKET 
        /// </summary>
        public partial class AstFreetextPredicate2 : AstFreetextPredicate
        {
            
            private AstFreetextTableAndcolumnNames _freetextTableAndcolumnNames;
            
            private AstExpressionLanguage _expressionLanguage;
            
            internal AstFreetextPredicate2(ParserRuleContext ctx, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage) : 
                    base(ctx)
            {
                _freetextTableAndcolumnNames = freetextTableAndcolumnNames;
                _expressionLanguage = expressionLanguage;
            }
            
            public virtual AstFreetextTableAndcolumnNames FreetextTableAndcolumnNames
            {
                get
                {
                    return _freetextTableAndcolumnNames;
                }
            }
            
            public virtual AstExpressionLanguage ExpressionLanguage
            {
                get
                {
                    return _expressionLanguage;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFreetextPredicate(this);
            }
        }
        

        
        internal AstFreetextPredicate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFreetextPredicate(Position p) : 
                base(p)
        {
        }
        
        internal AstFreetextPredicate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFreetextPredicate Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFreetextPredicate.Resolve(list);
            if ((index == 3))
            {
                return new AstFreetextPredicate.AstFreetextPredicate1(ctx, ((AstPredicateContains)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstFreetextPredicate.AstFreetextPredicate2(ctx, ((AstFreetextTableAndcolumnNames)(list[0])), ((AstExpressionLanguage)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstPredicateContains), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFreetextTableAndcolumnNames), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionLanguage), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    CONTAINS ( predicate_contains , rule=expression ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(ParserRuleContext ctx, AstPredicateContains predicateContains, AstExpression rule)
        {
            AstFreetextPredicate.AstFreetextPredicate1 result = new AstFreetextPredicate.AstFreetextPredicate1(ctx, predicateContains, rule);
            return result;
        }
        
        /// <summary>
        /// freetext_predicate : 
        ///    FREETEXT ( freetext_table_andcolumn_names , expression_language ) 
        /// </summary>
        public static AstFreetextPredicate FreetextPredicate(ParserRuleContext ctx, AstFreetextTableAndcolumnNames freetextTableAndcolumnNames, AstExpressionLanguage expressionLanguage)
        {
            AstFreetextPredicate.AstFreetextPredicate2 result = new AstFreetextPredicate.AstFreetextPredicate2(ctx, freetextTableAndcolumnNames, expressionLanguage);
            return result;
        }
    }
    
    /// <summary>
    /// predicate_contains
    /// 	 : full_column_name
    /// 	 | full_column_names
    /// 	 | STAR
    /// 	 | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstPredicateContains : AstBnfRule
    {
        
        protected static string _rule = "predicate_contains\r\n\t : full_column_name\r\n\t | full_column_names\r\n\t | STAR\r\n\t | PR" +
            "OPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET";
        
        /// <summary>
        /// predicate_contains : full_column_name 
        /// </summary>
        public partial class AstPredicateContains1 : AstPredicateContains
        {
            
            private AstFullColumnName _fullColumnName;
            
            internal AstPredicateContains1(ParserRuleContext ctx, AstFullColumnName fullColumnName) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        /// <summary>
        /// predicate_contains : full_column_names 
        /// </summary>
        public partial class AstPredicateContains2 : AstPredicateContains
        {
            
            private AstFullColumnNames _fullColumnNames;
            
            internal AstPredicateContains2(ParserRuleContext ctx, AstFullColumnNames fullColumnNames) : 
                    base(ctx)
            {
                _fullColumnNames = fullColumnNames;
            }
            
            public virtual AstFullColumnNames FullColumnNames
            {
                get
                {
                    return _fullColumnNames;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        /// <summary>
        /// predicate_contains : STAR 
        /// </summary>
        public partial class AstPredicateContains3 : AstPredicateContains
        {
            
            internal AstPredicateContains3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        /// <summary>
        /// predicate_contains : PROPERTY LR_BRACKET full_column_name COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstPredicateContains4 : AstPredicateContains
        {
            
            private AstFullColumnName _fullColumnName;
            
            private AstExpression _property;
            
            internal AstPredicateContains4(ParserRuleContext ctx, AstFullColumnName fullColumnName, AstExpression property) : 
                    base(ctx)
            {
                _fullColumnName = fullColumnName;
                _property = property;
            }
            
            public virtual AstFullColumnName FullColumnName
            {
                get
                {
                    return _fullColumnName;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPredicateContains(this);
            }
        }
        

        
        internal AstPredicateContains(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPredicateContains(Position p) : 
                base(p)
        {
        }
        
        internal AstPredicateContains(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPredicateContains Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPredicateContains.Resolve(list);
            if ((index == 2))
            {
                return new AstPredicateContains.AstPredicateContains1(ctx, ((AstFullColumnName)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPredicateContains.AstPredicateContains2(ctx, ((AstFullColumnNames)(list[0])));
            }
            if ((index == 1))
            {
                return new AstPredicateContains.AstPredicateContains3(ctx);
            }
            if ((index == 3))
            {
                return new AstPredicateContains.AstPredicateContains4(ctx, ((AstFullColumnName)(list[0])), ((AstExpression)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 3;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnNames), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    full_column_name 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx, AstFullColumnName fullColumnName)
        {
            AstPredicateContains.AstPredicateContains1 result = new AstPredicateContains.AstPredicateContains1(ctx, fullColumnName);
            return result;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    full_column_names 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx, AstFullColumnNames fullColumnNames)
        {
            AstPredicateContains.AstPredicateContains2 result = new AstPredicateContains.AstPredicateContains2(ctx, fullColumnNames);
            return result;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    STAR 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx)
        {
            AstPredicateContains.AstPredicateContains3 result = new AstPredicateContains.AstPredicateContains3(ctx);
            return result;
        }
        
        /// <summary>
        /// predicate_contains : 
        ///    PROPERTY ( full_column_name , property=expression ) 
        /// </summary>
        public static AstPredicateContains PredicateContains(ParserRuleContext ctx, AstFullColumnName fullColumnName, AstExpression property)
        {
            AstPredicateContains.AstPredicateContains4 result = new AstPredicateContains.AstPredicateContains4(ctx, fullColumnName, property);
            return result;
        }
    }
    
    /// <summary>
    /// built_in_functions
    /// 	 : APP_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | APPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner = expression  RR_BRACKET
    /// 	 | ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET
    /// 	 | COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET
    /// 	 | COLUMNPROPERTY  LR_BRACKET  idExpression = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET
    /// 	 | DB_NAME  LR_BRACKET  database = expression  RR_BRACKET
    /// 	 | FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET
    /// 	 | FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET
    /// 	 | FILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET
    /// 	 | FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET
    /// 	 | FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | INDEX_COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key = expression  RR_BRACKET
    /// 	 | INDEXKEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | NEXT  VALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET
    /// 	 | OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET
    /// 	 | OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expression)?  RR_BRACKET
    /// 	 | OBJECTPROPERTY  LR_BRACKET  idExpression = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | OBJECTPROPERTYEX  LR_BRACKET  idExpression = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET
    /// 	 | SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET
    /// 	 | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET
    /// 	 | SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET
    /// 	 | SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET
    /// 	 | STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression  RR_BRACKET
    /// 	 | TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET
    /// 	 | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET
    /// 	 | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET
    /// 	 | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | CHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET
    /// 	 | CONCAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET
    /// 	 | FORMAT  LR_BRACKET  expressions  RR_BRACKET
    /// 	 | LEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | LEN  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | LOWER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | PATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET
    /// 	 | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET
    /// 	 | REPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET
    /// 	 | REPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | REVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET
    /// 	 | RIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET
    /// 	 | RTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | SPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET
    /// 	 | STR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRACKET
    /// 	 | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)?
    /// 	 | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET
    /// 	 | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET
    /// 	 | SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET
    /// 	 | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET
    /// 	 | TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET
    /// 	 | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET
    /// 	 | UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET
    /// 	 | BINARY_CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET
    /// 	 | CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET
    /// 	 | COMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  RR_BRACKET
    /// 	 | CONTEXT_INFO  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET
    /// 	 | DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET
    /// 	 | ERROR_LINE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_NUMBER  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_SEVERITY  LR_BRACKET  RR_BRACKET
    /// 	 | ERROR_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | FORMATMESSAGE  LR_BRACKET  format_argument  COMMA  expressions  RR_BRACKET
    /// 	 | GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET
    /// 	 | GETANSINULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET
    /// 	 | HOST_ID  LR_BRACKET  RR_BRACKET
    /// 	 | HOST_NAME  LR_BRACKET  RR_BRACKET
    /// 	 | ISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NEWID  LR_BRACKET  RR_BRACKET
    /// 	 | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET
    /// 	 | ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET
    /// 	 | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET
    /// 	 | XACT_STATE  LR_BRACKET  RR_BRACKET
    /// 	 | CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET
    /// 	 | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET
    /// 	 | COALESCE  LR_BRACKET  expression_list  RR_BRACKET
    /// 	 | CURRENT_DATE  LR_BRACKET  RR_BRACKET
    /// 	 | CURRENT_TIMESTAMP
    /// 	 | CURRENT_USER
    /// 	 | DATEADD  LR_BRACKET  datepart = id_simple  COMMA  number = expression  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEDIFF  LR_BRACKET  datepart = id_simple  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET
    /// 	 | DATENAME  LR_BRACKET  datepart = id_simple  COMMA  date = expression  RR_BRACKET
    /// 	 | DATEPART  LR_BRACKET  datepart = id_simple  COMMA  date = expression  RR_BRACKET
    /// 	 | GETDATE  LR_BRACKET  RR_BRACKET
    /// 	 | GETUTCDATE  LR_BRACKET  RR_BRACKET
    /// 	 | IDENTITY  LR_BRACKET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET
    /// 	 | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET
    /// 	 | NULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET
    /// 	 | SESSION_USER
    /// 	 | SYSTEM_USER
    /// 	 | USER
    /// 	 | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET
    /// 	 | xml_data_type_methods
    /// 	 | IIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
    /// </summary>
    public abstract partial class AstBuiltInFunctions : AstBnfRule
    {
        
        protected static string _rule = "built_in_functions\r\n\t : APP_NAME  LR_BRACKET  RR_BRACKET\r\n\t | APPLOCK_MODE  LR_BR" +
            "ACKET  database_principal = expression  COMMA  resource_name = expression  COMMA" +
            "  lock_owner = expression  RR_BRACKET\r\n\t | APPLOCK_TEST  LR_BRACKET  database_pr" +
            "incipal = expression  COMMA  resource_name = expression  COMMA  lockmode = expre" +
            "ssion  COMMA  lock_owner = expression  RR_BRACKET\r\n\t | ASSEMBLYPROPERTY  LR_BRAC" +
            "KET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET\r\n\t " +
            "| COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRA" +
            "CKET\r\n\t | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  " +
            "RR_BRACKET\r\n\t | COLUMNPROPERTY  LR_BRACKET  idExpression = expression  COMMA  co" +
            "lumn = expression  COMMA  property = expression  RR_BRACKET\r\n\t | DATABASEPROPERT" +
            "YEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET" +
            "\r\n\t | DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET\r\n\t | DB_NAME  LR_" +
            "BRACKET  database = expression  RR_BRACKET\r\n\t | FILE_ID  LR_BRACKET  file_name =" +
            " expression  RR_BRACKET\r\n\t | FILE_IDEX  LR_BRACKET  file_name = expression  RR_B" +
            "RACKET\r\n\t | FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET\r\n\t | FILEGROUP_" +
            "ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET\r\n\t | FILEGROUP_NAME  LR_" +
            "BRACKET  filegroup_id = expression  RR_BRACKET\r\n\t | FILEGROUPPROPERTY  LR_BRACKE" +
            "T  filegroup = expression  COMMA  property = expression  RR_BRACKET\r\n\t | FILEPRO" +
            "PERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET\r\n" +
            "\t | FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression " +
            " RR_BRACKET\r\n\t | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMM" +
            "A  property = expression  RR_BRACKET\r\n\t | FULLTEXTSERVICEPROPERTY  LR_BRACKET  p" +
            "roperty = expression  RR_BRACKET\r\n\t | INDEX_COL  LR_BRACKET  tableOrView = expre" +
            "ssion  COMMA  index = expression  COMMA  key = expression  RR_BRACKET\r\n\t | INDEX" +
            "KEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA " +
            " key = expression  COMMA  property = expression  RR_BRACKET\r\n\t | INDEXPROPERTY  " +
            "LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA " +
            " property = expression  RR_BRACKET\r\n\t | NEXT  VALUE  FOR  sequenceName = full_ta" +
            "ble_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)?\r\n\t | OBJECT_DEFINITION" +
            "  LR_BRACKET  object = expression  RR_BRACKET\r\n\t | OBJECT_ID  LR_BRACKET  object" +
            "Name = expression  (COMMA  object_type = expression)?  RR_BRACKET\r\n\t | OBJECT_NA" +
            "ME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET" +
            "\r\n\t | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  databa" +
            "se = expression)?  RR_BRACKET\r\n\t | OBJECTPROPERTY  LR_BRACKET  idExpression = ex" +
            "pression  COMMA  property = expression  RR_BRACKET\r\n\t | OBJECTPROPERTYEX  LR_BRA" +
            "CKET  idExpression = expression  COMMA  property = expression  RR_BRACKET\r\n\t | O" +
            "RIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET\r\n\t | PARSENAME  LR_BRACKET  objectName =" +
            " expression  COMMA  object_piece = expression  RR_BRACKET\r\n\t | SCHEMA_ID  LR_BRA" +
            "CKET  schemaName = expression  RR_BRACKET\r\n\t | SCHEMA_NAME  LR_BRACKET  schemaId" +
            " = expression  RR_BRACKET\r\n\t | SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET\r\n\t | SERVE" +
            "RPROPERTY  LR_BRACKET  property = expression  RR_BRACKET\r\n\t | STATS_DATE  LR_BRA" +
            "CKET  target_object = expression  COMMA  stats = expression  RR_BRACKET\r\n\t | TYP" +
            "E_ID  LR_BRACKET  type_name = expression  RR_BRACKET\r\n\t | TYPE_NAME  LR_BRACKET " +
            " type = expression  RR_BRACKET\r\n\t | TYPEPROPERTY  LR_BRACKET  type = expression " +
            " COMMA  property = expression  RR_BRACKET\r\n\t | ASCII  LR_BRACKET  character_expr" +
            "ession = expression  RR_BRACKET\r\n\t | CHAR  LR_BRACKET  integer_expression = expr" +
            "ession  RR_BRACKET\r\n\t | CHARINDEX  LR_BRACKET  expressionToFind = expression  CO" +
            "MMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_" +
            "BRACKET\r\n\t | CONCAT  LR_BRACKET  expressions  RR_BRACKET\r\n\t | CONCAT_WS  LR_BRAC" +
            "KET  expressions  RR_BRACKET\r\n\t | DIFFERENCE  LR_BRACKET  character_expression_1" +
            " = expression  COMMA  character_expression_2 = expression  RR_BRACKET\r\n\t | FORMA" +
            "T  LR_BRACKET  expressions  RR_BRACKET\r\n\t | LEFT  LR_BRACKET  character_expressi" +
            "on = expression  COMMA  integer_expression = expression  RR_BRACKET\r\n\t | LEN  LR" +
            "_BRACKET  string_expression = expression  RR_BRACKET\r\n\t | LOWER  LR_BRACKET  cha" +
            "racter_expression = expression  RR_BRACKET\r\n\t | LTRIM  LR_BRACKET  character_exp" +
            "ression = expression  RR_BRACKET\r\n\t | NCHAR  LR_BRACKET  integer_expression = ex" +
            "pression  RR_BRACKET\r\n\t | PATINDEX  LR_BRACKET  pattern = expression  COMMA  str" +
            "ing_expression = expression  RR_BRACKET\r\n\t | QUOTENAME  LR_BRACKET  character_st" +
            "ring = expression  (COMMA  quote_character = expression)?  RR_BRACKET\r\n\t | REPLA" +
            "CE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with =" +
            " expression  RR_BRACKET\r\n\t | REPLICATE  LR_BRACKET  string_expression = expressi" +
            "on  COMMA  integer_expression = expression  RR_BRACKET\r\n\t | REVERSE  LR_BRACKET " +
            " string_expression = expression  RR_BRACKET\r\n\t | RIGHT  LR_BRACKET  character_ex" +
            "pression = expression  COMMA  integer_expression = expression  RR_BRACKET\r\n\t | R" +
            "TRIM  LR_BRACKET  character_expression = expression  RR_BRACKET\r\n\t | SOUNDEX  LR" +
            "_BRACKET  character_expression = expression  RR_BRACKET\r\n\t | SPACE_KEYWORD  LR_B" +
            "RACKET  integer_expression = expression  RR_BRACKET\r\n\t | STR  LR_BRACKET  float_" +
            "expression = expression  (COMMA  length_expression = expression  (COMMA  decimal" +
            "_expr = expression)?)?  RR_BRACKET\r\n\t | STRING_AGG  LR_BRACKET  expr = expressio" +
            "n  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_" +
            "by_clause  RR_BRACKET)?\r\n\t | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMM" +
            "A  type_ = expression  RR_BRACKET\r\n\t | STUFF  LR_BRACKET  str = expression  COMM" +
            "A  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET" +
            "\r\n\t | SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = exp" +
            "ression  COMMA  length = expression  RR_BRACKET\r\n\t | TRANSLATE  LR_BRACKET  inpu" +
            "tString = expression  COMMA  characters = expression  COMMA  translations = expr" +
            "ession  RR_BRACKET\r\n\t | TRIM  LR_BRACKET  (characters = expression  FROM)?  stri" +
            "ng_ = expression  RR_BRACKET\r\n\t | UNICODE  LR_BRACKET  ncharacter_expression = e" +
            "xpression  RR_BRACKET\r\n\t | UPPER  LR_BRACKET  character_expression = expression " +
            " RR_BRACKET\r\n\t | BINARY_CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET\r\n\t " +
            "| CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET\r\n\t | COMPRESS  LR_BRACKET" +
            "  expr = expression  RR_BRACKET\r\n\t | CONNECTIONPROPERTY  LR_BRACKET  cnx_propert" +
            "y = stringtext  RR_BRACKET\r\n\t | CONTEXT_INFO  LR_BRACKET  RR_BRACKET\r\n\t | CURREN" +
            "T_REQUEST_ID  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_TRANSACTION_ID  LR_BRACKET  RR" +
            "_BRACKET\r\n\t | DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET\r\n\t | ERROR_L" +
            "INE  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET\r\n\t | ERRO" +
            "R_NUMBER  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET\r\n\t" +
            " | ERROR_SEVERITY  LR_BRACKET  RR_BRACKET\r\n\t | ERROR_STATE  LR_BRACKET  RR_BRACK" +
            "ET\r\n\t | FORMATMESSAGE  LR_BRACKET  format_argument  COMMA  expressions  RR_BRACK" +
            "ET\r\n\t | GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET\r\n\t | GETANSIN" +
            "ULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET\r\n\t | HOST_ID  LR_BRAC" +
            "KET  RR_BRACKET\r\n\t | HOST_NAME  LR_BRACKET  RR_BRACKET\r\n\t | ISNULL  LR_BRACKET  " +
            "left = expression  COMMA  right = expression  RR_BRACKET\r\n\t | ISNUMERIC  LR_BRAC" +
            "KET  expression  RR_BRACKET\r\n\t | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET\r\n" +
            "\t | NEWID  LR_BRACKET  RR_BRACKET\r\n\t | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET\r\n" +
            "\t | ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET\r\n\t | SESSION_CONTEXT  LR_BRACKET  sessi" +
            "on_key = stringtext  RR_BRACKET\r\n\t | XACT_STATE  LR_BRACKET  RR_BRACKET\r\n\t | CAS" +
            "T  LR_BRACKET  expression  AS  data_type  RR_BRACKET\r\n\t | TRY_CAST  LR_BRACKET  " +
            "expression  AS  data_type  RR_BRACKET\r\n\t | CONVERT  LR_BRACKET  convert_data_typ" +
            "e = data_type  COMMA  expression2  RR_BRACKET\r\n\t | COALESCE  LR_BRACKET  express" +
            "ion_list  RR_BRACKET\r\n\t | CURRENT_DATE  LR_BRACKET  RR_BRACKET\r\n\t | CURRENT_TIME" +
            "STAMP\r\n\t | CURRENT_USER\r\n\t | DATEADD  LR_BRACKET  datepart = id_simple  COMMA  n" +
            "umber = expression  COMMA  date = expression  RR_BRACKET\r\n\t | DATEDIFF  LR_BRACK" +
            "ET  datepart = id_simple  COMMA  date_first = expression  COMMA  date_second = e" +
            "xpression  RR_BRACKET\r\n\t | DATENAME  LR_BRACKET  datepart = id_simple  COMMA  da" +
            "te = expression  RR_BRACKET\r\n\t | DATEPART  LR_BRACKET  datepart = id_simple  COM" +
            "MA  date = expression  RR_BRACKET\r\n\t | GETDATE  LR_BRACKET  RR_BRACKET\r\n\t | GETU" +
            "TCDATE  LR_BRACKET  RR_BRACKET\r\n\t | IDENTITY  LR_BRACKET  data_type  (COMMA  see" +
            "d = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET\r\n\t | MIN_ACTIVE_ROWVERS" +
            "ION  LR_BRACKET  RR_BRACKET\r\n\t | NULLIF  LR_BRACKET  left = expression  COMMA  r" +
            "ight = expression  RR_BRACKET\r\n\t | SESSION_USER\r\n\t | SYSTEM_USER\r\n\t | USER\r\n\t | " +
            "PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression" +
            ")?  RR_BRACKET\r\n\t | xml_data_type_methods\r\n\t | IIF  LR_BRACKET  cond = search_co" +
            "ndition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET";
        
        /// <summary>
        /// built_in_functions : APP_NAME LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions1 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : APPLOCK_MODE LR_BRACKET database_principal=expression COMMA resource_name=expression COMMA lock_owner=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions2 : AstBuiltInFunctions
        {
            
            private AstExpression _databasePrincipal;
            
            private AstExpression _resourceName;
            
            private AstExpression _lockOwner;
            
            internal AstBuiltInFunctions2(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockOwner) : 
                    base(ctx)
            {
                _databasePrincipal = databasePrincipal;
                _resourceName = resourceName;
                _lockOwner = lockOwner;
            }
            
            public virtual AstExpression DatabasePrincipal
            {
                get
                {
                    return _databasePrincipal;
                }
            }
            
            public virtual AstExpression ResourceName
            {
                get
                {
                    return _resourceName;
                }
            }
            
            public virtual AstExpression LockOwner
            {
                get
                {
                    return _lockOwner;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : APPLOCK_TEST LR_BRACKET database_principal=expression COMMA resource_name=expression COMMA lockmode=expression COMMA lock_owner=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions3 : AstBuiltInFunctions
        {
            
            private AstExpression _databasePrincipal;
            
            private AstExpression _resourceName;
            
            private AstExpression _lockmode;
            
            private AstExpression _lockOwner;
            
            internal AstBuiltInFunctions3(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockmode, AstExpression lockOwner) : 
                    base(ctx)
            {
                _databasePrincipal = databasePrincipal;
                _resourceName = resourceName;
                _lockmode = lockmode;
                _lockOwner = lockOwner;
            }
            
            public virtual AstExpression DatabasePrincipal
            {
                get
                {
                    return _databasePrincipal;
                }
            }
            
            public virtual AstExpression ResourceName
            {
                get
                {
                    return _resourceName;
                }
            }
            
            public virtual AstExpression Lockmode
            {
                get
                {
                    return _lockmode;
                }
            }
            
            public virtual AstExpression LockOwner
            {
                get
                {
                    return _lockOwner;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ASSEMBLYPROPERTY LR_BRACKET assemblyName=expression COMMA propertyName=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions4 : AstBuiltInFunctions
        {
            
            private AstExpression _assemblyName;
            
            private AstExpression _propertyName;
            
            internal AstBuiltInFunctions4(ParserRuleContext ctx, AstExpression assemblyName, AstExpression propertyName) : 
                    base(ctx)
            {
                _assemblyName = assemblyName;
                _propertyName = propertyName;
            }
            
            public virtual AstExpression Assemblyname
            {
                get
                {
                    return _assemblyName;
                }
            }
            
            public virtual AstExpression Propertyname
            {
                get
                {
                    return _propertyName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COL_LENGTH LR_BRACKET table=expression COMMA column=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions5 : AstBuiltInFunctions
        {
            
            private AstExpression _table;
            
            private AstExpression _column;
            
            internal AstBuiltInFunctions5(ParserRuleContext ctx, AstExpression table, AstExpression column) : 
                    base(ctx)
            {
                _table = table;
                _column = column;
            }
            
            public virtual AstExpression Table
            {
                get
                {
                    return _table;
                }
            }
            
            public virtual AstExpression Column
            {
                get
                {
                    return _column;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COL_NAME LR_BRACKET table=expression COMMA column=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions6 : AstBuiltInFunctions
        {
            
            private AstExpression _table;
            
            private AstExpression _column;
            
            internal AstBuiltInFunctions6(ParserRuleContext ctx, AstExpression table, AstExpression column) : 
                    base(ctx)
            {
                _table = table;
                _column = column;
            }
            
            public virtual AstExpression Table
            {
                get
                {
                    return _table;
                }
            }
            
            public virtual AstExpression Column
            {
                get
                {
                    return _column;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COLUMNPROPERTY LR_BRACKET idExpression=expression COMMA column=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions7 : AstBuiltInFunctions
        {
            
            private AstExpression _idExpression;
            
            private AstExpression _column;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions7(ParserRuleContext ctx, AstExpression idExpression, AstExpression column, AstExpression property) : 
                    base(ctx)
            {
                _idExpression = idExpression;
                _column = column;
                _property = property;
            }
            
            public virtual AstExpression Idexpression
            {
                get
                {
                    return _idExpression;
                }
            }
            
            public virtual AstExpression Column
            {
                get
                {
                    return _column;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATABASEPROPERTYEX LR_BRACKET database=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions8 : AstBuiltInFunctions
        {
            
            private AstExpression _database;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions8(ParserRuleContext ctx, AstExpression database, AstExpression property) : 
                    base(ctx)
            {
                _database = database;
                _property = property;
            }
            
            public virtual AstExpression Database
            {
                get
                {
                    return _database;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DB_ID LR_BRACKET databaseName=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions9 : AstBuiltInFunctions
        {
            
            private AstExpression _databaseName;
            
            internal AstBuiltInFunctions9(ParserRuleContext ctx, AstExpression databaseName) : 
                    base(ctx)
            {
                _databaseName = databaseName;
            }
            
            public virtual AstExpression Databasename
            {
                get
                {
                    return _databaseName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DB_NAME LR_BRACKET database=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions10 : AstBuiltInFunctions
        {
            
            private AstExpression _database;
            
            internal AstBuiltInFunctions10(ParserRuleContext ctx, AstExpression database) : 
                    base(ctx)
            {
                _database = database;
            }
            
            public virtual AstExpression Database
            {
                get
                {
                    return _database;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_ID LR_BRACKET file_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions11 : AstBuiltInFunctions
        {
            
            private AstExpression _fileName;
            
            internal AstBuiltInFunctions11(ParserRuleContext ctx, AstExpression fileName) : 
                    base(ctx)
            {
                _fileName = fileName;
            }
            
            public virtual AstExpression FileName
            {
                get
                {
                    return _fileName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_IDEX LR_BRACKET file_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions12 : AstBuiltInFunctions
        {
            
            private AstExpression _fileName;
            
            internal AstBuiltInFunctions12(ParserRuleContext ctx, AstExpression fileName) : 
                    base(ctx)
            {
                _fileName = fileName;
            }
            
            public virtual AstExpression FileName
            {
                get
                {
                    return _fileName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILE_NAME LR_BRACKET file=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions13 : AstBuiltInFunctions
        {
            
            private AstExpression _file;
            
            internal AstBuiltInFunctions13(ParserRuleContext ctx, AstExpression file) : 
                    base(ctx)
            {
                _file = file;
            }
            
            public virtual AstExpression File
            {
                get
                {
                    return _file;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUP_ID LR_BRACKET filegroup_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions14 : AstBuiltInFunctions
        {
            
            private AstExpression _filegroupName;
            
            internal AstBuiltInFunctions14(ParserRuleContext ctx, AstExpression filegroupName) : 
                    base(ctx)
            {
                _filegroupName = filegroupName;
            }
            
            public virtual AstExpression FilegroupName
            {
                get
                {
                    return _filegroupName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUP_NAME LR_BRACKET filegroup_id=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions15 : AstBuiltInFunctions
        {
            
            private AstExpression _filegroupId;
            
            internal AstBuiltInFunctions15(ParserRuleContext ctx, AstExpression filegroupId) : 
                    base(ctx)
            {
                _filegroupId = filegroupId;
            }
            
            public virtual AstExpression FilegroupId
            {
                get
                {
                    return _filegroupId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEGROUPPROPERTY LR_BRACKET filegroup=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions16 : AstBuiltInFunctions
        {
            
            private AstExpression _filegroup;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions16(ParserRuleContext ctx, AstExpression filegroup, AstExpression property) : 
                    base(ctx)
            {
                _filegroup = filegroup;
                _property = property;
            }
            
            public virtual AstExpression Filegroup
            {
                get
                {
                    return _filegroup;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEPROPERTY LR_BRACKET file=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions17 : AstBuiltInFunctions
        {
            
            private AstExpression _file;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions17(ParserRuleContext ctx, AstExpression file, AstExpression property) : 
                    base(ctx)
            {
                _file = file;
                _property = property;
            }
            
            public virtual AstExpression File
            {
                get
                {
                    return _file;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FILEPROPERTYEX LR_BRACKET name=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions18 : AstBuiltInFunctions
        {
            
            private AstExpression _name;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions18(ParserRuleContext ctx, AstExpression name, AstExpression property) : 
                    base(ctx)
            {
                _name = name;
                _property = property;
            }
            
            public virtual AstExpression Name
            {
                get
                {
                    return _name;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FULLTEXTCATALOGPROPERTY LR_BRACKET catalog=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions19 : AstBuiltInFunctions
        {
            
            private AstExpression _catalog;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions19(ParserRuleContext ctx, AstExpression catalog, AstExpression property) : 
                    base(ctx)
            {
                _catalog = catalog;
                _property = property;
            }
            
            public virtual AstExpression Catalog
            {
                get
                {
                    return _catalog;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FULLTEXTSERVICEPROPERTY LR_BRACKET property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions20 : AstBuiltInFunctions
        {
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions20(ParserRuleContext ctx, AstExpression property) : 
                    base(ctx)
            {
                _property = property;
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEX_COL LR_BRACKET tableOrView=expression COMMA index=expression COMMA key=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions21 : AstBuiltInFunctions
        {
            
            private AstExpression _tableOrView;
            
            private AstExpression _index;
            
            private AstExpression _key;
            
            internal AstBuiltInFunctions21(ParserRuleContext ctx, AstExpression tableOrView, AstExpression index, AstExpression key) : 
                    base(ctx)
            {
                _tableOrView = tableOrView;
                _index = index;
                _key = key;
            }
            
            public virtual AstExpression Tableorview
            {
                get
                {
                    return _tableOrView;
                }
            }
            
            public virtual AstExpression Index
            {
                get
                {
                    return _index;
                }
            }
            
            public virtual AstExpression Key
            {
                get
                {
                    return _key;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEXKEY_PROPERTY LR_BRACKET object=expression COMMA index=expression COMMA key=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions22 : AstBuiltInFunctions
        {
            
            private AstExpression _object;
            
            private AstExpression _index;
            
            private AstExpression _key;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions22(ParserRuleContext ctx, AstExpression @object, AstExpression index, AstExpression key, AstExpression property) : 
                    base(ctx)
            {
                _object = @object;
                _index = index;
                _key = key;
                _property = property;
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public virtual AstExpression Index
            {
                get
                {
                    return _index;
                }
            }
            
            public virtual AstExpression Key
            {
                get
                {
                    return _key;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : INDEXPROPERTY LR_BRACKET object=expression COMMA index_or_statistics=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions23 : AstBuiltInFunctions
        {
            
            private AstExpression _object;
            
            private AstExpression _indexOrStatistics;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions23(ParserRuleContext ctx, AstExpression @object, AstExpression indexOrStatistics, AstExpression property) : 
                    base(ctx)
            {
                _object = @object;
                _indexOrStatistics = indexOrStatistics;
                _property = property;
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public virtual AstExpression IndexOrStatistics
            {
                get
                {
                    return _indexOrStatistics;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEXT VALUE FOR sequenceName=full_table_ref OVER LR_BRACKET order_by_clause RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions24 : AstBuiltInFunctions
        {
            
            private AstFullTableRef _sequenceName;
            
            private AstOrderByClause _orderByClause;
            
            internal AstBuiltInFunctions24(ParserRuleContext ctx, AstFullTableRef sequenceName, AstOrderByClause orderByClause) : 
                    base(ctx)
            {
                _sequenceName = sequenceName;
                _orderByClause = orderByClause;
            }
            
            public virtual AstFullTableRef Sequencename
            {
                get
                {
                    return _sequenceName;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_DEFINITION LR_BRACKET object=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions25 : AstBuiltInFunctions
        {
            
            private AstExpression _object;
            
            internal AstBuiltInFunctions25(ParserRuleContext ctx, AstExpression @object) : 
                    base(ctx)
            {
                _object = @object;
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_ID LR_BRACKET objectName=expression COMMA object_type=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions26 : AstBuiltInFunctions
        {
            
            private AstExpression _objectName;
            
            private AstExpression _objectType;
            
            internal AstBuiltInFunctions26(ParserRuleContext ctx, AstExpression objectName, AstExpression objectType) : 
                    base(ctx)
            {
                _objectName = objectName;
                _objectType = objectType;
            }
            
            public virtual AstExpression Objectname
            {
                get
                {
                    return _objectName;
                }
            }
            
            public virtual AstExpression ObjectType
            {
                get
                {
                    return _objectType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_NAME LR_BRACKET object=expression COMMA database=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions27 : AstBuiltInFunctions
        {
            
            private AstExpression _object;
            
            private AstExpression _database;
            
            internal AstBuiltInFunctions27(ParserRuleContext ctx, AstExpression @object, AstExpression database) : 
                    base(ctx)
            {
                _object = @object;
                _database = database;
            }
            
            public virtual AstExpression Object
            {
                get
                {
                    return _object;
                }
            }
            
            public virtual AstExpression Database
            {
                get
                {
                    return _database;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECT_SCHEMA_NAME LR_BRACKET target_object=expression COMMA database=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions28 : AstBuiltInFunctions
        {
            
            private AstExpression _targetObject;
            
            private AstExpression _database;
            
            internal AstBuiltInFunctions28(ParserRuleContext ctx, AstExpression targetObject, AstExpression database) : 
                    base(ctx)
            {
                _targetObject = targetObject;
                _database = database;
            }
            
            public virtual AstExpression TargetObject
            {
                get
                {
                    return _targetObject;
                }
            }
            
            public virtual AstExpression Database
            {
                get
                {
                    return _database;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECTPROPERTY LR_BRACKET idExpression=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions29 : AstBuiltInFunctions
        {
            
            private AstExpression _idExpression;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions29(ParserRuleContext ctx, AstExpression idExpression, AstExpression property) : 
                    base(ctx)
            {
                _idExpression = idExpression;
                _property = property;
            }
            
            public virtual AstExpression Idexpression
            {
                get
                {
                    return _idExpression;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : OBJECTPROPERTYEX LR_BRACKET idExpression=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions30 : AstBuiltInFunctions
        {
            
            private AstExpression _idExpression;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions30(ParserRuleContext ctx, AstExpression idExpression, AstExpression property) : 
                    base(ctx)
            {
                _idExpression = idExpression;
                _property = property;
            }
            
            public virtual AstExpression Idexpression
            {
                get
                {
                    return _idExpression;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ORIGINAL_DB_NAME LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions31 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions31(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PARSENAME LR_BRACKET objectName=expression COMMA object_piece=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions32 : AstBuiltInFunctions
        {
            
            private AstExpression _objectName;
            
            private AstExpression _objectPiece;
            
            internal AstBuiltInFunctions32(ParserRuleContext ctx, AstExpression objectName, AstExpression objectPiece) : 
                    base(ctx)
            {
                _objectName = objectName;
                _objectPiece = objectPiece;
            }
            
            public virtual AstExpression Objectname
            {
                get
                {
                    return _objectName;
                }
            }
            
            public virtual AstExpression ObjectPiece
            {
                get
                {
                    return _objectPiece;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCHEMA_ID LR_BRACKET schemaName=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions33 : AstBuiltInFunctions
        {
            
            private AstExpression _schemaName;
            
            internal AstBuiltInFunctions33(ParserRuleContext ctx, AstExpression schemaName) : 
                    base(ctx)
            {
                _schemaName = schemaName;
            }
            
            public virtual AstExpression Schemaname
            {
                get
                {
                    return _schemaName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCHEMA_NAME LR_BRACKET schemaId=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions34 : AstBuiltInFunctions
        {
            
            private AstExpression _schemaId;
            
            internal AstBuiltInFunctions34(ParserRuleContext ctx, AstExpression schemaId) : 
                    base(ctx)
            {
                _schemaId = schemaId;
            }
            
            public virtual AstExpression Schemaid
            {
                get
                {
                    return _schemaId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SCOPE_IDENTITY LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions35 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions35(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SERVERPROPERTY LR_BRACKET property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions36 : AstBuiltInFunctions
        {
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions36(ParserRuleContext ctx, AstExpression property) : 
                    base(ctx)
            {
                _property = property;
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STATS_DATE LR_BRACKET target_object=expression COMMA stats=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions37 : AstBuiltInFunctions
        {
            
            private AstExpression _targetObject;
            
            private AstExpression _stats;
            
            internal AstBuiltInFunctions37(ParserRuleContext ctx, AstExpression targetObject, AstExpression stats) : 
                    base(ctx)
            {
                _targetObject = targetObject;
                _stats = stats;
            }
            
            public virtual AstExpression TargetObject
            {
                get
                {
                    return _targetObject;
                }
            }
            
            public virtual AstExpression Stats
            {
                get
                {
                    return _stats;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPE_ID LR_BRACKET type_name=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions38 : AstBuiltInFunctions
        {
            
            private AstExpression _typeName;
            
            internal AstBuiltInFunctions38(ParserRuleContext ctx, AstExpression typeName) : 
                    base(ctx)
            {
                _typeName = typeName;
            }
            
            public virtual AstExpression TypeName
            {
                get
                {
                    return _typeName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPE_NAME LR_BRACKET type=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions39 : AstBuiltInFunctions
        {
            
            private AstExpression _type;
            
            internal AstBuiltInFunctions39(ParserRuleContext ctx, AstExpression type) : 
                    base(ctx)
            {
                _type = type;
            }
            
            public virtual AstExpression Type
            {
                get
                {
                    return _type;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TYPEPROPERTY LR_BRACKET type=expression COMMA property=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions40 : AstBuiltInFunctions
        {
            
            private AstExpression _type;
            
            private AstExpression _property;
            
            internal AstBuiltInFunctions40(ParserRuleContext ctx, AstExpression type, AstExpression property) : 
                    base(ctx)
            {
                _type = type;
                _property = property;
            }
            
            public virtual AstExpression Type
            {
                get
                {
                    return _type;
                }
            }
            
            public virtual AstExpression Property
            {
                get
                {
                    return _property;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ASCII LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions41 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions41(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHAR LR_BRACKET integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions42 : AstBuiltInFunctions
        {
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions42(ParserRuleContext ctx, AstExpression integerExpression) : 
                    base(ctx)
            {
                _integerExpression = integerExpression;
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHARINDEX LR_BRACKET expressionToFind=expression COMMA expressionToSearch=expression COMMA start_location=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions43 : AstBuiltInFunctions
        {
            
            private AstExpression _expressionToFind;
            
            private AstExpression _expressionToSearch;
            
            private AstExpression _startLocation;
            
            internal AstBuiltInFunctions43(ParserRuleContext ctx, AstExpression expressionToFind, AstExpression expressionToSearch, AstExpression startLocation) : 
                    base(ctx)
            {
                _expressionToFind = expressionToFind;
                _expressionToSearch = expressionToSearch;
                _startLocation = startLocation;
            }
            
            public virtual AstExpression Expressiontofind
            {
                get
                {
                    return _expressionToFind;
                }
            }
            
            public virtual AstExpression Expressiontosearch
            {
                get
                {
                    return _expressionToSearch;
                }
            }
            
            public virtual AstExpression StartLocation
            {
                get
                {
                    return _startLocation;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONCAT LR_BRACKET expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions44 : AstBuiltInFunctions
        {
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions44(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONCAT_WS LR_BRACKET expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions45 : AstBuiltInFunctions
        {
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions45(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DIFFERENCE LR_BRACKET character_expression_1=expression COMMA character_expression_2=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions46 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression1;
            
            private AstExpression _characterExpression2;
            
            internal AstBuiltInFunctions46(ParserRuleContext ctx, AstExpression characterExpression1, AstExpression characterExpression2) : 
                    base(ctx)
            {
                _characterExpression1 = characterExpression1;
                _characterExpression2 = characterExpression2;
            }
            
            public virtual AstExpression CharacterExpression1
            {
                get
                {
                    return _characterExpression1;
                }
            }
            
            public virtual AstExpression CharacterExpression2
            {
                get
                {
                    return _characterExpression2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FORMAT LR_BRACKET expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions47 : AstBuiltInFunctions
        {
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions47(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LEFT LR_BRACKET character_expression=expression COMMA integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions48 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions48(ParserRuleContext ctx, AstExpression characterExpression, AstExpression integerExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
                _integerExpression = integerExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LEN LR_BRACKET string_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions49 : AstBuiltInFunctions
        {
            
            private AstExpression _stringExpression;
            
            internal AstBuiltInFunctions49(ParserRuleContext ctx, AstExpression stringExpression) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LOWER LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions50 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions50(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : LTRIM LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions51 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions51(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NCHAR LR_BRACKET integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions52 : AstBuiltInFunctions
        {
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions52(ParserRuleContext ctx, AstExpression integerExpression) : 
                    base(ctx)
            {
                _integerExpression = integerExpression;
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PATINDEX LR_BRACKET pattern=expression COMMA string_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions53 : AstBuiltInFunctions
        {
            
            private AstExpression _pattern;
            
            private AstExpression _stringExpression;
            
            internal AstBuiltInFunctions53(ParserRuleContext ctx, AstExpression pattern, AstExpression stringExpression) : 
                    base(ctx)
            {
                _pattern = pattern;
                _stringExpression = stringExpression;
            }
            
            public virtual AstExpression Pattern
            {
                get
                {
                    return _pattern;
                }
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : QUOTENAME LR_BRACKET character_string=expression COMMA quote_character=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions54 : AstBuiltInFunctions
        {
            
            private AstExpression _characterString;
            
            private AstExpression _quoteCharacter;
            
            internal AstBuiltInFunctions54(ParserRuleContext ctx, AstExpression characterString, AstExpression quoteCharacter) : 
                    base(ctx)
            {
                _characterString = characterString;
                _quoteCharacter = quoteCharacter;
            }
            
            public virtual AstExpression CharacterString
            {
                get
                {
                    return _characterString;
                }
            }
            
            public virtual AstExpression QuoteCharacter
            {
                get
                {
                    return _quoteCharacter;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REPLACE LR_BRACKET input=expression COMMA replacing=expression COMMA with=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions55 : AstBuiltInFunctions
        {
            
            private AstExpression _input;
            
            private AstExpression _replacing;
            
            private AstExpression _with;
            
            internal AstBuiltInFunctions55(ParserRuleContext ctx, AstExpression input, AstExpression replacing, AstExpression with) : 
                    base(ctx)
            {
                _input = input;
                _replacing = replacing;
                _with = with;
            }
            
            public virtual AstExpression Input
            {
                get
                {
                    return _input;
                }
            }
            
            public virtual AstExpression Replacing
            {
                get
                {
                    return _replacing;
                }
            }
            
            public virtual AstExpression With
            {
                get
                {
                    return _with;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REPLICATE LR_BRACKET string_expression=expression COMMA integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions56 : AstBuiltInFunctions
        {
            
            private AstExpression _stringExpression;
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions56(ParserRuleContext ctx, AstExpression stringExpression, AstExpression integerExpression) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
                _integerExpression = integerExpression;
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : REVERSE LR_BRACKET string_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions57 : AstBuiltInFunctions
        {
            
            private AstExpression _stringExpression;
            
            internal AstBuiltInFunctions57(ParserRuleContext ctx, AstExpression stringExpression) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : RIGHT LR_BRACKET character_expression=expression COMMA integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions58 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions58(ParserRuleContext ctx, AstExpression characterExpression, AstExpression integerExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
                _integerExpression = integerExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : RTRIM LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions59 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions59(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SOUNDEX LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions60 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions60(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SPACE_KEYWORD LR_BRACKET integer_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions61 : AstBuiltInFunctions
        {
            
            private AstExpression _integerExpression;
            
            internal AstBuiltInFunctions61(ParserRuleContext ctx, AstExpression integerExpression) : 
                    base(ctx)
            {
                _integerExpression = integerExpression;
            }
            
            public virtual AstExpression IntegerExpression
            {
                get
                {
                    return _integerExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STR LR_BRACKET float_expression=expression COMMA length_expression=expression COMMA decimal_expr=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions62 : AstBuiltInFunctions
        {
            
            private AstExpression _floatExpression;
            
            private AstExpression _lengthExpression;
            
            private AstExpression _decimalExpr;
            
            internal AstBuiltInFunctions62(ParserRuleContext ctx, AstExpression floatExpression, AstExpression lengthExpression, AstExpression decimalExpr) : 
                    base(ctx)
            {
                _floatExpression = floatExpression;
                _lengthExpression = lengthExpression;
                _decimalExpr = decimalExpr;
            }
            
            public virtual AstExpression FloatExpression
            {
                get
                {
                    return _floatExpression;
                }
            }
            
            public virtual AstExpression LengthExpression
            {
                get
                {
                    return _lengthExpression;
                }
            }
            
            public virtual AstExpression DecimalExpr
            {
                get
                {
                    return _decimalExpr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STRING_AGG LR_BRACKET expr=expression COMMA separator=expression RR_BRACKET WITHIN GROUP LR_BRACKET order_by_clause RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions63 : AstBuiltInFunctions
        {
            
            private AstExpression _expr;
            
            private AstExpression _separator;
            
            private AstOrderByClause _orderByClause;
            
            internal AstBuiltInFunctions63(ParserRuleContext ctx, AstExpression expr, AstExpression separator, AstOrderByClause orderByClause) : 
                    base(ctx)
            {
                _expr = expr;
                _separator = separator;
                _orderByClause = orderByClause;
            }
            
            public virtual AstExpression Expr
            {
                get
                {
                    return _expr;
                }
            }
            
            public virtual AstExpression Separator
            {
                get
                {
                    return _separator;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STRING_ESCAPE LR_BRACKET text_=expression COMMA type_=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions64 : AstBuiltInFunctions
        {
            
            private AstExpression _text;
            
            private AstExpression _type;
            
            internal AstBuiltInFunctions64(ParserRuleContext ctx, AstExpression text, AstExpression type) : 
                    base(ctx)
            {
                _text = text;
                _type = type;
            }
            
            public virtual AstExpression Text
            {
                get
                {
                    return _text;
                }
            }
            
            public virtual AstExpression Type
            {
                get
                {
                    return _type;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : STUFF LR_BRACKET str=expression COMMA from=decimal COMMA to=decimal COMMA str_with=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions65 : AstBuiltInFunctions
        {
            
            private AstExpression _str;
            
            private AstDecimal _from;
            
            private AstDecimal _to;
            
            private AstExpression _strWith;
            
            internal AstBuiltInFunctions65(ParserRuleContext ctx, AstExpression str, AstDecimal from, AstDecimal to, AstExpression strWith) : 
                    base(ctx)
            {
                _str = str;
                _from = from;
                _to = to;
                _strWith = strWith;
            }
            
            public virtual AstExpression Str
            {
                get
                {
                    return _str;
                }
            }
            
            public virtual AstDecimal From
            {
                get
                {
                    return _from;
                }
            }
            
            public virtual AstDecimal To
            {
                get
                {
                    return _to;
                }
            }
            
            public virtual AstExpression StrWith
            {
                get
                {
                    return _strWith;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SUBSTRING LR_BRACKET string_expression=expression COMMA start_=expression COMMA length=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions66 : AstBuiltInFunctions
        {
            
            private AstExpression _stringExpression;
            
            private AstExpression _start;
            
            private AstExpression _length;
            
            internal AstBuiltInFunctions66(ParserRuleContext ctx, AstExpression stringExpression, AstExpression start, AstExpression length) : 
                    base(ctx)
            {
                _stringExpression = stringExpression;
                _start = start;
                _length = length;
            }
            
            public virtual AstExpression StringExpression
            {
                get
                {
                    return _stringExpression;
                }
            }
            
            public virtual AstExpression Start
            {
                get
                {
                    return _start;
                }
            }
            
            public virtual AstExpression Length
            {
                get
                {
                    return _length;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRANSLATE LR_BRACKET inputString=expression COMMA characters=expression COMMA translations=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions67 : AstBuiltInFunctions
        {
            
            private AstExpression _inputString;
            
            private AstExpression _characters;
            
            private AstExpression _translations;
            
            internal AstBuiltInFunctions67(ParserRuleContext ctx, AstExpression inputString, AstExpression characters, AstExpression translations) : 
                    base(ctx)
            {
                _inputString = inputString;
                _characters = characters;
                _translations = translations;
            }
            
            public virtual AstExpression Inputstring
            {
                get
                {
                    return _inputString;
                }
            }
            
            public virtual AstExpression Characters
            {
                get
                {
                    return _characters;
                }
            }
            
            public virtual AstExpression Translations
            {
                get
                {
                    return _translations;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRIM LR_BRACKET characters=expression FROM string_=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions68 : AstBuiltInFunctions
        {
            
            private AstExpression _characters;
            
            private AstExpression _string;
            
            internal AstBuiltInFunctions68(ParserRuleContext ctx, AstExpression characters, AstExpression @string) : 
                    base(ctx)
            {
                _characters = characters;
                _string = @string;
            }
            
            public virtual AstExpression Characters
            {
                get
                {
                    return _characters;
                }
            }
            
            public virtual AstExpression String
            {
                get
                {
                    return _string;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : UNICODE LR_BRACKET ncharacter_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions69 : AstBuiltInFunctions
        {
            
            private AstExpression _ncharacterExpression;
            
            internal AstBuiltInFunctions69(ParserRuleContext ctx, AstExpression ncharacterExpression) : 
                    base(ctx)
            {
                _ncharacterExpression = ncharacterExpression;
            }
            
            public virtual AstExpression NcharacterExpression
            {
                get
                {
                    return _ncharacterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : UPPER LR_BRACKET character_expression=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions70 : AstBuiltInFunctions
        {
            
            private AstExpression _characterExpression;
            
            internal AstBuiltInFunctions70(ParserRuleContext ctx, AstExpression characterExpression) : 
                    base(ctx)
            {
                _characterExpression = characterExpression;
            }
            
            public virtual AstExpression CharacterExpression
            {
                get
                {
                    return _characterExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : BINARY_CHECKSUM LR_BRACKET expression_or_star RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions71 : AstBuiltInFunctions
        {
            
            private AstExpressionOrStar _expressionOrStar;
            
            internal AstBuiltInFunctions71(ParserRuleContext ctx, AstExpressionOrStar expressionOrStar) : 
                    base(ctx)
            {
                _expressionOrStar = expressionOrStar;
            }
            
            public virtual AstExpressionOrStar ExpressionOrStar
            {
                get
                {
                    return _expressionOrStar;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CHECKSUM LR_BRACKET expression_or_star RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions72 : AstBuiltInFunctions
        {
            
            private AstExpressionOrStar _expressionOrStar;
            
            internal AstBuiltInFunctions72(ParserRuleContext ctx, AstExpressionOrStar expressionOrStar) : 
                    base(ctx)
            {
                _expressionOrStar = expressionOrStar;
            }
            
            public virtual AstExpressionOrStar ExpressionOrStar
            {
                get
                {
                    return _expressionOrStar;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COMPRESS LR_BRACKET expr=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions73 : AstBuiltInFunctions
        {
            
            private AstExpression _expr;
            
            internal AstBuiltInFunctions73(ParserRuleContext ctx, AstExpression expr) : 
                    base(ctx)
            {
                _expr = expr;
            }
            
            public virtual AstExpression Expr
            {
                get
                {
                    return _expr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONNECTIONPROPERTY LR_BRACKET cnx_property=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions74 : AstBuiltInFunctions
        {
            
            private AstStringtext _cnxProperty;
            
            internal AstBuiltInFunctions74(ParserRuleContext ctx, AstStringtext cnxProperty) : 
                    base(ctx)
            {
                _cnxProperty = cnxProperty;
            }
            
            public virtual AstStringtext CnxProperty
            {
                get
                {
                    return _cnxProperty;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONTEXT_INFO LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions75 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions75(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_REQUEST_ID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions76 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions76(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_TRANSACTION_ID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions77 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions77(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DECOMPRESS LR_BRACKET expr=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions78 : AstBuiltInFunctions
        {
            
            private AstExpression _expr;
            
            internal AstBuiltInFunctions78(ParserRuleContext ctx, AstExpression expr) : 
                    base(ctx)
            {
                _expr = expr;
            }
            
            public virtual AstExpression Expr
            {
                get
                {
                    return _expr;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_LINE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions79 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions79(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_MESSAGE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions80 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions80(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_NUMBER LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions81 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions81(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_PROCEDURE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions82 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions82(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_SEVERITY LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions83 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions83(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ERROR_STATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions84 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions84(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : FORMATMESSAGE LR_BRACKET format_argument COMMA expressions RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions85 : AstBuiltInFunctions
        {
            
            private AstFormatArgument _formatArgument;
            
            private AstExpressions _expressions;
            
            internal AstBuiltInFunctions85(ParserRuleContext ctx, AstFormatArgument formatArgument, AstExpressions expressions) : 
                    base(ctx)
            {
                _formatArgument = formatArgument;
                _expressions = expressions;
            }
            
            public virtual AstFormatArgument FormatArgument
            {
                get
                {
                    return _formatArgument;
                }
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GET_FILESTREAM_TRANSACTION_CONTEXT LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions86 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions86(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETANSINULL LR_BRACKET database_name=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions87 : AstBuiltInFunctions
        {
            
            private AstStringtext _databaseName;
            
            internal AstBuiltInFunctions87(ParserRuleContext ctx, AstStringtext databaseName) : 
                    base(ctx)
            {
                _databaseName = databaseName;
            }
            
            public virtual AstStringtext DatabaseName
            {
                get
                {
                    return _databaseName;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : HOST_ID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions88 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions88(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : HOST_NAME LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions89 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions89(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ISNULL LR_BRACKET left=expression COMMA right=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions90 : AstBuiltInFunctions
        {
            
            private AstExpression _left;
            
            private AstExpression _right;
            
            internal AstBuiltInFunctions90(ParserRuleContext ctx, AstExpression left, AstExpression right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ISNUMERIC LR_BRACKET expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions91 : AstBuiltInFunctions
        {
            
            private AstExpression _expression;
            
            internal AstBuiltInFunctions91(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEWID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions92 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions92(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NEWSEQUENTIALID LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions93 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions93(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : ROWCOUNT_BIG LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions94 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions94(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SESSION_CONTEXT LR_BRACKET session_key=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions95 : AstBuiltInFunctions
        {
            
            private AstStringtext _sessionKey;
            
            internal AstBuiltInFunctions95(ParserRuleContext ctx, AstStringtext sessionKey) : 
                    base(ctx)
            {
                _sessionKey = sessionKey;
            }
            
            public virtual AstStringtext SessionKey
            {
                get
                {
                    return _sessionKey;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : XACT_STATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions96 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions96(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CAST LR_BRACKET expression AS data_type RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions97 : AstBuiltInFunctions
        {
            
            private AstExpression _expression;
            
            private AstDataType _dataType;
            
            internal AstBuiltInFunctions97(ParserRuleContext ctx, AstExpression expression, AstDataType dataType) : 
                    base(ctx)
            {
                _expression = expression;
                _dataType = dataType;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : TRY_CAST LR_BRACKET expression AS data_type RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions98 : AstBuiltInFunctions
        {
            
            private AstExpression _expression;
            
            private AstDataType _dataType;
            
            internal AstBuiltInFunctions98(ParserRuleContext ctx, AstExpression expression, AstDataType dataType) : 
                    base(ctx)
            {
                _expression = expression;
                _dataType = dataType;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CONVERT LR_BRACKET convert_data_type=data_type COMMA expression2 RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions99 : AstBuiltInFunctions
        {
            
            private AstDataType _convertDataType;
            
            private AstExpression2 _expression2;
            
            internal AstBuiltInFunctions99(ParserRuleContext ctx, AstDataType convertDataType, AstExpression2 expression2) : 
                    base(ctx)
            {
                _convertDataType = convertDataType;
                _expression2 = expression2;
            }
            
            public virtual AstDataType ConvertDataType
            {
                get
                {
                    return _convertDataType;
                }
            }
            
            public virtual AstExpression2 Expression2
            {
                get
                {
                    return _expression2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : COALESCE LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions100 : AstBuiltInFunctions
        {
            
            private AstExpressionList _expressionList;
            
            internal AstBuiltInFunctions100(ParserRuleContext ctx, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _expressionList = expressionList;
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_DATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions101 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions101(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_TIMESTAMP 
        /// </summary>
        public partial class AstBuiltInFunctions102 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions102(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : CURRENT_USER 
        /// </summary>
        public partial class AstBuiltInFunctions103 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions103(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEADD LR_BRACKET datepart=id_simple COMMA number=expression COMMA date=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions104 : AstBuiltInFunctions
        {
            
            private AstIdSimple _datepart;
            
            private AstExpression _number;
            
            private AstExpression _date;
            
            internal AstBuiltInFunctions104(ParserRuleContext ctx, AstIdSimple datepart, AstExpression number, AstExpression date) : 
                    base(ctx)
            {
                _datepart = datepart;
                _number = number;
                _date = date;
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression Number
            {
                get
                {
                    return _number;
                }
            }
            
            public virtual AstExpression Date
            {
                get
                {
                    return _date;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEDIFF LR_BRACKET datepart=id_simple COMMA date_first=expression COMMA date_second=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions105 : AstBuiltInFunctions
        {
            
            private AstIdSimple _datepart;
            
            private AstExpression _dateFirst;
            
            private AstExpression _dateSecond;
            
            internal AstBuiltInFunctions105(ParserRuleContext ctx, AstIdSimple datepart, AstExpression dateFirst, AstExpression dateSecond) : 
                    base(ctx)
            {
                _datepart = datepart;
                _dateFirst = dateFirst;
                _dateSecond = dateSecond;
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression DateFirst
            {
                get
                {
                    return _dateFirst;
                }
            }
            
            public virtual AstExpression DateSecond
            {
                get
                {
                    return _dateSecond;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATENAME LR_BRACKET datepart=id_simple COMMA date=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions106 : AstBuiltInFunctions
        {
            
            private AstIdSimple _datepart;
            
            private AstExpression _date;
            
            internal AstBuiltInFunctions106(ParserRuleContext ctx, AstIdSimple datepart, AstExpression date) : 
                    base(ctx)
            {
                _datepart = datepart;
                _date = date;
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression Date
            {
                get
                {
                    return _date;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : DATEPART LR_BRACKET datepart=id_simple COMMA date=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions107 : AstBuiltInFunctions
        {
            
            private AstIdSimple _datepart;
            
            private AstExpression _date;
            
            internal AstBuiltInFunctions107(ParserRuleContext ctx, AstIdSimple datepart, AstExpression date) : 
                    base(ctx)
            {
                _datepart = datepart;
                _date = date;
            }
            
            public virtual AstIdSimple Datepart
            {
                get
                {
                    return _datepart;
                }
            }
            
            public virtual AstExpression Date
            {
                get
                {
                    return _date;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETDATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions108 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions108(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : GETUTCDATE LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions109 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions109(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : IDENTITY LR_BRACKET data_type COMMA seed=decimal COMMA increment=decimal RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions110 : AstBuiltInFunctions
        {
            
            private AstDataType _dataType;
            
            private AstDecimal _seed;
            
            private AstDecimal _increment;
            
            internal AstBuiltInFunctions110(ParserRuleContext ctx, AstDataType dataType, AstDecimal seed, AstDecimal increment) : 
                    base(ctx)
            {
                _dataType = dataType;
                _seed = seed;
                _increment = increment;
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public virtual AstDecimal Seed
            {
                get
                {
                    return _seed;
                }
            }
            
            public virtual AstDecimal Increment
            {
                get
                {
                    return _increment;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : NULLIF LR_BRACKET left=expression COMMA right=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions111 : AstBuiltInFunctions
        {
            
            private AstExpression _left;
            
            private AstExpression _right;
            
            internal AstBuiltInFunctions111(ParserRuleContext ctx, AstExpression left, AstExpression right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SESSION_USER 
        /// </summary>
        public partial class AstBuiltInFunctions112 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions112(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : SYSTEM_USER 
        /// </summary>
        public partial class AstBuiltInFunctions113 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions113(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : USER 
        /// </summary>
        public partial class AstBuiltInFunctions114 : AstBuiltInFunctions
        {
            
            internal AstBuiltInFunctions114(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : PARSE LR_BRACKET str=expression AS data_type USING culture=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions115 : AstBuiltInFunctions
        {
            
            private AstExpression _str;
            
            private AstDataType _dataType;
            
            private AstExpression _culture;
            
            internal AstBuiltInFunctions115(ParserRuleContext ctx, AstExpression str, AstDataType dataType, AstExpression culture) : 
                    base(ctx)
            {
                _str = str;
                _dataType = dataType;
                _culture = culture;
            }
            
            public virtual AstExpression Str
            {
                get
                {
                    return _str;
                }
            }
            
            public virtual AstDataType DataType
            {
                get
                {
                    return _dataType;
                }
            }
            
            public virtual AstExpression Culture
            {
                get
                {
                    return _culture;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : xml_data_type_methods 
        /// </summary>
        public partial class AstBuiltInFunctions116 : AstBuiltInFunctions
        {
            
            private AstXmlDataTypeMethods _xmlDataTypeMethods;
            
            internal AstBuiltInFunctions116(ParserRuleContext ctx, AstXmlDataTypeMethods xmlDataTypeMethods) : 
                    base(ctx)
            {
                _xmlDataTypeMethods = xmlDataTypeMethods;
            }
            
            public virtual AstXmlDataTypeMethods XmlDataTypeMethods
            {
                get
                {
                    return _xmlDataTypeMethods;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        /// <summary>
        /// built_in_functions : IIF LR_BRACKET cond=search_condition COMMA left=expression COMMA right=expression RR_BRACKET 
        /// </summary>
        public partial class AstBuiltInFunctions117 : AstBuiltInFunctions
        {
            
            private AstSearchCondition _cond;
            
            private AstExpression _left;
            
            private AstExpression _right;
            
            internal AstBuiltInFunctions117(ParserRuleContext ctx, AstSearchCondition cond, AstExpression left, AstExpression right) : 
                    base(ctx)
            {
                _cond = cond;
                _left = left;
                _right = right;
            }
            
            public virtual AstSearchCondition Cond
            {
                get
                {
                    return _cond;
                }
            }
            
            public virtual AstExpression Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstExpression Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitBuiltInFunctions(this);
            }
        }
        

        
        internal AstBuiltInFunctions(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstBuiltInFunctions(Position p) : 
                base(p)
        {
        }
        
        internal AstBuiltInFunctions(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstBuiltInFunctions Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstBuiltInFunctions.Resolve(list);
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions1(ctx);
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions2(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 5))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions3(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])), ((AstExpression)(list[3])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions4(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions5(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions6(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions7(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions8(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions9(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions10(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions11(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions12(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions13(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions14(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions15(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions16(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions17(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions18(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions19(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions20(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions21(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 5))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions22(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])), ((AstExpression)(list[3])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions23(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions24(ctx, ((AstFullTableRef)(list[0])), ((AstOrderByClause)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions25(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions26(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions27(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions28(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions29(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions30(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions31(ctx);
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions32(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions33(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions34(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions35(ctx);
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions36(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions37(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions38(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions39(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions40(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions41(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions42(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions43(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions44(ctx, ((AstExpressions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions45(ctx, ((AstExpressions)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions46(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions47(ctx, ((AstExpressions)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions48(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions49(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions50(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions51(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions52(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions53(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions54(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions55(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions56(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions57(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions58(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions59(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions60(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions61(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions62(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions63(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstOrderByClause)(list[2])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions64(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 5))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions65(ctx, ((AstExpression)(list[0])), ((AstDecimal)(list[1])), ((AstDecimal)(list[2])), ((AstExpression)(list[3])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions66(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions67(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions68(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions69(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions70(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions71(ctx, ((AstExpressionOrStar)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions72(ctx, ((AstExpressionOrStar)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions73(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions74(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions75(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions76(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions77(ctx);
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions78(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions79(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions80(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions81(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions82(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions83(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions84(ctx);
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions85(ctx, ((AstFormatArgument)(list[0])), ((AstExpressions)(list[1])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions86(ctx);
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions87(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions88(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions89(ctx);
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions90(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions91(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions92(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions93(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions94(ctx);
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions95(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions96(ctx);
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions97(ctx, ((AstExpression)(list[0])), ((AstDataType)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions98(ctx, ((AstExpression)(list[0])), ((AstDataType)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions99(ctx, ((AstDataType)(list[0])), ((AstExpression2)(list[1])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions100(ctx, ((AstExpressionList)(list[0])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions101(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions102(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions103(ctx);
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions104(ctx, ((AstIdSimple)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions105(ctx, ((AstIdSimple)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions106(ctx, ((AstIdSimple)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions107(ctx, ((AstIdSimple)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions108(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions109(ctx);
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions110(ctx, ((AstDataType)(list[0])), ((AstDecimal)(list[1])), ((AstDecimal)(list[2])));
            }
            if ((index == 3))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions111(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions112(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions113(ctx);
            }
            if ((index == 1))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions114(ctx);
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions115(ctx, ((AstExpression)(list[0])), ((AstDataType)(list[1])), ((AstExpression)(list[2])));
            }
            if ((index == 2))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions116(ctx, ((AstXmlDataTypeMethods)(list[0])));
            }
            if ((index == 4))
            {
                return new AstBuiltInFunctions.AstBuiltInFunctions117(ctx, ((AstSearchCondition)(list[0])), ((AstExpression)(list[1])), ((AstExpression)(list[2])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 21;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimal), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpression), false, false))
                            {
                                return 62;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 6;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 20;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 22;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 40;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 52;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 59;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOrderByClause), false, false))
                        {
                            return 60;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 63;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 64;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstIdSimple), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 82;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstIdSimple), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 83;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDataType), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstDecimal), false, false))
                        {
                            return 86;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDataType), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 88;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSearchCondition), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression), false, false))
                        {
                            return 90;
                        }
                    }
                }
            }
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 5;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 7;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 15;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 16;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 17;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 18;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullTableRef), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOrderByClause), false, false))
                    {
                        return 23;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 25;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 26;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 27;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 28;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 29;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 30;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 34;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 37;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 43;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 45;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 50;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 51;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 53;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 55;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 61;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 65;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFormatArgument), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressions), false, false))
                    {
                        return 73;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 75;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDataType), false, false))
                    {
                        return 78;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDataType), false, false))
                    {
                        return 79;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstDataType), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression2), false, false))
                    {
                        return 80;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstIdSimple), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 84;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstIdSimple), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 85;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 87;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 8;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 9;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 10;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 11;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 12;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 13;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 14;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 19;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 24;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 31;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 32;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 33;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 35;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 36;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 38;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 39;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 41;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 42;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 44;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 46;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 47;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 48;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 49;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 54;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 56;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 57;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 58;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 66;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 67;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionOrStar), false, false))
                {
                    return 68;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionOrStar), false, false))
                {
                    return 69;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 70;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 71;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 72;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 74;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 76;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 77;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionList), false, false))
                {
                    return 81;
                }
                if (AstRoot.Eval(list[0], typeof(AstXmlDataTypeMethods), false, false))
                {
                    return 89;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APP_NAME ( ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx)
        {
            AstBuiltInFunctions.AstBuiltInFunctions1 result = new AstBuiltInFunctions.AstBuiltInFunctions1(ctx);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APPLOCK_MODE ( database_principal=expression , resource_name=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockOwner)
        {
            AstBuiltInFunctions.AstBuiltInFunctions2 result = new AstBuiltInFunctions.AstBuiltInFunctions2(ctx, databasePrincipal, resourceName, lockOwner);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    APPLOCK_TEST ( database_principal=expression , resource_name=expression , lockmode=expression , lock_owner=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression databasePrincipal, AstExpression resourceName, AstExpression lockmode, AstExpression lockOwner)
        {
            AstBuiltInFunctions.AstBuiltInFunctions3 result = new AstBuiltInFunctions.AstBuiltInFunctions3(ctx, databasePrincipal, resourceName, lockmode, lockOwner);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    ASSEMBLYPROPERTY ( assemblyName=expression , propertyName=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression assemblyName, AstExpression propertyName)
        {
            AstBuiltInFunctions.AstBuiltInFunctions4 result = new AstBuiltInFunctions.AstBuiltInFunctions4(ctx, assemblyName, propertyName);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DB_ID ( databaseName=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression databaseName)
        {
            AstBuiltInFunctions.AstBuiltInFunctions9 result = new AstBuiltInFunctions.AstBuiltInFunctions9(ctx, databaseName);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    NEXT VALUE FOR sequenceName=full_table_ref OVER ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstFullTableRef sequenceName, AstOrderByClause orderByClause)
        {
            AstBuiltInFunctions.AstBuiltInFunctions24 result = new AstBuiltInFunctions.AstBuiltInFunctions24(ctx, sequenceName, orderByClause);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONCAT ( expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpressions expressions)
        {
            AstBuiltInFunctions.AstBuiltInFunctions44 result = new AstBuiltInFunctions.AstBuiltInFunctions44(ctx, expressions);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    STRING_AGG ( expr=expression , separator=expression ) WITHIN GROUP ( order_by_clause ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression expr, AstExpression separator, AstOrderByClause orderByClause)
        {
            AstBuiltInFunctions.AstBuiltInFunctions63 result = new AstBuiltInFunctions.AstBuiltInFunctions63(ctx, expr, separator, orderByClause);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    STUFF ( str=expression , from=decimal , to=decimal , str_with=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression str, AstDecimal from, AstDecimal to, AstExpression strWith)
        {
            AstBuiltInFunctions.AstBuiltInFunctions65 result = new AstBuiltInFunctions.AstBuiltInFunctions65(ctx, str, from, to, strWith);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    BINARY_CHECKSUM ( expression_or_star ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpressionOrStar expressionOrStar)
        {
            AstBuiltInFunctions.AstBuiltInFunctions71 result = new AstBuiltInFunctions.AstBuiltInFunctions71(ctx, expressionOrStar);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONNECTIONPROPERTY ( cnx_property=stringtext ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstStringtext cnxProperty)
        {
            AstBuiltInFunctions.AstBuiltInFunctions74 result = new AstBuiltInFunctions.AstBuiltInFunctions74(ctx, cnxProperty);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    FORMATMESSAGE ( format_argument , expressions ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstFormatArgument formatArgument, AstExpressions expressions)
        {
            AstBuiltInFunctions.AstBuiltInFunctions85 result = new AstBuiltInFunctions.AstBuiltInFunctions85(ctx, formatArgument, expressions);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CAST ( expression AS data_type ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression expression, AstDataType dataType)
        {
            AstBuiltInFunctions.AstBuiltInFunctions97 result = new AstBuiltInFunctions.AstBuiltInFunctions97(ctx, expression, dataType);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    CONVERT ( convert_data_type=data_type , expression2 ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstDataType convertDataType, AstExpression2 expression2)
        {
            AstBuiltInFunctions.AstBuiltInFunctions99 result = new AstBuiltInFunctions.AstBuiltInFunctions99(ctx, convertDataType, expression2);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    COALESCE ( expression_list ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpressionList expressionList)
        {
            AstBuiltInFunctions.AstBuiltInFunctions100 result = new AstBuiltInFunctions.AstBuiltInFunctions100(ctx, expressionList);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DATEADD ( datepart=id_simple , number=expression , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstIdSimple datepart, AstExpression number, AstExpression date)
        {
            AstBuiltInFunctions.AstBuiltInFunctions104 result = new AstBuiltInFunctions.AstBuiltInFunctions104(ctx, datepart, number, date);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    DATENAME ( datepart=id_simple , date=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstIdSimple datepart, AstExpression date)
        {
            AstBuiltInFunctions.AstBuiltInFunctions106 result = new AstBuiltInFunctions.AstBuiltInFunctions106(ctx, datepart, date);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    IDENTITY ( data_type , seed=decimal , increment=decimal ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstDataType dataType, AstDecimal seed, AstDecimal increment)
        {
            AstBuiltInFunctions.AstBuiltInFunctions110 result = new AstBuiltInFunctions.AstBuiltInFunctions110(ctx, dataType, seed, increment);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    PARSE ( str=expression AS data_type USING culture=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstExpression str, AstDataType dataType, AstExpression culture)
        {
            AstBuiltInFunctions.AstBuiltInFunctions115 result = new AstBuiltInFunctions.AstBuiltInFunctions115(ctx, str, dataType, culture);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    xml_data_type_methods 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstXmlDataTypeMethods xmlDataTypeMethods)
        {
            AstBuiltInFunctions.AstBuiltInFunctions116 result = new AstBuiltInFunctions.AstBuiltInFunctions116(ctx, xmlDataTypeMethods);
            return result;
        }
        
        /// <summary>
        /// built_in_functions : 
        ///    IIF ( cond=search_condition , left=expression , right=expression ) 
        /// </summary>
        public static AstBuiltInFunctions BuiltInFunctions(ParserRuleContext ctx, AstSearchCondition cond, AstExpression left, AstExpression right)
        {
            AstBuiltInFunctions.AstBuiltInFunctions117 result = new AstBuiltInFunctions.AstBuiltInFunctions117(ctx, cond, left, right);
            return result;
        }
    }
    
    /// <summary>
    /// expression_or_star
    /// 	 : STAR
    /// 	 | expressions
    /// </summary>
    public abstract partial class AstExpressionOrStar : AstBnfRule
    {
        
        protected static string _rule = "expression_or_star\r\n\t : STAR\r\n\t | expressions";
        
        /// <summary>
        /// expression_or_star : STAR 
        /// </summary>
        public partial class AstExpressionOrStar1 : AstExpressionOrStar
        {
            
            internal AstExpressionOrStar1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionOrStar(this);
            }
        }
        /// <summary>
        /// expression_or_star : expressions 
        /// </summary>
        public partial class AstExpressionOrStar2 : AstExpressionOrStar
        {
            
            private AstExpressions _expressions;
            
            internal AstExpressionOrStar2(ParserRuleContext ctx, AstExpressions expressions) : 
                    base(ctx)
            {
                _expressions = expressions;
            }
            
            public virtual AstExpressions Expressions
            {
                get
                {
                    return _expressions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExpressionOrStar(this);
            }
        }
        

        
        internal AstExpressionOrStar(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExpressionOrStar(Position p) : 
                base(p)
        {
        }
        
        internal AstExpressionOrStar(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExpressionOrStar Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExpressionOrStar.Resolve(list);
            if ((index == 1))
            {
                return new AstExpressionOrStar.AstExpressionOrStar1(ctx);
            }
            if ((index == 2))
            {
                return new AstExpressionOrStar.AstExpressionOrStar2(ctx, ((AstExpressions)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpressions), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// expression_or_star : 
        ///    STAR 
        /// </summary>
        public static AstExpressionOrStar ExpressionOrStar(ParserRuleContext ctx)
        {
            AstExpressionOrStar.AstExpressionOrStar1 result = new AstExpressionOrStar.AstExpressionOrStar1(ctx);
            return result;
        }
        
        /// <summary>
        /// expression_or_star : 
        ///    expressions 
        /// </summary>
        public static AstExpressionOrStar ExpressionOrStar(ParserRuleContext ctx, AstExpressions expressions)
        {
            AstExpressionOrStar.AstExpressionOrStar2 result = new AstExpressionOrStar.AstExpressionOrStar2(ctx, expressions);
            return result;
        }
    }
    
    /// <summary>
    /// format_argument
    /// 	 : decimal
    /// 	 | stringtext
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstFormatArgument : AstBnfRule
    {
        
        protected static string _rule = "format_argument\r\n\t : decimal\r\n\t | stringtext\r\n\t | local_id";
        
        /// <summary>
        /// format_argument : decimal 
        /// </summary>
        public partial class AstFormatArgument1 : AstFormatArgument
        {
            
            private AstDecimal _decimal;
            
            internal AstFormatArgument1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFormatArgument(this);
            }
        }
        /// <summary>
        /// format_argument : stringtext 
        /// </summary>
        public partial class AstFormatArgument2 : AstFormatArgument
        {
            
            private AstStringtext _stringtext;
            
            internal AstFormatArgument2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFormatArgument(this);
            }
        }
        /// <summary>
        /// format_argument : local_id 
        /// </summary>
        public partial class AstFormatArgument3 : AstFormatArgument
        {
            
            private AstLocalId _localId;
            
            internal AstFormatArgument3(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitFormatArgument(this);
            }
        }
        

        
        internal AstFormatArgument(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstFormatArgument(Position p) : 
                base(p)
        {
        }
        
        internal AstFormatArgument(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstFormatArgument Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstFormatArgument.Resolve(list);
            if ((index == 2))
            {
                return new AstFormatArgument.AstFormatArgument1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFormatArgument.AstFormatArgument2(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstFormatArgument.AstFormatArgument3(ctx, ((AstLocalId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// format_argument : 
        ///    decimal 
        /// </summary>
        public static AstFormatArgument FormatArgument(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstFormatArgument.AstFormatArgument1 result = new AstFormatArgument.AstFormatArgument1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// format_argument : 
        ///    stringtext 
        /// </summary>
        public static AstFormatArgument FormatArgument(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstFormatArgument.AstFormatArgument2 result = new AstFormatArgument.AstFormatArgument2(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// format_argument : 
        ///    local_id 
        /// </summary>
        public static AstFormatArgument FormatArgument(ParserRuleContext ctx, AstLocalId localId)
        {
            AstFormatArgument.AstFormatArgument3 result = new AstFormatArgument.AstFormatArgument3(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// xml_data_type_methods
    /// 	 : value_method
    /// 	 | query_method
    /// 	 | exist_method
    /// 	 | modify_method
    /// </summary>
    public abstract partial class AstXmlDataTypeMethods : AstBnfRule
    {
        
        protected static string _rule = "xml_data_type_methods\r\n\t : value_method\r\n\t | query_method\r\n\t | exist_method\r\n\t | " +
            "modify_method";
        
        /// <summary>
        /// xml_data_type_methods : value_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods1 : AstXmlDataTypeMethods
        {
            
            private AstValueMethod _valueMethod;
            
            internal AstXmlDataTypeMethods1(ParserRuleContext ctx, AstValueMethod valueMethod) : 
                    base(ctx)
            {
                _valueMethod = valueMethod;
            }
            
            public virtual AstValueMethod ValueMethod
            {
                get
                {
                    return _valueMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : query_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods2 : AstXmlDataTypeMethods
        {
            
            private AstQueryMethod _queryMethod;
            
            internal AstXmlDataTypeMethods2(ParserRuleContext ctx, AstQueryMethod queryMethod) : 
                    base(ctx)
            {
                _queryMethod = queryMethod;
            }
            
            public virtual AstQueryMethod QueryMethod
            {
                get
                {
                    return _queryMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : exist_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods3 : AstXmlDataTypeMethods
        {
            
            private AstExistMethod _existMethod;
            
            internal AstXmlDataTypeMethods3(ParserRuleContext ctx, AstExistMethod existMethod) : 
                    base(ctx)
            {
                _existMethod = existMethod;
            }
            
            public virtual AstExistMethod ExistMethod
            {
                get
                {
                    return _existMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        /// <summary>
        /// xml_data_type_methods : modify_method 
        /// </summary>
        public partial class AstXmlDataTypeMethods4 : AstXmlDataTypeMethods
        {
            
            private AstModifyMethod _modifyMethod;
            
            internal AstXmlDataTypeMethods4(ParserRuleContext ctx, AstModifyMethod modifyMethod) : 
                    base(ctx)
            {
                _modifyMethod = modifyMethod;
            }
            
            public virtual AstModifyMethod ModifyMethod
            {
                get
                {
                    return _modifyMethod;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitXmlDataTypeMethods(this);
            }
        }
        

        
        internal AstXmlDataTypeMethods(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstXmlDataTypeMethods(Position p) : 
                base(p)
        {
        }
        
        internal AstXmlDataTypeMethods(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstXmlDataTypeMethods Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstXmlDataTypeMethods.Resolve(list);
            if ((index == 2))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods1(ctx, ((AstValueMethod)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods2(ctx, ((AstQueryMethod)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods3(ctx, ((AstExistMethod)(list[0])));
            }
            if ((index == 2))
            {
                return new AstXmlDataTypeMethods.AstXmlDataTypeMethods4(ctx, ((AstModifyMethod)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstValueMethod), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstQueryMethod), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstExistMethod), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstModifyMethod), false, false))
                {
                    return 4;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    value_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstValueMethod valueMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods1 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods1(ctx, valueMethod);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    query_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstQueryMethod queryMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods2 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods2(ctx, queryMethod);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    exist_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstExistMethod existMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods3 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods3(ctx, existMethod);
            return result;
        }
        
        /// <summary>
        /// xml_data_type_methods : 
        ///    modify_method 
        /// </summary>
        public static AstXmlDataTypeMethods XmlDataTypeMethods(ParserRuleContext ctx, AstModifyMethod modifyMethod)
        {
            AstXmlDataTypeMethods.AstXmlDataTypeMethods4 result = new AstXmlDataTypeMethods.AstXmlDataTypeMethods4(ctx, modifyMethod);
            return result;
        }
    }
    
    /// <summary>
    /// value_method
    /// 	 : (loc = local_id | value = full_column_name | eventdata = EVENTDATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = value_call
    /// </summary>
    public abstract partial class AstValueMethod : AstBnfRule
    {
        
        protected static string _rule = "value_method\r\n\t : (loc = local_id | value = full_column_name | eventdata = EVENTD" +
            "ATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BR" +
            "ACKET)  DOT  call = value_call";
        
        /// <summary>
        /// value_method : loc=local_id DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod1 : AstValueMethod
        {
            
            private AstLocalId _loc;
            
            private AstValueCall _call;
            
            internal AstValueMethod1(ParserRuleContext ctx, AstLocalId loc, AstValueCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : value=full_column_name DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod2 : AstValueMethod
        {
            
            private AstFullColumnName _value;
            
            private AstValueCall _call;
            
            internal AstValueMethod2(ParserRuleContext ctx, AstFullColumnName value, AstValueCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : eventdata=EVENTDATA LR_BRACKET RR_BRACKET DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod3 : AstValueMethod
        {
            
            private AstValueCall _call;
            
            internal AstValueMethod3(ParserRuleContext ctx, AstValueCall call) : 
                    base(ctx)
            {
                _call = call;
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : query=query_method DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod4 : AstValueMethod
        {
            
            private AstQueryMethod _query;
            
            private AstValueCall _call;
            
            internal AstValueMethod4(ParserRuleContext ctx, AstQueryMethod query, AstValueCall call) : 
                    base(ctx)
            {
                _query = query;
                _call = call;
            }
            
            public virtual AstQueryMethod Query
            {
                get
                {
                    return _query;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        /// <summary>
        /// value_method : LR_BRACKET subquery RR_BRACKET DOT call=value_call 
        /// </summary>
        public partial class AstValueMethod5 : AstValueMethod
        {
            
            private AstSubquery _subquery;
            
            private AstValueCall _call;
            
            internal AstValueMethod5(ParserRuleContext ctx, AstSubquery subquery, AstValueCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstValueCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitValueMethod(this);
            }
        }
        

        
        internal AstValueMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstValueMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstValueMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstValueMethod Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstValueMethod.Resolve(list);
            if ((index == 3))
            {
                return new AstValueMethod.AstValueMethod1(ctx, ((AstLocalId)(list[0])), ((AstValueCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstValueMethod.AstValueMethod2(ctx, ((AstFullColumnName)(list[0])), ((AstValueCall)(list[1])));
            }
            if ((index == 2))
            {
                return new AstValueMethod.AstValueMethod3(ctx, ((AstValueCall)(list[0])));
            }
            if ((index == 3))
            {
                return new AstValueMethod.AstValueMethod4(ctx, ((AstQueryMethod)(list[0])), ((AstValueCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstValueMethod.AstValueMethod5(ctx, ((AstSubquery)(list[0])), ((AstValueCall)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstValueCall), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstValueCall), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstQueryMethod), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstValueCall), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstValueCall), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstValueCall), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// value_method : 
        ///    loc=local_id . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstLocalId loc, AstValueCall call)
        {
            AstValueMethod.AstValueMethod1 result = new AstValueMethod.AstValueMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    value=full_column_name . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstFullColumnName value, AstValueCall call)
        {
            AstValueMethod.AstValueMethod2 result = new AstValueMethod.AstValueMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    eventdata=EVENTDATA ( ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstValueCall call)
        {
            AstValueMethod.AstValueMethod3 result = new AstValueMethod.AstValueMethod3(ctx, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    query=query_method . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstQueryMethod query, AstValueCall call)
        {
            AstValueMethod.AstValueMethod4 result = new AstValueMethod.AstValueMethod4(ctx, query, call);
            return result;
        }
        
        /// <summary>
        /// value_method : 
        ///    ( subquery ) . call=value_call 
        /// </summary>
        public static AstValueMethod ValueMethod(ParserRuleContext ctx, AstSubquery subquery, AstValueCall call)
        {
            AstValueMethod.AstValueMethod5 result = new AstValueMethod.AstValueMethod5(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// value_call
    /// 	 : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstValueCall : AstBnfRule
    {
        
        protected static string _rule = "value_call\r\n\t : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringte" +
            "xt  RR_BRACKET";
        
        internal AstValueCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstValueCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstValueCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstValueCall(ParserRuleContext ctx, AstStringtext xquery, AstStringtext sqltype) : 
                base(ctx)
        {
            _xquery = xquery;
            _sqltype = sqltype;
        }
        
        public virtual AstStringtext _xquery
        {
            get
            {
                return _xquery;
            }
        }
        
        public virtual AstStringtext _sqltype
        {
            get
            {
                return _sqltype;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitValueCall(this);
        }
        
        /// <summary>
        /// value_call : 
        ///    VALUE ( xquery=stringtext , sqltype=stringtext ) 
        /// </summary>
        public static AstValueCall ValueCall(ParserRuleContext ctx, AstStringtext xquery, AstStringtext sqltype)
        {
            AstValueCall result = new AstValueCall(ctx, xquery, sqltype);
            return result;
        }
    }
    
    /// <summary>
    /// query_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = query_call
    /// </summary>
    public abstract partial class AstQueryMethod : AstBnfRule
    {
        
        protected static string _rule = "query_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  call = query_call";
        
        /// <summary>
        /// query_method : loc=local_id DOT call=query_call 
        /// </summary>
        public partial class AstQueryMethod1 : AstQueryMethod
        {
            
            private AstLocalId _loc;
            
            private AstQueryCall _call;
            
            internal AstQueryMethod1(ParserRuleContext ctx, AstLocalId loc, AstQueryCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstQueryCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryMethod(this);
            }
        }
        /// <summary>
        /// query_method : value=full_column_name DOT call=query_call 
        /// </summary>
        public partial class AstQueryMethod2 : AstQueryMethod
        {
            
            private AstFullColumnName _value;
            
            private AstQueryCall _call;
            
            internal AstQueryMethod2(ParserRuleContext ctx, AstFullColumnName value, AstQueryCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstQueryCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryMethod(this);
            }
        }
        /// <summary>
        /// query_method : LR_BRACKET subquery RR_BRACKET DOT call=query_call 
        /// </summary>
        public partial class AstQueryMethod3 : AstQueryMethod
        {
            
            private AstSubquery _subquery;
            
            private AstQueryCall _call;
            
            internal AstQueryMethod3(ParserRuleContext ctx, AstSubquery subquery, AstQueryCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstQueryCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitQueryMethod(this);
            }
        }
        

        
        internal AstQueryMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstQueryMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstQueryMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstQueryMethod Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstQueryMethod.Resolve(list);
            if ((index == 3))
            {
                return new AstQueryMethod.AstQueryMethod1(ctx, ((AstLocalId)(list[0])), ((AstQueryCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstQueryMethod.AstQueryMethod2(ctx, ((AstFullColumnName)(list[0])), ((AstQueryCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstQueryMethod.AstQueryMethod3(ctx, ((AstSubquery)(list[0])), ((AstQueryCall)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstQueryCall), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstQueryCall), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstQueryCall), false, false))
                    {
                        return 3;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// query_method : 
        ///    loc=local_id . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(ParserRuleContext ctx, AstLocalId loc, AstQueryCall call)
        {
            AstQueryMethod.AstQueryMethod1 result = new AstQueryMethod.AstQueryMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// query_method : 
        ///    value=full_column_name . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(ParserRuleContext ctx, AstFullColumnName value, AstQueryCall call)
        {
            AstQueryMethod.AstQueryMethod2 result = new AstQueryMethod.AstQueryMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// query_method : 
        ///    ( subquery ) . call=query_call 
        /// </summary>
        public static AstQueryMethod QueryMethod(ParserRuleContext ctx, AstSubquery subquery, AstQueryCall call)
        {
            AstQueryMethod.AstQueryMethod3 result = new AstQueryMethod.AstQueryMethod3(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// query_call
    /// 	 : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstQueryCall : AstBnfRule
    {
        
        protected static string _rule = "query_call\r\n\t : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstQueryCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstQueryCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstQueryCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstQueryCall(ParserRuleContext ctx, AstStringtext xquery) : 
                base(ctx)
        {
            _xquery = xquery;
        }
        
        public virtual AstStringtext _xquery
        {
            get
            {
                return _xquery;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueryCall(this);
        }
        
        /// <summary>
        /// query_call : 
        ///    QUERY ( xquery=stringtext ) 
        /// </summary>
        public static AstQueryCall QueryCall(ParserRuleContext ctx, AstStringtext xquery)
        {
            AstQueryCall result = new AstQueryCall(ctx, xquery);
            return result;
        }
    }
    
    /// <summary>
    /// exist_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = exist_call
    /// </summary>
    public abstract partial class AstExistMethod : AstBnfRule
    {
        
        protected static string _rule = "exist_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  call = exist_call";
        
        /// <summary>
        /// exist_method : loc=local_id DOT call=exist_call 
        /// </summary>
        public partial class AstExistMethod1 : AstExistMethod
        {
            
            private AstLocalId _loc;
            
            private AstExistCall _call;
            
            internal AstExistMethod1(ParserRuleContext ctx, AstLocalId loc, AstExistCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstExistCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistMethod(this);
            }
        }
        /// <summary>
        /// exist_method : value=full_column_name DOT call=exist_call 
        /// </summary>
        public partial class AstExistMethod2 : AstExistMethod
        {
            
            private AstFullColumnName _value;
            
            private AstExistCall _call;
            
            internal AstExistMethod2(ParserRuleContext ctx, AstFullColumnName value, AstExistCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstExistCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistMethod(this);
            }
        }
        /// <summary>
        /// exist_method : LR_BRACKET subquery RR_BRACKET DOT call=exist_call 
        /// </summary>
        public partial class AstExistMethod3 : AstExistMethod
        {
            
            private AstSubquery _subquery;
            
            private AstExistCall _call;
            
            internal AstExistMethod3(ParserRuleContext ctx, AstSubquery subquery, AstExistCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstExistCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitExistMethod(this);
            }
        }
        

        
        internal AstExistMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstExistMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstExistMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstExistMethod Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstExistMethod.Resolve(list);
            if ((index == 3))
            {
                return new AstExistMethod.AstExistMethod1(ctx, ((AstLocalId)(list[0])), ((AstExistCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstExistMethod.AstExistMethod2(ctx, ((AstFullColumnName)(list[0])), ((AstExistCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstExistMethod.AstExistMethod3(ctx, ((AstSubquery)(list[0])), ((AstExistCall)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExistCall), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExistCall), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExistCall), false, false))
                    {
                        return 3;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// exist_method : 
        ///    loc=local_id . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(ParserRuleContext ctx, AstLocalId loc, AstExistCall call)
        {
            AstExistMethod.AstExistMethod1 result = new AstExistMethod.AstExistMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// exist_method : 
        ///    value=full_column_name . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(ParserRuleContext ctx, AstFullColumnName value, AstExistCall call)
        {
            AstExistMethod.AstExistMethod2 result = new AstExistMethod.AstExistMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// exist_method : 
        ///    ( subquery ) . call=exist_call 
        /// </summary>
        public static AstExistMethod ExistMethod(ParserRuleContext ctx, AstSubquery subquery, AstExistCall call)
        {
            AstExistMethod.AstExistMethod3 result = new AstExistMethod.AstExistMethod3(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// exist_call
    /// 	 : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstExistCall : AstBnfRule
    {
        
        protected static string _rule = "exist_call\r\n\t : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        internal AstExistCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstExistCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstExistCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstExistCall(ParserRuleContext ctx, AstStringtext xquery) : 
                base(ctx)
        {
            _xquery = xquery;
        }
        
        public virtual AstStringtext _xquery
        {
            get
            {
                return _xquery;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExistCall(this);
        }
        
        /// <summary>
        /// exist_call : 
        ///    EXIST ( xquery=stringtext ) 
        /// </summary>
        public static AstExistCall ExistCall(ParserRuleContext ctx, AstStringtext xquery)
        {
            AstExistCall result = new AstExistCall(ctx, xquery);
            return result;
        }
    }
    
    /// <summary>
    /// modify_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = modify_call
    /// </summary>
    public abstract partial class AstModifyMethod : AstBnfRule
    {
        
        protected static string _rule = "modify_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subqu" +
            "ery  RR_BRACKET)  DOT  call = modify_call";
        
        /// <summary>
        /// modify_method : loc=local_id DOT call=modify_call 
        /// </summary>
        public partial class AstModifyMethod1 : AstModifyMethod
        {
            
            private AstLocalId _loc;
            
            private AstModifyCall _call;
            
            internal AstModifyMethod1(ParserRuleContext ctx, AstLocalId loc, AstModifyCall call) : 
                    base(ctx)
            {
                _loc = loc;
                _call = call;
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstModifyCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyMethod(this);
            }
        }
        /// <summary>
        /// modify_method : value=full_column_name DOT call=modify_call 
        /// </summary>
        public partial class AstModifyMethod2 : AstModifyMethod
        {
            
            private AstFullColumnName _value;
            
            private AstModifyCall _call;
            
            internal AstModifyMethod2(ParserRuleContext ctx, AstFullColumnName value, AstModifyCall call) : 
                    base(ctx)
            {
                _value = value;
                _call = call;
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstModifyCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyMethod(this);
            }
        }
        /// <summary>
        /// modify_method : LR_BRACKET subquery RR_BRACKET DOT call=modify_call 
        /// </summary>
        public partial class AstModifyMethod3 : AstModifyMethod
        {
            
            private AstSubquery _subquery;
            
            private AstModifyCall _call;
            
            internal AstModifyMethod3(ParserRuleContext ctx, AstSubquery subquery, AstModifyCall call) : 
                    base(ctx)
            {
                _subquery = subquery;
                _call = call;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstModifyCall Call
            {
                get
                {
                    return _call;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitModifyMethod(this);
            }
        }
        

        
        internal AstModifyMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstModifyMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstModifyMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstModifyMethod Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstModifyMethod.Resolve(list);
            if ((index == 3))
            {
                return new AstModifyMethod.AstModifyMethod1(ctx, ((AstLocalId)(list[0])), ((AstModifyCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstModifyMethod.AstModifyMethod2(ctx, ((AstFullColumnName)(list[0])), ((AstModifyCall)(list[1])));
            }
            if ((index == 3))
            {
                return new AstModifyMethod.AstModifyMethod3(ctx, ((AstSubquery)(list[0])), ((AstModifyCall)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstModifyCall), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstModifyCall), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstModifyCall), false, false))
                    {
                        return 3;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// modify_method : 
        ///    loc=local_id . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(ParserRuleContext ctx, AstLocalId loc, AstModifyCall call)
        {
            AstModifyMethod.AstModifyMethod1 result = new AstModifyMethod.AstModifyMethod1(ctx, loc, call);
            return result;
        }
        
        /// <summary>
        /// modify_method : 
        ///    value=full_column_name . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(ParserRuleContext ctx, AstFullColumnName value, AstModifyCall call)
        {
            AstModifyMethod.AstModifyMethod2 result = new AstModifyMethod.AstModifyMethod2(ctx, value, call);
            return result;
        }
        
        /// <summary>
        /// modify_method : 
        ///    ( subquery ) . call=modify_call 
        /// </summary>
        public static AstModifyMethod ModifyMethod(ParserRuleContext ctx, AstSubquery subquery, AstModifyCall call)
        {
            AstModifyMethod.AstModifyMethod3 result = new AstModifyMethod.AstModifyMethod3(ctx, subquery, call);
            return result;
        }
    }
    
    /// <summary>
    /// modify_call
    /// 	 : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstModifyCall : AstBnfRule
    {
        
        protected static string _rule = "modify_call\r\n\t : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET";
        
        internal AstModifyCall(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstModifyCall(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstModifyCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstModifyCall(ParserRuleContext ctx, AstStringtext xmlDml) : 
                base(ctx)
        {
            _xmlDml = xmlDml;
        }
        
        public virtual AstStringtext _xmlDml
        {
            get
            {
                return _xmlDml;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModifyCall(this);
        }
        
        /// <summary>
        /// modify_call : 
        ///    MODIFY ( xml_dml=stringtext ) 
        /// </summary>
        public static AstModifyCall ModifyCall(ParserRuleContext ctx, AstStringtext xmlDml)
        {
            AstModifyCall result = new AstModifyCall(ctx, xmlDml);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_call
    /// 	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
    /// 	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
    /// 	 | GETLEVEL  LR_BRACKET  RR_BRACKET
    /// 	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
    /// 	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
    /// 	 | TOSTRING  LR_BRACKET  RR_BRACKET
    /// </summary>
    public abstract partial class AstHierarchyidCall : AstBnfRule
    {
        
        protected static string _rule = @"hierarchyid_call
	 : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET
	 | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET
	 | GETLEVEL  LR_BRACKET  RR_BRACKET
	 | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET
	 | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET
	 | TOSTRING  LR_BRACKET  RR_BRACKET";
        
        /// <summary>
        /// hierarchyid_call : GETANCESTOR LR_BRACKET n=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall1 : AstHierarchyidCall
        {
            
            private AstExpression _n;
            
            internal AstHierarchyidCall1(ParserRuleContext ctx, AstExpression n) : 
                    base(ctx)
            {
                _n = n;
            }
            
            public virtual AstExpression N
            {
                get
                {
                    return _n;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETDESCENDANT LR_BRACKET child1=expression COMMA child2=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall2 : AstHierarchyidCall
        {
            
            private AstExpression _child1;
            
            private AstExpression _child2;
            
            internal AstHierarchyidCall2(ParserRuleContext ctx, AstExpression child1, AstExpression child2) : 
                    base(ctx)
            {
                _child1 = child1;
                _child2 = child2;
            }
            
            public virtual AstExpression Child1
            {
                get
                {
                    return _child1;
                }
            }
            
            public virtual AstExpression Child2
            {
                get
                {
                    return _child2;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETLEVEL LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall3 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : ISDESCENDANTOF LR_BRACKET parent_=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall4 : AstHierarchyidCall
        {
            
            private AstExpression _parent;
            
            internal AstHierarchyidCall4(ParserRuleContext ctx, AstExpression parent) : 
                    base(ctx)
            {
                _parent = parent;
            }
            
            public virtual AstExpression Parent
            {
                get
                {
                    return _parent;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : GETREPARENTEDVALUE LR_BRACKET oldroot=expression COMMA newroot=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall5 : AstHierarchyidCall
        {
            
            private AstExpression _oldroot;
            
            private AstExpression _newroot;
            
            internal AstHierarchyidCall5(ParserRuleContext ctx, AstExpression oldroot, AstExpression newroot) : 
                    base(ctx)
            {
                _oldroot = oldroot;
                _newroot = newroot;
            }
            
            public virtual AstExpression Oldroot
            {
                get
                {
                    return _oldroot;
                }
            }
            
            public virtual AstExpression Newroot
            {
                get
                {
                    return _newroot;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        /// <summary>
        /// hierarchyid_call : TOSTRING LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidCall6 : AstHierarchyidCall
        {
            
            internal AstHierarchyidCall6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidCall(this);
            }
        }
        

        
        internal AstHierarchyidCall(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidCall(Position p) : 
                base(p)
        {
        }
        
        internal AstHierarchyidCall(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstHierarchyidCall Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstHierarchyidCall.Resolve(list);
            if ((index == 2))
            {
                return new AstHierarchyidCall.AstHierarchyidCall1(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstHierarchyidCall.AstHierarchyidCall2(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 1))
            {
                return new AstHierarchyidCall.AstHierarchyidCall3(ctx);
            }
            if ((index == 2))
            {
                return new AstHierarchyidCall.AstHierarchyidCall4(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 3))
            {
                return new AstHierarchyidCall.AstHierarchyidCall5(ctx, ((AstExpression)(list[0])), ((AstExpression)(list[1])));
            }
            if ((index == 1))
            {
                return new AstHierarchyidCall.AstHierarchyidCall6(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        return 4;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETANCESTOR ( n=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(ParserRuleContext ctx, AstExpression n)
        {
            AstHierarchyidCall.AstHierarchyidCall1 result = new AstHierarchyidCall.AstHierarchyidCall1(ctx, n);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETDESCENDANT ( child1=expression , child2=expression ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(ParserRuleContext ctx, AstExpression child1, AstExpression child2)
        {
            AstHierarchyidCall.AstHierarchyidCall2 result = new AstHierarchyidCall.AstHierarchyidCall2(ctx, child1, child2);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_call : 
        ///    GETLEVEL ( ) 
        /// </summary>
        public static AstHierarchyidCall HierarchyidCall(ParserRuleContext ctx)
        {
            AstHierarchyidCall.AstHierarchyidCall3 result = new AstHierarchyidCall.AstHierarchyidCall3(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// hierarchyid_static_method
    /// 	 : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)
    /// </summary>
    public abstract partial class AstHierarchyidStaticMethod : AstBnfRule
    {
        
        protected static string _rule = "hierarchyid_static_method\r\n\t : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  R" +
            "R_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)";
        
        /// <summary>
        /// hierarchyid_static_method : HIERARCHYID DOUBLE_COLON GETROOT LR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidStaticMethod1 : AstHierarchyidStaticMethod
        {
            
            internal AstHierarchyidStaticMethod1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidStaticMethod(this);
            }
        }
        /// <summary>
        /// hierarchyid_static_method : HIERARCHYID DOUBLE_COLON PARSE LR_BRACKET input=expression RR_BRACKET 
        /// </summary>
        public partial class AstHierarchyidStaticMethod2 : AstHierarchyidStaticMethod
        {
            
            private AstExpression _input;
            
            internal AstHierarchyidStaticMethod2(ParserRuleContext ctx, AstExpression input) : 
                    base(ctx)
            {
                _input = input;
            }
            
            public virtual AstExpression Input
            {
                get
                {
                    return _input;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHierarchyidStaticMethod(this);
            }
        }
        

        
        internal AstHierarchyidStaticMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHierarchyidStaticMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstHierarchyidStaticMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstHierarchyidStaticMethod Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstHierarchyidStaticMethod.Resolve(list);
            if ((index == 1))
            {
                return new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod1(ctx);
            }
            if ((index == 2))
            {
                return new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod2(ctx, ((AstExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// hierarchyid_static_method : 
        ///    HIERARCHYID :: GETROOT ( ) 
        /// </summary>
        public static AstHierarchyidStaticMethod HierarchyidStaticMethod(ParserRuleContext ctx)
        {
            AstHierarchyidStaticMethod.AstHierarchyidStaticMethod1 result = new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod1(ctx);
            return result;
        }
        
        /// <summary>
        /// hierarchyid_static_method : 
        ///    HIERARCHYID :: PARSE ( input=expression ) 
        /// </summary>
        public static AstHierarchyidStaticMethod HierarchyidStaticMethod(ParserRuleContext ctx, AstExpression input)
        {
            AstHierarchyidStaticMethod.AstHierarchyidStaticMethod2 result = new AstHierarchyidStaticMethod.AstHierarchyidStaticMethod2(ctx, input);
            return result;
        }
    }
    
    /// <summary>
    /// nodes_method
    /// 	 : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET
    /// </summary>
    public abstract partial class AstNodesMethod : AstBnfRule
    {
        
        protected static string _rule = "nodes_method\r\n\t : (loc = local_id | value = full_column_name | LR_BRACKET  subque" +
            "ry  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET";
        
        /// <summary>
        /// nodes_method : loc=local_id DOT NODES LR_BRACKET xquery=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstNodesMethod1 : AstNodesMethod
        {
            
            private AstLocalId _loc;
            
            private AstStringtext _xquery;
            
            internal AstNodesMethod1(ParserRuleContext ctx, AstLocalId loc, AstStringtext xquery) : 
                    base(ctx)
            {
                _loc = loc;
                _xquery = xquery;
            }
            
            public virtual AstLocalId Loc
            {
                get
                {
                    return _loc;
                }
            }
            
            public virtual AstStringtext Xquery
            {
                get
                {
                    return _xquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNodesMethod(this);
            }
        }
        /// <summary>
        /// nodes_method : value=full_column_name DOT NODES LR_BRACKET xquery=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstNodesMethod2 : AstNodesMethod
        {
            
            private AstFullColumnName _value;
            
            private AstStringtext _xquery;
            
            internal AstNodesMethod2(ParserRuleContext ctx, AstFullColumnName value, AstStringtext xquery) : 
                    base(ctx)
            {
                _value = value;
                _xquery = xquery;
            }
            
            public virtual AstFullColumnName Value
            {
                get
                {
                    return _value;
                }
            }
            
            public virtual AstStringtext Xquery
            {
                get
                {
                    return _xquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNodesMethod(this);
            }
        }
        /// <summary>
        /// nodes_method : LR_BRACKET subquery RR_BRACKET DOT NODES LR_BRACKET xquery=stringtext RR_BRACKET 
        /// </summary>
        public partial class AstNodesMethod3 : AstNodesMethod
        {
            
            private AstSubquery _subquery;
            
            private AstStringtext _xquery;
            
            internal AstNodesMethod3(ParserRuleContext ctx, AstSubquery subquery, AstStringtext xquery) : 
                    base(ctx)
            {
                _subquery = subquery;
                _xquery = xquery;
            }
            
            public virtual AstSubquery Subquery
            {
                get
                {
                    return _subquery;
                }
            }
            
            public virtual AstStringtext Xquery
            {
                get
                {
                    return _xquery;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNodesMethod(this);
            }
        }
        

        
        internal AstNodesMethod(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstNodesMethod(Position p) : 
                base(p)
        {
        }
        
        internal AstNodesMethod(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstNodesMethod Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstNodesMethod.Resolve(list);
            if ((index == 3))
            {
                return new AstNodesMethod.AstNodesMethod1(ctx, ((AstLocalId)(list[0])), ((AstStringtext)(list[1])));
            }
            if ((index == 3))
            {
                return new AstNodesMethod.AstNodesMethod2(ctx, ((AstFullColumnName)(list[0])), ((AstStringtext)(list[1])));
            }
            if ((index == 3))
            {
                return new AstNodesMethod.AstNodesMethod3(ctx, ((AstSubquery)(list[0])), ((AstStringtext)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstFullColumnName), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSubquery), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstStringtext), false, false))
                    {
                        return 3;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    loc=local_id . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(ParserRuleContext ctx, AstLocalId loc, AstStringtext xquery)
        {
            AstNodesMethod.AstNodesMethod1 result = new AstNodesMethod.AstNodesMethod1(ctx, loc, xquery);
            return result;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    value=full_column_name . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(ParserRuleContext ctx, AstFullColumnName value, AstStringtext xquery)
        {
            AstNodesMethod.AstNodesMethod2 result = new AstNodesMethod.AstNodesMethod2(ctx, value, xquery);
            return result;
        }
        
        /// <summary>
        /// nodes_method : 
        ///    ( subquery ) . NODES ( xquery=stringtext ) 
        /// </summary>
        public static AstNodesMethod NodesMethod(ParserRuleContext ctx, AstSubquery subquery, AstStringtext xquery)
        {
            AstNodesMethod.AstNodesMethod3 result = new AstNodesMethod.AstNodesMethod3(ctx, subquery, xquery);
            return result;
        }
    }
    
    /// <summary>
    /// table_hint
    /// 	 : NOEXPAND
    /// 	 | INDEX  hint_index
    /// 	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
    /// 	 | FORCESCAN
    /// 	 | HOLDLOCK
    /// 	 | NOLOCK
    /// 	 | NOWAIT
    /// 	 | PAGLOCK
    /// 	 | READCOMMITTED
    /// 	 | READCOMMITTEDLOCK
    /// 	 | READPAST
    /// 	 | READUNCOMMITTED
    /// 	 | REPEATABLEREAD
    /// 	 | ROWLOCK
    /// 	 | SERIALIZABLE
    /// 	 | SNAPSHOT
    /// 	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
    /// 	 | TABLOCK
    /// 	 | TABLOCKX
    /// 	 | UPDLOCK
    /// 	 | XLOCK
    /// 	 | KEEPIDENTITY
    /// 	 | KEEPDEFAULTS
    /// 	 | IGNORE_CONSTRAINTS
    /// 	 | IGNORE_TRIGGERS
    /// </summary>
    public abstract partial class AstTableHint : AstBnfRule
    {
        
        protected static string _rule = @"table_hint
	 : NOEXPAND
	 | INDEX  hint_index
	 | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)?
	 | FORCESCAN
	 | HOLDLOCK
	 | NOLOCK
	 | NOWAIT
	 | PAGLOCK
	 | READCOMMITTED
	 | READCOMMITTEDLOCK
	 | READPAST
	 | READUNCOMMITTED
	 | REPEATABLEREAD
	 | ROWLOCK
	 | SERIALIZABLE
	 | SNAPSHOT
	 | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal
	 | TABLOCK
	 | TABLOCKX
	 | UPDLOCK
	 | XLOCK
	 | KEEPIDENTITY
	 | KEEPDEFAULTS
	 | IGNORE_CONSTRAINTS
	 | IGNORE_TRIGGERS";
        
        /// <summary>
        /// table_hint : NOEXPAND 
        /// </summary>
        public partial class AstTableHint1 : AstTableHint
        {
            
            internal AstTableHint1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : INDEX hint_index 
        /// </summary>
        public partial class AstTableHint2 : AstTableHint
        {
            
            private AstHintIndex _hintIndex;
            
            internal AstTableHint2(ParserRuleContext ctx, AstHintIndex hintIndex) : 
                    base(ctx)
            {
                _hintIndex = hintIndex;
            }
            
            public virtual AstHintIndex HintIndex
            {
                get
                {
                    return _hintIndex;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : FORCESEEK LR_BRACKET index_value LR_BRACKET column_name_list RR_BRACKET RR_BRACKET 
        /// </summary>
        public partial class AstTableHint3 : AstTableHint
        {
            
            private AstIndexValue _indexValue;
            
            private AstColumnNameList _columnNameList;
            
            internal AstTableHint3(ParserRuleContext ctx, AstIndexValue indexValue, AstColumnNameList columnNameList) : 
                    base(ctx)
            {
                _indexValue = indexValue;
                _columnNameList = columnNameList;
            }
            
            public virtual AstIndexValue IndexValue
            {
                get
                {
                    return _indexValue;
                }
            }
            
            public virtual AstColumnNameList ColumnNameList
            {
                get
                {
                    return _columnNameList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : FORCESCAN 
        /// </summary>
        public partial class AstTableHint4 : AstTableHint
        {
            
            internal AstTableHint4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : HOLDLOCK 
        /// </summary>
        public partial class AstTableHint5 : AstTableHint
        {
            
            internal AstTableHint5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : NOLOCK 
        /// </summary>
        public partial class AstTableHint6 : AstTableHint
        {
            
            internal AstTableHint6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : NOWAIT 
        /// </summary>
        public partial class AstTableHint7 : AstTableHint
        {
            
            internal AstTableHint7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : PAGLOCK 
        /// </summary>
        public partial class AstTableHint8 : AstTableHint
        {
            
            internal AstTableHint8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READCOMMITTED 
        /// </summary>
        public partial class AstTableHint9 : AstTableHint
        {
            
            internal AstTableHint9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READCOMMITTEDLOCK 
        /// </summary>
        public partial class AstTableHint10 : AstTableHint
        {
            
            internal AstTableHint10(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READPAST 
        /// </summary>
        public partial class AstTableHint11 : AstTableHint
        {
            
            internal AstTableHint11(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : READUNCOMMITTED 
        /// </summary>
        public partial class AstTableHint12 : AstTableHint
        {
            
            internal AstTableHint12(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : REPEATABLEREAD 
        /// </summary>
        public partial class AstTableHint13 : AstTableHint
        {
            
            internal AstTableHint13(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : ROWLOCK 
        /// </summary>
        public partial class AstTableHint14 : AstTableHint
        {
            
            internal AstTableHint14(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SERIALIZABLE 
        /// </summary>
        public partial class AstTableHint15 : AstTableHint
        {
            
            internal AstTableHint15(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SNAPSHOT 
        /// </summary>
        public partial class AstTableHint16 : AstTableHint
        {
            
            internal AstTableHint16(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : SPATIAL_WINDOW_MAX_CELLS EQUAL decimal 
        /// </summary>
        public partial class AstTableHint17 : AstTableHint
        {
            
            private AstDecimal _decimal;
            
            internal AstTableHint17(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : TABLOCK 
        /// </summary>
        public partial class AstTableHint18 : AstTableHint
        {
            
            internal AstTableHint18(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : TABLOCKX 
        /// </summary>
        public partial class AstTableHint19 : AstTableHint
        {
            
            internal AstTableHint19(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : UPDLOCK 
        /// </summary>
        public partial class AstTableHint20 : AstTableHint
        {
            
            internal AstTableHint20(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : XLOCK 
        /// </summary>
        public partial class AstTableHint21 : AstTableHint
        {
            
            internal AstTableHint21(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : KEEPIDENTITY 
        /// </summary>
        public partial class AstTableHint22 : AstTableHint
        {
            
            internal AstTableHint22(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : KEEPDEFAULTS 
        /// </summary>
        public partial class AstTableHint23 : AstTableHint
        {
            
            internal AstTableHint23(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : IGNORE_CONSTRAINTS 
        /// </summary>
        public partial class AstTableHint24 : AstTableHint
        {
            
            internal AstTableHint24(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        /// <summary>
        /// table_hint : IGNORE_TRIGGERS 
        /// </summary>
        public partial class AstTableHint25 : AstTableHint
        {
            
            internal AstTableHint25(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitTableHint(this);
            }
        }
        

        
        internal AstTableHint(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstTableHint(Position p) : 
                base(p)
        {
        }
        
        internal AstTableHint(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstTableHint Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstTableHint.Resolve(list);
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint1(ctx);
            }
            if ((index == 2))
            {
                return new AstTableHint.AstTableHint2(ctx, ((AstHintIndex)(list[0])));
            }
            if ((index == 3))
            {
                return new AstTableHint.AstTableHint3(ctx, ((AstIndexValue)(list[0])), ((AstColumnNameList)(list[1])));
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint4(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint5(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint6(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint7(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint8(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint9(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint10(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint11(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint12(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint13(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint14(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint15(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint16(ctx);
            }
            if ((index == 2))
            {
                return new AstTableHint.AstTableHint17(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint18(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint19(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint20(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint21(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint22(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint23(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint24(ctx);
            }
            if ((index == 1))
            {
                return new AstTableHint.AstTableHint25(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexValue), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstColumnNameList), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstHintIndex), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// table_hint : 
        ///    NOEXPAND 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx)
        {
            AstTableHint.AstTableHint1 result = new AstTableHint.AstTableHint1(ctx);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    INDEX hint_index 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx, AstHintIndex hintIndex)
        {
            AstTableHint.AstTableHint2 result = new AstTableHint.AstTableHint2(ctx, hintIndex);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    FORCESEEK ( index_value ( column_name_list ) ) 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx, AstIndexValue indexValue, AstColumnNameList columnNameList)
        {
            AstTableHint.AstTableHint3 result = new AstTableHint.AstTableHint3(ctx, indexValue, columnNameList);
            return result;
        }
        
        /// <summary>
        /// table_hint : 
        ///    SPATIAL_WINDOW_MAX_CELLS EQUAL decimal 
        /// </summary>
        public static AstTableHint TableHint(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstTableHint.AstTableHint17 result = new AstTableHint.AstTableHint17(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// hint_index
    /// 	 : LR_BRACKET  index_values  RR_BRACKET
    /// 	 | EQUAL  LR_BRACKET  index_value  RR_BRACKET
    /// 	 | EQUAL  index_value
    /// </summary>
    public abstract partial class AstHintIndex : AstBnfRule
    {
        
        protected static string _rule = "hint_index\r\n\t : LR_BRACKET  index_values  RR_BRACKET\r\n\t | EQUAL  LR_BRACKET  inde" +
            "x_value  RR_BRACKET\r\n\t | EQUAL  index_value";
        
        /// <summary>
        /// hint_index : LR_BRACKET index_values RR_BRACKET 
        /// </summary>
        public partial class AstHintIndex1 : AstHintIndex
        {
            
            private AstIndexValues _indexValues;
            
            internal AstHintIndex1(ParserRuleContext ctx, AstIndexValues indexValues) : 
                    base(ctx)
            {
                _indexValues = indexValues;
            }
            
            public virtual AstIndexValues IndexValues
            {
                get
                {
                    return _indexValues;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHintIndex(this);
            }
        }
        /// <summary>
        /// hint_index : EQUAL LR_BRACKET index_value RR_BRACKET 
        /// </summary>
        public partial class AstHintIndex2 : AstHintIndex
        {
            
            private AstIndexValue _indexValue;
            
            internal AstHintIndex2(ParserRuleContext ctx, AstIndexValue indexValue) : 
                    base(ctx)
            {
                _indexValue = indexValue;
            }
            
            public virtual AstIndexValue IndexValue
            {
                get
                {
                    return _indexValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHintIndex(this);
            }
        }
        /// <summary>
        /// hint_index : EQUAL index_value 
        /// </summary>
        public partial class AstHintIndex3 : AstHintIndex
        {
            
            private AstIndexValue _indexValue;
            
            internal AstHintIndex3(ParserRuleContext ctx, AstIndexValue indexValue) : 
                    base(ctx)
            {
                _indexValue = indexValue;
            }
            
            public virtual AstIndexValue IndexValue
            {
                get
                {
                    return _indexValue;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitHintIndex(this);
            }
        }
        

        
        internal AstHintIndex(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstHintIndex(Position p) : 
                base(p)
        {
        }
        
        internal AstHintIndex(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstHintIndex Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstHintIndex.Resolve(list);
            if ((index == 2))
            {
                return new AstHintIndex.AstHintIndex1(ctx, ((AstIndexValues)(list[0])));
            }
            if ((index == 2))
            {
                return new AstHintIndex.AstHintIndex2(ctx, ((AstIndexValue)(list[0])));
            }
            if ((index == 2))
            {
                return new AstHintIndex.AstHintIndex3(ctx, ((AstIndexValue)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstIndexValues), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstIndexValue), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstIndexValue), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// hint_index : 
        ///    ( index_values ) 
        /// </summary>
        public static AstHintIndex HintIndex(ParserRuleContext ctx, AstIndexValues indexValues)
        {
            AstHintIndex.AstHintIndex1 result = new AstHintIndex.AstHintIndex1(ctx, indexValues);
            return result;
        }
        
        /// <summary>
        /// hint_index : 
        ///    EQUAL ( index_value ) 
        /// </summary>
        public static AstHintIndex HintIndex(ParserRuleContext ctx, AstIndexValue indexValue)
        {
            AstHintIndex.AstHintIndex2 result = new AstHintIndex.AstHintIndex2(ctx, indexValue);
            return result;
        }
    }
    
    /// <summary>
    /// index_value
    /// 	 : id_
    /// 	 | decimal
    /// </summary>
    public abstract partial class AstIndexValue : AstBnfRule
    {
        
        protected static string _rule = "index_value\r\n\t : id_\r\n\t | decimal";
        
        /// <summary>
        /// index_value : id_ 
        /// </summary>
        public partial class AstIndexValue1 : AstIndexValue
        {
            
            private AstId _id;
            
            internal AstIndexValue1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexValue(this);
            }
        }
        /// <summary>
        /// index_value : decimal 
        /// </summary>
        public partial class AstIndexValue2 : AstIndexValue
        {
            
            private AstDecimal _decimal;
            
            internal AstIndexValue2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitIndexValue(this);
            }
        }
        

        
        internal AstIndexValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstIndexValue(Position p) : 
                base(p)
        {
        }
        
        internal AstIndexValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstIndexValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstIndexValue.Resolve(list);
            if ((index == 2))
            {
                return new AstIndexValue.AstIndexValue1(ctx, ((AstId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstIndexValue.AstIndexValue2(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// index_value : 
        ///    id_ 
        /// </summary>
        public static AstIndexValue IndexValue(ParserRuleContext ctx, AstId id)
        {
            AstIndexValue.AstIndexValue1 result = new AstIndexValue.AstIndexValue1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// index_value : 
        ///    decimal 
        /// </summary>
        public static AstIndexValue IndexValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstIndexValue.AstIndexValue2 result = new AstIndexValue.AstIndexValue2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// ranking_windowed_function
    /// 	 : ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause
    /// 	 | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// </summary>
    public abstract partial class AstRankingWindowedFunction : AstBnfRule
    {
        
        protected static string _rule = "ranking_windowed_function\r\n\t : ranking_windowed  LR_BRACKET  RR_BRACKET  over_cla" +
            "use\r\n\t | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause";
        
        /// <summary>
        /// ranking_windowed_function : ranking_windowed LR_BRACKET RR_BRACKET over_clause 
        /// </summary>
        public partial class AstRankingWindowedFunction1 : AstRankingWindowedFunction
        {
            
            private AstRankingWindowed _rankingWindowed;
            
            private AstOverClause _overClause;
            
            internal AstRankingWindowedFunction1(ParserRuleContext ctx, AstRankingWindowed rankingWindowed, AstOverClause overClause) : 
                    base(ctx)
            {
                _rankingWindowed = rankingWindowed;
                _overClause = overClause;
            }
            
            public virtual AstRankingWindowed RankingWindowed
            {
                get
                {
                    return _rankingWindowed;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRankingWindowedFunction(this);
            }
        }
        /// <summary>
        /// ranking_windowed_function : NTILE LR_BRACKET expression RR_BRACKET over_clause 
        /// </summary>
        public partial class AstRankingWindowedFunction2 : AstRankingWindowedFunction
        {
            
            private AstExpression _expression;
            
            private AstOverClause _overClause;
            
            internal AstRankingWindowedFunction2(ParserRuleContext ctx, AstExpression expression, AstOverClause overClause) : 
                    base(ctx)
            {
                _expression = expression;
                _overClause = overClause;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitRankingWindowedFunction(this);
            }
        }
        

        
        internal AstRankingWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstRankingWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstRankingWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstRankingWindowedFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstRankingWindowedFunction.Resolve(list);
            if ((index == 3))
            {
                return new AstRankingWindowedFunction.AstRankingWindowedFunction1(ctx, ((AstRankingWindowed)(list[0])), ((AstOverClause)(list[1])));
            }
            if ((index == 3))
            {
                return new AstRankingWindowedFunction.AstRankingWindowedFunction2(ctx, ((AstExpression)(list[0])), ((AstOverClause)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstRankingWindowed), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOverClause), false, false))
                    {
                        return 1;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstOverClause), false, false))
                    {
                        return 2;
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// ranking_windowed_function : 
        ///    ranking_windowed ( ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(ParserRuleContext ctx, AstRankingWindowed rankingWindowed, AstOverClause overClause)
        {
            AstRankingWindowedFunction.AstRankingWindowedFunction1 result = new AstRankingWindowedFunction.AstRankingWindowedFunction1(ctx, rankingWindowed, overClause);
            return result;
        }
        
        /// <summary>
        /// ranking_windowed_function : 
        ///    NTILE ( expression ) over_clause 
        /// </summary>
        public static AstRankingWindowedFunction RankingWindowedFunction(ParserRuleContext ctx, AstExpression expression, AstOverClause overClause)
        {
            AstRankingWindowedFunction.AstRankingWindowedFunction2 result = new AstRankingWindowedFunction.AstRankingWindowedFunction2(ctx, expression, overClause);
            return result;
        }
    }
    
    /// <summary>
    /// aggregate_windowed_function
    /// 	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
    /// 	 | count_count_big  LR_BRACKET  all_distinct_expression_or_star  RR_BRACKET  over_clause?
    /// 	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
    /// 	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
    /// 	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
    /// </summary>
    public abstract partial class AstAggregateWindowedFunction : AstBnfRule
    {
        
        protected static string _rule = @"aggregate_windowed_function
	 : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause?
	 | count_count_big  LR_BRACKET  all_distinct_expression_or_star  RR_BRACKET  over_clause?
	 | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET
	 | GROUPING  LR_BRACKET  expression  RR_BRACKET
	 | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET";
        
        /// <summary>
        /// aggregate_windowed_function : agg_function LR_BRACKET all_distinct_expression RR_BRACKET over_clause? 
        /// </summary>
        public partial class AstAggregateWindowedFunction1 : AstAggregateWindowedFunction
        {
            
            private AstAggFunction _aggFunction;
            
            private AstAllDistinctExpression _allDistinctExpression;
            
            private AstOverClause _overClause;
            
            internal AstAggregateWindowedFunction1(ParserRuleContext ctx, AstAggFunction aggFunction, AstAllDistinctExpression allDistinctExpression, AstOverClause overClause) : 
                    base(ctx)
            {
                _aggFunction = aggFunction;
                _allDistinctExpression = allDistinctExpression;
                _overClause = overClause;
            }
            
            public virtual AstAggFunction AggFunction
            {
                get
                {
                    return _aggFunction;
                }
            }
            
            public virtual AstAllDistinctExpression AllDistinctExpression
            {
                get
                {
                    return _allDistinctExpression;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : count_count_big LR_BRACKET all_distinct_expression_or_star RR_BRACKET over_clause? 
        /// </summary>
        public partial class AstAggregateWindowedFunction2 : AstAggregateWindowedFunction
        {
            
            private AstCountCountBig _countCountBig;
            
            private AstAllDistinctExpressionOrStar _allDistinctExpressionOrStar;
            
            private AstOverClause _overClause;
            
            internal AstAggregateWindowedFunction2(ParserRuleContext ctx, AstCountCountBig countCountBig, AstAllDistinctExpressionOrStar allDistinctExpressionOrStar, AstOverClause overClause) : 
                    base(ctx)
            {
                _countCountBig = countCountBig;
                _allDistinctExpressionOrStar = allDistinctExpressionOrStar;
                _overClause = overClause;
            }
            
            public virtual AstCountCountBig CountCountBig
            {
                get
                {
                    return _countCountBig;
                }
            }
            
            public virtual AstAllDistinctExpressionOrStar AllDistinctExpressionOrStar
            {
                get
                {
                    return _allDistinctExpressionOrStar;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : CHECKSUM_AGG LR_BRACKET all_distinct_expression RR_BRACKET 
        /// </summary>
        public partial class AstAggregateWindowedFunction3 : AstAggregateWindowedFunction
        {
            
            private AstAllDistinctExpression _allDistinctExpression;
            
            internal AstAggregateWindowedFunction3(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression) : 
                    base(ctx)
            {
                _allDistinctExpression = allDistinctExpression;
            }
            
            public virtual AstAllDistinctExpression AllDistinctExpression
            {
                get
                {
                    return _allDistinctExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : GROUPING LR_BRACKET expression RR_BRACKET 
        /// </summary>
        public partial class AstAggregateWindowedFunction4 : AstAggregateWindowedFunction
        {
            
            private AstExpression _expression;
            
            internal AstAggregateWindowedFunction4(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        /// <summary>
        /// aggregate_windowed_function : GROUPING_ID LR_BRACKET expression_list RR_BRACKET 
        /// </summary>
        public partial class AstAggregateWindowedFunction5 : AstAggregateWindowedFunction
        {
            
            private AstExpressionList _expressionList;
            
            internal AstAggregateWindowedFunction5(ParserRuleContext ctx, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _expressionList = expressionList;
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAggregateWindowedFunction(this);
            }
        }
        

        
        internal AstAggregateWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAggregateWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstAggregateWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAggregateWindowedFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAggregateWindowedFunction.Resolve(list);
            if ((index == 4))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction1(ctx, ((AstAggFunction)(list[0])), ((AstAllDistinctExpression)(list[1])), ((AstOverClause)(list[2])));
            }
            if ((index == 4))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction2(ctx, ((AstCountCountBig)(list[0])), ((AstAllDistinctExpressionOrStar)(list[1])), ((AstOverClause)(list[2])));
            }
            if ((index == 2))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction3(ctx, ((AstAllDistinctExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction4(ctx, ((AstExpression)(list[0])));
            }
            if ((index == 2))
            {
                return new AstAggregateWindowedFunction.AstAggregateWindowedFunction5(ctx, ((AstExpressionList)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstAggFunction), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAllDistinctExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOverClause), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCountCountBig), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstAllDistinctExpressionOrStar), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOverClause), false, false))
                        {
                            return 2;
                        }
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllDistinctExpression), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpressionList), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    agg_function ( all_distinct_expression ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstAggFunction aggFunction, AstAllDistinctExpression allDistinctExpression, AstOverClause overClause)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction1 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction1(ctx, aggFunction, allDistinctExpression, overClause);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    count_count_big ( all_distinct_expression_or_star ) over_clause? 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstCountCountBig countCountBig, AstAllDistinctExpressionOrStar allDistinctExpressionOrStar, AstOverClause overClause)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction2 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction2(ctx, countCountBig, allDistinctExpressionOrStar, overClause);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    CHECKSUM_AGG ( all_distinct_expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction3 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction3(ctx, allDistinctExpression);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    GROUPING ( expression ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstExpression expression)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction4 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction4(ctx, expression);
            return result;
        }
        
        /// <summary>
        /// aggregate_windowed_function : 
        ///    GROUPING_ID ( expression_list ) 
        /// </summary>
        public static AstAggregateWindowedFunction AggregateWindowedFunction(ParserRuleContext ctx, AstExpressionList expressionList)
        {
            AstAggregateWindowedFunction.AstAggregateWindowedFunction5 result = new AstAggregateWindowedFunction.AstAggregateWindowedFunction5(ctx, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// all_distinct_expression_or_star
    /// 	 : STAR
    /// 	 | all_distinct_expression
    /// </summary>
    public abstract partial class AstAllDistinctExpressionOrStar : AstBnfRule
    {
        
        protected static string _rule = "all_distinct_expression_or_star\r\n\t : STAR\r\n\t | all_distinct_expression";
        
        /// <summary>
        /// all_distinct_expression_or_star : STAR 
        /// </summary>
        public partial class AstAllDistinctExpressionOrStar1 : AstAllDistinctExpressionOrStar
        {
            
            internal AstAllDistinctExpressionOrStar1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllDistinctExpressionOrStar(this);
            }
        }
        /// <summary>
        /// all_distinct_expression_or_star : all_distinct_expression 
        /// </summary>
        public partial class AstAllDistinctExpressionOrStar2 : AstAllDistinctExpressionOrStar
        {
            
            private AstAllDistinctExpression _allDistinctExpression;
            
            internal AstAllDistinctExpressionOrStar2(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression) : 
                    base(ctx)
            {
                _allDistinctExpression = allDistinctExpression;
            }
            
            public virtual AstAllDistinctExpression AllDistinctExpression
            {
                get
                {
                    return _allDistinctExpression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllDistinctExpressionOrStar(this);
            }
        }
        

        
        internal AstAllDistinctExpressionOrStar(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAllDistinctExpressionOrStar(Position p) : 
                base(p)
        {
        }
        
        internal AstAllDistinctExpressionOrStar(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAllDistinctExpressionOrStar Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAllDistinctExpressionOrStar.Resolve(list);
            if ((index == 1))
            {
                return new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar1(ctx);
            }
            if ((index == 2))
            {
                return new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar2(ctx, ((AstAllDistinctExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstAllDistinctExpression), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// all_distinct_expression_or_star : 
        ///    STAR 
        /// </summary>
        public static AstAllDistinctExpressionOrStar AllDistinctExpressionOrStar(ParserRuleContext ctx)
        {
            AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar1 result = new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar1(ctx);
            return result;
        }
        
        /// <summary>
        /// all_distinct_expression_or_star : 
        ///    all_distinct_expression 
        /// </summary>
        public static AstAllDistinctExpressionOrStar AllDistinctExpressionOrStar(ParserRuleContext ctx, AstAllDistinctExpression allDistinctExpression)
        {
            AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar2 result = new AstAllDistinctExpressionOrStar.AstAllDistinctExpressionOrStar2(ctx, allDistinctExpression);
            return result;
        }
    }
    
    /// <summary>
    /// analytic_windowed_function
    /// 	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
    /// 	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
    /// 	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
    /// 	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
    /// </summary>
    public abstract partial class AstAnalyticWindowedFunction : AstBnfRule
    {
        
        protected static string _rule = @"analytic_windowed_function
	 : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause
	 | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause
	 | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET
	 | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET";
        
        /// <summary>
        /// analytic_windowed_function : first_last_value LR_BRACKET expression RR_BRACKET over_clause 
        /// </summary>
        public partial class AstAnalyticWindowedFunction1 : AstAnalyticWindowedFunction
        {
            
            private AstFirstLastValue _firstLastValue;
            
            private AstExpression _expression;
            
            private AstOverClause _overClause;
            
            internal AstAnalyticWindowedFunction1(ParserRuleContext ctx, AstFirstLastValue firstLastValue, AstExpression expression, AstOverClause overClause) : 
                    base(ctx)
            {
                _firstLastValue = firstLastValue;
                _expression = expression;
                _overClause = overClause;
            }
            
            public virtual AstFirstLastValue FirstLastValue
            {
                get
                {
                    return _firstLastValue;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : lag_lead LR_BRACKET expression COMMA expression2 RR_BRACKET over_clause 
        /// </summary>
        public partial class AstAnalyticWindowedFunction2 : AstAnalyticWindowedFunction
        {
            
            private AstLagLead _lagLead;
            
            private AstExpression _expression;
            
            private AstExpression2 _expression2;
            
            private AstOverClause _overClause;
            
            internal AstAnalyticWindowedFunction2(ParserRuleContext ctx, AstLagLead lagLead, AstExpression expression, AstExpression2 expression2, AstOverClause overClause) : 
                    base(ctx)
            {
                _lagLead = lagLead;
                _expression = expression;
                _expression2 = expression2;
                _overClause = overClause;
            }
            
            public virtual AstLagLead LagLead
            {
                get
                {
                    return _lagLead;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstExpression2 Expression2
            {
                get
                {
                    return _expression2;
                }
            }
            
            public virtual AstOverClause OverClause
            {
                get
                {
                    return _overClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : cume_percent LR_BRACKET RR_BRACKET OVER LR_BRACKET PARTITION BY expression_list order_by_clause RR_BRACKET 
        /// </summary>
        public partial class AstAnalyticWindowedFunction3 : AstAnalyticWindowedFunction
        {
            
            private AstCumePercent _cumePercent;
            
            private AstExpressionList _expressionList;
            
            private AstOrderByClause _orderByClause;
            
            internal AstAnalyticWindowedFunction3(ParserRuleContext ctx, AstCumePercent cumePercent, AstExpressionList expressionList, AstOrderByClause orderByClause) : 
                    base(ctx)
            {
                _cumePercent = cumePercent;
                _expressionList = expressionList;
                _orderByClause = orderByClause;
            }
            
            public virtual AstCumePercent CumePercent
            {
                get
                {
                    return _cumePercent;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        /// <summary>
        /// analytic_windowed_function : percentil LR_BRACKET expression RR_BRACKET WITHIN GROUP LR_BRACKET order_by_clause RR_BRACKET OVER LR_BRACKET PARTITION BY expression_list RR_BRACKET 
        /// </summary>
        public partial class AstAnalyticWindowedFunction4 : AstAnalyticWindowedFunction
        {
            
            private AstPercentil _percentil;
            
            private AstExpression _expression;
            
            private AstOrderByClause _orderByClause;
            
            private AstExpressionList _expressionList;
            
            internal AstAnalyticWindowedFunction4(ParserRuleContext ctx, AstPercentil percentil, AstExpression expression, AstOrderByClause orderByClause, AstExpressionList expressionList) : 
                    base(ctx)
            {
                _percentil = percentil;
                _expression = expression;
                _orderByClause = orderByClause;
                _expressionList = expressionList;
            }
            
            public virtual AstPercentil Percentil
            {
                get
                {
                    return _percentil;
                }
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public virtual AstOrderByClause OrderByClause
            {
                get
                {
                    return _orderByClause;
                }
            }
            
            public virtual AstExpressionList ExpressionList
            {
                get
                {
                    return _expressionList;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAnalyticWindowedFunction(this);
            }
        }
        

        
        internal AstAnalyticWindowedFunction(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAnalyticWindowedFunction(Position p) : 
                base(p)
        {
        }
        
        internal AstAnalyticWindowedFunction(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAnalyticWindowedFunction Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAnalyticWindowedFunction.Resolve(list);
            if ((index == 4))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1(ctx, ((AstFirstLastValue)(list[0])), ((AstExpression)(list[1])), ((AstOverClause)(list[2])));
            }
            if ((index == 5))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2(ctx, ((AstLagLead)(list[0])), ((AstExpression)(list[1])), ((AstExpression2)(list[2])), ((AstOverClause)(list[3])));
            }
            if ((index == 4))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3(ctx, ((AstCumePercent)(list[0])), ((AstExpressionList)(list[1])), ((AstOrderByClause)(list[2])));
            }
            if ((index == 5))
            {
                return new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4(ctx, ((AstPercentil)(list[0])), ((AstExpression)(list[1])), ((AstOrderByClause)(list[2])), ((AstExpressionList)(list[3])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 4))
            {
                if (AstRoot.Eval(list[0], typeof(AstLagLead), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstExpression2), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstOverClause), false, false))
                            {
                                return 2;
                            }
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstPercentil), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOrderByClause), false, false))
                        {
                            if (AstRoot.Eval(list[3], typeof(AstExpressionList), false, false))
                            {
                                return 4;
                            }
                        }
                    }
                }
            }
            if ((list.Count == 3))
            {
                if (AstRoot.Eval(list[0], typeof(AstFirstLastValue), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpression), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOverClause), false, false))
                        {
                            return 1;
                        }
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstCumePercent), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstExpressionList), false, false))
                    {
                        if (AstRoot.Eval(list[2], typeof(AstOrderByClause), false, false))
                        {
                            return 3;
                        }
                    }
                }
            }
            return 0;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    first_last_value ( expression ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstFirstLastValue firstLastValue, AstExpression expression, AstOverClause overClause)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction1(ctx, firstLastValue, expression, overClause);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    lag_lead ( expression , expression2 ) over_clause 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstLagLead lagLead, AstExpression expression, AstExpression2 expression2, AstOverClause overClause)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction2(ctx, lagLead, expression, expression2, overClause);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    cume_percent ( ) OVER ( PARTITION BY expression_list order_by_clause ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstCumePercent cumePercent, AstExpressionList expressionList, AstOrderByClause orderByClause)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction3(ctx, cumePercent, expressionList, orderByClause);
            return result;
        }
        
        /// <summary>
        /// analytic_windowed_function : 
        ///    percentil ( expression ) WITHIN GROUP ( order_by_clause ) OVER ( PARTITION BY expression_list ) 
        /// </summary>
        public static AstAnalyticWindowedFunction AnalyticWindowedFunction(ParserRuleContext ctx, AstPercentil percentil, AstExpression expression, AstOrderByClause orderByClause, AstExpressionList expressionList)
        {
            AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4 result = new AstAnalyticWindowedFunction.AstAnalyticWindowedFunction4(ctx, percentil, expression, orderByClause, expressionList);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_extent
    /// 	 : window_frame_preceding
    /// 	 | BETWEEN  left = window_frame_bound  AND  right = window_frame_bound
    /// </summary>
    public abstract partial class AstWindowFrameExtent : AstBnfRule
    {
        
        protected static string _rule = "window_frame_extent\r\n\t : window_frame_preceding\r\n\t | BETWEEN  left = window_frame" +
            "_bound  AND  right = window_frame_bound";
        
        /// <summary>
        /// window_frame_extent : window_frame_preceding 
        /// </summary>
        public partial class AstWindowFrameExtent1 : AstWindowFrameExtent
        {
            
            private AstWindowFramePreceding _windowFramePreceding;
            
            internal AstWindowFrameExtent1(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding) : 
                    base(ctx)
            {
                _windowFramePreceding = windowFramePreceding;
            }
            
            public virtual AstWindowFramePreceding WindowFramePreceding
            {
                get
                {
                    return _windowFramePreceding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameExtent(this);
            }
        }
        /// <summary>
        /// window_frame_extent : BETWEEN left=window_frame_bound AND right=window_frame_bound 
        /// </summary>
        public partial class AstWindowFrameExtent2 : AstWindowFrameExtent
        {
            
            private AstWindowFrameBound _left;
            
            private AstWindowFrameBound _right;
            
            internal AstWindowFrameExtent2(ParserRuleContext ctx, AstWindowFrameBound left, AstWindowFrameBound right) : 
                    base(ctx)
            {
                _left = left;
                _right = right;
            }
            
            public virtual AstWindowFrameBound Left
            {
                get
                {
                    return _left;
                }
            }
            
            public virtual AstWindowFrameBound Right
            {
                get
                {
                    return _right;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameExtent(this);
            }
        }
        

        
        internal AstWindowFrameExtent(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameExtent(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameExtent(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFrameExtent Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFrameExtent.Resolve(list);
            if ((index == 2))
            {
                return new AstWindowFrameExtent.AstWindowFrameExtent1(ctx, ((AstWindowFramePreceding)(list[0])));
            }
            if ((index == 3))
            {
                return new AstWindowFrameExtent.AstWindowFrameExtent2(ctx, ((AstWindowFrameBound)(list[0])), ((AstWindowFrameBound)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowFrameBound), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstWindowFrameBound), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowFramePreceding), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_extent : 
        ///    window_frame_preceding 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding)
        {
            AstWindowFrameExtent.AstWindowFrameExtent1 result = new AstWindowFrameExtent.AstWindowFrameExtent1(ctx, windowFramePreceding);
            return result;
        }
        
        /// <summary>
        /// window_frame_extent : 
        ///    BETWEEN left=window_frame_bound AND right=window_frame_bound 
        /// </summary>
        public static AstWindowFrameExtent WindowFrameExtent(ParserRuleContext ctx, AstWindowFrameBound left, AstWindowFrameBound right)
        {
            AstWindowFrameExtent.AstWindowFrameExtent2 result = new AstWindowFrameExtent.AstWindowFrameExtent2(ctx, left, right);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_bound
    /// 	 : window_frame_preceding
    /// 	 | window_frame_following
    /// </summary>
    public abstract partial class AstWindowFrameBound : AstBnfRule
    {
        
        protected static string _rule = "window_frame_bound\r\n\t : window_frame_preceding\r\n\t | window_frame_following";
        
        /// <summary>
        /// window_frame_bound : window_frame_preceding 
        /// </summary>
        public partial class AstWindowFrameBound1 : AstWindowFrameBound
        {
            
            private AstWindowFramePreceding _windowFramePreceding;
            
            internal AstWindowFrameBound1(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding) : 
                    base(ctx)
            {
                _windowFramePreceding = windowFramePreceding;
            }
            
            public virtual AstWindowFramePreceding WindowFramePreceding
            {
                get
                {
                    return _windowFramePreceding;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameBound(this);
            }
        }
        /// <summary>
        /// window_frame_bound : window_frame_following 
        /// </summary>
        public partial class AstWindowFrameBound2 : AstWindowFrameBound
        {
            
            private AstWindowFrameFollowing _windowFrameFollowing;
            
            internal AstWindowFrameBound2(ParserRuleContext ctx, AstWindowFrameFollowing windowFrameFollowing) : 
                    base(ctx)
            {
                _windowFrameFollowing = windowFrameFollowing;
            }
            
            public virtual AstWindowFrameFollowing WindowFrameFollowing
            {
                get
                {
                    return _windowFrameFollowing;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameBound(this);
            }
        }
        

        
        internal AstWindowFrameBound(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameBound(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameBound(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFrameBound Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFrameBound.Resolve(list);
            if ((index == 2))
            {
                return new AstWindowFrameBound.AstWindowFrameBound1(ctx, ((AstWindowFramePreceding)(list[0])));
            }
            if ((index == 2))
            {
                return new AstWindowFrameBound.AstWindowFrameBound2(ctx, ((AstWindowFrameFollowing)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstWindowFramePreceding), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstWindowFrameFollowing), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_bound : 
        ///    window_frame_preceding 
        /// </summary>
        public static AstWindowFrameBound WindowFrameBound(ParserRuleContext ctx, AstWindowFramePreceding windowFramePreceding)
        {
            AstWindowFrameBound.AstWindowFrameBound1 result = new AstWindowFrameBound.AstWindowFrameBound1(ctx, windowFramePreceding);
            return result;
        }
        
        /// <summary>
        /// window_frame_bound : 
        ///    window_frame_following 
        /// </summary>
        public static AstWindowFrameBound WindowFrameBound(ParserRuleContext ctx, AstWindowFrameFollowing windowFrameFollowing)
        {
            AstWindowFrameBound.AstWindowFrameBound2 result = new AstWindowFrameBound.AstWindowFrameBound2(ctx, windowFrameFollowing);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_preceding
    /// 	 : UNBOUNDED  PRECEDING
    /// 	 | decimal  PRECEDING
    /// 	 | CURRENT  ROW
    /// </summary>
    public abstract partial class AstWindowFramePreceding : AstBnfRule
    {
        
        protected static string _rule = "window_frame_preceding\r\n\t : UNBOUNDED  PRECEDING\r\n\t | decimal  PRECEDING\r\n\t | CUR" +
            "RENT  ROW";
        
        /// <summary>
        /// window_frame_preceding : UNBOUNDED PRECEDING 
        /// </summary>
        public partial class AstWindowFramePreceding1 : AstWindowFramePreceding
        {
            
            internal AstWindowFramePreceding1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        /// <summary>
        /// window_frame_preceding : decimal PRECEDING 
        /// </summary>
        public partial class AstWindowFramePreceding2 : AstWindowFramePreceding
        {
            
            private AstDecimal _decimal;
            
            internal AstWindowFramePreceding2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        /// <summary>
        /// window_frame_preceding : CURRENT ROW 
        /// </summary>
        public partial class AstWindowFramePreceding3 : AstWindowFramePreceding
        {
            
            internal AstWindowFramePreceding3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFramePreceding(this);
            }
        }
        

        
        internal AstWindowFramePreceding(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFramePreceding(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFramePreceding(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFramePreceding Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFramePreceding.Resolve(list);
            if ((index == 1))
            {
                return new AstWindowFramePreceding.AstWindowFramePreceding1(ctx);
            }
            if ((index == 2))
            {
                return new AstWindowFramePreceding.AstWindowFramePreceding2(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstWindowFramePreceding.AstWindowFramePreceding3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_preceding : 
        ///    UNBOUNDED PRECEDING 
        /// </summary>
        public static AstWindowFramePreceding WindowFramePreceding(ParserRuleContext ctx)
        {
            AstWindowFramePreceding.AstWindowFramePreceding1 result = new AstWindowFramePreceding.AstWindowFramePreceding1(ctx);
            return result;
        }
        
        /// <summary>
        /// window_frame_preceding : 
        ///    decimal PRECEDING 
        /// </summary>
        public static AstWindowFramePreceding WindowFramePreceding(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstWindowFramePreceding.AstWindowFramePreceding2 result = new AstWindowFramePreceding.AstWindowFramePreceding2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// window_frame_following
    /// 	 : UNBOUNDED  FOLLOWING
    /// 	 | decimal  FOLLOWING
    /// </summary>
    public abstract partial class AstWindowFrameFollowing : AstBnfRule
    {
        
        protected static string _rule = "window_frame_following\r\n\t : UNBOUNDED  FOLLOWING\r\n\t | decimal  FOLLOWING";
        
        /// <summary>
        /// window_frame_following : UNBOUNDED FOLLOWING 
        /// </summary>
        public partial class AstWindowFrameFollowing1 : AstWindowFrameFollowing
        {
            
            internal AstWindowFrameFollowing1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameFollowing(this);
            }
        }
        /// <summary>
        /// window_frame_following : decimal FOLLOWING 
        /// </summary>
        public partial class AstWindowFrameFollowing2 : AstWindowFrameFollowing
        {
            
            private AstDecimal _decimal;
            
            internal AstWindowFrameFollowing2(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitWindowFrameFollowing(this);
            }
        }
        

        
        internal AstWindowFrameFollowing(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstWindowFrameFollowing(Position p) : 
                base(p)
        {
        }
        
        internal AstWindowFrameFollowing(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstWindowFrameFollowing Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstWindowFrameFollowing.Resolve(list);
            if ((index == 1))
            {
                return new AstWindowFrameFollowing.AstWindowFrameFollowing1(ctx);
            }
            if ((index == 2))
            {
                return new AstWindowFrameFollowing.AstWindowFrameFollowing2(ctx, ((AstDecimal)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// window_frame_following : 
        ///    UNBOUNDED FOLLOWING 
        /// </summary>
        public static AstWindowFrameFollowing WindowFrameFollowing(ParserRuleContext ctx)
        {
            AstWindowFrameFollowing.AstWindowFrameFollowing1 result = new AstWindowFrameFollowing.AstWindowFrameFollowing1(ctx);
            return result;
        }
        
        /// <summary>
        /// window_frame_following : 
        ///    decimal FOLLOWING 
        /// </summary>
        public static AstWindowFrameFollowing WindowFrameFollowing(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstWindowFrameFollowing.AstWindowFrameFollowing2 result = new AstWindowFrameFollowing.AstWindowFrameFollowing2(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// create_database_option
    /// 	 : FILESTREAM  database_filestream_options
    /// 	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
    /// 	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
    /// 	 | NESTED_TRIGGERS  EQUAL  on_off
    /// 	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// 	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// 	 | DB_CHAINING  on_off
    /// 	 | TRUSTWORTHY  on_off
    /// </summary>
    public abstract partial class AstCreateDatabaseOption : AstBnfRule
    {
        
        protected static string _rule = @"create_database_option
	 : FILESTREAM  database_filestream_options
	 | DEFAULT_LANGUAGE  EQUAL  id_or_string
	 | DEFAULT_FULLTEXT_LANGUAGE  EQUAL  id_or_string
	 | NESTED_TRIGGERS  EQUAL  on_off
	 | TRANSFORM_NOISE_WORDS  EQUAL  on_off
	 | TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
	 | DB_CHAINING  on_off
	 | TRUSTWORTHY  on_off";
        
        /// <summary>
        /// create_database_option : FILESTREAM database_filestream_options 
        /// </summary>
        public partial class AstCreateDatabaseOption1 : AstCreateDatabaseOption
        {
            
            private AstDatabaseFilestreamOptions _databaseFilestreamOptions;
            
            internal AstCreateDatabaseOption1(ParserRuleContext ctx, AstDatabaseFilestreamOptions databaseFilestreamOptions) : 
                    base(ctx)
            {
                _databaseFilestreamOptions = databaseFilestreamOptions;
            }
            
            public virtual AstDatabaseFilestreamOptions DatabaseFilestreamOptions
            {
                get
                {
                    return _databaseFilestreamOptions;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public partial class AstCreateDatabaseOption2 : AstCreateDatabaseOption
        {
            
            private AstIdOrString _idOrString;
            
            internal AstCreateDatabaseOption2(ParserRuleContext ctx, AstIdOrString idOrString) : 
                    base(ctx)
            {
                _idOrString = idOrString;
            }
            
            public virtual AstIdOrString IdOrString
            {
                get
                {
                    return _idOrString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DEFAULT_FULLTEXT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public partial class AstCreateDatabaseOption3 : AstCreateDatabaseOption
        {
            
            private AstIdOrString _idOrString;
            
            internal AstCreateDatabaseOption3(ParserRuleContext ctx, AstIdOrString idOrString) : 
                    base(ctx)
            {
                _idOrString = idOrString;
            }
            
            public virtual AstIdOrString IdOrString
            {
                get
                {
                    return _idOrString;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption4 : AstCreateDatabaseOption
        {
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption4(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TRANSFORM_NOISE_WORDS EQUAL on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption5 : AstCreateDatabaseOption
        {
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption5(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public partial class AstCreateDatabaseOption6 : AstCreateDatabaseOption
        {
            
            private AstDecimal _decimal;
            
            internal AstCreateDatabaseOption6(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : DB_CHAINING on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption7 : AstCreateDatabaseOption
        {
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption7(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        /// <summary>
        /// create_database_option : TRUSTWORTHY on_off 
        /// </summary>
        public partial class AstCreateDatabaseOption8 : AstCreateDatabaseOption
        {
            
            private AstOnOff _onOff;
            
            internal AstCreateDatabaseOption8(ParserRuleContext ctx, AstOnOff onOff) : 
                    base(ctx)
            {
                _onOff = onOff;
            }
            
            public virtual AstOnOff OnOff
            {
                get
                {
                    return _onOff;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitCreateDatabaseOption(this);
            }
        }
        

        
        internal AstCreateDatabaseOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstCreateDatabaseOption(Position p) : 
                base(p)
        {
        }
        
        internal AstCreateDatabaseOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstCreateDatabaseOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstCreateDatabaseOption.Resolve(list);
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption1(ctx, ((AstDatabaseFilestreamOptions)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption2(ctx, ((AstIdOrString)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption3(ctx, ((AstIdOrString)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption4(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption5(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption6(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption7(ctx, ((AstOnOff)(list[0])));
            }
            if ((index == 2))
            {
                return new AstCreateDatabaseOption.AstCreateDatabaseOption8(ctx, ((AstOnOff)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDatabaseFilestreamOptions), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstIdOrString), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstIdOrString), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 4;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 5;
                }
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 6;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 7;
                }
                if (AstRoot.Eval(list[0], typeof(AstOnOff), false, false))
                {
                    return 8;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    FILESTREAM database_filestream_options 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstDatabaseFilestreamOptions databaseFilestreamOptions)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption1 result = new AstCreateDatabaseOption.AstCreateDatabaseOption1(ctx, databaseFilestreamOptions);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    DEFAULT_LANGUAGE EQUAL id_or_string 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstIdOrString idOrString)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption2 result = new AstCreateDatabaseOption.AstCreateDatabaseOption2(ctx, idOrString);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstOnOff onOff)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption4 result = new AstCreateDatabaseOption.AstCreateDatabaseOption4(ctx, onOff);
            return result;
        }
        
        /// <summary>
        /// create_database_option : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstCreateDatabaseOption CreateDatabaseOption(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstCreateDatabaseOption.AstCreateDatabaseOption6 result = new AstCreateDatabaseOption.AstCreateDatabaseOption6(ctx, @decimal);
            return result;
        }
    }
    
    /// <summary>
    /// database_filestream_option
    /// 	 : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET
    /// </summary>
    public abstract partial class AstDatabaseFilestreamOption : AstBnfRule
    {
        
        protected static string _rule = "database_filestream_option\r\n\t : LR_BRACKET  ((NON_TRANSACTED_ACCESS  EQUAL  off_r" +
            "ead_only_full) | (DIRECTORY_NAME  EQUAL  stringtext))  RR_BRACKET";
        
        /// <summary>
        /// database_filestream_option : LR_BRACKET NON_TRANSACTED_ACCESS EQUAL off_read_only_full RR_BRACKET 
        /// </summary>
        public partial class AstDatabaseFilestreamOption1 : AstDatabaseFilestreamOption
        {
            
            private AstOffReadOnlyFull _offReadOnlyFull;
            
            internal AstDatabaseFilestreamOption1(ParserRuleContext ctx, AstOffReadOnlyFull offReadOnlyFull) : 
                    base(ctx)
            {
                _offReadOnlyFull = offReadOnlyFull;
            }
            
            public virtual AstOffReadOnlyFull OffReadOnlyFull
            {
                get
                {
                    return _offReadOnlyFull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFilestreamOption(this);
            }
        }
        /// <summary>
        /// database_filestream_option : LR_BRACKET DIRECTORY_NAME EQUAL stringtext RR_BRACKET 
        /// </summary>
        public partial class AstDatabaseFilestreamOption2 : AstDatabaseFilestreamOption
        {
            
            private AstStringtext _stringtext;
            
            internal AstDatabaseFilestreamOption2(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFilestreamOption(this);
            }
        }
        

        
        internal AstDatabaseFilestreamOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseFilestreamOption(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseFilestreamOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDatabaseFilestreamOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDatabaseFilestreamOption.Resolve(list);
            if ((index == 2))
            {
                return new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption1(ctx, ((AstOffReadOnlyFull)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption2(ctx, ((AstStringtext)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstOffReadOnlyFull), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// database_filestream_option : 
        ///    ( NON_TRANSACTED_ACCESS EQUAL off_read_only_full ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(ParserRuleContext ctx, AstOffReadOnlyFull offReadOnlyFull)
        {
            AstDatabaseFilestreamOption.AstDatabaseFilestreamOption1 result = new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption1(ctx, offReadOnlyFull);
            return result;
        }
        
        /// <summary>
        /// database_filestream_option : 
        ///    ( DIRECTORY_NAME EQUAL stringtext ) 
        /// </summary>
        public static AstDatabaseFilestreamOption DatabaseFilestreamOption(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstDatabaseFilestreamOption.AstDatabaseFilestreamOption2 result = new AstDatabaseFilestreamOption.AstDatabaseFilestreamOption2(ctx, stringtext);
            return result;
        }
    }
    
    /// <summary>
    /// database_file_spec
    /// 	 : file_group
    /// 	 | file_spec
    /// </summary>
    public abstract partial class AstDatabaseFileSpec : AstBnfRule
    {
        
        protected static string _rule = "database_file_spec\r\n\t : file_group\r\n\t | file_spec";
        
        /// <summary>
        /// database_file_spec : file_group 
        /// </summary>
        public partial class AstDatabaseFileSpec1 : AstDatabaseFileSpec
        {
            
            private AstFileGroup _fileGroup;
            
            internal AstDatabaseFileSpec1(ParserRuleContext ctx, AstFileGroup fileGroup) : 
                    base(ctx)
            {
                _fileGroup = fileGroup;
            }
            
            public virtual AstFileGroup FileGroup
            {
                get
                {
                    return _fileGroup;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFileSpec(this);
            }
        }
        /// <summary>
        /// database_file_spec : file_spec 
        /// </summary>
        public partial class AstDatabaseFileSpec2 : AstDatabaseFileSpec
        {
            
            private AstFileSpec _fileSpec;
            
            internal AstDatabaseFileSpec2(ParserRuleContext ctx, AstFileSpec fileSpec) : 
                    base(ctx)
            {
                _fileSpec = fileSpec;
            }
            
            public virtual AstFileSpec FileSpec
            {
                get
                {
                    return _fileSpec;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDatabaseFileSpec(this);
            }
        }
        

        
        internal AstDatabaseFileSpec(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDatabaseFileSpec(Position p) : 
                base(p)
        {
        }
        
        internal AstDatabaseFileSpec(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDatabaseFileSpec Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDatabaseFileSpec.Resolve(list);
            if ((index == 2))
            {
                return new AstDatabaseFileSpec.AstDatabaseFileSpec1(ctx, ((AstFileGroup)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDatabaseFileSpec.AstDatabaseFileSpec2(ctx, ((AstFileSpec)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileGroup), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFileSpec), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// database_file_spec : 
        ///    file_group 
        /// </summary>
        public static AstDatabaseFileSpec DatabaseFileSpec(ParserRuleContext ctx, AstFileGroup fileGroup)
        {
            AstDatabaseFileSpec.AstDatabaseFileSpec1 result = new AstDatabaseFileSpec.AstDatabaseFileSpec1(ctx, fileGroup);
            return result;
        }
        
        /// <summary>
        /// database_file_spec : 
        ///    file_spec 
        /// </summary>
        public static AstDatabaseFileSpec DatabaseFileSpec(ParserRuleContext ctx, AstFileSpec fileSpec)
        {
            AstDatabaseFileSpec.AstDatabaseFileSpec2 result = new AstDatabaseFileSpec.AstDatabaseFileSpec2(ctx, fileSpec);
            return result;
        }
    }
    
    /// <summary>
    /// max_file_size_value
    /// 	 : file_size
    /// 	 | UNLIMITED
    /// </summary>
    public abstract partial class AstMaxFileSizeValue : AstBnfRule
    {
        
        protected static string _rule = "max_file_size_value\r\n\t : file_size\r\n\t | UNLIMITED";
        
        /// <summary>
        /// max_file_size_value : file_size 
        /// </summary>
        public partial class AstMaxFileSizeValue1 : AstMaxFileSizeValue
        {
            
            private AstFileSize _fileSize;
            
            internal AstMaxFileSizeValue1(ParserRuleContext ctx, AstFileSize fileSize) : 
                    base(ctx)
            {
                _fileSize = fileSize;
            }
            
            public virtual AstFileSize FileSize
            {
                get
                {
                    return _fileSize;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMaxFileSizeValue(this);
            }
        }
        /// <summary>
        /// max_file_size_value : UNLIMITED 
        /// </summary>
        public partial class AstMaxFileSizeValue2 : AstMaxFileSizeValue
        {
            
            internal AstMaxFileSizeValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitMaxFileSizeValue(this);
            }
        }
        

        
        internal AstMaxFileSizeValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstMaxFileSizeValue(Position p) : 
                base(p)
        {
        }
        
        internal AstMaxFileSizeValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstMaxFileSizeValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstMaxFileSizeValue.Resolve(list);
            if ((index == 2))
            {
                return new AstMaxFileSizeValue.AstMaxFileSizeValue1(ctx, ((AstFileSize)(list[0])));
            }
            if ((index == 1))
            {
                return new AstMaxFileSizeValue.AstMaxFileSizeValue2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFileSize), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// max_file_size_value : 
        ///    file_size 
        /// </summary>
        public static AstMaxFileSizeValue MaxFileSizeValue(ParserRuleContext ctx, AstFileSize fileSize)
        {
            AstMaxFileSizeValue.AstMaxFileSizeValue1 result = new AstMaxFileSizeValue.AstMaxFileSizeValue1(ctx, fileSize);
            return result;
        }
        
        /// <summary>
        /// max_file_size_value : 
        ///    UNLIMITED 
        /// </summary>
        public static AstMaxFileSizeValue MaxFileSizeValue(ParserRuleContext ctx)
        {
            AstMaxFileSizeValue.AstMaxFileSizeValue2 result = new AstMaxFileSizeValue.AstMaxFileSizeValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// null_or_default
    /// 	 : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)
    /// </summary>
    public abstract partial class AstNullOrDefault : AstBnfRule
    {
        
        protected static string _rule = "null_or_default\r\n\t : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)" +
            "?  (WITH  VALUES)?)";
        
        /// <summary>
        /// null_or_default : null_notnull 
        /// </summary>
        public partial class AstNullOrDefault1 : AstNullOrDefault
        {
            
            private AstNullNotnull _nullNotnull;
            
            internal AstNullOrDefault1(ParserRuleContext ctx, AstNullNotnull nullNotnull) : 
                    base(ctx)
            {
                _nullNotnull = nullNotnull;
            }
            
            public virtual AstNullNotnull NullNotnull
            {
                get
                {
                    return _nullNotnull;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNullOrDefault(this);
            }
        }
        /// <summary>
        /// null_or_default : DEFAULT constant_expression COLLATE id_ WITH VALUES 
        /// </summary>
        public partial class AstNullOrDefault2 : AstNullOrDefault
        {
            
            private AstConstantExpression _constantExpression;
            
            private AstId _id;
            
            internal AstNullOrDefault2(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id) : 
                    base(ctx)
            {
                _constantExpression = constantExpression;
                _id = id;
            }
            
            public virtual AstConstantExpression ConstantExpression
            {
                get
                {
                    return _constantExpression;
                }
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitNullOrDefault(this);
            }
        }
        

        
        internal AstNullOrDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstNullOrDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstNullOrDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstNullOrDefault Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstNullOrDefault.Resolve(list);
            if ((index == 2))
            {
                return new AstNullOrDefault.AstNullOrDefault1(ctx, ((AstNullNotnull)(list[0])));
            }
            if ((index == 3))
            {
                return new AstNullOrDefault.AstNullOrDefault2(ctx, ((AstConstantExpression)(list[0])), ((AstId)(list[1])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstantExpression), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstId), false, false))
                    {
                        return 2;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstNullNotnull), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// null_or_default : 
        ///    null_notnull 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(ParserRuleContext ctx, AstNullNotnull nullNotnull)
        {
            AstNullOrDefault.AstNullOrDefault1 result = new AstNullOrDefault.AstNullOrDefault1(ctx, nullNotnull);
            return result;
        }
        
        /// <summary>
        /// null_or_default : 
        ///    DEFAULT constant_expression COLLATE id_ WITH VALUES 
        /// </summary>
        public static AstNullOrDefault NullOrDefault(ParserRuleContext ctx, AstConstantExpression constantExpression, AstId id)
        {
            AstNullOrDefault.AstNullOrDefault2 result = new AstNullOrDefault.AstNullOrDefault2(ctx, constantExpression, id);
            return result;
        }
    }
    
    /// <summary>
    /// scalar_function_name
    /// 	 : func_proc_name_server_database_schema
    /// 	 | scalar_function_name_enum
    /// </summary>
    public abstract partial class AstScalarFunctionName : AstBnfRule
    {
        
        protected static string _rule = "scalar_function_name\r\n\t : func_proc_name_server_database_schema\r\n\t | scalar_funct" +
            "ion_name_enum";
        
        /// <summary>
        /// scalar_function_name : func_proc_name_server_database_schema 
        /// </summary>
        public partial class AstScalarFunctionName1 : AstScalarFunctionName
        {
            
            private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
            
            internal AstScalarFunctionName1(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema) : 
                    base(ctx)
            {
                _funcProcNameServerDatabaseSchema = funcProcNameServerDatabaseSchema;
            }
            
            public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
            {
                get
                {
                    return _funcProcNameServerDatabaseSchema;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitScalarFunctionName(this);
            }
        }
        /// <summary>
        /// scalar_function_name : scalar_function_name_enum 
        /// </summary>
        public partial class AstScalarFunctionName2 : AstScalarFunctionName
        {
            
            private AstScalarFunctionNameEnum _scalarFunctionNameEnum;
            
            internal AstScalarFunctionName2(ParserRuleContext ctx, AstScalarFunctionNameEnum scalarFunctionNameEnum) : 
                    base(ctx)
            {
                _scalarFunctionNameEnum = scalarFunctionNameEnum;
            }
            
            public virtual AstScalarFunctionNameEnum ScalarFunctionNameEnum
            {
                get
                {
                    return _scalarFunctionNameEnum;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitScalarFunctionName(this);
            }
        }
        

        
        internal AstScalarFunctionName(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstScalarFunctionName(Position p) : 
                base(p)
        {
        }
        
        internal AstScalarFunctionName(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstScalarFunctionName Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstScalarFunctionName.Resolve(list);
            if ((index == 2))
            {
                return new AstScalarFunctionName.AstScalarFunctionName1(ctx, ((AstFuncProcNameServerDatabaseSchema)(list[0])));
            }
            if ((index == 2))
            {
                return new AstScalarFunctionName.AstScalarFunctionName2(ctx, ((AstScalarFunctionNameEnum)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstFuncProcNameServerDatabaseSchema), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstScalarFunctionNameEnum), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// scalar_function_name : 
        ///    func_proc_name_server_database_schema 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(ParserRuleContext ctx, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema)
        {
            AstScalarFunctionName.AstScalarFunctionName1 result = new AstScalarFunctionName.AstScalarFunctionName1(ctx, funcProcNameServerDatabaseSchema);
            return result;
        }
        
        /// <summary>
        /// scalar_function_name : 
        ///    scalar_function_name_enum 
        /// </summary>
        public static AstScalarFunctionName ScalarFunctionName(ParserRuleContext ctx, AstScalarFunctionNameEnum scalarFunctionNameEnum)
        {
            AstScalarFunctionName.AstScalarFunctionName2 result = new AstScalarFunctionName.AstScalarFunctionName2(ctx, scalarFunctionNameEnum);
            return result;
        }
    }
    
    /// <summary>
    /// contract_name_expression
    /// 	 : id_
    /// 	 | expression
    /// </summary>
    public abstract partial class AstContractNameExpression : AstBnfRule
    {
        
        protected static string _rule = "contract_name_expression\r\n\t : id_\r\n\t | expression";
        
        /// <summary>
        /// contract_name_expression : id_ 
        /// </summary>
        public partial class AstContractNameExpression1 : AstContractNameExpression
        {
            
            private AstId _id;
            
            internal AstContractNameExpression1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractNameExpression(this);
            }
        }
        /// <summary>
        /// contract_name_expression : expression 
        /// </summary>
        public partial class AstContractNameExpression2 : AstContractNameExpression
        {
            
            private AstExpression _expression;
            
            internal AstContractNameExpression2(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitContractNameExpression(this);
            }
        }
        

        
        internal AstContractNameExpression(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstContractNameExpression(Position p) : 
                base(p)
        {
        }
        
        internal AstContractNameExpression(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstContractNameExpression Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstContractNameExpression.Resolve(list);
            if ((index == 2))
            {
                return new AstContractNameExpression.AstContractNameExpression1(ctx, ((AstId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstContractNameExpression.AstContractNameExpression2(ctx, ((AstExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// contract_name_expression : 
        ///    id_ 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(ParserRuleContext ctx, AstId id)
        {
            AstContractNameExpression.AstContractNameExpression1 result = new AstContractNameExpression.AstContractNameExpression1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// contract_name_expression : 
        ///    expression 
        /// </summary>
        public static AstContractNameExpression ContractNameExpression(ParserRuleContext ctx, AstExpression expression)
        {
            AstContractNameExpression.AstContractNameExpression2 result = new AstContractNameExpression.AstContractNameExpression2(ctx, expression);
            return result;
        }
    }
    
    /// <summary>
    /// service_name_expr
    /// 	 : id_
    /// 	 | expression
    /// </summary>
    public abstract partial class AstServiceNameExpr : AstBnfRule
    {
        
        protected static string _rule = "service_name_expr\r\n\t : id_\r\n\t | expression";
        
        /// <summary>
        /// service_name_expr : id_ 
        /// </summary>
        public partial class AstServiceNameExpr1 : AstServiceNameExpr
        {
            
            private AstId _id;
            
            internal AstServiceNameExpr1(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceNameExpr(this);
            }
        }
        /// <summary>
        /// service_name_expr : expression 
        /// </summary>
        public partial class AstServiceNameExpr2 : AstServiceNameExpr
        {
            
            private AstExpression _expression;
            
            internal AstServiceNameExpr2(ParserRuleContext ctx, AstExpression expression) : 
                    base(ctx)
            {
                _expression = expression;
            }
            
            public virtual AstExpression Expression
            {
                get
                {
                    return _expression;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitServiceNameExpr(this);
            }
        }
        

        
        internal AstServiceNameExpr(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstServiceNameExpr(Position p) : 
                base(p)
        {
        }
        
        internal AstServiceNameExpr(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstServiceNameExpr Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstServiceNameExpr.Resolve(list);
            if ((index == 2))
            {
                return new AstServiceNameExpr.AstServiceNameExpr1(ctx, ((AstId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstServiceNameExpr.AstServiceNameExpr2(ctx, ((AstExpression)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstExpression), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// service_name_expr : 
        ///    id_ 
        /// </summary>
        public static AstServiceNameExpr ServiceNameExpr(ParserRuleContext ctx, AstId id)
        {
            AstServiceNameExpr.AstServiceNameExpr1 result = new AstServiceNameExpr.AstServiceNameExpr1(ctx, id);
            return result;
        }
        
        /// <summary>
        /// service_name_expr : 
        ///    expression 
        /// </summary>
        public static AstServiceNameExpr ServiceNameExpr(ParserRuleContext ctx, AstExpression expression)
        {
            AstServiceNameExpr.AstServiceNameExpr2 result = new AstServiceNameExpr.AstServiceNameExpr2(ctx, expression);
            return result;
        }
    }
    
    /// <summary>
    /// end_conversation
    /// 	 : END  CONVERSATION  conversation_handle = local_id  SEMI?  (WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure_text = string_local_id)?  CLEANUP?)?
    /// </summary>
    public partial class AstEndConversation : AstBnfRule
    {
        
        protected static string _rule = "end_conversation\r\n\t : END  CONVERSATION  conversation_handle = local_id  SEMI?  (" +
            "WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure" +
            "_text = string_local_id)?  CLEANUP?)?";
        
        internal AstEndConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstEndConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstEndConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstEndConversation(ParserRuleContext ctx, AstLocalId conversationHandle, AstStringLocalId faliureCode, AstStringLocalId failureText) : 
                base(ctx)
        {
            _conversationHandle = conversationHandle;
            _faliureCode = faliureCode;
            _failureText = failureText;
        }
        
        public virtual AstLocalId _conversationHandle
        {
            get
            {
                return _conversationHandle;
            }
        }
        
        public virtual AstStringLocalId _faliureCode
        {
            get
            {
                return _faliureCode;
            }
        }
        
        public virtual AstStringLocalId _failureText
        {
            get
            {
                return _failureText;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndConversation(this);
        }
        
        /// <summary>
        /// end_conversation : 
        ///    END CONVERSATION conversation_handle=local_id SEMI? WITH ERROR EQUAL faliure_code=string_local_id DESCRIPTION EQUAL failure_text=string_local_id CLEANUP? 
        /// </summary>
        public static AstEndConversation EndConversation(ParserRuleContext ctx, AstLocalId conversationHandle, AstStringLocalId faliureCode, AstStringLocalId failureText)
        {
            AstEndConversation result = new AstEndConversation(ctx, conversationHandle, faliureCode, failureText);
            return result;
        }
    }
    
    /// <summary>
    /// get_conversation
    /// 	 : GET  CONVERSATION  GROUP  conversation_group = string_local_id  FROM  queue = database_schema_queue_ref
    /// </summary>
    public partial class AstGetConversation : AstBnfRule
    {
        
        protected static string _rule = "get_conversation\r\n\t : GET  CONVERSATION  GROUP  conversation_group = string_local" +
            "_id  FROM  queue = database_schema_queue_ref";
        
        internal AstGetConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstGetConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstGetConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstGetConversation(ParserRuleContext ctx, AstStringLocalId conversationGroup, AstDatabaseSchemaQueueRef queue) : 
                base(ctx)
        {
            _conversationGroup = conversationGroup;
            _queue = queue;
        }
        
        public virtual AstStringLocalId _conversationGroup
        {
            get
            {
                return _conversationGroup;
            }
        }
        
        public virtual AstDatabaseSchemaQueueRef _queue
        {
            get
            {
                return _queue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGetConversation(this);
        }
        
        /// <summary>
        /// get_conversation : 
        ///    GET CONVERSATION GROUP conversation_group=string_local_id FROM queue=database_schema_queue_ref 
        /// </summary>
        public static AstGetConversation GetConversation(ParserRuleContext ctx, AstStringLocalId conversationGroup, AstDatabaseSchemaQueueRef queue)
        {
            AstGetConversation result = new AstGetConversation(ctx, conversationGroup, queue);
            return result;
        }
    }
    
    /// <summary>
    /// send_conversation
    /// 	 : SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id  RR_BRACKET)?
    /// </summary>
    public partial class AstSendConversation : AstBnfRule
    {
        
        protected static string _rule = "send_conversation\r\n\t : SEND  ON  CONVERSATION  conversation_handle = string_local" +
            "_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpre" +
            "ssion = string_local_id  RR_BRACKET)?";
        
        internal AstSendConversation(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstSendConversation(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstSendConversation(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstSendConversation(ParserRuleContext ctx, AstStringLocalId conversationHandle, AstExpression messageTypeName, AstStringLocalId messageBodyEexpression) : 
                base(ctx)
        {
            _conversationHandle = conversationHandle;
            _messageTypeName = messageTypeName;
            _messageBodyEexpression = messageBodyEexpression;
        }
        
        public virtual AstStringLocalId _conversationHandle
        {
            get
            {
                return _conversationHandle;
            }
        }
        
        public virtual AstExpression _messageTypeName
        {
            get
            {
                return _messageTypeName;
            }
        }
        
        public virtual AstStringLocalId _messageBodyEexpression
        {
            get
            {
                return _messageBodyEexpression;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSendConversation(this);
        }
        
        /// <summary>
        /// send_conversation : 
        ///    SEND ON CONVERSATION conversation_handle=string_local_id MESSAGE TYPE messageTypeName=expression ( messageBodyEexpression=string_local_id ) 
        /// </summary>
        public static AstSendConversation SendConversation(ParserRuleContext ctx, AstStringLocalId conversationHandle, AstExpression messageTypeName, AstStringLocalId messageBodyEexpression)
        {
            AstSendConversation result = new AstSendConversation(ctx, conversationHandle, messageTypeName, messageBodyEexpression);
            return result;
        }
    }
    
    /// <summary>
    /// data_type
    /// 	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
    /// 	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
    /// 	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
    /// 	 | double_prec = DOUBLE  PRECISION?
    /// 	 | unscaled_type_id
    /// </summary>
    public abstract partial class AstDataType : AstBnfRule
    {
        
        protected static string _rule = @"data_type
	 : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET
	 | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET
	 | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET
	 | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)?
	 | double_prec = DOUBLE  PRECISION?
	 | unscaled_type_id";
        
        /// <summary>
        /// data_type : scaled=data_type_scaled LR_BRACKET MAX RR_BRACKET 
        /// </summary>
        public partial class AstDataType1 : AstDataType
        {
            
            private AstDataTypeScaled _scaled;
            
            internal AstDataType1(ParserRuleContext ctx, AstDataTypeScaled scaled) : 
                    base(ctx)
            {
                _scaled = scaled;
            }
            
            public virtual AstDataTypeScaled Scaled
            {
                get
                {
                    return _scaled;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id LR_BRACKET decimal_scale_prec RR_BRACKET 
        /// </summary>
        public partial class AstDataType2 : AstDataType
        {
            
            private AstExtTypeId _extTypeId;
            
            private AstDecimalScalePrec _decimalScalePrec;
            
            internal AstDataType2(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimalScalePrec decimalScalePrec) : 
                    base(ctx)
            {
                _extTypeId = extTypeId;
                _decimalScalePrec = decimalScalePrec;
            }
            
            public virtual AstExtTypeId ExtTypeId
            {
                get
                {
                    return _extTypeId;
                }
            }
            
            public virtual AstDecimalScalePrec DecimalScalePrec
            {
                get
                {
                    return _decimalScalePrec;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id LR_BRACKET scale=decimal RR_BRACKET 
        /// </summary>
        public partial class AstDataType3 : AstDataType
        {
            
            private AstExtTypeId _extTypeId;
            
            private AstDecimal _scale;
            
            internal AstDataType3(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimal scale) : 
                    base(ctx)
            {
                _extTypeId = extTypeId;
                _scale = scale;
            }
            
            public virtual AstExtTypeId ExtTypeId
            {
                get
                {
                    return _extTypeId;
                }
            }
            
            public virtual AstDecimal Scale
            {
                get
                {
                    return _scale;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : ext_type_id IDENTITY LR_BRACKET identity_seed RR_BRACKET 
        /// </summary>
        public partial class AstDataType4 : AstDataType
        {
            
            private AstExtTypeId _extTypeId;
            
            private AstIdentitySeed _identitySeed;
            
            internal AstDataType4(ParserRuleContext ctx, AstExtTypeId extTypeId, AstIdentitySeed identitySeed) : 
                    base(ctx)
            {
                _extTypeId = extTypeId;
                _identitySeed = identitySeed;
            }
            
            public virtual AstExtTypeId ExtTypeId
            {
                get
                {
                    return _extTypeId;
                }
            }
            
            public virtual AstIdentitySeed IdentitySeed
            {
                get
                {
                    return _identitySeed;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : double_prec=DOUBLE PRECISION? 
        /// </summary>
        public partial class AstDataType5 : AstDataType
        {
            
            internal AstDataType5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        /// <summary>
        /// data_type : unscaled_type_id 
        /// </summary>
        public partial class AstDataType6 : AstDataType
        {
            
            private AstUnscaledTypeId _unscaledTypeId;
            
            internal AstDataType6(ParserRuleContext ctx, AstUnscaledTypeId unscaledTypeId) : 
                    base(ctx)
            {
                _unscaledTypeId = unscaledTypeId;
            }
            
            public virtual AstUnscaledTypeId UnscaledTypeId
            {
                get
                {
                    return _unscaledTypeId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDataType(this);
            }
        }
        

        
        internal AstDataType(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDataType(Position p) : 
                base(p)
        {
        }
        
        internal AstDataType(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDataType Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDataType.Resolve(list);
            if ((index == 2))
            {
                return new AstDataType.AstDataType1(ctx, ((AstDataTypeScaled)(list[0])));
            }
            if ((index == 3))
            {
                return new AstDataType.AstDataType2(ctx, ((AstExtTypeId)(list[0])), ((AstDecimalScalePrec)(list[1])));
            }
            if ((index == 3))
            {
                return new AstDataType.AstDataType3(ctx, ((AstExtTypeId)(list[0])), ((AstDecimal)(list[1])));
            }
            if ((index == 3))
            {
                return new AstDataType.AstDataType4(ctx, ((AstExtTypeId)(list[0])), ((AstIdentitySeed)(list[1])));
            }
            if ((index == 1))
            {
                return new AstDataType.AstDataType5(ctx);
            }
            if ((index == 2))
            {
                return new AstDataType.AstDataType6(ctx, ((AstUnscaledTypeId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstExtTypeId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalScalePrec), false, false))
                    {
                        return 2;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExtTypeId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimal), false, false))
                    {
                        return 3;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstExtTypeId), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstIdentitySeed), false, false))
                    {
                        return 4;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDataTypeScaled), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstUnscaledTypeId), false, false))
                {
                    return 5;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// data_type : 
        ///    scaled=data_type_scaled ( MAX ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstDataTypeScaled scaled)
        {
            AstDataType.AstDataType1 result = new AstDataType.AstDataType1(ctx, scaled);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id ( decimal_scale_prec ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimalScalePrec decimalScalePrec)
        {
            AstDataType.AstDataType2 result = new AstDataType.AstDataType2(ctx, extTypeId, decimalScalePrec);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id ( scale=decimal ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstExtTypeId extTypeId, AstDecimal scale)
        {
            AstDataType.AstDataType3 result = new AstDataType.AstDataType3(ctx, extTypeId, scale);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    ext_type_id IDENTITY ( identity_seed ) 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstExtTypeId extTypeId, AstIdentitySeed identitySeed)
        {
            AstDataType.AstDataType4 result = new AstDataType.AstDataType4(ctx, extTypeId, identitySeed);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    double_prec=DOUBLE PRECISION? 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx)
        {
            AstDataType.AstDataType5 result = new AstDataType.AstDataType5(ctx);
            return result;
        }
        
        /// <summary>
        /// data_type : 
        ///    unscaled_type_id 
        /// </summary>
        public static AstDataType DataType(ParserRuleContext ctx, AstUnscaledTypeId unscaledTypeId)
        {
            AstDataType.AstDataType6 result = new AstDataType.AstDataType6(ctx, unscaledTypeId);
            return result;
        }
    }
    
    /// <summary>
    /// default_value
    /// 	 : NULL_
    /// 	 | DEFAULT
    /// 	 | constant
    /// </summary>
    public abstract partial class AstDefaultValue : AstBnfRule
    {
        
        protected static string _rule = "default_value\r\n\t : NULL_\r\n\t | DEFAULT\r\n\t | constant";
        
        /// <summary>
        /// default_value : NULL_ 
        /// </summary>
        public partial class AstDefaultValue1 : AstDefaultValue
        {
            
            internal AstDefaultValue1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        /// <summary>
        /// default_value : DEFAULT 
        /// </summary>
        public partial class AstDefaultValue2 : AstDefaultValue
        {
            
            internal AstDefaultValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        /// <summary>
        /// default_value : constant 
        /// </summary>
        public partial class AstDefaultValue3 : AstDefaultValue
        {
            
            private AstConstant _constant;
            
            internal AstDefaultValue3(ParserRuleContext ctx, AstConstant constant) : 
                    base(ctx)
            {
                _constant = constant;
            }
            
            public virtual AstConstant Constant
            {
                get
                {
                    return _constant;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDefaultValue(this);
            }
        }
        

        
        internal AstDefaultValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDefaultValue(Position p) : 
                base(p)
        {
        }
        
        internal AstDefaultValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDefaultValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDefaultValue.Resolve(list);
            if ((index == 1))
            {
                return new AstDefaultValue.AstDefaultValue1(ctx);
            }
            if ((index == 1))
            {
                return new AstDefaultValue.AstDefaultValue2(ctx);
            }
            if ((index == 2))
            {
                return new AstDefaultValue.AstDefaultValue3(ctx, ((AstConstant)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstConstant), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// default_value : 
        ///    NULL_ 
        /// </summary>
        public static AstDefaultValue DefaultValue(ParserRuleContext ctx)
        {
            AstDefaultValue.AstDefaultValue1 result = new AstDefaultValue.AstDefaultValue1(ctx);
            return result;
        }
        
        /// <summary>
        /// default_value : 
        ///    constant 
        /// </summary>
        public static AstDefaultValue DefaultValue(ParserRuleContext ctx, AstConstant constant)
        {
            AstDefaultValue.AstDefaultValue3 result = new AstDefaultValue.AstDefaultValue3(ctx, constant);
            return result;
        }
    }
    
    /// <summary>
    /// constant
    /// 	 : stringtext
    /// 	 | binary_
    /// 	 | real
    /// 	 | sign?  decimal_float
    /// 	 | sign?  dollar = DOLLAR  decimal_float
    /// 	 | parameter
    /// </summary>
    public abstract partial class AstConstant : AstBnfRule
    {
        
        protected static string _rule = "constant\r\n\t : stringtext\r\n\t | binary_\r\n\t | real\r\n\t | sign?  decimal_float\r\n\t | si" +
            "gn?  dollar = DOLLAR  decimal_float\r\n\t | parameter";
        
        /// <summary>
        /// constant : stringtext 
        /// </summary>
        public partial class AstConstant1 : AstConstant
        {
            
            private AstStringtext _stringtext;
            
            internal AstConstant1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : binary_ 
        /// </summary>
        public partial class AstConstant2 : AstConstant
        {
            
            private AstBinary _binary;
            
            internal AstConstant2(ParserRuleContext ctx, AstBinary binary) : 
                    base(ctx)
            {
                _binary = binary;
            }
            
            public virtual AstBinary Binary
            {
                get
                {
                    return _binary;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : real 
        /// </summary>
        public partial class AstConstant3 : AstConstant
        {
            
            private AstReal _real;
            
            internal AstConstant3(ParserRuleContext ctx, AstReal real) : 
                    base(ctx)
            {
                _real = real;
            }
            
            public virtual AstReal Real
            {
                get
                {
                    return _real;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : sign? decimal_float 
        /// </summary>
        public partial class AstConstant4 : AstConstant
        {
            
            private AstSign _sign;
            
            private AstDecimalFloat _decimalFloat;
            
            internal AstConstant4(ParserRuleContext ctx, AstSign sign, AstDecimalFloat decimalFloat) : 
                    base(ctx)
            {
                _sign = sign;
                _decimalFloat = decimalFloat;
            }
            
            public virtual AstSign Sign
            {
                get
                {
                    return _sign;
                }
            }
            
            public virtual AstDecimalFloat DecimalFloat
            {
                get
                {
                    return _decimalFloat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : sign? dollar=DOLLAR decimal_float 
        /// </summary>
        public partial class AstConstant5 : AstConstant
        {
            
            private AstSign _sign;
            
            private AstDecimalFloat _decimalFloat;
            
            internal AstConstant5(ParserRuleContext ctx, AstSign sign, AstDecimalFloat decimalFloat) : 
                    base(ctx)
            {
                _sign = sign;
                _decimalFloat = decimalFloat;
            }
            
            public virtual AstSign Sign
            {
                get
                {
                    return _sign;
                }
            }
            
            public virtual AstDecimalFloat DecimalFloat
            {
                get
                {
                    return _decimalFloat;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        /// <summary>
        /// constant : parameter 
        /// </summary>
        public partial class AstConstant6 : AstConstant
        {
            
            private AstParameter _parameter;
            
            internal AstConstant6(ParserRuleContext ctx, AstParameter parameter) : 
                    base(ctx)
            {
                _parameter = parameter;
            }
            
            public virtual AstParameter Parameter
            {
                get
                {
                    return _parameter;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitConstant(this);
            }
        }
        

        
        internal AstConstant(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstConstant(Position p) : 
                base(p)
        {
        }
        
        internal AstConstant(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstConstant Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstConstant.Resolve(list);
            if ((index == 2))
            {
                return new AstConstant.AstConstant1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstConstant.AstConstant2(ctx, ((AstBinary)(list[0])));
            }
            if ((index == 2))
            {
                return new AstConstant.AstConstant3(ctx, ((AstReal)(list[0])));
            }
            if ((index == 3))
            {
                return new AstConstant.AstConstant4(ctx, ((AstSign)(list[0])), ((AstDecimalFloat)(list[1])));
            }
            if ((index == 3))
            {
                return new AstConstant.AstConstant5(ctx, ((AstSign)(list[0])), ((AstDecimalFloat)(list[1])));
            }
            if ((index == 2))
            {
                return new AstConstant.AstConstant6(ctx, ((AstParameter)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 2))
            {
                if (AstRoot.Eval(list[0], typeof(AstSign), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalFloat), false, false))
                    {
                        return 4;
                    }
                }
                if (AstRoot.Eval(list[0], typeof(AstSign), false, false))
                {
                    if (AstRoot.Eval(list[1], typeof(AstDecimalFloat), false, false))
                    {
                        return 5;
                    }
                }
            }
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstBinary), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstReal), false, false))
                {
                    return 3;
                }
                if (AstRoot.Eval(list[0], typeof(AstParameter), false, false))
                {
                    return 6;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// constant : 
        ///    stringtext 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstConstant.AstConstant1 result = new AstConstant.AstConstant1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    binary_ 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstBinary binary)
        {
            AstConstant.AstConstant2 result = new AstConstant.AstConstant2(ctx, binary);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    real 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstReal real)
        {
            AstConstant.AstConstant3 result = new AstConstant.AstConstant3(ctx, real);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    sign? decimal_float 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstSign sign, AstDecimalFloat decimalFloat)
        {
            AstConstant.AstConstant4 result = new AstConstant.AstConstant4(ctx, sign, decimalFloat);
            return result;
        }
        
        /// <summary>
        /// constant : 
        ///    parameter 
        /// </summary>
        public static AstConstant Constant(ParserRuleContext ctx, AstParameter parameter)
        {
            AstConstant.AstConstant6 result = new AstConstant.AstConstant6(ctx, parameter);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_float
    /// 	 : decimal
    /// 	 | float
    /// </summary>
    public abstract partial class AstDecimalFloat : AstBnfRule
    {
        
        protected static string _rule = "decimal_float\r\n\t : decimal\r\n\t | float";
        
        /// <summary>
        /// decimal_float : decimal 
        /// </summary>
        public partial class AstDecimalFloat1 : AstDecimalFloat
        {
            
            private AstDecimal _decimal;
            
            internal AstDecimalFloat1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalFloat(this);
            }
        }
        /// <summary>
        /// decimal_float : float 
        /// </summary>
        public partial class AstDecimalFloat2 : AstDecimalFloat
        {
            
            private AstFloat _float;
            
            internal AstDecimalFloat2(ParserRuleContext ctx, AstFloat @float) : 
                    base(ctx)
            {
                _float = @float;
            }
            
            public virtual AstFloat Float
            {
                get
                {
                    return _float;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalFloat(this);
            }
        }
        

        
        internal AstDecimalFloat(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalFloat(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalFloat(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecimalFloat Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecimalFloat.Resolve(list);
            if ((index == 2))
            {
                return new AstDecimalFloat.AstDecimalFloat1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 2))
            {
                return new AstDecimalFloat.AstDecimalFloat2(ctx, ((AstFloat)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstFloat), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// decimal_float : 
        ///    decimal 
        /// </summary>
        public static AstDecimalFloat DecimalFloat(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstDecimalFloat.AstDecimalFloat1 result = new AstDecimalFloat.AstDecimalFloat1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// decimal_float : 
        ///    float 
        /// </summary>
        public static AstDecimalFloat DecimalFloat(ParserRuleContext ctx, AstFloat @float)
        {
            AstDecimalFloat.AstDecimalFloat2 result = new AstDecimalFloat.AstDecimalFloat2(ctx, @float);
            return result;
        }
    }
    
    /// <summary>
    /// string_id2
    /// 	 : stringtext
    /// 	 | id_
    /// 	 | local_id
    /// </summary>
    public abstract partial class AstStringId2 : AstBnfRule
    {
        
        protected static string _rule = "string_id2\r\n\t : stringtext\r\n\t | id_\r\n\t | local_id";
        
        /// <summary>
        /// string_id2 : stringtext 
        /// </summary>
        public partial class AstStringId21 : AstStringId2
        {
            
            private AstStringtext _stringtext;
            
            internal AstStringId21(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        /// <summary>
        /// string_id2 : id_ 
        /// </summary>
        public partial class AstStringId22 : AstStringId2
        {
            
            private AstId _id;
            
            internal AstStringId22(ParserRuleContext ctx, AstId id) : 
                    base(ctx)
            {
                _id = id;
            }
            
            public virtual AstId Id
            {
                get
                {
                    return _id;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        /// <summary>
        /// string_id2 : local_id 
        /// </summary>
        public partial class AstStringId23 : AstStringId2
        {
            
            private AstLocalId _localId;
            
            internal AstStringId23(ParserRuleContext ctx, AstLocalId localId) : 
                    base(ctx)
            {
                _localId = localId;
            }
            
            public virtual AstLocalId LocalId
            {
                get
                {
                    return _localId;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitStringId2(this);
            }
        }
        

        
        internal AstStringId2(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstStringId2(Position p) : 
                base(p)
        {
        }
        
        internal AstStringId2(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstStringId2 Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstStringId2.Resolve(list);
            if ((index == 2))
            {
                return new AstStringId2.AstStringId21(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstStringId2.AstStringId22(ctx, ((AstId)(list[0])));
            }
            if ((index == 2))
            {
                return new AstStringId2.AstStringId23(ctx, ((AstLocalId)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstId), false, false))
                {
                    return 2;
                }
                if (AstRoot.Eval(list[0], typeof(AstLocalId), false, false))
                {
                    return 3;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    stringtext 
        /// </summary>
        public static AstStringId2 StringId2(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstStringId2.AstStringId21 result = new AstStringId2.AstStringId21(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    id_ 
        /// </summary>
        public static AstStringId2 StringId2(ParserRuleContext ctx, AstId id)
        {
            AstStringId2.AstStringId22 result = new AstStringId2.AstStringId22(ctx, id);
            return result;
        }
        
        /// <summary>
        /// string_id2 : 
        ///    local_id 
        /// </summary>
        public static AstStringId2 StringId2(ParserRuleContext ctx, AstLocalId localId)
        {
            AstStringId2.AstStringId23 result = new AstStringId2.AstStringId23(ctx, localId);
            return result;
        }
    }
    
    /// <summary>
    /// privatekey
    /// 	 : FILE  EQUAL  stringtext
    /// 	 | by_password_crypt
    /// </summary>
    public abstract partial class AstPrivatekey : AstBnfRule
    {
        
        protected static string _rule = "privatekey\r\n\t : FILE  EQUAL  stringtext\r\n\t | by_password_crypt";
        
        /// <summary>
        /// privatekey : FILE EQUAL stringtext 
        /// </summary>
        public partial class AstPrivatekey1 : AstPrivatekey
        {
            
            private AstStringtext _stringtext;
            
            internal AstPrivatekey1(ParserRuleContext ctx, AstStringtext stringtext) : 
                    base(ctx)
            {
                _stringtext = stringtext;
            }
            
            public virtual AstStringtext Stringtext
            {
                get
                {
                    return _stringtext;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivatekey(this);
            }
        }
        /// <summary>
        /// privatekey : by_password_crypt 
        /// </summary>
        public partial class AstPrivatekey2 : AstPrivatekey
        {
            
            private AstByPasswordCrypt _byPasswordCrypt;
            
            internal AstPrivatekey2(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt) : 
                    base(ctx)
            {
                _byPasswordCrypt = byPasswordCrypt;
            }
            
            public virtual AstByPasswordCrypt ByPasswordCrypt
            {
                get
                {
                    return _byPasswordCrypt;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitPrivatekey(this);
            }
        }
        

        
        internal AstPrivatekey(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstPrivatekey(Position p) : 
                base(p)
        {
        }
        
        internal AstPrivatekey(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstPrivatekey Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstPrivatekey.Resolve(list);
            if ((index == 2))
            {
                return new AstPrivatekey.AstPrivatekey1(ctx, ((AstStringtext)(list[0])));
            }
            if ((index == 2))
            {
                return new AstPrivatekey.AstPrivatekey2(ctx, ((AstByPasswordCrypt)(list[0])));
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstStringtext), false, false))
                {
                    return 1;
                }
                if (AstRoot.Eval(list[0], typeof(AstByPasswordCrypt), false, false))
                {
                    return 2;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// privatekey : 
        ///    FILE EQUAL stringtext 
        /// </summary>
        public static AstPrivatekey Privatekey(ParserRuleContext ctx, AstStringtext stringtext)
        {
            AstPrivatekey.AstPrivatekey1 result = new AstPrivatekey.AstPrivatekey1(ctx, stringtext);
            return result;
        }
        
        /// <summary>
        /// privatekey : 
        ///    by_password_crypt 
        /// </summary>
        public static AstPrivatekey Privatekey(ParserRuleContext ctx, AstByPasswordCrypt byPasswordCrypt)
        {
            AstPrivatekey.AstPrivatekey2 result = new AstPrivatekey.AstPrivatekey2(ctx, byPasswordCrypt);
            return result;
        }
    }
    
    /// <summary>
    /// all_server_database
    /// 	 : ALL  SERVER
    /// 	 | DATABASE
    /// </summary>
    public abstract partial class AstAllServerDatabase : AstBnfRule
    {
        
        protected static string _rule = "all_server_database\r\n\t : ALL  SERVER\r\n\t | DATABASE";
        
        /// <summary>
        /// all_server_database : ALL SERVER 
        /// </summary>
        public partial class AstAllServerDatabase1 : AstAllServerDatabase
        {
            
            internal AstAllServerDatabase1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllServerDatabase(this);
            }
        }
        /// <summary>
        /// all_server_database : DATABASE 
        /// </summary>
        public partial class AstAllServerDatabase2 : AstAllServerDatabase
        {
            
            internal AstAllServerDatabase2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAllServerDatabase(this);
            }
        }
        

        
        internal AstAllServerDatabase(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAllServerDatabase(Position p) : 
                base(p)
        {
        }
        
        internal AstAllServerDatabase(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAllServerDatabase Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAllServerDatabase.Resolve(list);
            if ((index == 1))
            {
                return new AstAllServerDatabase.AstAllServerDatabase1(ctx);
            }
            if ((index == 1))
            {
                return new AstAllServerDatabase.AstAllServerDatabase2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// all_server_database : 
        ///    ALL SERVER 
        /// </summary>
        public static AstAllServerDatabase AllServerDatabase(ParserRuleContext ctx)
        {
            AstAllServerDatabase.AstAllServerDatabase1 result = new AstAllServerDatabase.AstAllServerDatabase1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// encryption_state
    /// 	 : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)
    /// </summary>
    public abstract partial class AstEncryptionState : AstBnfRule
    {
        
        protected static string _rule = "encryption_state\r\n\t : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)";
        
        /// <summary>
        /// encryption_state : ENCRYPTION EQUAL DISABLED 
        /// </summary>
        public partial class AstEncryptionState1 : AstEncryptionState
        {
            
            internal AstEncryptionState1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionState(this);
            }
        }
        /// <summary>
        /// encryption_state : ENCRYPTION EQUAL SUPPORTED 
        /// </summary>
        public partial class AstEncryptionState2 : AstEncryptionState
        {
            
            internal AstEncryptionState2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionState(this);
            }
        }
        /// <summary>
        /// encryption_state : ENCRYPTION EQUAL REQUIRED 
        /// </summary>
        public partial class AstEncryptionState3 : AstEncryptionState
        {
            
            internal AstEncryptionState3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEncryptionState(this);
            }
        }
        

        
        internal AstEncryptionState(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEncryptionState(Position p) : 
                base(p)
        {
        }
        
        internal AstEncryptionState(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEncryptionState Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEncryptionState.Resolve(list);
            if ((index == 1))
            {
                return new AstEncryptionState.AstEncryptionState1(ctx);
            }
            if ((index == 1))
            {
                return new AstEncryptionState.AstEncryptionState2(ctx);
            }
            if ((index == 1))
            {
                return new AstEncryptionState.AstEncryptionState3(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// encryption_state : 
        ///    ENCRYPTION EQUAL DISABLED 
        /// </summary>
        public static AstEncryptionState EncryptionState(ParserRuleContext ctx)
        {
            AstEncryptionState.AstEncryptionState1 result = new AstEncryptionState.AstEncryptionState1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// parameterization_option
    /// 	 : PARAMETERIZATION  (SIMPLE | FORCED)
    /// </summary>
    public abstract partial class AstParameterizationOption : AstBnfRule
    {
        
        protected static string _rule = "parameterization_option\r\n\t : PARAMETERIZATION  (SIMPLE | FORCED)";
        
        /// <summary>
        /// parameterization_option : PARAMETERIZATION SIMPLE 
        /// </summary>
        public partial class AstParameterizationOption1 : AstParameterizationOption
        {
            
            internal AstParameterizationOption1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitParameterizationOption(this);
            }
        }
        /// <summary>
        /// parameterization_option : PARAMETERIZATION FORCED 
        /// </summary>
        public partial class AstParameterizationOption2 : AstParameterizationOption
        {
            
            internal AstParameterizationOption2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitParameterizationOption(this);
            }
        }
        

        
        internal AstParameterizationOption(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstParameterizationOption(Position p) : 
                base(p)
        {
        }
        
        internal AstParameterizationOption(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstParameterizationOption Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstParameterizationOption.Resolve(list);
            if ((index == 1))
            {
                return new AstParameterizationOption.AstParameterizationOption1(ctx);
            }
            if ((index == 1))
            {
                return new AstParameterizationOption.AstParameterizationOption2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// parameterization_option : 
        ///    PARAMETERIZATION SIMPLE 
        /// </summary>
        public static AstParameterizationOption ParameterizationOption(ParserRuleContext ctx)
        {
            AstParameterizationOption.AstParameterizationOption1 result = new AstParameterizationOption.AstParameterizationOption1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// event_session_predicate_leaf_ope
    /// 	 : EQUAL
    /// 	 | (LESS  GREATER)
    /// 	 | (EXCLAMATION  EQUAL)
    /// 	 | GREATER
    /// 	 | (GREATER  EQUAL)
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// </summary>
    public abstract partial class AstEventSessionPredicateLeafOpe : AstBnfRule
    {
        
        protected static string _rule = "event_session_predicate_leaf_ope\r\n\t : EQUAL\r\n\t | (LESS  GREATER)\r\n\t | (EXCLAMATIO" +
            "N  EQUAL)\r\n\t | GREATER\r\n\t | (GREATER  EQUAL)\r\n\t | LESS\r\n\t | LESS  EQUAL";
        
        /// <summary>
        /// event_session_predicate_leaf_ope : EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe1 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS GREATER 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe2 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : EXCLAMATION EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe3 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : GREATER 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe4 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : GREATER EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe5 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe6 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        /// <summary>
        /// event_session_predicate_leaf_ope : LESS EQUAL 
        /// </summary>
        public partial class AstEventSessionPredicateLeafOpe7 : AstEventSessionPredicateLeafOpe
        {
            
            internal AstEventSessionPredicateLeafOpe7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitEventSessionPredicateLeafOpe(this);
            }
        }
        

        
        internal AstEventSessionPredicateLeafOpe(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(Position p) : 
                base(p)
        {
        }
        
        internal AstEventSessionPredicateLeafOpe(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstEventSessionPredicateLeafOpe Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstEventSessionPredicateLeafOpe.Resolve(list);
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe1(ctx);
            }
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe2(ctx);
            }
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe3(ctx);
            }
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe4(ctx);
            }
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe5(ctx);
            }
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe6(ctx);
            }
            if ((index == 1))
            {
                return new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe7(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// event_session_predicate_leaf_ope : 
        ///    EQUAL 
        /// </summary>
        public static AstEventSessionPredicateLeafOpe EventSessionPredicateLeafOpe(ParserRuleContext ctx)
        {
            AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe1 result = new AstEventSessionPredicateLeafOpe.AstEventSessionPredicateLeafOpe1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// sequence_cycle
    /// 	 : CYCLE
    /// 	 | NO  CYCLE
    /// </summary>
    public abstract partial class AstSequenceCycle : AstBnfRule
    {
        
        protected static string _rule = "sequence_cycle\r\n\t : CYCLE\r\n\t | NO  CYCLE";
        
        /// <summary>
        /// sequence_cycle : CYCLE 
        /// </summary>
        public partial class AstSequenceCycle1 : AstSequenceCycle
        {
            
            internal AstSequenceCycle1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCycle(this);
            }
        }
        /// <summary>
        /// sequence_cycle : NO CYCLE 
        /// </summary>
        public partial class AstSequenceCycle2 : AstSequenceCycle
        {
            
            internal AstSequenceCycle2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSequenceCycle(this);
            }
        }
        

        
        internal AstSequenceCycle(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSequenceCycle(Position p) : 
                base(p)
        {
        }
        
        internal AstSequenceCycle(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSequenceCycle Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSequenceCycle.Resolve(list);
            if ((index == 1))
            {
                return new AstSequenceCycle.AstSequenceCycle1(ctx);
            }
            if ((index == 1))
            {
                return new AstSequenceCycle.AstSequenceCycle2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// sequence_cycle : 
        ///    CYCLE 
        /// </summary>
        public static AstSequenceCycle SequenceCycle(ParserRuleContext ctx)
        {
            AstSequenceCycle.AstSequenceCycle1 result = new AstSequenceCycle.AstSequenceCycle1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// size_value
    /// 	 : decimal  MB
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstSizeValue : AstBnfRule
    {
        
        protected static string _rule = "size_value\r\n\t : decimal  MB\r\n\t | DEFAULT";
        
        /// <summary>
        /// size_value : decimal MB 
        /// </summary>
        public partial class AstSizeValue1 : AstSizeValue
        {
            
            private AstDecimal _decimal;
            
            internal AstSizeValue1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSizeValue(this);
            }
        }
        /// <summary>
        /// size_value : DEFAULT 
        /// </summary>
        public partial class AstSizeValue2 : AstSizeValue
        {
            
            internal AstSizeValue2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitSizeValue(this);
            }
        }
        

        
        internal AstSizeValue(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstSizeValue(Position p) : 
                base(p)
        {
        }
        
        internal AstSizeValue(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstSizeValue Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstSizeValue.Resolve(list);
            if ((index == 2))
            {
                return new AstSizeValue.AstSizeValue1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstSizeValue.AstSizeValue2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// size_value : 
        ///    decimal MB 
        /// </summary>
        public static AstSizeValue SizeValue(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstSizeValue.AstSizeValue1 result = new AstSizeValue.AstSizeValue1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// size_value : 
        ///    DEFAULT 
        /// </summary>
        public static AstSizeValue SizeValue(ParserRuleContext ctx)
        {
            AstSizeValue.AstSizeValue2 result = new AstSizeValue.AstSizeValue2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// decimal_default
    /// 	 : decimal
    /// 	 | DEFAULT
    /// </summary>
    public abstract partial class AstDecimalDefault : AstBnfRule
    {
        
        protected static string _rule = "decimal_default\r\n\t : decimal\r\n\t | DEFAULT";
        
        /// <summary>
        /// decimal_default : decimal 
        /// </summary>
        public partial class AstDecimalDefault1 : AstDecimalDefault
        {
            
            private AstDecimal _decimal;
            
            internal AstDecimalDefault1(ParserRuleContext ctx, AstDecimal @decimal) : 
                    base(ctx)
            {
                _decimal = @decimal;
            }
            
            public virtual AstDecimal Decimal
            {
                get
                {
                    return _decimal;
                }
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalDefault(this);
            }
        }
        /// <summary>
        /// decimal_default : DEFAULT 
        /// </summary>
        public partial class AstDecimalDefault2 : AstDecimalDefault
        {
            
            internal AstDecimalDefault2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitDecimalDefault(this);
            }
        }
        

        
        internal AstDecimalDefault(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstDecimalDefault(Position p) : 
                base(p)
        {
        }
        
        internal AstDecimalDefault(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstDecimalDefault Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstDecimalDefault.Resolve(list);
            if ((index == 2))
            {
                return new AstDecimalDefault.AstDecimalDefault1(ctx, ((AstDecimal)(list[0])));
            }
            if ((index == 1))
            {
                return new AstDecimalDefault.AstDecimalDefault2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            if ((list.Count == 1))
            {
                if (AstRoot.Eval(list[0], typeof(AstDecimal), false, false))
                {
                    return 1;
                }
            }
            return 0;
        }
        
        /// <summary>
        /// decimal_default : 
        ///    decimal 
        /// </summary>
        public static AstDecimalDefault DecimalDefault(ParserRuleContext ctx, AstDecimal @decimal)
        {
            AstDecimalDefault.AstDecimalDefault1 result = new AstDecimalDefault.AstDecimalDefault1(ctx, @decimal);
            return result;
        }
        
        /// <summary>
        /// decimal_default : 
        ///    DEFAULT 
        /// </summary>
        public static AstDecimalDefault DecimalDefault(ParserRuleContext ctx)
        {
            AstDecimalDefault.AstDecimalDefault2 result = new AstDecimalDefault.AstDecimalDefault2(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// on_delete
    /// 	 : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public abstract partial class AstOnDelete : AstBnfRule
    {
        
        protected static string _rule = "on_delete\r\n\t : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)";
        
        /// <summary>
        /// on_delete : ON DELETE NO ACTION 
        /// </summary>
        public partial class AstOnDelete1 : AstOnDelete
        {
            
            internal AstOnDelete1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        /// <summary>
        /// on_delete : ON DELETE CASCADE 
        /// </summary>
        public partial class AstOnDelete2 : AstOnDelete
        {
            
            internal AstOnDelete2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        /// <summary>
        /// on_delete : ON DELETE SET NULL_ 
        /// </summary>
        public partial class AstOnDelete3 : AstOnDelete
        {
            
            internal AstOnDelete3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        /// <summary>
        /// on_delete : ON DELETE SET DEFAULT 
        /// </summary>
        public partial class AstOnDelete4 : AstOnDelete
        {
            
            internal AstOnDelete4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnDelete(this);
            }
        }
        

        
        internal AstOnDelete(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnDelete(Position p) : 
                base(p)
        {
        }
        
        internal AstOnDelete(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstOnDelete Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstOnDelete.Resolve(list);
            if ((index == 1))
            {
                return new AstOnDelete.AstOnDelete1(ctx);
            }
            if ((index == 1))
            {
                return new AstOnDelete.AstOnDelete2(ctx);
            }
            if ((index == 1))
            {
                return new AstOnDelete.AstOnDelete3(ctx);
            }
            if ((index == 1))
            {
                return new AstOnDelete.AstOnDelete4(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// on_delete : 
        ///    ON DELETE NO ACTION 
        /// </summary>
        public static AstOnDelete OnDelete(ParserRuleContext ctx)
        {
            AstOnDelete.AstOnDelete1 result = new AstOnDelete.AstOnDelete1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// on_update
    /// 	 : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
    /// </summary>
    public abstract partial class AstOnUpdate : AstBnfRule
    {
        
        protected static string _rule = "on_update\r\n\t : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)";
        
        /// <summary>
        /// on_update : ON UPDATE NO ACTION 
        /// </summary>
        public partial class AstOnUpdate1 : AstOnUpdate
        {
            
            internal AstOnUpdate1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        /// <summary>
        /// on_update : ON UPDATE CASCADE 
        /// </summary>
        public partial class AstOnUpdate2 : AstOnUpdate
        {
            
            internal AstOnUpdate2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        /// <summary>
        /// on_update : ON UPDATE SET NULL_ 
        /// </summary>
        public partial class AstOnUpdate3 : AstOnUpdate
        {
            
            internal AstOnUpdate3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        /// <summary>
        /// on_update : ON UPDATE SET DEFAULT 
        /// </summary>
        public partial class AstOnUpdate4 : AstOnUpdate
        {
            
            internal AstOnUpdate4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitOnUpdate(this);
            }
        }
        

        
        internal AstOnUpdate(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstOnUpdate(Position p) : 
                base(p)
        {
        }
        
        internal AstOnUpdate(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstOnUpdate Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstOnUpdate.Resolve(list);
            if ((index == 1))
            {
                return new AstOnUpdate.AstOnUpdate1(ctx);
            }
            if ((index == 1))
            {
                return new AstOnUpdate.AstOnUpdate2(ctx);
            }
            if ((index == 1))
            {
                return new AstOnUpdate.AstOnUpdate3(ctx);
            }
            if ((index == 1))
            {
                return new AstOnUpdate.AstOnUpdate4(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// on_update : 
        ///    ON UPDATE NO ACTION 
        /// </summary>
        public static AstOnUpdate OnUpdate(ParserRuleContext ctx)
        {
            AstOnUpdate.AstOnUpdate1 result = new AstOnUpdate.AstOnUpdate1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// updated_asterisk
    /// 	 : (INSERTED | DELETED)  DOT  STAR
    /// </summary>
    public abstract partial class AstUpdatedAsterisk : AstBnfRule
    {
        
        protected static string _rule = "updated_asterisk\r\n\t : (INSERTED | DELETED)  DOT  STAR";
        
        /// <summary>
        /// updated_asterisk : INSERTED DOT STAR 
        /// </summary>
        public partial class AstUpdatedAsterisk1 : AstUpdatedAsterisk
        {
            
            internal AstUpdatedAsterisk1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdatedAsterisk(this);
            }
        }
        /// <summary>
        /// updated_asterisk : DELETED DOT STAR 
        /// </summary>
        public partial class AstUpdatedAsterisk2 : AstUpdatedAsterisk
        {
            
            internal AstUpdatedAsterisk2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitUpdatedAsterisk(this);
            }
        }
        

        
        internal AstUpdatedAsterisk(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstUpdatedAsterisk(Position p) : 
                base(p)
        {
        }
        
        internal AstUpdatedAsterisk(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstUpdatedAsterisk Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstUpdatedAsterisk.Resolve(list);
            if ((index == 1))
            {
                return new AstUpdatedAsterisk.AstUpdatedAsterisk1(ctx);
            }
            if ((index == 1))
            {
                return new AstUpdatedAsterisk.AstUpdatedAsterisk2(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// updated_asterisk : 
        ///    INSERTED . STAR 
        /// </summary>
        public static AstUpdatedAsterisk UpdatedAsterisk(ParserRuleContext ctx)
        {
            AstUpdatedAsterisk.AstUpdatedAsterisk1 result = new AstUpdatedAsterisk.AstUpdatedAsterisk1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// null_notnull
    /// 	 : NOT?  NULL_
    /// </summary>
    public partial class AstNullNotnull : AstBnfRule
    {
        
        protected static string _rule = "null_notnull\r\n\t : NOT?  NULL_";
        
        internal AstNullNotnull(ParserRuleContext ctx, List<AstRoot> list) : 
                base(ctx)
        {
        }
        
        internal AstNullNotnull(Position p, List<AstRoot> list) : 
                base(p)
        {
        }
        
        internal AstNullNotnull(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        internal AstNullNotnull(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNullNotnull(this);
        }
        
        /// <summary>
        /// null_notnull : 
        ///    NOT? NULL_ 
        /// </summary>
        public static AstNullNotnull NullNotnull(ParserRuleContext ctx)
        {
            AstNullNotnull result = new AstNullNotnull(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// comparison_operator
    /// 	 : EQUAL
    /// 	 | GREATER
    /// 	 | LESS
    /// 	 | LESS  EQUAL
    /// 	 | GREATER  EQUAL
    /// 	 | LESS  GREATER
    /// 	 | EXCLAMATION  EQUAL
    /// 	 | EXCLAMATION  GREATER
    /// 	 | EXCLAMATION  LESS
    /// </summary>
    public abstract partial class AstComparisonOperator : AstBnfRule
    {
        
        protected static string _rule = "comparison_operator\r\n\t : EQUAL\r\n\t | GREATER\r\n\t | LESS\r\n\t | LESS  EQUAL\r\n\t | GREAT" +
            "ER  EQUAL\r\n\t | LESS  GREATER\r\n\t | EXCLAMATION  EQUAL\r\n\t | EXCLAMATION  GREATER\r\n" +
            "\t | EXCLAMATION  LESS";
        
        /// <summary>
        /// comparison_operator : EQUAL 
        /// </summary>
        public partial class AstComparisonOperator1 : AstComparisonOperator
        {
            
            internal AstComparisonOperator1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : GREATER 
        /// </summary>
        public partial class AstComparisonOperator2 : AstComparisonOperator
        {
            
            internal AstComparisonOperator2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS 
        /// </summary>
        public partial class AstComparisonOperator3 : AstComparisonOperator
        {
            
            internal AstComparisonOperator3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS EQUAL 
        /// </summary>
        public partial class AstComparisonOperator4 : AstComparisonOperator
        {
            
            internal AstComparisonOperator4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : GREATER EQUAL 
        /// </summary>
        public partial class AstComparisonOperator5 : AstComparisonOperator
        {
            
            internal AstComparisonOperator5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : LESS GREATER 
        /// </summary>
        public partial class AstComparisonOperator6 : AstComparisonOperator
        {
            
            internal AstComparisonOperator6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION EQUAL 
        /// </summary>
        public partial class AstComparisonOperator7 : AstComparisonOperator
        {
            
            internal AstComparisonOperator7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION GREATER 
        /// </summary>
        public partial class AstComparisonOperator8 : AstComparisonOperator
        {
            
            internal AstComparisonOperator8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        /// <summary>
        /// comparison_operator : EXCLAMATION LESS 
        /// </summary>
        public partial class AstComparisonOperator9 : AstComparisonOperator
        {
            
            internal AstComparisonOperator9(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitComparisonOperator(this);
            }
        }
        

        
        internal AstComparisonOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstComparisonOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstComparisonOperator(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstComparisonOperator Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstComparisonOperator.Resolve(list);
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator1(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator2(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator3(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator4(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator5(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator6(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator7(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator8(ctx);
            }
            if ((index == 1))
            {
                return new AstComparisonOperator.AstComparisonOperator9(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// comparison_operator : 
        ///    EQUAL 
        /// </summary>
        public static AstComparisonOperator ComparisonOperator(ParserRuleContext ctx)
        {
            AstComparisonOperator.AstComparisonOperator1 result = new AstComparisonOperator.AstComparisonOperator1(ctx);
            return result;
        }
    }
    
    /// <summary>
    /// assignment_operator
    /// 	 : PLUS_ASSIGN
    /// 	 | MINUS_ASSIGN
    /// 	 | MULT_ASSIGN
    /// 	 | DIV_ASSIGN
    /// 	 | MOD_ASSIGN
    /// 	 | AND_ASSIGN
    /// 	 | XOR_ASSIGN
    /// 	 | OR_ASSIGN
    /// </summary>
    public abstract partial class AstAssignmentOperator : AstBnfRule
    {
        
        protected static string _rule = "assignment_operator\r\n\t : PLUS_ASSIGN\r\n\t | MINUS_ASSIGN\r\n\t | MULT_ASSIGN\r\n\t | DIV_" +
            "ASSIGN\r\n\t | MOD_ASSIGN\r\n\t | AND_ASSIGN\r\n\t | XOR_ASSIGN\r\n\t | OR_ASSIGN";
        
        /// <summary>
        /// assignment_operator : PLUS_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator1 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator1(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MINUS_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator2 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator2(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MULT_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator3 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator3(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : DIV_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator4 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator4(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : MOD_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator5 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator5(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : AND_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator6 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator6(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : XOR_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator7 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator7(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        /// <summary>
        /// assignment_operator : OR_ASSIGN 
        /// </summary>
        public partial class AstAssignmentOperator8 : AstAssignmentOperator
        {
            
            internal AstAssignmentOperator8(ParserRuleContext ctx) : 
                    base(ctx)
            {
            }
            
            public override void Accept(IAstTSqlVisitor visitor)
            {
                visitor.VisitAssignmentOperator(this);
            }
        }
        

        
        internal AstAssignmentOperator(ParserRuleContext ctx) : 
                base(ctx)
        {
        }
        
        internal AstAssignmentOperator(Position p) : 
                base(p)
        {
        }
        
        internal AstAssignmentOperator(List<AstRoot> list) : 
                base(Position.Default)
        {
        }
        
        public static AstAssignmentOperator Create(ParserRuleContext ctx, List<AstRoot> list)
        {
            int index = AstAssignmentOperator.Resolve(list);
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator1(ctx);
            }
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator2(ctx);
            }
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator3(ctx);
            }
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator4(ctx);
            }
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator5(ctx);
            }
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator6(ctx);
            }
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator7(ctx);
            }
            if ((index == 1))
            {
                return new AstAssignmentOperator.AstAssignmentOperator8(ctx);
            }
            return null;
        }
        
        public static int Resolve(List<AstRoot> list)
        {
            return 0;
        }
        
        /// <summary>
        /// assignment_operator : 
        ///    PLUS_ASSIGN 
        /// </summary>
        public static AstAssignmentOperator AssignmentOperator(ParserRuleContext ctx)
        {
            AstAssignmentOperator.AstAssignmentOperator1 result = new AstAssignmentOperator.AstAssignmentOperator1(ctx);
            return result;
        }
    }
}
