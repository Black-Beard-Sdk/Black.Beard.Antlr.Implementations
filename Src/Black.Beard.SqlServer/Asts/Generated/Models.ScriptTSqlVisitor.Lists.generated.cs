#nullable disable
// Generated by ScriptClassVisitorList.cs (mardi 2 mai 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Parser
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Bb.SqlServer.Asts;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// batchs : batch  (SEMI+  batch)*
        /// </summary>
        public override AstRoot VisitBatchs(TSqlParser.BatchsContext context)
        {
            TSqlParser.BatchContext[] source = context.batch();
            AstBatchs list = new AstBatchs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.BatchContext item = ((TSqlParser.BatchContext)(enumerator.Current));
                AstBatch acceptResult = ((AstBatch)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// go_statements : go_statement+
        /// </summary>
        public override AstRoot VisitGo_statements(TSqlParser.Go_statementsContext context)
        {
            TSqlParser.Go_statementContext[] source = context.go_statement();
            AstGoStatements list = new AstGoStatements(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Go_statementContext item = ((TSqlParser.Go_statementContext)(enumerator.Current));
                AstGoStatement acceptResult = ((AstGoStatement)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sql_clauses : sql_clause  (SEMI+  sql_clause)*  SEMI*
        /// </summary>
        public override AstRoot VisitSql_clauses(TSqlParser.Sql_clausesContext context)
        {
            TSqlParser.Sql_clauseContext[] source = context.sql_clause();
            AstSqlClauses list = new AstSqlClauses(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Sql_clauseContext item = ((TSqlParser.Sql_clauseContext)(enumerator.Current));
                AstSqlClause acceptResult = ((AstSqlClause)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// constant_local_ids : constant_local_id_or_null  (COMMA  constant_local_id_or_null)+
        /// </summary>
        public override AstRoot VisitConstant_local_ids(TSqlParser.Constant_local_idsContext context)
        {
            TSqlParser.Constant_local_id_or_nullContext[] source = context.constant_local_id_or_null();
            AstConstantLocalIds list = new AstConstantLocalIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Constant_local_id_or_nullContext item = ((TSqlParser.Constant_local_id_or_nullContext)(enumerator.Current));
                AstConstantLocalIdOrNull acceptResult = ((AstConstantLocalIdOrNull)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// binary_content_nexts : binary_content_next+
        /// </summary>
        public override AstRoot VisitBinary_content_nexts(TSqlParser.Binary_content_nextsContext context)
        {
            TSqlParser.Binary_content_nextContext[] source = context.binary_content_next();
            AstBinaryContentNexts list = new AstBinaryContentNexts(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Binary_content_nextContext item = ((TSqlParser.Binary_content_nextContext)(enumerator.Current));
                AstBinaryContentNext acceptResult = ((AstBinaryContentNext)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// ips : LR_BRACKET  ip_listener_comma  RR_BRACKET  (COMMA  LR_BRACKET  ip_listener_comma  RR_BRACKET)*
        /// </summary>
        public override AstRoot VisitIps(TSqlParser.IpsContext context)
        {
            TSqlParser.Ip_listener_commaContext[] source = context.ip_listener_comma();
            AstIps list = new AstIps(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Ip_listener_commaContext item = ((TSqlParser.Ip_listener_commaContext)(enumerator.Current));
                AstIpListenerComma acceptResult = ((AstIpListenerComma)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// drop_signature_bys : drop_signature_by  (COMMA  drop_signature_by)*
        /// </summary>
        public override AstRoot VisitDrop_signature_bys(TSqlParser.Drop_signature_bysContext context)
        {
            TSqlParser.Drop_signature_byContext[] source = context.drop_signature_by();
            AstDropSignatureBys list = new AstDropSignatureBys(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Drop_signature_byContext item = ((TSqlParser.Drop_signature_byContext)(enumerator.Current));
                AstDropSignatureBy acceptResult = ((AstDropSignatureBy)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// target_parameter_blocks : target_parameter_block*
        /// </summary>
        public override AstRoot VisitTarget_parameter_blocks(TSqlParser.Target_parameter_blocksContext context)
        {
            TSqlParser.Target_parameter_blockContext[] source = context.target_parameter_block();
            AstTargetParameterBlocks list = new AstTargetParameterBlocks(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Target_parameter_blockContext item = ((TSqlParser.Target_parameter_blockContext)(enumerator.Current));
                AstTargetParameterBlock acceptResult = ((AstTargetParameterBlock)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// target_parameter_ids : target_parameter_id  (COMMA  target_parameter_id)*
        /// </summary>
        public override AstRoot VisitTarget_parameter_ids(TSqlParser.Target_parameter_idsContext context)
        {
            TSqlParser.Target_parameter_idContext[] source = context.target_parameter_id();
            AstTargetParameterIds list = new AstTargetParameterIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Target_parameter_idContext item = ((TSqlParser.Target_parameter_idContext)(enumerator.Current));
                AstTargetParameterId acceptResult = ((AstTargetParameterId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// external_sources : external_source  (COMMA  external_source)*
        /// </summary>
        public override AstRoot VisitExternal_sources(TSqlParser.External_sourcesContext context)
        {
            TSqlParser.External_sourceContext[] source = context.external_source();
            AstExternalSources list = new AstExternalSources(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.External_sourceContext item = ((TSqlParser.External_sourceContext)(enumerator.Current));
                AstExternalSource acceptResult = ((AstExternalSource)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// id_dot_id : id_  (DOT  id_)?
        /// </summary>
        public override AstRoot VisitId_dot_id(TSqlParser.Id_dot_idContext context)
        {
            TSqlParser.Id_Context[] source = context.id_();
            AstIdDotId list = new AstIdDotId(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Id_Context item = ((TSqlParser.Id_Context)(enumerator.Current));
                AstId acceptResult = ((AstId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_schema_targets : create_schema_target+
        /// </summary>
        public override AstRoot VisitCreate_schema_targets(TSqlParser.Create_schema_targetsContext context)
        {
            TSqlParser.Create_schema_targetContext[] source = context.create_schema_target();
            AstCreateSchemaTargets list = new AstCreateSchemaTargets(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_schema_targetContext item = ((TSqlParser.Create_schema_targetContext)(enumerator.Current));
                AstCreateSchemaTarget acceptResult = ((AstCreateSchemaTarget)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// add_drop_audit_action_groups : add_drop_audit_action_group  add_drop_audit_action_group+
        /// </summary>
        public override AstRoot VisitAdd_drop_audit_action_groups(TSqlParser.Add_drop_audit_action_groupsContext context)
        {
            TSqlParser.Add_drop_audit_action_groupContext[] source = context.add_drop_audit_action_group();
            AstAddDropAuditActionGroups list = new AstAddDropAuditActionGroups(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Add_drop_audit_action_groupContext item = ((TSqlParser.Add_drop_audit_action_groupContext)(enumerator.Current));
                AstAddDropAuditActionGroup acceptResult = ((AstAddDropAuditActionGroup)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// server_audit_specification_add_groups : server_audit_specification_add_group  server_audit_specification_add_group+
        /// </summary>
        public override AstRoot VisitServer_audit_specification_add_groups(TSqlParser.Server_audit_specification_add_groupsContext context)
        {
            TSqlParser.Server_audit_specification_add_groupContext[] source = context.server_audit_specification_add_group();
            AstServerAuditSpecificationAddGroups list = new AstServerAuditSpecificationAddGroups(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Server_audit_specification_add_groupContext item = ((TSqlParser.Server_audit_specification_add_groupContext)(enumerator.Current));
                AstServerAuditSpecificationAddGroup acceptResult = ((AstServerAuditSpecificationAddGroup)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// user_settings_shorts : user_settings_short  (COMMA  user_settings_short)+
        /// </summary>
        public override AstRoot VisitUser_settings_shorts(TSqlParser.User_settings_shortsContext context)
        {
            TSqlParser.User_settings_shortContext[] source = context.user_settings_short();
            AstUserSettingsShorts list = new AstUserSettingsShorts(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.User_settings_shortContext item = ((TSqlParser.User_settings_shortContext)(enumerator.Current));
                AstUserSettingsShort acceptResult = ((AstUserSettingsShort)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// user_settings : user_setting  (COMMA  user_setting)+
        /// </summary>
        public override AstRoot VisitUser_settings(TSqlParser.User_settingsContext context)
        {
            TSqlParser.User_settingContext[] source = context.user_setting();
            AstUserSettings list = new AstUserSettings(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.User_settingContext item = ((TSqlParser.User_settingContext)(enumerator.Current));
                AstUserSetting acceptResult = ((AstUserSetting)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// alter_user_azure_sql_infos : alter_user_azure_sql_info  (COMMA  alter_user_azure_sql_info)*
        /// </summary>
        public override AstRoot VisitAlter_user_azure_sql_infos(TSqlParser.Alter_user_azure_sql_infosContext context)
        {
            TSqlParser.Alter_user_azure_sql_infoContext[] source = context.alter_user_azure_sql_info();
            AstAlterUserAzureSqlInfos list = new AstAlterUserAzureSqlInfos(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Alter_user_azure_sql_infoContext item = ((TSqlParser.Alter_user_azure_sql_infoContext)(enumerator.Current));
                AstAlterUserAzureSqlInfo acceptResult = ((AstAlterUserAzureSqlInfo)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// workload_group_id_or_defaults : workload_group_id_or_default  (COMMA  workload_group_id_or_default)*
        /// </summary>
        public override AstRoot VisitWorkload_group_id_or_defaults(TSqlParser.Workload_group_id_or_defaultsContext context)
        {
            TSqlParser.Workload_group_id_or_defaultContext[] source = context.workload_group_id_or_default();
            AstWorkloadGroupIdOrDefaults list = new AstWorkloadGroupIdOrDefaults(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Workload_group_id_or_defaultContext item = ((TSqlParser.Workload_group_id_or_defaultContext)(enumerator.Current));
                AstWorkloadGroupIdOrDefault acceptResult = ((AstWorkloadGroupIdOrDefault)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// when_matches : when_matche+
        /// </summary>
        public override AstRoot VisitWhen_matches(TSqlParser.When_matchesContext context)
        {
            TSqlParser.When_matcheContext[] source = context.when_matche();
            AstWhenMatches list = new AstWhenMatches(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.When_matcheContext item = ((TSqlParser.When_matcheContext)(enumerator.Current));
                AstWhenMatche acceptResult = ((AstWhenMatche)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// on_partitions : ON  PARTITIONS  LR_BRACKET  partition_nums  (COMMA  partition_nums)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitOn_partitions(TSqlParser.On_partitionsContext context)
        {
            TSqlParser.Partition_numsContext[] source = context.partition_nums();
            AstOnPartitions list = new AstOnPartitions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Partition_numsContext item = ((TSqlParser.Partition_numsContext)(enumerator.Current));
                AstPartitionNums acceptResult = ((AstPartitionNums)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_indices_list : table_indices  (COMMA  table_indices)*
        /// </summary>
        public override AstRoot VisitTable_indices_list(TSqlParser.Table_indices_listContext context)
        {
            TSqlParser.Table_indicesContext[] source = context.table_indices();
            AstTableIndicesList list = new AstTableIndicesList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Table_indicesContext item = ((TSqlParser.Table_indicesContext)(enumerator.Current));
                AstTableIndices acceptResult = ((AstTableIndices)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_options : tbl_option+
        /// </summary>
        public override AstRoot VisitTable_options(TSqlParser.Table_optionsContext context)
        {
            TSqlParser.Tbl_optionContext[] source = context.tbl_option();
            AstTableOptions list = new AstTableOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Tbl_optionContext item = ((TSqlParser.Tbl_optionContext)(enumerator.Current));
                AstTblOption acceptResult = ((AstTblOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// filespec : LR_BRACKET  name_set  (COMMA  newname_set)?  (COMMA  filename_set)?  (COMMA  size_set)?  (COMMA  maxsize_set)?  (COMMA  filegrowth_set)?  (COMMA  OFFLINE)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFilespec(TSqlParser.FilespecContext context)
        {
            TSqlParser.Name_setContext[] source = context.name_set();
            AstFilespec list = new AstFilespec(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Name_setContext item = ((TSqlParser.Name_setContext)(enumerator.Current));
                AstNameSet acceptResult = ((AstNameSet)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// backup_certificate_private_keys : backup_certificate_private_key  (COMMA  backup_certificate_private_key)*
        /// </summary>
        public override AstRoot VisitBackup_certificate_private_keys(TSqlParser.Backup_certificate_private_keysContext context)
        {
            TSqlParser.Backup_certificate_private_keyContext[] source = context.backup_certificate_private_key();
            AstBackupCertificatePrivateKeys list = new AstBackupCertificatePrivateKeys(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Backup_certificate_private_keyContext item = ((TSqlParser.Backup_certificate_private_keyContext)(enumerator.Current));
                AstBackupCertificatePrivateKey acceptResult = ((AstBackupCertificatePrivateKey)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// backup_settings : WITH  backup_setting+
        /// </summary>
        public override AstRoot VisitBackup_settings(TSqlParser.Backup_settingsContext context)
        {
            TSqlParser.Backup_settingContext[] source = context.backup_setting();
            AstBackupSettings list = new AstBackupSettings(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Backup_settingContext item = ((TSqlParser.Backup_settingContext)(enumerator.Current));
                AstBackupSetting acceptResult = ((AstBackupSetting)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// to_principal_rincipal_ids : principal_id  (COMMA  principal_id)*
        /// </summary>
        public override AstRoot VisitTo_principal_rincipal_ids(TSqlParser.To_principal_rincipal_idsContext context)
        {
            TSqlParser.Principal_idContext[] source = context.principal_id();
            AstToPrincipalRincipalIds list = new AstToPrincipalRincipalIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Principal_idContext item = ((TSqlParser.Principal_idContext)(enumerator.Current));
                AstPrincipalId acceptResult = ((AstPrincipalId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_key_options : create_key_option  (COMMA  create_key_option)*
        /// </summary>
        public override AstRoot VisitCreate_key_options(TSqlParser.Create_key_optionsContext context)
        {
            TSqlParser.Create_key_optionContext[] source = context.create_key_option();
            AstCreateKeyOptions list = new AstCreateKeyOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_key_optionContext item = ((TSqlParser.Create_key_optionContext)(enumerator.Current));
                AstCreateKeyOption acceptResult = ((AstCreateKeyOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_def_table_constraints : column_def_table_constraint  (COMMA?  column_def_table_constraint)*
        /// </summary>
        public override AstRoot VisitColumn_def_table_constraints(TSqlParser.Column_def_table_constraintsContext context)
        {
            TSqlParser.Column_def_table_constraintContext[] source = context.column_def_table_constraint();
            AstColumnDefTableConstraints list = new AstColumnDefTableConstraints(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Column_def_table_constraintContext item = ((TSqlParser.Column_def_table_constraintContext)(enumerator.Current));
                AstColumnDefTableConstraint acceptResult = ((AstColumnDefTableConstraint)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sql_unions : sql_union+
        /// </summary>
        public override AstRoot VisitSql_unions(TSqlParser.Sql_unionsContext context)
        {
            TSqlParser.Sql_unionContext[] source = context.sql_union();
            AstSqlUnions list = new AstSqlUnions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Sql_unionContext item = ((TSqlParser.Sql_unionContext)(enumerator.Current));
                AstSqlUnion acceptResult = ((AstSqlUnion)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// order_by_clause : ORDER  BY  order_by_expression  (COMMA  order_by_expression)*
        /// </summary>
        public override AstRoot VisitOrder_by_clause(TSqlParser.Order_by_clauseContext context)
        {
            TSqlParser.Order_by_expressionContext[] source = context.order_by_expression();
            AstOrderByClause list = new AstOrderByClause(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Order_by_expressionContext item = ((TSqlParser.Order_by_expressionContext)(enumerator.Current));
                AstOrderByExpression acceptResult = ((AstOrderByExpression)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// subqueries : subquery  (UNION  ALL  subquery)*
        /// </summary>
        public override AstRoot VisitSubqueries(TSqlParser.SubqueriesContext context)
        {
            TSqlParser.SubqueryContext[] source = context.subquery();
            AstSubqueries list = new AstSubqueries(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.SubqueryContext item = ((TSqlParser.SubqueryContext)(enumerator.Current));
                AstSubquery acceptResult = ((AstSubquery)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// with_table_hints : WITH  LR_BRACKET  table_hint  (COMMA?  table_hint)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitWith_table_hints(TSqlParser.With_table_hintsContext context)
        {
            TSqlParser.Table_hintContext[] source = context.table_hint();
            AstWithTableHints list = new AstWithTableHints(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Table_hintContext item = ((TSqlParser.Table_hintContext)(enumerator.Current));
                AstTableHint acceptResult = ((AstTableHint)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// sybase_legacy_hints : sybase_legacy_hint+
        /// </summary>
        public override AstRoot VisitSybase_legacy_hints(TSqlParser.Sybase_legacy_hintsContext context)
        {
            TSqlParser.Sybase_legacy_hintContext[] source = context.sybase_legacy_hint();
            AstSybaseLegacyHints list = new AstSybaseLegacyHints(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Sybase_legacy_hintContext item = ((TSqlParser.Sybase_legacy_hintContext)(enumerator.Current));
                AstSybaseLegacyHint acceptResult = ((AstSybaseLegacyHint)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_database_option_list : create_database_option  (COMMA  create_database_option)*
        /// </summary>
        public override AstRoot VisitCreate_database_option_list(TSqlParser.Create_database_option_listContext context)
        {
            TSqlParser.Create_database_optionContext[] source = context.create_database_option();
            AstCreateDatabaseOptionList list = new AstCreateDatabaseOptionList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_database_optionContext item = ((TSqlParser.Create_database_optionContext)(enumerator.Current));
                AstCreateDatabaseOption acceptResult = ((AstCreateDatabaseOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// database_filestream_options : database_filestream_option  (COMMA  database_filestream_option)*
        /// </summary>
        public override AstRoot VisitDatabase_filestream_options(TSqlParser.Database_filestream_optionsContext context)
        {
            TSqlParser.Database_filestream_optionContext[] source = context.database_filestream_option();
            AstDatabaseFilestreamOptions list = new AstDatabaseFilestreamOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Database_filestream_optionContext item = ((TSqlParser.Database_filestream_optionContext)(enumerator.Current));
                AstDatabaseFilestreamOption acceptResult = ((AstDatabaseFilestreamOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_name_list_with_order : column_ordered  (COMMA  column_ordered)*
        /// </summary>
        public override AstRoot VisitColumn_name_list_with_order(TSqlParser.Column_name_list_with_orderContext context)
        {
            TSqlParser.Column_orderedContext[] source = context.column_ordered();
            AstColumnNameListWithOrder list = new AstColumnNameListWithOrder(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Column_orderedContext item = ((TSqlParser.Column_orderedContext)(enumerator.Current));
                AstColumnOrdered acceptResult = ((AstColumnOrdered)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_or_argument_ids : column_or_argument_id  (COMMA?  column_or_argument_id)*
        /// </summary>
        public override AstRoot VisitColumn_or_argument_ids(TSqlParser.Column_or_argument_idsContext context)
        {
            TSqlParser.Column_or_argument_idContext[] source = context.column_or_argument_id();
            AstColumnOrArgumentIds list = new AstColumnOrArgumentIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Column_or_argument_idContext item = ((TSqlParser.Column_or_argument_idContext)(enumerator.Current));
                AstColumnOrArgumentId acceptResult = ((AstColumnOrArgumentId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// decimals : decimal  (COMMA  decimal)+
        /// </summary>
        public override AstRoot VisitDecimals(TSqlParser.DecimalsContext context)
        {
            TSqlParser.DecimalContext[] source = context.@decimal();
            AstDecimals list = new AstDecimals(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.DecimalContext item = ((TSqlParser.DecimalContext)(enumerator.Current));
                AstDecimal acceptResult = ((AstDecimal)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_trigger_refs : schema_trigger_ref  (COMMA  schema_trigger_ref)*
        /// </summary>
        public override AstRoot VisitSchema_trigger_refs(TSqlParser.Schema_trigger_refsContext context)
        {
            TSqlParser.Schema_trigger_refContext[] source = context.schema_trigger_ref();
            AstSchemaTriggerRefs list = new AstSchemaTriggerRefs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Schema_trigger_refContext item = ((TSqlParser.Schema_trigger_refContext)(enumerator.Current));
                AstSchemaTriggerRef acceptResult = ((AstSchemaTriggerRef)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// ids : id_  (COMMA  id_)*
        /// </summary>
        public override AstRoot VisitIds(TSqlParser.IdsContext context)
        {
            TSqlParser.Id_Context[] source = context.id_();
            AstIds list = new AstIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Id_Context item = ((TSqlParser.Id_Context)(enumerator.Current));
                AstId acceptResult = ((AstId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// update_statistics_options : WITH  update_statistics_option  (COMMA  update_statistics_option)*
        /// </summary>
        public override AstRoot VisitUpdate_statistics_options(TSqlParser.Update_statistics_optionsContext context)
        {
            TSqlParser.Update_statistics_optionContext[] source = context.update_statistics_option();
            AstUpdateStatisticsOptions list = new AstUpdateStatisticsOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Update_statistics_optionContext item = ((TSqlParser.Update_statistics_optionContext)(enumerator.Current));
                AstUpdateStatisticsOption acceptResult = ((AstUpdateStatisticsOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// function_options : WITH  function_option  (COMMA  function_option)*
        /// </summary>
        public override AstRoot VisitFunction_options(TSqlParser.Function_optionsContext context)
        {
            TSqlParser.Function_optionContext[] source = context.function_option();
            AstFunctionOptions list = new AstFunctionOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Function_optionContext item = ((TSqlParser.Function_optionContext)(enumerator.Current));
                AstFunctionOption acceptResult = ((AstFunctionOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// procedure_params : procedure_param  (COMMA  procedure_param)*
        /// </summary>
        public override AstRoot VisitProcedure_params(TSqlParser.Procedure_paramsContext context)
        {
            TSqlParser.Procedure_paramContext[] source = context.procedure_param();
            AstProcedureParams list = new AstProcedureParams(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Procedure_paramContext item = ((TSqlParser.Procedure_paramContext)(enumerator.Current));
                AstProcedureParam acceptResult = ((AstProcedureParam)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// dml_trigger_options : WITH  dml_trigger_option  (COMMA  dml_trigger_option)*
        /// </summary>
        public override AstRoot VisitDml_trigger_options(TSqlParser.Dml_trigger_optionsContext context)
        {
            TSqlParser.Dml_trigger_optionContext[] source = context.dml_trigger_option();
            AstDmlTriggerOptions list = new AstDmlTriggerOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Dml_trigger_optionContext item = ((TSqlParser.Dml_trigger_optionContext)(enumerator.Current));
                AstDmlTriggerOption acceptResult = ((AstDmlTriggerOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_type_indices : table_type_indice  (COMMA  table_type_indice)*
        /// </summary>
        public override AstRoot VisitTable_type_indices(TSqlParser.Table_type_indicesContext context)
        {
            TSqlParser.Table_type_indiceContext[] source = context.table_type_indice();
            AstTableTypeIndices list = new AstTableTypeIndices(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Table_type_indiceContext item = ((TSqlParser.Table_type_indiceContext)(enumerator.Current));
                AstTableTypeIndice acceptResult = ((AstTableTypeIndice)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// dml_trigger_operations : dml_trigger_operation  (COMMA  dml_trigger_operation)*
        /// </summary>
        public override AstRoot VisitDml_trigger_operations(TSqlParser.Dml_trigger_operationsContext context)
        {
            TSqlParser.Dml_trigger_operationContext[] source = context.dml_trigger_operation();
            AstDmlTriggerOperations list = new AstDmlTriggerOperations(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Dml_trigger_operationContext item = ((TSqlParser.Dml_trigger_operationContext)(enumerator.Current));
                AstDmlTriggerOperation acceptResult = ((AstDmlTriggerOperation)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// procedure_options : WITH  procedure_option  (COMMA  procedure_option)*
        /// </summary>
        public override AstRoot VisitProcedure_options(TSqlParser.Procedure_optionsContext context)
        {
            TSqlParser.Procedure_optionContext[] source = context.procedure_option();
            AstProcedureOptions list = new AstProcedureOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Procedure_optionContext item = ((TSqlParser.Procedure_optionContext)(enumerator.Current));
                AstProcedureOption acceptResult = ((AstProcedureOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// logical_device_ids : logical_device_id  (COMMA  logical_device_id)*
        /// </summary>
        public override AstRoot VisitLogical_device_ids(TSqlParser.Logical_device_idsContext context)
        {
            TSqlParser.Logical_device_idContext[] source = context.logical_device_id();
            AstLogicalDeviceIds list = new AstLogicalDeviceIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Logical_device_idContext item = ((TSqlParser.Logical_device_idContext)(enumerator.Current));
                AstLogicalDeviceId acceptResult = ((AstLogicalDeviceId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// disk_tape_url_values : disk_tape_url_value  (COMMA  disk_tape_url_value)*
        /// </summary>
        public override AstRoot VisitDisk_tape_url_values(TSqlParser.Disk_tape_url_valuesContext context)
        {
            TSqlParser.Disk_tape_url_valueContext[] source = context.disk_tape_url_value();
            AstDiskTapeUrlValues list = new AstDiskTapeUrlValues(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Disk_tape_url_valueContext item = ((TSqlParser.Disk_tape_url_valueContext)(enumerator.Current));
                AstDiskTapeUrlValue acceptResult = ((AstDiskTapeUrlValue)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// xml_index_options : WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitXml_index_options(TSqlParser.Xml_index_optionsContext context)
        {
            TSqlParser.Xml_index_optionContext[] source = context.xml_index_option();
            AstXmlIndexOptions list = new AstXmlIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Xml_index_optionContext item = ((TSqlParser.Xml_index_optionContext)(enumerator.Current));
                AstXmlIndexOption acceptResult = ((AstXmlIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_columnstore_index_options : WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_columnstore_index_options(TSqlParser.Create_columnstore_index_optionsContext context)
        {
            TSqlParser.Columnstore_index_optionContext[] source = context.columnstore_index_option();
            AstCreateColumnstoreIndexOptions list = new AstCreateColumnstoreIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Columnstore_index_optionContext item = ((TSqlParser.Columnstore_index_optionContext)(enumerator.Current));
                AstColumnstoreIndexOption acceptResult = ((AstColumnstoreIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// single_partition_rebuild_index_options : WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition_rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitSingle_partition_rebuild_index_options(TSqlParser.Single_partition_rebuild_index_optionsContext context)
        {
            TSqlParser.Single_partition_rebuild_index_optionContext[] source = context.single_partition_rebuild_index_option();
            AstSinglePartitionRebuildIndexOptions list = new AstSinglePartitionRebuildIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Single_partition_rebuild_index_optionContext item = ((TSqlParser.Single_partition_rebuild_index_optionContext)(enumerator.Current));
                AstSinglePartitionRebuildIndexOption acceptResult = ((AstSinglePartitionRebuildIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// rebuild_index_options : WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitRebuild_index_options(TSqlParser.Rebuild_index_optionsContext context)
        {
            TSqlParser.Rebuild_index_optionContext[] source = context.rebuild_index_option();
            AstRebuildIndexOptions list = new AstRebuildIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Rebuild_index_optionContext item = ((TSqlParser.Rebuild_index_optionContext)(enumerator.Current));
                AstRebuildIndexOption acceptResult = ((AstRebuildIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// full_table_ref_columns : full_table_ref_column  (COMMA  full_table_ref_column)*
        /// </summary>
        public override AstRoot VisitFull_table_ref_columns(TSqlParser.Full_table_ref_columnsContext context)
        {
            TSqlParser.Full_table_ref_columnContext[] source = context.full_table_ref_column();
            AstFullTableRefColumns list = new AstFullTableRefColumns(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Full_table_ref_columnContext item = ((TSqlParser.Full_table_ref_columnContext)(enumerator.Current));
                AstFullTableRefColumn acceptResult = ((AstFullTableRefColumn)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// set_index_options : SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitSet_index_options(TSqlParser.Set_index_optionsContext context)
        {
            TSqlParser.Set_index_optionContext[] source = context.set_index_option();
            AstSetIndexOptions list = new AstSetIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Set_index_optionContext item = ((TSqlParser.Set_index_optionContext)(enumerator.Current));
                AstSetIndexOption acceptResult = ((AstSetIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// reorganize_options : WITH  LR_BRACKET  (reorganize_option  (COMMA  reorganize_option)*)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitReorganize_options(TSqlParser.Reorganize_optionsContext context)
        {
            TSqlParser.Reorganize_optionContext[] source = context.reorganize_option();
            AstReorganizeOptions list = new AstReorganizeOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Reorganize_optionContext item = ((TSqlParser.Reorganize_optionContext)(enumerator.Current));
                AstReorganizeOption acceptResult = ((AstReorganizeOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// private_keys : privatekey  (COMMA  privatekey)*
        /// </summary>
        public override AstRoot VisitPrivate_keys(TSqlParser.Private_keysContext context)
        {
            TSqlParser.PrivatekeyContext[] source = context.privatekey();
            AstPrivateKeys list = new AstPrivateKeys(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.PrivatekeyContext item = ((TSqlParser.PrivatekeyContext)(enumerator.Current));
                AstPrivatekey acceptResult = ((AstPrivatekey)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// server_audit_file_specs : server_audit_file_spec  (COMMA  server_audit_file_spec)*
        /// </summary>
        public override AstRoot VisitServer_audit_file_specs(TSqlParser.Server_audit_file_specsContext context)
        {
            TSqlParser.Server_audit_file_specContext[] source = context.server_audit_file_spec();
            AstServerAuditFileSpecs list = new AstServerAuditFileSpecs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Server_audit_file_specContext item = ((TSqlParser.Server_audit_file_specContext)(enumerator.Current));
                AstServerAuditFileSpec acceptResult = ((AstServerAuditFileSpec)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_events : create_or_alter_event_session_del_event  (COMMA  create_or_alter_event_session_del_event)*
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_del_events(TSqlParser.Create_or_alter_event_session_del_eventsContext context)
        {
            TSqlParser.Create_or_alter_event_session_del_eventContext[] source = context.create_or_alter_event_session_del_event();
            AstCreateOrAlterEventSessionDelEvents list = new AstCreateOrAlterEventSessionDelEvents(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_or_alter_event_session_del_eventContext item = ((TSqlParser.Create_or_alter_event_session_del_eventContext)(enumerator.Current));
                AstCreateOrAlterEventSessionDelEvent acceptResult = ((AstCreateOrAlterEventSessionDelEvent)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_events : create_or_alter_event_session_add_event  (COMMA  create_or_alter_event_session_add_event)*
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_add_events(TSqlParser.Create_or_alter_event_session_add_eventsContext context)
        {
            TSqlParser.Create_or_alter_event_session_add_eventContext[] source = context.create_or_alter_event_session_add_event();
            AstCreateOrAlterEventSessionAddEvents list = new AstCreateOrAlterEventSessionAddEvents(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_or_alter_event_session_add_eventContext item = ((TSqlParser.Create_or_alter_event_session_add_eventContext)(enumerator.Current));
                AstCreateOrAlterEventSessionAddEvent acceptResult = ((AstCreateOrAlterEventSessionAddEvent)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_targets : create_or_alter_event_session_add_target+
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_add_targets(TSqlParser.Create_or_alter_event_session_add_targetsContext context)
        {
            TSqlParser.Create_or_alter_event_session_add_targetContext[] source = context.create_or_alter_event_session_add_target();
            AstCreateOrAlterEventSessionAddTargets list = new AstCreateOrAlterEventSessionAddTargets(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_or_alter_event_session_add_targetContext item = ((TSqlParser.Create_or_alter_event_session_add_targetContext)(enumerator.Current));
                AstCreateOrAlterEventSessionAddTarget acceptResult = ((AstCreateOrAlterEventSessionAddTarget)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_targets : create_or_alter_event_session_del_target+
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_del_targets(TSqlParser.Create_or_alter_event_session_del_targetsContext context)
        {
            TSqlParser.Create_or_alter_event_session_del_targetContext[] source = context.create_or_alter_event_session_del_target();
            AstCreateOrAlterEventSessionDelTargets list = new AstCreateOrAlterEventSessionDelTargets(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_or_alter_event_session_del_targetContext item = ((TSqlParser.Create_or_alter_event_session_del_targetContext)(enumerator.Current));
                AstCreateOrAlterEventSessionDelTarget acceptResult = ((AstCreateOrAlterEventSessionDelTarget)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_session_actions : event_session_action  (COMMA  event_session_action)*
        /// </summary>
        public override AstRoot VisitEvent_session_actions(TSqlParser.Event_session_actionsContext context)
        {
            TSqlParser.Event_session_actionContext[] source = context.event_session_action();
            AstEventSessionActions list = new AstEventSessionActions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Event_session_actionContext item = ((TSqlParser.Event_session_actionContext)(enumerator.Current));
                AstEventSessionAction acceptResult = ((AstEventSessionAction)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// set_attributes : set_attribute  (COMMA  set_attribute)*
        /// </summary>
        public override AstRoot VisitSet_attributes(TSqlParser.Set_attributesContext context)
        {
            TSqlParser.Set_attributeContext[] source = context.set_attribute();
            AstSetAttributes list = new AstSetAttributes(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Set_attributeContext item = ((TSqlParser.Set_attributeContext)(enumerator.Current));
                AstSetAttribute acceptResult = ((AstSetAttribute)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// pwd_strategies : pwd_strategy+
        /// </summary>
        public override AstRoot VisitPwd_strategies(TSqlParser.Pwd_strategiesContext context)
        {
            TSqlParser.Pwd_strategyContext[] source = context.pwd_strategy();
            AstPwdStrategies list = new AstPwdStrategies(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Pwd_strategyContext item = ((TSqlParser.Pwd_strategyContext)(enumerator.Current));
                AstPwdStrategy acceptResult = ((AstPwdStrategy)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// event_module_package_action_refs : event_module_package_action_ref  (COMMA  event_module_package_action_ref)
        /// </summary>
        public override AstRoot VisitEvent_module_package_action_refs(TSqlParser.Event_module_package_action_refsContext context)
        {
            TSqlParser.Event_module_package_action_refContext[] source = context.event_module_package_action_ref();
            AstEventModulePackageActionRefs list = new AstEventModulePackageActionRefs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Event_module_package_action_refContext item = ((TSqlParser.Event_module_package_action_refContext)(enumerator.Current));
                AstEventModulePackageActionRef acceptResult = ((AstEventModulePackageActionRef)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// resumable_index_options : WITH  LR_BRACKET  (resumable_index_option  (COMMA  resumable_index_option)*)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitResumable_index_options(TSqlParser.Resumable_index_optionsContext context)
        {
            TSqlParser.Resumable_index_optionContext[] source = context.resumable_index_option();
            AstResumableIndexOptions list = new AstResumableIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Resumable_index_optionContext item = ((TSqlParser.Resumable_index_optionContext)(enumerator.Current));
                AstResumableIndexOption acceptResult = ((AstResumableIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// relational_index_options : relational_index_option  (COMMA  relational_index_option)*
        /// </summary>
        public override AstRoot VisitRelational_index_options(TSqlParser.Relational_index_optionsContext context)
        {
            TSqlParser.Relational_index_optionContext[] source = context.relational_index_option();
            AstRelationalIndexOptions list = new AstRelationalIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Relational_index_optionContext item = ((TSqlParser.Relational_index_optionContext)(enumerator.Current));
                AstRelationalIndexOption acceptResult = ((AstRelationalIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// database_files : database_file  (COMMA  database_file)*
        /// </summary>
        public override AstRoot VisitDatabase_files(TSqlParser.Database_filesContext context)
        {
            TSqlParser.Database_fileContext[] source = context.database_file();
            AstDatabaseFiles list = new AstDatabaseFiles(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Database_fileContext item = ((TSqlParser.Database_fileContext)(enumerator.Current));
                AstDatabaseFile acceptResult = ((AstDatabaseFile)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// output_dml_list_elems : output_dml_list_elem  (COMMA  output_dml_list_elem)*
        /// </summary>
        public override AstRoot VisitOutput_dml_list_elems(TSqlParser.Output_dml_list_elemsContext context)
        {
            TSqlParser.Output_dml_list_elemContext[] source = context.output_dml_list_elem();
            AstOutputDmlListElems list = new AstOutputDmlListElems(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Output_dml_list_elemContext item = ((TSqlParser.Output_dml_list_elemContext)(enumerator.Current));
                AstOutputDmlListElem acceptResult = ((AstOutputDmlListElem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// update_elems : update_elem  (COMMA  update_elem)*
        /// </summary>
        public override AstRoot VisitUpdate_elems(TSqlParser.Update_elemsContext context)
        {
            TSqlParser.Update_elemContext[] source = context.update_elem();
            AstUpdateElems list = new AstUpdateElems(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Update_elemContext item = ((TSqlParser.Update_elemContext)(enumerator.Current));
                AstUpdateElem acceptResult = ((AstUpdateElem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_security_policy_adds : create_security_policy_add  (COMMA?  create_security_policy_add)*
        /// </summary>
        public override AstRoot VisitCreate_security_policy_adds(TSqlParser.Create_security_policy_addsContext context)
        {
            TSqlParser.Create_security_policy_addContext[] source = context.create_security_policy_add();
            AstCreateSecurityPolicyAdds list = new AstCreateSecurityPolicyAdds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_security_policy_addContext item = ((TSqlParser.Create_security_policy_addContext)(enumerator.Current));
                AstCreateSecurityPolicyAdd acceptResult = ((AstCreateSecurityPolicyAdd)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// update_elem_merges : update_elem_merge  (COMMA  update_elem_merge)*
        /// </summary>
        public override AstRoot VisitUpdate_elem_merges(TSqlParser.Update_elem_mergesContext context)
        {
            TSqlParser.Update_elem_mergeContext[] source = context.update_elem_merge();
            AstUpdateElemMerges list = new AstUpdateElemMerges(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Update_elem_mergeContext item = ((TSqlParser.Update_elem_mergeContext)(enumerator.Current));
                AstUpdateElemMerge acceptResult = ((AstUpdateElemMerge)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// file_group_ids : file_group_id  (COMMA  file_group_id)*
        /// </summary>
        public override AstRoot VisitFile_group_ids(TSqlParser.File_group_idsContext context)
        {
            TSqlParser.File_group_idContext[] source = context.file_group_id();
            AstFileGroupIds list = new AstFileGroupIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.File_group_idContext item = ((TSqlParser.File_group_idContext)(enumerator.Current));
                AstFileGroupId acceptResult = ((AstFileGroupId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// string_list : stringtext  (COMMA  stringtext)*
        /// </summary>
        public override AstRoot VisitString_list(TSqlParser.String_listContext context)
        {
            TSqlParser.StringtextContext[] source = context.stringtext();
            AstStringList list = new AstStringList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.StringtextContext item = ((TSqlParser.StringtextContext)(enumerator.Current));
                AstStringtext acceptResult = ((AstStringtext)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// asymmetric_key_option : WITH  PRIVATE  KEY  LR_BRACKET  by_password_crypt  (COMMA  by_password_crypt)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAsymmetric_key_option(TSqlParser.Asymmetric_key_optionContext context)
        {
            TSqlParser.By_password_cryptContext[] source = context.by_password_crypt();
            AstAsymmetricKeyOption list = new AstAsymmetricKeyOption(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.By_password_cryptContext item = ((TSqlParser.By_password_cryptContext)(enumerator.Current));
                AstByPasswordCrypt acceptResult = ((AstByPasswordCrypt)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// assemblies : assembly_id  (COMMA?  assembly_id)+
        /// </summary>
        public override AstRoot VisitAssemblies(TSqlParser.AssembliesContext context)
        {
            TSqlParser.Assembly_idContext[] source = context.assembly_id();
            AstAssemblies list = new AstAssemblies(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Assembly_idContext item = ((TSqlParser.Assembly_idContext)(enumerator.Current));
                AstAssemblyId acceptResult = ((AstAssemblyId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// decimal_string_locals : decimal_string_local_id  (COMMA  decimal_string_local_id)*
        /// </summary>
        public override AstRoot VisitDecimal_string_locals(TSqlParser.Decimal_string_localsContext context)
        {
            TSqlParser.Decimal_string_local_idContext[] source = context.decimal_string_local_id();
            AstDecimalStringLocals list = new AstDecimalStringLocals(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Decimal_string_local_idContext item = ((TSqlParser.Decimal_string_local_idContext)(enumerator.Current));
                AstDecimalStringLocalId acceptResult = ((AstDecimalStringLocalId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_name_list : id_  (COMMA  id_)*
        /// </summary>
        public override AstRoot VisitColumn_name_list(TSqlParser.Column_name_listContext context)
        {
            TSqlParser.Id_Context[] source = context.id_();
            AstColumnNameList list = new AstColumnNameList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Id_Context item = ((TSqlParser.Id_Context)(enumerator.Current));
                AstId acceptResult = ((AstId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// insert_column_name_list : insert_column_id  (COMMA  insert_column_id)*
        /// </summary>
        public override AstRoot VisitInsert_column_name_list(TSqlParser.Insert_column_name_listContext context)
        {
            TSqlParser.Insert_column_idContext[] source = context.insert_column_id();
            AstInsertColumnNameList list = new AstInsertColumnNameList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Insert_column_idContext item = ((TSqlParser.Insert_column_idContext)(enumerator.Current));
                AstInsertColumnId acceptResult = ((AstInsertColumnId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// insert_column_id : (source = id_  DOT)*  column_id
        /// </summary>
        public override AstRoot VisitInsert_column_id(TSqlParser.Insert_column_idContext context)
        {
            TSqlParser.Id_Context[] source = context.id_();
            AstInsertColumnId list = new AstInsertColumnId(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Id_Context item = ((TSqlParser.Id_Context)(enumerator.Current));
                AstId acceptResult = ((AstId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// file_specs : file_spec  (COMMA  file_spec)*
        /// </summary>
        public override AstRoot VisitFile_specs(TSqlParser.File_specsContext context)
        {
            TSqlParser.File_specContext[] source = context.file_spec();
            AstFileSpecs list = new AstFileSpecs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.File_specContext item = ((TSqlParser.File_specContext)(enumerator.Current));
                AstFileSpec acceptResult = ((AstFileSpec)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// expression_list : expression  (COMMA  expression)*
        /// </summary>
        public override AstRoot VisitExpression_list(TSqlParser.Expression_listContext context)
        {
            TSqlParser.ExpressionContext[] source = context.expression();
            AstExpressionList list = new AstExpressionList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.ExpressionContext item = ((TSqlParser.ExpressionContext)(enumerator.Current));
                AstExpression acceptResult = ((AstExpression)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// change_tracking_option_items : change_tracking_option_item  (change_tracking_option_item)*
        /// </summary>
        public override AstRoot VisitChange_tracking_option_items(TSqlParser.Change_tracking_option_itemsContext context)
        {
            TSqlParser.Change_tracking_option_itemContext[] source = context.change_tracking_option_item();
            AstChangeTrackingOptionItems list = new AstChangeTrackingOptionItems(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Change_tracking_option_itemContext item = ((TSqlParser.Change_tracking_option_itemContext)(enumerator.Current));
                AstChangeTrackingOptionItem acceptResult = ((AstChangeTrackingOptionItem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_server_audit_withs : create_server_audit_with  (COMMA  create_server_audit_with)*
        /// </summary>
        public override AstRoot VisitCreate_server_audit_withs(TSqlParser.Create_server_audit_withsContext context)
        {
            TSqlParser.Create_server_audit_withContext[] source = context.create_server_audit_with();
            AstCreateServerAuditWiths list = new AstCreateServerAuditWiths(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_server_audit_withContext item = ((TSqlParser.Create_server_audit_withContext)(enumerator.Current));
                AstCreateServerAuditWith acceptResult = ((AstCreateServerAuditWith)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_value_constructor : VALUES  LR_BRACKET  expression_list  RR_BRACKET  (COMMA  LR_BRACKET  expression_list  RR_BRACKET)*
        /// </summary>
        public override AstRoot VisitTable_value_constructor(TSqlParser.Table_value_constructorContext context)
        {
            TSqlParser.Expression_listContext[] source = context.expression_list();
            AstTableValueConstructor list = new AstTableValueConstructor(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Expression_listContext item = ((TSqlParser.Expression_listContext)(enumerator.Current));
                AstExpressionList acceptResult = ((AstExpressionList)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_alias_list : LR_BRACKET  alias += column_alias  (COMMA  alias += column_alias)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitColumn_alias_list(TSqlParser.Column_alias_listContext context)
        {
            TSqlParser.Column_aliasContext[] source = context.column_alias();
            AstColumnAliasList list = new AstColumnAliasList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Column_aliasContext item = ((TSqlParser.Column_aliasContext)(enumerator.Current));
                AstColumnAlias acceptResult = ((AstColumnAlias)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// index_values : index_value  (COMMA  index_value)*
        /// </summary>
        public override AstRoot VisitIndex_values(TSqlParser.Index_valuesContext context)
        {
            TSqlParser.Index_valueContext[] source = context.index_value();
            AstIndexValues list = new AstIndexValues(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Index_valueContext item = ((TSqlParser.Index_valueContext)(enumerator.Current));
                AstIndexValue acceptResult = ((AstIndexValue)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// expressions : expression  (COMMA  expression)*
        /// </summary>
        public override AstRoot VisitExpressions(TSqlParser.ExpressionsContext context)
        {
            TSqlParser.ExpressionContext[] source = context.expression();
            AstExpressions list = new AstExpressions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.ExpressionContext item = ((TSqlParser.ExpressionContext)(enumerator.Current));
                AstExpression acceptResult = ((AstExpression)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// full_column_names : LR_BRACKET  full_column_name  (COMMA  full_column_name)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFull_column_names(TSqlParser.Full_column_namesContext context)
        {
            TSqlParser.Full_column_nameContext[] source = context.full_column_name();
            AstFullColumnNames list = new AstFullColumnNames(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Full_column_nameContext item = ((TSqlParser.Full_column_nameContext)(enumerator.Current));
                AstFullColumnName acceptResult = ((AstFullColumnName)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// expression_language : expression  (COMMA  LANGUAGE  expression)?
        /// </summary>
        public override AstRoot VisitExpression_language(TSqlParser.Expression_languageContext context)
        {
            TSqlParser.ExpressionContext[] source = context.expression();
            AstExpressionLanguage list = new AstExpressionLanguage(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.ExpressionContext item = ((TSqlParser.ExpressionContext)(enumerator.Current));
                AstExpression acceptResult = ((AstExpression)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// bulk_options : bulk_option  (COMMA  bulk_option)*
        /// </summary>
        public override AstRoot VisitBulk_options(TSqlParser.Bulk_optionsContext context)
        {
            TSqlParser.Bulk_optionContext[] source = context.bulk_option();
            AstBulkOptions list = new AstBulkOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Bulk_optionContext item = ((TSqlParser.Bulk_optionContext)(enumerator.Current));
                AstBulkOption acceptResult = ((AstBulkOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// full_column_name_list : full_column_name  (COMMA  full_column_name)*
        /// </summary>
        public override AstRoot VisitFull_column_name_list(TSqlParser.Full_column_name_listContext context)
        {
            TSqlParser.Full_column_nameContext[] source = context.full_column_name();
            AstFullColumnNameList list = new AstFullColumnNameList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Full_column_nameContext item = ((TSqlParser.Full_column_nameContext)(enumerator.Current));
                AstFullColumnName acceptResult = ((AstFullColumnName)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_declaration : column_declaration  (COMMA  column_declaration)*
        /// </summary>
        public override AstRoot VisitSchema_declaration(TSqlParser.Schema_declarationContext context)
        {
            TSqlParser.Column_declarationContext[] source = context.column_declaration();
            AstSchemaDeclaration list = new AstSchemaDeclaration(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Column_declarationContext item = ((TSqlParser.Column_declarationContext)(enumerator.Current));
                AstColumnDeclaration acceptResult = ((AstColumnDeclaration)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// json_declaration : json_column_declaration  (COMMA  json_column_declaration)*
        /// </summary>
        public override AstRoot VisitJson_declaration(TSqlParser.Json_declarationContext context)
        {
            TSqlParser.Json_column_declarationContext[] source = context.json_column_declaration();
            AstJsonDeclaration list = new AstJsonDeclaration(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Json_column_declarationContext item = ((TSqlParser.Json_column_declarationContext)(enumerator.Current));
                AstJsonColumnDeclaration acceptResult = ((AstJsonColumnDeclaration)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// expression2 : expression  (COMMA  expression)?
        /// </summary>
        public override AstRoot VisitExpression2(TSqlParser.Expression2Context context)
        {
            TSqlParser.ExpressionContext[] source = context.expression();
            AstExpression2 list = new AstExpression2(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.ExpressionContext item = ((TSqlParser.ExpressionContext)(enumerator.Current));
                AstExpression acceptResult = ((AstExpression)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_sources : table_source  (COMMA  table_source)*
        /// </summary>
        public override AstRoot VisitTable_sources(TSqlParser.Table_sourcesContext context)
        {
            TSqlParser.Table_sourceContext[] source = context.table_source();
            AstTableSources list = new AstTableSources(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Table_sourceContext item = ((TSqlParser.Table_sourceContext)(enumerator.Current));
                AstTableSource acceptResult = ((AstTableSource)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// select_list : select_list_elem  (COMMA  select_list_elem)*
        /// </summary>
        public override AstRoot VisitSelect_list(TSqlParser.Select_listContext context)
        {
            TSqlParser.Select_list_elemContext[] source = context.select_list_elem();
            AstSelectList list = new AstSelectList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Select_list_elemContext item = ((TSqlParser.Select_list_elemContext)(enumerator.Current));
                AstSelectListElem acceptResult = ((AstSelectListElem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// udt_method_arguments : LR_BRACKET  execute_var_string  (COMMA  execute_var_string)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUdt_method_arguments(TSqlParser.Udt_method_argumentsContext context)
        {
            TSqlParser.Execute_var_stringContext[] source = context.execute_var_string();
            AstUdtMethodArguments list = new AstUdtMethodArguments(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Execute_var_stringContext item = ((TSqlParser.Execute_var_stringContext)(enumerator.Current));
                AstExecuteVarString acceptResult = ((AstExecuteVarString)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// optimize_for_args : optimize_for_arg  (COMMA  optimize_for_arg)*
        /// </summary>
        public override AstRoot VisitOptimize_for_args(TSqlParser.Optimize_for_argsContext context)
        {
            TSqlParser.Optimize_for_argContext[] source = context.optimize_for_arg();
            AstOptimizeForArgs list = new AstOptimizeForArgs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Optimize_for_argContext item = ((TSqlParser.Optimize_for_argContext)(enumerator.Current));
                AstOptimizeForArg acceptResult = ((AstOptimizeForArg)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// update_option_clause : OPTION  LR_BRACKET  update_option  (COMMA  update_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUpdate_option_clause(TSqlParser.Update_option_clauseContext context)
        {
            TSqlParser.Update_optionContext[] source = context.update_option();
            AstUpdateOptionClause list = new AstUpdateOptionClause(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Update_optionContext item = ((TSqlParser.Update_optionContext)(enumerator.Current));
                AstUpdateOption acceptResult = ((AstUpdateOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// grouping_sets_list : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public override AstRoot VisitGrouping_sets_list(TSqlParser.Grouping_sets_listContext context)
        {
            TSqlParser.Group_by_itemContext[] source = context.group_by_item();
            AstGroupingSetsList list = new AstGroupingSetsList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Group_by_itemContext item = ((TSqlParser.Group_by_itemContext)(enumerator.Current));
                AstGroupByItem acceptResult = ((AstGroupByItem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// groupSet_list : grouping_sets_item  (COMMA  grouping_sets_item)*
        /// </summary>
        public override AstRoot VisitGroupSet_list(TSqlParser.GroupSet_listContext context)
        {
            TSqlParser.Grouping_sets_itemContext[] source = context.grouping_sets_item();
            AstGroupsetList list = new AstGroupsetList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Grouping_sets_itemContext item = ((TSqlParser.Grouping_sets_itemContext)(enumerator.Current));
                AstGroupingSetsItem acceptResult = ((AstGroupingSetsItem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// groupBys_list : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public override AstRoot VisitGroupBys_list(TSqlParser.GroupBys_listContext context)
        {
            TSqlParser.Group_by_itemContext[] source = context.group_by_item();
            AstGroupbysList list = new AstGroupbysList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Group_by_itemContext item = ((TSqlParser.Group_by_itemContext)(enumerator.Current));
                AstGroupByItem acceptResult = ((AstGroupByItem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// with_expression : WITH  common_table_expression  (COMMA  common_table_expression)*
        /// </summary>
        public override AstRoot VisitWith_expression(TSqlParser.With_expressionContext context)
        {
            TSqlParser.Common_table_expressionContext[] source = context.common_table_expression();
            AstWithExpression list = new AstWithExpression(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Common_table_expressionContext item = ((TSqlParser.Common_table_expressionContext)(enumerator.Current));
                AstCommonTableExpression acceptResult = ((AstCommonTableExpression)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// special_lists : special_list  (COMMA  special_list)*
        /// </summary>
        public override AstRoot VisitSpecial_lists(TSqlParser.Special_listsContext context)
        {
            TSqlParser.Special_listContext[] source = context.special_list();
            AstSpecialLists list = new AstSpecialLists(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Special_listContext item = ((TSqlParser.Special_listContext)(enumerator.Current));
                AstSpecialList acceptResult = ((AstSpecialList)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// local_ids : local_id  (COMMA  local_id)*
        /// </summary>
        public override AstRoot VisitLocal_ids(TSqlParser.Local_idsContext context)
        {
            TSqlParser.Local_idContext[] source = context.local_id();
            AstLocalIds list = new AstLocalIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Local_idContext item = ((TSqlParser.Local_idContext)(enumerator.Current));
                AstLocalId acceptResult = ((AstLocalId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// alter_table_index_options : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_table_index_options(TSqlParser.Alter_table_index_optionsContext context)
        {
            TSqlParser.Alter_table_index_optionContext[] source = context.alter_table_index_option();
            AstAlterTableIndexOptions list = new AstAlterTableIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Alter_table_index_optionContext item = ((TSqlParser.Alter_table_index_optionContext)(enumerator.Current));
                AstAlterTableIndexOption acceptResult = ((AstAlterTableIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// connection_nodes : connection_node  (COMMA  connection_node)*
        /// </summary>
        public override AstRoot VisitConnection_nodes(TSqlParser.Connection_nodesContext context)
        {
            TSqlParser.Connection_nodeContext[] source = context.connection_node();
            AstConnectionNodes list = new AstConnectionNodes(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Connection_nodeContext item = ((TSqlParser.Connection_nodeContext)(enumerator.Current));
                AstConnectionNode acceptResult = ((AstConnectionNode)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// dbcc_options : simple_id  (COMMA  simple_id)?
        /// </summary>
        public override AstRoot VisitDbcc_options(TSqlParser.Dbcc_optionsContext context)
        {
            TSqlParser.Simple_idContext[] source = context.simple_id();
            AstDbccOptions list = new AstDbccOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Simple_idContext item = ((TSqlParser.Simple_idContext)(enumerator.Current));
                AstSimpleId acceptResult = ((AstSimpleId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// execute_var_strings : execute_var_string  (COMMA  execute_var_string)*
        /// </summary>
        public override AstRoot VisitExecute_var_strings(TSqlParser.Execute_var_stringsContext context)
        {
            TSqlParser.Execute_var_stringContext[] source = context.execute_var_string();
            AstExecuteVarStrings list = new AstExecuteVarStrings(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Execute_var_stringContext item = ((TSqlParser.Execute_var_stringContext)(enumerator.Current));
                AstExecuteVarString acceptResult = ((AstExecuteVarString)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// execute_statement_arg_nameds : execute_statement_arg_named  (COMMA  execute_statement_arg_named)*
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_nameds(TSqlParser.Execute_statement_arg_namedsContext context)
        {
            TSqlParser.Execute_statement_arg_namedContext[] source = context.execute_statement_arg_named();
            AstExecuteStatementArgNameds list = new AstExecuteStatementArgNameds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Execute_statement_arg_namedContext item = ((TSqlParser.Execute_statement_arg_namedContext)(enumerator.Current));
                AstExecuteStatementArgNamed acceptResult = ((AstExecuteStatementArgNamed)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// execute_statement_args : execute_statement_arg  (COMMA  execute_statement_arg)*
        /// </summary>
        public override AstRoot VisitExecute_statement_args(TSqlParser.Execute_statement_argsContext context)
        {
            TSqlParser.Execute_statement_argContext[] source = context.execute_statement_arg();
            AstExecuteStatementArgs list = new AstExecuteStatementArgs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Execute_statement_argContext item = ((TSqlParser.Execute_statement_argContext)(enumerator.Current));
                AstExecuteStatementArg acceptResult = ((AstExecuteStatementArg)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// declare_locals : declare_local  (COMMA  loc += declare_local)*
        /// </summary>
        public override AstRoot VisitDeclare_locals(TSqlParser.Declare_localsContext context)
        {
            TSqlParser.Declare_localContext[] source = context.declare_local();
            AstDeclareLocals list = new AstDeclareLocals(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Declare_localContext item = ((TSqlParser.Declare_localContext)(enumerator.Current));
                AstDeclareLocal acceptResult = ((AstDeclareLocal)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// xml_declarations : xml_declaration  (COMMA  xml_declaration)*
        /// </summary>
        public override AstRoot VisitXml_declarations(TSqlParser.Xml_declarationsContext context)
        {
            TSqlParser.Xml_declarationContext[] source = context.xml_declaration();
            AstXmlDeclarations list = new AstXmlDeclarations(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Xml_declarationContext item = ((TSqlParser.Xml_declarationContext)(enumerator.Current));
                AstXmlDeclaration acceptResult = ((AstXmlDeclaration)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_view_refs : schema_view_ref  (COMMA  schema_view_ref)*
        /// </summary>
        public override AstRoot VisitSchema_view_refs(TSqlParser.Schema_view_refsContext context)
        {
            TSqlParser.Schema_view_refContext[] source = context.schema_view_ref();
            AstSchemaViewRefs list = new AstSchemaViewRefs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Schema_view_refContext item = ((TSqlParser.Schema_view_refContext)(enumerator.Current));
                AstSchemaViewRef acceptResult = ((AstSchemaViewRef)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// table_names : full_table_ref  (COMMA  full_table_ref)*
        /// </summary>
        public override AstRoot VisitTable_names(TSqlParser.Table_namesContext context)
        {
            TSqlParser.Full_table_refContext[] source = context.full_table_ref();
            AstTableNames list = new AstTableNames(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Full_table_refContext item = ((TSqlParser.Full_table_refContext)(enumerator.Current));
                AstFullTableRef acceptResult = ((AstFullTableRef)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// func_proc_name_schemas : schema_func_proc_ref  (COMMA  schema_func_proc_ref)*
        /// </summary>
        public override AstRoot VisitFunc_proc_name_schemas(TSqlParser.Func_proc_name_schemasContext context)
        {
            TSqlParser.Schema_func_proc_refContext[] source = context.schema_func_proc_ref();
            AstFuncProcNameSchemas list = new AstFuncProcNameSchemas(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Schema_func_proc_refContext item = ((TSqlParser.Schema_func_proc_refContext)(enumerator.Current));
                AstSchemaFuncProcRef acceptResult = ((AstSchemaFuncProcRef)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// drop_backward_compatible_indexs : drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*
        /// </summary>
        public override AstRoot VisitDrop_backward_compatible_indexs(TSqlParser.Drop_backward_compatible_indexsContext context)
        {
            TSqlParser.Drop_backward_compatible_indexContext[] source = context.drop_backward_compatible_index();
            AstDropBackwardCompatibleIndexs list = new AstDropBackwardCompatibleIndexs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Drop_backward_compatible_indexContext item = ((TSqlParser.Drop_backward_compatible_indexContext)(enumerator.Current));
                AstDropBackwardCompatibleIndex acceptResult = ((AstDropBackwardCompatibleIndex)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_indexs : drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatial_index)*
        /// </summary>
        public override AstRoot VisitDrop_relational_or_xml_or_spatial_indexs(TSqlParser.Drop_relational_or_xml_or_spatial_indexsContext context)
        {
            TSqlParser.Drop_relational_or_xml_or_spatial_indexContext[] source = context.drop_relational_or_xml_or_spatial_index();
            AstDropRelationalOrXmlOrSpatialIndexs list = new AstDropRelationalOrXmlOrSpatialIndexs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Drop_relational_or_xml_or_spatial_indexContext item = ((TSqlParser.Drop_relational_or_xml_or_spatial_indexContext)(enumerator.Current));
                AstDropRelationalOrXmlOrSpatialIndex acceptResult = ((AstDropRelationalOrXmlOrSpatialIndex)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// change_tracking_option_lists : change_tracking_option_list  (COMMA  change_tracking_option_list)*
        /// </summary>
        public override AstRoot VisitChange_tracking_option_lists(TSqlParser.Change_tracking_option_listsContext context)
        {
            TSqlParser.Change_tracking_option_listContext[] source = context.change_tracking_option_list();
            AstChangeTrackingOptionLists list = new AstChangeTrackingOptionLists(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Change_tracking_option_listContext item = ((TSqlParser.Change_tracking_option_listContext)(enumerator.Current));
                AstChangeTrackingOptionList acceptResult = ((AstChangeTrackingOptionList)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// filespecs : filespec  (COMMA  filespec)*
        /// </summary>
        public override AstRoot VisitFilespecs(TSqlParser.FilespecsContext context)
        {
            TSqlParser.FilespecContext[] source = context.filespec();
            AstFilespecs list = new AstFilespecs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.FilespecContext item = ((TSqlParser.FilespecContext)(enumerator.Current));
                AstFilespec acceptResult = ((AstFilespec)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// view_attributes : WITH  view_attribute  (COMMA  view_attribute)*
        /// </summary>
        public override AstRoot VisitView_attributes(TSqlParser.View_attributesContext context)
        {
            TSqlParser.View_attributeContext[] source = context.view_attribute();
            AstViewAttributes list = new AstViewAttributes(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.View_attributeContext item = ((TSqlParser.View_attributeContext)(enumerator.Current));
                AstViewAttribute acceptResult = ((AstViewAttribute)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// create_table_index_options : WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)*  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_table_index_options(TSqlParser.Create_table_index_optionsContext context)
        {
            TSqlParser.Create_table_index_optionContext[] source = context.create_table_index_option();
            AstCreateTableIndexOptions list = new AstCreateTableIndexOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Create_table_index_optionContext item = ((TSqlParser.Create_table_index_optionContext)(enumerator.Current));
                AstCreateTableIndexOption acceptResult = ((AstCreateTableIndexOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// tableoptions : tableoption  (COMMA  tableoption)*
        /// </summary>
        public override AstRoot VisitTableoptions(TSqlParser.TableoptionsContext context)
        {
            TSqlParser.TableoptionContext[] source = context.tableoption();
            AstTableoptions list = new AstTableoptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.TableoptionContext item = ((TSqlParser.TableoptionContext)(enumerator.Current));
                AstTableoption acceptResult = ((AstTableoption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// alter_user_items : alter_user_item  (COMMA  alter_user_item)*
        /// </summary>
        public override AstRoot VisitAlter_user_items(TSqlParser.Alter_user_itemsContext context)
        {
            TSqlParser.Alter_user_itemContext[] source = context.alter_user_item();
            AstAlterUserItems list = new AstAlterUserItems(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Alter_user_itemContext item = ((TSqlParser.Alter_user_itemContext)(enumerator.Current));
                AstAlterUserItem acceptResult = ((AstAlterUserItem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// contract_refs : contract_ref  (COMMA  contract_ref)*
        /// </summary>
        public override AstRoot VisitContract_refs(TSqlParser.Contract_refsContext context)
        {
            TSqlParser.Contract_refContext[] source = context.contract_ref();
            AstContractRefs list = new AstContractRefs(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Contract_refContext item = ((TSqlParser.Contract_refContext)(enumerator.Current));
                AstContractRef acceptResult = ((AstContractRef)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// alter_service_contracts : contract_id  (COMMA  contract_id)
        /// </summary>
        public override AstRoot VisitAlter_service_contracts(TSqlParser.Alter_service_contractsContext context)
        {
            TSqlParser.Contract_idContext[] source = context.contract_id();
            AstAlterServiceContracts list = new AstAlterServiceContracts(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Contract_idContext item = ((TSqlParser.Contract_idContext)(enumerator.Current));
                AstContractId acceptResult = ((AstContractId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// decimal_ranges : decimal_range  (COMMA?  decimal_range)*
        /// </summary>
        public override AstRoot VisitDecimal_ranges(TSqlParser.Decimal_rangesContext context)
        {
            TSqlParser.Decimal_rangeContext[] source = context.decimal_range();
            AstDecimalRanges list = new AstDecimalRanges(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Decimal_rangeContext item = ((TSqlParser.Decimal_rangeContext)(enumerator.Current));
                AstDecimalRange acceptResult = ((AstDecimalRange)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// server_audit_file_infos : server_audit_file_info  (COMMA  server_audit_file_info)*
        /// </summary>
        public override AstRoot VisitServer_audit_file_infos(TSqlParser.Server_audit_file_infosContext context)
        {
            TSqlParser.Server_audit_file_infoContext[] source = context.server_audit_file_info();
            AstServerAuditFileInfos list = new AstServerAuditFileInfos(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Server_audit_file_infoContext item = ((TSqlParser.Server_audit_file_infoContext)(enumerator.Current));
                AstServerAuditFileInfo acceptResult = ((AstServerAuditFileInfo)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// clause_json_infos : (COMMA  clause_json_info)+
        /// </summary>
        public override AstRoot VisitClause_json_infos(TSqlParser.Clause_json_infosContext context)
        {
            TSqlParser.Clause_json_infoContext[] source = context.clause_json_info();
            AstClauseJsonInfos list = new AstClauseJsonInfos(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Clause_json_infoContext item = ((TSqlParser.Clause_json_infoContext)(enumerator.Current));
                AstClauseJsonInfo acceptResult = ((AstClauseJsonInfo)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// contract_items : contract_item  (COMMA  contract_item+)*
        /// </summary>
        public override AstRoot VisitContract_items(TSqlParser.Contract_itemsContext context)
        {
            TSqlParser.Contract_itemContext[] source = context.contract_item();
            AstContractItems list = new AstContractItems(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Contract_itemContext item = ((TSqlParser.Contract_itemContext)(enumerator.Current));
                AstContractItem acceptResult = ((AstContractItem)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// date_options : date_option  (COMMA  date_option)+
        /// </summary>
        public override AstRoot VisitDate_options(TSqlParser.Date_optionsContext context)
        {
            TSqlParser.Date_optionContext[] source = context.date_option();
            AstDateOptions list = new AstDateOptions(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Date_optionContext item = ((TSqlParser.Date_optionContext)(enumerator.Current));
                AstDateOption acceptResult = ((AstDateOption)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// xml_common_directives : xml_common_directive  (COMMA  xml_common_directive)*
        /// </summary>
        public override AstRoot VisitXml_common_directives(TSqlParser.Xml_common_directivesContext context)
        {
            TSqlParser.Xml_common_directiveContext[] source = context.xml_common_directive();
            AstXmlCommonDirectives list = new AstXmlCommonDirectives(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Xml_common_directiveContext item = ((TSqlParser.Xml_common_directiveContext)(enumerator.Current));
                AstXmlCommonDirective acceptResult = ((AstXmlCommonDirective)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// receive_ids : receive_id  (COMMA  receive_id)+
        /// </summary>
        public override AstRoot VisitReceive_ids(TSqlParser.Receive_idsContext context)
        {
            TSqlParser.Receive_idContext[] source = context.receive_id();
            AstReceiveIds list = new AstReceiveIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Receive_idContext item = ((TSqlParser.Receive_idContext)(enumerator.Current));
                AstReceiveId acceptResult = ((AstReceiveId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// declare_set_cursor_common_partials : declare_set_cursor_common_partial+
        /// </summary>
        public override AstRoot VisitDeclare_set_cursor_common_partials(TSqlParser.Declare_set_cursor_common_partialsContext context)
        {
            TSqlParser.Declare_set_cursor_common_partialContext[] source = context.declare_set_cursor_common_partial();
            AstDeclareSetCursorCommonPartials list = new AstDeclareSetCursorCommonPartials(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Declare_set_cursor_common_partialContext item = ((TSqlParser.Declare_set_cursor_common_partialContext)(enumerator.Current));
                AstDeclareSetCursorCommonPartial acceptResult = ((AstDeclareSetCursorCommonPartial)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// column_definition_elements : column_definition_element+
        /// </summary>
        public override AstRoot VisitColumn_definition_elements(TSqlParser.Column_definition_elementsContext context)
        {
            TSqlParser.Column_definition_elementContext[] source = context.column_definition_element();
            AstColumnDefinitionElements list = new AstColumnDefinitionElements(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Column_definition_elementContext item = ((TSqlParser.Column_definition_elementContext)(enumerator.Current));
                AstColumnDefinitionElement acceptResult = ((AstColumnDefinitionElement)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// file_group_list : file_group_assign  (COMMA  file_group_assign)*
        /// </summary>
        public override AstRoot VisitFile_group_list(TSqlParser.File_group_listContext context)
        {
            TSqlParser.File_group_assignContext[] source = context.file_group_assign();
            AstFileGroupList list = new AstFileGroupList(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.File_group_assignContext item = ((TSqlParser.File_group_assignContext)(enumerator.Current));
                AstFileGroupAssign acceptResult = ((AstFileGroupAssign)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// schema_table_ref_impacts : schema_table_ref_impact  (COMMA  schema_table_ref_impact)*
        /// </summary>
        public override AstRoot VisitSchema_table_ref_impacts(TSqlParser.Schema_table_ref_impactsContext context)
        {
            TSqlParser.Schema_table_ref_impactContext[] source = context.schema_table_ref_impact();
            AstSchemaTableRefImpacts list = new AstSchemaTableRefImpacts(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Schema_table_ref_impactContext item = ((TSqlParser.Schema_table_ref_impactContext)(enumerator.Current));
                AstSchemaTableRefImpact acceptResult = ((AstSchemaTableRefImpact)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
        
        /// <summary>
        /// notification_ids : notification_id  (COMMA  notification_id)*
        /// </summary>
        public override AstRoot VisitNotification_ids(TSqlParser.Notification_idsContext context)
        {
            TSqlParser.Notification_idContext[] source = context.notification_id();
            AstNotificationIds list = new AstNotificationIds(context, source.Length);
            for (IEnumerator enumerator = source.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                TSqlParser.Notification_idContext item = ((TSqlParser.Notification_idContext)(enumerator.Current));
                AstNotificationId acceptResult = ((AstNotificationId)(item.Accept(this)));
                if ((acceptResult != null))
                {
                    list.Add(acceptResult);
                }
            }
            return list;
        }
    }
}
