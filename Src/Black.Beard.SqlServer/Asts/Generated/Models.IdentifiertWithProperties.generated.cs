#nullable disable
// Generated by ScriptClassIdentifiertWithProperties.cs (vendredi 28 avril 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Asts
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    /// <summary>
    /// drop_statistics
    /// 	 : DROP  STATISTICS  full_table_ref_columns
    /// </summary>
    public partial class AstDropStatistics : AstBnfRule
    {
        
        private AstFullTableRefColumns _fullTableRefColumns;
        
        private static string _ruleValue = "DROP  STATISTICS  full_table_ref_columns\r\n";
        
        private static string _ruleName = "drop_statistics";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDropStatistics(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRefColumns>())
                {
                    this._fullTableRefColumns = ((AstFullTableRefColumns)(enumerator.Current));
                }
            }
        }
        
        public AstDropStatistics(Position p, AstFullTableRefColumns fullTableRefColumns) : 
                base(p)
        {
            this._fullTableRefColumns = fullTableRefColumns;
        }
        
        public AstDropStatistics(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRefColumns>())
                {
                    this._fullTableRefColumns = ((AstFullTableRefColumns)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRefColumns FullTableRefColumns
        {
            get
            {
                return this._fullTableRefColumns;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatistics(this);
        }
        
        public static AstDropStatistics? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// drop_statistics : 
        ///    DROP STATISTICS full_table_ref_columns 
        /// </summary>
        public static AstDropStatistics New(AstFullTableRefColumns fullTableRefColumns)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRefColumns);
            return new AstDropStatistics(Position.Default, list);
        }
    }
    
    /// <summary>
    /// full_table_ref_column
    /// 	 : (full_table_ref  DOT)?  name = id_
    /// </summary>
    public partial class AstFullTableRefColumn : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstId _id;
        
        private static string _ruleValue = "(full_table_ref  DOT)?  name = id_\r\n";
        
        private static string _ruleName = "full_table_ref_column";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFullTableRefColumn(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstFullTableRefColumn(Position p, AstFullTableRef fullTableRef, AstId id) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._id = id;
        }
        
        public AstFullTableRefColumn(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableRefColumn(this);
        }
        
        public static AstFullTableRefColumn? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// full_table_ref_column : 
        ///    full_table_ref . name=id_ 
        /// </summary>
        public static AstFullTableRefColumn New(AstFullTableRef fullTableRef, AstId name)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(name);
            return new AstFullTableRefColumn(Position.Default, list);
        }
    }
    
    /// <summary>
    /// partition_function
    /// 	 : (database_id  DOT)?  DOLLAR_PARTITION  DOT  function_id  LR_BRACKET  expression  RR_BRACKET
    /// </summary>
    public partial class AstPartitionFunction : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstFunctionId _functionId;
        
        private AstExpression _expression;
        
        private static string _ruleValue = "(database_id  DOT)?  DOLLAR_PARTITION  DOT  function_id  LR_BRACKET  expression  " +
            "RR_BRACKET\r\n";
        
        private static string _ruleName = "partition_function";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPartitionFunction(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPartitionFunction(Position p, AstDatabaseId databaseId, AstFunctionId functionId, AstExpression expression) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._functionId = functionId;
            this._expression = expression;
        }
        
        public AstPartitionFunction(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunction(this);
        }
        
        public static AstPartitionFunction? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// partition_function : 
        ///    database_id . DOLLAR_PARTITION . function_id ( expression ) 
        /// </summary>
        public static AstPartitionFunction New(AstDatabaseId databaseId, AstFunctionId functionId, AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(functionId);
            list.Add(expression);
            return new AstPartitionFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_database_schema_object_ref
    /// 	 : (server_id  DOT)?  (database_id  DOT)?  (schema_identifier  DOT)?  object_identifier
    /// </summary>
    public partial class AstServerDatabaseSchemaObjectRef : AstBnfRule
    {
        
        private AstServerId _serverId;
        
        private AstDatabaseId _databaseId;
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstObjectIdentifier _objectIdentifier;
        
        private static string _ruleValue = "(server_id  DOT)?  (database_id  DOT)?  (schema_identifier  DOT)?  object_identif" +
            "ier\r\n";
        
        private static string _ruleName = "server_database_schema_object_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstServerDatabaseSchemaObjectRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstServerDatabaseSchemaObjectRef(Position p, AstServerId serverId, AstDatabaseId databaseId, AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier) : 
                base(p)
        {
            this._serverId = serverId;
            this._databaseId = databaseId;
            this._schemaIdentifier = schemaIdentifier;
            this._objectIdentifier = objectIdentifier;
        }
        
        public AstServerDatabaseSchemaObjectRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstObjectIdentifier ObjectIdentifier
        {
            get
            {
                return this._objectIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerDatabaseSchemaObjectRef(this);
        }
        
        public static AstServerDatabaseSchemaObjectRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// server_database_schema_object_ref : 
        ///    server_id . database_id . schema_identifier . object_identifier 
        /// </summary>
        public static AstServerDatabaseSchemaObjectRef New(AstServerId serverId, AstDatabaseId databaseId, AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverId);
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(objectIdentifier);
            return new AstServerDatabaseSchemaObjectRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_stoplist_ref
    /// 	 : (database_id  DOT)?  stoplist_id
    /// </summary>
    public partial class AstDatabaseStoplistRef : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstStoplistId _stoplistId;
        
        private static string _ruleValue = "(database_id  DOT)?  stoplist_id\r\n";
        
        private static string _ruleName = "database_stoplist_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseStoplistRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseStoplistRef(Position p, AstDatabaseId databaseId, AstStoplistId stoplistId) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._stoplistId = stoplistId;
        }
        
        public AstDatabaseStoplistRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseStoplistRef(this);
        }
        
        public static AstDatabaseStoplistRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// database_stoplist_ref : 
        ///    database_id . stoplist_id 
        /// </summary>
        public static AstDatabaseStoplistRef New(AstDatabaseId databaseId, AstStoplistId stoplistId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(stoplistId);
            return new AstDatabaseStoplistRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// event_module_package_action_ref
    /// 	 : (event_module_guid_id  DOT)?  event_package_id  DOT  action_id
    /// </summary>
    public partial class AstEventModulePackageActionRef : AstBnfRule
    {
        
        private AstEventModuleGuidId _eventModuleGuidId;
        
        private AstEventPackageId _eventPackageId;
        
        private AstActionId _actionId;
        
        private static string _ruleValue = "(event_module_guid_id  DOT)?  event_package_id  DOT  action_id\r\n";
        
        private static string _ruleName = "event_module_package_action_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventModulePackageActionRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModuleGuidId>())
                {
                    this._eventModuleGuidId = ((AstEventModuleGuidId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstActionId>())
                {
                    this._actionId = ((AstActionId)(enumerator.Current));
                }
            }
        }
        
        public AstEventModulePackageActionRef(Position p, AstEventModuleGuidId eventModuleGuidId, AstEventPackageId eventPackageId, AstActionId actionId) : 
                base(p)
        {
            this._eventModuleGuidId = eventModuleGuidId;
            this._eventPackageId = eventPackageId;
            this._actionId = actionId;
        }
        
        public AstEventModulePackageActionRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModuleGuidId>())
                {
                    this._eventModuleGuidId = ((AstEventModuleGuidId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstActionId>())
                {
                    this._actionId = ((AstActionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventModuleGuidId EventModuleGuidId
        {
            get
            {
                return this._eventModuleGuidId;
            }
        }
        
        public virtual AstEventPackageId EventPackageId
        {
            get
            {
                return this._eventPackageId;
            }
        }
        
        public virtual AstActionId ActionId
        {
            get
            {
                return this._actionId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModulePackageActionRef(this);
        }
        
        public static AstEventModulePackageActionRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// event_module_package_action_ref : 
        ///    event_module_guid_id . event_package_id . action_id 
        /// </summary>
        public static AstEventModulePackageActionRef New(AstEventModuleGuidId eventModuleGuidId, AstEventPackageId eventPackageId, AstActionId actionId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventModuleGuidId);
            list.Add(eventPackageId);
            list.Add(actionId);
            return new AstEventModulePackageActionRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_sequence_ref
    /// 	 : (schema_identifier  DOT)?  sequence_id
    /// </summary>
    public partial class AstSchemaSequenceRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstSequenceId _sequenceId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  sequence_id\r\n";
        
        private static string _ruleName = "schema_sequence_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaSequenceRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceId>())
                {
                    this._sequenceId = ((AstSequenceId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSequenceRef(Position p, AstSchemaIdentifier schemaIdentifier, AstSequenceId sequenceId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._sequenceId = sequenceId;
        }
        
        public AstSchemaSequenceRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceId>())
                {
                    this._sequenceId = ((AstSequenceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstSequenceId SequenceId
        {
            get
            {
                return this._sequenceId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSequenceRef(this);
        }
        
        public static AstSchemaSequenceRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_sequence_ref : 
        ///    schema_identifier . sequence_id 
        /// </summary>
        public static AstSchemaSequenceRef New(AstSchemaIdentifier schemaIdentifier, AstSequenceId sequenceId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(sequenceId);
            return new AstSchemaSequenceRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_queue_ref
    /// 	 : (schema_identifier  DOT)  queue_id
    /// </summary>
    public partial class AstSchemaQueueRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstQueueId _queueId;
        
        private static string _ruleValue = "(schema_identifier  DOT)  queue_id\r\n";
        
        private static string _ruleName = "schema_queue_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaQueueRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaQueueRef(Position p, AstSchemaIdentifier schemaIdentifier, AstQueueId queueId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._queueId = queueId;
        }
        
        public AstSchemaQueueRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstQueueId QueueId
        {
            get
            {
                return this._queueId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaQueueRef(this);
        }
        
        public static AstSchemaQueueRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_queue_ref : 
        ///    schema_identifier . queue_id 
        /// </summary>
        public static AstSchemaQueueRef New(AstSchemaIdentifier schemaIdentifier, AstQueueId queueId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(queueId);
            return new AstSchemaQueueRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// module_package_event_ref
    /// 	 : (event_module_guid_id  DOT)?  event_package_id  DOT  target_id
    /// </summary>
    public partial class AstModulePackageEventRef : AstBnfRule
    {
        
        private AstEventModuleGuidId _eventModuleGuidId;
        
        private AstEventPackageId _eventPackageId;
        
        private AstTargetId _targetId;
        
        private static string _ruleValue = "(event_module_guid_id  DOT)?  event_package_id  DOT  target_id\r\n";
        
        private static string _ruleName = "module_package_event_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstModulePackageEventRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModuleGuidId>())
                {
                    this._eventModuleGuidId = ((AstEventModuleGuidId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetId>())
                {
                    this._targetId = ((AstTargetId)(enumerator.Current));
                }
            }
        }
        
        public AstModulePackageEventRef(Position p, AstEventModuleGuidId eventModuleGuidId, AstEventPackageId eventPackageId, AstTargetId targetId) : 
                base(p)
        {
            this._eventModuleGuidId = eventModuleGuidId;
            this._eventPackageId = eventPackageId;
            this._targetId = targetId;
        }
        
        public AstModulePackageEventRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModuleGuidId>())
                {
                    this._eventModuleGuidId = ((AstEventModuleGuidId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetId>())
                {
                    this._targetId = ((AstTargetId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventModuleGuidId EventModuleGuidId
        {
            get
            {
                return this._eventModuleGuidId;
            }
        }
        
        public virtual AstEventPackageId EventPackageId
        {
            get
            {
                return this._eventPackageId;
            }
        }
        
        public virtual AstTargetId TargetId
        {
            get
            {
                return this._targetId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModulePackageEventRef(this);
        }
        
        public static AstModulePackageEventRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// module_package_event_ref : 
        ///    event_module_guid_id . event_package_id . target_id 
        /// </summary>
        public static AstModulePackageEventRef New(AstEventModuleGuidId eventModuleGuidId, AstEventPackageId eventPackageId, AstTargetId targetId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventModuleGuidId);
            list.Add(eventPackageId);
            list.Add(targetId);
            return new AstModulePackageEventRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_rule_ref
    /// 	 : (schema_identifier  DOT)?  rule_id
    /// </summary>
    public partial class AstSchemaRuleRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstRuleId _ruleId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  rule_id\r\n";
        
        private static string _ruleName = "schema_rule_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaRuleRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRuleId>())
                {
                    this._ruleId = ((AstRuleId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaRuleRef(Position p, AstSchemaIdentifier schemaIdentifier, AstRuleId ruleId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._ruleId = ruleId;
        }
        
        public AstSchemaRuleRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRuleId>())
                {
                    this._ruleId = ((AstRuleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstRuleId RuleId
        {
            get
            {
                return this._ruleId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaRuleRef(this);
        }
        
        public static AstSchemaRuleRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_rule_ref : 
        ///    schema_identifier . rule_id 
        /// </summary>
        public static AstSchemaRuleRef New(AstSchemaIdentifier schemaIdentifier, AstRuleId ruleId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(ruleId);
            return new AstSchemaRuleRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_module_ref
    /// 	 : (schema_identifier  DOT)?  module_id
    /// </summary>
    public partial class AstSchemaModuleRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstModuleId _moduleId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  module_id\r\n";
        
        private static string _ruleName = "schema_module_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaModuleRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstModuleId>())
                {
                    this._moduleId = ((AstModuleId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaModuleRef(Position p, AstSchemaIdentifier schemaIdentifier, AstModuleId moduleId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._moduleId = moduleId;
        }
        
        public AstSchemaModuleRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstModuleId>())
                {
                    this._moduleId = ((AstModuleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstModuleId ModuleId
        {
            get
            {
                return this._moduleId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaModuleRef(this);
        }
        
        public static AstSchemaModuleRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_module_ref : 
        ///    schema_identifier . module_id 
        /// </summary>
        public static AstSchemaModuleRef New(AstSchemaIdentifier schemaIdentifier, AstModuleId moduleId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(moduleId);
            return new AstSchemaModuleRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_schema_sequence_ref
    /// 	 : (database_id  DOT)?  schema_sequence_ref
    /// </summary>
    public partial class AstDatabaseSchemaSequenceRef : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        private static string _ruleValue = "(database_id  DOT)?  schema_sequence_ref\r\n";
        
        private static string _ruleName = "database_schema_sequence_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseSchemaSequenceRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaSequenceRef(Position p, AstDatabaseId databaseId, AstSchemaSequenceRef schemaSequenceRef) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._schemaSequenceRef = schemaSequenceRef;
        }
        
        public AstDatabaseSchemaSequenceRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaSequenceRef(this);
        }
        
        public static AstDatabaseSchemaSequenceRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// database_schema_sequence_ref : 
        ///    database_id . schema_sequence_ref 
        /// </summary>
        public static AstDatabaseSchemaSequenceRef New(AstDatabaseId databaseId, AstSchemaSequenceRef schemaSequenceRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(schemaSequenceRef);
            return new AstDatabaseSchemaSequenceRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_object_statistics_ref
    /// 	 : schema_object_ref  DOT  statistics_id
    /// </summary>
    public partial class AstSchemaObjectStatisticsRef : AstBnfRule
    {
        
        private AstSchemaObjectRef _schemaObjectRef;
        
        private AstStatisticsId _statisticsId;
        
        private static string _ruleValue = "schema_object_ref  DOT  statistics_id\r\n";
        
        private static string _ruleName = "schema_object_statistics_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaObjectStatisticsRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectRef>())
                {
                    this._schemaObjectRef = ((AstSchemaObjectRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsId>())
                {
                    this._statisticsId = ((AstStatisticsId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaObjectStatisticsRef(Position p, AstSchemaObjectRef schemaObjectRef, AstStatisticsId statisticsId) : 
                base(p)
        {
            this._schemaObjectRef = schemaObjectRef;
            this._statisticsId = statisticsId;
        }
        
        public AstSchemaObjectStatisticsRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectRef>())
                {
                    this._schemaObjectRef = ((AstSchemaObjectRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsId>())
                {
                    this._statisticsId = ((AstStatisticsId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaObjectRef SchemaObjectRef
        {
            get
            {
                return this._schemaObjectRef;
            }
        }
        
        public virtual AstStatisticsId StatisticsId
        {
            get
            {
                return this._statisticsId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaObjectStatisticsRef(this);
        }
        
        public static AstSchemaObjectStatisticsRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_object_statistics_ref : 
        ///    schema_object_ref . statistics_id 
        /// </summary>
        public static AstSchemaObjectStatisticsRef New(AstSchemaObjectRef schemaObjectRef, AstStatisticsId statisticsId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaObjectRef);
            list.Add(statisticsId);
            return new AstSchemaObjectStatisticsRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_synonym_ref
    /// 	 : (schema_identifier  DOT)?  synonym_id
    /// </summary>
    public partial class AstSchemaSynonymRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstSynonymId _synonymId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  synonym_id\r\n";
        
        private static string _ruleName = "schema_synonym_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaSynonymRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSynonymId>())
                {
                    this._synonymId = ((AstSynonymId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSynonymRef(Position p, AstSchemaIdentifier schemaIdentifier, AstSynonymId synonymId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._synonymId = synonymId;
        }
        
        public AstSchemaSynonymRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSynonymId>())
                {
                    this._synonymId = ((AstSynonymId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstSynonymId SynonymId
        {
            get
            {
                return this._synonymId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSynonymRef(this);
        }
        
        public static AstSchemaSynonymRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_synonym_ref : 
        ///    schema_identifier . synonym_id 
        /// </summary>
        public static AstSchemaSynonymRef New(AstSchemaIdentifier schemaIdentifier, AstSynonymId synonymId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(synonymId);
            return new AstSchemaSynonymRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// default_ref
    /// 	 : (schema_identifier  DOT)?  id_
    /// </summary>
    public partial class AstDefaultRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstId _id;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  id_\r\n";
        
        private static string _ruleName = "default_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDefaultRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstDefaultRef(Position p, AstSchemaIdentifier schemaIdentifier, AstId id) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._id = id;
        }
        
        public AstDefaultRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultRef(this);
        }
        
        public static AstDefaultRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// default_ref : 
        ///    schema_identifier . id_ 
        /// </summary>
        public static AstDefaultRef New(AstSchemaIdentifier schemaIdentifier, AstId id)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(id);
            return new AstDefaultRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_sql_identifier_id
    /// 	 : (schema_identifier  DOT)?  sql_identifier_id
    /// </summary>
    public partial class AstSchemaSqlIdentifierId : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstSqlIdentifierId _sqlIdentifierId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  sql_identifier_id\r\n";
        
        private static string _ruleName = "schema_sql_identifier_id";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaSqlIdentifierId(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlIdentifierId>())
                {
                    this._sqlIdentifierId = ((AstSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSqlIdentifierId(Position p, AstSchemaIdentifier schemaIdentifier, AstSqlIdentifierId sqlIdentifierId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._sqlIdentifierId = sqlIdentifierId;
        }
        
        public AstSchemaSqlIdentifierId(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlIdentifierId>())
                {
                    this._sqlIdentifierId = ((AstSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstSqlIdentifierId SqlIdentifierId
        {
            get
            {
                return this._sqlIdentifierId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSqlIdentifierId(this);
        }
        
        public static AstSchemaSqlIdentifierId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_sql_identifier_id : 
        ///    schema_identifier . sql_identifier_id 
        /// </summary>
        public static AstSchemaSqlIdentifierId New(AstSchemaIdentifier schemaIdentifier, AstSqlIdentifierId sqlIdentifierId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(sqlIdentifierId);
            return new AstSchemaSqlIdentifierId(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_trigger_ref
    /// 	 : (schema_identifier  DOT)?  trigger_id
    /// </summary>
    public partial class AstSchemaTriggerRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstTriggerId _triggerId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  trigger_id\r\n";
        
        private static string _ruleName = "schema_trigger_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaTriggerRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTriggerId>())
                {
                    this._triggerId = ((AstTriggerId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaTriggerRef(Position p, AstSchemaIdentifier schemaIdentifier, AstTriggerId triggerId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._triggerId = triggerId;
        }
        
        public AstSchemaTriggerRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTriggerId>())
                {
                    this._triggerId = ((AstTriggerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstTriggerId TriggerId
        {
            get
            {
                return this._triggerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaTriggerRef(this);
        }
        
        public static AstSchemaTriggerRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_trigger_ref : 
        ///    schema_identifier . trigger_id 
        /// </summary>
        public static AstSchemaTriggerRef New(AstSchemaIdentifier schemaIdentifier, AstTriggerId triggerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(triggerId);
            return new AstSchemaTriggerRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_object_ref
    /// 	 : (schema_identifier  DOT)?  object_identifier
    /// </summary>
    public partial class AstSchemaObjectRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstObjectIdentifier _objectIdentifier;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  object_identifier\r\n";
        
        private static string _ruleName = "schema_object_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaObjectRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaObjectRef(Position p, AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._objectIdentifier = objectIdentifier;
        }
        
        public AstSchemaObjectRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstObjectIdentifier ObjectIdentifier
        {
            get
            {
                return this._objectIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaObjectRef(this);
        }
        
        public static AstSchemaObjectRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_object_ref : 
        ///    schema_identifier . object_identifier 
        /// </summary>
        public static AstSchemaObjectRef New(AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(objectIdentifier);
            return new AstSchemaObjectRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_security_policy_ref
    /// 	 : (schema_identifier  DOT)?  security_policy_id
    /// </summary>
    public partial class AstSchemaSecurityPolicyRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstSecurityPolicyId _securityPolicyId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  security_policy_id\r\n";
        
        private static string _ruleName = "schema_security_policy_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaSecurityPolicyRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPolicyId>())
                {
                    this._securityPolicyId = ((AstSecurityPolicyId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSecurityPolicyRef(Position p, AstSchemaIdentifier schemaIdentifier, AstSecurityPolicyId securityPolicyId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._securityPolicyId = securityPolicyId;
        }
        
        public AstSchemaSecurityPolicyRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPolicyId>())
                {
                    this._securityPolicyId = ((AstSecurityPolicyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstSecurityPolicyId SecurityPolicyId
        {
            get
            {
                return this._securityPolicyId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSecurityPolicyRef(this);
        }
        
        public static AstSchemaSecurityPolicyRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_security_policy_ref : 
        ///    schema_identifier . security_policy_id 
        /// </summary>
        public static AstSchemaSecurityPolicyRef New(AstSchemaIdentifier schemaIdentifier, AstSecurityPolicyId securityPolicyId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(securityPolicyId);
            return new AstSchemaSecurityPolicyRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_aggregate_ref
    /// 	 : (schema_identifier  DOT)?  aggregate_id
    /// </summary>
    public partial class AstSchemaAggregateRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstAggregateId _aggregateId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  aggregate_id\r\n";
        
        private static string _ruleName = "schema_aggregate_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaAggregateRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAggregateId>())
                {
                    this._aggregateId = ((AstAggregateId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaAggregateRef(Position p, AstSchemaIdentifier schemaIdentifier, AstAggregateId aggregateId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._aggregateId = aggregateId;
        }
        
        public AstSchemaAggregateRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAggregateId>())
                {
                    this._aggregateId = ((AstAggregateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstAggregateId AggregateId
        {
            get
            {
                return this._aggregateId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaAggregateRef(this);
        }
        
        public static AstSchemaAggregateRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_aggregate_ref : 
        ///    schema_identifier . aggregate_id 
        /// </summary>
        public static AstSchemaAggregateRef New(AstSchemaIdentifier schemaIdentifier, AstAggregateId aggregateId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(aggregateId);
            return new AstSchemaAggregateRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_schema_queue_ref
    /// 	 : (database_schema_ref  DOT)?  queue_id
    /// </summary>
    public partial class AstDatabaseSchemaQueueRef : AstBnfRule
    {
        
        private AstDatabaseSchemaRef _databaseSchemaRef;
        
        private AstQueueId _queueId;
        
        private static string _ruleValue = "(database_schema_ref  DOT)?  queue_id\r\n";
        
        private static string _ruleName = "database_schema_queue_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseSchemaQueueRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaRef>())
                {
                    this._databaseSchemaRef = ((AstDatabaseSchemaRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaQueueRef(Position p, AstDatabaseSchemaRef databaseSchemaRef, AstQueueId queueId) : 
                base(p)
        {
            this._databaseSchemaRef = databaseSchemaRef;
            this._queueId = queueId;
        }
        
        public AstDatabaseSchemaQueueRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaRef>())
                {
                    this._databaseSchemaRef = ((AstDatabaseSchemaRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueId>())
                {
                    this._queueId = ((AstQueueId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaRef DatabaseSchemaRef
        {
            get
            {
                return this._databaseSchemaRef;
            }
        }
        
        public virtual AstQueueId QueueId
        {
            get
            {
                return this._queueId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaQueueRef(this);
        }
        
        public static AstDatabaseSchemaQueueRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// database_schema_queue_ref : 
        ///    database_schema_ref . queue_id 
        /// </summary>
        public static AstDatabaseSchemaQueueRef New(AstDatabaseSchemaRef databaseSchemaRef, AstQueueId queueId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseSchemaRef);
            list.Add(queueId);
            return new AstDatabaseSchemaQueueRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_schema_ref
    /// 	 : (database_id  DOT)?  schema_identifier
    /// </summary>
    public partial class AstDatabaseSchemaRef : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private static string _ruleValue = "(database_id  DOT)?  schema_identifier\r\n";
        
        private static string _ruleName = "database_schema_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseSchemaRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaRef(Position p, AstDatabaseId databaseId, AstSchemaIdentifier schemaIdentifier) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._schemaIdentifier = schemaIdentifier;
        }
        
        public AstDatabaseSchemaRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaRef(this);
        }
        
        public static AstDatabaseSchemaRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// database_schema_ref : 
        ///    database_id . schema_identifier 
        /// </summary>
        public static AstDatabaseSchemaRef New(AstDatabaseId databaseId, AstSchemaIdentifier schemaIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            return new AstDatabaseSchemaRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_index
    /// 	 : (schema_identifier  DOT)?  table_or_view_id  DOT  index_id
    /// </summary>
    public partial class AstDropBackwardCompatibleIndex : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstTableOrViewId _tableOrViewId;
        
        private AstIndexId _indexId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  table_or_view_id  DOT  index_id\r\n";
        
        private static string _ruleName = "drop_backward_compatible_index";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDropBackwardCompatibleIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOrViewId>())
                {
                    this._tableOrViewId = ((AstTableOrViewId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
            }
        }
        
        public AstDropBackwardCompatibleIndex(Position p, AstSchemaIdentifier schemaIdentifier, AstTableOrViewId tableOrViewId, AstIndexId indexId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._tableOrViewId = tableOrViewId;
            this._indexId = indexId;
        }
        
        public AstDropBackwardCompatibleIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOrViewId>())
                {
                    this._tableOrViewId = ((AstTableOrViewId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstTableOrViewId TableOrViewId
        {
            get
            {
                return this._tableOrViewId;
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndex(this);
        }
        
        public static AstDropBackwardCompatibleIndex? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// drop_backward_compatible_index : 
        ///    schema_identifier . table_or_view_id . index_id 
        /// </summary>
        public static AstDropBackwardCompatibleIndex New(AstSchemaIdentifier schemaIdentifier, AstTableOrViewId tableOrViewId, AstIndexId indexId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(tableOrViewId);
            list.Add(indexId);
            return new AstDropBackwardCompatibleIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// complete_table_ref
    /// 	 : (server_id  DOT  DOT  schema_identifier  DOT | server_id  DOT  database_id  DOT  schema_identifier  DOT | database_id  DOT  schema_identifier?  DOT | schema_identifier  DOT)?  table_id
    /// </summary>
    public partial class AstCompleteTableRef : AstBnfRule
    {
        
        private AstServerId _serverId;
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstDatabaseId _databaseId;
        
        private AstTableId _tableId;
        
        private static string _ruleValue = "(server_id  DOT  DOT  schema_identifier  DOT | server_id  DOT  database_id  DOT  " +
            "schema_identifier  DOT | database_id  DOT  schema_identifier?  DOT | schema_iden" +
            "tifier  DOT)?  table_id\r\n";
        
        private static string _ruleName = "complete_table_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCompleteTableRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public AstCompleteTableRef(Position p, AstServerId serverId, AstSchemaIdentifier schemaIdentifier, AstDatabaseId databaseId, AstTableId tableId) : 
                base(p)
        {
            this._serverId = serverId;
            this._schemaIdentifier = schemaIdentifier;
            this._databaseId = databaseId;
            this._tableId = tableId;
        }
        
        public AstCompleteTableRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCompleteTableRef(this);
        }
        
        public static AstCompleteTableRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// complete_table_ref : 
        ///    server_id . . schema_identifier . table_id 
        /// </summary>
        public static AstCompleteTableRef New(AstServerId serverId, AstSchemaIdentifier schemaIdentifier, AstTableId tableId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverId);
            list.Add(schemaIdentifier);
            list.Add(tableId);
            return new AstCompleteTableRef(Position.Default, list);
        }
        
        /// <summary>
        /// complete_table_ref : 
        ///    server_id . database_id . schema_identifier . table_id 
        /// </summary>
        public static AstCompleteTableRef New(AstServerId serverId, AstDatabaseId databaseId, AstSchemaIdentifier schemaIdentifier, AstTableId tableId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverId);
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(tableId);
            return new AstCompleteTableRef(Position.Default, list);
        }
        
        /// <summary>
        /// complete_table_ref : 
        ///    database_id . schema_identifier? . table_id 
        /// </summary>
        public static AstCompleteTableRef New(AstDatabaseId databaseId, AstSchemaIdentifier? schemaIdentifier, AstTableId tableId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(tableId);
            return new AstCompleteTableRef(Position.Default, list);
        }
        
        /// <summary>
        /// complete_table_ref : 
        ///    schema_identifier . table_id 
        /// </summary>
        public static AstCompleteTableRef New(AstSchemaIdentifier schemaIdentifier, AstTableId tableId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(tableId);
            return new AstCompleteTableRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// full_table_ref
    /// 	 : database_schema_table_ref
    /// 	 | database_schema_ref?  blocking_hierarchy = BLOCKING_HIERARCHY
    /// </summary>
    public partial class AstFullTableRef : AstBnfRule
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private AstDatabaseSchemaRef? _databaseSchemaRef;
        
        private static string _ruleValue = "database_schema_table_ref\r\n | database_schema_ref?  blocking_hierarchy = BLOCKING" +
            "_HIERARCHY\r\n";
        
        private static string _ruleName = "full_table_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFullTableRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaRef?>())
                {
                    this._databaseSchemaRef = ((AstDatabaseSchemaRef?)(enumerator.Current));
                }
            }
        }
        
        public AstFullTableRef(Position p, AstDatabaseSchemaTableRef databaseSchemaTableRef, AstDatabaseSchemaRef? databaseSchemaRef) : 
                base(p)
        {
            this._databaseSchemaTableRef = databaseSchemaTableRef;
            this._databaseSchemaRef = databaseSchemaRef;
        }
        
        public AstFullTableRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaRef?>())
                {
                    this._databaseSchemaRef = ((AstDatabaseSchemaRef?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public virtual AstDatabaseSchemaRef? DatabaseSchemaRef
        {
            get
            {
                return this._databaseSchemaRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableRef(this);
        }
        
        public static AstFullTableRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// full_table_ref : 
        ///    database_schema_table_ref 
        /// </summary>
        public static AstFullTableRef New(AstDatabaseSchemaTableRef databaseSchemaTableRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseSchemaTableRef);
            return new AstFullTableRef(Position.Default, list);
        }
        
        /// <summary>
        /// full_table_ref : 
        ///    database_schema_ref? blocking_hierarchy=BLOCKING_HIERARCHY 
        /// </summary>
        public static AstFullTableRef New(AstDatabaseSchemaRef? databaseSchemaRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseSchemaRef);
            return new AstFullTableRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_schema_table_ref
    /// 	 : database_id?  DOT  schema_identifier?  DOT  table_id
    /// </summary>
    public partial class AstDatabaseSchemaTableRef : AstBnfRule
    {
        
        private AstDatabaseId? _databaseId;
        
        private AstSchemaIdentifier? _schemaIdentifier;
        
        private AstTableId _tableId;
        
        private static string _ruleValue = "database_id?  DOT  schema_identifier?  DOT  table_id\r\n";
        
        private static string _ruleName = "database_schema_table_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseSchemaTableRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId?>())
                {
                    this._databaseId = ((AstDatabaseId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaTableRef(Position p, AstDatabaseId? databaseId, AstSchemaIdentifier? schemaIdentifier, AstTableId tableId) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._schemaIdentifier = schemaIdentifier;
            this._tableId = tableId;
        }
        
        public AstDatabaseSchemaTableRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId?>())
                {
                    this._databaseId = ((AstDatabaseId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId? DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaIdentifier? SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaTableRef(this);
        }
        
        public static AstDatabaseSchemaTableRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// database_schema_table_ref : 
        ///    database_id? . schema_identifier? . table_id 
        /// </summary>
        public static AstDatabaseSchemaTableRef New(AstDatabaseId? databaseId, AstSchemaIdentifier? schemaIdentifier, AstTableId tableId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(tableId);
            return new AstDatabaseSchemaTableRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// entity_name_for_azure_dw_ref
    /// 	 : schema_identifier
    /// 	 | schema_identifier  DOT  object_identifier
    /// </summary>
    public partial class AstEntityNameForAzureDwRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstObjectIdentifier _objectIdentifier;
        
        private static string _ruleValue = "schema_identifier\r\n | schema_identifier  DOT  object_identifier\r\n";
        
        private static string _ruleName = "entity_name_for_azure_dw_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEntityNameForAzureDwRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstEntityNameForAzureDwRef(Position p, AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._objectIdentifier = objectIdentifier;
        }
        
        public AstEntityNameForAzureDwRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstObjectIdentifier ObjectIdentifier
        {
            get
            {
                return this._objectIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForAzureDwRef(this);
        }
        
        public static AstEntityNameForAzureDwRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// entity_name_for_azure_dw_ref : 
        ///    schema_identifier 
        /// </summary>
        public static AstEntityNameForAzureDwRef New(AstSchemaIdentifier schemaIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            return new AstEntityNameForAzureDwRef(Position.Default, list);
        }
        
        /// <summary>
        /// entity_name_for_azure_dw_ref : 
        ///    schema_identifier . object_identifier 
        /// </summary>
        public static AstEntityNameForAzureDwRef New(AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(objectIdentifier);
            return new AstEntityNameForAzureDwRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// entity_name_for_parallel_dw_ref
    /// 	 : schema_identifier
    /// 	 | schema_identifier  DOT  object_identifier
    /// </summary>
    public partial class AstEntityNameForParallelDwRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstObjectIdentifier _objectIdentifier;
        
        private static string _ruleValue = "schema_identifier\r\n | schema_identifier  DOT  object_identifier\r\n";
        
        private static string _ruleName = "entity_name_for_parallel_dw_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEntityNameForParallelDwRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstEntityNameForParallelDwRef(Position p, AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._objectIdentifier = objectIdentifier;
        }
        
        public AstEntityNameForParallelDwRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstObjectIdentifier ObjectIdentifier
        {
            get
            {
                return this._objectIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityNameForParallelDwRef(this);
        }
        
        public static AstEntityNameForParallelDwRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// entity_name_for_parallel_dw_ref : 
        ///    schema_identifier 
        /// </summary>
        public static AstEntityNameForParallelDwRef New(AstSchemaIdentifier schemaIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            return new AstEntityNameForParallelDwRef(Position.Default, list);
        }
        
        /// <summary>
        /// entity_name_for_parallel_dw_ref : 
        ///    schema_identifier . object_identifier 
        /// </summary>
        public static AstEntityNameForParallelDwRef New(AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(objectIdentifier);
            return new AstEntityNameForParallelDwRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// func_proc_name_database_schema_ref
    /// 	 : database_schema_function_ref
    /// 	 | schema_func_proc_ref
    /// </summary>
    public partial class AstFuncProcNameDatabaseSchemaRef : AstBnfRule
    {
        
        private AstDatabaseSchemaFunctionRef _databaseSchemaFunctionRef;
        
        private AstSchemaFuncProcRef _schemaFuncProcRef;
        
        private static string _ruleValue = "database_schema_function_ref\r\n | schema_func_proc_ref\r\n";
        
        private static string _ruleName = "func_proc_name_database_schema_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFuncProcNameDatabaseSchemaRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaFunctionRef>())
                {
                    this._databaseSchemaFunctionRef = ((AstDatabaseSchemaFunctionRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
            }
        }
        
        public AstFuncProcNameDatabaseSchemaRef(Position p, AstDatabaseSchemaFunctionRef databaseSchemaFunctionRef, AstSchemaFuncProcRef schemaFuncProcRef) : 
                base(p)
        {
            this._databaseSchemaFunctionRef = databaseSchemaFunctionRef;
            this._schemaFuncProcRef = schemaFuncProcRef;
        }
        
        public AstFuncProcNameDatabaseSchemaRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaFunctionRef>())
                {
                    this._databaseSchemaFunctionRef = ((AstDatabaseSchemaFunctionRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaFunctionRef DatabaseSchemaFunctionRef
        {
            get
            {
                return this._databaseSchemaFunctionRef;
            }
        }
        
        public virtual AstSchemaFuncProcRef SchemaFuncProcRef
        {
            get
            {
                return this._schemaFuncProcRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameDatabaseSchemaRef(this);
        }
        
        public static AstFuncProcNameDatabaseSchemaRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// func_proc_name_database_schema_ref : 
        ///    database_schema_function_ref 
        /// </summary>
        public static AstFuncProcNameDatabaseSchemaRef New(AstDatabaseSchemaFunctionRef databaseSchemaFunctionRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseSchemaFunctionRef);
            return new AstFuncProcNameDatabaseSchemaRef(Position.Default, list);
        }
        
        /// <summary>
        /// func_proc_name_database_schema_ref : 
        ///    schema_func_proc_ref 
        /// </summary>
        public static AstFuncProcNameDatabaseSchemaRef New(AstSchemaFuncProcRef schemaFuncProcRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaFuncProcRef);
            return new AstFuncProcNameDatabaseSchemaRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_schema_function_ref
    /// 	 : database_id?  DOT  schema_identifier?  DOT  function_id
    /// </summary>
    public partial class AstDatabaseSchemaFunctionRef : AstBnfRule
    {
        
        private AstDatabaseId? _databaseId;
        
        private AstSchemaIdentifier? _schemaIdentifier;
        
        private AstFunctionId _functionId;
        
        private static string _ruleValue = "database_id?  DOT  schema_identifier?  DOT  function_id\r\n";
        
        private static string _ruleName = "database_schema_function_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseSchemaFunctionRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId?>())
                {
                    this._databaseId = ((AstDatabaseId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSchemaFunctionRef(Position p, AstDatabaseId? databaseId, AstSchemaIdentifier? schemaIdentifier, AstFunctionId functionId) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._schemaIdentifier = schemaIdentifier;
            this._functionId = functionId;
        }
        
        public AstDatabaseSchemaFunctionRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId?>())
                {
                    this._databaseId = ((AstDatabaseId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId? DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaIdentifier? SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSchemaFunctionRef(this);
        }
        
        public static AstDatabaseSchemaFunctionRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// database_schema_function_ref : 
        ///    database_id? . schema_identifier? . function_id 
        /// </summary>
        public static AstDatabaseSchemaFunctionRef New(AstDatabaseId? databaseId, AstSchemaIdentifier? schemaIdentifier, AstFunctionId functionId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(functionId);
            return new AstDatabaseSchemaFunctionRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_func_proc_ref
    /// 	 : (schema_identifier  DOT)?  function_id
    /// </summary>
    public partial class AstSchemaFuncProcRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstFunctionId _functionId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  function_id\r\n";
        
        private static string _ruleName = "schema_func_proc_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaFuncProcRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaFuncProcRef(Position p, AstSchemaIdentifier schemaIdentifier, AstFunctionId functionId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._functionId = functionId;
        }
        
        public AstSchemaFuncProcRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaFuncProcRef(this);
        }
        
        public static AstSchemaFuncProcRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_func_proc_ref : 
        ///    schema_identifier . function_id 
        /// </summary>
        public static AstSchemaFuncProcRef New(AstSchemaIdentifier schemaIdentifier, AstFunctionId functionId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(functionId);
            return new AstSchemaFuncProcRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// full_column_ref
    /// 	 : server_id?  DOT  schema_identifier?  DOT  table_id?  DOT  column_id
    /// 	 | schema_identifier?  DOT  table_id?  DOT  column_id
    /// 	 | table_id?  DOT  column_id
    /// 	 | column_id
    /// </summary>
    public partial class AstFullColumnRef : AstBnfRule
    {
        
        private AstServerId? _serverId;
        
        private AstSchemaIdentifier? _schemaIdentifier;
        
        private AstTableId? _tableId;
        
        private AstColumnId _columnId;
        
        private static string _ruleValue = "server_id?  DOT  schema_identifier?  DOT  table_id?  DOT  column_id\r\n | schema_id" +
            "entifier?  DOT  table_id?  DOT  column_id\r\n | table_id?  DOT  column_id\r\n | colu" +
            "mn_id\r\n";
        
        private static string _ruleName = "full_column_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFullColumnRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId?>())
                {
                    this._serverId = ((AstServerId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId?>())
                {
                    this._tableId = ((AstTableId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public AstFullColumnRef(Position p, AstServerId? serverId, AstSchemaIdentifier? schemaIdentifier, AstTableId? tableId, AstColumnId columnId) : 
                base(p)
        {
            this._serverId = serverId;
            this._schemaIdentifier = schemaIdentifier;
            this._tableId = tableId;
            this._columnId = columnId;
        }
        
        public AstFullColumnRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId?>())
                {
                    this._serverId = ((AstServerId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId?>())
                {
                    this._tableId = ((AstTableId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId? ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstSchemaIdentifier? SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstTableId? TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnRef(this);
        }
        
        public static AstFullColumnRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// full_column_ref : 
        ///    server_id? . schema_identifier? . table_id? . column_id 
        /// </summary>
        public static AstFullColumnRef New(AstServerId? serverId, AstSchemaIdentifier? schemaIdentifier, AstTableId? tableId, AstColumnId columnId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverId);
            list.Add(schemaIdentifier);
            list.Add(tableId);
            list.Add(columnId);
            return new AstFullColumnRef(Position.Default, list);
        }
        
        /// <summary>
        /// full_column_ref : 
        ///    schema_identifier? . table_id? . column_id 
        /// </summary>
        public static AstFullColumnRef New(AstSchemaIdentifier? schemaIdentifier, AstTableId? tableId, AstColumnId columnId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(tableId);
            list.Add(columnId);
            return new AstFullColumnRef(Position.Default, list);
        }
        
        /// <summary>
        /// full_column_ref : 
        ///    table_id? . column_id 
        /// </summary>
        public static AstFullColumnRef New(AstTableId? tableId, AstColumnId columnId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableId);
            list.Add(columnId);
            return new AstFullColumnRef(Position.Default, list);
        }
        
        /// <summary>
        /// full_column_ref : 
        ///    column_id 
        /// </summary>
        public static AstFullColumnRef New(AstColumnId columnId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnId);
            return new AstFullColumnRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// entity_name
    /// 	 : (server_id  DOT  database_id  DOT  schema_identifier  DOT | database_id  DOT  schema_identifier?  DOT | schema_identifier  DOT)?  object_identifier
    /// </summary>
    public partial class AstEntityName : AstBnfRule
    {
        
        private AstServerId _serverId;
        
        private AstDatabaseId _databaseId;
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstObjectIdentifier _objectIdentifier;
        
        private static string _ruleValue = "(server_id  DOT  database_id  DOT  schema_identifier  DOT | database_id  DOT  sch" +
            "ema_identifier?  DOT | schema_identifier  DOT)?  object_identifier\r\n";
        
        private static string _ruleName = "entity_name";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEntityName(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstEntityName(Position p, AstServerId serverId, AstDatabaseId databaseId, AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier) : 
                base(p)
        {
            this._serverId = serverId;
            this._databaseId = databaseId;
            this._schemaIdentifier = schemaIdentifier;
            this._objectIdentifier = objectIdentifier;
        }
        
        public AstEntityName(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstObjectIdentifier>())
                {
                    this._objectIdentifier = ((AstObjectIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstObjectIdentifier ObjectIdentifier
        {
            get
            {
                return this._objectIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEntityName(this);
        }
        
        public static AstEntityName? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// entity_name : 
        ///    server_id . database_id . schema_identifier . object_identifier 
        /// </summary>
        public static AstEntityName New(AstServerId serverId, AstDatabaseId databaseId, AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverId);
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(objectIdentifier);
            return new AstEntityName(Position.Default, list);
        }
        
        /// <summary>
        /// entity_name : 
        ///    database_id . schema_identifier? . object_identifier 
        /// </summary>
        public static AstEntityName New(AstDatabaseId databaseId, AstSchemaIdentifier? schemaIdentifier, AstObjectIdentifier objectIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(objectIdentifier);
            return new AstEntityName(Position.Default, list);
        }
        
        /// <summary>
        /// entity_name : 
        ///    schema_identifier . object_identifier 
        /// </summary>
        public static AstEntityName New(AstSchemaIdentifier schemaIdentifier, AstObjectIdentifier objectIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(objectIdentifier);
            return new AstEntityName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_view_ref
    /// 	 : (schema_identifier  DOT)?  view_id
    /// </summary>
    public partial class AstSchemaViewRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstViewId _viewId;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  view_id\r\n";
        
        private static string _ruleName = "schema_view_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaViewRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewId>())
                {
                    this._viewId = ((AstViewId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaViewRef(Position p, AstSchemaIdentifier schemaIdentifier, AstViewId viewId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._viewId = viewId;
        }
        
        public AstSchemaViewRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewId>())
                {
                    this._viewId = ((AstViewId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstViewId ViewId
        {
            get
            {
                return this._viewId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaViewRef(this);
        }
        
        public static AstSchemaViewRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_view_ref : 
        ///    schema_identifier . view_id 
        /// </summary>
        public static AstSchemaViewRef New(AstSchemaIdentifier schemaIdentifier, AstViewId viewId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(viewId);
            return new AstSchemaViewRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_type_ref
    /// 	 : (schema_identifier  DOT)?  id_
    /// </summary>
    public partial class AstSchemaTypeRef : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstId _id;
        
        private static string _ruleValue = "(schema_identifier  DOT)?  id_\r\n";
        
        private static string _ruleName = "schema_type_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaTypeRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaTypeRef(Position p, AstSchemaIdentifier schemaIdentifier, AstId id) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._id = id;
        }
        
        public AstSchemaTypeRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaTypeRef(this);
        }
        
        public static AstSchemaTypeRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// schema_type_ref : 
        ///    schema_identifier . id_ 
        /// </summary>
        public static AstSchemaTypeRef New(AstSchemaIdentifier schemaIdentifier, AstId id)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(id);
            return new AstSchemaTypeRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_source_list_ref
    /// 	 : (database_id  DOT)?  source_list_id
    /// </summary>
    public partial class AstDatabaseSourceListRef : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstSourceListId _sourceListId;
        
        private static string _ruleValue = "(database_id  DOT)?  source_list_id\r\n";
        
        private static string _ruleName = "database_source_list_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseSourceListRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseSourceListRef(Position p, AstDatabaseId databaseId, AstSourceListId sourceListId) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._sourceListId = sourceListId;
        }
        
        public AstDatabaseSourceListRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSourceListId SourceListId
        {
            get
            {
                return this._sourceListId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseSourceListRef(this);
        }
        
        public static AstDatabaseSourceListRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// database_source_list_ref : 
        ///    database_id . source_list_id 
        /// </summary>
        public static AstDatabaseSourceListRef New(AstDatabaseId databaseId, AstSourceListId sourceListId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(sourceListId);
            return new AstDatabaseSourceListRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// full_predicate_source_ref
    /// 	 : (event_module_guid_id  DOT)?  event_package_id  DOT  predicate_source_id
    /// </summary>
    public partial class AstFullPredicateSourceRef : AstBnfRule
    {
        
        private AstEventModuleGuidId _eventModuleGuidId;
        
        private AstEventPackageId _eventPackageId;
        
        private AstPredicateSourceId _predicateSourceId;
        
        private static string _ruleValue = "(event_module_guid_id  DOT)?  event_package_id  DOT  predicate_source_id\r\n";
        
        private static string _ruleName = "full_predicate_source_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFullPredicateSourceRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModuleGuidId>())
                {
                    this._eventModuleGuidId = ((AstEventModuleGuidId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPredicateSourceId>())
                {
                    this._predicateSourceId = ((AstPredicateSourceId)(enumerator.Current));
                }
            }
        }
        
        public AstFullPredicateSourceRef(Position p, AstEventModuleGuidId eventModuleGuidId, AstEventPackageId eventPackageId, AstPredicateSourceId predicateSourceId) : 
                base(p)
        {
            this._eventModuleGuidId = eventModuleGuidId;
            this._eventPackageId = eventPackageId;
            this._predicateSourceId = predicateSourceId;
        }
        
        public AstFullPredicateSourceRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModuleGuidId>())
                {
                    this._eventModuleGuidId = ((AstEventModuleGuidId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventPackageId>())
                {
                    this._eventPackageId = ((AstEventPackageId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPredicateSourceId>())
                {
                    this._predicateSourceId = ((AstPredicateSourceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventModuleGuidId EventModuleGuidId
        {
            get
            {
                return this._eventModuleGuidId;
            }
        }
        
        public virtual AstEventPackageId EventPackageId
        {
            get
            {
                return this._eventPackageId;
            }
        }
        
        public virtual AstPredicateSourceId PredicateSourceId
        {
            get
            {
                return this._predicateSourceId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullPredicateSourceRef(this);
        }
        
        public static AstFullPredicateSourceRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// full_predicate_source_ref : 
        ///    event_module_guid_id . event_package_id . predicate_source_id 
        /// </summary>
        public static AstFullPredicateSourceRef New(AstEventModuleGuidId eventModuleGuidId, AstEventPackageId eventPackageId, AstPredicateSourceId predicateSourceId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventModuleGuidId);
            list.Add(eventPackageId);
            list.Add(predicateSourceId);
            return new AstFullPredicateSourceRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// assembly_class_method_ref
    /// 	 : assembly_id  DOT  class_id  DOT  method_id
    /// </summary>
    public partial class AstAssemblyClassMethodRef : AstBnfRule
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstClassId _classId;
        
        private AstMethodId _methodId;
        
        private static string _ruleValue = "assembly_id  DOT  class_id  DOT  method_id\r\n";
        
        private static string _ruleName = "assembly_class_method_ref";
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstAssemblyClassMethodRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public AstAssemblyClassMethodRef(Position p, AstAssemblyId assemblyId, AstClassId classId, AstMethodId methodId) : 
                base(p)
        {
            this._assemblyId = assemblyId;
            this._classId = classId;
            this._methodId = methodId;
        }
        
        public AstAssemblyClassMethodRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (IEnumerator enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstClassId ClassId
        {
            get
            {
                return this._classId;
            }
        }
        
        public virtual AstMethodId MethodId
        {
            get
            {
                return this._methodId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyClassMethodRef(this);
        }
        
        public static AstAssemblyClassMethodRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
        
        /// <summary>
        /// assembly_class_method_ref : 
        ///    assembly_id . class_id . method_id 
        /// </summary>
        public static AstAssemblyClassMethodRef New(AstAssemblyId assemblyId, AstClassId classId, AstMethodId methodId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(assemblyId);
            list.Add(classId);
            list.Add(methodId);
            return new AstAssemblyClassMethodRef(Position.Default, list);
        }
    }
}
