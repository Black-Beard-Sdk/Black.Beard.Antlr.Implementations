#nullable disable
// Generated by ScriptClassVisitorWithProperties.cs (mardi 2 mai 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Parser
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Bb.SqlServer.Asts;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// t_root : batchs  SEMI*  EOF | execute_body_batch  go_statements?  EOF
        /// </summary>
        public override AstRoot VisitT_root(TSqlParser.T_rootContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTRoot(context, list);
        }
        
        /// <summary>
        /// batch : execute_body_batch | sql_clauses | create_or_alter_function | create_or_alter_procedure | create_or_alter_trigger | create_view | go_statements
        /// </summary>
        public override AstRoot VisitBatch(TSqlParser.BatchContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBatch(context, list);
        }
        
        /// <summary>
        /// sql_clause : merge_statement | delete_statement | insert_statement | select_statement_standalone | update_statement | alter_queue | alter_application_role | alter_assembly | alter_asymmetric_key | alter_authorization | alter_authorization_for_azure_dw | alter_authorization_for_parallel_dw | alter_authorization_for_sql_database | alter_availability_group | alter_certificate | alter_column_encryption_key | alter_credential | alter_cryptographic_provider | alter_database | alter_db_role | alter_endpoint | alter_external_data_source | alter_external_library | alter_external_resource_pool | alter_fulltext_catalog | alter_fulltext_stoplist | alter_index | alter_login_azure_sql | alter_login_azure_sql_dw_and_pdw | alter_login_sql_server | alter_master_key_azure_sql | alter_master_key_sql_server | alter_message_type | alter_partition_function | alter_partition_scheme | alter_remote_service_binding | alter_resource_governor | alter_schema_azure_sql_dw_and_pdw | alter_schema_sql | alter_sequence | alter_server_audit | alter_server_audit_specification | alter_server_configuration | alter_server_role | alter_server_role_pdw | alter_service | alter_service_master_key | alter_symmetric_key | alter_table | alter_user | alter_user_azure_sql | alter_workload_group | create_contract | create_queue | create_or_alter_event_session | create_application_role | create_assembly | create_asymmetric_key | create_column_encryption_key | create_column_master_key | create_credential | create_cryptographic_provider | create_database | create_db_role | create_event_notification | create_external_library | create_external_resource_pool | create_fulltext_catalog | create_fulltext_stoplist | create_index | create_columnstore_index | create_nonclustered_columnstore_index | create_login_azure_sql | create_login_pdw | create_login_sql_server | create_master_key_azure_sql | create_master_key_sql_server | create_or_alter_broker_priority | create_remote_service_binding | create_resource_pool | create_route | create_rule | create_schema | create_schema_azure_sql_dw_and_pdw | create_search_property_list | create_security_policy | create_sequence | create_server_audit | create_server_audit_specification | create_server_role | create_service | create_statistics | create_synonym | create_table | create_type | create_user | create_user_azure_sql_dw | create_workload_group | create_xml_index | create_xml_schema_collection | create_partition_function | create_partition_scheme | drop_aggregate | drop_application_role | drop_assembly | drop_asymmetric_key | drop_availability_group | drop_broker_priority | drop_certificate | drop_column_encryption_key | drop_column_master_key | drop_contract | drop_credential | drop_cryptograhic_provider | drop_database | drop_database_audit_specification | drop_database_encryption_key | drop_database_scoped_credential | drop_db_role | drop_default | drop_endpoint | drop_event_notifications | drop_event_session | drop_external_data_source | drop_external_file_format | drop_external_library | drop_external_resource_pool | drop_external_table | drop_fulltext_catalog | drop_fulltext_index | drop_fulltext_stoplist | drop_function | drop_index | drop_login | drop_master_key | drop_message_type | drop_partition_function | drop_partition_scheme | drop_procedure | drop_queue | drop_remote_service_binding | drop_resource_pool | drop_route | drop_rule | drop_schema | drop_search_property_list | drop_security_policy | drop_sequence | drop_server_audit | drop_server_audit_specification | drop_server_role | drop_service | drop_signature | drop_statistics | drop_statistics_id_azure_dw_and_pdw | drop_symmetric_key | drop_synonym | drop_table | drop_dml_trigger | drop_ddl_trigger | drop_type | drop_user | drop_view | drop_workload_group | drop_xml_schema_collection | disable_trigger | enable_trigger | lock_table | truncate_table | update_statistics | block_statement | break_statement | continue_statement | goto_statement | if_statement | return_statement | throw_statement | try_catch_statement | waitfor_statement | while_statement | print_statement | raiseerror_statement | declare_statement | execute_statement | cursor_statement | begin_conversation_timer | begin_conversation_dialog | end_conversation | get_conversation | send_conversation | waitfor_conversation | kill_statement | message_statement | security_statement | set_statement | transaction_statement | use_statement | setuser_statement | reconfigure_statement | shutdown_statement | checkpoint_statement | backup_database | backup_log | backup_certificate | backup_master_key | backup_service_master_key | dbcc_special | dbcc_clause
        /// </summary>
        public override AstRoot VisitSql_clause(TSqlParser.Sql_clauseContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSqlClause(context, list);
        }
        
        /// <summary>
        /// goto_statement : GOTO  code_location_id | code_location_id  COLON
        /// </summary>
        public override AstRoot VisitGoto_statement(TSqlParser.Goto_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstGotoStatement(context, list);
        }
        
        /// <summary>
        /// throw_statement : THROW  (throw_error_number  COMMA  throw_message  COMMA  throw_state)?
        /// </summary>
        public override AstRoot VisitThrow_statement(TSqlParser.Throw_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstThrowStatement(context, list);
        }
        
        /// <summary>
        /// try_catch_statement : BEGIN  TRY  SEMI?  try_clauses = sql_clauses  END  TRY  SEMI?  BEGIN  CATCH  SEMI?  catch_clauses = sql_clauses  END  CATCH
        /// </summary>
        public override AstRoot VisitTry_catch_statement(TSqlParser.Try_catch_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTryCatchStatement(context, list);
        }
        
        /// <summary>
        /// while_statement_content : sql_clause | BREAK | CONTINUE
        /// </summary>
        public override AstRoot VisitWhile_statement_content(TSqlParser.While_statement_contentContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWhileStatementContent(context, list);
        }
        
        /// <summary>
        /// raiseerror_statement : RAISERROR  LR_BRACKET  msg = decimal_string_local_id  COMMA  severity = constant_local_id  COMMA  state = constant_local_id  constant_local_ids?  RR_BRACKET  (WITH  log_seterror_nowait)? | RAISERROR  decimal  formatstring = string_local_id_double_quote_id  decimal_string_locals?
        /// </summary>
        public override AstRoot VisitRaiseerror_statement(TSqlParser.Raiseerror_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRaiseerrorStatement(context, list);
        }
        
        /// <summary>
        /// alter_assembly_start : ALTER  ASSEMBLY
        /// </summary>
        public override AstRoot VisitAlter_assembly_start(TSqlParser.Alter_assembly_startContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterAssemblyStart(context, list);
        }
        
        /// <summary>
        /// alter_assembly_drop_multiple_files : ALL | multiple_local_files
        /// </summary>
        public override AstRoot VisitAlter_assembly_drop_multiple_files(TSqlParser.Alter_assembly_drop_multiple_filesContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterAssemblyDropMultipleFiles(context, list);
        }
        
        /// <summary>
        /// client_assembly_specifier : network_file_share | local_file | stringtext
        /// </summary>
        public override AstRoot VisitClient_assembly_specifier(TSqlParser.Client_assembly_specifierContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstClientAssemblySpecifier(context, list);
        }
        
        /// <summary>
        /// assembly_option : PERMISSION_SET  EQUAL  assembly_permission | VISIBILITY  EQUAL  on_off | UNCHECKED  DATA | assembly_option  COMMA
        /// </summary>
        public override AstRoot VisitAssembly_option(TSqlParser.Assembly_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAssemblyOption(context, list);
        }
        
        /// <summary>
        /// file_path : file_directory_path_separator  file_path | id_
        /// </summary>
        public override AstRoot VisitFile_path(TSqlParser.File_pathContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFilePath(context, list);
        }
        
        /// <summary>
        /// multiple_local_files : SINGLE_QUOTE  local_file  SINGLE_QUOTE  COMMA | local_file
        /// </summary>
        public override AstRoot VisitMultiple_local_files(TSqlParser.Multiple_local_filesContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstMultipleLocalFiles(context, list);
        }
        
        /// <summary>
        /// binary_content : stringtext | binary_
        /// </summary>
        public override AstRoot VisitBinary_content(TSqlParser.Binary_contentContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBinaryContent(context, list);
        }
        
        /// <summary>
        /// by_password_crypt : decryption_by_pwd | encryption_by_pwd
        /// </summary>
        public override AstRoot VisitBy_password_crypt(TSqlParser.By_password_cryptContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstByPasswordCrypt(context, list);
        }
        
        /// <summary>
        /// asymetric_key_with_info : ALGORITHM  EQUAL  asymetric_algorithm | PROVIDER_KEY_NAME  EQUAL  provider_key_name = stringtext | CREATION_DISPOSITION  EQUAL  creation_disposition
        /// </summary>
        public override AstRoot VisitAsymetric_key_with_info(TSqlParser.Asymetric_key_with_infoContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAsymetricKeyWithInfo(context, list);
        }
        
        /// <summary>
        /// asymetric_key_from : FILE  EQUAL  stringtext | EXECUTABLE_FILE  EQUAL  stringtext | ASSEMBLY  assembly_id | PROVIDER  provider_id
        /// </summary>
        public override AstRoot VisitAsymetric_key_from(TSqlParser.Asymetric_key_fromContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAsymetricKeyFrom(context, list);
        }
        
        /// <summary>
        /// drop_asymmetric_key : DROP  ASYMMETRIC  KEY  key_name = id_  (REMOVE  PROVIDER  KEY)?
        /// </summary>
        public override AstRoot VisitDrop_asymmetric_key(TSqlParser.Drop_asymmetric_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropAsymmetricKey(context, list);
        }
        
        /// <summary>
        /// authorization_grantee : principal_name = id_ | SCHEMA  OWNER
        /// </summary>
        public override AstRoot VisitAuthorization_grantee(TSqlParser.Authorization_granteeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAuthorizationGrantee(context, list);
        }
        
        /// <summary>
        /// class_type_for_grant : COLUMN  encryption_master  KEY | NOTIFICATION  database_object_server | object_type_for_grant
        /// </summary>
        public override AstRoot VisitClass_type_for_grant(TSqlParser.Class_type_for_grantContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstClassTypeForGrant(context, list);
        }
        
        /// <summary>
        /// alter_options_listener : add_listener | MODIFY  LISTENER  alter_listener | restart_listener
        /// </summary>
        public override AstRoot VisitAlter_options_listener(TSqlParser.Alter_options_listenerContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterOptionsListener(context, list);
        }
        
        /// <summary>
        /// alter_listener : ADD  IP  LR_BRACKET  ip_listener  RR_BRACKET | PORT  EQUAL  decimal
        /// </summary>
        public override AstRoot VisitAlter_listener(TSqlParser.Alter_listenerContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterListener(context, list);
        }
        
        /// <summary>
        /// ip_listener : range_ip_v4 | ipv6
        /// </summary>
        public override AstRoot VisitIp_listener(TSqlParser.Ip_listenerContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIpListener(context, list);
        }
        
        /// <summary>
        /// ip_listener_comma : range_ip_comma_v4 | ipv6
        /// </summary>
        public override AstRoot VisitIp_listener_comma(TSqlParser.Ip_listener_commaContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIpListenerComma(context, list);
        }
        
        /// <summary>
        /// address_listener : listener_dhcp | WITH  IP  LR_BRACKET  listener_ip_address
        /// </summary>
        public override AstRoot VisitAddress_listener(TSqlParser.Address_listenerContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAddressListener(context, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_primary : ENDPOINT_URL  EQUAL  url_value | availability_mode_set | FAILOVER_MODE  EQUAL  failover = auto_manual | seeding_mode_set | backup_priority_set
        /// </summary>
        public override AstRoot VisitAlter_availability_replicat_primary(TSqlParser.Alter_availability_replicat_primaryContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterAvailabilityReplicatPrimary(context, list);
        }
        
        /// <summary>
        /// alter_availability_primary_role : allow_connections_set | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routing_list  RR_BRACKET | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
        /// </summary>
        public override AstRoot VisitAlter_availability_primary_role(TSqlParser.Alter_availability_primary_roleContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterAvailabilityPrimaryRole(context, list);
        }
        
        /// <summary>
        /// alter_availability_replicat : alter_availability_replicat_add | REMOVE  REPLICA  ON  server_instance_txt | alter_availability_replicat_modify
        /// </summary>
        public override AstRoot VisitAlter_availability_replicat(TSqlParser.Alter_availability_replicatContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterAvailabilityReplicat(context, list);
        }
        
        /// <summary>
        /// availability_group_options : JOIN | JOIN  AVAILABILITY  GROUP  ON  (COMMA?  ag_name = stringtext  WITH  LR_BRACKET  (listener_url_set  COMMA  availability_mode_set  COMMA  failover_mode_manuel  COMMA  seeding_mode_set)  RR_BRACKET)+ | MODIFY  AVAILABILITY  GROUP  ON  (COMMA?  ag_name_modified = stringtext  WITH  LR_BRACKET  (listener_url_set  (COMMA?  availability_mode_set)?  (COMMA?  failover_mode_manuel)?  (COMMA?  seeding_mode_set)?)  RR_BRACKET)+
        /// </summary>
        public override AstRoot VisitAvailability_group_options(TSqlParser.Availability_group_optionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAvailabilityGroupOptions(context, list);
        }
        
        /// <summary>
        /// failover_mode_manuel : FAILOVER_MODE  EQUAL  MANUAL
        /// </summary>
        public override AstRoot VisitFailover_mode_manuel(TSqlParser.Failover_mode_manuelContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFailoverModeManuel(context, list);
        }
        
        /// <summary>
        /// alter_role : secondary_role_args | primary_role_args
        /// </summary>
        public override AstRoot VisitAlter_role(TSqlParser.Alter_roleContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterRole(context, list);
        }
        
        /// <summary>
        /// primary_role_config : allow_connections_set | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  string_list_not  RR_BRACKET | SESSION_TIMEOUT  EQUAL  session_timeout = decimal
        /// </summary>
        public override AstRoot VisitPrimary_role_config(TSqlParser.Primary_role_configContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPrimaryRoleConfig(context, list);
        }
        
        /// <summary>
        /// string_list_not : string_list | NONE
        /// </summary>
        public override AstRoot VisitString_list_not(TSqlParser.String_list_notContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstStringListNot(context, list);
        }
        
        /// <summary>
        /// secondary_role_config : allow_connections_set | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitSecondary_role_config(TSqlParser.Secondary_role_configContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSecondaryRoleConfig(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_options : SET  LR_BRACKET  alter_availability_group_option_set  RR_BRACKET | add_remove_database | alter_availability_replicat | alter_options_listener | alter_role | availability_group_options | grant_deny  CREATE  ANY  DATABASE | FAILOVER | FORCE_FAILOVER_ALLOW_DATA_LOSS | OFFLINE | WITH  LR_BRACKET  DTC_SUPPORT  EQUAL  PER_DB  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_availability_group_options(TSqlParser.Alter_availability_group_optionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterAvailabilityGroupOptions(context, list);
        }
        
        /// <summary>
        /// alter_availability_group_option_set : AUTOMATED_BACKUP_PREFERENCE  EQUAL  primary_secondary_none | FAILURE_CONDITION_LEVEL  EQUAL  decimal | HEALTH_CHECK_TIMEOUT  EQUAL  milliseconds = decimal | DB_FAILOVER  EQUAL  on_off | REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT  EQUAL  decimal
        /// </summary>
        public override AstRoot VisitAlter_availability_group_option_set(TSqlParser.Alter_availability_group_option_setContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterAvailabilityGroupOptionSet(context, list);
        }
        
        /// <summary>
        /// broker_local_service_name : LOCAL_SERVICE_NAME  EQUAL  (DOUBLE_FORWARD_SLASH?  id_ | ANY)  COMMA?
        /// </summary>
        public override AstRoot VisitBroker_local_service_name(TSqlParser.Broker_local_service_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBrokerLocalServiceName(context, list);
        }
        
        /// <summary>
        /// id_any : id_ | ANY
        /// </summary>
        public override AstRoot VisitId_any(TSqlParser.Id_anyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIdAny(context, list);
        }
        
        /// <summary>
        /// stringtext_any : id_ | ANY
        /// </summary>
        public override AstRoot VisitStringtext_any(TSqlParser.Stringtext_anyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstStringtextAny(context, list);
        }
        
        /// <summary>
        /// drop_broker_priority : DROP  BROKER  PRIORITY  ConversationPriorityName = id_
        /// </summary>
        public override AstRoot VisitDrop_broker_priority(TSqlParser.Drop_broker_priorityContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropBrokerPriority(context, list);
        }
        
        /// <summary>
        /// drop_contract : DROP  CONTRACT  dropped_contract_name = id_
        /// </summary>
        public override AstRoot VisitDrop_contract(TSqlParser.Drop_contractContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropContract(context, list);
        }
        
        /// <summary>
        /// drop_database : DROP  DATABASE  (IF  EXISTS)?  (COMMA?  database_id)+
        /// </summary>
        public override AstRoot VisitDrop_database(TSqlParser.Drop_databaseContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropDatabase(context, list);
        }
        
        /// <summary>
        /// drop_database_encryption_key : DROP  DATABASE  ENCRYPTION  KEY
        /// </summary>
        public override AstRoot VisitDrop_database_encryption_key(TSqlParser.Drop_database_encryption_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropDatabaseEncryptionKey(context, list);
        }
        
        /// <summary>
        /// drop_default : DROP  DEFAULT  (IF  EXISTS)?  (COMMA?  default_ref)
        /// </summary>
        public override AstRoot VisitDrop_default(TSqlParser.Drop_defaultContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropDefault(context, list);
        }
        
        /// <summary>
        /// event_notification_on : server_database | QUEUE  queue_id
        /// </summary>
        public override AstRoot VisitEvent_notification_on(TSqlParser.Event_notification_onContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventNotificationOn(context, list);
        }
        
        /// <summary>
        /// drop_master_key : DROP  MASTER  KEY
        /// </summary>
        public override AstRoot VisitDrop_master_key(TSqlParser.Drop_master_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropMasterKey(context, list);
        }
        
        /// <summary>
        /// drop_rule : DROP  RULE  (IF  EXISTS)?  (COMMA?  schema_rule_ref)?
        /// </summary>
        public override AstRoot VisitDrop_rule(TSqlParser.Drop_ruleContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropRule(context, list);
        }
        
        /// <summary>
        /// drop_sequence : DROP  SEQUENCE  (IF  EXISTS)?  (COMMA?  database_schema_sequence_ref)?
        /// </summary>
        public override AstRoot VisitDrop_sequence(TSqlParser.Drop_sequenceContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropSequence(context, list);
        }
        
        /// <summary>
        /// drop_signature_by : CERTIFICATE  certificate_id | ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public override AstRoot VisitDrop_signature_by(TSqlParser.Drop_signature_byContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropSignatureBy(context, list);
        }
        
        /// <summary>
        /// trigger_name : schema_trigger_refs | ALL
        /// </summary>
        public override AstRoot VisitTrigger_name(TSqlParser.Trigger_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTriggerName(context, list);
        }
        
        /// <summary>
        /// trigger_target : schema_object_ref | all_server_database
        /// </summary>
        public override AstRoot VisitTrigger_target(TSqlParser.Trigger_targetContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTriggerTarget(context, list);
        }
        
        /// <summary>
        /// lock_table_delay : WAIT  seconds = decimal | NOWAIT
        /// </summary>
        public override AstRoot VisitLock_table_delay(TSqlParser.Lock_table_delayContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstLockTableDelay(context, list);
        }
        
        /// <summary>
        /// create_column_master_key : CREATE  COLUMN  MASTER  KEY  key_name = id_  WITH  LR_BRACKET  KEY_STORE_PROVIDER_NAME  EQUAL  key_store_provider_name = stringtext  COMMA  KEY_PATH  EQUAL  key_path = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_column_master_key(TSqlParser.Create_column_master_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateColumnMasterKey(context, list);
        }
        
        /// <summary>
        /// create_or_alter_event_session_with : WITH  LR_BRACKET  (COMMA?  session_arg_max_memory)?  (COMMA?  session_arg_event_retention_mode)?  (COMMA?  session_arg_max_dispatch)?  (COMMA?  session_arg_max_event_size)?  (COMMA?  session_arg_memory_partition)?  (COMMA?  session_arg_track_causality)?  (COMMA?  session_arg_startup_state)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_or_alter_event_session_with(TSqlParser.Create_or_alter_event_session_withContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateOrAlterEventSessionWith(context, list);
        }
        
        /// <summary>
        /// session_arg_max_dispatch : MAX_DISPATCH_LATENCY  EQUAL  (decimal  SECONDS | INFINITE)
        /// </summary>
        public override AstRoot VisitSession_arg_max_dispatch(TSqlParser.Session_arg_max_dispatchContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSessionArgMaxDispatch(context, list);
        }
        
        /// <summary>
        /// target_parameter_value : (LR_BRACKET?  decimal  RR_BRACKET? | stringtext)
        /// </summary>
        public override AstRoot VisitTarget_parameter_value(TSqlParser.Target_parameter_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTargetParameterValue(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_expression : (COMMA?  and_or?  NOT?  (event_session_predicate_factor | LR_BRACKET  event_session_predicate_expression  RR_BRACKET))+
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_expression(TSqlParser.Event_session_predicate_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventSessionPredicateExpression(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_factor : event_session_predicate_leaf | LR_BRACKET  event_session_predicate_expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_factor(TSqlParser.Event_session_predicate_factorContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventSessionPredicateFactor(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_leaf : event_field_id | event_session_id_source1  event_session_predicate_leaf_ope  decimal_string | source1 = full_predicate_source_ref  LR_BRACKET  event_session_id_source2  RR_BRACKET
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_leaf(TSqlParser.Event_session_predicate_leafContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventSessionPredicateLeaf(context, list);
        }
        
        /// <summary>
        /// event_session_id_source1 : event_field_id | full_predicate_source_ref
        /// </summary>
        public override AstRoot VisitEvent_session_id_source1(TSqlParser.Event_session_id_source1Context context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventSessionIdSource1(context, list);
        }
        
        /// <summary>
        /// event_session_id_source2 : event_field_id | full_predicate_source_ref  COMMA  decimal_string
        /// </summary>
        public override AstRoot VisitEvent_session_id_source2(TSqlParser.Event_session_id_source2Context context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventSessionIdSource2(context, list);
        }
        
        /// <summary>
        /// alter_external_data_source : ALTER  EXTERNAL  DATA  SOURCE  data_source_id  SET  external_sources | ALTER  EXTERNAL  DATA  SOURCE  data_source_id  WITH  LR_BRACKET  TYPE  EQUAL  BLOB_STORAGE  COMMA  LOCATION  EQUAL  location = stringtext  external_credential?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_external_data_source(TSqlParser.Alter_external_data_sourceContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterExternalDataSource(context, list);
        }
        
        /// <summary>
        /// external_source : LOCATION  EQUAL  location = stringtext | RESOURCE_MANAGER_LOCATION  EQUAL  resource_manager_location = stringtext | CREDENTIAL  EQUAL  credential_id
        /// </summary>
        public override AstRoot VisitExternal_source(TSqlParser.External_sourceContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExternalSource(context, list);
        }
        
        /// <summary>
        /// code_content : stringtext | binary_ | NONE
        /// </summary>
        public override AstRoot VisitCode_content(TSqlParser.Code_contentContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCodeContent(context, list);
        }
        
        /// <summary>
        /// create_external_resource_pool : CREATE  EXTERNAL  RESOURCE  POOL  pool_id  WITH  external_resource_with
        /// </summary>
        public override AstRoot VisitCreate_external_resource_pool(TSqlParser.Create_external_resource_poolContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateExternalResourcePool(context, list);
        }
        
        /// <summary>
        /// fulltext_languageList : stringtext | decimal | binary_
        /// </summary>
        public override AstRoot VisitFulltext_languageList(TSqlParser.Fulltext_languageListContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFulltextLanguagelist(context, list);
        }
        
        /// <summary>
        /// alter_login_sql_server_infos : enable_disable? | WITH  alter_login_sql_server_settings | add_drop  CREDENTIAL  credential_id
        /// </summary>
        public override AstRoot VisitAlter_login_sql_server_infos(TSqlParser.Alter_login_sql_server_infosContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterLoginSqlServerInfos(context, list);
        }
        
        /// <summary>
        /// create_login_sql_server_settings : (PASSWORD  EQUAL  pwd_value  pwd_strategies?)?  (COMMA?  SID  EQUAL  sid = binary_)?  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  default_language_set)?  (COMMA?  CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (COMMA?  CHECK_POLICY  EQUAL  check_policy = on_off)?  (COMMA?  CREDENTIAL  EQUAL  credential_id)?
        /// </summary>
        public override AstRoot VisitCreate_login_sql_server_settings(TSqlParser.Create_login_sql_server_settingsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateLoginSqlServerSettings(context, list);
        }
        
        /// <summary>
        /// create_login_sql_server_from : WINDOWS  (WITH  (COMMA?  DEFAULT_DATABASE  EQUAL  database_id)?  (COMMA?  default_language_set)?) | CERTIFICATE  certificate_id | ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public override AstRoot VisitCreate_login_sql_server_from(TSqlParser.Create_login_sql_server_fromContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateLoginSqlServerFrom(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_infos : enable_disable? | WITH  alter_login_azure_sql_with
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql_infos(TSqlParser.Alter_login_azure_sql_infosContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterLoginAzureSqlInfos(context, list);
        }
        
        /// <summary>
        /// alter_login_azure_sql_with : password_setting  old_pwd? | NAME  EQUAL  login_id
        /// </summary>
        public override AstRoot VisitAlter_login_azure_sql_with(TSqlParser.Alter_login_azure_sql_withContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterLoginAzureSqlWith(context, list);
        }
        
        /// <summary>
        /// login_pwd_strategy : enable_disable? | WITH  change_password
        /// </summary>
        public override AstRoot VisitLogin_pwd_strategy(TSqlParser.Login_pwd_strategyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstLoginPwdStrategy(context, list);
        }
        
        /// <summary>
        /// change_password : password_setting  old_pwd_strategies? | NAME  EQUAL  login_id
        /// </summary>
        public override AstRoot VisitChange_password(TSqlParser.Change_passwordContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstChangePassword(context, list);
        }
        
        /// <summary>
        /// login_pdw_pwd : WITH  (password_setting  MUST_CHANGE?  (CHECK_POLICY  EQUAL  on_off?)?) | FROM  WINDOWS
        /// </summary>
        public override AstRoot VisitLogin_pdw_pwd(TSqlParser.Login_pdw_pwdContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstLoginPdwPwd(context, list);
        }
        
        /// <summary>
        /// alter_master_key_sql_server : ALTER  MASTER  KEY  (regenerate_mater_key | add_drop  add_master_key)
        /// </summary>
        public override AstRoot VisitAlter_master_key_sql_server(TSqlParser.Alter_master_key_sql_serverContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterMasterKeySqlServer(context, list);
        }
        
        /// <summary>
        /// alter_master_key_azure_sql : ALTER  MASTER  KEY  (regenerate_mater_key | ADD  add_master_key | DROP  encryption_by_pwd)
        /// </summary>
        public override AstRoot VisitAlter_master_key_azure_sql(TSqlParser.Alter_master_key_azure_sqlContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterMasterKeyAzureSql(context, list);
        }
        
        /// <summary>
        /// add_master_key : ENCRYPTION  BY  (SERVICE  MASTER  KEY | password_setting)
        /// </summary>
        public override AstRoot VisitAdd_master_key(TSqlParser.Add_master_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAddMasterKey(context, list);
        }
        
        /// <summary>
        /// message_validation_value : message_validation_value_enum | VALID_XML  WITH  SCHEMA  COLLECTION  schema_collection_id
        /// </summary>
        public override AstRoot VisitMessage_validation_value(TSqlParser.Message_validation_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstMessageValidationValue(context, list);
        }
        
        /// <summary>
        /// create_resource_pool_infos : WITH  LR_BRACKET  (COMMA?  MIN_CPU_PERCENT  EQUAL  min_cpu_percent = decimal)?  (COMMA?  MAX_CPU_PERCENT  EQUAL  max_cpu_percent = decimal)?  (COMMA?  CAP_CPU_PERCENT  EQUAL  cap_cpu_percent = decimal)?  (COMMA?  AFFINITY  SCHEDULER  EQUAL  resource_affinity_scheduler_value)?  (COMMA?  MIN_MEMORY_PERCENT  EQUAL  min_memory_percent = decimal)?  (COMMA?  MAX_MEMORY_PERCENT  EQUAL  max_memory_percent = decimal)?  (COMMA?  MIN_IOPS_PER_VOLUME  EQUAL  min_tops_percent = decimal)?  (COMMA?  MAX_IOPS_PER_VOLUME  EQUAL  max_tops_percent = decimal)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCreate_resource_pool_infos(TSqlParser.Create_resource_pool_infosContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateResourcePoolInfos(context, list);
        }
        
        /// <summary>
        /// resource_affinity_scheduler_value : AUTO | LR_BRACKET  decimal_ranges  RR_BRACKET | NUMANODE  EQUAL  LR_BRACKET  decimal_ranges  RR_BRACKET
        /// </summary>
        public override AstRoot VisitResource_affinity_scheduler_value(TSqlParser.Resource_affinity_scheduler_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstResourceAffinitySchedulerValue(context, list);
        }
        
        /// <summary>
        /// alter_resource_governor : ALTER  RESOURCE  GOVERNOR  (disable_reconfigure | WITH  LR_BRACKET  CLASSIFIER_FUNCTION  EQUAL  (schema_func_proc_ref | NULL_)  RR_BRACKET | RESET  STATISTICS | WITH  LR_BRACKET  MAX_OUTSTANDING_IO_PER_VOLUME  EQUAL  max_outstanding_io_per_volume = decimal  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitAlter_resource_governor(TSqlParser.Alter_resource_governorContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterResourceGovernor(context, list);
        }
        
        /// <summary>
        /// alter_db_role : ALTER  ROLE  old_role_name = role_id  (add_drop  MEMBER  database_id | WITH  NAME  EQUAL  new_role_name = role_id)
        /// </summary>
        public override AstRoot VisitAlter_db_role(TSqlParser.Alter_db_roleContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterDbRole(context, list);
        }
        
        /// <summary>
        /// create_schema_name : schema_identifier  schema_authorization? | schema_identifier?  schema_authorization
        /// </summary>
        public override AstRoot VisitCreate_schema_name(TSqlParser.Create_schema_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateSchemaName(context, list);
        }
        
        /// <summary>
        /// create_schema_target : create_table | create_view | grant_deny  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  TO  owner_id | REVOKE  enum_dml  ON  (SCHEMA  DOUBLE_COLON)?  object_identifier  FROM  owner_id
        /// </summary>
        public override AstRoot VisitCreate_schema_target(TSqlParser.Create_schema_targetContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateSchemaTarget(context, list);
        }
        
        /// <summary>
        /// schema_table_ref_impact : AFTER  insert_update | BEFORE  update_delate
        /// </summary>
        public override AstRoot VisitSchema_table_ref_impact(TSqlParser.Schema_table_ref_impactContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaTableRefImpact(context, list);
        }
        
        /// <summary>
        /// alter_sequence_restart : RESTART  (WITH  decimal)?
        /// </summary>
        public override AstRoot VisitAlter_sequence_restart(TSqlParser.Alter_sequence_restartContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterSequenceRestart(context, list);
        }
        
        /// <summary>
        /// alter_sequence_increment : INCREMENT  BY  sequnce_increment = decimal
        /// </summary>
        public override AstRoot VisitAlter_sequence_increment(TSqlParser.Alter_sequence_incrementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterSequenceIncrement(context, list);
        }
        
        /// <summary>
        /// sequence_cache : (CACHE  decimal | NO  CACHE)
        /// </summary>
        public override AstRoot VisitSequence_cache(TSqlParser.Sequence_cacheContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSequenceCache(context, list);
        }
        
        /// <summary>
        /// alter_sequence_max_value : (MAXVALUE  decimal | NO  MAXVALUE)?
        /// </summary>
        public override AstRoot VisitAlter_sequence_max_value(TSqlParser.Alter_sequence_max_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterSequenceMaxValue(context, list);
        }
        
        /// <summary>
        /// alter_sequence_min_value : MINVALUE  decimal | NO  MINVALUE
        /// </summary>
        public override AstRoot VisitAlter_sequence_min_value(TSqlParser.Alter_sequence_min_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterSequenceMinValue(context, list);
        }
        
        /// <summary>
        /// create_sequence_min_value : MINVALUE  real? | NO  MINVALUE
        /// </summary>
        public override AstRoot VisitCreate_sequence_min_value(TSqlParser.Create_sequence_min_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateSequenceMinValue(context, list);
        }
        
        /// <summary>
        /// create_sequence_max_value : MAXVALUE  real? | NO  MAXVALUE
        /// </summary>
        public override AstRoot VisitCreate_sequence_max_value(TSqlParser.Create_sequence_max_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateSequenceMaxValue(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_infos : (TO  server_audit_file)?  with_server_audit_file?  where_server_audit_condition? | REMOVE  WHERE | MODIFY  NAME  EQUAL  audit_id
        /// </summary>
        public override AstRoot VisitAlter_server_audit_infos(TSqlParser.Alter_server_audit_infosContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterServerAuditInfos(context, list);
        }
        
        /// <summary>
        /// server_audit_file_info : QUEUE_DELAY  EQUAL  queue_delay = decimal | ON_FAILURE  EQUAL  continue_shutdown | STATE  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitServer_audit_file_info(TSqlParser.Server_audit_file_infoContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerAuditFileInfo(context, list);
        }
        
        /// <summary>
        /// server_audit_file : FILE  LR_BRACKET  server_audit_file_specs?  RR_BRACKET | APPLICATION_LOG | SECURITY_LOG
        /// </summary>
        public override AstRoot VisitServer_audit_file(TSqlParser.Server_audit_fileContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerAuditFile(context, list);
        }
        
        /// <summary>
        /// server_audit_file_spec : filepath_set | audit_maxsize | max_rollover_files_set | max_files_set | disk_space_set
        /// </summary>
        public override AstRoot VisitServer_audit_file_spec(TSqlParser.Server_audit_file_specContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerAuditFileSpec(context, list);
        }
        
        /// <summary>
        /// alter_server_audit_condition : COMMA?  (NOT?)  event_field_id  audit_operator  decimal_string | COMMA?  and_or  NOT?  audit_operator  decimal_string
        /// </summary>
        public override AstRoot VisitAlter_server_audit_condition(TSqlParser.Alter_server_audit_conditionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterServerAuditCondition(context, list);
        }
        
        /// <summary>
        /// create_server_audit_to_infos : (TO  server_audit_file)?  (WITH  LR_BRACKET  create_server_audit_withs?  RR_BRACKET)?  where_server_audit_condition? | REMOVE  WHERE | MODIFY  NAME  EQUAL  audit_id
        /// </summary>
        public override AstRoot VisitCreate_server_audit_to_infos(TSqlParser.Create_server_audit_to_infosContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateServerAuditToInfos(context, list);
        }
        
        /// <summary>
        /// create_server_audit_with : QUEUE_DELAY  EQUAL  queue_delay = decimal | ON_FAILURE  EQUAL  continue_shutdown | STATE  EQUAL  state = on_off | audit1 = audit_guid_id  EQUAL  audit2 = audit_guid_id
        /// </summary>
        public override AstRoot VisitCreate_server_audit_with(TSqlParser.Create_server_audit_withContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateServerAuditWith(context, list);
        }
        
        /// <summary>
        /// alter_server_configuration : ALTER  SERVER  CONFIGURATION  SET  (server_config_process_affinity | server_config_diagnostic_log | server_config_failover | server_config_hadr_set | server_config_buffer_pool_ext | SET  SOFTNUMA  on_off)
        /// </summary>
        public override AstRoot VisitAlter_server_configuration(TSqlParser.Alter_server_configurationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterServerConfiguration(context, list);
        }
        
        /// <summary>
        /// server_config_process_affinity : PROCESS  AFFINITY  (process_cpu_set | process_numanode_set)
        /// </summary>
        public override AstRoot VisitServer_config_process_affinity(TSqlParser.Server_config_process_affinityContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerConfigProcessAffinity(context, list);
        }
        
        /// <summary>
        /// server_config_diagnostic_log : DIAGNOSTICS  LOG  (on_off | diagnos_path_set | diagnos_max_size_set | diagnos_max_files_set)
        /// </summary>
        public override AstRoot VisitServer_config_diagnostic_log(TSqlParser.Server_config_diagnostic_logContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerConfigDiagnosticLog(context, list);
        }
        
        /// <summary>
        /// server_config_hadr_set : HADR  CLUSTER  CONTEXT  EQUAL  (stringtext | LOCAL)
        /// </summary>
        public override AstRoot VisitServer_config_hadr_set(TSqlParser.Server_config_hadr_setContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerConfigHadrSet(context, list);
        }
        
        /// <summary>
        /// process_cpu_set : CPU  EQUAL  (AUTO | decimal_range  decimal_ranges)
        /// </summary>
        public override AstRoot VisitProcess_cpu_set(TSqlParser.Process_cpu_setContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstProcessCpuSet(context, list);
        }
        
        /// <summary>
        /// newname_set : NEWNAME  EQUAL  file_group_id | stringtext
        /// </summary>
        public override AstRoot VisitNewname_set(TSqlParser.Newname_setContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstNewnameSet(context, list);
        }
        
        /// <summary>
        /// filename_set : FILENAME  EQUAL  file = stringtext
        /// </summary>
        public override AstRoot VisitFilename_set(TSqlParser.Filename_setContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFilenameSet(context, list);
        }
        
        /// <summary>
        /// size_set : SIZE  EQUAL  size = file_size
        /// </summary>
        public override AstRoot VisitSize_set(TSqlParser.Size_setContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSizeSet(context, list);
        }
        
        /// <summary>
        /// max_file_size_value : file_size | UNLIMITED
        /// </summary>
        public override AstRoot VisitMax_file_size_value(TSqlParser.Max_file_size_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstMaxFileSizeValue(context, list);
        }
        
        /// <summary>
        /// decimal_unlimited : decimal | UNLIMITED
        /// </summary>
        public override AstRoot VisitDecimal_unlimited(TSqlParser.Decimal_unlimitedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDecimalUnlimited(context, list);
        }
        
        /// <summary>
        /// decimal_size_unlimited : decimal  size_unity | UNLIMITED
        /// </summary>
        public override AstRoot VisitDecimal_size_unlimited(TSqlParser.Decimal_size_unlimitedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDecimalSizeUnlimited(context, list);
        }
        
        /// <summary>
        /// server_config_failover : FAILOVER  CLUSTER  PROPERTY  (VERBOSELOGGING  EQUAL  verboselogging = string_or_default | SQLDUMPERFLAGS  EQUAL  sqldumperflags = string_or_default | SQLDUMPERPATH  EQUAL  sqldumperpath = string_or_default | SQLDUMPERTIMEOUT  sqldumpertimeout = string_or_default | FAILURECONDITIONLEVEL  EQUAL  failure = string_or_default | HEALTHCHECKTIMEOUT  EQUAL  health = decimal_default)
        /// </summary>
        public override AstRoot VisitServer_config_failover(TSqlParser.Server_config_failoverContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerConfigFailover(context, list);
        }
        
        /// <summary>
        /// server_config_buffer_pool_ext : BUFFER  POOL  EXTENSION  (ON  LR_BRACKET  filename_set  COMMA  SIZE  EQUAL  size = decimal  size_unity  RR_BRACKET | OFF)
        /// </summary>
        public override AstRoot VisitServer_config_buffer_pool_ext(TSqlParser.Server_config_buffer_pool_extContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerConfigBufferPoolExt(context, list);
        }
        
        /// <summary>
        /// string_or_default : stringtext | DEFAULT
        /// </summary>
        public override AstRoot VisitString_or_default(TSqlParser.String_or_defaultContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstStringOrDefault(context, list);
        }
        
        /// <summary>
        /// contract_ref : contract_id | DEFAULT
        /// </summary>
        public override AstRoot VisitContract_ref(TSqlParser.Contract_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstContractRef(context, list);
        }
        
        /// <summary>
        /// service_master_key_items : FORCE?  REGENERATE | WITH  regenerate_account
        /// </summary>
        public override AstRoot VisitService_master_key_items(TSqlParser.Service_master_key_itemsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServiceMasterKeyItems(context, list);
        }
        
        /// <summary>
        /// regenerate_account : OLD_ACCOUNT  EQUAL  acold_account_name = stringtext  COMMA  old_pwd | NEW_ACCOUNT  EQUAL  new_account_name = stringtext  COMMA  new_password_set
        /// </summary>
        public override AstRoot VisitRegenerate_account(TSqlParser.Regenerate_accountContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRegenerateAccount(context, list);
        }
        
        /// <summary>
        /// alter_user_item : NAME  EQUAL  user_id | DEFAULT_SCHEMA  EQUAL  schema_id_null | LOGIN  EQUAL  login_id | password_setting  old_pwd+ | default_language_set | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitAlter_user_item(TSqlParser.Alter_user_itemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterUserItem(context, list);
        }
        
        /// <summary>
        /// schema_id_null : schema_identifier | NULL_
        /// </summary>
        public override AstRoot VisitSchema_id_null(TSqlParser.Schema_id_nullContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaIdNull(context, list);
        }
        
        /// <summary>
        /// create_user : CREATE  USER  user_id  create_user_with_login | CREATE  USER  create_user_windows_principal_id | CREATE  USER  user_id  create_user_without_login?
        /// </summary>
        public override AstRoot VisitCreate_user(TSqlParser.Create_userContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateUser(context, list);
        }
        
        /// <summary>
        /// create_user_with_login : (for_from  LOGIN  login_id)?  (WITH  user_settings_shorts)?
        /// </summary>
        public override AstRoot VisitCreate_user_with_login(TSqlParser.Create_user_with_loginContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateUserWithLogin(context, list);
        }
        
        /// <summary>
        /// create_user_without_login : WITHOUT  LOGIN  user_settings_shorts? | for_from  CERTIFICATE  certificate_id | for_from  ASYMMETRIC  KEY  asym_key_id
        /// </summary>
        public override AstRoot VisitCreate_user_without_login(TSqlParser.Create_user_without_loginContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateUserWithoutLogin(context, list);
        }
        
        /// <summary>
        /// create_user_windows_principal_id : windows_principal_id  (WITH  user_settings)? | user_id  WITH  password_setting  user_settings? | user_id  FROM  EXTERNAL  PROVIDER
        /// </summary>
        public override AstRoot VisitCreate_user_windows_principal_id(TSqlParser.Create_user_windows_principal_idContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateUserWindowsPrincipalId(context, list);
        }
        
        /// <summary>
        /// pwd_value : pwd | binary_  HASHED
        /// </summary>
        public override AstRoot VisitPwd_value(TSqlParser.Pwd_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPwdValue(context, list);
        }
        
        /// <summary>
        /// user_settings_short : default_schema_set | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitUser_settings_short(TSqlParser.User_settings_shortContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUserSettingsShort(context, list);
        }
        
        /// <summary>
        /// user_setting : default_schema_set | default_language_set | SID  EQUAL  binary_ | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitUser_setting(TSqlParser.User_settingContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUserSetting(context, list);
        }
        
        /// <summary>
        /// create_user_azure_sql_dw : CREATE  USER  user_id  user_strategy?  (WITH  default_schema_set)? | CREATE  USER  user_id  FROM  EXTERNAL  PROVIDER  (WITH  default_schema_set)?
        /// </summary>
        public override AstRoot VisitCreate_user_azure_sql_dw(TSqlParser.Create_user_azure_sql_dwContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateUserAzureSqlDw(context, list);
        }
        
        /// <summary>
        /// user_strategy : for_from  LOGIN  login_id | WITHOUT  LOGIN
        /// </summary>
        public override AstRoot VisitUser_strategy(TSqlParser.User_strategyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUserStrategy(context, list);
        }
        
        /// <summary>
        /// alter_user_azure_sql_info : NAME  EQUAL  user_id | default_schema_set | LOGIN  EQUAL  login_id | ALLOW_ENCRYPTED_VALUE_MODIFICATIONS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitAlter_user_azure_sql_info(TSqlParser.Alter_user_azure_sql_infoContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterUserAzureSqlInfo(context, list);
        }
        
        /// <summary>
        /// workload_group_name : workload_group_group_id | DEFAULT_DOUBLE_QUOTE
        /// </summary>
        public override AstRoot VisitWorkload_group_name(TSqlParser.Workload_group_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWorkloadGroupName(context, list);
        }
        
        /// <summary>
        /// alter_workload_group_using : USING  (workload_group_pool_id | DEFAULT_DOUBLE_QUOTE)
        /// </summary>
        public override AstRoot VisitAlter_workload_group_using(TSqlParser.Alter_workload_group_usingContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterWorkloadGroupUsing(context, list);
        }
        
        /// <summary>
        /// workload_option_item : (IMPORTANCE  EQUAL  importance_level)?  (COMMA?  REQUEST_MAX_MEMORY_GRANT_PERCENT  EQUAL  request_max_memory_grant = decimal)?  (COMMA?  REQUEST_MAX_CPU_TIME_SEC  EQUAL  request_max_cpu_time_sec = decimal)?  (COMMA?  REQUEST_MEMORY_GRANT_TIMEOUT_SEC  EQUAL  request_memory_grant_timeout_sec = decimal)?  (COMMA?  MAX_DOP  EQUAL  max_dop = decimal)?  (COMMA?  GROUP_MAX_REQUESTS  EQUAL  group_max_requests = decimal)?
        /// </summary>
        public override AstRoot VisitWorkload_option_item(TSqlParser.Workload_option_itemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWorkloadOptionItem(context, list);
        }
        
        /// <summary>
        /// workload_group_id_or_default : workload_group_pool_id | DEFAULT_DOUBLE_QUOTE
        /// </summary>
        public override AstRoot VisitWorkload_group_id_or_default(TSqlParser.Workload_group_id_or_defaultContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWorkloadGroupIdOrDefault(context, list);
        }
        
        /// <summary>
        /// queue_settings : WITH  (STATUS  EQUAL  status = on_off  COMMA?)?  (RETENTION  EQUAL  retention = on_off  COMMA?)?  (ACTIVATION  LR_BRACKET  (((STATUS  EQUAL  activation_status = on_off  COMMA?)?  (PROCEDURE_NAME  EQUAL  func_proc_name_database_schema_ref  COMMA?)?  (MAX_QUEUE_READERS  EQUAL  max_readers = decimal  COMMA?)?  (EXECUTE  AS  (SELF | username = stringtext | OWNER)  COMMA?)?) | DROP)  RR_BRACKET  COMMA?)?  (POISON_MESSAGE_HANDLING  LR_BRACKET  (STATUS  EQUAL  on_off)  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitQueue_settings(TSqlParser.Queue_settingsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstQueueSettings(context, list);
        }
        
        /// <summary>
        /// table_or_queue : complete_table_ref | queue_id
        /// </summary>
        public override AstRoot VisitTable_or_queue(TSqlParser.Table_or_queueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableOrQueue(context, list);
        }
        
        /// <summary>
        /// queue_action : REBUILD  (WITH  LR_BRACKET  queue_rebuild_options  RR_BRACKET)? | REORGANIZE  (WITH  LOB_COMPACTION  EQUAL  on_off)? | MOVE  TO  id1 = id_default  id2 = id_default
        /// </summary>
        public override AstRoot VisitQueue_action(TSqlParser.Queue_actionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstQueueAction(context, list);
        }
        
        /// <summary>
        /// id_default : id_ | DEFAULT
        /// </summary>
        public override AstRoot VisitId_default(TSqlParser.Id_defaultContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIdDefault(context, list);
        }
        
        /// <summary>
        /// contract_item_target : message_type_id | DEFAULT
        /// </summary>
        public override AstRoot VisitContract_item_target(TSqlParser.Contract_item_targetContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstContractItemTarget(context, list);
        }
        
        /// <summary>
        /// when_matche : (WHEN  MATCHED  (AND  search_condition)?  THEN  merge_matched)+ | (WHEN  NOT  MATCHED  (BY  TARGET)?  (AND  search_condition)?  THEN  merge_not_matched) | (WHEN  NOT  MATCHED  BY  SOURCE  (AND  search_condition)?  THEN  merge_matched)+
        /// </summary>
        public override AstRoot VisitWhen_matche(TSqlParser.When_matcheContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWhenMatche(context, list);
        }
        
        /// <summary>
        /// merge_matched : UPDATE  SET  update_elem_merges | DELETE
        /// </summary>
        public override AstRoot VisitMerge_matched(TSqlParser.Merge_matchedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstMergeMatched(context, list);
        }
        
        /// <summary>
        /// merge_not_matched : INSERT  (LR_BRACKET  column_name_list  RR_BRACKET)?  (table_value_constructor | DEFAULT  VALUES)
        /// </summary>
        public override AstRoot VisitMerge_not_matched(TSqlParser.Merge_not_matchedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstMergeNotMatched(context, list);
        }
        
        /// <summary>
        /// delete_statement_from : ddl_object | rowset_function_limited | table_var = local_id
        /// </summary>
        public override AstRoot VisitDelete_statement_from(TSqlParser.Delete_statement_fromContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDeleteStatementFrom(context, list);
        }
        
        /// <summary>
        /// insert_statement_value : table_value_constructor | derived_table | execute_statement | DEFAULT  VALUES
        /// </summary>
        public override AstRoot VisitInsert_statement_value(TSqlParser.Insert_statement_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstInsertStatementValue(context, list);
        }
        
        /// <summary>
        /// receive_mode : receive_mode_enum | top_clause
        /// </summary>
        public override AstRoot VisitReceive_mode(TSqlParser.Receive_modeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstReceiveMode(context, list);
        }
        
        /// <summary>
        /// timespan : (local_id | constant)
        /// </summary>
        public override AstRoot VisitTimespan(TSqlParser.TimespanContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTimespan(context, list);
        }
        
        /// <summary>
        /// relational_index_option : rebuild_index_option | DROP_EXISTING  EQUAL  on_off | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitRelational_index_option(TSqlParser.Relational_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRelationalIndexOption(context, list);
        }
        
        /// <summary>
        /// index_status : index_status_enum | RESUME  resumable_index_options? | reorganize_partition | set_index_options | rebuild_partition
        /// </summary>
        public override AstRoot VisitIndex_status(TSqlParser.Index_statusContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIndexStatus(context, list);
        }
        
        /// <summary>
        /// index_name : (id_ | ALL)
        /// </summary>
        public override AstRoot VisitIndex_name(TSqlParser.Index_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIndexName(context, list);
        }
        
        /// <summary>
        /// resumable_index_option : MAXDOP  EQUAL  max_degree_of_parallelism = decimal | MAX_DURATION  EQUAL  max_duration = decimal  MINUTES? | low_priority_lock_wait
        /// </summary>
        public override AstRoot VisitResumable_index_option(TSqlParser.Resumable_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstResumableIndexOption(context, list);
        }
        
        /// <summary>
        /// reorganize_option : LOB_COMPACTION  EQUAL  on_off | COMPRESS_ALL_ROW_GROUPS  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitReorganize_option(TSqlParser.Reorganize_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstReorganizeOption(context, list);
        }
        
        /// <summary>
        /// set_index_option : ALLOW_ROW_LOCKS  EQUAL  on_off | ALLOW_PAGE_LOCKS  EQUAL  on_off | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off | IGNORE_DUP_KEY  EQUAL  on_off | STATISTICS_NORECOMPUTE  EQUAL  on_off | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES?
        /// </summary>
        public override AstRoot VisitSet_index_option(TSqlParser.Set_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSetIndexOption(context, list);
        }
        
        /// <summary>
        /// rebuild_partition : REBUILD  (PARTITION  EQUAL  ALL)?  rebuild_index_options? | REBUILD  PARTITION  EQUAL  decimal  single_partition_rebuild_index_options?
        /// </summary>
        public override AstRoot VisitRebuild_partition(TSqlParser.Rebuild_partitionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRebuildPartition(context, list);
        }
        
        /// <summary>
        /// rebuild_index_option : PAD_INDEX  EQUAL  on_off | FILLFACTOR  EQUAL  decimal | SORT_IN_TEMPDB  EQUAL  on_off | IGNORE_DUP_KEY  EQUAL  on_off | STATISTICS_NORECOMPUTE  EQUAL  on_off | STATISTICS_INCREMENTAL  EQUAL  on_off | ONLINE  EQUAL  online_value | RESUMABLE  EQUAL  on_off | MAX_DURATION  EQUAL  times = decimal  MINUTES? | ALLOW_ROW_LOCKS  EQUAL  on_off | ALLOW_PAGE_LOCKS  EQUAL  on_off | MAXDOP  EQUAL  max_degree_of_parallelism = decimal | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions? | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public override AstRoot VisitRebuild_index_option(TSqlParser.Rebuild_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRebuildIndexOption(context, list);
        }
        
        /// <summary>
        /// online_value : ON  (LR_BRACKET  low_priority_lock_wait  RR_BRACKET)? | OFF
        /// </summary>
        public override AstRoot VisitOnline_value(TSqlParser.Online_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstOnlineValue(context, list);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_option : SORT_IN_TEMPDB  EQUAL  on_off | MAXDOP  EQUAL  max_degree_of_parallelism = decimal | RESUMABLE  EQUAL  on_off | DATA_COMPRESSION  EQUAL  datacompression_mode  on_partitions? | XML_COMPRESSION  EQUAL  on_off  on_partitions? | ONLINE  EQUAL  online_value
        /// </summary>
        public override AstRoot VisitSingle_partition_rebuild_index_option(TSqlParser.Single_partition_rebuild_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSinglePartitionRebuildIndexOption(context, list);
        }
        
        /// <summary>
        /// partition_nums : partition_number = decimal  (TO  to_partition_number = decimal)?
        /// </summary>
        public override AstRoot VisitPartition_nums(TSqlParser.Partition_numsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPartitionNums(context, list);
        }
        
        /// <summary>
        /// columnstore_index_option : DROP_EXISTING  EQUAL  drop_existing = on_off | MAXDOP  EQUAL  max_degree_of_parallelism = decimal | ONLINE  EQUAL  online = on_off | COMPRESSION_DELAY  EQUAL  delay = decimal  MINUTES? | DATA_COMPRESSION  EQUAL  datacompression_column_mode  on_partitions?
        /// </summary>
        public override AstRoot VisitColumnstore_index_option(TSqlParser.Columnstore_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstColumnstoreIndexOption(context, list);
        }
        
        /// <summary>
        /// xml_index_option : PAD_INDEX  EQUAL  pad_index = on_off | FILLFACTOR  EQUAL  fillfactor = decimal | SORT_IN_TEMPDB  EQUAL  sort_in_tempdb = on_off | IGNORE_DUP_KEY  EQUAL  ignore_dup_key = on_off | DROP_EXISTING  EQUAL  drop_existing = on_off | ONLINE  EQUAL  online_value | ALLOW_ROW_LOCKS  EQUAL  allow_row_loks = on_off | ALLOW_PAGE_LOCKS  EQUAL  allow_page_locks = on_off | MAXDOP  EQUAL  max_degree_of_parallelism = decimal | XML_COMPRESSION  EQUAL  xml_compression = on_off
        /// </summary>
        public override AstRoot VisitXml_index_option(TSqlParser.Xml_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstXmlIndexOption(context, list);
        }
        
        /// <summary>
        /// procedure_declaration_arguments : procedure_params | LR_BRACKET  procedure_params  RR_BRACKET
        /// </summary>
        public override AstRoot VisitProcedure_declaration_arguments(TSqlParser.Procedure_declaration_argumentsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstProcedureDeclarationArguments(context, list);
        }
        
        /// <summary>
        /// procedure_declaration : procedure_declaration_create | ALTER
        /// </summary>
        public override AstRoot VisitProcedure_declaration(TSqlParser.Procedure_declarationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstProcedureDeclaration(context, list);
        }
        
        /// <summary>
        /// procedure_declaration_create : CREATE  (OR  alter_replace)?
        /// </summary>
        public override AstRoot VisitProcedure_declaration_create(TSqlParser.Procedure_declaration_createContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstProcedureDeclarationCreate(context, list);
        }
        
        /// <summary>
        /// replication_alias : as_external_name | sql_clause
        /// </summary>
        public override AstRoot VisitReplication_alias(TSqlParser.Replication_aliasContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstReplicationAlias(context, list);
        }
        
        /// <summary>
        /// create_or_alter_trigger : create_or_alter_dml_trigger | create_or_alter_ddl_trigger
        /// </summary>
        public override AstRoot VisitCreate_or_alter_trigger(TSqlParser.Create_or_alter_triggerContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateOrAlterTrigger(context, list);
        }
        
        /// <summary>
        /// create_or_alter : CREATE  (OR  ALTER)? | ALTER
        /// </summary>
        public override AstRoot VisitCreate_or_alter(TSqlParser.Create_or_alterContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateOrAlter(context, list);
        }
        
        /// <summary>
        /// for_after_instead : FOR | AFTER | INSTEAD  OF
        /// </summary>
        public override AstRoot VisitFor_after_instead(TSqlParser.For_after_insteadContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstForAfterInstead(context, list);
        }
        
        /// <summary>
        /// dml_trigger_option : ENCRYPTION | execute_clause
        /// </summary>
        public override AstRoot VisitDml_trigger_option(TSqlParser.Dml_trigger_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDmlTriggerOption(context, list);
        }
        
        /// <summary>
        /// procedure_option : procedure_option_enum | execute_clause
        /// </summary>
        public override AstRoot VisitProcedure_option(TSqlParser.Procedure_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstProcedureOption(context, list);
        }
        
        /// <summary>
        /// function_option : function_option_enum | execute_clause
        /// </summary>
        public override AstRoot VisitFunction_option(TSqlParser.Function_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFunctionOption(context, list);
        }
        
        /// <summary>
        /// statistics_with : FULLSCAN | SAMPLE  decimal  percent_row | STATS_STREAM
        /// </summary>
        public override AstRoot VisitStatistics_with(TSqlParser.Statistics_withContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstStatisticsWith(context, list);
        }
        
        /// <summary>
        /// update_statistics_option : (FULLSCAN  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?) | (SAMPLE  number = decimal  percent_row  (COMMA?  PERSIST_SAMPLE_PERCENT  EQUAL  on_off)?) | RESAMPLE  on_partitions? | STATS_STREAM  EQUAL  stats_stream_ = expression | ROWCOUNT  EQUAL  decimal | PAGECOUNT  EQUAL  decimal | ALL | COLUMNS | INDEX | NORECOMPUTE | INCREMENTAL  EQUAL  on_off | MAXDOP  EQUAL  max_dregree_of_parallelism = decimal | AUTO_DROP  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitUpdate_statistics_option(TSqlParser.Update_statistics_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUpdateStatisticsOption(context, list);
        }
        
        /// <summary>
        /// table_indices : INDEX  id_  UNIQUE?  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET | INDEX  id_  CLUSTERED  COLUMNSTORE | INDEX  id_  NONCLUSTERED?  COLUMNSTORE  LR_BRACKET  column_name_list  RR_BRACKET  create_table_index_options?  (ON  group_id)?
        /// </summary>
        public override AstRoot VisitTable_indices(TSqlParser.Table_indicesContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableIndices(context, list);
        }
        
        /// <summary>
        /// tbl_option : WITH  LR_BRACKET  tableoptions  RR_BRACKET | tableoptions
        /// </summary>
        public override AstRoot VisitTbl_option(TSqlParser.Tbl_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTblOption(context, list);
        }
        
        /// <summary>
        /// tableoption : table_opt_varname  EQUAL  table_opt_var_value | tableoption_cluster_mode | FILLFACTOR  EQUAL  decimal | table_distribution | DATA_COMPRESSION  EQUAL  compression_mode  on_partitions? | XML_COMPRESSION  EQUAL  on_off  on_partitions?
        /// </summary>
        public override AstRoot VisitTableoption(TSqlParser.TableoptionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableoption(context, list);
        }
        
        /// <summary>
        /// table_opt_varname : simple_id | keyword
        /// </summary>
        public override AstRoot VisitTable_opt_varname(TSqlParser.Table_opt_varnameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableOptVarname(context, list);
        }
        
        /// <summary>
        /// table_opt_var_value : simple_id | keyword | on_off | decimal
        /// </summary>
        public override AstRoot VisitTable_opt_var_value(TSqlParser.Table_opt_var_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableOptVarValue(context, list);
        }
        
        /// <summary>
        /// table_distribution : DISTRIBUTION  EQUAL  HASH  LR_BRACKET  id_  RR_BRACKET | CLUSTERED  INDEX  LR_BRACKET  column_name_list_with_order  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_distribution(TSqlParser.Table_distributionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableDistribution(context, list);
        }
        
        /// <summary>
        /// alter_table_constraint : (CONSTRAINT  constraint_id)?  alter_table_constraint_foreign | CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAlter_table_constraint(TSqlParser.Alter_table_constraintContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterTableConstraint(context, list);
        }
        
        /// <summary>
        /// constraint_delete_or_update : on_delete | on_update
        /// </summary>
        public override AstRoot VisitConstraint_delete_or_update(TSqlParser.Constraint_delete_or_updateContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstConstraintDeleteOrUpdate(context, list);
        }
        
        /// <summary>
        /// switch_partition : (PARTITION?  source_partition_number_expression = expression)?  TO  target_table = full_table_ref  (PARTITION  target_partition_number_expression = expression)?  (WITH  low_priority_lock_wait)?
        /// </summary>
        public override AstRoot VisitSwitch_partition(TSqlParser.Switch_partitionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSwitchPartition(context, list);
        }
        
        /// <summary>
        /// low_priority_lock_wait : WAIT_AT_LOW_PRIORITY  LR_BRACKET  MAX_DURATION  EQUAL  max_duration = timespan  MINUTES?  COMMA  ABORT_AFTER_WAIT  EQUAL  abort_after_wait = abord_after_mode  RR_BRACKET
        /// </summary>
        public override AstRoot VisitLow_priority_lock_wait(TSqlParser.Low_priority_lock_waitContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstLowPriorityLockWait(context, list);
        }
        
        /// <summary>
        /// alter_database_new_infos : MODIFY  NAME  EQUAL  database_id | collate_set | SET  database_optionspec  (WITH  termination)? | add_or_modify_files | add_or_modify_filegroups
        /// </summary>
        public override AstRoot VisitAlter_database_new_infos(TSqlParser.Alter_database_new_infosContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterDatabaseNewInfos(context, list);
        }
        
        /// <summary>
        /// add_or_modify_files : ADD  FILE  filespecs  (TO  FILEGROUP  file_group_id)? | ADD  LOG  FILE  filespecs | REMOVE  FILE  file_group_id | MODIFY  FILE  filespec
        /// </summary>
        public override AstRoot VisitAdd_or_modify_files(TSqlParser.Add_or_modify_filesContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAddOrModifyFiles(context, list);
        }
        
        /// <summary>
        /// add_or_modify_filegroups : ADD  FILEGROUP  file_group_id  filegroup_predicate? | REMOVE  FILEGROUP  file_group_id | MODIFY  FILEGROUP  file_group_id  modify_filegroups_options
        /// </summary>
        public override AstRoot VisitAdd_or_modify_filegroups(TSqlParser.Add_or_modify_filegroupsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAddOrModifyFilegroups(context, list);
        }
        
        /// <summary>
        /// modify_filegroups_options : filegroup_updatability_option | DEFAULT | NAME  EQUAL  file_group_id | AUTOGROW_SINGLE_FILE | AUTOGROW_ALL_FILES
        /// </summary>
        public override AstRoot VisitModify_filegroups_options(TSqlParser.Modify_filegroups_optionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstModifyFilegroupsOptions(context, list);
        }
        
        /// <summary>
        /// database_optionspec : auto_option | change_tracking_set | containment_set | cursor_option | database_mirroring_option | date_correlation_optimization_option | db_encryption_option | db_state_option | db_update_option | db_user_access_option | delayed_durability_option | db_option | database_filestream | hadr_options | mixed_page_allocation_option | parameterization_option | recovery_option | service_broker_option | snapshot_option | sql_option | target_recovery_time_option | termination
        /// </summary>
        public override AstRoot VisitDatabase_optionspec(TSqlParser.Database_optionspecContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseOptionspec(context, list);
        }
        
        /// <summary>
        /// auto_option : AUTO_CLOSE  on_off | AUTO_CREATE_STATISTICS  statistic_value | AUTO_SHRINK  on_off | AUTO_UPDATE_STATISTICS  on_off | AUTO_UPDATE_STATISTICS_ASYNC  on_off
        /// </summary>
        public override AstRoot VisitAuto_option(TSqlParser.Auto_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAutoOption(context, list);
        }
        
        /// <summary>
        /// change_tracking_set : CHANGE_TRACKING  EQUAL  (OFF | ON  change_tracking_option_list)
        /// </summary>
        public override AstRoot VisitChange_tracking_set(TSqlParser.Change_tracking_setContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstChangeTrackingSet(context, list);
        }
        
        /// <summary>
        /// change_tracking_option_list : AUTO_CLEANUP  EQUAL  on_off | CHANGE_RETENTION  EQUAL  period
        /// </summary>
        public override AstRoot VisitChange_tracking_option_list(TSqlParser.Change_tracking_option_listContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstChangeTrackingOptionList(context, list);
        }
        
        /// <summary>
        /// cursor_option : CURSOR_CLOSE_ON_COMMIT  on_off | CURSOR_DEFAULT  local_global
        /// </summary>
        public override AstRoot VisitCursor_option(TSqlParser.Cursor_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCursorOption(context, list);
        }
        
        /// <summary>
        /// listener_ip_addr : LISTENER_IP  EQUAL  (ALL | ipv4 | ipv6 | stringtext)
        /// </summary>
        public override AstRoot VisitListener_ip_addr(TSqlParser.Listener_ip_addrContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstListenerIpAddr(context, list);
        }
        
        /// <summary>
        /// authentication_configuration : AUTHENTICATION  EQUAL  (WINDOWS  authentication_mode?  (CERTIFICATE  certificate_id)? | CERTIFICATE  certificate_id  WINDOWS?  authentication_mode?)
        /// </summary>
        public override AstRoot VisitAuthentication_configuration(TSqlParser.Authentication_configurationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAuthenticationConfiguration(context, list);
        }
        
        /// <summary>
        /// mirroring_set_option : mirroring_partner  partner_option | mirroring_witness  witness_option
        /// </summary>
        public override AstRoot VisitMirroring_set_option(TSqlParser.Mirroring_set_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstMirroringSetOption(context, list);
        }
        
        /// <summary>
        /// partner_option : witness_partner_equal  partner_server | TIMEOUT  decimal | partner_option_enum
        /// </summary>
        public override AstRoot VisitPartner_option(TSqlParser.Partner_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPartnerOption(context, list);
        }
        
        /// <summary>
        /// witness_option : witness_partner_equal  witness_server | OFF
        /// </summary>
        public override AstRoot VisitWitness_option(TSqlParser.Witness_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWitnessOption(context, list);
        }
        
        /// <summary>
        /// partner_server_tcp_prefix : TCP  COLON  DOUBLE_FORWARD_SLASH
        /// </summary>
        public override AstRoot VisitPartner_server_tcp_prefix(TSqlParser.Partner_server_tcp_prefixContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPartnerServerTcpPrefix(context, list);
        }
        
        /// <summary>
        /// language_setting_value : NONE | lcid = decimal | language_id
        /// </summary>
        public override AstRoot VisitLanguage_setting_value(TSqlParser.Language_setting_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstLanguageSettingValue(context, list);
        }
        
        /// <summary>
        /// hadr_options : HADR  ((AVAILABILITY  GROUP  EQUAL  group_id | OFF) | suspend_resume)
        /// </summary>
        public override AstRoot VisitHadr_options(TSqlParser.Hadr_optionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstHadrOptions(context, list);
        }
        
        /// <summary>
        /// recovery_option : recovery_option_enum | TORN_PAGE_DETECTION  on_off | ACCELERATED_DATABASE_RECOVERY  EQUAL  on_off
        /// </summary>
        public override AstRoot VisitRecovery_option(TSqlParser.Recovery_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRecoveryOption(context, list);
        }
        
        /// <summary>
        /// service_broker_option : ENABLE_BROKER | DISABLE_BROKER | NEW_BROKER | ERROR_BROKER_CONVERSATIONS | HONOR_BROKER_PRIORITY  on_off
        /// </summary>
        public override AstRoot VisitService_broker_option(TSqlParser.Service_broker_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServiceBrokerOption(context, list);
        }
        
        /// <summary>
        /// snapshot_option : ALLOW_SNAPSHOT_ISOLATION  on_off | READ_COMMITTED_SNAPSHOT  on_off | MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = on_off
        /// </summary>
        public override AstRoot VisitSnapshot_option(TSqlParser.Snapshot_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSnapshotOption(context, list);
        }
        
        /// <summary>
        /// sql_option : ANSI_NULL_DEFAULT  on_off | ANSI_NULLS  on_off | ANSI_PADDING  on_off | ANSI_WARNINGS  on_off | ARITHABORT  on_off | COMPATIBILITY_LEVEL  EQUAL  decimal | CONCAT_NULL_YIELDS_NULL  on_off | NUMERIC_ROUNDABORT  on_off | QUOTED_IDENTIFIER  on_off | RECURSIVE_TRIGGERS  on_off
        /// </summary>
        public override AstRoot VisitSql_option(TSqlParser.Sql_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSqlOption(context, list);
        }
        
        /// <summary>
        /// termination : ROLLBACK  AFTER  seconds = decimal | ROLLBACK  IMMEDIATE | NO_WAIT
        /// </summary>
        public override AstRoot VisitTermination(TSqlParser.TerminationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTermination(context, list);
        }
        
        /// <summary>
        /// if_exists : IF  EXISTS
        /// </summary>
        public override AstRoot VisitIf_exists(TSqlParser.If_existsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIfExists(context, list);
        }
        
        /// <summary>
        /// create_type : CREATE  TYPE  name = schema_type_ref  (FROM  data_type  default_value)?  (AS  TABLE  LR_BRACKET  column_def_table_constraints  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitCreate_type(TSqlParser.Create_typeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateType(context, list);
        }
        
        /// <summary>
        /// drop_type : DROP  TYPE  (IF  EXISTS)?  name = schema_type_ref
        /// </summary>
        public override AstRoot VisitDrop_type(TSqlParser.Drop_typeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropType(context, list);
        }
        
        /// <summary>
        /// rowset_function_limited : openquery_args | open_data_source
        /// </summary>
        public override AstRoot VisitRowset_function_limited(TSqlParser.Rowset_function_limitedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRowsetFunctionLimited(context, list);
        }
        
        /// <summary>
        /// declare_statement : DECLARE  local_id  AS?  declare_object_table | DECLARE  declare_locals | DECLARE  local_id  AS?  xml_type_definition | WITH  XMLNAMESPACES  LR_BRACKET  xml_declarations  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDeclare_statement(TSqlParser.Declare_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDeclareStatement(context, list);
        }
        
        /// <summary>
        /// declare_object_table : table_type_definition | full_table_ref
        /// </summary>
        public override AstRoot VisitDeclare_object_table(TSqlParser.Declare_object_tableContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDeclareObjectTable(context, list);
        }
        
        /// <summary>
        /// xml_declaration : xml_namespace_uri = stringtext  AS  id_ | DEFAULT  stringtext
        /// </summary>
        public override AstRoot VisitXml_declaration(TSqlParser.Xml_declarationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstXmlDeclaration(context, list);
        }
        
        /// <summary>
        /// cursor_statement : CLOSE  GLOBAL?  cursor_name | DEALLOCATE  GLOBAL?  CURSOR?  cursor_name | declare_cursor | fetch_cursor | OPEN  GLOBAL?  cursor_name
        /// </summary>
        public override AstRoot VisitCursor_statement(TSqlParser.Cursor_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCursorStatement(context, list);
        }
        
        /// <summary>
        /// backup_to : TO  (logical_device_ids  TO  disk_tape_url_values)
        /// </summary>
        public override AstRoot VisitBackup_to(TSqlParser.Backup_toContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBackupTo(context, list);
        }
        
        /// <summary>
        /// backup_to_mirror : MIRROR  TO  (logical_device_ids | disk_tape_url_values)
        /// </summary>
        public override AstRoot VisitBackup_to_mirror(TSqlParser.Backup_to_mirrorContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBackupToMirror(context, list);
        }
        
        /// <summary>
        /// backup_certificate_private_key : FILE  EQUAL  private_key_file = stringtext | by_password_crypt
        /// </summary>
        public override AstRoot VisitBackup_certificate_private_key(TSqlParser.Backup_certificate_private_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBackupCertificatePrivateKey(context, list);
        }
        
        /// <summary>
        /// backup_setting : DIFFERENTIAL | COPY_ONLY | CREDENTIAL | FILE_SNAPSHOT | NO_CHECKSUM | CHECKSUM | STOP_ON_ERROR | CONTINUE_AFTER_ERROR | RESTART | DESCRIPTION  EQUAL  string_id | NAME  EQUAL  backup_id | EXPIREDATE  EQUAL  string_id | RETAINDAYS  EQUAL  decimal_id | MEDIADESCRIPTION  EQUAL  string_id | MEDIANAME  EQUAL  stringtext | BLOCKSIZE  EQUAL  decimal_id | BUFFERCOUNT  EQUAL  decimal_id | MAXTRANSFER  EQUAL  decimal_id | STATS  (EQUAL  decimal)? | ENCRYPTION  LR_BRACKET  ALGORITHM  EQUAL  algorithm_short  COMMA  SERVER  CERTIFICATE  EQUAL  server_certificate_value  RR_BRACKET | compression | rewind | load_moun_load | init_no_init | no_skip | format_noformat
        /// </summary>
        public override AstRoot VisitBackup_setting(TSqlParser.Backup_settingContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBackupSetting(context, list);
        }
        
        /// <summary>
        /// server_certificate_value : encryptor_id | SERVER  ASYMMETRIC  KEY  EQUAL  encryptor_id
        /// </summary>
        public override AstRoot VisitServer_certificate_value(TSqlParser.Server_certificate_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerCertificateValue(context, list);
        }
        
        /// <summary>
        /// kill_statement : KILL  (kill_process | kill_query_notification | kill_stats_job)
        /// </summary>
        public override AstRoot VisitKill_statement(TSqlParser.Kill_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstKillStatement(context, list);
        }
        
        /// <summary>
        /// kill_process : (session = decimal_string | UOW)  (WITH  STATUSONLY)?
        /// </summary>
        public override AstRoot VisitKill_process(TSqlParser.Kill_processContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstKillProcess(context, list);
        }
        
        /// <summary>
        /// kill_query_notification : QUERY  NOTIFICATION  SUBSCRIPTION  (ALL | subscription = decimal)
        /// </summary>
        public override AstRoot VisitKill_query_notification(TSqlParser.Kill_query_notificationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstKillQueryNotification(context, list);
        }
        
        /// <summary>
        /// kill_stats_job : STATS  JOB  job = decimal
        /// </summary>
        public override AstRoot VisitKill_stats_job(TSqlParser.Kill_stats_jobContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstKillStatsJob(context, list);
        }
        
        /// <summary>
        /// execute_body : (return_status = local_id  EQUAL)?  body_kind  execute_statement_arg? | LR_BRACKET  execute_var_strings  RR_BRACKET  (AS?  login_user  EQUAL  stringtext)?  (AT_KEYWORD  server_id)?
        /// </summary>
        public override AstRoot VisitExecute_body(TSqlParser.Execute_bodyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExecuteBody(context, list);
        }
        
        /// <summary>
        /// body_kind : func_proc_name_server_database_schema | execute_var_string
        /// </summary>
        public override AstRoot VisitBody_kind(TSqlParser.Body_kindContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBodyKind(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg : execute_statement_arg_unnamed  execute_statement_args? | execute_statement_arg_nameds
        /// </summary>
        public override AstRoot VisitExecute_statement_arg(TSqlParser.Execute_statement_argContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExecuteStatementArg(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_named : name = local_id  EQUAL  value = execute_parameter
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_named(TSqlParser.Execute_statement_arg_namedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExecuteStatementArgNamed(context, list);
        }
        
        /// <summary>
        /// execute_statement_arg_unnamed : value = execute_parameter
        /// </summary>
        public override AstRoot VisitExecute_statement_arg_unnamed(TSqlParser.Execute_statement_arg_unnamedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExecuteStatementArgUnnamed(context, list);
        }
        
        /// <summary>
        /// execute_parameter : constant | local_id  output_out? | id_ | DEFAULT | NULL_
        /// </summary>
        public override AstRoot VisitExecute_parameter(TSqlParser.Execute_parameterContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExecuteParameter(context, list);
        }
        
        /// <summary>
        /// execute_var_string : source = local_id  output_out?  (PLUS  more = local_id  (PLUS  execute_var_string)?)? | stringtext  (PLUS  local_id  (PLUS  execute_var_string)?)?
        /// </summary>
        public override AstRoot VisitExecute_var_string(TSqlParser.Execute_var_stringContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExecuteVarString(context, list);
        }
        
        /// <summary>
        /// security_statement : execute_clause | GRANT  grant_mode  (ON  (class_type_for_grant  DOUBLE_COLON)?  table = full_table_ref)?  TO  to_principal_rincipal_ids  (WITH  GRANT  OPTION)?  (AS  as_principal = principal_id)? | REVERT  (LR_BRACKET  WITH  COOKIE  EQUAL  local_id  RR_BRACKET)? | open_key | close_key | create_key | create_certificate
        /// </summary>
        public override AstRoot VisitSecurity_statement(TSqlParser.Security_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSecurityStatement(context, list);
        }
        
        /// <summary>
        /// grant_mode : ALL  PRIVILEGES? | grant_permission  (LR_BRACKET  column_name_list  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitGrant_mode(TSqlParser.Grant_modeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstGrantMode(context, list);
        }
        
        /// <summary>
        /// existing_keys : ASSEMBLY  assembly_id | EXECUTABLE?  FILE  EQUAL  path_to_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  private_key_options  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitExisting_keys(TSqlParser.Existing_keysContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExistingKeys(context, list);
        }
        
        /// <summary>
        /// private_key_options : (FILE | binary_)  EQUAL  path = stringtext  (COMMA  encryption_decryption  BY  password_setting)?
        /// </summary>
        public override AstRoot VisitPrivate_key_options(TSqlParser.Private_key_optionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPrivateKeyOptions(context, list);
        }
        
        /// <summary>
        /// open_key : OPEN  SYMMETRIC  KEY  symmetric_key_id  DECRYPTION  BY  decryption_mechanism | OPEN  MASTER  KEY  decryption_by_pwd
        /// </summary>
        public override AstRoot VisitOpen_key(TSqlParser.Open_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstOpenKey(context, list);
        }
        
        /// <summary>
        /// close_key : CLOSE  SYMMETRIC  KEY  symmetric_key_id | CLOSE  ALL  SYMMETRIC  KEYS | CLOSE  MASTER  KEY
        /// </summary>
        public override AstRoot VisitClose_key(TSqlParser.Close_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCloseKey(context, list);
        }
        
        /// <summary>
        /// create_key : CREATE  MASTER  KEY  encryption_by_pwd | CREATE  SYMMETRIC  KEY  symmetric_key_id  (AUTHORIZATION  user_id)?  (FROM  PROVIDER  provider_id)?  WITH  create_key_options
        /// </summary>
        public override AstRoot VisitCreate_key(TSqlParser.Create_keyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateKey(context, list);
        }
        
        /// <summary>
        /// create_key_option : key_options | ENCRYPTION  BY  encryption_mechanism
        /// </summary>
        public override AstRoot VisitCreate_key_option(TSqlParser.Create_key_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateKeyOption(context, list);
        }
        
        /// <summary>
        /// key_options : KEY_SOURCE  EQUAL  pass_phrase = stringtext | ALGORITHM  EQUAL  algorithm | IDENTITY_VALUE  EQUAL  identity_phrase = stringtext | PROVIDER_KEY_NAME  EQUAL  key_name_in_provider = stringtext | CREATION_DISPOSITION  EQUAL  creation_disposition
        /// </summary>
        public override AstRoot VisitKey_options(TSqlParser.Key_optionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstKeyOptions(context, list);
        }
        
        /// <summary>
        /// encryption_mechanism : CERTIFICATE  certificate_id | ASYMMETRIC  KEY  asym_key_id | SYMMETRIC  KEY  symmetric_key_id | password_setting
        /// </summary>
        public override AstRoot VisitEncryption_mechanism(TSqlParser.Encryption_mechanismContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEncryptionMechanism(context, list);
        }
        
        /// <summary>
        /// decryption_mechanism : CERTIFICATE  certificate_id  (WITH  password_setting)? | ASYMMETRIC  KEY  asym_key_id  (WITH  password_setting)? | SYMMETRIC  KEY  symmetric_key_id | password_setting
        /// </summary>
        public override AstRoot VisitDecryption_mechanism(TSqlParser.Decryption_mechanismContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDecryptionMechanism(context, list);
        }
        
        /// <summary>
        /// grant_permission : grant_permission_enum | grant_permission_alter | grant_permission_create
        /// </summary>
        public override AstRoot VisitGrant_permission(TSqlParser.Grant_permissionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstGrantPermission(context, list);
        }
        
        /// <summary>
        /// set_statement : SET  local_id  (DOT  member_name = id_)?  EQUAL  expression | SET  local_id  assignment_operator  expression | SET  local_id  EQUAL  CURSOR  declare_set_cursor_common  (FOR  cursor_mode)? | set_special
        /// </summary>
        public override AstRoot VisitSet_statement(TSqlParser.Set_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSetStatement(context, list);
        }
        
        /// <summary>
        /// cursor_mode : READ  ONLY | UPDATE  (OF  column_name_list)?
        /// </summary>
        public override AstRoot VisitCursor_mode(TSqlParser.Cursor_modeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCursorMode(context, list);
        }
        
        /// <summary>
        /// transaction_statement : BEGIN  DISTRIBUTED  transaction  transaction_ref? | BEGIN  transaction  (transaction_ref  (WITH  MARK  mark = stringtext)?)? | COMMIT  transaction  (transaction_ref  (WITH  LR_BRACKET  DELAYED_DURABILITY  EQUAL  on_off  RR_BRACKET)?)? | COMMIT  WORK? | COMMIT  transaction_identifier | ROLLBACK  transaction_identifier | ROLLBACK  transaction  transaction_ref? | ROLLBACK  WORK? | SAVE  transaction  transaction_ref?
        /// </summary>
        public override AstRoot VisitTransaction_statement(TSqlParser.Transaction_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTransactionStatement(context, list);
        }
        
        /// <summary>
        /// go_statement : GO  (count = decimal)?
        /// </summary>
        public override AstRoot VisitGo_statement(TSqlParser.Go_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstGoStatement(context, list);
        }
        
        /// <summary>
        /// setuser_statement : SETUSER  user = stringtext
        /// </summary>
        public override AstRoot VisitSetuser_statement(TSqlParser.Setuser_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSetuserStatement(context, list);
        }
        
        /// <summary>
        /// reconfigure_statement : RECONFIGURE  (WITH  OVERRIDE)?
        /// </summary>
        public override AstRoot VisitReconfigure_statement(TSqlParser.Reconfigure_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstReconfigureStatement(context, list);
        }
        
        /// <summary>
        /// shutdown_statement : SHUTDOWN  (WITH  NOWAIT)?
        /// </summary>
        public override AstRoot VisitShutdown_statement(TSqlParser.Shutdown_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstShutdownStatement(context, list);
        }
        
        /// <summary>
        /// checkpoint_statement : CHECKPOINT  (checkPointDuration = decimal)?
        /// </summary>
        public override AstRoot VisitCheckpoint_statement(TSqlParser.Checkpoint_statementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCheckpointStatement(context, list);
        }
        
        /// <summary>
        /// dbcc_special : DBCC  SHRINKLOG  (LR_BRACKET  SIZE  EQUAL  dbcc_special_size  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitDbcc_special(TSqlParser.Dbcc_specialContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDbccSpecial(context, list);
        }
        
        /// <summary>
        /// dbcc_special_size : constant_expression  id_ | DEFAULT
        /// </summary>
        public override AstRoot VisitDbcc_special_size(TSqlParser.Dbcc_special_sizeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDbccSpecialSize(context, list);
        }
        
        /// <summary>
        /// dbcc_clause : DBCC  name = dbcc_command  (LR_BRACKET  expression_list  RR_BRACKET)?  (WITH  dbcc_options)?
        /// </summary>
        public override AstRoot VisitDbcc_clause(TSqlParser.Dbcc_clauseContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDbccClause(context, list);
        }
        
        /// <summary>
        /// dbcc_command : simple_id | keyword
        /// </summary>
        public override AstRoot VisitDbcc_command(TSqlParser.Dbcc_commandContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDbccCommand(context, list);
        }
        
        /// <summary>
        /// execute_clause_mode : execute_clause_mode_enum | stringtext
        /// </summary>
        public override AstRoot VisitExecute_clause_mode(TSqlParser.Execute_clause_modeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExecuteClauseMode(context, list);
        }
        
        /// <summary>
        /// table_type_indice : type_indice  LR_BRACKET  column_name_list_with_order  RR_BRACKET | CHECK  LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTable_type_indice(TSqlParser.Table_type_indiceContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableTypeIndice(context, list);
        }
        
        /// <summary>
        /// type_indice : indice_name  clustered? | UNIQUE
        /// </summary>
        public override AstRoot VisitType_indice(TSqlParser.Type_indiceContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTypeIndice(context, list);
        }
        
        /// <summary>
        /// indice_name : PRIMARY  KEY | INDEX  index_id
        /// </summary>
        public override AstRoot VisitIndice_name(TSqlParser.Indice_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIndiceName(context, list);
        }
        
        /// <summary>
        /// xml_schema_collection : left = simple_id  DOT  right = simple_id
        /// </summary>
        public override AstRoot VisitXml_schema_collection(TSqlParser.Xml_schema_collectionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstXmlSchemaCollection(context, list);
        }
        
        /// <summary>
        /// column_def_table_constraint : column_definition | materialized_column_definition | table_constraint
        /// </summary>
        public override AstRoot VisitColumn_def_table_constraint(TSqlParser.Column_def_table_constraintContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstColumnDefTableConstraint(context, list);
        }
        
        /// <summary>
        /// column_definition_element : FILESTREAM | collate_set | SPARSE | MASKED  WITH  LR_BRACKET  FUNCTION  EQUAL  mask_function = stringtext  RR_BRACKET | (CONSTRAINT  constraint_id)?  DEFAULT  constant_expr = expression | IDENTITY  (LR_BRACKET  seed = decimal  COMMA  increment = decimal  RR_BRACKET)? | NOT  FOR  REPLICATION | GENERATED  ALWAYS  AS  generation_mode  start_end  HIDDEN_KEYWORD? | ROWGUIDCOL | ENCRYPTED  WITH  LR_BRACKET  column_encryption_key_id  EQUAL  key_name = stringtext  COMMA  ENCRYPTION_TYPE  EQUAL  encryption_mode  COMMA  ALGORITHM  EQUAL  algo = stringtext  RR_BRACKET | column_constraint
        /// </summary>
        public override AstRoot VisitColumn_definition_element(TSqlParser.Column_definition_elementContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstColumnDefinitionElement(context, list);
        }
        
        /// <summary>
        /// column_constraint : (CONSTRAINT  constraint_id)?  (null_notnull | (primary_key_unique  clustered?  primary_key_options) | ((FOREIGN  KEY)?  foreign_key_options) | check_constraint)
        /// </summary>
        public override AstRoot VisitColumn_constraint(TSqlParser.Column_constraintContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstColumnConstraint(context, list);
        }
        
        /// <summary>
        /// on_partition_or_filegroup : ON  ((partition_scheme_id  LR_BRACKET  partition_column_id  RR_BRACKET) | file_group_id | DEFAULT_DOUBLE_QUOTE)
        /// </summary>
        public override AstRoot VisitOn_partition_or_filegroup(TSqlParser.On_partition_or_filegroupContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstOnPartitionOrFilegroup(context, list);
        }
        
        /// <summary>
        /// table_constraint : (CONSTRAINT  constraint_id)?  ((primary_key_unique  clustered?  LR_BRACKET  column_name_list_with_order  RR_BRACKET  primary_key_options) | (FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  foreign_key_options) | (CONNECTION  LR_BRACKET  connection_nodes  RR_BRACKET) | (DEFAULT  LR_BRACKET?  ((stringtext | PLUS | function_call | decimal)+ | NEXT  VALUE  FOR  full_table_ref)  RR_BRACKET?  FOR  id_) | check_constraint)
        /// </summary>
        public override AstRoot VisitTable_constraint(TSqlParser.Table_constraintContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableConstraint(context, list);
        }
        
        /// <summary>
        /// connection_node : from_node_table = id_  TO  to_node_table = id_
        /// </summary>
        public override AstRoot VisitConnection_node(TSqlParser.Connection_nodeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstConnectionNode(context, list);
        }
        
        /// <summary>
        /// alter_table_index_option : PAD_INDEX  EQUAL  on_off | FILLFACTOR  EQUAL  decimal | IGNORE_DUP_KEY  EQUAL  on_off | STATISTICS_NORECOMPUTE  EQUAL  on_off | ALLOW_ROW_LOCKS  EQUAL  on_off | ALLOW_PAGE_LOCKS  EQUAL  on_off | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off | SORT_IN_TEMPDB  EQUAL  on_off | MAXDOP  EQUAL  max_degree_of_parallelism = decimal | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions? | XML_COMPRESSION  EQUAL  on_off  on_partitions? | table_distribution | ONLINE  EQUAL  online_value | RESUMABLE  EQUAL  on_off | MAX_DURATION  EQUAL  times = decimal  MINUTES?
        /// </summary>
        public override AstRoot VisitAlter_table_index_option(TSqlParser.Alter_table_index_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAlterTableIndexOption(context, list);
        }
        
        /// <summary>
        /// declare_set_cursor_common_partial : local_global | declare_set_cursor_common_partial_enum
        /// </summary>
        public override AstRoot VisitDeclare_set_cursor_common_partial(TSqlParser.Declare_set_cursor_common_partialContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDeclareSetCursorCommonPartial(context, list);
        }
        
        /// <summary>
        /// set_special : SET  left = id_  set_special_set_value | SET  STATISTICS  statistic_kind  statistics = on_off | SET  ROWCOUNT  local_id_decimal | SET  TEXTSIZE  decimal | SET  TRANSACTION  ISOLATION  LEVEL  transaction_level | SET  IDENTITY_INSERT  full_table_ref  identity_insert = on_off | SET  special_lists  list = on_off | SET  modify_method
        /// </summary>
        public override AstRoot VisitSet_special(TSqlParser.Set_specialContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSetSpecial(context, list);
        }
        
        /// <summary>
        /// transaction_level : transaction_isolation | decimal
        /// </summary>
        public override AstRoot VisitTransaction_level(TSqlParser.Transaction_levelContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTransactionLevel(context, list);
        }
        
        /// <summary>
        /// local_id_decimal : local_id | decimal
        /// </summary>
        public override AstRoot VisitLocal_id_decimal(TSqlParser.Local_id_decimalContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstLocalIdDecimal(context, list);
        }
        
        /// <summary>
        /// set_special_set_value : id_ | constant_local_id | on_off
        /// </summary>
        public override AstRoot VisitSet_special_set_value(TSqlParser.Set_special_set_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSetSpecialSetValue(context, list);
        }
        
        /// <summary>
        /// constant_local_id : constant | local_id
        /// </summary>
        public override AstRoot VisitConstant_local_id(TSqlParser.Constant_local_idContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstConstantLocalId(context, list);
        }
        
        /// <summary>
        /// expression : primitive_expression | function_call | expression  DOT  expression_chained | expression  DOT  hierarchyid_call | expression  COLLATE  id_ | case_expression | full_column_name | bracket_expression | unary_operator_expression | left = expression  op = expression_operator  right = expression | expression  time_zone | over_clause | DOLLAR_ACTION
        /// </summary>
        public override AstRoot VisitExpression(TSqlParser.ExpressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExpression(context, list);
        }
        
        /// <summary>
        /// expression_chained : value_call | query_call | exist_call | modify_call
        /// </summary>
        public override AstRoot VisitExpression_chained(TSqlParser.Expression_chainedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExpressionChained(context, list);
        }
        
        /// <summary>
        /// primitive_expression : DEFAULT | NULL_ | local_id | constant
        /// </summary>
        public override AstRoot VisitPrimitive_expression(TSqlParser.Primitive_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPrimitiveExpression(context, list);
        }
        
        /// <summary>
        /// case_expression : CASE  caseExpr = expression  switch_section+  (ELSE  elseExpr = expression)?  END | CASE  switch_search_condition_section+  (ELSE  elseExpr = expression)?  END
        /// </summary>
        public override AstRoot VisitCase_expression(TSqlParser.Case_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCaseExpression(context, list);
        }
        
        /// <summary>
        /// unary_operator_expression : BIT_NOT  expression | plus_minus  expression
        /// </summary>
        public override AstRoot VisitUnary_operator_expression(TSqlParser.Unary_operator_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUnaryOperatorExpression(context, list);
        }
        
        /// <summary>
        /// bracket_expression : LR_BRACKET  expression  RR_BRACKET | LR_BRACKET  subquery  RR_BRACKET
        /// </summary>
        public override AstRoot VisitBracket_expression(TSqlParser.Bracket_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBracketExpression(context, list);
        }
        
        /// <summary>
        /// constant_expression : NULL_ | constant | function_call | local_id | LR_BRACKET  constant_expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitConstant_expression(TSqlParser.Constant_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstConstantExpression(context, list);
        }
        
        /// <summary>
        /// common_table_expression : expression_name = id_  (LR_BRACKET  columns = column_name_list  RR_BRACKET)?  AS  LR_BRACKET  cte_query = select_statement  RR_BRACKET
        /// </summary>
        public override AstRoot VisitCommon_table_expression(TSqlParser.Common_table_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCommonTableExpression(context, list);
        }
        
        /// <summary>
        /// update_elem : local_id  EQUAL  full_column_name  update_operator  expression | column_ref  update_operator  expression | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUpdate_elem(TSqlParser.Update_elemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUpdateElem(context, list);
        }
        
        /// <summary>
        /// column_ref : full_column_name | local_id
        /// </summary>
        public override AstRoot VisitColumn_ref(TSqlParser.Column_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstColumnRef(context, list);
        }
        
        /// <summary>
        /// update_operator : EQUAL | assignment_operator
        /// </summary>
        public override AstRoot VisitUpdate_operator(TSqlParser.Update_operatorContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUpdateOperator(context, list);
        }
        
        /// <summary>
        /// update_elem_merge : column_ref  update_operator  expression | udt_column_id  DOT  method_id  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitUpdate_elem_merge(TSqlParser.Update_elem_mergeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUpdateElemMerge(context, list);
        }
        
        /// <summary>
        /// search_condition : NOT*  sub_search_condition | left = search_condition  and_or  right = search_condition
        /// </summary>
        public override AstRoot VisitSearch_condition(TSqlParser.Search_conditionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSearchCondition(context, list);
        }
        
        /// <summary>
        /// sub_search_condition : predicate_expr | LR_BRACKET  search_condition  RR_BRACKET
        /// </summary>
        public override AstRoot VisitSub_search_condition(TSqlParser.Sub_search_conditionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSubSearchCondition(context, list);
        }
        
        /// <summary>
        /// predicate_expr : EXISTS  LR_BRACKET  subquery  RR_BRACKET | freetext_predicate | predicate_binary | predicate_multi_assign | expression  comparison_operator  all_some_any  LR_BRACKET  subquery  RR_BRACKET | predicate_tier | predicate_not_in | predicate_not_like | expression  IS  null_notnull
        /// </summary>
        public override AstRoot VisitPredicate_expr(TSqlParser.Predicate_exprContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPredicateExpr(context, list);
        }
        
        /// <summary>
        /// query_expression : query_specification  select_order_by_clause?  unions = sql_unions | LR_BRACKET  left = query_expression  RR_BRACKET  (UNION  ALL?  right = query_expression)?
        /// </summary>
        public override AstRoot VisitQuery_expression(TSqlParser.Query_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstQueryExpression(context, list);
        }
        
        /// <summary>
        /// sql_union_def : query_specification | LR_BRACKET  query_expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitSql_union_def(TSqlParser.Sql_union_defContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSqlUnionDef(context, list);
        }
        
        /// <summary>
        /// top_clause : TOP  (top_percent | top_count)  (WITH  TIES)?
        /// </summary>
        public override AstRoot VisitTop_clause(TSqlParser.Top_clauseContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTopClause(context, list);
        }
        
        /// <summary>
        /// top_percent : percent_constant  PERCENT | LR_BRACKET  topper_expression = expression  RR_BRACKET  PERCENT
        /// </summary>
        public override AstRoot VisitTop_percent(TSqlParser.Top_percentContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTopPercent(context, list);
        }
        
        /// <summary>
        /// percent_constant : real | float | decimal
        /// </summary>
        public override AstRoot VisitPercent_constant(TSqlParser.Percent_constantContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPercentConstant(context, list);
        }
        
        /// <summary>
        /// top_count : count_constant = decimal | LR_BRACKET  topcount_expression = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitTop_count(TSqlParser.Top_countContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTopCount(context, list);
        }
        
        /// <summary>
        /// for_clause : FOR  BROWSE | for_clause_xml_raw | FOR  XML  EXPLICIT  xml_common_directives?  (COMMA  XMLDATA)? | FOR  XML  PATH  (LR_BRACKET  stringtext  RR_BRACKET)?  xml_common_directives?  (COMMA  ELEMENTS  absent_xsinil?)? | for_clause_json
        /// </summary>
        public override AstRoot VisitFor_clause(TSqlParser.For_clauseContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstForClause(context, list);
        }
        
        /// <summary>
        /// xml_common_directive : BINARY_KEYWORD  BASE64 | TYPE | ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitXml_common_directive(TSqlParser.Xml_common_directiveContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstXmlCommonDirective(context, list);
        }
        
        /// <summary>
        /// clause_json_info : ROOTWORD  (LR_BRACKET  stringtext  RR_BRACKET) | INCLUDE_NULL_VALUES | WITHOUT_ARRAY_WRAPPER
        /// </summary>
        public override AstRoot VisitClause_json_info(TSqlParser.Clause_json_infoContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstClauseJsonInfo(context, list);
        }
        
        /// <summary>
        /// order_by_expression : order_by = expression  (ascending = ASC | descending = DESC)?
        /// </summary>
        public override AstRoot VisitOrder_by_expression(TSqlParser.Order_by_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstOrderByExpression(context, list);
        }
        
        /// <summary>
        /// grouping_sets_item : grouping_sets_list | LR_BRACKET  grouping_sets_list?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitGrouping_sets_item(TSqlParser.Grouping_sets_itemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstGroupingSetsItem(context, list);
        }
        
        /// <summary>
        /// update_option : FAST  number_rows = decimal | MAXDOP  number_of_processors = decimal | MAXRECURSION  number_recursion = decimal | USE  PLAN  stringtext | OPTIMIZE  FOR  LR_BRACKET  optimize_for_args  RR_BRACKET | update_option_enum
        /// </summary>
        public override AstRoot VisitUpdate_option(TSqlParser.Update_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUpdateOption(context, list);
        }
        
        /// <summary>
        /// asterisk : star_asterisk | table_asterisk | updated_asterisk
        /// </summary>
        public override AstRoot VisitAsterisk(TSqlParser.AsteriskContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAsterisk(context, list);
        }
        
        /// <summary>
        /// column_elem_target : full_column_name | DOLLAR  IDENTITY | DOLLAR  ROWGUID | NULL_
        /// </summary>
        public override AstRoot VisitColumn_elem_target(TSqlParser.Column_elem_targetContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstColumnElemTarget(context, list);
        }
        
        /// <summary>
        /// udt_elem : udt_column_id  DOT  non_static_attr_id  udt_method_arguments  as_column_alias? | udt_column_id  DOUBLE_COLON  static_attr_id  udt_method_arguments?  as_column_alias?
        /// </summary>
        public override AstRoot VisitUdt_elem(TSqlParser.Udt_elemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUdtElem(context, list);
        }
        
        /// <summary>
        /// expression_elem : leftAlias = column_alias  eq = EQUAL  leftAssignment = expression | expressionAs = expression  as_column_alias?
        /// </summary>
        public override AstRoot VisitExpression_elem(TSqlParser.Expression_elemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExpressionElem(context, list);
        }
        
        /// <summary>
        /// select_list_elem : asterisk | column_elem | udt_elem | expression_assign_elem | expression_elem
        /// </summary>
        public override AstRoot VisitSelect_list_elem(TSqlParser.Select_list_elemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSelectListElem(context, list);
        }
        
        /// <summary>
        /// table_source_item_joined : table_source_item  joins = join_part | LR_BRACKET  table_source_item_joined  RR_BRACKET  joins = join_part
        /// </summary>
        public override AstRoot VisitTable_source_item_joined(TSqlParser.Table_source_item_joinedContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableSourceItemJoined(context, list);
        }
        
        /// <summary>
        /// table_source_item : complete_table_ref  deprecated_table_hint  as_table_alias | complete_table_ref  as_table_alias?  table_hints? | rowset_function  as_table_alias? | LR_BRACKET  derived_table  RR_BRACKET  as_table_alias_column? | change_table  as_table_alias? | nodes_method  as_table_alias_column? | function_call  as_table_alias_column? | loc_id = local_id  as_table_alias? | loc_id_call = local_id  DOT  loc_fcall = function_call  as_table_alias_column? | open_xml | open_json | DOUBLE_COLON  oldstyle_fcall = function_call  as_table_alias?
        /// </summary>
        public override AstRoot VisitTable_source_item(TSqlParser.Table_source_itemContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableSourceItem(context, list);
        }
        
        /// <summary>
        /// table_hints : with_table_hints | deprecated_table_hint | sybase_legacy_hints
        /// </summary>
        public override AstRoot VisitTable_hints(TSqlParser.Table_hintsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableHints(context, list);
        }
        
        /// <summary>
        /// change_table : change_table_changes | change_table_version
        /// </summary>
        public override AstRoot VisitChange_table(TSqlParser.Change_tableContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstChangeTable(context, list);
        }
        
        /// <summary>
        /// change_table_changes : CHANGETABLE  LR_BRACKET  CHANGES  changetable = full_table_ref  COMMA  (NULL_ | decimal_local_id)  RR_BRACKET
        /// </summary>
        public override AstRoot VisitChange_table_changes(TSqlParser.Change_table_changesContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstChangeTableChanges(context, list);
        }
        
        /// <summary>
        /// change_table_version : CHANGETABLE  LR_BRACKET  VERSION  versiontable = full_table_ref  COMMA  pk_columns = full_column_name_list  COMMA  pk_values = select_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitChange_table_version(TSqlParser.Change_table_versionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstChangeTableVersion(context, list);
        }
        
        /// <summary>
        /// join_part : join_on | cross_join | apply_enum | pivot_join | unpivot_join
        /// </summary>
        public override AstRoot VisitJoin_part(TSqlParser.Join_partContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstJoinPart(context, list);
        }
        
        /// <summary>
        /// rowset_function : OPENROWSET  LR_BRACKET  providerName = stringtext  COMMA  connectionString = stringtext  COMMA  sql = stringtext  RR_BRACKET | OPENROWSET  LR_BRACKET  BULK  data_file = stringtext  COMMA  buk_extended_options  RR_BRACKET
        /// </summary>
        public override AstRoot VisitRowset_function(TSqlParser.Rowset_functionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRowsetFunction(context, list);
        }
        
        /// <summary>
        /// buk_extended_options : bulk_options | id_
        /// </summary>
        public override AstRoot VisitBuk_extended_options(TSqlParser.Buk_extended_optionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBukExtendedOptions(context, list);
        }
        
        /// <summary>
        /// derived_table : subquery | LR_BRACKET  subqueries  RR_BRACKET | table_value_constructor | LR_BRACKET  table_value_constructor  RR_BRACKET
        /// </summary>
        public override AstRoot VisitDerived_table(TSqlParser.Derived_tableContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDerivedTable(context, list);
        }
        
        /// <summary>
        /// function_call : ranking_windowed_function | aggregate_windowed_function | analytic_windowed_function | built_in_functions | scalar_function_name  LR_BRACKET  expression_list?  RR_BRACKET | freetext_function | partition_function | hierarchyid_static_method
        /// </summary>
        public override AstRoot VisitFunction_call(TSqlParser.Function_callContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFunctionCall(context, list);
        }
        
        /// <summary>
        /// freetext_function : containstable_freetexttable  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  (COMMA  expression)?  RR_BRACKET | semantic_table  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression  RR_BRACKET | SEMANTICSIMILARITYDETAILSTABLE  LR_BRACKET  full_table_ref  COMMA  name1 = full_column_name  COMMA  expr1 = expression  COMMA  name2 = full_column_name  COMMA  expr2 = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFreetext_function(TSqlParser.Freetext_functionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFreetextFunction(context, list);
        }
        
        /// <summary>
        /// freetext_predicate : CONTAINS  LR_BRACKET  predicate_contains  COMMA  rule = expression  RR_BRACKET | FREETEXT  LR_BRACKET  freetext_table_andcolumn_names  COMMA  expression_language  RR_BRACKET
        /// </summary>
        public override AstRoot VisitFreetext_predicate(TSqlParser.Freetext_predicateContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFreetextPredicate(context, list);
        }
        
        /// <summary>
        /// predicate_contains : full_column_name | full_column_names | STAR | PROPERTY  LR_BRACKET  full_column_name  COMMA  property = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitPredicate_contains(TSqlParser.Predicate_containsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPredicateContains(context, list);
        }
        
        /// <summary>
        /// built_in_functions : APP_NAME  LR_BRACKET  RR_BRACKET | APPLOCK_MODE  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lock_owner = expression  RR_BRACKET | APPLOCK_TEST  LR_BRACKET  database_principal = expression  COMMA  resource_name = expression  COMMA  lockmode = expression  COMMA  lock_owner = expression  RR_BRACKET | ASSEMBLYPROPERTY  LR_BRACKET  assemblyName = expression  COMMA  propertyName = expression  RR_BRACKET | COL_LENGTH  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET | COL_NAME  LR_BRACKET  table = expression  COMMA  column = expression  RR_BRACKET | COLUMNPROPERTY  LR_BRACKET  idExpression = expression  COMMA  column = expression  COMMA  property = expression  RR_BRACKET | DATABASEPROPERTYEX  LR_BRACKET  database = expression  COMMA  property = expression  RR_BRACKET | DB_ID  LR_BRACKET  databaseName = expression  RR_BRACKET | DB_NAME  LR_BRACKET  database = expression  RR_BRACKET | FILE_ID  LR_BRACKET  file_name = expression  RR_BRACKET | FILE_IDEX  LR_BRACKET  file_name = expression  RR_BRACKET | FILE_NAME  LR_BRACKET  file = expression  RR_BRACKET | FILEGROUP_ID  LR_BRACKET  filegroup_name = expression  RR_BRACKET | FILEGROUP_NAME  LR_BRACKET  filegroup_id = expression  RR_BRACKET | FILEGROUPPROPERTY  LR_BRACKET  filegroup = expression  COMMA  property = expression  RR_BRACKET | FILEPROPERTY  LR_BRACKET  file = expression  COMMA  property = expression  RR_BRACKET | FILEPROPERTYEX  LR_BRACKET  name = expression  COMMA  property = expression  RR_BRACKET | FULLTEXTCATALOGPROPERTY  LR_BRACKET  catalog = expression  COMMA  property = expression  RR_BRACKET | FULLTEXTSERVICEPROPERTY  LR_BRACKET  property = expression  RR_BRACKET | INDEX_COL  LR_BRACKET  tableOrView = expression  COMMA  index = expression  COMMA  key = expression  RR_BRACKET | INDEXKEY_PROPERTY  LR_BRACKET  object = expression  COMMA  index = expression  COMMA  key = expression  COMMA  property = expression  RR_BRACKET | INDEXPROPERTY  LR_BRACKET  object = expression  COMMA  index_or_statistics = expression  COMMA  property = expression  RR_BRACKET | NEXT  VALUE  FOR  sequenceName = full_table_ref  (OVER  LR_BRACKET  order_by_clause  RR_BRACKET)? | OBJECT_DEFINITION  LR_BRACKET  object = expression  RR_BRACKET | OBJECT_ID  LR_BRACKET  objectName = expression  (COMMA  object_type = expression)?  RR_BRACKET | OBJECT_NAME  LR_BRACKET  object = expression  (COMMA  database = expression)?  RR_BRACKET | OBJECT_SCHEMA_NAME  LR_BRACKET  target_object = expression  (COMMA  database = expression)?  RR_BRACKET | OBJECTPROPERTY  LR_BRACKET  idExpression = expression  COMMA  property = expression  RR_BRACKET | OBJECTPROPERTYEX  LR_BRACKET  idExpression = expression  COMMA  property = expression  RR_BRACKET | ORIGINAL_DB_NAME  LR_BRACKET  RR_BRACKET | PARSENAME  LR_BRACKET  objectName = expression  COMMA  object_piece = expression  RR_BRACKET | SCHEMA_ID  LR_BRACKET  schemaName = expression  RR_BRACKET | SCHEMA_NAME  LR_BRACKET  schemaId = expression  RR_BRACKET | SCOPE_IDENTITY  LR_BRACKET  RR_BRACKET | SERVERPROPERTY  LR_BRACKET  property = expression  RR_BRACKET | STATS_DATE  LR_BRACKET  target_object = expression  COMMA  stats = expression  RR_BRACKET | TYPE_ID  LR_BRACKET  type_name = expression  RR_BRACKET | TYPE_NAME  LR_BRACKET  type = expression  RR_BRACKET | TYPEPROPERTY  LR_BRACKET  type = expression  COMMA  property = expression  RR_BRACKET | ASCII  LR_BRACKET  character_expression = expression  RR_BRACKET | CHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET | CHARINDEX  LR_BRACKET  expressionToFind = expression  COMMA  expressionToSearch = expression  (COMMA  start_location = expression)?  RR_BRACKET | CONCAT  LR_BRACKET  expressions  RR_BRACKET | CONCAT_WS  LR_BRACKET  expressions  RR_BRACKET | DIFFERENCE  LR_BRACKET  character_expression_1 = expression  COMMA  character_expression_2 = expression  RR_BRACKET | FORMAT  LR_BRACKET  expressions  RR_BRACKET | LEFT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET | LEN  LR_BRACKET  string_expression = expression  RR_BRACKET | LOWER  LR_BRACKET  character_expression = expression  RR_BRACKET | LTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET | NCHAR  LR_BRACKET  integer_expression = expression  RR_BRACKET | PATINDEX  LR_BRACKET  pattern = expression  COMMA  string_expression = expression  RR_BRACKET | QUOTENAME  LR_BRACKET  character_string = expression  (COMMA  quote_character = expression)?  RR_BRACKET | REPLACE  LR_BRACKET  input = expression  COMMA  replacing = expression  COMMA  with = expression  RR_BRACKET | REPLICATE  LR_BRACKET  string_expression = expression  COMMA  integer_expression = expression  RR_BRACKET | REVERSE  LR_BRACKET  string_expression = expression  RR_BRACKET | RIGHT  LR_BRACKET  character_expression = expression  COMMA  integer_expression = expression  RR_BRACKET | RTRIM  LR_BRACKET  character_expression = expression  RR_BRACKET | SOUNDEX  LR_BRACKET  character_expression = expression  RR_BRACKET | SPACE_KEYWORD  LR_BRACKET  integer_expression = expression  RR_BRACKET | STR  LR_BRACKET  float_expression = expression  (COMMA  length_expression = expression  (COMMA  decimal_expr = expression)?)?  RR_BRACKET | STRING_AGG  LR_BRACKET  expr = expression  COMMA  separator = expression  RR_BRACKET  (WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET)? | STRING_ESCAPE  LR_BRACKET  text_ = expression  COMMA  type_ = expression  RR_BRACKET | STUFF  LR_BRACKET  str = expression  COMMA  from = decimal  COMMA  to = decimal  COMMA  str_with = expression  RR_BRACKET | SUBSTRING  LR_BRACKET  string_expression = expression  COMMA  start_ = expression  COMMA  length = expression  RR_BRACKET | TRANSLATE  LR_BRACKET  inputString = expression  COMMA  characters = expression  COMMA  translations = expression  RR_BRACKET | TRIM  LR_BRACKET  (characters = expression  FROM)?  string_ = expression  RR_BRACKET | UNICODE  LR_BRACKET  ncharacter_expression = expression  RR_BRACKET | UPPER  LR_BRACKET  character_expression = expression  RR_BRACKET | BINARY_CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET | CHECKSUM  LR_BRACKET  expression_or_star  RR_BRACKET | COMPRESS  LR_BRACKET  expr = expression  RR_BRACKET | CONNECTIONPROPERTY  LR_BRACKET  cnx_property = stringtext  RR_BRACKET | CONTEXT_INFO  LR_BRACKET  RR_BRACKET | CURRENT_REQUEST_ID  LR_BRACKET  RR_BRACKET | CURRENT_TRANSACTION_ID  LR_BRACKET  RR_BRACKET | DECOMPRESS  LR_BRACKET  expr = expression  RR_BRACKET | ERROR_LINE  LR_BRACKET  RR_BRACKET | ERROR_MESSAGE  LR_BRACKET  RR_BRACKET | ERROR_NUMBER  LR_BRACKET  RR_BRACKET | ERROR_PROCEDURE  LR_BRACKET  RR_BRACKET | ERROR_SEVERITY  LR_BRACKET  RR_BRACKET | ERROR_STATE  LR_BRACKET  RR_BRACKET | FORMATMESSAGE  LR_BRACKET  format_argument  COMMA  expressions  RR_BRACKET | GET_FILESTREAM_TRANSACTION_CONTEXT  LR_BRACKET  RR_BRACKET | GETANSINULL  LR_BRACKET  (database_name = stringtext)?  RR_BRACKET | HOST_ID  LR_BRACKET  RR_BRACKET | HOST_NAME  LR_BRACKET  RR_BRACKET | ISNULL  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET | ISNUMERIC  LR_BRACKET  expression  RR_BRACKET | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET | NEWID  LR_BRACKET  RR_BRACKET | NEWSEQUENTIALID  LR_BRACKET  RR_BRACKET | ROWCOUNT_BIG  LR_BRACKET  RR_BRACKET | SESSION_CONTEXT  LR_BRACKET  session_key = stringtext  RR_BRACKET | XACT_STATE  LR_BRACKET  RR_BRACKET | CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET | TRY_CAST  LR_BRACKET  expression  AS  data_type  RR_BRACKET | CONVERT  LR_BRACKET  convert_data_type = data_type  COMMA  expression2  RR_BRACKET | COALESCE  LR_BRACKET  expression_list  RR_BRACKET | CURRENT_DATE  LR_BRACKET  RR_BRACKET | CURRENT_TIMESTAMP | CURRENT_USER | DATEADD  LR_BRACKET  datepart = id_simple  COMMA  number = expression  COMMA  date = expression  RR_BRACKET | DATEDIFF  LR_BRACKET  datepart = id_simple  COMMA  date_first = expression  COMMA  date_second = expression  RR_BRACKET | DATENAME  LR_BRACKET  datepart = id_simple  COMMA  date = expression  RR_BRACKET | DATEPART  LR_BRACKET  datepart = id_simple  COMMA  date = expression  RR_BRACKET | GETDATE  LR_BRACKET  RR_BRACKET | GETUTCDATE  LR_BRACKET  RR_BRACKET | IDENTITY  LR_BRACKET  data_type  (COMMA  seed = decimal)?  (COMMA  increment = decimal)?  RR_BRACKET | MIN_ACTIVE_ROWVERSION  LR_BRACKET  RR_BRACKET | NULLIF  LR_BRACKET  left = expression  COMMA  right = expression  RR_BRACKET | SESSION_USER | SYSTEM_USER | USER | PARSE  LR_BRACKET  str = expression  AS  data_type  (USING  culture = expression)?  RR_BRACKET | xml_data_type_methods | IIF  LR_BRACKET  cond = search_condition  COMMA  left = expression  COMMA  right = expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitBuilt_in_functions(TSqlParser.Built_in_functionsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstBuiltInFunctions(context, list);
        }
        
        /// <summary>
        /// expression_or_star : STAR | expressions
        /// </summary>
        public override AstRoot VisitExpression_or_star(TSqlParser.Expression_or_starContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExpressionOrStar(context, list);
        }
        
        /// <summary>
        /// format_argument : decimal | stringtext | local_id
        /// </summary>
        public override AstRoot VisitFormat_argument(TSqlParser.Format_argumentContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFormatArgument(context, list);
        }
        
        /// <summary>
        /// xml_data_type_methods : value_method | query_method | exist_method | modify_method
        /// </summary>
        public override AstRoot VisitXml_data_type_methods(TSqlParser.Xml_data_type_methodsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstXmlDataTypeMethods(context, list);
        }
        
        /// <summary>
        /// value_method : (loc = local_id | value = full_column_name | eventdata = EVENTDATA  LR_BRACKET  RR_BRACKET | query = query_method | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = value_call
        /// </summary>
        public override AstRoot VisitValue_method(TSqlParser.Value_methodContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstValueMethod(context, list);
        }
        
        /// <summary>
        /// value_call : VALUE  LR_BRACKET  xquery = stringtext  COMMA  sqltype = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitValue_call(TSqlParser.Value_callContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstValueCall(context, list);
        }
        
        /// <summary>
        /// query_method : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = query_call
        /// </summary>
        public override AstRoot VisitQuery_method(TSqlParser.Query_methodContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstQueryMethod(context, list);
        }
        
        /// <summary>
        /// query_call : QUERY  LR_BRACKET  xquery = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitQuery_call(TSqlParser.Query_callContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstQueryCall(context, list);
        }
        
        /// <summary>
        /// exist_method : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = exist_call
        /// </summary>
        public override AstRoot VisitExist_method(TSqlParser.Exist_methodContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExistMethod(context, list);
        }
        
        /// <summary>
        /// exist_call : EXIST  LR_BRACKET  xquery = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitExist_call(TSqlParser.Exist_callContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstExistCall(context, list);
        }
        
        /// <summary>
        /// modify_method : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  call = modify_call
        /// </summary>
        public override AstRoot VisitModify_method(TSqlParser.Modify_methodContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstModifyMethod(context, list);
        }
        
        /// <summary>
        /// modify_call : MODIFY  LR_BRACKET  xml_dml = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitModify_call(TSqlParser.Modify_callContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstModifyCall(context, list);
        }
        
        /// <summary>
        /// hierarchyid_call : GETANCESTOR  LR_BRACKET  n = expression  RR_BRACKET | GETDESCENDANT  LR_BRACKET  child1 = expression  COMMA  child2 = expression  RR_BRACKET | GETLEVEL  LR_BRACKET  RR_BRACKET | ISDESCENDANTOF  LR_BRACKET  parent_ = expression  RR_BRACKET | GETREPARENTEDVALUE  LR_BRACKET  oldroot = expression  COMMA  newroot = expression  RR_BRACKET | TOSTRING  LR_BRACKET  RR_BRACKET
        /// </summary>
        public override AstRoot VisitHierarchyid_call(TSqlParser.Hierarchyid_callContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstHierarchyidCall(context, list);
        }
        
        /// <summary>
        /// hierarchyid_static_method : HIERARCHYID  DOUBLE_COLON  (GETROOT  LR_BRACKET  RR_BRACKET | PARSE  LR_BRACKET  input = expression  RR_BRACKET)
        /// </summary>
        public override AstRoot VisitHierarchyid_static_method(TSqlParser.Hierarchyid_static_methodContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstHierarchyidStaticMethod(context, list);
        }
        
        /// <summary>
        /// nodes_method : (loc = local_id | value = full_column_name | LR_BRACKET  subquery  RR_BRACKET)  DOT  NODES  LR_BRACKET  xquery = stringtext  RR_BRACKET
        /// </summary>
        public override AstRoot VisitNodes_method(TSqlParser.Nodes_methodContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstNodesMethod(context, list);
        }
        
        /// <summary>
        /// table_hint : NOEXPAND | INDEX  hint_index | FORCESEEK  (LR_BRACKET  index_value  LR_BRACKET  column_name_list  RR_BRACKET  RR_BRACKET)? | FORCESCAN | HOLDLOCK | NOLOCK | NOWAIT | PAGLOCK | READCOMMITTED | READCOMMITTEDLOCK | READPAST | READUNCOMMITTED | REPEATABLEREAD | ROWLOCK | SERIALIZABLE | SNAPSHOT | SPATIAL_WINDOW_MAX_CELLS  EQUAL  decimal | TABLOCK | TABLOCKX | UPDLOCK | XLOCK | KEEPIDENTITY | KEEPDEFAULTS | IGNORE_CONSTRAINTS | IGNORE_TRIGGERS
        /// </summary>
        public override AstRoot VisitTable_hint(TSqlParser.Table_hintContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstTableHint(context, list);
        }
        
        /// <summary>
        /// hint_index : LR_BRACKET  index_values  RR_BRACKET | EQUAL  LR_BRACKET  index_value  RR_BRACKET | EQUAL  index_value
        /// </summary>
        public override AstRoot VisitHint_index(TSqlParser.Hint_indexContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstHintIndex(context, list);
        }
        
        /// <summary>
        /// index_value : id_ | decimal
        /// </summary>
        public override AstRoot VisitIndex_value(TSqlParser.Index_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstIndexValue(context, list);
        }
        
        /// <summary>
        /// ranking_windowed_function : ranking_windowed  LR_BRACKET  RR_BRACKET  over_clause | NTILE  LR_BRACKET  expression  RR_BRACKET  over_clause
        /// </summary>
        public override AstRoot VisitRanking_windowed_function(TSqlParser.Ranking_windowed_functionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstRankingWindowedFunction(context, list);
        }
        
        /// <summary>
        /// aggregate_windowed_function : agg_function  LR_BRACKET  all_distinct_expression  RR_BRACKET  over_clause? | count_count_big  LR_BRACKET  all_distinct_expression_or_star  RR_BRACKET  over_clause? | CHECKSUM_AGG  LR_BRACKET  all_distinct_expression  RR_BRACKET | GROUPING  LR_BRACKET  expression  RR_BRACKET | GROUPING_ID  LR_BRACKET  expression_list  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAggregate_windowed_function(TSqlParser.Aggregate_windowed_functionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAggregateWindowedFunction(context, list);
        }
        
        /// <summary>
        /// all_distinct_expression_or_star : STAR | all_distinct_expression
        /// </summary>
        public override AstRoot VisitAll_distinct_expression_or_star(TSqlParser.All_distinct_expression_or_starContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAllDistinctExpressionOrStar(context, list);
        }
        
        /// <summary>
        /// analytic_windowed_function : first_last_value  LR_BRACKET  expression  RR_BRACKET  over_clause | lag_lead  LR_BRACKET  expression  (COMMA  expression2)?  RR_BRACKET  over_clause | cume_percent  LR_BRACKET  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause  RR_BRACKET | percentil  LR_BRACKET  expression  RR_BRACKET  WITHIN  GROUP  LR_BRACKET  order_by_clause  RR_BRACKET  OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  RR_BRACKET
        /// </summary>
        public override AstRoot VisitAnalytic_windowed_function(TSqlParser.Analytic_windowed_functionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAnalyticWindowedFunction(context, list);
        }
        
        /// <summary>
        /// window_frame_extent : window_frame_preceding | BETWEEN  left = window_frame_bound  AND  right = window_frame_bound
        /// </summary>
        public override AstRoot VisitWindow_frame_extent(TSqlParser.Window_frame_extentContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWindowFrameExtent(context, list);
        }
        
        /// <summary>
        /// window_frame_bound : window_frame_preceding | window_frame_following
        /// </summary>
        public override AstRoot VisitWindow_frame_bound(TSqlParser.Window_frame_boundContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWindowFrameBound(context, list);
        }
        
        /// <summary>
        /// window_frame_preceding : UNBOUNDED  PRECEDING | decimal  PRECEDING | CURRENT  ROW
        /// </summary>
        public override AstRoot VisitWindow_frame_preceding(TSqlParser.Window_frame_precedingContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWindowFramePreceding(context, list);
        }
        
        /// <summary>
        /// window_frame_following : UNBOUNDED  FOLLOWING | decimal  FOLLOWING
        /// </summary>
        public override AstRoot VisitWindow_frame_following(TSqlParser.Window_frame_followingContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstWindowFrameFollowing(context, list);
        }
        
        /// <summary>
        /// create_database_option : FILESTREAM  database_filestream_options | db_chaining_set | trustworthy_set | default_language_set | default_fulltext_language_set | nested_triggers_set | transform_noise_words_set | two_digit_year_cutoff_set
        /// </summary>
        public override AstRoot VisitCreate_database_option(TSqlParser.Create_database_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCreateDatabaseOption(context, list);
        }
        
        /// <summary>
        /// database_filestream_option : non_transacted_access_set | directory_name_set
        /// </summary>
        public override AstRoot VisitDatabase_filestream_option(TSqlParser.Database_filestream_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseFilestreamOption(context, list);
        }
        
        /// <summary>
        /// db_option : db_chaining_set | trustworthy_set | default_language_set | default_fulltext_language_set | nested_triggers_set | transform_noise_words_set | two_digit_year_cutoff_set
        /// </summary>
        public override AstRoot VisitDb_option(TSqlParser.Db_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDbOption(context, list);
        }
        
        /// <summary>
        /// database_file : file_group | file_spec
        /// </summary>
        public override AstRoot VisitDatabase_file(TSqlParser.Database_fileContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseFile(context, list);
        }
        
        /// <summary>
        /// null_or_default : (null_notnull | DEFAULT  constant_expression  (COLLATE  id_)?  (WITH  VALUES)?)
        /// </summary>
        public override AstRoot VisitNull_or_default(TSqlParser.Null_or_defaultContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstNullOrDefault(context, list);
        }
        
        /// <summary>
        /// scalar_function_name : func_proc_name_server_database_schema | scalar_function_name_enum
        /// </summary>
        public override AstRoot VisitScalar_function_name(TSqlParser.Scalar_function_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstScalarFunctionName(context, list);
        }
        
        /// <summary>
        /// contract_name_expression : id_ | expression
        /// </summary>
        public override AstRoot VisitContract_name_expression(TSqlParser.Contract_name_expressionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstContractNameExpression(context, list);
        }
        
        /// <summary>
        /// service_name_expr : id_ | expression
        /// </summary>
        public override AstRoot VisitService_name_expr(TSqlParser.Service_name_exprContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServiceNameExpr(context, list);
        }
        
        /// <summary>
        /// end_conversation : END  CONVERSATION  conversation_handle = local_id  SEMI?  (WITH  (ERROR  EQUAL  faliure_code = string_local_id  DESCRIPTION  EQUAL  failure_text = string_local_id)?  CLEANUP?)?
        /// </summary>
        public override AstRoot VisitEnd_conversation(TSqlParser.End_conversationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEndConversation(context, list);
        }
        
        /// <summary>
        /// get_conversation : GET  CONVERSATION  GROUP  conversation_group = string_local_id  FROM  queue = database_schema_queue_ref
        /// </summary>
        public override AstRoot VisitGet_conversation(TSqlParser.Get_conversationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstGetConversation(context, list);
        }
        
        /// <summary>
        /// send_conversation : SEND  ON  CONVERSATION  conversation_handle = string_local_id  MESSAGE  TYPE  messageTypeName = expression  (LR_BRACKET  messageBodyEexpression = string_local_id  RR_BRACKET)?
        /// </summary>
        public override AstRoot VisitSend_conversation(TSqlParser.Send_conversationContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSendConversation(context, list);
        }
        
        /// <summary>
        /// data_type : scaled = data_type_scaled  LR_BRACKET  MAX  RR_BRACKET | ext_type_id  LR_BRACKET  decimal_scale_prec  RR_BRACKET | ext_type_id  LR_BRACKET  scale = decimal  RR_BRACKET | ext_type_id  IDENTITY  (LR_BRACKET  identity_seed  RR_BRACKET)? | double_prec = DOUBLE  PRECISION? | unscaled_type_id
        /// </summary>
        public override AstRoot VisitData_type(TSqlParser.Data_typeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDataType(context, list);
        }
        
        /// <summary>
        /// default_value : NULL_ | DEFAULT | constant
        /// </summary>
        public override AstRoot VisitDefault_value(TSqlParser.Default_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDefaultValue(context, list);
        }
        
        /// <summary>
        /// constant : stringtext | binary_ | real | sign?  decimal_float | sign?  dollar = DOLLAR  decimal_float | parameter
        /// </summary>
        public override AstRoot VisitConstant(TSqlParser.ConstantContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstConstant(context, list);
        }
        
        /// <summary>
        /// decimal_float : decimal | float
        /// </summary>
        public override AstRoot VisitDecimal_float(TSqlParser.Decimal_floatContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDecimalFloat(context, list);
        }
        
        /// <summary>
        /// string_id2 : stringtext | id_ | local_id
        /// </summary>
        public override AstRoot VisitString_id2(TSqlParser.String_id2Context context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstStringId2(context, list);
        }
        
        /// <summary>
        /// privatekey : FILE  EQUAL  stringtext | by_password_crypt
        /// </summary>
        public override AstRoot VisitPrivatekey(TSqlParser.PrivatekeyContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPrivatekey(context, list);
        }
        
        /// <summary>
        /// all_server_database : ALL  SERVER | DATABASE
        /// </summary>
        public override AstRoot VisitAll_server_database(TSqlParser.All_server_databaseContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAllServerDatabase(context, list);
        }
        
        /// <summary>
        /// encryption_state : ENCRYPTION  EQUAL  (DISABLED | SUPPORTED | REQUIRED)
        /// </summary>
        public override AstRoot VisitEncryption_state(TSqlParser.Encryption_stateContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEncryptionState(context, list);
        }
        
        /// <summary>
        /// parameterization_option : PARAMETERIZATION  (SIMPLE | FORCED)
        /// </summary>
        public override AstRoot VisitParameterization_option(TSqlParser.Parameterization_optionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstParameterizationOption(context, list);
        }
        
        /// <summary>
        /// event_session_predicate_leaf_ope : EQUAL | (LESS  GREATER) | (EXCLAMATION  EQUAL) | GREATER | (GREATER  EQUAL) | LESS | LESS  EQUAL
        /// </summary>
        public override AstRoot VisitEvent_session_predicate_leaf_ope(TSqlParser.Event_session_predicate_leaf_opeContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventSessionPredicateLeafOpe(context, list);
        }
        
        /// <summary>
        /// sequence_cycle : CYCLE | NO  CYCLE
        /// </summary>
        public override AstRoot VisitSequence_cycle(TSqlParser.Sequence_cycleContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSequenceCycle(context, list);
        }
        
        /// <summary>
        /// size_value : decimal  MB | DEFAULT
        /// </summary>
        public override AstRoot VisitSize_value(TSqlParser.Size_valueContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSizeValue(context, list);
        }
        
        /// <summary>
        /// decimal_default : decimal | DEFAULT
        /// </summary>
        public override AstRoot VisitDecimal_default(TSqlParser.Decimal_defaultContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDecimalDefault(context, list);
        }
        
        /// <summary>
        /// on_delete : ON  DELETE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
        /// </summary>
        public override AstRoot VisitOn_delete(TSqlParser.On_deleteContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstOnDelete(context, list);
        }
        
        /// <summary>
        /// on_update : ON  UPDATE  (NO  ACTION | CASCADE | SET  NULL_ | SET  DEFAULT)
        /// </summary>
        public override AstRoot VisitOn_update(TSqlParser.On_updateContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstOnUpdate(context, list);
        }
        
        /// <summary>
        /// updated_asterisk : (INSERTED | DELETED)  DOT  STAR
        /// </summary>
        public override AstRoot VisitUpdated_asterisk(TSqlParser.Updated_asteriskContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstUpdatedAsterisk(context, list);
        }
        
        /// <summary>
        /// null_notnull : NOT?  NULL_
        /// </summary>
        public override AstRoot VisitNull_notnull(TSqlParser.Null_notnullContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstNullNotnull(context, list);
        }
        
        /// <summary>
        /// comparison_operator : EQUAL | GREATER | LESS | LESS  EQUAL | GREATER  EQUAL | LESS  GREATER | EXCLAMATION  EQUAL | EXCLAMATION  GREATER | EXCLAMATION  LESS
        /// </summary>
        public override AstRoot VisitComparison_operator(TSqlParser.Comparison_operatorContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstComparisonOperator(context, list);
        }
        
        /// <summary>
        /// assignment_operator : PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN
        /// </summary>
        public override AstRoot VisitAssignment_operator(TSqlParser.Assignment_operatorContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAssignmentOperator(context, list);
        }
    }
}
