#nullable disable
// Generated by ScriptClassIdentifiers.cs (vendredi 28 avril 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Asts
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    
    
    /// <summary>
    /// pwd
    /// 	 : stringtext
    /// </summary>
    public partial class AstPwd : AstTerminalIdentifier
    {
        
        private AstStringtext _value;
        
        private static string _ruleValue = "stringtext\r\n";
        
        private static string _ruleName = "pwd";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPwd(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPwd(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPwd(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstStringtext Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPwd(this);
        }
        
        public static AstPwd? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// host
    /// 	 : HOST
    /// </summary>
    public partial class AstHost : AstTerminalIdentifier
    {
        
        private AstTerminalString _value;
        
        private static string _ruleValue = "HOST\r\n";
        
        private static string _ruleName = "host";
        
        private static bool _isTerminal = true;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstHost(ITerminalNode t, String value) : 
                base(t)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public AstHost(ParserRuleContext ctx, String value) : 
                base(ctx)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public AstHost(Position position, String value) : 
                base(position)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public virtual AstTerminalString Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitHost(this);
        }
        
        public static AstHost? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// id_or_string
    /// 	 : id_
    /// 	 | stringtext
    /// </summary>
    public partial class AstIdOrString : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "id_\r\n | stringtext\r\n";
        
        private static string _ruleName = "id_or_string";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstIdOrString(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstIdOrString(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstIdOrString(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstIdOrString(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstIdOrString(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstIdOrString(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIdOrString(this);
        }
        
        public static AstIdOrString New(Position position, string id)
        {
            return new AstIdOrString(position, new AstId(position, id));
        }
        
        public static AstIdOrString New(string id)
        {
            return AstIdOrString.New(Position.Default, id);
        }
        
        public static implicit operator AstIdOrString(string id)
        {
            return AstIdOrString.New(Position.Default, id);
        }
        
        public static AstIdOrString? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// principal_id
    /// 	 : id_
    /// 	 | PUBLIC
    /// </summary>
    public partial class AstPrincipalId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "id_\r\n | PUBLIC\r\n";
        
        private static string _ruleName = "principal_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPrincipalId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPrincipalId(ITerminalNode t, AstPublic value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPrincipalId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPrincipalId(ParserRuleContext ctx, AstPublic value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPrincipalId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstPrincipalId(Position position, AstPublic value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrincipalId(this);
        }
        
        public static AstPrincipalId New(Position position, string id)
        {
            return new AstPrincipalId(position, new AstId(position, id));
        }
        
        public static AstPrincipalId New(string id)
        {
            return AstPrincipalId.New(Position.Default, id);
        }
        
        public static implicit operator AstPrincipalId(string id)
        {
            return AstPrincipalId.New(Position.Default, id);
        }
        
        public static AstPrincipalId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// transaction_ref
    /// 	 : id_
    /// 	 | local_id
    /// </summary>
    public partial class AstTransactionRef : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "id_\r\n | local_id\r\n";
        
        private static string _ruleName = "transaction_ref";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTransactionRef(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTransactionRef(ITerminalNode t, AstLocalId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTransactionRef(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTransactionRef(ParserRuleContext ctx, AstLocalId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTransactionRef(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstTransactionRef(Position position, AstLocalId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransactionRef(this);
        }
        
        public static AstTransactionRef New(Position position, string id)
        {
            return new AstTransactionRef(position, new AstId(position, id));
        }
        
        public static AstTransactionRef New(string id)
        {
            return AstTransactionRef.New(Position.Default, id);
        }
        
        public static implicit operator AstTransactionRef(string id)
        {
            return AstTransactionRef.New(Position.Default, id);
        }
        
        public static AstTransactionRef? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// table_alias
    /// 	 : id_
    /// </summary>
    public partial class AstTableAlias : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "table_alias";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTableAlias(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTableAlias(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTableAlias(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAlias(this);
        }
        
        public static AstTableAlias New(Position position, string id)
        {
            return new AstTableAlias(position, new AstId(position, id));
        }
        
        public static AstTableAlias New(string id)
        {
            return AstTableAlias.New(Position.Default, id);
        }
        
        public static implicit operator AstTableAlias(string id)
        {
            return AstTableAlias.New(Position.Default, id);
        }
        
        public static AstTableAlias? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// column_alias
    /// 	 : id_
    /// 	 | stringtext
    /// </summary>
    public partial class AstColumnAlias : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "id_\r\n | stringtext\r\n";
        
        private static string _ruleName = "column_alias";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstColumnAlias(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstColumnAlias(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstColumnAlias(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstColumnAlias(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstColumnAlias(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstColumnAlias(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAlias(this);
        }
        
        public static AstColumnAlias New(Position position, string id)
        {
            return new AstColumnAlias(position, new AstId(position, id));
        }
        
        public static AstColumnAlias New(string id)
        {
            return AstColumnAlias.New(Position.Default, id);
        }
        
        public static implicit operator AstColumnAlias(string id)
        {
            return AstColumnAlias.New(Position.Default, id);
        }
        
        public static AstColumnAlias? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// cursor_name
    /// 	 : id_
    /// 	 | local_id
    /// </summary>
    public partial class AstCursorName : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "id_\r\n | local_id\r\n";
        
        private static string _ruleName = "cursor_name";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCursorName(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCursorName(ITerminalNode t, AstLocalId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCursorName(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCursorName(ParserRuleContext ctx, AstLocalId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCursorName(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstCursorName(Position position, AstLocalId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCursorName(this);
        }
        
        public static AstCursorName New(Position position, string id)
        {
            return new AstCursorName(position, new AstId(position, id));
        }
        
        public static AstCursorName New(string id)
        {
            return AstCursorName.New(Position.Default, id);
        }
        
        public static implicit operator AstCursorName(string id)
        {
            return AstCursorName.New(Position.Default, id);
        }
        
        public static AstCursorName? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// id_
    /// 	 : ID
    /// 	 | empty_value
    /// 	 | DOUBLE_QUOTE_BLANK
    /// 	 | SQUARE_BRACKET_ID
    /// 	 | keyword
    /// </summary>
    public partial class AstId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "ID\r\n | empty_value\r\n | DOUBLE_QUOTE_BLANK\r\n | SQUARE_BRACKET_ID\r\n | keyword\r\n";
        
        private static string _ruleName = "id_";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstId(ITerminalNode t, String value) : 
                base(t)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public AstId(ITerminalNode t, AstEmptyValue value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstId(ITerminalNode t, AstKeyword value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstId(ParserRuleContext ctx, String value) : 
                base(ctx)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public AstId(ParserRuleContext ctx, AstEmptyValue value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstId(ParserRuleContext ctx, AstKeyword value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstId(Position position, String value) : 
                base(position)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public AstId(Position position, AstEmptyValue value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstId(Position position, AstKeyword value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitId(this);
        }
        
        public static AstId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// simple_id
    /// 	 : ID
    /// </summary>
    public partial class AstSimpleId : AstTerminalIdentifier
    {
        
        private AstTerminalString _value;
        
        private static string _ruleValue = "ID\r\n";
        
        private static string _ruleName = "simple_id";
        
        private static bool _isTerminal = true;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSimpleId(ITerminalNode t, String value) : 
                base(t)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public AstSimpleId(ParserRuleContext ctx, String value) : 
                base(ctx)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public AstSimpleId(Position position, String value) : 
                base(position)
        {
            _value = ((AstTerminalString)(value));
        }
        
        public virtual AstTerminalString Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSimpleId(this);
        }
        
        public static AstSimpleId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// filestream_filegroup_or_partition_schema_id
    /// 	 : id_
    /// </summary>
    public partial class AstFilestreamFilegroupOrPartitionSchemaId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "filestream_filegroup_or_partition_schema_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFilestreamFilegroupOrPartitionSchemaId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstFilestreamFilegroupOrPartitionSchemaId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstFilestreamFilegroupOrPartitionSchemaId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilestreamFilegroupOrPartitionSchemaId(this);
        }
        
        public static AstFilestreamFilegroupOrPartitionSchemaId New(Position position, string id)
        {
            return new AstFilestreamFilegroupOrPartitionSchemaId(position, new AstId(position, id));
        }
        
        public static AstFilestreamFilegroupOrPartitionSchemaId New(string id)
        {
            return AstFilestreamFilegroupOrPartitionSchemaId.New(Position.Default, id);
        }
        
        public static implicit operator AstFilestreamFilegroupOrPartitionSchemaId(string id)
        {
            return AstFilestreamFilegroupOrPartitionSchemaId.New(Position.Default, id);
        }
        
        public static AstFilestreamFilegroupOrPartitionSchemaId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// action_id
    /// 	 : id_
    /// </summary>
    public partial class AstActionId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "action_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstActionId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstActionId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstActionId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitActionId(this);
        }
        
        public static AstActionId New(Position position, string id)
        {
            return new AstActionId(position, new AstId(position, id));
        }
        
        public static AstActionId New(string id)
        {
            return AstActionId.New(Position.Default, id);
        }
        
        public static implicit operator AstActionId(string id)
        {
            return AstActionId.New(Position.Default, id);
        }
        
        public static AstActionId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// aggregate_id
    /// 	 : id_
    /// </summary>
    public partial class AstAggregateId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "aggregate_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstAggregateId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstAggregateId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstAggregateId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAggregateId(this);
        }
        
        public static AstAggregateId New(Position position, string id)
        {
            return new AstAggregateId(position, new AstId(position, id));
        }
        
        public static AstAggregateId New(string id)
        {
            return AstAggregateId.New(Position.Default, id);
        }
        
        public static implicit operator AstAggregateId(string id)
        {
            return AstAggregateId.New(Position.Default, id);
        }
        
        public static AstAggregateId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// schema_identifier
    /// 	 : id_
    /// </summary>
    public partial class AstSchemaIdentifier : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "schema_identifier";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaIdentifier(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSchemaIdentifier(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSchemaIdentifier(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaIdentifier(this);
        }
        
        public static AstSchemaIdentifier New(Position position, string id)
        {
            return new AstSchemaIdentifier(position, new AstId(position, id));
        }
        
        public static AstSchemaIdentifier New(string id)
        {
            return AstSchemaIdentifier.New(Position.Default, id);
        }
        
        public static implicit operator AstSchemaIdentifier(string id)
        {
            return AstSchemaIdentifier.New(Position.Default, id);
        }
        
        public static AstSchemaIdentifier? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// assembly_id
    /// 	 : id_
    /// </summary>
    public partial class AstAssemblyId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "assembly_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstAssemblyId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstAssemblyId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstAssemblyId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyId(this);
        }
        
        public static AstAssemblyId New(Position position, string id)
        {
            return new AstAssemblyId(position, new AstId(position, id));
        }
        
        public static AstAssemblyId New(string id)
        {
            return AstAssemblyId.New(Position.Default, id);
        }
        
        public static implicit operator AstAssemblyId(string id)
        {
            return AstAssemblyId.New(Position.Default, id);
        }
        
        public static AstAssemblyId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// asym_key_id
    /// 	 : id_
    /// </summary>
    public partial class AstAsymKeyId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "asym_key_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstAsymKeyId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstAsymKeyId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstAsymKeyId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymKeyId(this);
        }
        
        public static AstAsymKeyId New(Position position, string id)
        {
            return new AstAsymKeyId(position, new AstId(position, id));
        }
        
        public static AstAsymKeyId New(string id)
        {
            return AstAsymKeyId.New(Position.Default, id);
        }
        
        public static implicit operator AstAsymKeyId(string id)
        {
            return AstAsymKeyId.New(Position.Default, id);
        }
        
        public static AstAsymKeyId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// audit_action_group_id
    /// 	 : id_
    /// </summary>
    public partial class AstAuditActionGroupId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "audit_action_group_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstAuditActionGroupId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstAuditActionGroupId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstAuditActionGroupId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditActionGroupId(this);
        }
        
        public static AstAuditActionGroupId New(Position position, string id)
        {
            return new AstAuditActionGroupId(position, new AstId(position, id));
        }
        
        public static AstAuditActionGroupId New(string id)
        {
            return AstAuditActionGroupId.New(Position.Default, id);
        }
        
        public static implicit operator AstAuditActionGroupId(string id)
        {
            return AstAuditActionGroupId.New(Position.Default, id);
        }
        
        public static AstAuditActionGroupId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// audit_guid_id
    /// 	 : id_
    /// </summary>
    public partial class AstAuditGuidId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "audit_guid_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstAuditGuidId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstAuditGuidId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstAuditGuidId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditGuidId(this);
        }
        
        public static AstAuditGuidId New(Position position, string id)
        {
            return new AstAuditGuidId(position, new AstId(position, id));
        }
        
        public static AstAuditGuidId New(string id)
        {
            return AstAuditGuidId.New(Position.Default, id);
        }
        
        public static implicit operator AstAuditGuidId(string id)
        {
            return AstAuditGuidId.New(Position.Default, id);
        }
        
        public static AstAuditGuidId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// audit_id
    /// 	 : id_
    /// </summary>
    public partial class AstAuditId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "audit_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstAuditId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstAuditId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstAuditId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditId(this);
        }
        
        public static AstAuditId New(Position position, string id)
        {
            return new AstAuditId(position, new AstId(position, id));
        }
        
        public static AstAuditId New(string id)
        {
            return AstAuditId.New(Position.Default, id);
        }
        
        public static implicit operator AstAuditId(string id)
        {
            return AstAuditId.New(Position.Default, id);
        }
        
        public static AstAuditId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// user_id
    /// 	 : id_
    /// </summary>
    public partial class AstUserId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "user_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstUserId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstUserId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstUserId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserId(this);
        }
        
        public static AstUserId New(Position position, string id)
        {
            return new AstUserId(position, new AstId(position, id));
        }
        
        public static AstUserId New(string id)
        {
            return AstUserId.New(Position.Default, id);
        }
        
        public static implicit operator AstUserId(string id)
        {
            return AstUserId.New(Position.Default, id);
        }
        
        public static AstUserId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// backup_id
    /// 	 : id_
    /// </summary>
    public partial class AstBackupId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "backup_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstBackupId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstBackupId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstBackupId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupId(this);
        }
        
        public static AstBackupId New(Position position, string id)
        {
            return new AstBackupId(position, new AstId(position, id));
        }
        
        public static AstBackupId New(string id)
        {
            return AstBackupId.New(Position.Default, id);
        }
        
        public static implicit operator AstBackupId(string id)
        {
            return AstBackupId.New(Position.Default, id);
        }
        
        public static AstBackupId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// binding_id
    /// 	 : id_
    /// </summary>
    public partial class AstBindingId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "binding_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstBindingId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstBindingId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstBindingId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBindingId(this);
        }
        
        public static AstBindingId New(Position position, string id)
        {
            return new AstBindingId(position, new AstId(position, id));
        }
        
        public static AstBindingId New(string id)
        {
            return AstBindingId.New(Position.Default, id);
        }
        
        public static implicit operator AstBindingId(string id)
        {
            return AstBindingId.New(Position.Default, id);
        }
        
        public static AstBindingId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// catalog_id
    /// 	 : id_
    /// </summary>
    public partial class AstCatalogId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "catalog_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCatalogId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCatalogId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCatalogId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCatalogId(this);
        }
        
        public static AstCatalogId New(Position position, string id)
        {
            return new AstCatalogId(position, new AstId(position, id));
        }
        
        public static AstCatalogId New(string id)
        {
            return AstCatalogId.New(Position.Default, id);
        }
        
        public static implicit operator AstCatalogId(string id)
        {
            return AstCatalogId.New(Position.Default, id);
        }
        
        public static AstCatalogId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// certificate_id
    /// 	 : id_
    /// </summary>
    public partial class AstCertificateId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "certificate_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCertificateId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCertificateId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCertificateId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCertificateId(this);
        }
        
        public static AstCertificateId New(Position position, string id)
        {
            return new AstCertificateId(position, new AstId(position, id));
        }
        
        public static AstCertificateId New(string id)
        {
            return AstCertificateId.New(Position.Default, id);
        }
        
        public static implicit operator AstCertificateId(string id)
        {
            return AstCertificateId.New(Position.Default, id);
        }
        
        public static AstCertificateId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// class_id
    /// 	 : id_
    /// </summary>
    public partial class AstClassId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "class_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstClassId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstClassId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstClassId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClassId(this);
        }
        
        public static AstClassId New(Position position, string id)
        {
            return new AstClassId(position, new AstId(position, id));
        }
        
        public static AstClassId New(string id)
        {
            return AstClassId.New(Position.Default, id);
        }
        
        public static implicit operator AstClassId(string id)
        {
            return AstClassId.New(Position.Default, id);
        }
        
        public static AstClassId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// collation_id
    /// 	 : id_
    /// </summary>
    public partial class AstCollationId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "collation_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCollationId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCollationId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCollationId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCollationId(this);
        }
        
        public static AstCollationId New(Position position, string id)
        {
            return new AstCollationId(position, new AstId(position, id));
        }
        
        public static AstCollationId New(string id)
        {
            return AstCollationId.New(Position.Default, id);
        }
        
        public static implicit operator AstCollationId(string id)
        {
            return AstCollationId.New(Position.Default, id);
        }
        
        public static AstCollationId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// column_encryption_key_id
    /// 	 : id_
    /// </summary>
    public partial class AstColumnEncryptionKeyId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "column_encryption_key_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstColumnEncryptionKeyId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstColumnEncryptionKeyId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstColumnEncryptionKeyId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnEncryptionKeyId(this);
        }
        
        public static AstColumnEncryptionKeyId New(Position position, string id)
        {
            return new AstColumnEncryptionKeyId(position, new AstId(position, id));
        }
        
        public static AstColumnEncryptionKeyId New(string id)
        {
            return AstColumnEncryptionKeyId.New(Position.Default, id);
        }
        
        public static implicit operator AstColumnEncryptionKeyId(string id)
        {
            return AstColumnEncryptionKeyId.New(Position.Default, id);
        }
        
        public static AstColumnEncryptionKeyId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// column_or_argument_id
    /// 	 : id_
    /// </summary>
    public partial class AstColumnOrArgumentId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "column_or_argument_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstColumnOrArgumentId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstColumnOrArgumentId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstColumnOrArgumentId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnOrArgumentId(this);
        }
        
        public static AstColumnOrArgumentId New(Position position, string id)
        {
            return new AstColumnOrArgumentId(position, new AstId(position, id));
        }
        
        public static AstColumnOrArgumentId New(string id)
        {
            return AstColumnOrArgumentId.New(Position.Default, id);
        }
        
        public static implicit operator AstColumnOrArgumentId(string id)
        {
            return AstColumnOrArgumentId.New(Position.Default, id);
        }
        
        public static AstColumnOrArgumentId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// constraint_id
    /// 	 : id_
    /// </summary>
    public partial class AstConstraintId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "constraint_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstConstraintId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstConstraintId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstConstraintId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstraintId(this);
        }
        
        public static AstConstraintId New(Position position, string id)
        {
            return new AstConstraintId(position, new AstId(position, id));
        }
        
        public static AstConstraintId New(string id)
        {
            return AstConstraintId.New(Position.Default, id);
        }
        
        public static implicit operator AstConstraintId(string id)
        {
            return AstConstraintId.New(Position.Default, id);
        }
        
        public static AstConstraintId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// credential_id
    /// 	 : id_
    /// </summary>
    public partial class AstCredentialId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "credential_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCredentialId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCredentialId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCredentialId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCredentialId(this);
        }
        
        public static AstCredentialId New(Position position, string id)
        {
            return new AstCredentialId(position, new AstId(position, id));
        }
        
        public static AstCredentialId New(string id)
        {
            return AstCredentialId.New(Position.Default, id);
        }
        
        public static implicit operator AstCredentialId(string id)
        {
            return AstCredentialId.New(Position.Default, id);
        }
        
        public static AstCredentialId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// cryptographic_provider_id
    /// 	 : id_
    /// </summary>
    public partial class AstCryptographicProviderId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "cryptographic_provider_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCryptographicProviderId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCryptographicProviderId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCryptographicProviderId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCryptographicProviderId(this);
        }
        
        public static AstCryptographicProviderId New(Position position, string id)
        {
            return new AstCryptographicProviderId(position, new AstId(position, id));
        }
        
        public static AstCryptographicProviderId New(string id)
        {
            return AstCryptographicProviderId.New(Position.Default, id);
        }
        
        public static implicit operator AstCryptographicProviderId(string id)
        {
            return AstCryptographicProviderId.New(Position.Default, id);
        }
        
        public static AstCryptographicProviderId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// data_source_id
    /// 	 : id_
    /// </summary>
    public partial class AstDataSourceId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "data_source_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDataSourceId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDataSourceId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDataSourceId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDataSourceId(this);
        }
        
        public static AstDataSourceId New(Position position, string id)
        {
            return new AstDataSourceId(position, new AstId(position, id));
        }
        
        public static AstDataSourceId New(string id)
        {
            return AstDataSourceId.New(Position.Default, id);
        }
        
        public static implicit operator AstDataSourceId(string id)
        {
            return AstDataSourceId.New(Position.Default, id);
        }
        
        public static AstDataSourceId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// service_id
    /// 	 : id_
    /// </summary>
    public partial class AstServiceId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "service_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstServiceId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstServiceId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstServiceId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServiceId(this);
        }
        
        public static AstServiceId New(Position position, string id)
        {
            return new AstServiceId(position, new AstId(position, id));
        }
        
        public static AstServiceId New(string id)
        {
            return AstServiceId.New(Position.Default, id);
        }
        
        public static implicit operator AstServiceId(string id)
        {
            return AstServiceId.New(Position.Default, id);
        }
        
        public static AstServiceId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// encryptor_id
    /// 	 : id_
    /// </summary>
    public partial class AstEncryptorId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "encryptor_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEncryptorId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEncryptorId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEncryptorId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptorId(this);
        }
        
        public static AstEncryptorId New(Position position, string id)
        {
            return new AstEncryptorId(position, new AstId(position, id));
        }
        
        public static AstEncryptorId New(string id)
        {
            return AstEncryptorId.New(Position.Default, id);
        }
        
        public static implicit operator AstEncryptorId(string id)
        {
            return AstEncryptorId.New(Position.Default, id);
        }
        
        public static AstEncryptorId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// endpoint_id
    /// 	 : id_
    /// </summary>
    public partial class AstEndpointId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "endpoint_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEndpointId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEndpointId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEndpointId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEndpointId(this);
        }
        
        public static AstEndpointId New(Position position, string id)
        {
            return new AstEndpointId(position, new AstId(position, id));
        }
        
        public static AstEndpointId New(string id)
        {
            return AstEndpointId.New(Position.Default, id);
        }
        
        public static implicit operator AstEndpointId(string id)
        {
            return AstEndpointId.New(Position.Default, id);
        }
        
        public static AstEndpointId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// event_customizable_attribute_id
    /// 	 : id_
    /// </summary>
    public partial class AstEventCustomizableAttributeId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "event_customizable_attribute_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventCustomizableAttributeId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEventCustomizableAttributeId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEventCustomizableAttributeId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventCustomizableAttributeId(this);
        }
        
        public static AstEventCustomizableAttributeId New(Position position, string id)
        {
            return new AstEventCustomizableAttributeId(position, new AstId(position, id));
        }
        
        public static AstEventCustomizableAttributeId New(string id)
        {
            return AstEventCustomizableAttributeId.New(Position.Default, id);
        }
        
        public static implicit operator AstEventCustomizableAttributeId(string id)
        {
            return AstEventCustomizableAttributeId.New(Position.Default, id);
        }
        
        public static AstEventCustomizableAttributeId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// event_field_id
    /// 	 : id_
    /// </summary>
    public partial class AstEventFieldId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "event_field_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventFieldId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEventFieldId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEventFieldId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventFieldId(this);
        }
        
        public static AstEventFieldId New(Position position, string id)
        {
            return new AstEventFieldId(position, new AstId(position, id));
        }
        
        public static AstEventFieldId New(string id)
        {
            return AstEventFieldId.New(Position.Default, id);
        }
        
        public static implicit operator AstEventFieldId(string id)
        {
            return AstEventFieldId.New(Position.Default, id);
        }
        
        public static AstEventFieldId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// event_module_guid_id
    /// 	 : id_
    /// </summary>
    public partial class AstEventModuleGuidId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "event_module_guid_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventModuleGuidId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEventModuleGuidId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEventModuleGuidId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModuleGuidId(this);
        }
        
        public static AstEventModuleGuidId New(Position position, string id)
        {
            return new AstEventModuleGuidId(position, new AstId(position, id));
        }
        
        public static AstEventModuleGuidId New(string id)
        {
            return AstEventModuleGuidId.New(Position.Default, id);
        }
        
        public static implicit operator AstEventModuleGuidId(string id)
        {
            return AstEventModuleGuidId.New(Position.Default, id);
        }
        
        public static AstEventModuleGuidId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// event_notification_id
    /// 	 : id_
    /// </summary>
    public partial class AstEventNotificationId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "event_notification_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventNotificationId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEventNotificationId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEventNotificationId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventNotificationId(this);
        }
        
        public static AstEventNotificationId New(Position position, string id)
        {
            return new AstEventNotificationId(position, new AstId(position, id));
        }
        
        public static AstEventNotificationId New(string id)
        {
            return AstEventNotificationId.New(Position.Default, id);
        }
        
        public static implicit operator AstEventNotificationId(string id)
        {
            return AstEventNotificationId.New(Position.Default, id);
        }
        
        public static AstEventNotificationId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// event_package_id
    /// 	 : id_
    /// </summary>
    public partial class AstEventPackageId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "event_package_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventPackageId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEventPackageId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEventPackageId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventPackageId(this);
        }
        
        public static AstEventPackageId New(Position position, string id)
        {
            return new AstEventPackageId(position, new AstId(position, id));
        }
        
        public static AstEventPackageId New(string id)
        {
            return AstEventPackageId.New(Position.Default, id);
        }
        
        public static implicit operator AstEventPackageId(string id)
        {
            return AstEventPackageId.New(Position.Default, id);
        }
        
        public static AstEventPackageId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// event_session_id
    /// 	 : id_
    /// </summary>
    public partial class AstEventSessionId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "event_session_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventSessionId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEventSessionId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEventSessionId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionId(this);
        }
        
        public static AstEventSessionId New(Position position, string id)
        {
            return new AstEventSessionId(position, new AstId(position, id));
        }
        
        public static AstEventSessionId New(string id)
        {
            return AstEventSessionId.New(Position.Default, id);
        }
        
        public static implicit operator AstEventSessionId(string id)
        {
            return AstEventSessionId.New(Position.Default, id);
        }
        
        public static AstEventSessionId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// event_type_or_group_id
    /// 	 : id_
    /// </summary>
    public partial class AstEventTypeOrGroupId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "event_type_or_group_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstEventTypeOrGroupId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstEventTypeOrGroupId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstEventTypeOrGroupId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventTypeOrGroupId(this);
        }
        
        public static AstEventTypeOrGroupId New(Position position, string id)
        {
            return new AstEventTypeOrGroupId(position, new AstId(position, id));
        }
        
        public static AstEventTypeOrGroupId New(string id)
        {
            return AstEventTypeOrGroupId.New(Position.Default, id);
        }
        
        public static implicit operator AstEventTypeOrGroupId(string id)
        {
            return AstEventTypeOrGroupId.New(Position.Default, id);
        }
        
        public static AstEventTypeOrGroupId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// ext_type_id
    /// 	 : id_
    /// </summary>
    public partial class AstExtTypeId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "ext_type_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstExtTypeId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstExtTypeId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstExtTypeId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExtTypeId(this);
        }
        
        public static AstExtTypeId New(Position position, string id)
        {
            return new AstExtTypeId(position, new AstId(position, id));
        }
        
        public static AstExtTypeId New(string id)
        {
            return AstExtTypeId.New(Position.Default, id);
        }
        
        public static implicit operator AstExtTypeId(string id)
        {
            return AstExtTypeId.New(Position.Default, id);
        }
        
        public static AstExtTypeId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// external_data_source_id
    /// 	 : id_
    /// </summary>
    public partial class AstExternalDataSourceId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "external_data_source_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstExternalDataSourceId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstExternalDataSourceId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstExternalDataSourceId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalDataSourceId(this);
        }
        
        public static AstExternalDataSourceId New(Position position, string id)
        {
            return new AstExternalDataSourceId(position, new AstId(position, id));
        }
        
        public static AstExternalDataSourceId New(string id)
        {
            return AstExternalDataSourceId.New(Position.Default, id);
        }
        
        public static implicit operator AstExternalDataSourceId(string id)
        {
            return AstExternalDataSourceId.New(Position.Default, id);
        }
        
        public static AstExternalDataSourceId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// external_file_format_id
    /// 	 : id_
    /// </summary>
    public partial class AstExternalFileFormatId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "external_file_format_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstExternalFileFormatId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstExternalFileFormatId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstExternalFileFormatId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalFileFormatId(this);
        }
        
        public static AstExternalFileFormatId New(Position position, string id)
        {
            return new AstExternalFileFormatId(position, new AstId(position, id));
        }
        
        public static AstExternalFileFormatId New(string id)
        {
            return AstExternalFileFormatId.New(Position.Default, id);
        }
        
        public static implicit operator AstExternalFileFormatId(string id)
        {
            return AstExternalFileFormatId.New(Position.Default, id);
        }
        
        public static AstExternalFileFormatId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// external_pool_id
    /// 	 : id_
    /// </summary>
    public partial class AstExternalPoolId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "external_pool_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstExternalPoolId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstExternalPoolId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstExternalPoolId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalPoolId(this);
        }
        
        public static AstExternalPoolId New(Position position, string id)
        {
            return new AstExternalPoolId(position, new AstId(position, id));
        }
        
        public static AstExternalPoolId New(string id)
        {
            return AstExternalPoolId.New(Position.Default, id);
        }
        
        public static implicit operator AstExternalPoolId(string id)
        {
            return AstExternalPoolId.New(Position.Default, id);
        }
        
        public static AstExternalPoolId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// function_id
    /// 	 : id_
    /// </summary>
    public partial class AstFunctionId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "function_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFunctionId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstFunctionId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstFunctionId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionId(this);
        }
        
        public static AstFunctionId New(Position position, string id)
        {
            return new AstFunctionId(position, new AstId(position, id));
        }
        
        public static AstFunctionId New(string id)
        {
            return AstFunctionId.New(Position.Default, id);
        }
        
        public static implicit operator AstFunctionId(string id)
        {
            return AstFunctionId.New(Position.Default, id);
        }
        
        public static AstFunctionId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// group_id
    /// 	 : id_
    /// </summary>
    public partial class AstGroupId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "group_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstGroupId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstGroupId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstGroupId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupId(this);
        }
        
        public static AstGroupId New(Position position, string id)
        {
            return new AstGroupId(position, new AstId(position, id));
        }
        
        public static AstGroupId New(string id)
        {
            return AstGroupId.New(Position.Default, id);
        }
        
        public static implicit operator AstGroupId(string id)
        {
            return AstGroupId.New(Position.Default, id);
        }
        
        public static AstGroupId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// index_id
    /// 	 : id_
    /// </summary>
    public partial class AstIndexId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "index_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstIndexId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstIndexId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstIndexId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexId(this);
        }
        
        public static AstIndexId New(Position position, string id)
        {
            return new AstIndexId(position, new AstId(position, id));
        }
        
        public static AstIndexId New(string id)
        {
            return AstIndexId.New(Position.Default, id);
        }
        
        public static implicit operator AstIndexId(string id)
        {
            return AstIndexId.New(Position.Default, id);
        }
        
        public static AstIndexId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// language_id
    /// 	 : id_
    /// </summary>
    public partial class AstLanguageId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "language_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstLanguageId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstLanguageId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstLanguageId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLanguageId(this);
        }
        
        public static AstLanguageId New(Position position, string id)
        {
            return new AstLanguageId(position, new AstId(position, id));
        }
        
        public static AstLanguageId New(string id)
        {
            return AstLanguageId.New(Position.Default, id);
        }
        
        public static implicit operator AstLanguageId(string id)
        {
            return AstLanguageId.New(Position.Default, id);
        }
        
        public static AstLanguageId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// library_id
    /// 	 : id_
    /// </summary>
    public partial class AstLibraryId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "library_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstLibraryId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstLibraryId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstLibraryId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLibraryId(this);
        }
        
        public static AstLibraryId New(Position position, string id)
        {
            return new AstLibraryId(position, new AstId(position, id));
        }
        
        public static AstLibraryId New(string id)
        {
            return AstLibraryId.New(Position.Default, id);
        }
        
        public static implicit operator AstLibraryId(string id)
        {
            return AstLibraryId.New(Position.Default, id);
        }
        
        public static AstLibraryId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// server_id
    /// 	 : id_
    /// </summary>
    public partial class AstServerId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "server_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstServerId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstServerId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstServerId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerId(this);
        }
        
        public static AstServerId New(Position position, string id)
        {
            return new AstServerId(position, new AstId(position, id));
        }
        
        public static AstServerId New(string id)
        {
            return AstServerId.New(Position.Default, id);
        }
        
        public static implicit operator AstServerId(string id)
        {
            return AstServerId.New(Position.Default, id);
        }
        
        public static AstServerId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// logical_device_id
    /// 	 : id_
    /// </summary>
    public partial class AstLogicalDeviceId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "logical_device_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstLogicalDeviceId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstLogicalDeviceId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstLogicalDeviceId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLogicalDeviceId(this);
        }
        
        public static AstLogicalDeviceId New(Position position, string id)
        {
            return new AstLogicalDeviceId(position, new AstId(position, id));
        }
        
        public static AstLogicalDeviceId New(string id)
        {
            return AstLogicalDeviceId.New(Position.Default, id);
        }
        
        public static implicit operator AstLogicalDeviceId(string id)
        {
            return AstLogicalDeviceId.New(Position.Default, id);
        }
        
        public static AstLogicalDeviceId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// login_id
    /// 	 : id_
    /// </summary>
    public partial class AstLoginId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "login_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstLoginId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstLoginId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstLoginId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLoginId(this);
        }
        
        public static AstLoginId New(Position position, string id)
        {
            return new AstLoginId(position, new AstId(position, id));
        }
        
        public static AstLoginId New(string id)
        {
            return AstLoginId.New(Position.Default, id);
        }
        
        public static implicit operator AstLoginId(string id)
        {
            return AstLoginId.New(Position.Default, id);
        }
        
        public static AstLoginId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// master_key
    /// 	 : id_
    /// </summary>
    public partial class AstMasterKey : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "master_key";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstMasterKey(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstMasterKey(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstMasterKey(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMasterKey(this);
        }
        
        public static AstMasterKey New(Position position, string id)
        {
            return new AstMasterKey(position, new AstId(position, id));
        }
        
        public static AstMasterKey New(string id)
        {
            return AstMasterKey.New(Position.Default, id);
        }
        
        public static implicit operator AstMasterKey(string id)
        {
            return AstMasterKey.New(Position.Default, id);
        }
        
        public static AstMasterKey? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// method_id
    /// 	 : id_
    /// </summary>
    public partial class AstMethodId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "method_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstMethodId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstMethodId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstMethodId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMethodId(this);
        }
        
        public static AstMethodId New(Position position, string id)
        {
            return new AstMethodId(position, new AstId(position, id));
        }
        
        public static AstMethodId New(string id)
        {
            return AstMethodId.New(Position.Default, id);
        }
        
        public static implicit operator AstMethodId(string id)
        {
            return AstMethodId.New(Position.Default, id);
        }
        
        public static AstMethodId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// contract_id
    /// 	 : id_
    /// </summary>
    public partial class AstContractId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "contract_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstContractId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstContractId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstContractId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractId(this);
        }
        
        public static AstContractId New(Position position, string id)
        {
            return new AstContractId(position, new AstId(position, id));
        }
        
        public static AstContractId New(string id)
        {
            return AstContractId.New(Position.Default, id);
        }
        
        public static implicit operator AstContractId(string id)
        {
            return AstContractId.New(Position.Default, id);
        }
        
        public static AstContractId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// module_id
    /// 	 : id_
    /// </summary>
    public partial class AstModuleId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "module_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstModuleId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstModuleId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstModuleId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitModuleId(this);
        }
        
        public static AstModuleId New(Position position, string id)
        {
            return new AstModuleId(position, new AstId(position, id));
        }
        
        public static AstModuleId New(string id)
        {
            return AstModuleId.New(Position.Default, id);
        }
        
        public static implicit operator AstModuleId(string id)
        {
            return AstModuleId.New(Position.Default, id);
        }
        
        public static AstModuleId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// network_computer
    /// 	 : id_
    /// </summary>
    public partial class AstNetworkComputer : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "network_computer";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstNetworkComputer(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstNetworkComputer(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstNetworkComputer(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkComputer(this);
        }
        
        public static AstNetworkComputer New(Position position, string id)
        {
            return new AstNetworkComputer(position, new AstId(position, id));
        }
        
        public static AstNetworkComputer New(string id)
        {
            return AstNetworkComputer.New(Position.Default, id);
        }
        
        public static implicit operator AstNetworkComputer(string id)
        {
            return AstNetworkComputer.New(Position.Default, id);
        }
        
        public static AstNetworkComputer? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// role_id
    /// 	 : id_
    /// </summary>
    public partial class AstRoleId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "role_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstRoleId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstRoleId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstRoleId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRoleId(this);
        }
        
        public static AstRoleId New(Position position, string id)
        {
            return new AstRoleId(position, new AstId(position, id));
        }
        
        public static AstRoleId New(string id)
        {
            return AstRoleId.New(Position.Default, id);
        }
        
        public static implicit operator AstRoleId(string id)
        {
            return AstRoleId.New(Position.Default, id);
        }
        
        public static AstRoleId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// file_group_id
    /// 	 : id_
    /// </summary>
    public partial class AstFileGroupId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "file_group_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFileGroupId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstFileGroupId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstFileGroupId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupId(this);
        }
        
        public static AstFileGroupId New(Position position, string id)
        {
            return new AstFileGroupId(position, new AstId(position, id));
        }
        
        public static AstFileGroupId New(string id)
        {
            return AstFileGroupId.New(Position.Default, id);
        }
        
        public static implicit operator AstFileGroupId(string id)
        {
            return AstFileGroupId.New(Position.Default, id);
        }
        
        public static AstFileGroupId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// non_static_attr_id
    /// 	 : id_
    /// </summary>
    public partial class AstNonStaticAttrId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "non_static_attr_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstNonStaticAttrId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstNonStaticAttrId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstNonStaticAttrId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNonStaticAttrId(this);
        }
        
        public static AstNonStaticAttrId New(Position position, string id)
        {
            return new AstNonStaticAttrId(position, new AstId(position, id));
        }
        
        public static AstNonStaticAttrId New(string id)
        {
            return AstNonStaticAttrId.New(Position.Default, id);
        }
        
        public static implicit operator AstNonStaticAttrId(string id)
        {
            return AstNonStaticAttrId.New(Position.Default, id);
        }
        
        public static AstNonStaticAttrId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// notification_id
    /// 	 : id_
    /// </summary>
    public partial class AstNotificationId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "notification_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstNotificationId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstNotificationId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstNotificationId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNotificationId(this);
        }
        
        public static AstNotificationId New(Position position, string id)
        {
            return new AstNotificationId(position, new AstId(position, id));
        }
        
        public static AstNotificationId New(string id)
        {
            return AstNotificationId.New(Position.Default, id);
        }
        
        public static implicit operator AstNotificationId(string id)
        {
            return AstNotificationId.New(Position.Default, id);
        }
        
        public static AstNotificationId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// object_identifier
    /// 	 : id_
    /// </summary>
    public partial class AstObjectIdentifier : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "object_identifier";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstObjectIdentifier(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstObjectIdentifier(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstObjectIdentifier(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitObjectIdentifier(this);
        }
        
        public static AstObjectIdentifier New(Position position, string id)
        {
            return new AstObjectIdentifier(position, new AstId(position, id));
        }
        
        public static AstObjectIdentifier New(string id)
        {
            return AstObjectIdentifier.New(Position.Default, id);
        }
        
        public static implicit operator AstObjectIdentifier(string id)
        {
            return AstObjectIdentifier.New(Position.Default, id);
        }
        
        public static AstObjectIdentifier? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// owner_id
    /// 	 : id_
    /// </summary>
    public partial class AstOwnerId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "owner_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstOwnerId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstOwnerId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstOwnerId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOwnerId(this);
        }
        
        public static AstOwnerId New(Position position, string id)
        {
            return new AstOwnerId(position, new AstId(position, id));
        }
        
        public static AstOwnerId New(string id)
        {
            return AstOwnerId.New(Position.Default, id);
        }
        
        public static implicit operator AstOwnerId(string id)
        {
            return AstOwnerId.New(Position.Default, id);
        }
        
        public static AstOwnerId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// partition_column_id
    /// 	 : id_
    /// </summary>
    public partial class AstPartitionColumnId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "partition_column_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPartitionColumnId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPartitionColumnId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPartitionColumnId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionColumnId(this);
        }
        
        public static AstPartitionColumnId New(Position position, string id)
        {
            return new AstPartitionColumnId(position, new AstId(position, id));
        }
        
        public static AstPartitionColumnId New(string id)
        {
            return AstPartitionColumnId.New(Position.Default, id);
        }
        
        public static implicit operator AstPartitionColumnId(string id)
        {
            return AstPartitionColumnId.New(Position.Default, id);
        }
        
        public static AstPartitionColumnId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// pool_id
    /// 	 : id_
    /// </summary>
    public partial class AstPoolId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "pool_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPoolId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPoolId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPoolId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPoolId(this);
        }
        
        public static AstPoolId New(Position position, string id)
        {
            return new AstPoolId(position, new AstId(position, id));
        }
        
        public static AstPoolId New(string id)
        {
            return AstPoolId.New(Position.Default, id);
        }
        
        public static implicit operator AstPoolId(string id)
        {
            return AstPoolId.New(Position.Default, id);
        }
        
        public static AstPoolId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// predicate_source_id
    /// 	 : id_
    /// </summary>
    public partial class AstPredicateSourceId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "predicate_source_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPredicateSourceId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPredicateSourceId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPredicateSourceId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateSourceId(this);
        }
        
        public static AstPredicateSourceId New(Position position, string id)
        {
            return new AstPredicateSourceId(position, new AstId(position, id));
        }
        
        public static AstPredicateSourceId New(string id)
        {
            return AstPredicateSourceId.New(Position.Default, id);
        }
        
        public static implicit operator AstPredicateSourceId(string id)
        {
            return AstPredicateSourceId.New(Position.Default, id);
        }
        
        public static AstPredicateSourceId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// property_list_id
    /// 	 : id_
    /// </summary>
    public partial class AstPropertyListId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "property_list_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPropertyListId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPropertyListId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPropertyListId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPropertyListId(this);
        }
        
        public static AstPropertyListId New(Position position, string id)
        {
            return new AstPropertyListId(position, new AstId(position, id));
        }
        
        public static AstPropertyListId New(string id)
        {
            return AstPropertyListId.New(Position.Default, id);
        }
        
        public static implicit operator AstPropertyListId(string id)
        {
            return AstPropertyListId.New(Position.Default, id);
        }
        
        public static AstPropertyListId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// provider_id
    /// 	 : id_
    /// </summary>
    public partial class AstProviderId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "provider_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstProviderId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstProviderId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstProviderId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProviderId(this);
        }
        
        public static AstProviderId New(Position position, string id)
        {
            return new AstProviderId(position, new AstId(position, id));
        }
        
        public static AstProviderId New(string id)
        {
            return AstProviderId.New(Position.Default, id);
        }
        
        public static implicit operator AstProviderId(string id)
        {
            return AstProviderId.New(Position.Default, id);
        }
        
        public static AstProviderId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// database_id
    /// 	 : id_
    /// </summary>
    public partial class AstDatabaseId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "database_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDatabaseId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDatabaseId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDatabaseId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseId(this);
        }
        
        public static AstDatabaseId New(Position position, string id)
        {
            return new AstDatabaseId(position, new AstId(position, id));
        }
        
        public static AstDatabaseId New(string id)
        {
            return AstDatabaseId.New(Position.Default, id);
        }
        
        public static implicit operator AstDatabaseId(string id)
        {
            return AstDatabaseId.New(Position.Default, id);
        }
        
        public static AstDatabaseId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// route_id
    /// 	 : id_
    /// </summary>
    public partial class AstRouteId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "route_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstRouteId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstRouteId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstRouteId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRouteId(this);
        }
        
        public static AstRouteId New(Position position, string id)
        {
            return new AstRouteId(position, new AstId(position, id));
        }
        
        public static AstRouteId New(string id)
        {
            return AstRouteId.New(Position.Default, id);
        }
        
        public static implicit operator AstRouteId(string id)
        {
            return AstRouteId.New(Position.Default, id);
        }
        
        public static AstRouteId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// rule_id
    /// 	 : id_
    /// </summary>
    public partial class AstRuleId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "rule_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstRuleId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstRuleId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstRuleId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRuleId(this);
        }
        
        public static AstRuleId New(Position position, string id)
        {
            return new AstRuleId(position, new AstId(position, id));
        }
        
        public static AstRuleId New(string id)
        {
            return AstRuleId.New(Position.Default, id);
        }
        
        public static implicit operator AstRuleId(string id)
        {
            return AstRuleId.New(Position.Default, id);
        }
        
        public static AstRuleId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// column_id
    /// 	 : id_
    /// </summary>
    public partial class AstColumnId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "column_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstColumnId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstColumnId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstColumnId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnId(this);
        }
        
        public static AstColumnId New(Position position, string id)
        {
            return new AstColumnId(position, new AstId(position, id));
        }
        
        public static AstColumnId New(string id)
        {
            return AstColumnId.New(Position.Default, id);
        }
        
        public static implicit operator AstColumnId(string id)
        {
            return AstColumnId.New(Position.Default, id);
        }
        
        public static AstColumnId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// schema_collection_id
    /// 	 : id_
    /// </summary>
    public partial class AstSchemaCollectionId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "schema_collection_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSchemaCollectionId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSchemaCollectionId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSchemaCollectionId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaCollectionId(this);
        }
        
        public static AstSchemaCollectionId New(Position position, string id)
        {
            return new AstSchemaCollectionId(position, new AstId(position, id));
        }
        
        public static AstSchemaCollectionId New(string id)
        {
            return AstSchemaCollectionId.New(Position.Default, id);
        }
        
        public static implicit operator AstSchemaCollectionId(string id)
        {
            return AstSchemaCollectionId.New(Position.Default, id);
        }
        
        public static AstSchemaCollectionId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// security_policy_id
    /// 	 : id_
    /// </summary>
    public partial class AstSecurityPolicyId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "security_policy_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSecurityPolicyId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSecurityPolicyId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSecurityPolicyId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPolicyId(this);
        }
        
        public static AstSecurityPolicyId New(Position position, string id)
        {
            return new AstSecurityPolicyId(position, new AstId(position, id));
        }
        
        public static AstSecurityPolicyId New(string id)
        {
            return AstSecurityPolicyId.New(Position.Default, id);
        }
        
        public static implicit operator AstSecurityPolicyId(string id)
        {
            return AstSecurityPolicyId.New(Position.Default, id);
        }
        
        public static AstSecurityPolicyId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// security_predicate_function_id
    /// 	 : id_
    /// </summary>
    public partial class AstSecurityPredicateFunctionId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "security_predicate_function_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSecurityPredicateFunctionId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSecurityPredicateFunctionId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSecurityPredicateFunctionId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecurityPredicateFunctionId(this);
        }
        
        public static AstSecurityPredicateFunctionId New(Position position, string id)
        {
            return new AstSecurityPredicateFunctionId(position, new AstId(position, id));
        }
        
        public static AstSecurityPredicateFunctionId New(string id)
        {
            return AstSecurityPredicateFunctionId.New(Position.Default, id);
        }
        
        public static implicit operator AstSecurityPredicateFunctionId(string id)
        {
            return AstSecurityPredicateFunctionId.New(Position.Default, id);
        }
        
        public static AstSecurityPredicateFunctionId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// sequence_id
    /// 	 : id_
    /// </summary>
    public partial class AstSequenceId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "sequence_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSequenceId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSequenceId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSequenceId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSequenceId(this);
        }
        
        public static AstSequenceId New(Position position, string id)
        {
            return new AstSequenceId(position, new AstId(position, id));
        }
        
        public static AstSequenceId New(string id)
        {
            return AstSequenceId.New(Position.Default, id);
        }
        
        public static implicit operator AstSequenceId(string id)
        {
            return AstSequenceId.New(Position.Default, id);
        }
        
        public static AstSequenceId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// server_role_id
    /// 	 : id_
    /// </summary>
    public partial class AstServerRoleId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "server_role_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstServerRoleId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstServerRoleId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstServerRoleId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerRoleId(this);
        }
        
        public static AstServerRoleId New(Position position, string id)
        {
            return new AstServerRoleId(position, new AstId(position, id));
        }
        
        public static AstServerRoleId New(string id)
        {
            return AstServerRoleId.New(Position.Default, id);
        }
        
        public static implicit operator AstServerRoleId(string id)
        {
            return AstServerRoleId.New(Position.Default, id);
        }
        
        public static AstServerRoleId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// source_list_id
    /// 	 : id_
    /// </summary>
    public partial class AstSourceListId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "source_list_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSourceListId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSourceListId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSourceListId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSourceListId(this);
        }
        
        public static AstSourceListId New(Position position, string id)
        {
            return new AstSourceListId(position, new AstId(position, id));
        }
        
        public static AstSourceListId New(string id)
        {
            return AstSourceListId.New(Position.Default, id);
        }
        
        public static implicit operator AstSourceListId(string id)
        {
            return AstSourceListId.New(Position.Default, id);
        }
        
        public static AstSourceListId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// sql_identifier_id
    /// 	 : id_
    /// </summary>
    public partial class AstSqlIdentifierId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "sql_identifier_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSqlIdentifierId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSqlIdentifierId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSqlIdentifierId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlIdentifierId(this);
        }
        
        public static AstSqlIdentifierId New(Position position, string id)
        {
            return new AstSqlIdentifierId(position, new AstId(position, id));
        }
        
        public static AstSqlIdentifierId New(string id)
        {
            return AstSqlIdentifierId.New(Position.Default, id);
        }
        
        public static implicit operator AstSqlIdentifierId(string id)
        {
            return AstSqlIdentifierId.New(Position.Default, id);
        }
        
        public static AstSqlIdentifierId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// static_attr_id
    /// 	 : id_
    /// </summary>
    public partial class AstStaticAttrId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "static_attr_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstStaticAttrId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStaticAttrId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStaticAttrId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStaticAttrId(this);
        }
        
        public static AstStaticAttrId New(Position position, string id)
        {
            return new AstStaticAttrId(position, new AstId(position, id));
        }
        
        public static AstStaticAttrId New(string id)
        {
            return AstStaticAttrId.New(Position.Default, id);
        }
        
        public static implicit operator AstStaticAttrId(string id)
        {
            return AstStaticAttrId.New(Position.Default, id);
        }
        
        public static AstStaticAttrId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// statistics_id
    /// 	 : id_
    /// </summary>
    public partial class AstStatisticsId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "statistics_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstStatisticsId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStatisticsId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStatisticsId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStatisticsId(this);
        }
        
        public static AstStatisticsId New(Position position, string id)
        {
            return new AstStatisticsId(position, new AstId(position, id));
        }
        
        public static AstStatisticsId New(string id)
        {
            return AstStatisticsId.New(Position.Default, id);
        }
        
        public static implicit operator AstStatisticsId(string id)
        {
            return AstStatisticsId.New(Position.Default, id);
        }
        
        public static AstStatisticsId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// stoplist_id
    /// 	 : id_
    /// </summary>
    public partial class AstStoplistId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "stoplist_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstStoplistId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStoplistId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStoplistId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStoplistId(this);
        }
        
        public static AstStoplistId New(Position position, string id)
        {
            return new AstStoplistId(position, new AstId(position, id));
        }
        
        public static AstStoplistId New(string id)
        {
            return AstStoplistId.New(Position.Default, id);
        }
        
        public static implicit operator AstStoplistId(string id)
        {
            return AstStoplistId.New(Position.Default, id);
        }
        
        public static AstStoplistId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// symmetric_key_id
    /// 	 : id_
    /// </summary>
    public partial class AstSymmetricKeyId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "symmetric_key_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSymmetricKeyId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSymmetricKeyId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSymmetricKeyId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSymmetricKeyId(this);
        }
        
        public static AstSymmetricKeyId New(Position position, string id)
        {
            return new AstSymmetricKeyId(position, new AstId(position, id));
        }
        
        public static AstSymmetricKeyId New(string id)
        {
            return AstSymmetricKeyId.New(Position.Default, id);
        }
        
        public static implicit operator AstSymmetricKeyId(string id)
        {
            return AstSymmetricKeyId.New(Position.Default, id);
        }
        
        public static AstSymmetricKeyId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// synonym_id
    /// 	 : id_
    /// </summary>
    public partial class AstSynonymId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "synonym_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstSynonymId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstSynonymId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstSynonymId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSynonymId(this);
        }
        
        public static AstSynonymId New(Position position, string id)
        {
            return new AstSynonymId(position, new AstId(position, id));
        }
        
        public static AstSynonymId New(string id)
        {
            return AstSynonymId.New(Position.Default, id);
        }
        
        public static implicit operator AstSynonymId(string id)
        {
            return AstSynonymId.New(Position.Default, id);
        }
        
        public static AstSynonymId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// table_or_view_id
    /// 	 : id_
    /// </summary>
    public partial class AstTableOrViewId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "table_or_view_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTableOrViewId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTableOrViewId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTableOrViewId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOrViewId(this);
        }
        
        public static AstTableOrViewId New(Position position, string id)
        {
            return new AstTableOrViewId(position, new AstId(position, id));
        }
        
        public static AstTableOrViewId New(string id)
        {
            return AstTableOrViewId.New(Position.Default, id);
        }
        
        public static implicit operator AstTableOrViewId(string id)
        {
            return AstTableOrViewId.New(Position.Default, id);
        }
        
        public static AstTableOrViewId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// view_id
    /// 	 : id_
    /// </summary>
    public partial class AstViewId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "view_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstViewId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstViewId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstViewId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewId(this);
        }
        
        public static AstViewId New(Position position, string id)
        {
            return new AstViewId(position, new AstId(position, id));
        }
        
        public static AstViewId New(string id)
        {
            return AstViewId.New(Position.Default, id);
        }
        
        public static implicit operator AstViewId(string id)
        {
            return AstViewId.New(Position.Default, id);
        }
        
        public static AstViewId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// table_id
    /// 	 : id_
    /// </summary>
    public partial class AstTableId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "table_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTableId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTableId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTableId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableId(this);
        }
        
        public static AstTableId New(Position position, string id)
        {
            return new AstTableId(position, new AstId(position, id));
        }
        
        public static AstTableId New(string id)
        {
            return AstTableId.New(Position.Default, id);
        }
        
        public static implicit operator AstTableId(string id)
        {
            return AstTableId.New(Position.Default, id);
        }
        
        public static AstTableId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// target_id
    /// 	 : id_
    /// </summary>
    public partial class AstTargetId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "target_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTargetId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTargetId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTargetId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetId(this);
        }
        
        public static AstTargetId New(Position position, string id)
        {
            return new AstTargetId(position, new AstId(position, id));
        }
        
        public static AstTargetId New(string id)
        {
            return AstTargetId.New(Position.Default, id);
        }
        
        public static implicit operator AstTargetId(string id)
        {
            return AstTargetId.New(Position.Default, id);
        }
        
        public static AstTargetId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// target_parameter_id
    /// 	 : id_
    /// </summary>
    public partial class AstTargetParameterId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "target_parameter_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTargetParameterId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTargetParameterId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTargetParameterId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterId(this);
        }
        
        public static AstTargetParameterId New(Position position, string id)
        {
            return new AstTargetParameterId(position, new AstId(position, id));
        }
        
        public static AstTargetParameterId New(string id)
        {
            return AstTargetParameterId.New(Position.Default, id);
        }
        
        public static implicit operator AstTargetParameterId(string id)
        {
            return AstTargetParameterId.New(Position.Default, id);
        }
        
        public static AstTargetParameterId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// trigger_id
    /// 	 : id_
    /// </summary>
    public partial class AstTriggerId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "trigger_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTriggerId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTriggerId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTriggerId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerId(this);
        }
        
        public static AstTriggerId New(Position position, string id)
        {
            return new AstTriggerId(position, new AstId(position, id));
        }
        
        public static AstTriggerId New(string id)
        {
            return AstTriggerId.New(Position.Default, id);
        }
        
        public static implicit operator AstTriggerId(string id)
        {
            return AstTriggerId.New(Position.Default, id);
        }
        
        public static AstTriggerId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// tvf_schema_id
    /// 	 : id_
    /// </summary>
    public partial class AstTvfSchemaId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "tvf_schema_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTvfSchemaId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTvfSchemaId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTvfSchemaId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTvfSchemaId(this);
        }
        
        public static AstTvfSchemaId New(Position position, string id)
        {
            return new AstTvfSchemaId(position, new AstId(position, id));
        }
        
        public static AstTvfSchemaId New(string id)
        {
            return AstTvfSchemaId.New(Position.Default, id);
        }
        
        public static implicit operator AstTvfSchemaId(string id)
        {
            return AstTvfSchemaId.New(Position.Default, id);
        }
        
        public static AstTvfSchemaId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// udt_column_id
    /// 	 : id_
    /// </summary>
    public partial class AstUdtColumnId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "udt_column_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstUdtColumnId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstUdtColumnId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstUdtColumnId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtColumnId(this);
        }
        
        public static AstUdtColumnId New(Position position, string id)
        {
            return new AstUdtColumnId(position, new AstId(position, id));
        }
        
        public static AstUdtColumnId New(string id)
        {
            return AstUdtColumnId.New(Position.Default, id);
        }
        
        public static implicit operator AstUdtColumnId(string id)
        {
            return AstUdtColumnId.New(Position.Default, id);
        }
        
        public static AstUdtColumnId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// unscaled_type_id
    /// 	 : id_
    /// </summary>
    public partial class AstUnscaledTypeId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "unscaled_type_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstUnscaledTypeId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstUnscaledTypeId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstUnscaledTypeId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnscaledTypeId(this);
        }
        
        public static AstUnscaledTypeId New(Position position, string id)
        {
            return new AstUnscaledTypeId(position, new AstId(position, id));
        }
        
        public static AstUnscaledTypeId New(string id)
        {
            return AstUnscaledTypeId.New(Position.Default, id);
        }
        
        public static implicit operator AstUnscaledTypeId(string id)
        {
            return AstUnscaledTypeId.New(Position.Default, id);
        }
        
        public static AstUnscaledTypeId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// windows_principal_id
    /// 	 : id_
    /// </summary>
    public partial class AstWindowsPrincipalId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "windows_principal_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstWindowsPrincipalId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstWindowsPrincipalId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstWindowsPrincipalId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWindowsPrincipalId(this);
        }
        
        public static AstWindowsPrincipalId New(Position position, string id)
        {
            return new AstWindowsPrincipalId(position, new AstId(position, id));
        }
        
        public static AstWindowsPrincipalId New(string id)
        {
            return AstWindowsPrincipalId.New(Position.Default, id);
        }
        
        public static implicit operator AstWindowsPrincipalId(string id)
        {
            return AstWindowsPrincipalId.New(Position.Default, id);
        }
        
        public static AstWindowsPrincipalId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// workload_group_group_id
    /// 	 : id_
    /// </summary>
    public partial class AstWorkloadGroupGroupId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "workload_group_group_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstWorkloadGroupGroupId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstWorkloadGroupGroupId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstWorkloadGroupGroupId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupGroupId(this);
        }
        
        public static AstWorkloadGroupGroupId New(Position position, string id)
        {
            return new AstWorkloadGroupGroupId(position, new AstId(position, id));
        }
        
        public static AstWorkloadGroupGroupId New(string id)
        {
            return AstWorkloadGroupGroupId.New(Position.Default, id);
        }
        
        public static implicit operator AstWorkloadGroupGroupId(string id)
        {
            return AstWorkloadGroupGroupId.New(Position.Default, id);
        }
        
        public static AstWorkloadGroupGroupId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// workload_group_pool_id
    /// 	 : id_
    /// </summary>
    public partial class AstWorkloadGroupPoolId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "workload_group_pool_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstWorkloadGroupPoolId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstWorkloadGroupPoolId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstWorkloadGroupPoolId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupPoolId(this);
        }
        
        public static AstWorkloadGroupPoolId New(Position position, string id)
        {
            return new AstWorkloadGroupPoolId(position, new AstId(position, id));
        }
        
        public static AstWorkloadGroupPoolId New(string id)
        {
            return AstWorkloadGroupPoolId.New(Position.Default, id);
        }
        
        public static implicit operator AstWorkloadGroupPoolId(string id)
        {
            return AstWorkloadGroupPoolId.New(Position.Default, id);
        }
        
        public static AstWorkloadGroupPoolId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// partition_scheme_id
    /// 	 : id_
    /// </summary>
    public partial class AstPartitionSchemeId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "partition_scheme_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPartitionSchemeId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPartitionSchemeId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPartitionSchemeId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionSchemeId(this);
        }
        
        public static AstPartitionSchemeId New(Position position, string id)
        {
            return new AstPartitionSchemeId(position, new AstId(position, id));
        }
        
        public static AstPartitionSchemeId New(string id)
        {
            return AstPartitionSchemeId.New(Position.Default, id);
        }
        
        public static implicit operator AstPartitionSchemeId(string id)
        {
            return AstPartitionSchemeId.New(Position.Default, id);
        }
        
        public static AstPartitionSchemeId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// queue_id
    /// 	 : id_
    /// </summary>
    public partial class AstQueueId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "queue_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstQueueId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstQueueId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstQueueId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueId(this);
        }
        
        public static AstQueueId New(Position position, string id)
        {
            return new AstQueueId(position, new AstId(position, id));
        }
        
        public static AstQueueId New(string id)
        {
            return AstQueueId.New(Position.Default, id);
        }
        
        public static implicit operator AstQueueId(string id)
        {
            return AstQueueId.New(Position.Default, id);
        }
        
        public static AstQueueId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// partition_function_id
    /// 	 : id_
    /// </summary>
    public partial class AstPartitionFunctionId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "partition_function_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstPartitionFunctionId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstPartitionFunctionId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstPartitionFunctionId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartitionFunctionId(this);
        }
        
        public static AstPartitionFunctionId New(Position position, string id)
        {
            return new AstPartitionFunctionId(position, new AstId(position, id));
        }
        
        public static AstPartitionFunctionId New(string id)
        {
            return AstPartitionFunctionId.New(Position.Default, id);
        }
        
        public static implicit operator AstPartitionFunctionId(string id)
        {
            return AstPartitionFunctionId.New(Position.Default, id);
        }
        
        public static AstPartitionFunctionId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// message_type_id
    /// 	 : id_
    /// </summary>
    public partial class AstMessageTypeId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "message_type_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstMessageTypeId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstMessageTypeId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstMessageTypeId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageTypeId(this);
        }
        
        public static AstMessageTypeId New(Position position, string id)
        {
            return new AstMessageTypeId(position, new AstId(position, id));
        }
        
        public static AstMessageTypeId New(string id)
        {
            return AstMessageTypeId.New(Position.Default, id);
        }
        
        public static implicit operator AstMessageTypeId(string id)
        {
            return AstMessageTypeId.New(Position.Default, id);
        }
        
        public static AstMessageTypeId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// code_location_id
    /// 	 : id_
    /// </summary>
    public partial class AstCodeLocationId : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "code_location_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstCodeLocationId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstCodeLocationId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstCodeLocationId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCodeLocationId(this);
        }
        
        public static AstCodeLocationId New(Position position, string id)
        {
            return new AstCodeLocationId(position, new AstId(position, id));
        }
        
        public static AstCodeLocationId New(string id)
        {
            return AstCodeLocationId.New(Position.Default, id);
        }
        
        public static implicit operator AstCodeLocationId(string id)
        {
            return AstCodeLocationId.New(Position.Default, id);
        }
        
        public static AstCodeLocationId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// transaction_identifier
    /// 	 : id_
    /// </summary>
    public partial class AstTransactionIdentifier : AstTerminalIdentifier
    {
        
        private AstId _value;
        
        private static string _ruleValue = "id_\r\n";
        
        private static string _ruleName = "transaction_identifier";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstTransactionIdentifier(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstTransactionIdentifier(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstTransactionIdentifier(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstId Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransactionIdentifier(this);
        }
        
        public static AstTransactionIdentifier New(Position position, string id)
        {
            return new AstTransactionIdentifier(position, new AstId(position, id));
        }
        
        public static AstTransactionIdentifier New(string id)
        {
            return AstTransactionIdentifier.New(Position.Default, id);
        }
        
        public static implicit operator AstTransactionIdentifier(string id)
        {
            return AstTransactionIdentifier.New(Position.Default, id);
        }
        
        public static AstTransactionIdentifier? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// decimal_id
    /// 	 : decimal
    /// 	 | id_
    /// </summary>
    public partial class AstDecimalId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "decimal\r\n | id_\r\n";
        
        private static string _ruleName = "decimal_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDecimalId(ITerminalNode t, AstDecimal value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalId(ParserRuleContext ctx, AstDecimal value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalId(Position position, AstDecimal value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstDecimalId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalId(this);
        }
        
        public static AstDecimalId New(Position position, string id)
        {
            return new AstDecimalId(position, new AstId(position, id));
        }
        
        public static AstDecimalId New(string id)
        {
            return AstDecimalId.New(Position.Default, id);
        }
        
        public static implicit operator AstDecimalId(string id)
        {
            return AstDecimalId.New(Position.Default, id);
        }
        
        public static AstDecimalId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// string_id
    /// 	 : stringtext
    /// 	 | id_
    /// </summary>
    public partial class AstStringId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "stringtext\r\n | id_\r\n";
        
        private static string _ruleName = "string_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstStringId(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStringId(ITerminalNode t, AstId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStringId(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStringId(ParserRuleContext ctx, AstId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStringId(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstStringId(Position position, AstId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStringId(this);
        }
        
        public static AstStringId New(Position position, string id)
        {
            return new AstStringId(position, new AstId(position, id));
        }
        
        public static AstStringId New(string id)
        {
            return AstStringId.New(Position.Default, id);
        }
        
        public static implicit operator AstStringId(string id)
        {
            return AstStringId.New(Position.Default, id);
        }
        
        public static AstStringId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// string_local_id
    /// 	 : stringtext
    /// 	 | local_id
    /// </summary>
    public partial class AstStringLocalId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "stringtext\r\n | local_id\r\n";
        
        private static string _ruleName = "string_local_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstStringLocalId(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStringLocalId(ITerminalNode t, AstLocalId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStringLocalId(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStringLocalId(ParserRuleContext ctx, AstLocalId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStringLocalId(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstStringLocalId(Position position, AstLocalId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStringLocalId(this);
        }
        
        public static AstStringLocalId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// decimal_local_id
    /// 	 : decimal
    /// 	 | local_id
    /// </summary>
    public partial class AstDecimalLocalId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "decimal\r\n | local_id\r\n";
        
        private static string _ruleName = "decimal_local_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDecimalLocalId(ITerminalNode t, AstDecimal value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalLocalId(ITerminalNode t, AstLocalId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalLocalId(ParserRuleContext ctx, AstDecimal value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalLocalId(ParserRuleContext ctx, AstLocalId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalLocalId(Position position, AstDecimal value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstDecimalLocalId(Position position, AstLocalId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalLocalId(this);
        }
        
        public static AstDecimalLocalId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// decimal_string
    /// 	 : decimal
    /// 	 | stringtext
    /// </summary>
    public partial class AstDecimalString : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "decimal\r\n | stringtext\r\n";
        
        private static string _ruleName = "decimal_string";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDecimalString(ITerminalNode t, AstDecimal value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalString(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalString(ParserRuleContext ctx, AstDecimal value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalString(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalString(Position position, AstDecimal value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstDecimalString(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalString(this);
        }
        
        public static AstDecimalString? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// decimal_string_local_id
    /// 	 : decimal
    /// 	 | stringtext
    /// 	 | local_id
    /// </summary>
    public partial class AstDecimalStringLocalId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "decimal\r\n | stringtext\r\n | local_id\r\n";
        
        private static string _ruleName = "decimal_string_local_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDecimalStringLocalId(ITerminalNode t, AstDecimal value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(ITerminalNode t, AstLocalId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(ParserRuleContext ctx, AstDecimal value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(ParserRuleContext ctx, AstLocalId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(Position position, AstDecimal value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstDecimalStringLocalId(Position position, AstLocalId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalStringLocalId(this);
        }
        
        public static AstDecimalStringLocalId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// string_local_id_double_quote_id
    /// 	 : stringtext
    /// 	 | local_id
    /// 	 | empty_value
    /// </summary>
    public partial class AstStringLocalIdDoubleQuoteId : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "stringtext\r\n | local_id\r\n | empty_value\r\n";
        
        private static string _ruleName = "string_local_id_double_quote_id";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstStringLocalIdDoubleQuoteId(ITerminalNode t, AstStringtext value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(ITerminalNode t, AstLocalId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(ITerminalNode t, AstEmptyValue value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(ParserRuleContext ctx, AstStringtext value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(ParserRuleContext ctx, AstLocalId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(ParserRuleContext ctx, AstEmptyValue value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(Position position, AstStringtext value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(Position position, AstLocalId value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstStringLocalIdDoubleQuoteId(Position position, AstEmptyValue value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStringLocalIdDoubleQuoteId(this);
        }
        
        public static AstStringLocalIdDoubleQuoteId? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// func_proc_name_server_database_schema
    /// 	 : server_database_schema_function_ref
    /// 	 | func_proc_name_database_schema_ref
    /// </summary>
    public partial class AstFuncProcNameServerDatabaseSchema : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "server_database_schema_function_ref\r\n | func_proc_name_database_schema_ref\r\n";
        
        private static string _ruleName = "func_proc_name_server_database_schema";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFuncProcNameServerDatabaseSchema(ITerminalNode t, AstServerDatabaseSchemaFunctionRef value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstFuncProcNameServerDatabaseSchema(ITerminalNode t, AstFuncProcNameDatabaseSchemaRef value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstFuncProcNameServerDatabaseSchema(ParserRuleContext ctx, AstServerDatabaseSchemaFunctionRef value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstFuncProcNameServerDatabaseSchema(ParserRuleContext ctx, AstFuncProcNameDatabaseSchemaRef value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstFuncProcNameServerDatabaseSchema(Position position, AstServerDatabaseSchemaFunctionRef value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstFuncProcNameServerDatabaseSchema(Position position, AstFuncProcNameDatabaseSchemaRef value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameServerDatabaseSchema(this);
        }
        
        public static AstFuncProcNameServerDatabaseSchema? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// ddl_object
    /// 	 : complete_table_ref
    /// 	 | local_id
    /// </summary>
    public partial class AstDdlObject : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "complete_table_ref\r\n | local_id\r\n";
        
        private static string _ruleName = "ddl_object";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstDdlObject(ITerminalNode t, AstCompleteTableRef value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDdlObject(ITerminalNode t, AstLocalId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstDdlObject(ParserRuleContext ctx, AstCompleteTableRef value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDdlObject(ParserRuleContext ctx, AstLocalId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstDdlObject(Position position, AstCompleteTableRef value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstDdlObject(Position position, AstLocalId value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDdlObject(this);
        }
        
        public static AstDdlObject? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
    
    /// <summary>
    /// full_column_name
    /// 	 : deleteed_inserted_column_id
    /// 	 | full_column_ref
    /// </summary>
    public partial class AstFullColumnName : AstTerminalIdentifier
    {
        
        private AstRoot _value;
        
        private static string _ruleValue = "deleteed_inserted_column_id\r\n | full_column_ref\r\n";
        
        private static string _ruleName = "full_column_name";
        
        private static bool _isTerminal = false;
        
        private static AstKindEnum _kind = AstKindEnum.Identifier;
        
        public AstFullColumnName(ITerminalNode t, AstDeleteedInsertedColumnId value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstFullColumnName(ITerminalNode t, AstFullColumnRef value) : 
                base(t)
        {
            _value = value;
        }
        
        public AstFullColumnName(ParserRuleContext ctx, AstDeleteedInsertedColumnId value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstFullColumnName(ParserRuleContext ctx, AstFullColumnRef value) : 
                base(ctx)
        {
            _value = value;
        }
        
        public AstFullColumnName(Position position, AstDeleteedInsertedColumnId value) : 
                base(position)
        {
            _value = value;
        }
        
        public AstFullColumnName(Position position, AstFullColumnRef value) : 
                base(position)
        {
            _value = value;
        }
        
        public virtual AstRoot Value
        {
            get
            {
                return _value;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override bool IsTerminal
        {
            get
            {
                return _isTerminal;
            }
        }
        
        public override AstKindEnum Kind
        {
            get
            {
                return _kind;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnName(this);
        }
        
        public static AstFullColumnName? Null()
        {
            return null;
        }
        
        public override void ToString(Writer writer)
        {
        }
    }
}
