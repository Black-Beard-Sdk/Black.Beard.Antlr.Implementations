#nullable disable
// Generated by ScriptClassIdentifierVisitorWithProperties.cs (Monday, May 8, 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Parser
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Bb.SqlServer.Asts;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    public partial class ScriptTSqlVisitor
    {
        
        /// <summary>
        /// drop_statistics : DROP  STATISTICS  full_table_ref_columns
        /// </summary>
        public override AstRoot VisitDrop_statistics(TSqlParser.Drop_statisticsContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropStatistics(context, list);
        }
        
        /// <summary>
        /// full_table_ref_column : (full_table_ref  DOT)?  name = id_
        /// </summary>
        public override AstRoot VisitFull_table_ref_column(TSqlParser.Full_table_ref_columnContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFullTableRefColumn(context, list);
        }
        
        /// <summary>
        /// partition_function : (database_id  DOT)?  DOLLAR_PARTITION  DOT  function_id  LR_BRACKET  expression  RR_BRACKET
        /// </summary>
        public override AstRoot VisitPartition_function(TSqlParser.Partition_functionContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstPartitionFunction(context, list);
        }
        
        /// <summary>
        /// server_database_schema_object_ref : (server_id  DOT)?  (database_id  DOT)?  (schema_identifier  DOT)?  object_identifier
        /// </summary>
        public override AstRoot VisitServer_database_schema_object_ref(TSqlParser.Server_database_schema_object_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstServerDatabaseSchemaObjectRef(context, list);
        }
        
        /// <summary>
        /// database_stoplist_ref : (database_id  DOT)?  stoplist_id
        /// </summary>
        public override AstRoot VisitDatabase_stoplist_ref(TSqlParser.Database_stoplist_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseStoplistRef(context, list);
        }
        
        /// <summary>
        /// event_module_package_action_ref : (event_module_guid_id  DOT)?  event_package_id  DOT  action_id
        /// </summary>
        public override AstRoot VisitEvent_module_package_action_ref(TSqlParser.Event_module_package_action_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEventModulePackageActionRef(context, list);
        }
        
        /// <summary>
        /// schema_sequence_ref : (schema_identifier  DOT)?  sequence_id
        /// </summary>
        public override AstRoot VisitSchema_sequence_ref(TSqlParser.Schema_sequence_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaSequenceRef(context, list);
        }
        
        /// <summary>
        /// schema_queue_ref : (schema_identifier  DOT)  queue_id
        /// </summary>
        public override AstRoot VisitSchema_queue_ref(TSqlParser.Schema_queue_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaQueueRef(context, list);
        }
        
        /// <summary>
        /// module_package_event_ref : (event_module_guid_id  DOT)?  event_package_id  DOT  target_id
        /// </summary>
        public override AstRoot VisitModule_package_event_ref(TSqlParser.Module_package_event_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstModulePackageEventRef(context, list);
        }
        
        /// <summary>
        /// schema_rule_ref : (schema_identifier  DOT)?  rule_id
        /// </summary>
        public override AstRoot VisitSchema_rule_ref(TSqlParser.Schema_rule_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaRuleRef(context, list);
        }
        
        /// <summary>
        /// schema_module_ref : (schema_identifier  DOT)?  module_id
        /// </summary>
        public override AstRoot VisitSchema_module_ref(TSqlParser.Schema_module_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaModuleRef(context, list);
        }
        
        /// <summary>
        /// database_schema_sequence_ref : (database_id  DOT)?  schema_sequence_ref
        /// </summary>
        public override AstRoot VisitDatabase_schema_sequence_ref(TSqlParser.Database_schema_sequence_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseSchemaSequenceRef(context, list);
        }
        
        /// <summary>
        /// schema_object_statistics_ref : schema_object_ref  DOT  statistics_id
        /// </summary>
        public override AstRoot VisitSchema_object_statistics_ref(TSqlParser.Schema_object_statistics_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaObjectStatisticsRef(context, list);
        }
        
        /// <summary>
        /// schema_synonym_ref : (schema_identifier  DOT)?  synonym_id
        /// </summary>
        public override AstRoot VisitSchema_synonym_ref(TSqlParser.Schema_synonym_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaSynonymRef(context, list);
        }
        
        /// <summary>
        /// default_ref : (schema_identifier  DOT)?  id_
        /// </summary>
        public override AstRoot VisitDefault_ref(TSqlParser.Default_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDefaultRef(context, list);
        }
        
        /// <summary>
        /// schema_sql_identifier_id : (schema_identifier  DOT)?  sql_identifier_id
        /// </summary>
        public override AstRoot VisitSchema_sql_identifier_id(TSqlParser.Schema_sql_identifier_idContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaSqlIdentifierId(context, list);
        }
        
        /// <summary>
        /// schema_trigger_ref : (schema_identifier  DOT)?  trigger_id
        /// </summary>
        public override AstRoot VisitSchema_trigger_ref(TSqlParser.Schema_trigger_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaTriggerRef(context, list);
        }
        
        /// <summary>
        /// schema_object_ref : (schema_identifier  DOT)?  object_identifier
        /// </summary>
        public override AstRoot VisitSchema_object_ref(TSqlParser.Schema_object_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaObjectRef(context, list);
        }
        
        /// <summary>
        /// schema_security_policy_ref : (schema_identifier  DOT)?  security_policy_id
        /// </summary>
        public override AstRoot VisitSchema_security_policy_ref(TSqlParser.Schema_security_policy_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaSecurityPolicyRef(context, list);
        }
        
        /// <summary>
        /// schema_aggregate_ref : (schema_identifier  DOT)?  aggregate_id
        /// </summary>
        public override AstRoot VisitSchema_aggregate_ref(TSqlParser.Schema_aggregate_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaAggregateRef(context, list);
        }
        
        /// <summary>
        /// database_schema_queue_ref : (database_schema_ref  DOT)?  queue_id
        /// </summary>
        public override AstRoot VisitDatabase_schema_queue_ref(TSqlParser.Database_schema_queue_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseSchemaQueueRef(context, list);
        }
        
        /// <summary>
        /// database_schema_ref : (database_id  DOT)?  schema_identifier
        /// </summary>
        public override AstRoot VisitDatabase_schema_ref(TSqlParser.Database_schema_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseSchemaRef(context, list);
        }
        
        /// <summary>
        /// drop_backward_compatible_index : (schema_identifier  DOT)?  table_or_view_id  DOT  index_id
        /// </summary>
        public override AstRoot VisitDrop_backward_compatible_index(TSqlParser.Drop_backward_compatible_indexContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDropBackwardCompatibleIndex(context, list);
        }
        
        /// <summary>
        /// complete_table_ref : (server_id  DOT  DOT  schema_identifier  DOT | server_id  DOT  database_id  DOT  schema_identifier  DOT | database_id  DOT  schema_identifier?  DOT | schema_identifier  DOT)?  table_id
        /// </summary>
        public override AstRoot VisitComplete_table_ref(TSqlParser.Complete_table_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstCompleteTableRef(context, list);
        }
        
        /// <summary>
        /// full_table_ref : database_schema_table_ref | database_schema_ref?  blocking_hierarchy = BLOCKING_HIERARCHY
        /// </summary>
        public override AstRoot VisitFull_table_ref(TSqlParser.Full_table_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFullTableRef(context, list);
        }
        
        /// <summary>
        /// database_schema_table_ref : database_id?  DOT  schema_identifier?  DOT  table_id
        /// </summary>
        public override AstRoot VisitDatabase_schema_table_ref(TSqlParser.Database_schema_table_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseSchemaTableRef(context, list);
        }
        
        /// <summary>
        /// entity_name_for_azure_dw_ref : schema_identifier | schema_identifier  DOT  object_identifier
        /// </summary>
        public override AstRoot VisitEntity_name_for_azure_dw_ref(TSqlParser.Entity_name_for_azure_dw_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEntityNameForAzureDwRef(context, list);
        }
        
        /// <summary>
        /// entity_name_for_parallel_dw_ref : schema_identifier | schema_identifier  DOT  object_identifier
        /// </summary>
        public override AstRoot VisitEntity_name_for_parallel_dw_ref(TSqlParser.Entity_name_for_parallel_dw_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEntityNameForParallelDwRef(context, list);
        }
        
        /// <summary>
        /// func_proc_name_database_schema_ref : database_schema_function_ref | schema_func_proc_ref
        /// </summary>
        public override AstRoot VisitFunc_proc_name_database_schema_ref(TSqlParser.Func_proc_name_database_schema_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFuncProcNameDatabaseSchemaRef(context, list);
        }
        
        /// <summary>
        /// database_schema_function_ref : database_id?  DOT  schema_identifier?  DOT  function_id
        /// </summary>
        public override AstRoot VisitDatabase_schema_function_ref(TSqlParser.Database_schema_function_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseSchemaFunctionRef(context, list);
        }
        
        /// <summary>
        /// schema_func_proc_ref : (schema_identifier  DOT)?  function_id
        /// </summary>
        public override AstRoot VisitSchema_func_proc_ref(TSqlParser.Schema_func_proc_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaFuncProcRef(context, list);
        }
        
        /// <summary>
        /// full_column_ref : server_id?  DOT  schema_identifier?  DOT  table_id?  DOT  column_id | schema_identifier?  DOT  table_id?  DOT  column_id | table_id?  DOT  column_id | column_id
        /// </summary>
        public override AstRoot VisitFull_column_ref(TSqlParser.Full_column_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFullColumnRef(context, list);
        }
        
        /// <summary>
        /// entity_name : (server_id  DOT  database_id  DOT  schema_identifier  DOT | database_id  DOT  schema_identifier?  DOT | schema_identifier  DOT)?  object_identifier
        /// </summary>
        public override AstRoot VisitEntity_name(TSqlParser.Entity_nameContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstEntityName(context, list);
        }
        
        /// <summary>
        /// schema_view_ref : (schema_identifier  DOT)?  view_id
        /// </summary>
        public override AstRoot VisitSchema_view_ref(TSqlParser.Schema_view_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaViewRef(context, list);
        }
        
        /// <summary>
        /// schema_type_ref : (schema_identifier  DOT)?  id_
        /// </summary>
        public override AstRoot VisitSchema_type_ref(TSqlParser.Schema_type_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstSchemaTypeRef(context, list);
        }
        
        /// <summary>
        /// database_source_list_ref : (database_id  DOT)?  source_list_id
        /// </summary>
        public override AstRoot VisitDatabase_source_list_ref(TSqlParser.Database_source_list_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstDatabaseSourceListRef(context, list);
        }
        
        /// <summary>
        /// full_predicate_source_ref : (event_module_guid_id  DOT)?  event_package_id  DOT  predicate_source_id
        /// </summary>
        public override AstRoot VisitFull_predicate_source_ref(TSqlParser.Full_predicate_source_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstFullPredicateSourceRef(context, list);
        }
        
        /// <summary>
        /// assembly_class_method_ref : assembly_id  DOT  class_id  DOT  method_id
        /// </summary>
        public override AstRoot VisitAssembly_class_method_ref(TSqlParser.Assembly_class_method_refContext context)
        {
            AstRootList<AstRoot> list = this.GetList(context);
            return new AstAssemblyClassMethodRef(context, list);
        }
    }
}
