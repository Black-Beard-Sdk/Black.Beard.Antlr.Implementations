#nullable disable
// Generated by ScriptClassLists.cs (Monday, April 24, 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Asts
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    /// <summary>
    /// batchs
    /// 	 : batch  SEMI*  (go_statements  SEMI*  batch  SEMI*)*
    /// </summary>
    public partial class AstBatchs : AstRuleList<AstBatch>
    {
        
        private static string _ruleValue = "batch  SEMI*  (go_statements  SEMI*  batch  SEMI*)*\r\n";
        
        private static string _ruleName = "batchs";
        
        public AstBatchs(params AstBatch[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstBatchs(Position position, params AstBatch[] items) : 
                base(position, items)
        {
        }
        
        public AstBatchs(ParserRuleContext ctx, params AstBatch[] items) : 
                base(ctx, items)
        {
        }
        
        public AstBatchs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBatchs(this);
        }
        
        /// <summary>
        /// batchs
        /// 	 : batch  SEMI*  (go_statements  SEMI*  batch  SEMI*)*
        /// </summary>
        public static AstBatchs New(ParserRuleContext ctx, params AstBatch[] items)
        {
            return new AstBatchs(ctx, items);
        }
        
        /// <summary>
        /// batchs
        /// 	 : batch  SEMI*  (go_statements  SEMI*  batch  SEMI*)*
        /// </summary>
        public static AstBatchs New(Position position, params AstBatch[] items)
        {
            return new AstBatchs(position, items);
        }
        
        /// <summary>
        /// batchs
        /// 	 : batch  SEMI*  (go_statements  SEMI*  batch  SEMI*)*
        /// </summary>
        public static AstBatchs New(params AstBatch[] items)
        {
            return new AstBatchs(Position.Default, items);
        }
        
        public static AstBatchs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// go_statements
    /// 	 : go_statement*
    /// </summary>
    public partial class AstGoStatements : AstRuleList<AstGoStatement>
    {
        
        private static string _ruleValue = "go_statement*\r\n";
        
        private static string _ruleName = "go_statements";
        
        public AstGoStatements(params AstGoStatement[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstGoStatements(Position position, params AstGoStatement[] items) : 
                base(position, items)
        {
        }
        
        public AstGoStatements(ParserRuleContext ctx, params AstGoStatement[] items) : 
                base(ctx, items)
        {
        }
        
        public AstGoStatements(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGoStatements(this);
        }
        
        /// <summary>
        /// go_statements
        /// 	 : go_statement*
        /// </summary>
        public static AstGoStatements New(ParserRuleContext ctx, params AstGoStatement[] items)
        {
            return new AstGoStatements(ctx, items);
        }
        
        /// <summary>
        /// go_statements
        /// 	 : go_statement*
        /// </summary>
        public static AstGoStatements New(Position position, params AstGoStatement[] items)
        {
            return new AstGoStatements(position, items);
        }
        
        /// <summary>
        /// go_statements
        /// 	 : go_statement*
        /// </summary>
        public static AstGoStatements New(params AstGoStatement[] items)
        {
            return new AstGoStatements(Position.Default, items);
        }
        
        public static AstGoStatements? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// sql_clauses
    /// 	 : sql_clause  (SEMI+  sql_clause)*  SEMI*
    /// </summary>
    public partial class AstSqlClauses : AstRuleList<AstSqlClause>
    {
        
        private static string _ruleValue = "sql_clause  (SEMI+  sql_clause)*  SEMI*\r\n";
        
        private static string _ruleName = "sql_clauses";
        
        public AstSqlClauses(params AstSqlClause[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSqlClauses(Position position, params AstSqlClause[] items) : 
                base(position, items)
        {
        }
        
        public AstSqlClauses(ParserRuleContext ctx, params AstSqlClause[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSqlClauses(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlClauses(this);
        }
        
        /// <summary>
        /// sql_clauses
        /// 	 : sql_clause  (SEMI+  sql_clause)*  SEMI*
        /// </summary>
        public static AstSqlClauses New(ParserRuleContext ctx, params AstSqlClause[] items)
        {
            return new AstSqlClauses(ctx, items);
        }
        
        /// <summary>
        /// sql_clauses
        /// 	 : sql_clause  (SEMI+  sql_clause)*  SEMI*
        /// </summary>
        public static AstSqlClauses New(Position position, params AstSqlClause[] items)
        {
            return new AstSqlClauses(position, items);
        }
        
        /// <summary>
        /// sql_clauses
        /// 	 : sql_clause  (SEMI+  sql_clause)*  SEMI*
        /// </summary>
        public static AstSqlClauses New(params AstSqlClause[] items)
        {
            return new AstSqlClauses(Position.Default, items);
        }
        
        public static AstSqlClauses? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// constant_local_ids
    /// 	 : constant_local_id_or_null  (COMMA  constant_local_id_or_null)+
    /// </summary>
    public partial class AstConstantLocalIds : AstRuleList<AstConstantLocalIdOrNull>
    {
        
        private static string _ruleValue = "constant_local_id_or_null  (COMMA  constant_local_id_or_null)+\r\n";
        
        private static string _ruleName = "constant_local_ids";
        
        public AstConstantLocalIds(params AstConstantLocalIdOrNull[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstConstantLocalIds(Position position, params AstConstantLocalIdOrNull[] items) : 
                base(position, items)
        {
        }
        
        public AstConstantLocalIds(ParserRuleContext ctx, params AstConstantLocalIdOrNull[] items) : 
                base(ctx, items)
        {
        }
        
        public AstConstantLocalIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantLocalIds(this);
        }
        
        /// <summary>
        /// constant_local_ids
        /// 	 : constant_local_id_or_null  (COMMA  constant_local_id_or_null)+
        /// </summary>
        public static AstConstantLocalIds New(ParserRuleContext ctx, params AstConstantLocalIdOrNull[] items)
        {
            return new AstConstantLocalIds(ctx, items);
        }
        
        /// <summary>
        /// constant_local_ids
        /// 	 : constant_local_id_or_null  (COMMA  constant_local_id_or_null)+
        /// </summary>
        public static AstConstantLocalIds New(Position position, params AstConstantLocalIdOrNull[] items)
        {
            return new AstConstantLocalIds(position, items);
        }
        
        /// <summary>
        /// constant_local_ids
        /// 	 : constant_local_id_or_null  (COMMA  constant_local_id_or_null)+
        /// </summary>
        public static AstConstantLocalIds New(params AstConstantLocalIdOrNull[] items)
        {
            return new AstConstantLocalIds(Position.Default, items);
        }
        
        public static AstConstantLocalIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// binary_content_nexts
    /// 	 : binary_content_next+
    /// </summary>
    public partial class AstBinaryContentNexts : AstRuleList<AstBinaryContentNext>
    {
        
        private static string _ruleValue = "binary_content_next+\r\n";
        
        private static string _ruleName = "binary_content_nexts";
        
        public AstBinaryContentNexts(params AstBinaryContentNext[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstBinaryContentNexts(Position position, params AstBinaryContentNext[] items) : 
                base(position, items)
        {
        }
        
        public AstBinaryContentNexts(ParserRuleContext ctx, params AstBinaryContentNext[] items) : 
                base(ctx, items)
        {
        }
        
        public AstBinaryContentNexts(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNexts(this);
        }
        
        /// <summary>
        /// binary_content_nexts
        /// 	 : binary_content_next+
        /// </summary>
        public static AstBinaryContentNexts New(ParserRuleContext ctx, params AstBinaryContentNext[] items)
        {
            return new AstBinaryContentNexts(ctx, items);
        }
        
        /// <summary>
        /// binary_content_nexts
        /// 	 : binary_content_next+
        /// </summary>
        public static AstBinaryContentNexts New(Position position, params AstBinaryContentNext[] items)
        {
            return new AstBinaryContentNexts(position, items);
        }
        
        /// <summary>
        /// binary_content_nexts
        /// 	 : binary_content_next+
        /// </summary>
        public static AstBinaryContentNexts New(params AstBinaryContentNext[] items)
        {
            return new AstBinaryContentNexts(Position.Default, items);
        }
        
        public static AstBinaryContentNexts? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// ips
    /// 	 : LR_BRACKET  ip_listener_comma  RR_BRACKET  (COMMA  LR_BRACKET  ip_listener_comma  RR_BRACKET)*
    /// </summary>
    public partial class AstIps : AstRuleList<AstIpListenerComma>
    {
        
        private static string _ruleValue = "LR_BRACKET  ip_listener_comma  RR_BRACKET  (COMMA  LR_BRACKET  ip_listener_comma " +
            " RR_BRACKET)*\r\n";
        
        private static string _ruleName = "ips";
        
        public AstIps(params AstIpListenerComma[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstIps(Position position, params AstIpListenerComma[] items) : 
                base(position, items)
        {
        }
        
        public AstIps(ParserRuleContext ctx, params AstIpListenerComma[] items) : 
                base(ctx, items)
        {
        }
        
        public AstIps(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIps(this);
        }
        
        /// <summary>
        /// ips
        /// 	 : LR_BRACKET  ip_listener_comma  RR_BRACKET  (COMMA  LR_BRACKET  ip_listener_comma  RR_BRACKET)*
        /// </summary>
        public static AstIps New(ParserRuleContext ctx, params AstIpListenerComma[] items)
        {
            return new AstIps(ctx, items);
        }
        
        /// <summary>
        /// ips
        /// 	 : LR_BRACKET  ip_listener_comma  RR_BRACKET  (COMMA  LR_BRACKET  ip_listener_comma  RR_BRACKET)*
        /// </summary>
        public static AstIps New(Position position, params AstIpListenerComma[] items)
        {
            return new AstIps(position, items);
        }
        
        /// <summary>
        /// ips
        /// 	 : LR_BRACKET  ip_listener_comma  RR_BRACKET  (COMMA  LR_BRACKET  ip_listener_comma  RR_BRACKET)*
        /// </summary>
        public static AstIps New(params AstIpListenerComma[] items)
        {
            return new AstIps(Position.Default, items);
        }
        
        public static AstIps? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// drop_signature_bys
    /// 	 : drop_signature_by  (COMMA  drop_signature_by)*
    /// </summary>
    public partial class AstDropSignatureBys : AstRuleList<AstDropSignatureBy>
    {
        
        private static string _ruleValue = "drop_signature_by  (COMMA  drop_signature_by)*\r\n";
        
        private static string _ruleName = "drop_signature_bys";
        
        public AstDropSignatureBys(params AstDropSignatureBy[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDropSignatureBys(Position position, params AstDropSignatureBy[] items) : 
                base(position, items)
        {
        }
        
        public AstDropSignatureBys(ParserRuleContext ctx, params AstDropSignatureBy[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDropSignatureBys(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSignatureBys(this);
        }
        
        /// <summary>
        /// drop_signature_bys
        /// 	 : drop_signature_by  (COMMA  drop_signature_by)*
        /// </summary>
        public static AstDropSignatureBys New(ParserRuleContext ctx, params AstDropSignatureBy[] items)
        {
            return new AstDropSignatureBys(ctx, items);
        }
        
        /// <summary>
        /// drop_signature_bys
        /// 	 : drop_signature_by  (COMMA  drop_signature_by)*
        /// </summary>
        public static AstDropSignatureBys New(Position position, params AstDropSignatureBy[] items)
        {
            return new AstDropSignatureBys(position, items);
        }
        
        /// <summary>
        /// drop_signature_bys
        /// 	 : drop_signature_by  (COMMA  drop_signature_by)*
        /// </summary>
        public static AstDropSignatureBys New(params AstDropSignatureBy[] items)
        {
            return new AstDropSignatureBys(Position.Default, items);
        }
        
        public static AstDropSignatureBys? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// target_parameter_blocks
    /// 	 : target_parameter_block*
    /// </summary>
    public partial class AstTargetParameterBlocks : AstRuleList<AstTargetParameterBlock>
    {
        
        private static string _ruleValue = "target_parameter_block*\r\n";
        
        private static string _ruleName = "target_parameter_blocks";
        
        public AstTargetParameterBlocks(params AstTargetParameterBlock[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTargetParameterBlocks(Position position, params AstTargetParameterBlock[] items) : 
                base(position, items)
        {
        }
        
        public AstTargetParameterBlocks(ParserRuleContext ctx, params AstTargetParameterBlock[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTargetParameterBlocks(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterBlocks(this);
        }
        
        /// <summary>
        /// target_parameter_blocks
        /// 	 : target_parameter_block*
        /// </summary>
        public static AstTargetParameterBlocks New(ParserRuleContext ctx, params AstTargetParameterBlock[] items)
        {
            return new AstTargetParameterBlocks(ctx, items);
        }
        
        /// <summary>
        /// target_parameter_blocks
        /// 	 : target_parameter_block*
        /// </summary>
        public static AstTargetParameterBlocks New(Position position, params AstTargetParameterBlock[] items)
        {
            return new AstTargetParameterBlocks(position, items);
        }
        
        /// <summary>
        /// target_parameter_blocks
        /// 	 : target_parameter_block*
        /// </summary>
        public static AstTargetParameterBlocks New(params AstTargetParameterBlock[] items)
        {
            return new AstTargetParameterBlocks(Position.Default, items);
        }
        
        public static AstTargetParameterBlocks? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// target_parameter_ids
    /// 	 : target_parameter_id  (COMMA  target_parameter_id)*
    /// </summary>
    public partial class AstTargetParameterIds : AstRuleList<AstTargetParameterId>
    {
        
        private static string _ruleValue = "target_parameter_id  (COMMA  target_parameter_id)*\r\n";
        
        private static string _ruleName = "target_parameter_ids";
        
        public AstTargetParameterIds(params AstTargetParameterId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTargetParameterIds(Position position, params AstTargetParameterId[] items) : 
                base(position, items)
        {
        }
        
        public AstTargetParameterIds(ParserRuleContext ctx, params AstTargetParameterId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTargetParameterIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterIds(this);
        }
        
        /// <summary>
        /// target_parameter_ids
        /// 	 : target_parameter_id  (COMMA  target_parameter_id)*
        /// </summary>
        public static AstTargetParameterIds New(ParserRuleContext ctx, params AstTargetParameterId[] items)
        {
            return new AstTargetParameterIds(ctx, items);
        }
        
        /// <summary>
        /// target_parameter_ids
        /// 	 : target_parameter_id  (COMMA  target_parameter_id)*
        /// </summary>
        public static AstTargetParameterIds New(Position position, params AstTargetParameterId[] items)
        {
            return new AstTargetParameterIds(position, items);
        }
        
        /// <summary>
        /// target_parameter_ids
        /// 	 : target_parameter_id  (COMMA  target_parameter_id)*
        /// </summary>
        public static AstTargetParameterIds New(params AstTargetParameterId[] items)
        {
            return new AstTargetParameterIds(Position.Default, items);
        }
        
        public static AstTargetParameterIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// external_sources
    /// 	 : external_source  (COMMA  external_source)*
    /// </summary>
    public partial class AstExternalSources : AstRuleList<AstExternalSource>
    {
        
        private static string _ruleValue = "external_source  (COMMA  external_source)*\r\n";
        
        private static string _ruleName = "external_sources";
        
        public AstExternalSources(params AstExternalSource[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExternalSources(Position position, params AstExternalSource[] items) : 
                base(position, items)
        {
        }
        
        public AstExternalSources(ParserRuleContext ctx, params AstExternalSource[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExternalSources(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalSources(this);
        }
        
        /// <summary>
        /// external_sources
        /// 	 : external_source  (COMMA  external_source)*
        /// </summary>
        public static AstExternalSources New(ParserRuleContext ctx, params AstExternalSource[] items)
        {
            return new AstExternalSources(ctx, items);
        }
        
        /// <summary>
        /// external_sources
        /// 	 : external_source  (COMMA  external_source)*
        /// </summary>
        public static AstExternalSources New(Position position, params AstExternalSource[] items)
        {
            return new AstExternalSources(position, items);
        }
        
        /// <summary>
        /// external_sources
        /// 	 : external_source  (COMMA  external_source)*
        /// </summary>
        public static AstExternalSources New(params AstExternalSource[] items)
        {
            return new AstExternalSources(Position.Default, items);
        }
        
        public static AstExternalSources? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// id_dot_id
    /// 	 : id_  (DOT  id_)?
    /// </summary>
    public partial class AstIdDotId : AstRuleList<AstId>
    {
        
        private static string _ruleValue = "id_  (DOT  id_)?\r\n";
        
        private static string _ruleName = "id_dot_id";
        
        public AstIdDotId(params AstId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstIdDotId(Position position, params AstId[] items) : 
                base(position, items)
        {
        }
        
        public AstIdDotId(ParserRuleContext ctx, params AstId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstIdDotId(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIdDotId(this);
        }
        
        /// <summary>
        /// id_dot_id
        /// 	 : id_  (DOT  id_)?
        /// </summary>
        public static AstIdDotId New(ParserRuleContext ctx, params AstId[] items)
        {
            return new AstIdDotId(ctx, items);
        }
        
        /// <summary>
        /// id_dot_id
        /// 	 : id_  (DOT  id_)?
        /// </summary>
        public static AstIdDotId New(Position position, params AstId[] items)
        {
            return new AstIdDotId(position, items);
        }
        
        /// <summary>
        /// id_dot_id
        /// 	 : id_  (DOT  id_)?
        /// </summary>
        public static AstIdDotId New(params AstId[] items)
        {
            return new AstIdDotId(Position.Default, items);
        }
        
        public static AstIdDotId? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_schema_targets
    /// 	 : create_schema_target+
    /// </summary>
    public partial class AstCreateSchemaTargets : AstRuleList<AstCreateSchemaTarget>
    {
        
        private static string _ruleValue = "create_schema_target+\r\n";
        
        private static string _ruleName = "create_schema_targets";
        
        public AstCreateSchemaTargets(params AstCreateSchemaTarget[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateSchemaTargets(Position position, params AstCreateSchemaTarget[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateSchemaTargets(ParserRuleContext ctx, params AstCreateSchemaTarget[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateSchemaTargets(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaTargets(this);
        }
        
        /// <summary>
        /// create_schema_targets
        /// 	 : create_schema_target+
        /// </summary>
        public static AstCreateSchemaTargets New(ParserRuleContext ctx, params AstCreateSchemaTarget[] items)
        {
            return new AstCreateSchemaTargets(ctx, items);
        }
        
        /// <summary>
        /// create_schema_targets
        /// 	 : create_schema_target+
        /// </summary>
        public static AstCreateSchemaTargets New(Position position, params AstCreateSchemaTarget[] items)
        {
            return new AstCreateSchemaTargets(position, items);
        }
        
        /// <summary>
        /// create_schema_targets
        /// 	 : create_schema_target+
        /// </summary>
        public static AstCreateSchemaTargets New(params AstCreateSchemaTarget[] items)
        {
            return new AstCreateSchemaTargets(Position.Default, items);
        }
        
        public static AstCreateSchemaTargets? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// add_drop_audit_action_groups
    /// 	 : add_drop_audit_action_group  add_drop_audit_action_group+
    /// </summary>
    public partial class AstAddDropAuditActionGroups : AstRuleList<AstAddDropAuditActionGroup>
    {
        
        private static string _ruleValue = "add_drop_audit_action_group  add_drop_audit_action_group+\r\n";
        
        private static string _ruleName = "add_drop_audit_action_groups";
        
        public AstAddDropAuditActionGroups(params AstAddDropAuditActionGroup[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstAddDropAuditActionGroups(Position position, params AstAddDropAuditActionGroup[] items) : 
                base(position, items)
        {
        }
        
        public AstAddDropAuditActionGroups(ParserRuleContext ctx, params AstAddDropAuditActionGroup[] items) : 
                base(ctx, items)
        {
        }
        
        public AstAddDropAuditActionGroups(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddDropAuditActionGroups(this);
        }
        
        /// <summary>
        /// add_drop_audit_action_groups
        /// 	 : add_drop_audit_action_group  add_drop_audit_action_group+
        /// </summary>
        public static AstAddDropAuditActionGroups New(ParserRuleContext ctx, params AstAddDropAuditActionGroup[] items)
        {
            return new AstAddDropAuditActionGroups(ctx, items);
        }
        
        /// <summary>
        /// add_drop_audit_action_groups
        /// 	 : add_drop_audit_action_group  add_drop_audit_action_group+
        /// </summary>
        public static AstAddDropAuditActionGroups New(Position position, params AstAddDropAuditActionGroup[] items)
        {
            return new AstAddDropAuditActionGroups(position, items);
        }
        
        /// <summary>
        /// add_drop_audit_action_groups
        /// 	 : add_drop_audit_action_group  add_drop_audit_action_group+
        /// </summary>
        public static AstAddDropAuditActionGroups New(params AstAddDropAuditActionGroup[] items)
        {
            return new AstAddDropAuditActionGroups(Position.Default, items);
        }
        
        public static AstAddDropAuditActionGroups? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// server_audit_specification_add_groups
    /// 	 : server_audit_specification_add_group  server_audit_specification_add_group+
    /// </summary>
    public partial class AstServerAuditSpecificationAddGroups : AstRuleList<AstServerAuditSpecificationAddGroup>
    {
        
        private static string _ruleValue = "server_audit_specification_add_group  server_audit_specification_add_group+\r\n";
        
        private static string _ruleName = "server_audit_specification_add_groups";
        
        public AstServerAuditSpecificationAddGroups(params AstServerAuditSpecificationAddGroup[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstServerAuditSpecificationAddGroups(Position position, params AstServerAuditSpecificationAddGroup[] items) : 
                base(position, items)
        {
        }
        
        public AstServerAuditSpecificationAddGroups(ParserRuleContext ctx, params AstServerAuditSpecificationAddGroup[] items) : 
                base(ctx, items)
        {
        }
        
        public AstServerAuditSpecificationAddGroups(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditSpecificationAddGroups(this);
        }
        
        /// <summary>
        /// server_audit_specification_add_groups
        /// 	 : server_audit_specification_add_group  server_audit_specification_add_group+
        /// </summary>
        public static AstServerAuditSpecificationAddGroups New(ParserRuleContext ctx, params AstServerAuditSpecificationAddGroup[] items)
        {
            return new AstServerAuditSpecificationAddGroups(ctx, items);
        }
        
        /// <summary>
        /// server_audit_specification_add_groups
        /// 	 : server_audit_specification_add_group  server_audit_specification_add_group+
        /// </summary>
        public static AstServerAuditSpecificationAddGroups New(Position position, params AstServerAuditSpecificationAddGroup[] items)
        {
            return new AstServerAuditSpecificationAddGroups(position, items);
        }
        
        /// <summary>
        /// server_audit_specification_add_groups
        /// 	 : server_audit_specification_add_group  server_audit_specification_add_group+
        /// </summary>
        public static AstServerAuditSpecificationAddGroups New(params AstServerAuditSpecificationAddGroup[] items)
        {
            return new AstServerAuditSpecificationAddGroups(Position.Default, items);
        }
        
        public static AstServerAuditSpecificationAddGroups? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// user_settings_shorts
    /// 	 : user_settings_short  (COMMA  user_settings_short)+
    /// </summary>
    public partial class AstUserSettingsShorts : AstRuleList<AstUserSettingsShort>
    {
        
        private static string _ruleValue = "user_settings_short  (COMMA  user_settings_short)+\r\n";
        
        private static string _ruleName = "user_settings_shorts";
        
        public AstUserSettingsShorts(params AstUserSettingsShort[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstUserSettingsShorts(Position position, params AstUserSettingsShort[] items) : 
                base(position, items)
        {
        }
        
        public AstUserSettingsShorts(ParserRuleContext ctx, params AstUserSettingsShort[] items) : 
                base(ctx, items)
        {
        }
        
        public AstUserSettingsShorts(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserSettingsShorts(this);
        }
        
        /// <summary>
        /// user_settings_shorts
        /// 	 : user_settings_short  (COMMA  user_settings_short)+
        /// </summary>
        public static AstUserSettingsShorts New(ParserRuleContext ctx, params AstUserSettingsShort[] items)
        {
            return new AstUserSettingsShorts(ctx, items);
        }
        
        /// <summary>
        /// user_settings_shorts
        /// 	 : user_settings_short  (COMMA  user_settings_short)+
        /// </summary>
        public static AstUserSettingsShorts New(Position position, params AstUserSettingsShort[] items)
        {
            return new AstUserSettingsShorts(position, items);
        }
        
        /// <summary>
        /// user_settings_shorts
        /// 	 : user_settings_short  (COMMA  user_settings_short)+
        /// </summary>
        public static AstUserSettingsShorts New(params AstUserSettingsShort[] items)
        {
            return new AstUserSettingsShorts(Position.Default, items);
        }
        
        public static AstUserSettingsShorts? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// user_settings
    /// 	 : user_setting  (COMMA  user_setting)+
    /// </summary>
    public partial class AstUserSettings : AstRuleList<AstUserSetting>
    {
        
        private static string _ruleValue = "user_setting  (COMMA  user_setting)+\r\n";
        
        private static string _ruleName = "user_settings";
        
        public AstUserSettings(params AstUserSetting[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstUserSettings(Position position, params AstUserSetting[] items) : 
                base(position, items)
        {
        }
        
        public AstUserSettings(ParserRuleContext ctx, params AstUserSetting[] items) : 
                base(ctx, items)
        {
        }
        
        public AstUserSettings(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUserSettings(this);
        }
        
        /// <summary>
        /// user_settings
        /// 	 : user_setting  (COMMA  user_setting)+
        /// </summary>
        public static AstUserSettings New(ParserRuleContext ctx, params AstUserSetting[] items)
        {
            return new AstUserSettings(ctx, items);
        }
        
        /// <summary>
        /// user_settings
        /// 	 : user_setting  (COMMA  user_setting)+
        /// </summary>
        public static AstUserSettings New(Position position, params AstUserSetting[] items)
        {
            return new AstUserSettings(position, items);
        }
        
        /// <summary>
        /// user_settings
        /// 	 : user_setting  (COMMA  user_setting)+
        /// </summary>
        public static AstUserSettings New(params AstUserSetting[] items)
        {
            return new AstUserSettings(Position.Default, items);
        }
        
        public static AstUserSettings? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql_infos
    /// 	 : alter_user_azure_sql_info  (COMMA  alter_user_azure_sql_info)*
    /// </summary>
    public partial class AstAlterUserAzureSqlInfos : AstRuleList<AstAlterUserAzureSqlInfo>
    {
        
        private static string _ruleValue = "alter_user_azure_sql_info  (COMMA  alter_user_azure_sql_info)*\r\n";
        
        private static string _ruleName = "alter_user_azure_sql_infos";
        
        public AstAlterUserAzureSqlInfos(params AstAlterUserAzureSqlInfo[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstAlterUserAzureSqlInfos(Position position, params AstAlterUserAzureSqlInfo[] items) : 
                base(position, items)
        {
        }
        
        public AstAlterUserAzureSqlInfos(ParserRuleContext ctx, params AstAlterUserAzureSqlInfo[] items) : 
                base(ctx, items)
        {
        }
        
        public AstAlterUserAzureSqlInfos(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSqlInfos(this);
        }
        
        /// <summary>
        /// alter_user_azure_sql_infos
        /// 	 : alter_user_azure_sql_info  (COMMA  alter_user_azure_sql_info)*
        /// </summary>
        public static AstAlterUserAzureSqlInfos New(ParserRuleContext ctx, params AstAlterUserAzureSqlInfo[] items)
        {
            return new AstAlterUserAzureSqlInfos(ctx, items);
        }
        
        /// <summary>
        /// alter_user_azure_sql_infos
        /// 	 : alter_user_azure_sql_info  (COMMA  alter_user_azure_sql_info)*
        /// </summary>
        public static AstAlterUserAzureSqlInfos New(Position position, params AstAlterUserAzureSqlInfo[] items)
        {
            return new AstAlterUserAzureSqlInfos(position, items);
        }
        
        /// <summary>
        /// alter_user_azure_sql_infos
        /// 	 : alter_user_azure_sql_info  (COMMA  alter_user_azure_sql_info)*
        /// </summary>
        public static AstAlterUserAzureSqlInfos New(params AstAlterUserAzureSqlInfo[] items)
        {
            return new AstAlterUserAzureSqlInfos(Position.Default, items);
        }
        
        public static AstAlterUserAzureSqlInfos? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// workload_group_id_or_defaults
    /// 	 : workload_group_id_or_default  (COMMA  workload_group_id_or_default)*
    /// </summary>
    public partial class AstWorkloadGroupIdOrDefaults : AstRuleList<AstWorkloadGroupIdOrDefault>
    {
        
        private static string _ruleValue = "workload_group_id_or_default  (COMMA  workload_group_id_or_default)*\r\n";
        
        private static string _ruleName = "workload_group_id_or_defaults";
        
        public AstWorkloadGroupIdOrDefaults(params AstWorkloadGroupIdOrDefault[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstWorkloadGroupIdOrDefaults(Position position, params AstWorkloadGroupIdOrDefault[] items) : 
                base(position, items)
        {
        }
        
        public AstWorkloadGroupIdOrDefaults(ParserRuleContext ctx, params AstWorkloadGroupIdOrDefault[] items) : 
                base(ctx, items)
        {
        }
        
        public AstWorkloadGroupIdOrDefaults(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadGroupIdOrDefaults(this);
        }
        
        /// <summary>
        /// workload_group_id_or_defaults
        /// 	 : workload_group_id_or_default  (COMMA  workload_group_id_or_default)*
        /// </summary>
        public static AstWorkloadGroupIdOrDefaults New(ParserRuleContext ctx, params AstWorkloadGroupIdOrDefault[] items)
        {
            return new AstWorkloadGroupIdOrDefaults(ctx, items);
        }
        
        /// <summary>
        /// workload_group_id_or_defaults
        /// 	 : workload_group_id_or_default  (COMMA  workload_group_id_or_default)*
        /// </summary>
        public static AstWorkloadGroupIdOrDefaults New(Position position, params AstWorkloadGroupIdOrDefault[] items)
        {
            return new AstWorkloadGroupIdOrDefaults(position, items);
        }
        
        /// <summary>
        /// workload_group_id_or_defaults
        /// 	 : workload_group_id_or_default  (COMMA  workload_group_id_or_default)*
        /// </summary>
        public static AstWorkloadGroupIdOrDefaults New(params AstWorkloadGroupIdOrDefault[] items)
        {
            return new AstWorkloadGroupIdOrDefaults(Position.Default, items);
        }
        
        public static AstWorkloadGroupIdOrDefaults? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// when_matches
    /// 	 : when_matche+
    /// </summary>
    public partial class AstWhenMatches : AstRuleList<AstWhenMatche>
    {
        
        private static string _ruleValue = "when_matche+\r\n";
        
        private static string _ruleName = "when_matches";
        
        public AstWhenMatches(params AstWhenMatche[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstWhenMatches(Position position, params AstWhenMatche[] items) : 
                base(position, items)
        {
        }
        
        public AstWhenMatches(ParserRuleContext ctx, params AstWhenMatche[] items) : 
                base(ctx, items)
        {
        }
        
        public AstWhenMatches(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhenMatches(this);
        }
        
        /// <summary>
        /// when_matches
        /// 	 : when_matche+
        /// </summary>
        public static AstWhenMatches New(ParserRuleContext ctx, params AstWhenMatche[] items)
        {
            return new AstWhenMatches(ctx, items);
        }
        
        /// <summary>
        /// when_matches
        /// 	 : when_matche+
        /// </summary>
        public static AstWhenMatches New(Position position, params AstWhenMatche[] items)
        {
            return new AstWhenMatches(position, items);
        }
        
        /// <summary>
        /// when_matches
        /// 	 : when_matche+
        /// </summary>
        public static AstWhenMatches New(params AstWhenMatche[] items)
        {
            return new AstWhenMatches(Position.Default, items);
        }
        
        public static AstWhenMatches? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// on_partitions
    /// 	 : ON  PARTITIONS  LR_BRACKET  partition_nums  (COMMA  partition_nums)*  RR_BRACKET
    /// </summary>
    public partial class AstOnPartitions : AstRuleList<AstPartitionNums>
    {
        
        private static string _ruleValue = "ON  PARTITIONS  LR_BRACKET  partition_nums  (COMMA  partition_nums)*  RR_BRACKET\r" +
            "\n";
        
        private static string _ruleName = "on_partitions";
        
        public AstOnPartitions(params AstPartitionNums[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstOnPartitions(Position position, params AstPartitionNums[] items) : 
                base(position, items)
        {
        }
        
        public AstOnPartitions(ParserRuleContext ctx, params AstPartitionNums[] items) : 
                base(ctx, items)
        {
        }
        
        public AstOnPartitions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOnPartitions(this);
        }
        
        /// <summary>
        /// on_partitions
        /// 	 : ON  PARTITIONS  LR_BRACKET  partition_nums  (COMMA  partition_nums)*  RR_BRACKET
        /// </summary>
        public static AstOnPartitions New(ParserRuleContext ctx, params AstPartitionNums[] items)
        {
            return new AstOnPartitions(ctx, items);
        }
        
        /// <summary>
        /// on_partitions
        /// 	 : ON  PARTITIONS  LR_BRACKET  partition_nums  (COMMA  partition_nums)*  RR_BRACKET
        /// </summary>
        public static AstOnPartitions New(Position position, params AstPartitionNums[] items)
        {
            return new AstOnPartitions(position, items);
        }
        
        /// <summary>
        /// on_partitions
        /// 	 : ON  PARTITIONS  LR_BRACKET  partition_nums  (COMMA  partition_nums)*  RR_BRACKET
        /// </summary>
        public static AstOnPartitions New(params AstPartitionNums[] items)
        {
            return new AstOnPartitions(Position.Default, items);
        }
        
        public static AstOnPartitions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// table_indices_list
    /// 	 : table_indices  (COMMA  table_indices)*
    /// </summary>
    public partial class AstTableIndicesList : AstRuleList<AstTableIndices>
    {
        
        private static string _ruleValue = "table_indices  (COMMA  table_indices)*\r\n";
        
        private static string _ruleName = "table_indices_list";
        
        public AstTableIndicesList(params AstTableIndices[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTableIndicesList(Position position, params AstTableIndices[] items) : 
                base(position, items)
        {
        }
        
        public AstTableIndicesList(ParserRuleContext ctx, params AstTableIndices[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTableIndicesList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableIndicesList(this);
        }
        
        /// <summary>
        /// table_indices_list
        /// 	 : table_indices  (COMMA  table_indices)*
        /// </summary>
        public static AstTableIndicesList New(ParserRuleContext ctx, params AstTableIndices[] items)
        {
            return new AstTableIndicesList(ctx, items);
        }
        
        /// <summary>
        /// table_indices_list
        /// 	 : table_indices  (COMMA  table_indices)*
        /// </summary>
        public static AstTableIndicesList New(Position position, params AstTableIndices[] items)
        {
            return new AstTableIndicesList(position, items);
        }
        
        /// <summary>
        /// table_indices_list
        /// 	 : table_indices  (COMMA  table_indices)*
        /// </summary>
        public static AstTableIndicesList New(params AstTableIndices[] items)
        {
            return new AstTableIndicesList(Position.Default, items);
        }
        
        public static AstTableIndicesList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// table_options
    /// 	 : tbl_option+
    /// </summary>
    public partial class AstTableOptions : AstRuleList<AstTblOption>
    {
        
        private static string _ruleValue = "tbl_option+\r\n";
        
        private static string _ruleName = "table_options";
        
        public AstTableOptions(params AstTblOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTableOptions(Position position, params AstTblOption[] items) : 
                base(position, items)
        {
        }
        
        public AstTableOptions(ParserRuleContext ctx, params AstTblOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTableOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableOptions(this);
        }
        
        /// <summary>
        /// table_options
        /// 	 : tbl_option+
        /// </summary>
        public static AstTableOptions New(ParserRuleContext ctx, params AstTblOption[] items)
        {
            return new AstTableOptions(ctx, items);
        }
        
        /// <summary>
        /// table_options
        /// 	 : tbl_option+
        /// </summary>
        public static AstTableOptions New(Position position, params AstTblOption[] items)
        {
            return new AstTableOptions(position, items);
        }
        
        /// <summary>
        /// table_options
        /// 	 : tbl_option+
        /// </summary>
        public static AstTableOptions New(params AstTblOption[] items)
        {
            return new AstTableOptions(Position.Default, items);
        }
        
        public static AstTableOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// filespec
    /// 	 : LR_BRACKET  NAME  EQUAL  file_group_id  (COMMA  NEWNAME  EQUAL  file_group_id | stringtext)?  (COMMA  FILENAME  EQUAL  file_name = stringtext)?  (COMMA  SIZE  EQUAL  size = file_size)?  (COMMA  MAXSIZE  EQUAL  max = file_size | UNLIMITED)?  (COMMA  FILEGROWTH  EQUAL  growth_increment = file_size)?  (COMMA  OFFLINE)?  RR_BRACKET
    /// </summary>
    public partial class AstFilespec : AstRuleList<AstFileGroupId>
    {
        
        private static string _ruleValue = @"LR_BRACKET  NAME  EQUAL  file_group_id  (COMMA  NEWNAME  EQUAL  file_group_id | stringtext)?  (COMMA  FILENAME  EQUAL  file_name = stringtext)?  (COMMA  SIZE  EQUAL  size = file_size)?  (COMMA  MAXSIZE  EQUAL  max = file_size | UNLIMITED)?  (COMMA  FILEGROWTH  EQUAL  growth_increment = file_size)?  (COMMA  OFFLINE)?  RR_BRACKET
";
        
        private static string _ruleName = "filespec";
        
        public AstFilespec(params AstFileGroupId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFilespec(Position position, params AstFileGroupId[] items) : 
                base(position, items)
        {
        }
        
        public AstFilespec(ParserRuleContext ctx, params AstFileGroupId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFilespec(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespec(this);
        }
        
        /// <summary>
        /// filespec
        /// 	 : LR_BRACKET  NAME  EQUAL  file_group_id  (COMMA  NEWNAME  EQUAL  file_group_id | stringtext)?  (COMMA  FILENAME  EQUAL  file_name = stringtext)?  (COMMA  SIZE  EQUAL  size = file_size)?  (COMMA  MAXSIZE  EQUAL  max = file_size | UNLIMITED)?  (COMMA  FILEGROWTH  EQUAL  growth_increment = file_size)?  (COMMA  OFFLINE)?  RR_BRACKET
        /// </summary>
        public static AstFilespec New(ParserRuleContext ctx, params AstFileGroupId[] items)
        {
            return new AstFilespec(ctx, items);
        }
        
        /// <summary>
        /// filespec
        /// 	 : LR_BRACKET  NAME  EQUAL  file_group_id  (COMMA  NEWNAME  EQUAL  file_group_id | stringtext)?  (COMMA  FILENAME  EQUAL  file_name = stringtext)?  (COMMA  SIZE  EQUAL  size = file_size)?  (COMMA  MAXSIZE  EQUAL  max = file_size | UNLIMITED)?  (COMMA  FILEGROWTH  EQUAL  growth_increment = file_size)?  (COMMA  OFFLINE)?  RR_BRACKET
        /// </summary>
        public static AstFilespec New(Position position, params AstFileGroupId[] items)
        {
            return new AstFilespec(position, items);
        }
        
        /// <summary>
        /// filespec
        /// 	 : LR_BRACKET  NAME  EQUAL  file_group_id  (COMMA  NEWNAME  EQUAL  file_group_id | stringtext)?  (COMMA  FILENAME  EQUAL  file_name = stringtext)?  (COMMA  SIZE  EQUAL  size = file_size)?  (COMMA  MAXSIZE  EQUAL  max = file_size | UNLIMITED)?  (COMMA  FILEGROWTH  EQUAL  growth_increment = file_size)?  (COMMA  OFFLINE)?  RR_BRACKET
        /// </summary>
        public static AstFilespec New(params AstFileGroupId[] items)
        {
            return new AstFilespec(Position.Default, items);
        }
        
        public static AstFilespec? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// backup_certificate_private_keys
    /// 	 : backup_certificate_private_key  (COMMA  backup_certificate_private_key)*
    /// </summary>
    public partial class AstBackupCertificatePrivateKeys : AstRuleList<AstBackupCertificatePrivateKey>
    {
        
        private static string _ruleValue = "backup_certificate_private_key  (COMMA  backup_certificate_private_key)*\r\n";
        
        private static string _ruleName = "backup_certificate_private_keys";
        
        public AstBackupCertificatePrivateKeys(params AstBackupCertificatePrivateKey[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstBackupCertificatePrivateKeys(Position position, params AstBackupCertificatePrivateKey[] items) : 
                base(position, items)
        {
        }
        
        public AstBackupCertificatePrivateKeys(ParserRuleContext ctx, params AstBackupCertificatePrivateKey[] items) : 
                base(ctx, items)
        {
        }
        
        public AstBackupCertificatePrivateKeys(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificatePrivateKeys(this);
        }
        
        /// <summary>
        /// backup_certificate_private_keys
        /// 	 : backup_certificate_private_key  (COMMA  backup_certificate_private_key)*
        /// </summary>
        public static AstBackupCertificatePrivateKeys New(ParserRuleContext ctx, params AstBackupCertificatePrivateKey[] items)
        {
            return new AstBackupCertificatePrivateKeys(ctx, items);
        }
        
        /// <summary>
        /// backup_certificate_private_keys
        /// 	 : backup_certificate_private_key  (COMMA  backup_certificate_private_key)*
        /// </summary>
        public static AstBackupCertificatePrivateKeys New(Position position, params AstBackupCertificatePrivateKey[] items)
        {
            return new AstBackupCertificatePrivateKeys(position, items);
        }
        
        /// <summary>
        /// backup_certificate_private_keys
        /// 	 : backup_certificate_private_key  (COMMA  backup_certificate_private_key)*
        /// </summary>
        public static AstBackupCertificatePrivateKeys New(params AstBackupCertificatePrivateKey[] items)
        {
            return new AstBackupCertificatePrivateKeys(Position.Default, items);
        }
        
        public static AstBackupCertificatePrivateKeys? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// backup_settings
    /// 	 : WITH  backup_setting+
    /// </summary>
    public partial class AstBackupSettings : AstRuleList<AstBackupSetting>
    {
        
        private static string _ruleValue = "WITH  backup_setting+\r\n";
        
        private static string _ruleName = "backup_settings";
        
        public AstBackupSettings(params AstBackupSetting[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstBackupSettings(Position position, params AstBackupSetting[] items) : 
                base(position, items)
        {
        }
        
        public AstBackupSettings(ParserRuleContext ctx, params AstBackupSetting[] items) : 
                base(ctx, items)
        {
        }
        
        public AstBackupSettings(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupSettings(this);
        }
        
        /// <summary>
        /// backup_settings
        /// 	 : WITH  backup_setting+
        /// </summary>
        public static AstBackupSettings New(ParserRuleContext ctx, params AstBackupSetting[] items)
        {
            return new AstBackupSettings(ctx, items);
        }
        
        /// <summary>
        /// backup_settings
        /// 	 : WITH  backup_setting+
        /// </summary>
        public static AstBackupSettings New(Position position, params AstBackupSetting[] items)
        {
            return new AstBackupSettings(position, items);
        }
        
        /// <summary>
        /// backup_settings
        /// 	 : WITH  backup_setting+
        /// </summary>
        public static AstBackupSettings New(params AstBackupSetting[] items)
        {
            return new AstBackupSettings(Position.Default, items);
        }
        
        public static AstBackupSettings? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// to_principal_rincipal_ids
    /// 	 : principal_id  (COMMA  principal_id)*
    /// </summary>
    public partial class AstToPrincipalRincipalIds : AstRuleList<AstPrincipalId>
    {
        
        private static string _ruleValue = "principal_id  (COMMA  principal_id)*\r\n";
        
        private static string _ruleName = "to_principal_rincipal_ids";
        
        public AstToPrincipalRincipalIds(params AstPrincipalId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstToPrincipalRincipalIds(Position position, params AstPrincipalId[] items) : 
                base(position, items)
        {
        }
        
        public AstToPrincipalRincipalIds(ParserRuleContext ctx, params AstPrincipalId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstToPrincipalRincipalIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitToPrincipalRincipalIds(this);
        }
        
        /// <summary>
        /// to_principal_rincipal_ids
        /// 	 : principal_id  (COMMA  principal_id)*
        /// </summary>
        public static AstToPrincipalRincipalIds New(ParserRuleContext ctx, params AstPrincipalId[] items)
        {
            return new AstToPrincipalRincipalIds(ctx, items);
        }
        
        /// <summary>
        /// to_principal_rincipal_ids
        /// 	 : principal_id  (COMMA  principal_id)*
        /// </summary>
        public static AstToPrincipalRincipalIds New(Position position, params AstPrincipalId[] items)
        {
            return new AstToPrincipalRincipalIds(position, items);
        }
        
        /// <summary>
        /// to_principal_rincipal_ids
        /// 	 : principal_id  (COMMA  principal_id)*
        /// </summary>
        public static AstToPrincipalRincipalIds New(params AstPrincipalId[] items)
        {
            return new AstToPrincipalRincipalIds(Position.Default, items);
        }
        
        public static AstToPrincipalRincipalIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_key_options
    /// 	 : create_key_option  (COMMA  create_key_option)*
    /// </summary>
    public partial class AstCreateKeyOptions : AstRuleList<AstCreateKeyOption>
    {
        
        private static string _ruleValue = "create_key_option  (COMMA  create_key_option)*\r\n";
        
        private static string _ruleName = "create_key_options";
        
        public AstCreateKeyOptions(params AstCreateKeyOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateKeyOptions(Position position, params AstCreateKeyOption[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateKeyOptions(ParserRuleContext ctx, params AstCreateKeyOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateKeyOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateKeyOptions(this);
        }
        
        /// <summary>
        /// create_key_options
        /// 	 : create_key_option  (COMMA  create_key_option)*
        /// </summary>
        public static AstCreateKeyOptions New(ParserRuleContext ctx, params AstCreateKeyOption[] items)
        {
            return new AstCreateKeyOptions(ctx, items);
        }
        
        /// <summary>
        /// create_key_options
        /// 	 : create_key_option  (COMMA  create_key_option)*
        /// </summary>
        public static AstCreateKeyOptions New(Position position, params AstCreateKeyOption[] items)
        {
            return new AstCreateKeyOptions(position, items);
        }
        
        /// <summary>
        /// create_key_options
        /// 	 : create_key_option  (COMMA  create_key_option)*
        /// </summary>
        public static AstCreateKeyOptions New(params AstCreateKeyOption[] items)
        {
            return new AstCreateKeyOptions(Position.Default, items);
        }
        
        public static AstCreateKeyOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// column_def_table_constraints
    /// 	 : column_def_table_constraint  (COMMA?  column_def_table_constraint)*
    /// </summary>
    public partial class AstColumnDefTableConstraints : AstRuleList<AstColumnDefTableConstraint>
    {
        
        private static string _ruleValue = "column_def_table_constraint  (COMMA?  column_def_table_constraint)*\r\n";
        
        private static string _ruleName = "column_def_table_constraints";
        
        public AstColumnDefTableConstraints(params AstColumnDefTableConstraint[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstColumnDefTableConstraints(Position position, params AstColumnDefTableConstraint[] items) : 
                base(position, items)
        {
        }
        
        public AstColumnDefTableConstraints(ParserRuleContext ctx, params AstColumnDefTableConstraint[] items) : 
                base(ctx, items)
        {
        }
        
        public AstColumnDefTableConstraints(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefTableConstraints(this);
        }
        
        /// <summary>
        /// column_def_table_constraints
        /// 	 : column_def_table_constraint  (COMMA?  column_def_table_constraint)*
        /// </summary>
        public static AstColumnDefTableConstraints New(ParserRuleContext ctx, params AstColumnDefTableConstraint[] items)
        {
            return new AstColumnDefTableConstraints(ctx, items);
        }
        
        /// <summary>
        /// column_def_table_constraints
        /// 	 : column_def_table_constraint  (COMMA?  column_def_table_constraint)*
        /// </summary>
        public static AstColumnDefTableConstraints New(Position position, params AstColumnDefTableConstraint[] items)
        {
            return new AstColumnDefTableConstraints(position, items);
        }
        
        /// <summary>
        /// column_def_table_constraints
        /// 	 : column_def_table_constraint  (COMMA?  column_def_table_constraint)*
        /// </summary>
        public static AstColumnDefTableConstraints New(params AstColumnDefTableConstraint[] items)
        {
            return new AstColumnDefTableConstraints(Position.Default, items);
        }
        
        public static AstColumnDefTableConstraints? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// sql_unions
    /// 	 : sql_union+
    /// </summary>
    public partial class AstSqlUnions : AstRuleList<AstSqlUnion>
    {
        
        private static string _ruleValue = "sql_union+\r\n";
        
        private static string _ruleName = "sql_unions";
        
        public AstSqlUnions(params AstSqlUnion[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSqlUnions(Position position, params AstSqlUnion[] items) : 
                base(position, items)
        {
        }
        
        public AstSqlUnions(ParserRuleContext ctx, params AstSqlUnion[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSqlUnions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlUnions(this);
        }
        
        /// <summary>
        /// sql_unions
        /// 	 : sql_union+
        /// </summary>
        public static AstSqlUnions New(ParserRuleContext ctx, params AstSqlUnion[] items)
        {
            return new AstSqlUnions(ctx, items);
        }
        
        /// <summary>
        /// sql_unions
        /// 	 : sql_union+
        /// </summary>
        public static AstSqlUnions New(Position position, params AstSqlUnion[] items)
        {
            return new AstSqlUnions(position, items);
        }
        
        /// <summary>
        /// sql_unions
        /// 	 : sql_union+
        /// </summary>
        public static AstSqlUnions New(params AstSqlUnion[] items)
        {
            return new AstSqlUnions(Position.Default, items);
        }
        
        public static AstSqlUnions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// order_by_clause
    /// 	 : ORDER  BY  order_by_expression  (COMMA  order_by_expression)*
    /// </summary>
    public partial class AstOrderByClause : AstRuleList<AstOrderByExpression>
    {
        
        private static string _ruleValue = "ORDER  BY  order_by_expression  (COMMA  order_by_expression)*\r\n";
        
        private static string _ruleName = "order_by_clause";
        
        public AstOrderByClause(params AstOrderByExpression[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstOrderByClause(Position position, params AstOrderByExpression[] items) : 
                base(position, items)
        {
        }
        
        public AstOrderByClause(ParserRuleContext ctx, params AstOrderByExpression[] items) : 
                base(ctx, items)
        {
        }
        
        public AstOrderByClause(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOrderByClause(this);
        }
        
        /// <summary>
        /// order_by_clause
        /// 	 : ORDER  BY  order_by_expression  (COMMA  order_by_expression)*
        /// </summary>
        public static AstOrderByClause New(ParserRuleContext ctx, params AstOrderByExpression[] items)
        {
            return new AstOrderByClause(ctx, items);
        }
        
        /// <summary>
        /// order_by_clause
        /// 	 : ORDER  BY  order_by_expression  (COMMA  order_by_expression)*
        /// </summary>
        public static AstOrderByClause New(Position position, params AstOrderByExpression[] items)
        {
            return new AstOrderByClause(position, items);
        }
        
        /// <summary>
        /// order_by_clause
        /// 	 : ORDER  BY  order_by_expression  (COMMA  order_by_expression)*
        /// </summary>
        public static AstOrderByClause New(params AstOrderByExpression[] items)
        {
            return new AstOrderByClause(Position.Default, items);
        }
        
        public static AstOrderByClause? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// subqueries
    /// 	 : subquery  (UNION  ALL  subquery)*
    /// </summary>
    public partial class AstSubqueries : AstRuleList<AstSubquery>
    {
        
        private static string _ruleValue = "subquery  (UNION  ALL  subquery)*\r\n";
        
        private static string _ruleName = "subqueries";
        
        public AstSubqueries(params AstSubquery[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSubqueries(Position position, params AstSubquery[] items) : 
                base(position, items)
        {
        }
        
        public AstSubqueries(ParserRuleContext ctx, params AstSubquery[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSubqueries(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSubqueries(this);
        }
        
        /// <summary>
        /// subqueries
        /// 	 : subquery  (UNION  ALL  subquery)*
        /// </summary>
        public static AstSubqueries New(ParserRuleContext ctx, params AstSubquery[] items)
        {
            return new AstSubqueries(ctx, items);
        }
        
        /// <summary>
        /// subqueries
        /// 	 : subquery  (UNION  ALL  subquery)*
        /// </summary>
        public static AstSubqueries New(Position position, params AstSubquery[] items)
        {
            return new AstSubqueries(position, items);
        }
        
        /// <summary>
        /// subqueries
        /// 	 : subquery  (UNION  ALL  subquery)*
        /// </summary>
        public static AstSubqueries New(params AstSubquery[] items)
        {
            return new AstSubqueries(Position.Default, items);
        }
        
        public static AstSubqueries? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// with_table_hints
    /// 	 : WITH  LR_BRACKET  table_hint  (COMMA?  table_hint)*  RR_BRACKET
    /// </summary>
    public partial class AstWithTableHints : AstRuleList<AstTableHint>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  table_hint  (COMMA?  table_hint)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "with_table_hints";
        
        public AstWithTableHints(params AstTableHint[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstWithTableHints(Position position, params AstTableHint[] items) : 
                base(position, items)
        {
        }
        
        public AstWithTableHints(ParserRuleContext ctx, params AstTableHint[] items) : 
                base(ctx, items)
        {
        }
        
        public AstWithTableHints(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithTableHints(this);
        }
        
        /// <summary>
        /// with_table_hints
        /// 	 : WITH  LR_BRACKET  table_hint  (COMMA?  table_hint)*  RR_BRACKET
        /// </summary>
        public static AstWithTableHints New(ParserRuleContext ctx, params AstTableHint[] items)
        {
            return new AstWithTableHints(ctx, items);
        }
        
        /// <summary>
        /// with_table_hints
        /// 	 : WITH  LR_BRACKET  table_hint  (COMMA?  table_hint)*  RR_BRACKET
        /// </summary>
        public static AstWithTableHints New(Position position, params AstTableHint[] items)
        {
            return new AstWithTableHints(position, items);
        }
        
        /// <summary>
        /// with_table_hints
        /// 	 : WITH  LR_BRACKET  table_hint  (COMMA?  table_hint)*  RR_BRACKET
        /// </summary>
        public static AstWithTableHints New(params AstTableHint[] items)
        {
            return new AstWithTableHints(Position.Default, items);
        }
        
        public static AstWithTableHints? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// sybase_legacy_hints
    /// 	 : sybase_legacy_hint+
    /// </summary>
    public partial class AstSybaseLegacyHints : AstRuleList<AstSybaseLegacyHint>
    {
        
        private static string _ruleValue = "sybase_legacy_hint+\r\n";
        
        private static string _ruleName = "sybase_legacy_hints";
        
        public AstSybaseLegacyHints(params AstSybaseLegacyHint[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSybaseLegacyHints(Position position, params AstSybaseLegacyHint[] items) : 
                base(position, items)
        {
        }
        
        public AstSybaseLegacyHints(ParserRuleContext ctx, params AstSybaseLegacyHint[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSybaseLegacyHints(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSybaseLegacyHints(this);
        }
        
        /// <summary>
        /// sybase_legacy_hints
        /// 	 : sybase_legacy_hint+
        /// </summary>
        public static AstSybaseLegacyHints New(ParserRuleContext ctx, params AstSybaseLegacyHint[] items)
        {
            return new AstSybaseLegacyHints(ctx, items);
        }
        
        /// <summary>
        /// sybase_legacy_hints
        /// 	 : sybase_legacy_hint+
        /// </summary>
        public static AstSybaseLegacyHints New(Position position, params AstSybaseLegacyHint[] items)
        {
            return new AstSybaseLegacyHints(position, items);
        }
        
        /// <summary>
        /// sybase_legacy_hints
        /// 	 : sybase_legacy_hint+
        /// </summary>
        public static AstSybaseLegacyHints New(params AstSybaseLegacyHint[] items)
        {
            return new AstSybaseLegacyHints(Position.Default, items);
        }
        
        public static AstSybaseLegacyHints? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_database_option_list
    /// 	 : create_database_option  (COMMA  create_database_option)*
    /// </summary>
    public partial class AstCreateDatabaseOptionList : AstRuleList<AstCreateDatabaseOption>
    {
        
        private static string _ruleValue = "create_database_option  (COMMA  create_database_option)*\r\n";
        
        private static string _ruleName = "create_database_option_list";
        
        public AstCreateDatabaseOptionList(params AstCreateDatabaseOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateDatabaseOptionList(Position position, params AstCreateDatabaseOption[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateDatabaseOptionList(ParserRuleContext ctx, params AstCreateDatabaseOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateDatabaseOptionList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabaseOptionList(this);
        }
        
        /// <summary>
        /// create_database_option_list
        /// 	 : create_database_option  (COMMA  create_database_option)*
        /// </summary>
        public static AstCreateDatabaseOptionList New(ParserRuleContext ctx, params AstCreateDatabaseOption[] items)
        {
            return new AstCreateDatabaseOptionList(ctx, items);
        }
        
        /// <summary>
        /// create_database_option_list
        /// 	 : create_database_option  (COMMA  create_database_option)*
        /// </summary>
        public static AstCreateDatabaseOptionList New(Position position, params AstCreateDatabaseOption[] items)
        {
            return new AstCreateDatabaseOptionList(position, items);
        }
        
        /// <summary>
        /// create_database_option_list
        /// 	 : create_database_option  (COMMA  create_database_option)*
        /// </summary>
        public static AstCreateDatabaseOptionList New(params AstCreateDatabaseOption[] items)
        {
            return new AstCreateDatabaseOptionList(Position.Default, items);
        }
        
        public static AstCreateDatabaseOptionList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// database_filestream_options
    /// 	 : database_filestream_option  (COMMA  database_filestream_option)*
    /// </summary>
    public partial class AstDatabaseFilestreamOptions : AstRuleList<AstDatabaseFilestreamOption>
    {
        
        private static string _ruleValue = "database_filestream_option  (COMMA  database_filestream_option)*\r\n";
        
        private static string _ruleName = "database_filestream_options";
        
        public AstDatabaseFilestreamOptions(params AstDatabaseFilestreamOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDatabaseFilestreamOptions(Position position, params AstDatabaseFilestreamOption[] items) : 
                base(position, items)
        {
        }
        
        public AstDatabaseFilestreamOptions(ParserRuleContext ctx, params AstDatabaseFilestreamOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDatabaseFilestreamOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestreamOptions(this);
        }
        
        /// <summary>
        /// database_filestream_options
        /// 	 : database_filestream_option  (COMMA  database_filestream_option)*
        /// </summary>
        public static AstDatabaseFilestreamOptions New(ParserRuleContext ctx, params AstDatabaseFilestreamOption[] items)
        {
            return new AstDatabaseFilestreamOptions(ctx, items);
        }
        
        /// <summary>
        /// database_filestream_options
        /// 	 : database_filestream_option  (COMMA  database_filestream_option)*
        /// </summary>
        public static AstDatabaseFilestreamOptions New(Position position, params AstDatabaseFilestreamOption[] items)
        {
            return new AstDatabaseFilestreamOptions(position, items);
        }
        
        /// <summary>
        /// database_filestream_options
        /// 	 : database_filestream_option  (COMMA  database_filestream_option)*
        /// </summary>
        public static AstDatabaseFilestreamOptions New(params AstDatabaseFilestreamOption[] items)
        {
            return new AstDatabaseFilestreamOptions(Position.Default, items);
        }
        
        public static AstDatabaseFilestreamOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// column_name_list_with_order
    /// 	 : column_ordered  (COMMA  column_ordered)*
    /// </summary>
    public partial class AstColumnNameListWithOrder : AstRuleList<AstColumnOrdered>
    {
        
        private static string _ruleValue = "column_ordered  (COMMA  column_ordered)*\r\n";
        
        private static string _ruleName = "column_name_list_with_order";
        
        public AstColumnNameListWithOrder(params AstColumnOrdered[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstColumnNameListWithOrder(Position position, params AstColumnOrdered[] items) : 
                base(position, items)
        {
        }
        
        public AstColumnNameListWithOrder(ParserRuleContext ctx, params AstColumnOrdered[] items) : 
                base(ctx, items)
        {
        }
        
        public AstColumnNameListWithOrder(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameListWithOrder(this);
        }
        
        /// <summary>
        /// column_name_list_with_order
        /// 	 : column_ordered  (COMMA  column_ordered)*
        /// </summary>
        public static AstColumnNameListWithOrder New(ParserRuleContext ctx, params AstColumnOrdered[] items)
        {
            return new AstColumnNameListWithOrder(ctx, items);
        }
        
        /// <summary>
        /// column_name_list_with_order
        /// 	 : column_ordered  (COMMA  column_ordered)*
        /// </summary>
        public static AstColumnNameListWithOrder New(Position position, params AstColumnOrdered[] items)
        {
            return new AstColumnNameListWithOrder(position, items);
        }
        
        /// <summary>
        /// column_name_list_with_order
        /// 	 : column_ordered  (COMMA  column_ordered)*
        /// </summary>
        public static AstColumnNameListWithOrder New(params AstColumnOrdered[] items)
        {
            return new AstColumnNameListWithOrder(Position.Default, items);
        }
        
        public static AstColumnNameListWithOrder? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// column_or_argument_ids
    /// 	 : column_or_argument_id  (COMMA?  column_or_argument_id)*
    /// </summary>
    public partial class AstColumnOrArgumentIds : AstRuleList<AstColumnOrArgumentId>
    {
        
        private static string _ruleValue = "column_or_argument_id  (COMMA?  column_or_argument_id)*\r\n";
        
        private static string _ruleName = "column_or_argument_ids";
        
        public AstColumnOrArgumentIds(params AstColumnOrArgumentId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstColumnOrArgumentIds(Position position, params AstColumnOrArgumentId[] items) : 
                base(position, items)
        {
        }
        
        public AstColumnOrArgumentIds(ParserRuleContext ctx, params AstColumnOrArgumentId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstColumnOrArgumentIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnOrArgumentIds(this);
        }
        
        /// <summary>
        /// column_or_argument_ids
        /// 	 : column_or_argument_id  (COMMA?  column_or_argument_id)*
        /// </summary>
        public static AstColumnOrArgumentIds New(ParserRuleContext ctx, params AstColumnOrArgumentId[] items)
        {
            return new AstColumnOrArgumentIds(ctx, items);
        }
        
        /// <summary>
        /// column_or_argument_ids
        /// 	 : column_or_argument_id  (COMMA?  column_or_argument_id)*
        /// </summary>
        public static AstColumnOrArgumentIds New(Position position, params AstColumnOrArgumentId[] items)
        {
            return new AstColumnOrArgumentIds(position, items);
        }
        
        /// <summary>
        /// column_or_argument_ids
        /// 	 : column_or_argument_id  (COMMA?  column_or_argument_id)*
        /// </summary>
        public static AstColumnOrArgumentIds New(params AstColumnOrArgumentId[] items)
        {
            return new AstColumnOrArgumentIds(Position.Default, items);
        }
        
        public static AstColumnOrArgumentIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// decimals
    /// 	 : decimal  (COMMA  decimal)+
    /// </summary>
    public partial class AstDecimals : AstRuleList<AstDecimal>
    {
        
        private static string _ruleValue = "decimal  (COMMA  decimal)+\r\n";
        
        private static string _ruleName = "decimals";
        
        public AstDecimals(params AstDecimal[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDecimals(Position position, params AstDecimal[] items) : 
                base(position, items)
        {
        }
        
        public AstDecimals(ParserRuleContext ctx, params AstDecimal[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDecimals(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimals(this);
        }
        
        /// <summary>
        /// decimals
        /// 	 : decimal  (COMMA  decimal)+
        /// </summary>
        public static AstDecimals New(ParserRuleContext ctx, params AstDecimal[] items)
        {
            return new AstDecimals(ctx, items);
        }
        
        /// <summary>
        /// decimals
        /// 	 : decimal  (COMMA  decimal)+
        /// </summary>
        public static AstDecimals New(Position position, params AstDecimal[] items)
        {
            return new AstDecimals(position, items);
        }
        
        /// <summary>
        /// decimals
        /// 	 : decimal  (COMMA  decimal)+
        /// </summary>
        public static AstDecimals New(params AstDecimal[] items)
        {
            return new AstDecimals(Position.Default, items);
        }
        
        public static AstDecimals? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// schema_trigger_refs
    /// 	 : schema_trigger_ref  (COMMA  schema_trigger_ref)*
    /// </summary>
    public partial class AstSchemaTriggerRefs : AstRuleList<AstSchemaTriggerRef>
    {
        
        private static string _ruleValue = "schema_trigger_ref  (COMMA  schema_trigger_ref)*\r\n";
        
        private static string _ruleName = "schema_trigger_refs";
        
        public AstSchemaTriggerRefs(params AstSchemaTriggerRef[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSchemaTriggerRefs(Position position, params AstSchemaTriggerRef[] items) : 
                base(position, items)
        {
        }
        
        public AstSchemaTriggerRefs(ParserRuleContext ctx, params AstSchemaTriggerRef[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSchemaTriggerRefs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaTriggerRefs(this);
        }
        
        /// <summary>
        /// schema_trigger_refs
        /// 	 : schema_trigger_ref  (COMMA  schema_trigger_ref)*
        /// </summary>
        public static AstSchemaTriggerRefs New(ParserRuleContext ctx, params AstSchemaTriggerRef[] items)
        {
            return new AstSchemaTriggerRefs(ctx, items);
        }
        
        /// <summary>
        /// schema_trigger_refs
        /// 	 : schema_trigger_ref  (COMMA  schema_trigger_ref)*
        /// </summary>
        public static AstSchemaTriggerRefs New(Position position, params AstSchemaTriggerRef[] items)
        {
            return new AstSchemaTriggerRefs(position, items);
        }
        
        /// <summary>
        /// schema_trigger_refs
        /// 	 : schema_trigger_ref  (COMMA  schema_trigger_ref)*
        /// </summary>
        public static AstSchemaTriggerRefs New(params AstSchemaTriggerRef[] items)
        {
            return new AstSchemaTriggerRefs(Position.Default, items);
        }
        
        public static AstSchemaTriggerRefs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// ids
    /// 	 : id_  (COMMA  id_)*
    /// </summary>
    public partial class AstIds : AstRuleList<AstId>
    {
        
        private static string _ruleValue = "id_  (COMMA  id_)*\r\n";
        
        private static string _ruleName = "ids";
        
        public AstIds(params AstId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstIds(Position position, params AstId[] items) : 
                base(position, items)
        {
        }
        
        public AstIds(ParserRuleContext ctx, params AstId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIds(this);
        }
        
        /// <summary>
        /// ids
        /// 	 : id_  (COMMA  id_)*
        /// </summary>
        public static AstIds New(ParserRuleContext ctx, params AstId[] items)
        {
            return new AstIds(ctx, items);
        }
        
        /// <summary>
        /// ids
        /// 	 : id_  (COMMA  id_)*
        /// </summary>
        public static AstIds New(Position position, params AstId[] items)
        {
            return new AstIds(position, items);
        }
        
        /// <summary>
        /// ids
        /// 	 : id_  (COMMA  id_)*
        /// </summary>
        public static AstIds New(params AstId[] items)
        {
            return new AstIds(Position.Default, items);
        }
        
        public static AstIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// update_statistics_options
    /// 	 : WITH  update_statistics_option  (COMMA  update_statistics_option)*
    /// </summary>
    public partial class AstUpdateStatisticsOptions : AstRuleList<AstUpdateStatisticsOption>
    {
        
        private static string _ruleValue = "WITH  update_statistics_option  (COMMA  update_statistics_option)*\r\n";
        
        private static string _ruleName = "update_statistics_options";
        
        public AstUpdateStatisticsOptions(params AstUpdateStatisticsOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstUpdateStatisticsOptions(Position position, params AstUpdateStatisticsOption[] items) : 
                base(position, items)
        {
        }
        
        public AstUpdateStatisticsOptions(ParserRuleContext ctx, params AstUpdateStatisticsOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstUpdateStatisticsOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatisticsOptions(this);
        }
        
        /// <summary>
        /// update_statistics_options
        /// 	 : WITH  update_statistics_option  (COMMA  update_statistics_option)*
        /// </summary>
        public static AstUpdateStatisticsOptions New(ParserRuleContext ctx, params AstUpdateStatisticsOption[] items)
        {
            return new AstUpdateStatisticsOptions(ctx, items);
        }
        
        /// <summary>
        /// update_statistics_options
        /// 	 : WITH  update_statistics_option  (COMMA  update_statistics_option)*
        /// </summary>
        public static AstUpdateStatisticsOptions New(Position position, params AstUpdateStatisticsOption[] items)
        {
            return new AstUpdateStatisticsOptions(position, items);
        }
        
        /// <summary>
        /// update_statistics_options
        /// 	 : WITH  update_statistics_option  (COMMA  update_statistics_option)*
        /// </summary>
        public static AstUpdateStatisticsOptions New(params AstUpdateStatisticsOption[] items)
        {
            return new AstUpdateStatisticsOptions(Position.Default, items);
        }
        
        public static AstUpdateStatisticsOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// function_options
    /// 	 : WITH  function_option  (COMMA  function_option)*
    /// </summary>
    public partial class AstFunctionOptions : AstRuleList<AstFunctionOption>
    {
        
        private static string _ruleValue = "WITH  function_option  (COMMA  function_option)*\r\n";
        
        private static string _ruleName = "function_options";
        
        public AstFunctionOptions(params AstFunctionOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFunctionOptions(Position position, params AstFunctionOption[] items) : 
                base(position, items)
        {
        }
        
        public AstFunctionOptions(ParserRuleContext ctx, params AstFunctionOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFunctionOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFunctionOptions(this);
        }
        
        /// <summary>
        /// function_options
        /// 	 : WITH  function_option  (COMMA  function_option)*
        /// </summary>
        public static AstFunctionOptions New(ParserRuleContext ctx, params AstFunctionOption[] items)
        {
            return new AstFunctionOptions(ctx, items);
        }
        
        /// <summary>
        /// function_options
        /// 	 : WITH  function_option  (COMMA  function_option)*
        /// </summary>
        public static AstFunctionOptions New(Position position, params AstFunctionOption[] items)
        {
            return new AstFunctionOptions(position, items);
        }
        
        /// <summary>
        /// function_options
        /// 	 : WITH  function_option  (COMMA  function_option)*
        /// </summary>
        public static AstFunctionOptions New(params AstFunctionOption[] items)
        {
            return new AstFunctionOptions(Position.Default, items);
        }
        
        public static AstFunctionOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// procedure_params
    /// 	 : procedure_param  (COMMA  procedure_param)*
    /// </summary>
    public partial class AstProcedureParams : AstRuleList<AstProcedureParam>
    {
        
        private static string _ruleValue = "procedure_param  (COMMA  procedure_param)*\r\n";
        
        private static string _ruleName = "procedure_params";
        
        public AstProcedureParams(params AstProcedureParam[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstProcedureParams(Position position, params AstProcedureParam[] items) : 
                base(position, items)
        {
        }
        
        public AstProcedureParams(ParserRuleContext ctx, params AstProcedureParam[] items) : 
                base(ctx, items)
        {
        }
        
        public AstProcedureParams(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParams(this);
        }
        
        /// <summary>
        /// procedure_params
        /// 	 : procedure_param  (COMMA  procedure_param)*
        /// </summary>
        public static AstProcedureParams New(ParserRuleContext ctx, params AstProcedureParam[] items)
        {
            return new AstProcedureParams(ctx, items);
        }
        
        /// <summary>
        /// procedure_params
        /// 	 : procedure_param  (COMMA  procedure_param)*
        /// </summary>
        public static AstProcedureParams New(Position position, params AstProcedureParam[] items)
        {
            return new AstProcedureParams(position, items);
        }
        
        /// <summary>
        /// procedure_params
        /// 	 : procedure_param  (COMMA  procedure_param)*
        /// </summary>
        public static AstProcedureParams New(params AstProcedureParam[] items)
        {
            return new AstProcedureParams(Position.Default, items);
        }
        
        public static AstProcedureParams? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// dml_trigger_options
    /// 	 : WITH  dml_trigger_option  (COMMA  dml_trigger_option)*
    /// </summary>
    public partial class AstDmlTriggerOptions : AstRuleList<AstDmlTriggerOption>
    {
        
        private static string _ruleValue = "WITH  dml_trigger_option  (COMMA  dml_trigger_option)*\r\n";
        
        private static string _ruleName = "dml_trigger_options";
        
        public AstDmlTriggerOptions(params AstDmlTriggerOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDmlTriggerOptions(Position position, params AstDmlTriggerOption[] items) : 
                base(position, items)
        {
        }
        
        public AstDmlTriggerOptions(ParserRuleContext ctx, params AstDmlTriggerOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDmlTriggerOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOptions(this);
        }
        
        /// <summary>
        /// dml_trigger_options
        /// 	 : WITH  dml_trigger_option  (COMMA  dml_trigger_option)*
        /// </summary>
        public static AstDmlTriggerOptions New(ParserRuleContext ctx, params AstDmlTriggerOption[] items)
        {
            return new AstDmlTriggerOptions(ctx, items);
        }
        
        /// <summary>
        /// dml_trigger_options
        /// 	 : WITH  dml_trigger_option  (COMMA  dml_trigger_option)*
        /// </summary>
        public static AstDmlTriggerOptions New(Position position, params AstDmlTriggerOption[] items)
        {
            return new AstDmlTriggerOptions(position, items);
        }
        
        /// <summary>
        /// dml_trigger_options
        /// 	 : WITH  dml_trigger_option  (COMMA  dml_trigger_option)*
        /// </summary>
        public static AstDmlTriggerOptions New(params AstDmlTriggerOption[] items)
        {
            return new AstDmlTriggerOptions(Position.Default, items);
        }
        
        public static AstDmlTriggerOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// table_type_indices
    /// 	 : table_type_indice  (COMMA  table_type_indice)*
    /// </summary>
    public partial class AstTableTypeIndices : AstRuleList<AstTableTypeIndice>
    {
        
        private static string _ruleValue = "table_type_indice  (COMMA  table_type_indice)*\r\n";
        
        private static string _ruleName = "table_type_indices";
        
        public AstTableTypeIndices(params AstTableTypeIndice[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTableTypeIndices(Position position, params AstTableTypeIndice[] items) : 
                base(position, items)
        {
        }
        
        public AstTableTypeIndices(ParserRuleContext ctx, params AstTableTypeIndice[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTableTypeIndices(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeIndices(this);
        }
        
        /// <summary>
        /// table_type_indices
        /// 	 : table_type_indice  (COMMA  table_type_indice)*
        /// </summary>
        public static AstTableTypeIndices New(ParserRuleContext ctx, params AstTableTypeIndice[] items)
        {
            return new AstTableTypeIndices(ctx, items);
        }
        
        /// <summary>
        /// table_type_indices
        /// 	 : table_type_indice  (COMMA  table_type_indice)*
        /// </summary>
        public static AstTableTypeIndices New(Position position, params AstTableTypeIndice[] items)
        {
            return new AstTableTypeIndices(position, items);
        }
        
        /// <summary>
        /// table_type_indices
        /// 	 : table_type_indice  (COMMA  table_type_indice)*
        /// </summary>
        public static AstTableTypeIndices New(params AstTableTypeIndice[] items)
        {
            return new AstTableTypeIndices(Position.Default, items);
        }
        
        public static AstTableTypeIndices? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// dml_trigger_operations
    /// 	 : dml_trigger_operation  (COMMA  dml_trigger_operation)*
    /// </summary>
    public partial class AstDmlTriggerOperations : AstRuleList<AstDmlTriggerOperation>
    {
        
        private static string _ruleValue = "dml_trigger_operation  (COMMA  dml_trigger_operation)*\r\n";
        
        private static string _ruleName = "dml_trigger_operations";
        
        public AstDmlTriggerOperations(params AstDmlTriggerOperation[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDmlTriggerOperations(Position position, params AstDmlTriggerOperation[] items) : 
                base(position, items)
        {
        }
        
        public AstDmlTriggerOperations(ParserRuleContext ctx, params AstDmlTriggerOperation[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDmlTriggerOperations(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDmlTriggerOperations(this);
        }
        
        /// <summary>
        /// dml_trigger_operations
        /// 	 : dml_trigger_operation  (COMMA  dml_trigger_operation)*
        /// </summary>
        public static AstDmlTriggerOperations New(ParserRuleContext ctx, params AstDmlTriggerOperation[] items)
        {
            return new AstDmlTriggerOperations(ctx, items);
        }
        
        /// <summary>
        /// dml_trigger_operations
        /// 	 : dml_trigger_operation  (COMMA  dml_trigger_operation)*
        /// </summary>
        public static AstDmlTriggerOperations New(Position position, params AstDmlTriggerOperation[] items)
        {
            return new AstDmlTriggerOperations(position, items);
        }
        
        /// <summary>
        /// dml_trigger_operations
        /// 	 : dml_trigger_operation  (COMMA  dml_trigger_operation)*
        /// </summary>
        public static AstDmlTriggerOperations New(params AstDmlTriggerOperation[] items)
        {
            return new AstDmlTriggerOperations(Position.Default, items);
        }
        
        public static AstDmlTriggerOperations? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// procedure_options
    /// 	 : WITH  procedure_option  (COMMA  procedure_option)*
    /// </summary>
    public partial class AstProcedureOptions : AstRuleList<AstProcedureOption>
    {
        
        private static string _ruleValue = "WITH  procedure_option  (COMMA  procedure_option)*\r\n";
        
        private static string _ruleName = "procedure_options";
        
        public AstProcedureOptions(params AstProcedureOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstProcedureOptions(Position position, params AstProcedureOption[] items) : 
                base(position, items)
        {
        }
        
        public AstProcedureOptions(ParserRuleContext ctx, params AstProcedureOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstProcedureOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureOptions(this);
        }
        
        /// <summary>
        /// procedure_options
        /// 	 : WITH  procedure_option  (COMMA  procedure_option)*
        /// </summary>
        public static AstProcedureOptions New(ParserRuleContext ctx, params AstProcedureOption[] items)
        {
            return new AstProcedureOptions(ctx, items);
        }
        
        /// <summary>
        /// procedure_options
        /// 	 : WITH  procedure_option  (COMMA  procedure_option)*
        /// </summary>
        public static AstProcedureOptions New(Position position, params AstProcedureOption[] items)
        {
            return new AstProcedureOptions(position, items);
        }
        
        /// <summary>
        /// procedure_options
        /// 	 : WITH  procedure_option  (COMMA  procedure_option)*
        /// </summary>
        public static AstProcedureOptions New(params AstProcedureOption[] items)
        {
            return new AstProcedureOptions(Position.Default, items);
        }
        
        public static AstProcedureOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// logical_device_ids
    /// 	 : logical_device_id  (COMMA  logical_device_id)*
    /// </summary>
    public partial class AstLogicalDeviceIds : AstRuleList<AstLogicalDeviceId>
    {
        
        private static string _ruleValue = "logical_device_id  (COMMA  logical_device_id)*\r\n";
        
        private static string _ruleName = "logical_device_ids";
        
        public AstLogicalDeviceIds(params AstLogicalDeviceId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstLogicalDeviceIds(Position position, params AstLogicalDeviceId[] items) : 
                base(position, items)
        {
        }
        
        public AstLogicalDeviceIds(ParserRuleContext ctx, params AstLogicalDeviceId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstLogicalDeviceIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLogicalDeviceIds(this);
        }
        
        /// <summary>
        /// logical_device_ids
        /// 	 : logical_device_id  (COMMA  logical_device_id)*
        /// </summary>
        public static AstLogicalDeviceIds New(ParserRuleContext ctx, params AstLogicalDeviceId[] items)
        {
            return new AstLogicalDeviceIds(ctx, items);
        }
        
        /// <summary>
        /// logical_device_ids
        /// 	 : logical_device_id  (COMMA  logical_device_id)*
        /// </summary>
        public static AstLogicalDeviceIds New(Position position, params AstLogicalDeviceId[] items)
        {
            return new AstLogicalDeviceIds(position, items);
        }
        
        /// <summary>
        /// logical_device_ids
        /// 	 : logical_device_id  (COMMA  logical_device_id)*
        /// </summary>
        public static AstLogicalDeviceIds New(params AstLogicalDeviceId[] items)
        {
            return new AstLogicalDeviceIds(Position.Default, items);
        }
        
        public static AstLogicalDeviceIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// disk_tape_url_values
    /// 	 : disk_tape_url_value  (COMMA  disk_tape_url_value)*
    /// </summary>
    public partial class AstDiskTapeUrlValues : AstRuleList<AstDiskTapeUrlValue>
    {
        
        private static string _ruleValue = "disk_tape_url_value  (COMMA  disk_tape_url_value)*\r\n";
        
        private static string _ruleName = "disk_tape_url_values";
        
        public AstDiskTapeUrlValues(params AstDiskTapeUrlValue[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDiskTapeUrlValues(Position position, params AstDiskTapeUrlValue[] items) : 
                base(position, items)
        {
        }
        
        public AstDiskTapeUrlValues(ParserRuleContext ctx, params AstDiskTapeUrlValue[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDiskTapeUrlValues(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiskTapeUrlValues(this);
        }
        
        /// <summary>
        /// disk_tape_url_values
        /// 	 : disk_tape_url_value  (COMMA  disk_tape_url_value)*
        /// </summary>
        public static AstDiskTapeUrlValues New(ParserRuleContext ctx, params AstDiskTapeUrlValue[] items)
        {
            return new AstDiskTapeUrlValues(ctx, items);
        }
        
        /// <summary>
        /// disk_tape_url_values
        /// 	 : disk_tape_url_value  (COMMA  disk_tape_url_value)*
        /// </summary>
        public static AstDiskTapeUrlValues New(Position position, params AstDiskTapeUrlValue[] items)
        {
            return new AstDiskTapeUrlValues(position, items);
        }
        
        /// <summary>
        /// disk_tape_url_values
        /// 	 : disk_tape_url_value  (COMMA  disk_tape_url_value)*
        /// </summary>
        public static AstDiskTapeUrlValues New(params AstDiskTapeUrlValue[] items)
        {
            return new AstDiskTapeUrlValues(Position.Default, items);
        }
        
        public static AstDiskTapeUrlValues? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// xml_index_options
    /// 	 : WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstXmlIndexOptions : AstRuleList<AstXmlIndexOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "xml_index_options";
        
        public AstXmlIndexOptions(params AstXmlIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstXmlIndexOptions(Position position, params AstXmlIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstXmlIndexOptions(ParserRuleContext ctx, params AstXmlIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstXmlIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlIndexOptions(this);
        }
        
        /// <summary>
        /// xml_index_options
        /// 	 : WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*  RR_BRACKET
        /// </summary>
        public static AstXmlIndexOptions New(ParserRuleContext ctx, params AstXmlIndexOption[] items)
        {
            return new AstXmlIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// xml_index_options
        /// 	 : WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*  RR_BRACKET
        /// </summary>
        public static AstXmlIndexOptions New(Position position, params AstXmlIndexOption[] items)
        {
            return new AstXmlIndexOptions(position, items);
        }
        
        /// <summary>
        /// xml_index_options
        /// 	 : WITH  LR_BRACKET  xml_index_option  (COMMA  xml_index_option)*  RR_BRACKET
        /// </summary>
        public static AstXmlIndexOptions New(params AstXmlIndexOption[] items)
        {
            return new AstXmlIndexOptions(Position.Default, items);
        }
        
        public static AstXmlIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_columnstore_index_options
    /// 	 : WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstCreateColumnstoreIndexOptions : AstRuleList<AstColumnstoreIndexOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*  R" +
            "R_BRACKET\r\n";
        
        private static string _ruleName = "create_columnstore_index_options";
        
        public AstCreateColumnstoreIndexOptions(params AstColumnstoreIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateColumnstoreIndexOptions(Position position, params AstColumnstoreIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateColumnstoreIndexOptions(ParserRuleContext ctx, params AstColumnstoreIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateColumnstoreIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndexOptions(this);
        }
        
        /// <summary>
        /// create_columnstore_index_options
        /// 	 : WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*  RR_BRACKET
        /// </summary>
        public static AstCreateColumnstoreIndexOptions New(ParserRuleContext ctx, params AstColumnstoreIndexOption[] items)
        {
            return new AstCreateColumnstoreIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// create_columnstore_index_options
        /// 	 : WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*  RR_BRACKET
        /// </summary>
        public static AstCreateColumnstoreIndexOptions New(Position position, params AstColumnstoreIndexOption[] items)
        {
            return new AstCreateColumnstoreIndexOptions(position, items);
        }
        
        /// <summary>
        /// create_columnstore_index_options
        /// 	 : WITH  LR_BRACKET  columnstore_index_option  (COMMA  columnstore_index_option)*  RR_BRACKET
        /// </summary>
        public static AstCreateColumnstoreIndexOptions New(params AstColumnstoreIndexOption[] items)
        {
            return new AstCreateColumnstoreIndexOptions(Position.Default, items);
        }
        
        public static AstCreateColumnstoreIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// single_partition_rebuild_index_options
    /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition_rebuild_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstSinglePartitionRebuildIndexOptions : AstRuleList<AstSinglePartitionRebuildIndexOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition" +
            "_rebuild_index_option)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "single_partition_rebuild_index_options";
        
        public AstSinglePartitionRebuildIndexOptions(params AstSinglePartitionRebuildIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSinglePartitionRebuildIndexOptions(Position position, params AstSinglePartitionRebuildIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstSinglePartitionRebuildIndexOptions(ParserRuleContext ctx, params AstSinglePartitionRebuildIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSinglePartitionRebuildIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSinglePartitionRebuildIndexOptions(this);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_options
        /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition_rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public static AstSinglePartitionRebuildIndexOptions New(ParserRuleContext ctx, params AstSinglePartitionRebuildIndexOption[] items)
        {
            return new AstSinglePartitionRebuildIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_options
        /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition_rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public static AstSinglePartitionRebuildIndexOptions New(Position position, params AstSinglePartitionRebuildIndexOption[] items)
        {
            return new AstSinglePartitionRebuildIndexOptions(position, items);
        }
        
        /// <summary>
        /// single_partition_rebuild_index_options
        /// 	 : WITH  LR_BRACKET  single_partition_rebuild_index_option  (COMMA  single_partition_rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public static AstSinglePartitionRebuildIndexOptions New(params AstSinglePartitionRebuildIndexOption[] items)
        {
            return new AstSinglePartitionRebuildIndexOptions(Position.Default, items);
        }
        
        public static AstSinglePartitionRebuildIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// rebuild_index_options
    /// 	 : WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstRebuildIndexOptions : AstRuleList<AstRebuildIndexOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*  RR_BRACKE" +
            "T\r\n";
        
        private static string _ruleName = "rebuild_index_options";
        
        public AstRebuildIndexOptions(params AstRebuildIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstRebuildIndexOptions(Position position, params AstRebuildIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstRebuildIndexOptions(ParserRuleContext ctx, params AstRebuildIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstRebuildIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRebuildIndexOptions(this);
        }
        
        /// <summary>
        /// rebuild_index_options
        /// 	 : WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public static AstRebuildIndexOptions New(ParserRuleContext ctx, params AstRebuildIndexOption[] items)
        {
            return new AstRebuildIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// rebuild_index_options
        /// 	 : WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public static AstRebuildIndexOptions New(Position position, params AstRebuildIndexOption[] items)
        {
            return new AstRebuildIndexOptions(position, items);
        }
        
        /// <summary>
        /// rebuild_index_options
        /// 	 : WITH  LR_BRACKET  rebuild_index_option  (COMMA  rebuild_index_option)*  RR_BRACKET
        /// </summary>
        public static AstRebuildIndexOptions New(params AstRebuildIndexOption[] items)
        {
            return new AstRebuildIndexOptions(Position.Default, items);
        }
        
        public static AstRebuildIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// full_table_ref_columns
    /// 	 : full_table_ref_column  (COMMA  full_table_ref_column)*
    /// </summary>
    public partial class AstFullTableRefColumns : AstRuleList<AstFullTableRefColumn>
    {
        
        private static string _ruleValue = "full_table_ref_column  (COMMA  full_table_ref_column)*\r\n";
        
        private static string _ruleName = "full_table_ref_columns";
        
        public AstFullTableRefColumns(params AstFullTableRefColumn[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFullTableRefColumns(Position position, params AstFullTableRefColumn[] items) : 
                base(position, items)
        {
        }
        
        public AstFullTableRefColumns(ParserRuleContext ctx, params AstFullTableRefColumn[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFullTableRefColumns(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullTableRefColumns(this);
        }
        
        /// <summary>
        /// full_table_ref_columns
        /// 	 : full_table_ref_column  (COMMA  full_table_ref_column)*
        /// </summary>
        public static AstFullTableRefColumns New(ParserRuleContext ctx, params AstFullTableRefColumn[] items)
        {
            return new AstFullTableRefColumns(ctx, items);
        }
        
        /// <summary>
        /// full_table_ref_columns
        /// 	 : full_table_ref_column  (COMMA  full_table_ref_column)*
        /// </summary>
        public static AstFullTableRefColumns New(Position position, params AstFullTableRefColumn[] items)
        {
            return new AstFullTableRefColumns(position, items);
        }
        
        /// <summary>
        /// full_table_ref_columns
        /// 	 : full_table_ref_column  (COMMA  full_table_ref_column)*
        /// </summary>
        public static AstFullTableRefColumns New(params AstFullTableRefColumn[] items)
        {
            return new AstFullTableRefColumns(Position.Default, items);
        }
        
        public static AstFullTableRefColumns? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// set_index_options
    /// 	 : SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstSetIndexOptions : AstRuleList<AstSetIndexOption>
    {
        
        private static string _ruleValue = "SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "set_index_options";
        
        public AstSetIndexOptions(params AstSetIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSetIndexOptions(Position position, params AstSetIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstSetIndexOptions(ParserRuleContext ctx, params AstSetIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSetIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetIndexOptions(this);
        }
        
        /// <summary>
        /// set_index_options
        /// 	 : SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*  RR_BRACKET
        /// </summary>
        public static AstSetIndexOptions New(ParserRuleContext ctx, params AstSetIndexOption[] items)
        {
            return new AstSetIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// set_index_options
        /// 	 : SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*  RR_BRACKET
        /// </summary>
        public static AstSetIndexOptions New(Position position, params AstSetIndexOption[] items)
        {
            return new AstSetIndexOptions(position, items);
        }
        
        /// <summary>
        /// set_index_options
        /// 	 : SET  LR_BRACKET  set_index_option  (COMMA  set_index_option)*  RR_BRACKET
        /// </summary>
        public static AstSetIndexOptions New(params AstSetIndexOption[] items)
        {
            return new AstSetIndexOptions(Position.Default, items);
        }
        
        public static AstSetIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// reorganize_options
    /// 	 : WITH  LR_BRACKET  (reorganize_option  (COMMA  reorganize_option)*)  RR_BRACKET
    /// </summary>
    public partial class AstReorganizeOptions : AstRuleList<AstReorganizeOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  (reorganize_option  (COMMA  reorganize_option)*)  RR_BRACKET\r\n";
        
        private static string _ruleName = "reorganize_options";
        
        public AstReorganizeOptions(params AstReorganizeOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstReorganizeOptions(Position position, params AstReorganizeOption[] items) : 
                base(position, items)
        {
        }
        
        public AstReorganizeOptions(ParserRuleContext ctx, params AstReorganizeOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstReorganizeOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizeOptions(this);
        }
        
        /// <summary>
        /// reorganize_options
        /// 	 : WITH  LR_BRACKET  (reorganize_option  (COMMA  reorganize_option)*)  RR_BRACKET
        /// </summary>
        public static AstReorganizeOptions New(ParserRuleContext ctx, params AstReorganizeOption[] items)
        {
            return new AstReorganizeOptions(ctx, items);
        }
        
        /// <summary>
        /// reorganize_options
        /// 	 : WITH  LR_BRACKET  (reorganize_option  (COMMA  reorganize_option)*)  RR_BRACKET
        /// </summary>
        public static AstReorganizeOptions New(Position position, params AstReorganizeOption[] items)
        {
            return new AstReorganizeOptions(position, items);
        }
        
        /// <summary>
        /// reorganize_options
        /// 	 : WITH  LR_BRACKET  (reorganize_option  (COMMA  reorganize_option)*)  RR_BRACKET
        /// </summary>
        public static AstReorganizeOptions New(params AstReorganizeOption[] items)
        {
            return new AstReorganizeOptions(Position.Default, items);
        }
        
        public static AstReorganizeOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// private_keys
    /// 	 : privatekey  (COMMA  privatekey)*
    /// </summary>
    public partial class AstPrivateKeys : AstRuleList<AstPrivatekey>
    {
        
        private static string _ruleValue = "privatekey  (COMMA  privatekey)*\r\n";
        
        private static string _ruleName = "private_keys";
        
        public AstPrivateKeys(params AstPrivatekey[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstPrivateKeys(Position position, params AstPrivatekey[] items) : 
                base(position, items)
        {
        }
        
        public AstPrivateKeys(ParserRuleContext ctx, params AstPrivatekey[] items) : 
                base(ctx, items)
        {
        }
        
        public AstPrivateKeys(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrivateKeys(this);
        }
        
        /// <summary>
        /// private_keys
        /// 	 : privatekey  (COMMA  privatekey)*
        /// </summary>
        public static AstPrivateKeys New(ParserRuleContext ctx, params AstPrivatekey[] items)
        {
            return new AstPrivateKeys(ctx, items);
        }
        
        /// <summary>
        /// private_keys
        /// 	 : privatekey  (COMMA  privatekey)*
        /// </summary>
        public static AstPrivateKeys New(Position position, params AstPrivatekey[] items)
        {
            return new AstPrivateKeys(position, items);
        }
        
        /// <summary>
        /// private_keys
        /// 	 : privatekey  (COMMA  privatekey)*
        /// </summary>
        public static AstPrivateKeys New(params AstPrivatekey[] items)
        {
            return new AstPrivateKeys(Position.Default, items);
        }
        
        public static AstPrivateKeys? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// server_audit_file_specs
    /// 	 : server_audit_file_spec  (COMMA  server_audit_file_spec)*
    /// </summary>
    public partial class AstServerAuditFileSpecs : AstRuleList<AstServerAuditFileSpec>
    {
        
        private static string _ruleValue = "server_audit_file_spec  (COMMA  server_audit_file_spec)*\r\n";
        
        private static string _ruleName = "server_audit_file_specs";
        
        public AstServerAuditFileSpecs(params AstServerAuditFileSpec[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstServerAuditFileSpecs(Position position, params AstServerAuditFileSpec[] items) : 
                base(position, items)
        {
        }
        
        public AstServerAuditFileSpecs(ParserRuleContext ctx, params AstServerAuditFileSpec[] items) : 
                base(ctx, items)
        {
        }
        
        public AstServerAuditFileSpecs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditFileSpecs(this);
        }
        
        /// <summary>
        /// server_audit_file_specs
        /// 	 : server_audit_file_spec  (COMMA  server_audit_file_spec)*
        /// </summary>
        public static AstServerAuditFileSpecs New(ParserRuleContext ctx, params AstServerAuditFileSpec[] items)
        {
            return new AstServerAuditFileSpecs(ctx, items);
        }
        
        /// <summary>
        /// server_audit_file_specs
        /// 	 : server_audit_file_spec  (COMMA  server_audit_file_spec)*
        /// </summary>
        public static AstServerAuditFileSpecs New(Position position, params AstServerAuditFileSpec[] items)
        {
            return new AstServerAuditFileSpecs(position, items);
        }
        
        /// <summary>
        /// server_audit_file_specs
        /// 	 : server_audit_file_spec  (COMMA  server_audit_file_spec)*
        /// </summary>
        public static AstServerAuditFileSpecs New(params AstServerAuditFileSpec[] items)
        {
            return new AstServerAuditFileSpecs(Position.Default, items);
        }
        
        public static AstServerAuditFileSpecs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_del_events
    /// 	 : create_or_alter_event_session_del_event  (COMMA  create_or_alter_event_session_del_event)*
    /// </summary>
    public partial class AstCreateOrAlterEventSessionDelEvents : AstRuleList<AstCreateOrAlterEventSessionDelEvent>
    {
        
        private static string _ruleValue = "create_or_alter_event_session_del_event  (COMMA  create_or_alter_event_session_de" +
            "l_event)*\r\n";
        
        private static string _ruleName = "create_or_alter_event_session_del_events";
        
        public AstCreateOrAlterEventSessionDelEvents(params AstCreateOrAlterEventSessionDelEvent[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateOrAlterEventSessionDelEvents(Position position, params AstCreateOrAlterEventSessionDelEvent[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateOrAlterEventSessionDelEvents(ParserRuleContext ctx, params AstCreateOrAlterEventSessionDelEvent[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateOrAlterEventSessionDelEvents(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionDelEvents(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_events
        /// 	 : create_or_alter_event_session_del_event  (COMMA  create_or_alter_event_session_del_event)*
        /// </summary>
        public static AstCreateOrAlterEventSessionDelEvents New(ParserRuleContext ctx, params AstCreateOrAlterEventSessionDelEvent[] items)
        {
            return new AstCreateOrAlterEventSessionDelEvents(ctx, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_events
        /// 	 : create_or_alter_event_session_del_event  (COMMA  create_or_alter_event_session_del_event)*
        /// </summary>
        public static AstCreateOrAlterEventSessionDelEvents New(Position position, params AstCreateOrAlterEventSessionDelEvent[] items)
        {
            return new AstCreateOrAlterEventSessionDelEvents(position, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_events
        /// 	 : create_or_alter_event_session_del_event  (COMMA  create_or_alter_event_session_del_event)*
        /// </summary>
        public static AstCreateOrAlterEventSessionDelEvents New(params AstCreateOrAlterEventSessionDelEvent[] items)
        {
            return new AstCreateOrAlterEventSessionDelEvents(Position.Default, items);
        }
        
        public static AstCreateOrAlterEventSessionDelEvents? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_add_events
    /// 	 : create_or_alter_event_session_add_event  (COMMA  create_or_alter_event_session_add_event)*
    /// </summary>
    public partial class AstCreateOrAlterEventSessionAddEvents : AstRuleList<AstCreateOrAlterEventSessionAddEvent>
    {
        
        private static string _ruleValue = "create_or_alter_event_session_add_event  (COMMA  create_or_alter_event_session_ad" +
            "d_event)*\r\n";
        
        private static string _ruleName = "create_or_alter_event_session_add_events";
        
        public AstCreateOrAlterEventSessionAddEvents(params AstCreateOrAlterEventSessionAddEvent[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateOrAlterEventSessionAddEvents(Position position, params AstCreateOrAlterEventSessionAddEvent[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateOrAlterEventSessionAddEvents(ParserRuleContext ctx, params AstCreateOrAlterEventSessionAddEvent[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateOrAlterEventSessionAddEvents(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionAddEvents(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_events
        /// 	 : create_or_alter_event_session_add_event  (COMMA  create_or_alter_event_session_add_event)*
        /// </summary>
        public static AstCreateOrAlterEventSessionAddEvents New(ParserRuleContext ctx, params AstCreateOrAlterEventSessionAddEvent[] items)
        {
            return new AstCreateOrAlterEventSessionAddEvents(ctx, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_events
        /// 	 : create_or_alter_event_session_add_event  (COMMA  create_or_alter_event_session_add_event)*
        /// </summary>
        public static AstCreateOrAlterEventSessionAddEvents New(Position position, params AstCreateOrAlterEventSessionAddEvent[] items)
        {
            return new AstCreateOrAlterEventSessionAddEvents(position, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_events
        /// 	 : create_or_alter_event_session_add_event  (COMMA  create_or_alter_event_session_add_event)*
        /// </summary>
        public static AstCreateOrAlterEventSessionAddEvents New(params AstCreateOrAlterEventSessionAddEvent[] items)
        {
            return new AstCreateOrAlterEventSessionAddEvents(Position.Default, items);
        }
        
        public static AstCreateOrAlterEventSessionAddEvents? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_add_targets
    /// 	 : create_or_alter_event_session_add_target+
    /// </summary>
    public partial class AstCreateOrAlterEventSessionAddTargets : AstRuleList<AstCreateOrAlterEventSessionAddTarget>
    {
        
        private static string _ruleValue = "create_or_alter_event_session_add_target+\r\n";
        
        private static string _ruleName = "create_or_alter_event_session_add_targets";
        
        public AstCreateOrAlterEventSessionAddTargets(params AstCreateOrAlterEventSessionAddTarget[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateOrAlterEventSessionAddTargets(Position position, params AstCreateOrAlterEventSessionAddTarget[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateOrAlterEventSessionAddTargets(ParserRuleContext ctx, params AstCreateOrAlterEventSessionAddTarget[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateOrAlterEventSessionAddTargets(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionAddTargets(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_targets
        /// 	 : create_or_alter_event_session_add_target+
        /// </summary>
        public static AstCreateOrAlterEventSessionAddTargets New(ParserRuleContext ctx, params AstCreateOrAlterEventSessionAddTarget[] items)
        {
            return new AstCreateOrAlterEventSessionAddTargets(ctx, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_targets
        /// 	 : create_or_alter_event_session_add_target+
        /// </summary>
        public static AstCreateOrAlterEventSessionAddTargets New(Position position, params AstCreateOrAlterEventSessionAddTarget[] items)
        {
            return new AstCreateOrAlterEventSessionAddTargets(position, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_targets
        /// 	 : create_or_alter_event_session_add_target+
        /// </summary>
        public static AstCreateOrAlterEventSessionAddTargets New(params AstCreateOrAlterEventSessionAddTarget[] items)
        {
            return new AstCreateOrAlterEventSessionAddTargets(Position.Default, items);
        }
        
        public static AstCreateOrAlterEventSessionAddTargets? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_del_targets
    /// 	 : create_or_alter_event_session_del_target+
    /// </summary>
    public partial class AstCreateOrAlterEventSessionDelTargets : AstRuleList<AstCreateOrAlterEventSessionDelTarget>
    {
        
        private static string _ruleValue = "create_or_alter_event_session_del_target+\r\n";
        
        private static string _ruleName = "create_or_alter_event_session_del_targets";
        
        public AstCreateOrAlterEventSessionDelTargets(params AstCreateOrAlterEventSessionDelTarget[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateOrAlterEventSessionDelTargets(Position position, params AstCreateOrAlterEventSessionDelTarget[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateOrAlterEventSessionDelTargets(ParserRuleContext ctx, params AstCreateOrAlterEventSessionDelTarget[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateOrAlterEventSessionDelTargets(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionDelTargets(this);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_targets
        /// 	 : create_or_alter_event_session_del_target+
        /// </summary>
        public static AstCreateOrAlterEventSessionDelTargets New(ParserRuleContext ctx, params AstCreateOrAlterEventSessionDelTarget[] items)
        {
            return new AstCreateOrAlterEventSessionDelTargets(ctx, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_targets
        /// 	 : create_or_alter_event_session_del_target+
        /// </summary>
        public static AstCreateOrAlterEventSessionDelTargets New(Position position, params AstCreateOrAlterEventSessionDelTarget[] items)
        {
            return new AstCreateOrAlterEventSessionDelTargets(position, items);
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_targets
        /// 	 : create_or_alter_event_session_del_target+
        /// </summary>
        public static AstCreateOrAlterEventSessionDelTargets New(params AstCreateOrAlterEventSessionDelTarget[] items)
        {
            return new AstCreateOrAlterEventSessionDelTargets(Position.Default, items);
        }
        
        public static AstCreateOrAlterEventSessionDelTargets? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// event_session_actions
    /// 	 : event_session_action  (COMMA  event_session_action)*
    /// </summary>
    public partial class AstEventSessionActions : AstRuleList<AstEventSessionAction>
    {
        
        private static string _ruleValue = "event_session_action  (COMMA  event_session_action)*\r\n";
        
        private static string _ruleName = "event_session_actions";
        
        public AstEventSessionActions(params AstEventSessionAction[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstEventSessionActions(Position position, params AstEventSessionAction[] items) : 
                base(position, items)
        {
        }
        
        public AstEventSessionActions(ParserRuleContext ctx, params AstEventSessionAction[] items) : 
                base(ctx, items)
        {
        }
        
        public AstEventSessionActions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionActions(this);
        }
        
        /// <summary>
        /// event_session_actions
        /// 	 : event_session_action  (COMMA  event_session_action)*
        /// </summary>
        public static AstEventSessionActions New(ParserRuleContext ctx, params AstEventSessionAction[] items)
        {
            return new AstEventSessionActions(ctx, items);
        }
        
        /// <summary>
        /// event_session_actions
        /// 	 : event_session_action  (COMMA  event_session_action)*
        /// </summary>
        public static AstEventSessionActions New(Position position, params AstEventSessionAction[] items)
        {
            return new AstEventSessionActions(position, items);
        }
        
        /// <summary>
        /// event_session_actions
        /// 	 : event_session_action  (COMMA  event_session_action)*
        /// </summary>
        public static AstEventSessionActions New(params AstEventSessionAction[] items)
        {
            return new AstEventSessionActions(Position.Default, items);
        }
        
        public static AstEventSessionActions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// set_attributes
    /// 	 : set_attribute  (COMMA  set_attribute)*
    /// </summary>
    public partial class AstSetAttributes : AstRuleList<AstSetAttribute>
    {
        
        private static string _ruleValue = "set_attribute  (COMMA  set_attribute)*\r\n";
        
        private static string _ruleName = "set_attributes";
        
        public AstSetAttributes(params AstSetAttribute[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSetAttributes(Position position, params AstSetAttribute[] items) : 
                base(position, items)
        {
        }
        
        public AstSetAttributes(ParserRuleContext ctx, params AstSetAttribute[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSetAttributes(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetAttributes(this);
        }
        
        /// <summary>
        /// set_attributes
        /// 	 : set_attribute  (COMMA  set_attribute)*
        /// </summary>
        public static AstSetAttributes New(ParserRuleContext ctx, params AstSetAttribute[] items)
        {
            return new AstSetAttributes(ctx, items);
        }
        
        /// <summary>
        /// set_attributes
        /// 	 : set_attribute  (COMMA  set_attribute)*
        /// </summary>
        public static AstSetAttributes New(Position position, params AstSetAttribute[] items)
        {
            return new AstSetAttributes(position, items);
        }
        
        /// <summary>
        /// set_attributes
        /// 	 : set_attribute  (COMMA  set_attribute)*
        /// </summary>
        public static AstSetAttributes New(params AstSetAttribute[] items)
        {
            return new AstSetAttributes(Position.Default, items);
        }
        
        public static AstSetAttributes? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// pwd_strategies
    /// 	 : pwd_strategy+
    /// </summary>
    public partial class AstPwdStrategies : AstRuleList<AstPwdStrategy>
    {
        
        private static string _ruleValue = "pwd_strategy+\r\n";
        
        private static string _ruleName = "pwd_strategies";
        
        public AstPwdStrategies(params AstPwdStrategy[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstPwdStrategies(Position position, params AstPwdStrategy[] items) : 
                base(position, items)
        {
        }
        
        public AstPwdStrategies(ParserRuleContext ctx, params AstPwdStrategy[] items) : 
                base(ctx, items)
        {
        }
        
        public AstPwdStrategies(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPwdStrategies(this);
        }
        
        /// <summary>
        /// pwd_strategies
        /// 	 : pwd_strategy+
        /// </summary>
        public static AstPwdStrategies New(ParserRuleContext ctx, params AstPwdStrategy[] items)
        {
            return new AstPwdStrategies(ctx, items);
        }
        
        /// <summary>
        /// pwd_strategies
        /// 	 : pwd_strategy+
        /// </summary>
        public static AstPwdStrategies New(Position position, params AstPwdStrategy[] items)
        {
            return new AstPwdStrategies(position, items);
        }
        
        /// <summary>
        /// pwd_strategies
        /// 	 : pwd_strategy+
        /// </summary>
        public static AstPwdStrategies New(params AstPwdStrategy[] items)
        {
            return new AstPwdStrategies(Position.Default, items);
        }
        
        public static AstPwdStrategies? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// event_module_package_action_refs
    /// 	 : event_module_package_action_ref  (COMMA  event_module_package_action_ref)
    /// </summary>
    public partial class AstEventModulePackageActionRefs : AstRuleList<AstEventModulePackageActionRef>
    {
        
        private static string _ruleValue = "event_module_package_action_ref  (COMMA  event_module_package_action_ref)\r\n";
        
        private static string _ruleName = "event_module_package_action_refs";
        
        public AstEventModulePackageActionRefs(params AstEventModulePackageActionRef[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstEventModulePackageActionRefs(Position position, params AstEventModulePackageActionRef[] items) : 
                base(position, items)
        {
        }
        
        public AstEventModulePackageActionRefs(ParserRuleContext ctx, params AstEventModulePackageActionRef[] items) : 
                base(ctx, items)
        {
        }
        
        public AstEventModulePackageActionRefs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventModulePackageActionRefs(this);
        }
        
        /// <summary>
        /// event_module_package_action_refs
        /// 	 : event_module_package_action_ref  (COMMA  event_module_package_action_ref)
        /// </summary>
        public static AstEventModulePackageActionRefs New(ParserRuleContext ctx, params AstEventModulePackageActionRef[] items)
        {
            return new AstEventModulePackageActionRefs(ctx, items);
        }
        
        /// <summary>
        /// event_module_package_action_refs
        /// 	 : event_module_package_action_ref  (COMMA  event_module_package_action_ref)
        /// </summary>
        public static AstEventModulePackageActionRefs New(Position position, params AstEventModulePackageActionRef[] items)
        {
            return new AstEventModulePackageActionRefs(position, items);
        }
        
        /// <summary>
        /// event_module_package_action_refs
        /// 	 : event_module_package_action_ref  (COMMA  event_module_package_action_ref)
        /// </summary>
        public static AstEventModulePackageActionRefs New(params AstEventModulePackageActionRef[] items)
        {
            return new AstEventModulePackageActionRefs(Position.Default, items);
        }
        
        public static AstEventModulePackageActionRefs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// resumable_index_options
    /// 	 : WITH  LR_BRACKET  (resumable_index_option  (COMMA  resumable_index_option)*)  RR_BRACKET
    /// </summary>
    public partial class AstResumableIndexOptions : AstRuleList<AstResumableIndexOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  (resumable_index_option  (COMMA  resumable_index_option)*)  RR_" +
            "BRACKET\r\n";
        
        private static string _ruleName = "resumable_index_options";
        
        public AstResumableIndexOptions(params AstResumableIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstResumableIndexOptions(Position position, params AstResumableIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstResumableIndexOptions(ParserRuleContext ctx, params AstResumableIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstResumableIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitResumableIndexOptions(this);
        }
        
        /// <summary>
        /// resumable_index_options
        /// 	 : WITH  LR_BRACKET  (resumable_index_option  (COMMA  resumable_index_option)*)  RR_BRACKET
        /// </summary>
        public static AstResumableIndexOptions New(ParserRuleContext ctx, params AstResumableIndexOption[] items)
        {
            return new AstResumableIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// resumable_index_options
        /// 	 : WITH  LR_BRACKET  (resumable_index_option  (COMMA  resumable_index_option)*)  RR_BRACKET
        /// </summary>
        public static AstResumableIndexOptions New(Position position, params AstResumableIndexOption[] items)
        {
            return new AstResumableIndexOptions(position, items);
        }
        
        /// <summary>
        /// resumable_index_options
        /// 	 : WITH  LR_BRACKET  (resumable_index_option  (COMMA  resumable_index_option)*)  RR_BRACKET
        /// </summary>
        public static AstResumableIndexOptions New(params AstResumableIndexOption[] items)
        {
            return new AstResumableIndexOptions(Position.Default, items);
        }
        
        public static AstResumableIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// relational_index_options
    /// 	 : relational_index_option  (COMMA  relational_index_option)*
    /// </summary>
    public partial class AstRelationalIndexOptions : AstRuleList<AstRelationalIndexOption>
    {
        
        private static string _ruleValue = "relational_index_option  (COMMA  relational_index_option)*\r\n";
        
        private static string _ruleName = "relational_index_options";
        
        public AstRelationalIndexOptions(params AstRelationalIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstRelationalIndexOptions(Position position, params AstRelationalIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstRelationalIndexOptions(ParserRuleContext ctx, params AstRelationalIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstRelationalIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRelationalIndexOptions(this);
        }
        
        /// <summary>
        /// relational_index_options
        /// 	 : relational_index_option  (COMMA  relational_index_option)*
        /// </summary>
        public static AstRelationalIndexOptions New(ParserRuleContext ctx, params AstRelationalIndexOption[] items)
        {
            return new AstRelationalIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// relational_index_options
        /// 	 : relational_index_option  (COMMA  relational_index_option)*
        /// </summary>
        public static AstRelationalIndexOptions New(Position position, params AstRelationalIndexOption[] items)
        {
            return new AstRelationalIndexOptions(position, items);
        }
        
        /// <summary>
        /// relational_index_options
        /// 	 : relational_index_option  (COMMA  relational_index_option)*
        /// </summary>
        public static AstRelationalIndexOptions New(params AstRelationalIndexOption[] items)
        {
            return new AstRelationalIndexOptions(Position.Default, items);
        }
        
        public static AstRelationalIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// database_files
    /// 	 : database_file  (COMMA  database_file)*
    /// </summary>
    public partial class AstDatabaseFiles : AstRuleList<AstDatabaseFile>
    {
        
        private static string _ruleValue = "database_file  (COMMA  database_file)*\r\n";
        
        private static string _ruleName = "database_files";
        
        public AstDatabaseFiles(params AstDatabaseFile[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDatabaseFiles(Position position, params AstDatabaseFile[] items) : 
                base(position, items)
        {
        }
        
        public AstDatabaseFiles(ParserRuleContext ctx, params AstDatabaseFile[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDatabaseFiles(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFiles(this);
        }
        
        /// <summary>
        /// database_files
        /// 	 : database_file  (COMMA  database_file)*
        /// </summary>
        public static AstDatabaseFiles New(ParserRuleContext ctx, params AstDatabaseFile[] items)
        {
            return new AstDatabaseFiles(ctx, items);
        }
        
        /// <summary>
        /// database_files
        /// 	 : database_file  (COMMA  database_file)*
        /// </summary>
        public static AstDatabaseFiles New(Position position, params AstDatabaseFile[] items)
        {
            return new AstDatabaseFiles(position, items);
        }
        
        /// <summary>
        /// database_files
        /// 	 : database_file  (COMMA  database_file)*
        /// </summary>
        public static AstDatabaseFiles New(params AstDatabaseFile[] items)
        {
            return new AstDatabaseFiles(Position.Default, items);
        }
        
        public static AstDatabaseFiles? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// output_dml_list_elems
    /// 	 : output_dml_list_elem  (COMMA  output_dml_list_elem)*
    /// </summary>
    public partial class AstOutputDmlListElems : AstRuleList<AstOutputDmlListElem>
    {
        
        private static string _ruleValue = "output_dml_list_elem  (COMMA  output_dml_list_elem)*\r\n";
        
        private static string _ruleName = "output_dml_list_elems";
        
        public AstOutputDmlListElems(params AstOutputDmlListElem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstOutputDmlListElems(Position position, params AstOutputDmlListElem[] items) : 
                base(position, items)
        {
        }
        
        public AstOutputDmlListElems(ParserRuleContext ctx, params AstOutputDmlListElem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstOutputDmlListElems(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElems(this);
        }
        
        /// <summary>
        /// output_dml_list_elems
        /// 	 : output_dml_list_elem  (COMMA  output_dml_list_elem)*
        /// </summary>
        public static AstOutputDmlListElems New(ParserRuleContext ctx, params AstOutputDmlListElem[] items)
        {
            return new AstOutputDmlListElems(ctx, items);
        }
        
        /// <summary>
        /// output_dml_list_elems
        /// 	 : output_dml_list_elem  (COMMA  output_dml_list_elem)*
        /// </summary>
        public static AstOutputDmlListElems New(Position position, params AstOutputDmlListElem[] items)
        {
            return new AstOutputDmlListElems(position, items);
        }
        
        /// <summary>
        /// output_dml_list_elems
        /// 	 : output_dml_list_elem  (COMMA  output_dml_list_elem)*
        /// </summary>
        public static AstOutputDmlListElems New(params AstOutputDmlListElem[] items)
        {
            return new AstOutputDmlListElems(Position.Default, items);
        }
        
        public static AstOutputDmlListElems? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// update_elems
    /// 	 : update_elem  (COMMA  update_elem)*
    /// </summary>
    public partial class AstUpdateElems : AstRuleList<AstUpdateElem>
    {
        
        private static string _ruleValue = "update_elem  (COMMA  update_elem)*\r\n";
        
        private static string _ruleName = "update_elems";
        
        public AstUpdateElems(params AstUpdateElem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstUpdateElems(Position position, params AstUpdateElem[] items) : 
                base(position, items)
        {
        }
        
        public AstUpdateElems(ParserRuleContext ctx, params AstUpdateElem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstUpdateElems(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElems(this);
        }
        
        /// <summary>
        /// update_elems
        /// 	 : update_elem  (COMMA  update_elem)*
        /// </summary>
        public static AstUpdateElems New(ParserRuleContext ctx, params AstUpdateElem[] items)
        {
            return new AstUpdateElems(ctx, items);
        }
        
        /// <summary>
        /// update_elems
        /// 	 : update_elem  (COMMA  update_elem)*
        /// </summary>
        public static AstUpdateElems New(Position position, params AstUpdateElem[] items)
        {
            return new AstUpdateElems(position, items);
        }
        
        /// <summary>
        /// update_elems
        /// 	 : update_elem  (COMMA  update_elem)*
        /// </summary>
        public static AstUpdateElems New(params AstUpdateElem[] items)
        {
            return new AstUpdateElems(Position.Default, items);
        }
        
        public static AstUpdateElems? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_security_policy_adds
    /// 	 : create_security_policy_add  (COMMA?  create_security_policy_add)*
    /// </summary>
    public partial class AstCreateSecurityPolicyAdds : AstRuleList<AstCreateSecurityPolicyAdd>
    {
        
        private static string _ruleValue = "create_security_policy_add  (COMMA?  create_security_policy_add)*\r\n";
        
        private static string _ruleName = "create_security_policy_adds";
        
        public AstCreateSecurityPolicyAdds(params AstCreateSecurityPolicyAdd[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateSecurityPolicyAdds(Position position, params AstCreateSecurityPolicyAdd[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateSecurityPolicyAdds(ParserRuleContext ctx, params AstCreateSecurityPolicyAdd[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateSecurityPolicyAdds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicyAdds(this);
        }
        
        /// <summary>
        /// create_security_policy_adds
        /// 	 : create_security_policy_add  (COMMA?  create_security_policy_add)*
        /// </summary>
        public static AstCreateSecurityPolicyAdds New(ParserRuleContext ctx, params AstCreateSecurityPolicyAdd[] items)
        {
            return new AstCreateSecurityPolicyAdds(ctx, items);
        }
        
        /// <summary>
        /// create_security_policy_adds
        /// 	 : create_security_policy_add  (COMMA?  create_security_policy_add)*
        /// </summary>
        public static AstCreateSecurityPolicyAdds New(Position position, params AstCreateSecurityPolicyAdd[] items)
        {
            return new AstCreateSecurityPolicyAdds(position, items);
        }
        
        /// <summary>
        /// create_security_policy_adds
        /// 	 : create_security_policy_add  (COMMA?  create_security_policy_add)*
        /// </summary>
        public static AstCreateSecurityPolicyAdds New(params AstCreateSecurityPolicyAdd[] items)
        {
            return new AstCreateSecurityPolicyAdds(Position.Default, items);
        }
        
        public static AstCreateSecurityPolicyAdds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// update_elem_merges
    /// 	 : update_elem_merge  (COMMA  update_elem_merge)*
    /// </summary>
    public partial class AstUpdateElemMerges : AstRuleList<AstUpdateElemMerge>
    {
        
        private static string _ruleValue = "update_elem_merge  (COMMA  update_elem_merge)*\r\n";
        
        private static string _ruleName = "update_elem_merges";
        
        public AstUpdateElemMerges(params AstUpdateElemMerge[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstUpdateElemMerges(Position position, params AstUpdateElemMerge[] items) : 
                base(position, items)
        {
        }
        
        public AstUpdateElemMerges(ParserRuleContext ctx, params AstUpdateElemMerge[] items) : 
                base(ctx, items)
        {
        }
        
        public AstUpdateElemMerges(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateElemMerges(this);
        }
        
        /// <summary>
        /// update_elem_merges
        /// 	 : update_elem_merge  (COMMA  update_elem_merge)*
        /// </summary>
        public static AstUpdateElemMerges New(ParserRuleContext ctx, params AstUpdateElemMerge[] items)
        {
            return new AstUpdateElemMerges(ctx, items);
        }
        
        /// <summary>
        /// update_elem_merges
        /// 	 : update_elem_merge  (COMMA  update_elem_merge)*
        /// </summary>
        public static AstUpdateElemMerges New(Position position, params AstUpdateElemMerge[] items)
        {
            return new AstUpdateElemMerges(position, items);
        }
        
        /// <summary>
        /// update_elem_merges
        /// 	 : update_elem_merge  (COMMA  update_elem_merge)*
        /// </summary>
        public static AstUpdateElemMerges New(params AstUpdateElemMerge[] items)
        {
            return new AstUpdateElemMerges(Position.Default, items);
        }
        
        public static AstUpdateElemMerges? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// file_group_ids
    /// 	 : file_group_id  (COMMA  file_group_id)*
    /// </summary>
    public partial class AstFileGroupIds : AstRuleList<AstFileGroupId>
    {
        
        private static string _ruleValue = "file_group_id  (COMMA  file_group_id)*\r\n";
        
        private static string _ruleName = "file_group_ids";
        
        public AstFileGroupIds(params AstFileGroupId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFileGroupIds(Position position, params AstFileGroupId[] items) : 
                base(position, items)
        {
        }
        
        public AstFileGroupIds(ParserRuleContext ctx, params AstFileGroupId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFileGroupIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupIds(this);
        }
        
        /// <summary>
        /// file_group_ids
        /// 	 : file_group_id  (COMMA  file_group_id)*
        /// </summary>
        public static AstFileGroupIds New(ParserRuleContext ctx, params AstFileGroupId[] items)
        {
            return new AstFileGroupIds(ctx, items);
        }
        
        /// <summary>
        /// file_group_ids
        /// 	 : file_group_id  (COMMA  file_group_id)*
        /// </summary>
        public static AstFileGroupIds New(Position position, params AstFileGroupId[] items)
        {
            return new AstFileGroupIds(position, items);
        }
        
        /// <summary>
        /// file_group_ids
        /// 	 : file_group_id  (COMMA  file_group_id)*
        /// </summary>
        public static AstFileGroupIds New(params AstFileGroupId[] items)
        {
            return new AstFileGroupIds(Position.Default, items);
        }
        
        public static AstFileGroupIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// string_list
    /// 	 : stringtext  (COMMA  stringtext)*
    /// </summary>
    public partial class AstStringList : AstRuleList<AstStringtext>
    {
        
        private static string _ruleValue = "stringtext  (COMMA  stringtext)*\r\n";
        
        private static string _ruleName = "string_list";
        
        public AstStringList(params AstStringtext[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstStringList(Position position, params AstStringtext[] items) : 
                base(position, items)
        {
        }
        
        public AstStringList(ParserRuleContext ctx, params AstStringtext[] items) : 
                base(ctx, items)
        {
        }
        
        public AstStringList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitStringList(this);
        }
        
        /// <summary>
        /// string_list
        /// 	 : stringtext  (COMMA  stringtext)*
        /// </summary>
        public static AstStringList New(ParserRuleContext ctx, params AstStringtext[] items)
        {
            return new AstStringList(ctx, items);
        }
        
        /// <summary>
        /// string_list
        /// 	 : stringtext  (COMMA  stringtext)*
        /// </summary>
        public static AstStringList New(Position position, params AstStringtext[] items)
        {
            return new AstStringList(position, items);
        }
        
        /// <summary>
        /// string_list
        /// 	 : stringtext  (COMMA  stringtext)*
        /// </summary>
        public static AstStringList New(params AstStringtext[] items)
        {
            return new AstStringList(Position.Default, items);
        }
        
        public static AstStringList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// asymmetric_key_option
    /// 	 : WITH  PRIVATE  KEY  LR_BRACKET  by_password_crypt  (COMMA  by_password_crypt)?  RR_BRACKET
    /// </summary>
    public partial class AstAsymmetricKeyOption : AstRuleList<AstByPasswordCrypt>
    {
        
        private static string _ruleValue = "WITH  PRIVATE  KEY  LR_BRACKET  by_password_crypt  (COMMA  by_password_crypt)?  R" +
            "R_BRACKET\r\n";
        
        private static string _ruleName = "asymmetric_key_option";
        
        public AstAsymmetricKeyOption(params AstByPasswordCrypt[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstAsymmetricKeyOption(Position position, params AstByPasswordCrypt[] items) : 
                base(position, items)
        {
        }
        
        public AstAsymmetricKeyOption(ParserRuleContext ctx, params AstByPasswordCrypt[] items) : 
                base(ctx, items)
        {
        }
        
        public AstAsymmetricKeyOption(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsymmetricKeyOption(this);
        }
        
        /// <summary>
        /// asymmetric_key_option
        /// 	 : WITH  PRIVATE  KEY  LR_BRACKET  by_password_crypt  (COMMA  by_password_crypt)?  RR_BRACKET
        /// </summary>
        public static AstAsymmetricKeyOption New(ParserRuleContext ctx, params AstByPasswordCrypt[] items)
        {
            return new AstAsymmetricKeyOption(ctx, items);
        }
        
        /// <summary>
        /// asymmetric_key_option
        /// 	 : WITH  PRIVATE  KEY  LR_BRACKET  by_password_crypt  (COMMA  by_password_crypt)?  RR_BRACKET
        /// </summary>
        public static AstAsymmetricKeyOption New(Position position, params AstByPasswordCrypt[] items)
        {
            return new AstAsymmetricKeyOption(position, items);
        }
        
        /// <summary>
        /// asymmetric_key_option
        /// 	 : WITH  PRIVATE  KEY  LR_BRACKET  by_password_crypt  (COMMA  by_password_crypt)?  RR_BRACKET
        /// </summary>
        public static AstAsymmetricKeyOption New(params AstByPasswordCrypt[] items)
        {
            return new AstAsymmetricKeyOption(Position.Default, items);
        }
        
        public static AstAsymmetricKeyOption? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// assemblies
    /// 	 : assembly_id  (COMMA?  assembly_id)+
    /// </summary>
    public partial class AstAssemblies : AstRuleList<AstAssemblyId>
    {
        
        private static string _ruleValue = "assembly_id  (COMMA?  assembly_id)+\r\n";
        
        private static string _ruleName = "assemblies";
        
        public AstAssemblies(params AstAssemblyId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstAssemblies(Position position, params AstAssemblyId[] items) : 
                base(position, items)
        {
        }
        
        public AstAssemblies(ParserRuleContext ctx, params AstAssemblyId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstAssemblies(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblies(this);
        }
        
        /// <summary>
        /// assemblies
        /// 	 : assembly_id  (COMMA?  assembly_id)+
        /// </summary>
        public static AstAssemblies New(ParserRuleContext ctx, params AstAssemblyId[] items)
        {
            return new AstAssemblies(ctx, items);
        }
        
        /// <summary>
        /// assemblies
        /// 	 : assembly_id  (COMMA?  assembly_id)+
        /// </summary>
        public static AstAssemblies New(Position position, params AstAssemblyId[] items)
        {
            return new AstAssemblies(position, items);
        }
        
        /// <summary>
        /// assemblies
        /// 	 : assembly_id  (COMMA?  assembly_id)+
        /// </summary>
        public static AstAssemblies New(params AstAssemblyId[] items)
        {
            return new AstAssemblies(Position.Default, items);
        }
        
        public static AstAssemblies? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// decimal_string_locals
    /// 	 : decimal_string_local_id  (COMMA  decimal_string_local_id)*
    /// </summary>
    public partial class AstDecimalStringLocals : AstRuleList<AstDecimalStringLocalId>
    {
        
        private static string _ruleValue = "decimal_string_local_id  (COMMA  decimal_string_local_id)*\r\n";
        
        private static string _ruleName = "decimal_string_locals";
        
        public AstDecimalStringLocals(params AstDecimalStringLocalId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDecimalStringLocals(Position position, params AstDecimalStringLocalId[] items) : 
                base(position, items)
        {
        }
        
        public AstDecimalStringLocals(ParserRuleContext ctx, params AstDecimalStringLocalId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDecimalStringLocals(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalStringLocals(this);
        }
        
        /// <summary>
        /// decimal_string_locals
        /// 	 : decimal_string_local_id  (COMMA  decimal_string_local_id)*
        /// </summary>
        public static AstDecimalStringLocals New(ParserRuleContext ctx, params AstDecimalStringLocalId[] items)
        {
            return new AstDecimalStringLocals(ctx, items);
        }
        
        /// <summary>
        /// decimal_string_locals
        /// 	 : decimal_string_local_id  (COMMA  decimal_string_local_id)*
        /// </summary>
        public static AstDecimalStringLocals New(Position position, params AstDecimalStringLocalId[] items)
        {
            return new AstDecimalStringLocals(position, items);
        }
        
        /// <summary>
        /// decimal_string_locals
        /// 	 : decimal_string_local_id  (COMMA  decimal_string_local_id)*
        /// </summary>
        public static AstDecimalStringLocals New(params AstDecimalStringLocalId[] items)
        {
            return new AstDecimalStringLocals(Position.Default, items);
        }
        
        public static AstDecimalStringLocals? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// column_name_list
    /// 	 : id_  (COMMA  id_)*
    /// </summary>
    public partial class AstColumnNameList : AstRuleList<AstId>
    {
        
        private static string _ruleValue = "id_  (COMMA  id_)*\r\n";
        
        private static string _ruleName = "column_name_list";
        
        public AstColumnNameList(params AstId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstColumnNameList(Position position, params AstId[] items) : 
                base(position, items)
        {
        }
        
        public AstColumnNameList(ParserRuleContext ctx, params AstId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstColumnNameList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnNameList(this);
        }
        
        /// <summary>
        /// column_name_list
        /// 	 : id_  (COMMA  id_)*
        /// </summary>
        public static AstColumnNameList New(ParserRuleContext ctx, params AstId[] items)
        {
            return new AstColumnNameList(ctx, items);
        }
        
        /// <summary>
        /// column_name_list
        /// 	 : id_  (COMMA  id_)*
        /// </summary>
        public static AstColumnNameList New(Position position, params AstId[] items)
        {
            return new AstColumnNameList(position, items);
        }
        
        /// <summary>
        /// column_name_list
        /// 	 : id_  (COMMA  id_)*
        /// </summary>
        public static AstColumnNameList New(params AstId[] items)
        {
            return new AstColumnNameList(Position.Default, items);
        }
        
        public static AstColumnNameList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// insert_column_name_list
    /// 	 : insert_column_id  (COMMA  insert_column_id)*
    /// </summary>
    public partial class AstInsertColumnNameList : AstRuleList<AstInsertColumnId>
    {
        
        private static string _ruleValue = "insert_column_id  (COMMA  insert_column_id)*\r\n";
        
        private static string _ruleName = "insert_column_name_list";
        
        public AstInsertColumnNameList(params AstInsertColumnId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstInsertColumnNameList(Position position, params AstInsertColumnId[] items) : 
                base(position, items)
        {
        }
        
        public AstInsertColumnNameList(ParserRuleContext ctx, params AstInsertColumnId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstInsertColumnNameList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnNameList(this);
        }
        
        /// <summary>
        /// insert_column_name_list
        /// 	 : insert_column_id  (COMMA  insert_column_id)*
        /// </summary>
        public static AstInsertColumnNameList New(ParserRuleContext ctx, params AstInsertColumnId[] items)
        {
            return new AstInsertColumnNameList(ctx, items);
        }
        
        /// <summary>
        /// insert_column_name_list
        /// 	 : insert_column_id  (COMMA  insert_column_id)*
        /// </summary>
        public static AstInsertColumnNameList New(Position position, params AstInsertColumnId[] items)
        {
            return new AstInsertColumnNameList(position, items);
        }
        
        /// <summary>
        /// insert_column_name_list
        /// 	 : insert_column_id  (COMMA  insert_column_id)*
        /// </summary>
        public static AstInsertColumnNameList New(params AstInsertColumnId[] items)
        {
            return new AstInsertColumnNameList(Position.Default, items);
        }
        
        public static AstInsertColumnNameList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// insert_column_id
    /// 	 : (source = id_  DOT)*  column_id
    /// </summary>
    public partial class AstInsertColumnId : AstRuleList<AstId>
    {
        
        private static string _ruleValue = "(source = id_  DOT)*  column_id\r\n";
        
        private static string _ruleName = "insert_column_id";
        
        public AstInsertColumnId(params AstId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstInsertColumnId(Position position, params AstId[] items) : 
                base(position, items)
        {
        }
        
        public AstInsertColumnId(ParserRuleContext ctx, params AstId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstInsertColumnId(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertColumnId(this);
        }
        
        /// <summary>
        /// insert_column_id
        /// 	 : (source = id_  DOT)*  column_id
        /// </summary>
        public static AstInsertColumnId New(ParserRuleContext ctx, params AstId[] items)
        {
            return new AstInsertColumnId(ctx, items);
        }
        
        /// <summary>
        /// insert_column_id
        /// 	 : (source = id_  DOT)*  column_id
        /// </summary>
        public static AstInsertColumnId New(Position position, params AstId[] items)
        {
            return new AstInsertColumnId(position, items);
        }
        
        /// <summary>
        /// insert_column_id
        /// 	 : (source = id_  DOT)*  column_id
        /// </summary>
        public static AstInsertColumnId New(params AstId[] items)
        {
            return new AstInsertColumnId(Position.Default, items);
        }
        
        public static AstInsertColumnId? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// file_specs
    /// 	 : file_spec  (COMMA  file_spec)*
    /// </summary>
    public partial class AstFileSpecs : AstRuleList<AstFileSpec>
    {
        
        private static string _ruleValue = "file_spec  (COMMA  file_spec)*\r\n";
        
        private static string _ruleName = "file_specs";
        
        public AstFileSpecs(params AstFileSpec[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFileSpecs(Position position, params AstFileSpec[] items) : 
                base(position, items)
        {
        }
        
        public AstFileSpecs(ParserRuleContext ctx, params AstFileSpec[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFileSpecs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpecs(this);
        }
        
        /// <summary>
        /// file_specs
        /// 	 : file_spec  (COMMA  file_spec)*
        /// </summary>
        public static AstFileSpecs New(ParserRuleContext ctx, params AstFileSpec[] items)
        {
            return new AstFileSpecs(ctx, items);
        }
        
        /// <summary>
        /// file_specs
        /// 	 : file_spec  (COMMA  file_spec)*
        /// </summary>
        public static AstFileSpecs New(Position position, params AstFileSpec[] items)
        {
            return new AstFileSpecs(position, items);
        }
        
        /// <summary>
        /// file_specs
        /// 	 : file_spec  (COMMA  file_spec)*
        /// </summary>
        public static AstFileSpecs New(params AstFileSpec[] items)
        {
            return new AstFileSpecs(Position.Default, items);
        }
        
        public static AstFileSpecs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// expression_list
    /// 	 : expression  (COMMA  expression)*
    /// </summary>
    public partial class AstExpressionList : AstRuleList<AstExpression>
    {
        
        private static string _ruleValue = "expression  (COMMA  expression)*\r\n";
        
        private static string _ruleName = "expression_list";
        
        public AstExpressionList(params AstExpression[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExpressionList(Position position, params AstExpression[] items) : 
                base(position, items)
        {
        }
        
        public AstExpressionList(ParserRuleContext ctx, params AstExpression[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExpressionList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionList(this);
        }
        
        /// <summary>
        /// expression_list
        /// 	 : expression  (COMMA  expression)*
        /// </summary>
        public static AstExpressionList New(ParserRuleContext ctx, params AstExpression[] items)
        {
            return new AstExpressionList(ctx, items);
        }
        
        /// <summary>
        /// expression_list
        /// 	 : expression  (COMMA  expression)*
        /// </summary>
        public static AstExpressionList New(Position position, params AstExpression[] items)
        {
            return new AstExpressionList(position, items);
        }
        
        /// <summary>
        /// expression_list
        /// 	 : expression  (COMMA  expression)*
        /// </summary>
        public static AstExpressionList New(params AstExpression[] items)
        {
            return new AstExpressionList(Position.Default, items);
        }
        
        public static AstExpressionList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// change_tracking_option_items
    /// 	 : change_tracking_option_item  (change_tracking_option_item)*
    /// </summary>
    public partial class AstChangeTrackingOptionItems : AstRuleList<AstChangeTrackingOptionItem>
    {
        
        private static string _ruleValue = "change_tracking_option_item  (change_tracking_option_item)*\r\n";
        
        private static string _ruleName = "change_tracking_option_items";
        
        public AstChangeTrackingOptionItems(params AstChangeTrackingOptionItem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstChangeTrackingOptionItems(Position position, params AstChangeTrackingOptionItem[] items) : 
                base(position, items)
        {
        }
        
        public AstChangeTrackingOptionItems(ParserRuleContext ctx, params AstChangeTrackingOptionItem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstChangeTrackingOptionItems(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionItems(this);
        }
        
        /// <summary>
        /// change_tracking_option_items
        /// 	 : change_tracking_option_item  (change_tracking_option_item)*
        /// </summary>
        public static AstChangeTrackingOptionItems New(ParserRuleContext ctx, params AstChangeTrackingOptionItem[] items)
        {
            return new AstChangeTrackingOptionItems(ctx, items);
        }
        
        /// <summary>
        /// change_tracking_option_items
        /// 	 : change_tracking_option_item  (change_tracking_option_item)*
        /// </summary>
        public static AstChangeTrackingOptionItems New(Position position, params AstChangeTrackingOptionItem[] items)
        {
            return new AstChangeTrackingOptionItems(position, items);
        }
        
        /// <summary>
        /// change_tracking_option_items
        /// 	 : change_tracking_option_item  (change_tracking_option_item)*
        /// </summary>
        public static AstChangeTrackingOptionItems New(params AstChangeTrackingOptionItem[] items)
        {
            return new AstChangeTrackingOptionItems(Position.Default, items);
        }
        
        public static AstChangeTrackingOptionItems? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_server_audit_withs
    /// 	 : create_server_audit_with  (COMMA  create_server_audit_with)*
    /// </summary>
    public partial class AstCreateServerAuditWiths : AstRuleList<AstCreateServerAuditWith>
    {
        
        private static string _ruleValue = "create_server_audit_with  (COMMA  create_server_audit_with)*\r\n";
        
        private static string _ruleName = "create_server_audit_withs";
        
        public AstCreateServerAuditWiths(params AstCreateServerAuditWith[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateServerAuditWiths(Position position, params AstCreateServerAuditWith[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateServerAuditWiths(ParserRuleContext ctx, params AstCreateServerAuditWith[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateServerAuditWiths(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditWiths(this);
        }
        
        /// <summary>
        /// create_server_audit_withs
        /// 	 : create_server_audit_with  (COMMA  create_server_audit_with)*
        /// </summary>
        public static AstCreateServerAuditWiths New(ParserRuleContext ctx, params AstCreateServerAuditWith[] items)
        {
            return new AstCreateServerAuditWiths(ctx, items);
        }
        
        /// <summary>
        /// create_server_audit_withs
        /// 	 : create_server_audit_with  (COMMA  create_server_audit_with)*
        /// </summary>
        public static AstCreateServerAuditWiths New(Position position, params AstCreateServerAuditWith[] items)
        {
            return new AstCreateServerAuditWiths(position, items);
        }
        
        /// <summary>
        /// create_server_audit_withs
        /// 	 : create_server_audit_with  (COMMA  create_server_audit_with)*
        /// </summary>
        public static AstCreateServerAuditWiths New(params AstCreateServerAuditWith[] items)
        {
            return new AstCreateServerAuditWiths(Position.Default, items);
        }
        
        public static AstCreateServerAuditWiths? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// table_value_constructor
    /// 	 : VALUES  LR_BRACKET  expression_list  RR_BRACKET  (COMMA  LR_BRACKET  expression_list  RR_BRACKET)*
    /// </summary>
    public partial class AstTableValueConstructor : AstRuleList<AstExpressionList>
    {
        
        private static string _ruleValue = "VALUES  LR_BRACKET  expression_list  RR_BRACKET  (COMMA  LR_BRACKET  expression_l" +
            "ist  RR_BRACKET)*\r\n";
        
        private static string _ruleName = "table_value_constructor";
        
        public AstTableValueConstructor(params AstExpressionList[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTableValueConstructor(Position position, params AstExpressionList[] items) : 
                base(position, items)
        {
        }
        
        public AstTableValueConstructor(ParserRuleContext ctx, params AstExpressionList[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTableValueConstructor(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableValueConstructor(this);
        }
        
        /// <summary>
        /// table_value_constructor
        /// 	 : VALUES  LR_BRACKET  expression_list  RR_BRACKET  (COMMA  LR_BRACKET  expression_list  RR_BRACKET)*
        /// </summary>
        public static AstTableValueConstructor New(ParserRuleContext ctx, params AstExpressionList[] items)
        {
            return new AstTableValueConstructor(ctx, items);
        }
        
        /// <summary>
        /// table_value_constructor
        /// 	 : VALUES  LR_BRACKET  expression_list  RR_BRACKET  (COMMA  LR_BRACKET  expression_list  RR_BRACKET)*
        /// </summary>
        public static AstTableValueConstructor New(Position position, params AstExpressionList[] items)
        {
            return new AstTableValueConstructor(position, items);
        }
        
        /// <summary>
        /// table_value_constructor
        /// 	 : VALUES  LR_BRACKET  expression_list  RR_BRACKET  (COMMA  LR_BRACKET  expression_list  RR_BRACKET)*
        /// </summary>
        public static AstTableValueConstructor New(params AstExpressionList[] items)
        {
            return new AstTableValueConstructor(Position.Default, items);
        }
        
        public static AstTableValueConstructor? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// column_alias_list
    /// 	 : LR_BRACKET  alias += column_alias  (COMMA  alias += column_alias)*  RR_BRACKET
    /// </summary>
    public partial class AstColumnAliasList : AstRuleList<AstColumnAlias>
    {
        
        private static string _ruleValue = "LR_BRACKET  alias += column_alias  (COMMA  alias += column_alias)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "column_alias_list";
        
        public AstColumnAliasList(params AstColumnAlias[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstColumnAliasList(Position position, params AstColumnAlias[] items) : 
                base(position, items)
        {
        }
        
        public AstColumnAliasList(ParserRuleContext ctx, params AstColumnAlias[] items) : 
                base(ctx, items)
        {
        }
        
        public AstColumnAliasList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnAliasList(this);
        }
        
        /// <summary>
        /// column_alias_list
        /// 	 : LR_BRACKET  alias += column_alias  (COMMA  alias += column_alias)*  RR_BRACKET
        /// </summary>
        public static AstColumnAliasList New(ParserRuleContext ctx, params AstColumnAlias[] items)
        {
            return new AstColumnAliasList(ctx, items);
        }
        
        /// <summary>
        /// column_alias_list
        /// 	 : LR_BRACKET  alias += column_alias  (COMMA  alias += column_alias)*  RR_BRACKET
        /// </summary>
        public static AstColumnAliasList New(Position position, params AstColumnAlias[] items)
        {
            return new AstColumnAliasList(position, items);
        }
        
        /// <summary>
        /// column_alias_list
        /// 	 : LR_BRACKET  alias += column_alias  (COMMA  alias += column_alias)*  RR_BRACKET
        /// </summary>
        public static AstColumnAliasList New(params AstColumnAlias[] items)
        {
            return new AstColumnAliasList(Position.Default, items);
        }
        
        public static AstColumnAliasList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// index_values
    /// 	 : index_value  (COMMA  index_value)*
    /// </summary>
    public partial class AstIndexValues : AstRuleList<AstIndexValue>
    {
        
        private static string _ruleValue = "index_value  (COMMA  index_value)*\r\n";
        
        private static string _ruleName = "index_values";
        
        public AstIndexValues(params AstIndexValue[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstIndexValues(Position position, params AstIndexValue[] items) : 
                base(position, items)
        {
        }
        
        public AstIndexValues(ParserRuleContext ctx, params AstIndexValue[] items) : 
                base(ctx, items)
        {
        }
        
        public AstIndexValues(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIndexValues(this);
        }
        
        /// <summary>
        /// index_values
        /// 	 : index_value  (COMMA  index_value)*
        /// </summary>
        public static AstIndexValues New(ParserRuleContext ctx, params AstIndexValue[] items)
        {
            return new AstIndexValues(ctx, items);
        }
        
        /// <summary>
        /// index_values
        /// 	 : index_value  (COMMA  index_value)*
        /// </summary>
        public static AstIndexValues New(Position position, params AstIndexValue[] items)
        {
            return new AstIndexValues(position, items);
        }
        
        /// <summary>
        /// index_values
        /// 	 : index_value  (COMMA  index_value)*
        /// </summary>
        public static AstIndexValues New(params AstIndexValue[] items)
        {
            return new AstIndexValues(Position.Default, items);
        }
        
        public static AstIndexValues? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// expressions
    /// 	 : expression  (COMMA  expression)*
    /// </summary>
    public partial class AstExpressions : AstRuleList<AstExpression>
    {
        
        private static string _ruleValue = "expression  (COMMA  expression)*\r\n";
        
        private static string _ruleName = "expressions";
        
        public AstExpressions(params AstExpression[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExpressions(Position position, params AstExpression[] items) : 
                base(position, items)
        {
        }
        
        public AstExpressions(ParserRuleContext ctx, params AstExpression[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExpressions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressions(this);
        }
        
        /// <summary>
        /// expressions
        /// 	 : expression  (COMMA  expression)*
        /// </summary>
        public static AstExpressions New(ParserRuleContext ctx, params AstExpression[] items)
        {
            return new AstExpressions(ctx, items);
        }
        
        /// <summary>
        /// expressions
        /// 	 : expression  (COMMA  expression)*
        /// </summary>
        public static AstExpressions New(Position position, params AstExpression[] items)
        {
            return new AstExpressions(position, items);
        }
        
        /// <summary>
        /// expressions
        /// 	 : expression  (COMMA  expression)*
        /// </summary>
        public static AstExpressions New(params AstExpression[] items)
        {
            return new AstExpressions(Position.Default, items);
        }
        
        public static AstExpressions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// full_column_names
    /// 	 : LR_BRACKET  full_column_name  (COMMA  full_column_name)*  RR_BRACKET
    /// </summary>
    public partial class AstFullColumnNames : AstRuleList<AstFullColumnName>
    {
        
        private static string _ruleValue = "LR_BRACKET  full_column_name  (COMMA  full_column_name)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "full_column_names";
        
        public AstFullColumnNames(params AstFullColumnName[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFullColumnNames(Position position, params AstFullColumnName[] items) : 
                base(position, items)
        {
        }
        
        public AstFullColumnNames(ParserRuleContext ctx, params AstFullColumnName[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFullColumnNames(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNames(this);
        }
        
        /// <summary>
        /// full_column_names
        /// 	 : LR_BRACKET  full_column_name  (COMMA  full_column_name)*  RR_BRACKET
        /// </summary>
        public static AstFullColumnNames New(ParserRuleContext ctx, params AstFullColumnName[] items)
        {
            return new AstFullColumnNames(ctx, items);
        }
        
        /// <summary>
        /// full_column_names
        /// 	 : LR_BRACKET  full_column_name  (COMMA  full_column_name)*  RR_BRACKET
        /// </summary>
        public static AstFullColumnNames New(Position position, params AstFullColumnName[] items)
        {
            return new AstFullColumnNames(position, items);
        }
        
        /// <summary>
        /// full_column_names
        /// 	 : LR_BRACKET  full_column_name  (COMMA  full_column_name)*  RR_BRACKET
        /// </summary>
        public static AstFullColumnNames New(params AstFullColumnName[] items)
        {
            return new AstFullColumnNames(Position.Default, items);
        }
        
        public static AstFullColumnNames? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// expression_language
    /// 	 : expression  (COMMA  LANGUAGE  expression)?
    /// </summary>
    public partial class AstExpressionLanguage : AstRuleList<AstExpression>
    {
        
        private static string _ruleValue = "expression  (COMMA  LANGUAGE  expression)?\r\n";
        
        private static string _ruleName = "expression_language";
        
        public AstExpressionLanguage(params AstExpression[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExpressionLanguage(Position position, params AstExpression[] items) : 
                base(position, items)
        {
        }
        
        public AstExpressionLanguage(ParserRuleContext ctx, params AstExpression[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExpressionLanguage(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionLanguage(this);
        }
        
        /// <summary>
        /// expression_language
        /// 	 : expression  (COMMA  LANGUAGE  expression)?
        /// </summary>
        public static AstExpressionLanguage New(ParserRuleContext ctx, params AstExpression[] items)
        {
            return new AstExpressionLanguage(ctx, items);
        }
        
        /// <summary>
        /// expression_language
        /// 	 : expression  (COMMA  LANGUAGE  expression)?
        /// </summary>
        public static AstExpressionLanguage New(Position position, params AstExpression[] items)
        {
            return new AstExpressionLanguage(position, items);
        }
        
        /// <summary>
        /// expression_language
        /// 	 : expression  (COMMA  LANGUAGE  expression)?
        /// </summary>
        public static AstExpressionLanguage New(params AstExpression[] items)
        {
            return new AstExpressionLanguage(Position.Default, items);
        }
        
        public static AstExpressionLanguage? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// bulk_options
    /// 	 : bulk_option  (COMMA  bulk_option)*
    /// </summary>
    public partial class AstBulkOptions : AstRuleList<AstBulkOption>
    {
        
        private static string _ruleValue = "bulk_option  (COMMA  bulk_option)*\r\n";
        
        private static string _ruleName = "bulk_options";
        
        public AstBulkOptions(params AstBulkOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstBulkOptions(Position position, params AstBulkOption[] items) : 
                base(position, items)
        {
        }
        
        public AstBulkOptions(ParserRuleContext ctx, params AstBulkOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstBulkOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOptions(this);
        }
        
        /// <summary>
        /// bulk_options
        /// 	 : bulk_option  (COMMA  bulk_option)*
        /// </summary>
        public static AstBulkOptions New(ParserRuleContext ctx, params AstBulkOption[] items)
        {
            return new AstBulkOptions(ctx, items);
        }
        
        /// <summary>
        /// bulk_options
        /// 	 : bulk_option  (COMMA  bulk_option)*
        /// </summary>
        public static AstBulkOptions New(Position position, params AstBulkOption[] items)
        {
            return new AstBulkOptions(position, items);
        }
        
        /// <summary>
        /// bulk_options
        /// 	 : bulk_option  (COMMA  bulk_option)*
        /// </summary>
        public static AstBulkOptions New(params AstBulkOption[] items)
        {
            return new AstBulkOptions(Position.Default, items);
        }
        
        public static AstBulkOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// full_column_name_list
    /// 	 : full_column_name  (COMMA  full_column_name)*
    /// </summary>
    public partial class AstFullColumnNameList : AstRuleList<AstFullColumnName>
    {
        
        private static string _ruleValue = "full_column_name  (COMMA  full_column_name)*\r\n";
        
        private static string _ruleName = "full_column_name_list";
        
        public AstFullColumnNameList(params AstFullColumnName[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFullColumnNameList(Position position, params AstFullColumnName[] items) : 
                base(position, items)
        {
        }
        
        public AstFullColumnNameList(ParserRuleContext ctx, params AstFullColumnName[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFullColumnNameList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFullColumnNameList(this);
        }
        
        /// <summary>
        /// full_column_name_list
        /// 	 : full_column_name  (COMMA  full_column_name)*
        /// </summary>
        public static AstFullColumnNameList New(ParserRuleContext ctx, params AstFullColumnName[] items)
        {
            return new AstFullColumnNameList(ctx, items);
        }
        
        /// <summary>
        /// full_column_name_list
        /// 	 : full_column_name  (COMMA  full_column_name)*
        /// </summary>
        public static AstFullColumnNameList New(Position position, params AstFullColumnName[] items)
        {
            return new AstFullColumnNameList(position, items);
        }
        
        /// <summary>
        /// full_column_name_list
        /// 	 : full_column_name  (COMMA  full_column_name)*
        /// </summary>
        public static AstFullColumnNameList New(params AstFullColumnName[] items)
        {
            return new AstFullColumnNameList(Position.Default, items);
        }
        
        public static AstFullColumnNameList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// schema_declaration
    /// 	 : column_declaration  (COMMA  column_declaration)*
    /// </summary>
    public partial class AstSchemaDeclaration : AstRuleList<AstColumnDeclaration>
    {
        
        private static string _ruleValue = "column_declaration  (COMMA  column_declaration)*\r\n";
        
        private static string _ruleName = "schema_declaration";
        
        public AstSchemaDeclaration(params AstColumnDeclaration[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSchemaDeclaration(Position position, params AstColumnDeclaration[] items) : 
                base(position, items)
        {
        }
        
        public AstSchemaDeclaration(ParserRuleContext ctx, params AstColumnDeclaration[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSchemaDeclaration(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaDeclaration(this);
        }
        
        /// <summary>
        /// schema_declaration
        /// 	 : column_declaration  (COMMA  column_declaration)*
        /// </summary>
        public static AstSchemaDeclaration New(ParserRuleContext ctx, params AstColumnDeclaration[] items)
        {
            return new AstSchemaDeclaration(ctx, items);
        }
        
        /// <summary>
        /// schema_declaration
        /// 	 : column_declaration  (COMMA  column_declaration)*
        /// </summary>
        public static AstSchemaDeclaration New(Position position, params AstColumnDeclaration[] items)
        {
            return new AstSchemaDeclaration(position, items);
        }
        
        /// <summary>
        /// schema_declaration
        /// 	 : column_declaration  (COMMA  column_declaration)*
        /// </summary>
        public static AstSchemaDeclaration New(params AstColumnDeclaration[] items)
        {
            return new AstSchemaDeclaration(Position.Default, items);
        }
        
        public static AstSchemaDeclaration? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// json_declaration
    /// 	 : json_column_declaration  (COMMA  json_column_declaration)*
    /// </summary>
    public partial class AstJsonDeclaration : AstRuleList<AstJsonColumnDeclaration>
    {
        
        private static string _ruleValue = "json_column_declaration  (COMMA  json_column_declaration)*\r\n";
        
        private static string _ruleName = "json_declaration";
        
        public AstJsonDeclaration(params AstJsonColumnDeclaration[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstJsonDeclaration(Position position, params AstJsonColumnDeclaration[] items) : 
                base(position, items)
        {
        }
        
        public AstJsonDeclaration(ParserRuleContext ctx, params AstJsonColumnDeclaration[] items) : 
                base(ctx, items)
        {
        }
        
        public AstJsonDeclaration(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonDeclaration(this);
        }
        
        /// <summary>
        /// json_declaration
        /// 	 : json_column_declaration  (COMMA  json_column_declaration)*
        /// </summary>
        public static AstJsonDeclaration New(ParserRuleContext ctx, params AstJsonColumnDeclaration[] items)
        {
            return new AstJsonDeclaration(ctx, items);
        }
        
        /// <summary>
        /// json_declaration
        /// 	 : json_column_declaration  (COMMA  json_column_declaration)*
        /// </summary>
        public static AstJsonDeclaration New(Position position, params AstJsonColumnDeclaration[] items)
        {
            return new AstJsonDeclaration(position, items);
        }
        
        /// <summary>
        /// json_declaration
        /// 	 : json_column_declaration  (COMMA  json_column_declaration)*
        /// </summary>
        public static AstJsonDeclaration New(params AstJsonColumnDeclaration[] items)
        {
            return new AstJsonDeclaration(Position.Default, items);
        }
        
        public static AstJsonDeclaration? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// expression2
    /// 	 : expression  (COMMA  expression)?
    /// </summary>
    public partial class AstExpression2 : AstRuleList<AstExpression>
    {
        
        private static string _ruleValue = "expression  (COMMA  expression)?\r\n";
        
        private static string _ruleName = "expression2";
        
        public AstExpression2(params AstExpression[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExpression2(Position position, params AstExpression[] items) : 
                base(position, items)
        {
        }
        
        public AstExpression2(ParserRuleContext ctx, params AstExpression[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExpression2(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpression2(this);
        }
        
        /// <summary>
        /// expression2
        /// 	 : expression  (COMMA  expression)?
        /// </summary>
        public static AstExpression2 New(ParserRuleContext ctx, params AstExpression[] items)
        {
            return new AstExpression2(ctx, items);
        }
        
        /// <summary>
        /// expression2
        /// 	 : expression  (COMMA  expression)?
        /// </summary>
        public static AstExpression2 New(Position position, params AstExpression[] items)
        {
            return new AstExpression2(position, items);
        }
        
        /// <summary>
        /// expression2
        /// 	 : expression  (COMMA  expression)?
        /// </summary>
        public static AstExpression2 New(params AstExpression[] items)
        {
            return new AstExpression2(Position.Default, items);
        }
        
        public static AstExpression2? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// table_sources
    /// 	 : table_source  (COMMA  table_source)*
    /// </summary>
    public partial class AstTableSources : AstRuleList<AstTableSource>
    {
        
        private static string _ruleValue = "table_source  (COMMA  table_source)*\r\n";
        
        private static string _ruleName = "table_sources";
        
        public AstTableSources(params AstTableSource[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTableSources(Position position, params AstTableSource[] items) : 
                base(position, items)
        {
        }
        
        public AstTableSources(ParserRuleContext ctx, params AstTableSource[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTableSources(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSources(this);
        }
        
        /// <summary>
        /// table_sources
        /// 	 : table_source  (COMMA  table_source)*
        /// </summary>
        public static AstTableSources New(ParserRuleContext ctx, params AstTableSource[] items)
        {
            return new AstTableSources(ctx, items);
        }
        
        /// <summary>
        /// table_sources
        /// 	 : table_source  (COMMA  table_source)*
        /// </summary>
        public static AstTableSources New(Position position, params AstTableSource[] items)
        {
            return new AstTableSources(position, items);
        }
        
        /// <summary>
        /// table_sources
        /// 	 : table_source  (COMMA  table_source)*
        /// </summary>
        public static AstTableSources New(params AstTableSource[] items)
        {
            return new AstTableSources(Position.Default, items);
        }
        
        public static AstTableSources? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// select_list
    /// 	 : select_list_elem  (COMMA  select_list_elem)*
    /// </summary>
    public partial class AstSelectList : AstRuleList<AstSelectListElem>
    {
        
        private static string _ruleValue = "select_list_elem  (COMMA  select_list_elem)*\r\n";
        
        private static string _ruleName = "select_list";
        
        public AstSelectList(params AstSelectListElem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSelectList(Position position, params AstSelectListElem[] items) : 
                base(position, items)
        {
        }
        
        public AstSelectList(ParserRuleContext ctx, params AstSelectListElem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSelectList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectList(this);
        }
        
        /// <summary>
        /// select_list
        /// 	 : select_list_elem  (COMMA  select_list_elem)*
        /// </summary>
        public static AstSelectList New(ParserRuleContext ctx, params AstSelectListElem[] items)
        {
            return new AstSelectList(ctx, items);
        }
        
        /// <summary>
        /// select_list
        /// 	 : select_list_elem  (COMMA  select_list_elem)*
        /// </summary>
        public static AstSelectList New(Position position, params AstSelectListElem[] items)
        {
            return new AstSelectList(position, items);
        }
        
        /// <summary>
        /// select_list
        /// 	 : select_list_elem  (COMMA  select_list_elem)*
        /// </summary>
        public static AstSelectList New(params AstSelectListElem[] items)
        {
            return new AstSelectList(Position.Default, items);
        }
        
        public static AstSelectList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// udt_method_arguments
    /// 	 : LR_BRACKET  execute_var_string  (COMMA  execute_var_string)*  RR_BRACKET
    /// </summary>
    public partial class AstUdtMethodArguments : AstRuleList<AstExecuteVarString>
    {
        
        private static string _ruleValue = "LR_BRACKET  execute_var_string  (COMMA  execute_var_string)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "udt_method_arguments";
        
        public AstUdtMethodArguments(params AstExecuteVarString[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstUdtMethodArguments(Position position, params AstExecuteVarString[] items) : 
                base(position, items)
        {
        }
        
        public AstUdtMethodArguments(ParserRuleContext ctx, params AstExecuteVarString[] items) : 
                base(ctx, items)
        {
        }
        
        public AstUdtMethodArguments(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUdtMethodArguments(this);
        }
        
        /// <summary>
        /// udt_method_arguments
        /// 	 : LR_BRACKET  execute_var_string  (COMMA  execute_var_string)*  RR_BRACKET
        /// </summary>
        public static AstUdtMethodArguments New(ParserRuleContext ctx, params AstExecuteVarString[] items)
        {
            return new AstUdtMethodArguments(ctx, items);
        }
        
        /// <summary>
        /// udt_method_arguments
        /// 	 : LR_BRACKET  execute_var_string  (COMMA  execute_var_string)*  RR_BRACKET
        /// </summary>
        public static AstUdtMethodArguments New(Position position, params AstExecuteVarString[] items)
        {
            return new AstUdtMethodArguments(position, items);
        }
        
        /// <summary>
        /// udt_method_arguments
        /// 	 : LR_BRACKET  execute_var_string  (COMMA  execute_var_string)*  RR_BRACKET
        /// </summary>
        public static AstUdtMethodArguments New(params AstExecuteVarString[] items)
        {
            return new AstUdtMethodArguments(Position.Default, items);
        }
        
        public static AstUdtMethodArguments? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// optimize_for_args
    /// 	 : optimize_for_arg  (COMMA  optimize_for_arg)*
    /// </summary>
    public partial class AstOptimizeForArgs : AstRuleList<AstOptimizeForArg>
    {
        
        private static string _ruleValue = "optimize_for_arg  (COMMA  optimize_for_arg)*\r\n";
        
        private static string _ruleName = "optimize_for_args";
        
        public AstOptimizeForArgs(params AstOptimizeForArg[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstOptimizeForArgs(Position position, params AstOptimizeForArg[] items) : 
                base(position, items)
        {
        }
        
        public AstOptimizeForArgs(ParserRuleContext ctx, params AstOptimizeForArg[] items) : 
                base(ctx, items)
        {
        }
        
        public AstOptimizeForArgs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArgs(this);
        }
        
        /// <summary>
        /// optimize_for_args
        /// 	 : optimize_for_arg  (COMMA  optimize_for_arg)*
        /// </summary>
        public static AstOptimizeForArgs New(ParserRuleContext ctx, params AstOptimizeForArg[] items)
        {
            return new AstOptimizeForArgs(ctx, items);
        }
        
        /// <summary>
        /// optimize_for_args
        /// 	 : optimize_for_arg  (COMMA  optimize_for_arg)*
        /// </summary>
        public static AstOptimizeForArgs New(Position position, params AstOptimizeForArg[] items)
        {
            return new AstOptimizeForArgs(position, items);
        }
        
        /// <summary>
        /// optimize_for_args
        /// 	 : optimize_for_arg  (COMMA  optimize_for_arg)*
        /// </summary>
        public static AstOptimizeForArgs New(params AstOptimizeForArg[] items)
        {
            return new AstOptimizeForArgs(Position.Default, items);
        }
        
        public static AstOptimizeForArgs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// update_option_clause
    /// 	 : OPTION  LR_BRACKET  update_option  (COMMA  update_option)*  RR_BRACKET
    /// </summary>
    public partial class AstUpdateOptionClause : AstRuleList<AstUpdateOption>
    {
        
        private static string _ruleValue = "OPTION  LR_BRACKET  update_option  (COMMA  update_option)*  RR_BRACKET\r\n";
        
        private static string _ruleName = "update_option_clause";
        
        public AstUpdateOptionClause(params AstUpdateOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstUpdateOptionClause(Position position, params AstUpdateOption[] items) : 
                base(position, items)
        {
        }
        
        public AstUpdateOptionClause(ParserRuleContext ctx, params AstUpdateOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstUpdateOptionClause(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateOptionClause(this);
        }
        
        /// <summary>
        /// update_option_clause
        /// 	 : OPTION  LR_BRACKET  update_option  (COMMA  update_option)*  RR_BRACKET
        /// </summary>
        public static AstUpdateOptionClause New(ParserRuleContext ctx, params AstUpdateOption[] items)
        {
            return new AstUpdateOptionClause(ctx, items);
        }
        
        /// <summary>
        /// update_option_clause
        /// 	 : OPTION  LR_BRACKET  update_option  (COMMA  update_option)*  RR_BRACKET
        /// </summary>
        public static AstUpdateOptionClause New(Position position, params AstUpdateOption[] items)
        {
            return new AstUpdateOptionClause(position, items);
        }
        
        /// <summary>
        /// update_option_clause
        /// 	 : OPTION  LR_BRACKET  update_option  (COMMA  update_option)*  RR_BRACKET
        /// </summary>
        public static AstUpdateOptionClause New(params AstUpdateOption[] items)
        {
            return new AstUpdateOptionClause(Position.Default, items);
        }
        
        public static AstUpdateOptionClause? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// grouping_sets_list
    /// 	 : group_by_item  (COMMA  group_by_item)*
    /// </summary>
    public partial class AstGroupingSetsList : AstRuleList<AstGroupByItem>
    {
        
        private static string _ruleValue = "group_by_item  (COMMA  group_by_item)*\r\n";
        
        private static string _ruleName = "grouping_sets_list";
        
        public AstGroupingSetsList(params AstGroupByItem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstGroupingSetsList(Position position, params AstGroupByItem[] items) : 
                base(position, items)
        {
        }
        
        public AstGroupingSetsList(ParserRuleContext ctx, params AstGroupByItem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstGroupingSetsList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupingSetsList(this);
        }
        
        /// <summary>
        /// grouping_sets_list
        /// 	 : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public static AstGroupingSetsList New(ParserRuleContext ctx, params AstGroupByItem[] items)
        {
            return new AstGroupingSetsList(ctx, items);
        }
        
        /// <summary>
        /// grouping_sets_list
        /// 	 : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public static AstGroupingSetsList New(Position position, params AstGroupByItem[] items)
        {
            return new AstGroupingSetsList(position, items);
        }
        
        /// <summary>
        /// grouping_sets_list
        /// 	 : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public static AstGroupingSetsList New(params AstGroupByItem[] items)
        {
            return new AstGroupingSetsList(Position.Default, items);
        }
        
        public static AstGroupingSetsList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// groupSet_list
    /// 	 : grouping_sets_item  (COMMA  grouping_sets_item)*
    /// </summary>
    public partial class AstGroupsetList : AstRuleList<AstGroupingSetsItem>
    {
        
        private static string _ruleValue = "grouping_sets_item  (COMMA  grouping_sets_item)*\r\n";
        
        private static string _ruleName = "groupSet_list";
        
        public AstGroupsetList(params AstGroupingSetsItem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstGroupsetList(Position position, params AstGroupingSetsItem[] items) : 
                base(position, items)
        {
        }
        
        public AstGroupsetList(ParserRuleContext ctx, params AstGroupingSetsItem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstGroupsetList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupsetList(this);
        }
        
        /// <summary>
        /// groupSet_list
        /// 	 : grouping_sets_item  (COMMA  grouping_sets_item)*
        /// </summary>
        public static AstGroupsetList New(ParserRuleContext ctx, params AstGroupingSetsItem[] items)
        {
            return new AstGroupsetList(ctx, items);
        }
        
        /// <summary>
        /// groupSet_list
        /// 	 : grouping_sets_item  (COMMA  grouping_sets_item)*
        /// </summary>
        public static AstGroupsetList New(Position position, params AstGroupingSetsItem[] items)
        {
            return new AstGroupsetList(position, items);
        }
        
        /// <summary>
        /// groupSet_list
        /// 	 : grouping_sets_item  (COMMA  grouping_sets_item)*
        /// </summary>
        public static AstGroupsetList New(params AstGroupingSetsItem[] items)
        {
            return new AstGroupsetList(Position.Default, items);
        }
        
        public static AstGroupsetList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// groupBys_list
    /// 	 : group_by_item  (COMMA  group_by_item)*
    /// </summary>
    public partial class AstGroupbysList : AstRuleList<AstGroupByItem>
    {
        
        private static string _ruleValue = "group_by_item  (COMMA  group_by_item)*\r\n";
        
        private static string _ruleName = "groupBys_list";
        
        public AstGroupbysList(params AstGroupByItem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstGroupbysList(Position position, params AstGroupByItem[] items) : 
                base(position, items)
        {
        }
        
        public AstGroupbysList(ParserRuleContext ctx, params AstGroupByItem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstGroupbysList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupbysList(this);
        }
        
        /// <summary>
        /// groupBys_list
        /// 	 : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public static AstGroupbysList New(ParserRuleContext ctx, params AstGroupByItem[] items)
        {
            return new AstGroupbysList(ctx, items);
        }
        
        /// <summary>
        /// groupBys_list
        /// 	 : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public static AstGroupbysList New(Position position, params AstGroupByItem[] items)
        {
            return new AstGroupbysList(position, items);
        }
        
        /// <summary>
        /// groupBys_list
        /// 	 : group_by_item  (COMMA  group_by_item)*
        /// </summary>
        public static AstGroupbysList New(params AstGroupByItem[] items)
        {
            return new AstGroupbysList(Position.Default, items);
        }
        
        public static AstGroupbysList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// with_expression
    /// 	 : WITH  common_table_expression  (COMMA  common_table_expression)*
    /// </summary>
    public partial class AstWithExpression : AstRuleList<AstCommonTableExpression>
    {
        
        private static string _ruleValue = "WITH  common_table_expression  (COMMA  common_table_expression)*\r\n";
        
        private static string _ruleName = "with_expression";
        
        public AstWithExpression(params AstCommonTableExpression[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstWithExpression(Position position, params AstCommonTableExpression[] items) : 
                base(position, items)
        {
        }
        
        public AstWithExpression(ParserRuleContext ctx, params AstCommonTableExpression[] items) : 
                base(ctx, items)
        {
        }
        
        public AstWithExpression(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithExpression(this);
        }
        
        /// <summary>
        /// with_expression
        /// 	 : WITH  common_table_expression  (COMMA  common_table_expression)*
        /// </summary>
        public static AstWithExpression New(ParserRuleContext ctx, params AstCommonTableExpression[] items)
        {
            return new AstWithExpression(ctx, items);
        }
        
        /// <summary>
        /// with_expression
        /// 	 : WITH  common_table_expression  (COMMA  common_table_expression)*
        /// </summary>
        public static AstWithExpression New(Position position, params AstCommonTableExpression[] items)
        {
            return new AstWithExpression(position, items);
        }
        
        /// <summary>
        /// with_expression
        /// 	 : WITH  common_table_expression  (COMMA  common_table_expression)*
        /// </summary>
        public static AstWithExpression New(params AstCommonTableExpression[] items)
        {
            return new AstWithExpression(Position.Default, items);
        }
        
        public static AstWithExpression? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// special_lists
    /// 	 : special_list  (COMMA  special_list)*
    /// </summary>
    public partial class AstSpecialLists : AstRuleList<AstSpecialList>
    {
        
        private static string _ruleValue = "special_list  (COMMA  special_list)*\r\n";
        
        private static string _ruleName = "special_lists";
        
        public AstSpecialLists(params AstSpecialList[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSpecialLists(Position position, params AstSpecialList[] items) : 
                base(position, items)
        {
        }
        
        public AstSpecialLists(ParserRuleContext ctx, params AstSpecialList[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSpecialLists(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSpecialLists(this);
        }
        
        /// <summary>
        /// special_lists
        /// 	 : special_list  (COMMA  special_list)*
        /// </summary>
        public static AstSpecialLists New(ParserRuleContext ctx, params AstSpecialList[] items)
        {
            return new AstSpecialLists(ctx, items);
        }
        
        /// <summary>
        /// special_lists
        /// 	 : special_list  (COMMA  special_list)*
        /// </summary>
        public static AstSpecialLists New(Position position, params AstSpecialList[] items)
        {
            return new AstSpecialLists(position, items);
        }
        
        /// <summary>
        /// special_lists
        /// 	 : special_list  (COMMA  special_list)*
        /// </summary>
        public static AstSpecialLists New(params AstSpecialList[] items)
        {
            return new AstSpecialLists(Position.Default, items);
        }
        
        public static AstSpecialLists? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// local_ids
    /// 	 : local_id  (COMMA  local_id)*
    /// </summary>
    public partial class AstLocalIds : AstRuleList<AstLocalId>
    {
        
        private static string _ruleValue = "local_id  (COMMA  local_id)*\r\n";
        
        private static string _ruleName = "local_ids";
        
        public AstLocalIds(params AstLocalId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstLocalIds(Position position, params AstLocalId[] items) : 
                base(position, items)
        {
        }
        
        public AstLocalIds(ParserRuleContext ctx, params AstLocalId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstLocalIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalIds(this);
        }
        
        /// <summary>
        /// local_ids
        /// 	 : local_id  (COMMA  local_id)*
        /// </summary>
        public static AstLocalIds New(ParserRuleContext ctx, params AstLocalId[] items)
        {
            return new AstLocalIds(ctx, items);
        }
        
        /// <summary>
        /// local_ids
        /// 	 : local_id  (COMMA  local_id)*
        /// </summary>
        public static AstLocalIds New(Position position, params AstLocalId[] items)
        {
            return new AstLocalIds(position, items);
        }
        
        /// <summary>
        /// local_ids
        /// 	 : local_id  (COMMA  local_id)*
        /// </summary>
        public static AstLocalIds New(params AstLocalId[] items)
        {
            return new AstLocalIds(Position.Default, items);
        }
        
        public static AstLocalIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// alter_table_index_options
    /// 	 : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstAlterTableIndexOptions : AstRuleList<AstAlterTableIndexOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  R" +
            "R_BRACKET\r\n";
        
        private static string _ruleName = "alter_table_index_options";
        
        public AstAlterTableIndexOptions(params AstAlterTableIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstAlterTableIndexOptions(Position position, params AstAlterTableIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstAlterTableIndexOptions(ParserRuleContext ctx, params AstAlterTableIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstAlterTableIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableIndexOptions(this);
        }
        
        /// <summary>
        /// alter_table_index_options
        /// 	 : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  RR_BRACKET
        /// </summary>
        public static AstAlterTableIndexOptions New(ParserRuleContext ctx, params AstAlterTableIndexOption[] items)
        {
            return new AstAlterTableIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// alter_table_index_options
        /// 	 : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  RR_BRACKET
        /// </summary>
        public static AstAlterTableIndexOptions New(Position position, params AstAlterTableIndexOption[] items)
        {
            return new AstAlterTableIndexOptions(position, items);
        }
        
        /// <summary>
        /// alter_table_index_options
        /// 	 : WITH  LR_BRACKET  alter_table_index_option  (COMMA  alter_table_index_option)*  RR_BRACKET
        /// </summary>
        public static AstAlterTableIndexOptions New(params AstAlterTableIndexOption[] items)
        {
            return new AstAlterTableIndexOptions(Position.Default, items);
        }
        
        public static AstAlterTableIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// connection_nodes
    /// 	 : connection_node  (COMMA  connection_node)*
    /// </summary>
    public partial class AstConnectionNodes : AstRuleList<AstConnectionNode>
    {
        
        private static string _ruleValue = "connection_node  (COMMA  connection_node)*\r\n";
        
        private static string _ruleName = "connection_nodes";
        
        public AstConnectionNodes(params AstConnectionNode[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstConnectionNodes(Position position, params AstConnectionNode[] items) : 
                base(position, items)
        {
        }
        
        public AstConnectionNodes(ParserRuleContext ctx, params AstConnectionNode[] items) : 
                base(ctx, items)
        {
        }
        
        public AstConnectionNodes(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConnectionNodes(this);
        }
        
        /// <summary>
        /// connection_nodes
        /// 	 : connection_node  (COMMA  connection_node)*
        /// </summary>
        public static AstConnectionNodes New(ParserRuleContext ctx, params AstConnectionNode[] items)
        {
            return new AstConnectionNodes(ctx, items);
        }
        
        /// <summary>
        /// connection_nodes
        /// 	 : connection_node  (COMMA  connection_node)*
        /// </summary>
        public static AstConnectionNodes New(Position position, params AstConnectionNode[] items)
        {
            return new AstConnectionNodes(position, items);
        }
        
        /// <summary>
        /// connection_nodes
        /// 	 : connection_node  (COMMA  connection_node)*
        /// </summary>
        public static AstConnectionNodes New(params AstConnectionNode[] items)
        {
            return new AstConnectionNodes(Position.Default, items);
        }
        
        public static AstConnectionNodes? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// dbcc_options
    /// 	 : simple_id  (COMMA  simple_id)?
    /// </summary>
    public partial class AstDbccOptions : AstRuleList<AstSimpleId>
    {
        
        private static string _ruleValue = "simple_id  (COMMA  simple_id)?\r\n";
        
        private static string _ruleName = "dbcc_options";
        
        public AstDbccOptions(params AstSimpleId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDbccOptions(Position position, params AstSimpleId[] items) : 
                base(position, items)
        {
        }
        
        public AstDbccOptions(ParserRuleContext ctx, params AstSimpleId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDbccOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbccOptions(this);
        }
        
        /// <summary>
        /// dbcc_options
        /// 	 : simple_id  (COMMA  simple_id)?
        /// </summary>
        public static AstDbccOptions New(ParserRuleContext ctx, params AstSimpleId[] items)
        {
            return new AstDbccOptions(ctx, items);
        }
        
        /// <summary>
        /// dbcc_options
        /// 	 : simple_id  (COMMA  simple_id)?
        /// </summary>
        public static AstDbccOptions New(Position position, params AstSimpleId[] items)
        {
            return new AstDbccOptions(position, items);
        }
        
        /// <summary>
        /// dbcc_options
        /// 	 : simple_id  (COMMA  simple_id)?
        /// </summary>
        public static AstDbccOptions New(params AstSimpleId[] items)
        {
            return new AstDbccOptions(Position.Default, items);
        }
        
        public static AstDbccOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// execute_var_strings
    /// 	 : execute_var_string  (COMMA  execute_var_string)*
    /// </summary>
    public partial class AstExecuteVarStrings : AstRuleList<AstExecuteVarString>
    {
        
        private static string _ruleValue = "execute_var_string  (COMMA  execute_var_string)*\r\n";
        
        private static string _ruleName = "execute_var_strings";
        
        public AstExecuteVarStrings(params AstExecuteVarString[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExecuteVarStrings(Position position, params AstExecuteVarString[] items) : 
                base(position, items)
        {
        }
        
        public AstExecuteVarStrings(ParserRuleContext ctx, params AstExecuteVarString[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExecuteVarStrings(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteVarStrings(this);
        }
        
        /// <summary>
        /// execute_var_strings
        /// 	 : execute_var_string  (COMMA  execute_var_string)*
        /// </summary>
        public static AstExecuteVarStrings New(ParserRuleContext ctx, params AstExecuteVarString[] items)
        {
            return new AstExecuteVarStrings(ctx, items);
        }
        
        /// <summary>
        /// execute_var_strings
        /// 	 : execute_var_string  (COMMA  execute_var_string)*
        /// </summary>
        public static AstExecuteVarStrings New(Position position, params AstExecuteVarString[] items)
        {
            return new AstExecuteVarStrings(position, items);
        }
        
        /// <summary>
        /// execute_var_strings
        /// 	 : execute_var_string  (COMMA  execute_var_string)*
        /// </summary>
        public static AstExecuteVarStrings New(params AstExecuteVarString[] items)
        {
            return new AstExecuteVarStrings(Position.Default, items);
        }
        
        public static AstExecuteVarStrings? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// execute_statement_arg_nameds
    /// 	 : execute_statement_arg_named  (COMMA  execute_statement_arg_named)*
    /// </summary>
    public partial class AstExecuteStatementArgNameds : AstRuleList<AstExecuteStatementArgNamed>
    {
        
        private static string _ruleValue = "execute_statement_arg_named  (COMMA  execute_statement_arg_named)*\r\n";
        
        private static string _ruleName = "execute_statement_arg_nameds";
        
        public AstExecuteStatementArgNameds(params AstExecuteStatementArgNamed[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExecuteStatementArgNameds(Position position, params AstExecuteStatementArgNamed[] items) : 
                base(position, items)
        {
        }
        
        public AstExecuteStatementArgNameds(ParserRuleContext ctx, params AstExecuteStatementArgNamed[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExecuteStatementArgNameds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgNameds(this);
        }
        
        /// <summary>
        /// execute_statement_arg_nameds
        /// 	 : execute_statement_arg_named  (COMMA  execute_statement_arg_named)*
        /// </summary>
        public static AstExecuteStatementArgNameds New(ParserRuleContext ctx, params AstExecuteStatementArgNamed[] items)
        {
            return new AstExecuteStatementArgNameds(ctx, items);
        }
        
        /// <summary>
        /// execute_statement_arg_nameds
        /// 	 : execute_statement_arg_named  (COMMA  execute_statement_arg_named)*
        /// </summary>
        public static AstExecuteStatementArgNameds New(Position position, params AstExecuteStatementArgNamed[] items)
        {
            return new AstExecuteStatementArgNameds(position, items);
        }
        
        /// <summary>
        /// execute_statement_arg_nameds
        /// 	 : execute_statement_arg_named  (COMMA  execute_statement_arg_named)*
        /// </summary>
        public static AstExecuteStatementArgNameds New(params AstExecuteStatementArgNamed[] items)
        {
            return new AstExecuteStatementArgNameds(Position.Default, items);
        }
        
        public static AstExecuteStatementArgNameds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// execute_statement_args
    /// 	 : execute_statement_arg  (COMMA  execute_statement_arg)*
    /// </summary>
    public partial class AstExecuteStatementArgs : AstRuleList<AstExecuteStatementArg>
    {
        
        private static string _ruleValue = "execute_statement_arg  (COMMA  execute_statement_arg)*\r\n";
        
        private static string _ruleName = "execute_statement_args";
        
        public AstExecuteStatementArgs(params AstExecuteStatementArg[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstExecuteStatementArgs(Position position, params AstExecuteStatementArg[] items) : 
                base(position, items)
        {
        }
        
        public AstExecuteStatementArgs(ParserRuleContext ctx, params AstExecuteStatementArg[] items) : 
                base(ctx, items)
        {
        }
        
        public AstExecuteStatementArgs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatementArgs(this);
        }
        
        /// <summary>
        /// execute_statement_args
        /// 	 : execute_statement_arg  (COMMA  execute_statement_arg)*
        /// </summary>
        public static AstExecuteStatementArgs New(ParserRuleContext ctx, params AstExecuteStatementArg[] items)
        {
            return new AstExecuteStatementArgs(ctx, items);
        }
        
        /// <summary>
        /// execute_statement_args
        /// 	 : execute_statement_arg  (COMMA  execute_statement_arg)*
        /// </summary>
        public static AstExecuteStatementArgs New(Position position, params AstExecuteStatementArg[] items)
        {
            return new AstExecuteStatementArgs(position, items);
        }
        
        /// <summary>
        /// execute_statement_args
        /// 	 : execute_statement_arg  (COMMA  execute_statement_arg)*
        /// </summary>
        public static AstExecuteStatementArgs New(params AstExecuteStatementArg[] items)
        {
            return new AstExecuteStatementArgs(Position.Default, items);
        }
        
        public static AstExecuteStatementArgs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// declare_locals
    /// 	 : declare_local  (COMMA  loc += declare_local)*
    /// </summary>
    public partial class AstDeclareLocals : AstRuleList<AstDeclareLocal>
    {
        
        private static string _ruleValue = "declare_local  (COMMA  loc += declare_local)*\r\n";
        
        private static string _ruleName = "declare_locals";
        
        public AstDeclareLocals(params AstDeclareLocal[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDeclareLocals(Position position, params AstDeclareLocal[] items) : 
                base(position, items)
        {
        }
        
        public AstDeclareLocals(ParserRuleContext ctx, params AstDeclareLocal[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDeclareLocals(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocals(this);
        }
        
        /// <summary>
        /// declare_locals
        /// 	 : declare_local  (COMMA  loc += declare_local)*
        /// </summary>
        public static AstDeclareLocals New(ParserRuleContext ctx, params AstDeclareLocal[] items)
        {
            return new AstDeclareLocals(ctx, items);
        }
        
        /// <summary>
        /// declare_locals
        /// 	 : declare_local  (COMMA  loc += declare_local)*
        /// </summary>
        public static AstDeclareLocals New(Position position, params AstDeclareLocal[] items)
        {
            return new AstDeclareLocals(position, items);
        }
        
        /// <summary>
        /// declare_locals
        /// 	 : declare_local  (COMMA  loc += declare_local)*
        /// </summary>
        public static AstDeclareLocals New(params AstDeclareLocal[] items)
        {
            return new AstDeclareLocals(Position.Default, items);
        }
        
        public static AstDeclareLocals? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// xml_declarations
    /// 	 : xml_declaration  (COMMA  xml_declaration)*
    /// </summary>
    public partial class AstXmlDeclarations : AstRuleList<AstXmlDeclaration>
    {
        
        private static string _ruleValue = "xml_declaration  (COMMA  xml_declaration)*\r\n";
        
        private static string _ruleName = "xml_declarations";
        
        public AstXmlDeclarations(params AstXmlDeclaration[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstXmlDeclarations(Position position, params AstXmlDeclaration[] items) : 
                base(position, items)
        {
        }
        
        public AstXmlDeclarations(ParserRuleContext ctx, params AstXmlDeclaration[] items) : 
                base(ctx, items)
        {
        }
        
        public AstXmlDeclarations(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlDeclarations(this);
        }
        
        /// <summary>
        /// xml_declarations
        /// 	 : xml_declaration  (COMMA  xml_declaration)*
        /// </summary>
        public static AstXmlDeclarations New(ParserRuleContext ctx, params AstXmlDeclaration[] items)
        {
            return new AstXmlDeclarations(ctx, items);
        }
        
        /// <summary>
        /// xml_declarations
        /// 	 : xml_declaration  (COMMA  xml_declaration)*
        /// </summary>
        public static AstXmlDeclarations New(Position position, params AstXmlDeclaration[] items)
        {
            return new AstXmlDeclarations(position, items);
        }
        
        /// <summary>
        /// xml_declarations
        /// 	 : xml_declaration  (COMMA  xml_declaration)*
        /// </summary>
        public static AstXmlDeclarations New(params AstXmlDeclaration[] items)
        {
            return new AstXmlDeclarations(Position.Default, items);
        }
        
        public static AstXmlDeclarations? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// schema_view_refs
    /// 	 : schema_view_ref  (COMMA  schema_view_ref)*
    /// </summary>
    public partial class AstSchemaViewRefs : AstRuleList<AstSchemaViewRef>
    {
        
        private static string _ruleValue = "schema_view_ref  (COMMA  schema_view_ref)*\r\n";
        
        private static string _ruleName = "schema_view_refs";
        
        public AstSchemaViewRefs(params AstSchemaViewRef[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSchemaViewRefs(Position position, params AstSchemaViewRef[] items) : 
                base(position, items)
        {
        }
        
        public AstSchemaViewRefs(ParserRuleContext ctx, params AstSchemaViewRef[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSchemaViewRefs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaViewRefs(this);
        }
        
        /// <summary>
        /// schema_view_refs
        /// 	 : schema_view_ref  (COMMA  schema_view_ref)*
        /// </summary>
        public static AstSchemaViewRefs New(ParserRuleContext ctx, params AstSchemaViewRef[] items)
        {
            return new AstSchemaViewRefs(ctx, items);
        }
        
        /// <summary>
        /// schema_view_refs
        /// 	 : schema_view_ref  (COMMA  schema_view_ref)*
        /// </summary>
        public static AstSchemaViewRefs New(Position position, params AstSchemaViewRef[] items)
        {
            return new AstSchemaViewRefs(position, items);
        }
        
        /// <summary>
        /// schema_view_refs
        /// 	 : schema_view_ref  (COMMA  schema_view_ref)*
        /// </summary>
        public static AstSchemaViewRefs New(params AstSchemaViewRef[] items)
        {
            return new AstSchemaViewRefs(Position.Default, items);
        }
        
        public static AstSchemaViewRefs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// table_names
    /// 	 : full_table_ref  (COMMA  full_table_ref)*
    /// </summary>
    public partial class AstTableNames : AstRuleList<AstFullTableRef>
    {
        
        private static string _ruleValue = "full_table_ref  (COMMA  full_table_ref)*\r\n";
        
        private static string _ruleName = "table_names";
        
        public AstTableNames(params AstFullTableRef[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTableNames(Position position, params AstFullTableRef[] items) : 
                base(position, items)
        {
        }
        
        public AstTableNames(ParserRuleContext ctx, params AstFullTableRef[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTableNames(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableNames(this);
        }
        
        /// <summary>
        /// table_names
        /// 	 : full_table_ref  (COMMA  full_table_ref)*
        /// </summary>
        public static AstTableNames New(ParserRuleContext ctx, params AstFullTableRef[] items)
        {
            return new AstTableNames(ctx, items);
        }
        
        /// <summary>
        /// table_names
        /// 	 : full_table_ref  (COMMA  full_table_ref)*
        /// </summary>
        public static AstTableNames New(Position position, params AstFullTableRef[] items)
        {
            return new AstTableNames(position, items);
        }
        
        /// <summary>
        /// table_names
        /// 	 : full_table_ref  (COMMA  full_table_ref)*
        /// </summary>
        public static AstTableNames New(params AstFullTableRef[] items)
        {
            return new AstTableNames(Position.Default, items);
        }
        
        public static AstTableNames? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// func_proc_name_schemas
    /// 	 : schema_func_proc_ref  (COMMA  schema_func_proc_ref)*
    /// </summary>
    public partial class AstFuncProcNameSchemas : AstRuleList<AstSchemaFuncProcRef>
    {
        
        private static string _ruleValue = "schema_func_proc_ref  (COMMA  schema_func_proc_ref)*\r\n";
        
        private static string _ruleName = "func_proc_name_schemas";
        
        public AstFuncProcNameSchemas(params AstSchemaFuncProcRef[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFuncProcNameSchemas(Position position, params AstSchemaFuncProcRef[] items) : 
                base(position, items)
        {
        }
        
        public AstFuncProcNameSchemas(ParserRuleContext ctx, params AstSchemaFuncProcRef[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFuncProcNameSchemas(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncProcNameSchemas(this);
        }
        
        /// <summary>
        /// func_proc_name_schemas
        /// 	 : schema_func_proc_ref  (COMMA  schema_func_proc_ref)*
        /// </summary>
        public static AstFuncProcNameSchemas New(ParserRuleContext ctx, params AstSchemaFuncProcRef[] items)
        {
            return new AstFuncProcNameSchemas(ctx, items);
        }
        
        /// <summary>
        /// func_proc_name_schemas
        /// 	 : schema_func_proc_ref  (COMMA  schema_func_proc_ref)*
        /// </summary>
        public static AstFuncProcNameSchemas New(Position position, params AstSchemaFuncProcRef[] items)
        {
            return new AstFuncProcNameSchemas(position, items);
        }
        
        /// <summary>
        /// func_proc_name_schemas
        /// 	 : schema_func_proc_ref  (COMMA  schema_func_proc_ref)*
        /// </summary>
        public static AstFuncProcNameSchemas New(params AstSchemaFuncProcRef[] items)
        {
            return new AstFuncProcNameSchemas(Position.Default, items);
        }
        
        public static AstFuncProcNameSchemas? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// drop_backward_compatible_indexs
    /// 	 : drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*
    /// </summary>
    public partial class AstDropBackwardCompatibleIndexs : AstRuleList<AstDropBackwardCompatibleIndex>
    {
        
        private static string _ruleValue = "drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*\r\n";
        
        private static string _ruleName = "drop_backward_compatible_indexs";
        
        public AstDropBackwardCompatibleIndexs(params AstDropBackwardCompatibleIndex[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDropBackwardCompatibleIndexs(Position position, params AstDropBackwardCompatibleIndex[] items) : 
                base(position, items)
        {
        }
        
        public AstDropBackwardCompatibleIndexs(ParserRuleContext ctx, params AstDropBackwardCompatibleIndex[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDropBackwardCompatibleIndexs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropBackwardCompatibleIndexs(this);
        }
        
        /// <summary>
        /// drop_backward_compatible_indexs
        /// 	 : drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*
        /// </summary>
        public static AstDropBackwardCompatibleIndexs New(ParserRuleContext ctx, params AstDropBackwardCompatibleIndex[] items)
        {
            return new AstDropBackwardCompatibleIndexs(ctx, items);
        }
        
        /// <summary>
        /// drop_backward_compatible_indexs
        /// 	 : drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*
        /// </summary>
        public static AstDropBackwardCompatibleIndexs New(Position position, params AstDropBackwardCompatibleIndex[] items)
        {
            return new AstDropBackwardCompatibleIndexs(position, items);
        }
        
        /// <summary>
        /// drop_backward_compatible_indexs
        /// 	 : drop_backward_compatible_index  (COMMA  drop_backward_compatible_index)*
        /// </summary>
        public static AstDropBackwardCompatibleIndexs New(params AstDropBackwardCompatibleIndex[] items)
        {
            return new AstDropBackwardCompatibleIndexs(Position.Default, items);
        }
        
        public static AstDropBackwardCompatibleIndexs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_indexs
    /// 	 : drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatial_index)*
    /// </summary>
    public partial class AstDropRelationalOrXmlOrSpatialIndexs : AstRuleList<AstDropRelationalOrXmlOrSpatialIndex>
    {
        
        private static string _ruleValue = "drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatia" +
            "l_index)*\r\n";
        
        private static string _ruleName = "drop_relational_or_xml_or_spatial_indexs";
        
        public AstDropRelationalOrXmlOrSpatialIndexs(params AstDropRelationalOrXmlOrSpatialIndex[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDropRelationalOrXmlOrSpatialIndexs(Position position, params AstDropRelationalOrXmlOrSpatialIndex[] items) : 
                base(position, items)
        {
        }
        
        public AstDropRelationalOrXmlOrSpatialIndexs(ParserRuleContext ctx, params AstDropRelationalOrXmlOrSpatialIndex[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDropRelationalOrXmlOrSpatialIndexs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndexs(this);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_indexs
        /// 	 : drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatial_index)*
        /// </summary>
        public static AstDropRelationalOrXmlOrSpatialIndexs New(ParserRuleContext ctx, params AstDropRelationalOrXmlOrSpatialIndex[] items)
        {
            return new AstDropRelationalOrXmlOrSpatialIndexs(ctx, items);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_indexs
        /// 	 : drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatial_index)*
        /// </summary>
        public static AstDropRelationalOrXmlOrSpatialIndexs New(Position position, params AstDropRelationalOrXmlOrSpatialIndex[] items)
        {
            return new AstDropRelationalOrXmlOrSpatialIndexs(position, items);
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_indexs
        /// 	 : drop_relational_or_xml_or_spatial_index  (COMMA  drop_relational_or_xml_or_spatial_index)*
        /// </summary>
        public static AstDropRelationalOrXmlOrSpatialIndexs New(params AstDropRelationalOrXmlOrSpatialIndex[] items)
        {
            return new AstDropRelationalOrXmlOrSpatialIndexs(Position.Default, items);
        }
        
        public static AstDropRelationalOrXmlOrSpatialIndexs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// change_tracking_option_lists
    /// 	 : change_tracking_option_list  (COMMA  change_tracking_option_list)*
    /// </summary>
    public partial class AstChangeTrackingOptionLists : AstRuleList<AstChangeTrackingOptionList>
    {
        
        private static string _ruleValue = "change_tracking_option_list  (COMMA  change_tracking_option_list)*\r\n";
        
        private static string _ruleName = "change_tracking_option_lists";
        
        public AstChangeTrackingOptionLists(params AstChangeTrackingOptionList[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstChangeTrackingOptionLists(Position position, params AstChangeTrackingOptionList[] items) : 
                base(position, items)
        {
        }
        
        public AstChangeTrackingOptionLists(ParserRuleContext ctx, params AstChangeTrackingOptionList[] items) : 
                base(ctx, items)
        {
        }
        
        public AstChangeTrackingOptionLists(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionLists(this);
        }
        
        /// <summary>
        /// change_tracking_option_lists
        /// 	 : change_tracking_option_list  (COMMA  change_tracking_option_list)*
        /// </summary>
        public static AstChangeTrackingOptionLists New(ParserRuleContext ctx, params AstChangeTrackingOptionList[] items)
        {
            return new AstChangeTrackingOptionLists(ctx, items);
        }
        
        /// <summary>
        /// change_tracking_option_lists
        /// 	 : change_tracking_option_list  (COMMA  change_tracking_option_list)*
        /// </summary>
        public static AstChangeTrackingOptionLists New(Position position, params AstChangeTrackingOptionList[] items)
        {
            return new AstChangeTrackingOptionLists(position, items);
        }
        
        /// <summary>
        /// change_tracking_option_lists
        /// 	 : change_tracking_option_list  (COMMA  change_tracking_option_list)*
        /// </summary>
        public static AstChangeTrackingOptionLists New(params AstChangeTrackingOptionList[] items)
        {
            return new AstChangeTrackingOptionLists(Position.Default, items);
        }
        
        public static AstChangeTrackingOptionLists? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// filespecs
    /// 	 : filespec  (COMMA  filespec)*
    /// </summary>
    public partial class AstFilespecs : AstRuleList<AstFilespec>
    {
        
        private static string _ruleValue = "filespec  (COMMA  filespec)*\r\n";
        
        private static string _ruleName = "filespecs";
        
        public AstFilespecs(params AstFilespec[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFilespecs(Position position, params AstFilespec[] items) : 
                base(position, items)
        {
        }
        
        public AstFilespecs(ParserRuleContext ctx, params AstFilespec[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFilespecs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilespecs(this);
        }
        
        /// <summary>
        /// filespecs
        /// 	 : filespec  (COMMA  filespec)*
        /// </summary>
        public static AstFilespecs New(ParserRuleContext ctx, params AstFilespec[] items)
        {
            return new AstFilespecs(ctx, items);
        }
        
        /// <summary>
        /// filespecs
        /// 	 : filespec  (COMMA  filespec)*
        /// </summary>
        public static AstFilespecs New(Position position, params AstFilespec[] items)
        {
            return new AstFilespecs(position, items);
        }
        
        /// <summary>
        /// filespecs
        /// 	 : filespec  (COMMA  filespec)*
        /// </summary>
        public static AstFilespecs New(params AstFilespec[] items)
        {
            return new AstFilespecs(Position.Default, items);
        }
        
        public static AstFilespecs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// view_attributes
    /// 	 : WITH  view_attribute  (COMMA  view_attribute)*
    /// </summary>
    public partial class AstViewAttributes : AstRuleList<AstViewAttribute>
    {
        
        private static string _ruleValue = "WITH  view_attribute  (COMMA  view_attribute)*\r\n";
        
        private static string _ruleName = "view_attributes";
        
        public AstViewAttributes(params AstViewAttribute[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstViewAttributes(Position position, params AstViewAttribute[] items) : 
                base(position, items)
        {
        }
        
        public AstViewAttributes(ParserRuleContext ctx, params AstViewAttribute[] items) : 
                base(ctx, items)
        {
        }
        
        public AstViewAttributes(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitViewAttributes(this);
        }
        
        /// <summary>
        /// view_attributes
        /// 	 : WITH  view_attribute  (COMMA  view_attribute)*
        /// </summary>
        public static AstViewAttributes New(ParserRuleContext ctx, params AstViewAttribute[] items)
        {
            return new AstViewAttributes(ctx, items);
        }
        
        /// <summary>
        /// view_attributes
        /// 	 : WITH  view_attribute  (COMMA  view_attribute)*
        /// </summary>
        public static AstViewAttributes New(Position position, params AstViewAttribute[] items)
        {
            return new AstViewAttributes(position, items);
        }
        
        /// <summary>
        /// view_attributes
        /// 	 : WITH  view_attribute  (COMMA  view_attribute)*
        /// </summary>
        public static AstViewAttributes New(params AstViewAttribute[] items)
        {
            return new AstViewAttributes(Position.Default, items);
        }
        
        public static AstViewAttributes? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// create_table_index_options
    /// 	 : WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)*  RR_BRACKET
    /// </summary>
    public partial class AstCreateTableIndexOptions : AstRuleList<AstCreateTableIndexOption>
    {
        
        private static string _ruleValue = "WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)* " +
            " RR_BRACKET\r\n";
        
        private static string _ruleName = "create_table_index_options";
        
        public AstCreateTableIndexOptions(params AstCreateTableIndexOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstCreateTableIndexOptions(Position position, params AstCreateTableIndexOption[] items) : 
                base(position, items)
        {
        }
        
        public AstCreateTableIndexOptions(ParserRuleContext ctx, params AstCreateTableIndexOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstCreateTableIndexOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOptions(this);
        }
        
        /// <summary>
        /// create_table_index_options
        /// 	 : WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)*  RR_BRACKET
        /// </summary>
        public static AstCreateTableIndexOptions New(ParserRuleContext ctx, params AstCreateTableIndexOption[] items)
        {
            return new AstCreateTableIndexOptions(ctx, items);
        }
        
        /// <summary>
        /// create_table_index_options
        /// 	 : WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)*  RR_BRACKET
        /// </summary>
        public static AstCreateTableIndexOptions New(Position position, params AstCreateTableIndexOption[] items)
        {
            return new AstCreateTableIndexOptions(position, items);
        }
        
        /// <summary>
        /// create_table_index_options
        /// 	 : WITH  LR_BRACKET  create_table_index_option  (COMMA  create_table_index_option)*  RR_BRACKET
        /// </summary>
        public static AstCreateTableIndexOptions New(params AstCreateTableIndexOption[] items)
        {
            return new AstCreateTableIndexOptions(Position.Default, items);
        }
        
        public static AstCreateTableIndexOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// tableoptions
    /// 	 : tableoption  (COMMA  tableoption)*
    /// </summary>
    public partial class AstTableoptions : AstRuleList<AstTableoption>
    {
        
        private static string _ruleValue = "tableoption  (COMMA  tableoption)*\r\n";
        
        private static string _ruleName = "tableoptions";
        
        public AstTableoptions(params AstTableoption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstTableoptions(Position position, params AstTableoption[] items) : 
                base(position, items)
        {
        }
        
        public AstTableoptions(ParserRuleContext ctx, params AstTableoption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstTableoptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableoptions(this);
        }
        
        /// <summary>
        /// tableoptions
        /// 	 : tableoption  (COMMA  tableoption)*
        /// </summary>
        public static AstTableoptions New(ParserRuleContext ctx, params AstTableoption[] items)
        {
            return new AstTableoptions(ctx, items);
        }
        
        /// <summary>
        /// tableoptions
        /// 	 : tableoption  (COMMA  tableoption)*
        /// </summary>
        public static AstTableoptions New(Position position, params AstTableoption[] items)
        {
            return new AstTableoptions(position, items);
        }
        
        /// <summary>
        /// tableoptions
        /// 	 : tableoption  (COMMA  tableoption)*
        /// </summary>
        public static AstTableoptions New(params AstTableoption[] items)
        {
            return new AstTableoptions(Position.Default, items);
        }
        
        public static AstTableoptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// alter_user_items
    /// 	 : alter_user_item  (COMMA  alter_user_item)*
    /// </summary>
    public partial class AstAlterUserItems : AstRuleList<AstAlterUserItem>
    {
        
        private static string _ruleValue = "alter_user_item  (COMMA  alter_user_item)*\r\n";
        
        private static string _ruleName = "alter_user_items";
        
        public AstAlterUserItems(params AstAlterUserItem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstAlterUserItems(Position position, params AstAlterUserItem[] items) : 
                base(position, items)
        {
        }
        
        public AstAlterUserItems(ParserRuleContext ctx, params AstAlterUserItem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstAlterUserItems(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserItems(this);
        }
        
        /// <summary>
        /// alter_user_items
        /// 	 : alter_user_item  (COMMA  alter_user_item)*
        /// </summary>
        public static AstAlterUserItems New(ParserRuleContext ctx, params AstAlterUserItem[] items)
        {
            return new AstAlterUserItems(ctx, items);
        }
        
        /// <summary>
        /// alter_user_items
        /// 	 : alter_user_item  (COMMA  alter_user_item)*
        /// </summary>
        public static AstAlterUserItems New(Position position, params AstAlterUserItem[] items)
        {
            return new AstAlterUserItems(position, items);
        }
        
        /// <summary>
        /// alter_user_items
        /// 	 : alter_user_item  (COMMA  alter_user_item)*
        /// </summary>
        public static AstAlterUserItems New(params AstAlterUserItem[] items)
        {
            return new AstAlterUserItems(Position.Default, items);
        }
        
        public static AstAlterUserItems? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// contract_refs
    /// 	 : contract_ref  (COMMA  contract_ref)*
    /// </summary>
    public partial class AstContractRefs : AstRuleList<AstContractRef>
    {
        
        private static string _ruleValue = "contract_ref  (COMMA  contract_ref)*\r\n";
        
        private static string _ruleName = "contract_refs";
        
        public AstContractRefs(params AstContractRef[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstContractRefs(Position position, params AstContractRef[] items) : 
                base(position, items)
        {
        }
        
        public AstContractRefs(ParserRuleContext ctx, params AstContractRef[] items) : 
                base(ctx, items)
        {
        }
        
        public AstContractRefs(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractRefs(this);
        }
        
        /// <summary>
        /// contract_refs
        /// 	 : contract_ref  (COMMA  contract_ref)*
        /// </summary>
        public static AstContractRefs New(ParserRuleContext ctx, params AstContractRef[] items)
        {
            return new AstContractRefs(ctx, items);
        }
        
        /// <summary>
        /// contract_refs
        /// 	 : contract_ref  (COMMA  contract_ref)*
        /// </summary>
        public static AstContractRefs New(Position position, params AstContractRef[] items)
        {
            return new AstContractRefs(position, items);
        }
        
        /// <summary>
        /// contract_refs
        /// 	 : contract_ref  (COMMA  contract_ref)*
        /// </summary>
        public static AstContractRefs New(params AstContractRef[] items)
        {
            return new AstContractRefs(Position.Default, items);
        }
        
        public static AstContractRefs? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// alter_service_contracts
    /// 	 : contract_id  (COMMA  contract_id)
    /// </summary>
    public partial class AstAlterServiceContracts : AstRuleList<AstContractId>
    {
        
        private static string _ruleValue = "contract_id  (COMMA  contract_id)\r\n";
        
        private static string _ruleName = "alter_service_contracts";
        
        public AstAlterServiceContracts(params AstContractId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstAlterServiceContracts(Position position, params AstContractId[] items) : 
                base(position, items)
        {
        }
        
        public AstAlterServiceContracts(ParserRuleContext ctx, params AstContractId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstAlterServiceContracts(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceContracts(this);
        }
        
        /// <summary>
        /// alter_service_contracts
        /// 	 : contract_id  (COMMA  contract_id)
        /// </summary>
        public static AstAlterServiceContracts New(ParserRuleContext ctx, params AstContractId[] items)
        {
            return new AstAlterServiceContracts(ctx, items);
        }
        
        /// <summary>
        /// alter_service_contracts
        /// 	 : contract_id  (COMMA  contract_id)
        /// </summary>
        public static AstAlterServiceContracts New(Position position, params AstContractId[] items)
        {
            return new AstAlterServiceContracts(position, items);
        }
        
        /// <summary>
        /// alter_service_contracts
        /// 	 : contract_id  (COMMA  contract_id)
        /// </summary>
        public static AstAlterServiceContracts New(params AstContractId[] items)
        {
            return new AstAlterServiceContracts(Position.Default, items);
        }
        
        public static AstAlterServiceContracts? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// decimal_ranges
    /// 	 : decimal_range  (COMMA?  decimal_range)*
    /// </summary>
    public partial class AstDecimalRanges : AstRuleList<AstDecimalRange>
    {
        
        private static string _ruleValue = "decimal_range  (COMMA?  decimal_range)*\r\n";
        
        private static string _ruleName = "decimal_ranges";
        
        public AstDecimalRanges(params AstDecimalRange[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDecimalRanges(Position position, params AstDecimalRange[] items) : 
                base(position, items)
        {
        }
        
        public AstDecimalRanges(ParserRuleContext ctx, params AstDecimalRange[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDecimalRanges(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalRanges(this);
        }
        
        /// <summary>
        /// decimal_ranges
        /// 	 : decimal_range  (COMMA?  decimal_range)*
        /// </summary>
        public static AstDecimalRanges New(ParserRuleContext ctx, params AstDecimalRange[] items)
        {
            return new AstDecimalRanges(ctx, items);
        }
        
        /// <summary>
        /// decimal_ranges
        /// 	 : decimal_range  (COMMA?  decimal_range)*
        /// </summary>
        public static AstDecimalRanges New(Position position, params AstDecimalRange[] items)
        {
            return new AstDecimalRanges(position, items);
        }
        
        /// <summary>
        /// decimal_ranges
        /// 	 : decimal_range  (COMMA?  decimal_range)*
        /// </summary>
        public static AstDecimalRanges New(params AstDecimalRange[] items)
        {
            return new AstDecimalRanges(Position.Default, items);
        }
        
        public static AstDecimalRanges? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// server_audit_file_infos
    /// 	 : server_audit_file_info  (COMMA  server_audit_file_info)*
    /// </summary>
    public partial class AstServerAuditFileInfos : AstRuleList<AstServerAuditFileInfo>
    {
        
        private static string _ruleValue = "server_audit_file_info  (COMMA  server_audit_file_info)*\r\n";
        
        private static string _ruleName = "server_audit_file_infos";
        
        public AstServerAuditFileInfos(params AstServerAuditFileInfo[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstServerAuditFileInfos(Position position, params AstServerAuditFileInfo[] items) : 
                base(position, items)
        {
        }
        
        public AstServerAuditFileInfos(ParserRuleContext ctx, params AstServerAuditFileInfo[] items) : 
                base(ctx, items)
        {
        }
        
        public AstServerAuditFileInfos(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditFileInfos(this);
        }
        
        /// <summary>
        /// server_audit_file_infos
        /// 	 : server_audit_file_info  (COMMA  server_audit_file_info)*
        /// </summary>
        public static AstServerAuditFileInfos New(ParserRuleContext ctx, params AstServerAuditFileInfo[] items)
        {
            return new AstServerAuditFileInfos(ctx, items);
        }
        
        /// <summary>
        /// server_audit_file_infos
        /// 	 : server_audit_file_info  (COMMA  server_audit_file_info)*
        /// </summary>
        public static AstServerAuditFileInfos New(Position position, params AstServerAuditFileInfo[] items)
        {
            return new AstServerAuditFileInfos(position, items);
        }
        
        /// <summary>
        /// server_audit_file_infos
        /// 	 : server_audit_file_info  (COMMA  server_audit_file_info)*
        /// </summary>
        public static AstServerAuditFileInfos New(params AstServerAuditFileInfo[] items)
        {
            return new AstServerAuditFileInfos(Position.Default, items);
        }
        
        public static AstServerAuditFileInfos? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// clause_json_infos
    /// 	 : (COMMA  clause_json_info)+
    /// </summary>
    public partial class AstClauseJsonInfos : AstRuleList<AstClauseJsonInfo>
    {
        
        private static string _ruleValue = "(COMMA  clause_json_info)+\r\n";
        
        private static string _ruleName = "clause_json_infos";
        
        public AstClauseJsonInfos(params AstClauseJsonInfo[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstClauseJsonInfos(Position position, params AstClauseJsonInfo[] items) : 
                base(position, items)
        {
        }
        
        public AstClauseJsonInfos(ParserRuleContext ctx, params AstClauseJsonInfo[] items) : 
                base(ctx, items)
        {
        }
        
        public AstClauseJsonInfos(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitClauseJsonInfos(this);
        }
        
        /// <summary>
        /// clause_json_infos
        /// 	 : (COMMA  clause_json_info)+
        /// </summary>
        public static AstClauseJsonInfos New(ParserRuleContext ctx, params AstClauseJsonInfo[] items)
        {
            return new AstClauseJsonInfos(ctx, items);
        }
        
        /// <summary>
        /// clause_json_infos
        /// 	 : (COMMA  clause_json_info)+
        /// </summary>
        public static AstClauseJsonInfos New(Position position, params AstClauseJsonInfo[] items)
        {
            return new AstClauseJsonInfos(position, items);
        }
        
        /// <summary>
        /// clause_json_infos
        /// 	 : (COMMA  clause_json_info)+
        /// </summary>
        public static AstClauseJsonInfos New(params AstClauseJsonInfo[] items)
        {
            return new AstClauseJsonInfos(Position.Default, items);
        }
        
        public static AstClauseJsonInfos? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// contract_items
    /// 	 : contract_item  (COMMA  contract_item+)*
    /// </summary>
    public partial class AstContractItems : AstRuleList<AstContractItem>
    {
        
        private static string _ruleValue = "contract_item  (COMMA  contract_item+)*\r\n";
        
        private static string _ruleName = "contract_items";
        
        public AstContractItems(params AstContractItem[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstContractItems(Position position, params AstContractItem[] items) : 
                base(position, items)
        {
        }
        
        public AstContractItems(ParserRuleContext ctx, params AstContractItem[] items) : 
                base(ctx, items)
        {
        }
        
        public AstContractItems(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractItems(this);
        }
        
        /// <summary>
        /// contract_items
        /// 	 : contract_item  (COMMA  contract_item+)*
        /// </summary>
        public static AstContractItems New(ParserRuleContext ctx, params AstContractItem[] items)
        {
            return new AstContractItems(ctx, items);
        }
        
        /// <summary>
        /// contract_items
        /// 	 : contract_item  (COMMA  contract_item+)*
        /// </summary>
        public static AstContractItems New(Position position, params AstContractItem[] items)
        {
            return new AstContractItems(position, items);
        }
        
        /// <summary>
        /// contract_items
        /// 	 : contract_item  (COMMA  contract_item+)*
        /// </summary>
        public static AstContractItems New(params AstContractItem[] items)
        {
            return new AstContractItems(Position.Default, items);
        }
        
        public static AstContractItems? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// date_options
    /// 	 : date_option  (COMMA  date_option)+
    /// </summary>
    public partial class AstDateOptions : AstRuleList<AstDateOption>
    {
        
        private static string _ruleValue = "date_option  (COMMA  date_option)+\r\n";
        
        private static string _ruleName = "date_options";
        
        public AstDateOptions(params AstDateOption[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDateOptions(Position position, params AstDateOption[] items) : 
                base(position, items)
        {
        }
        
        public AstDateOptions(ParserRuleContext ctx, params AstDateOption[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDateOptions(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateOptions(this);
        }
        
        /// <summary>
        /// date_options
        /// 	 : date_option  (COMMA  date_option)+
        /// </summary>
        public static AstDateOptions New(ParserRuleContext ctx, params AstDateOption[] items)
        {
            return new AstDateOptions(ctx, items);
        }
        
        /// <summary>
        /// date_options
        /// 	 : date_option  (COMMA  date_option)+
        /// </summary>
        public static AstDateOptions New(Position position, params AstDateOption[] items)
        {
            return new AstDateOptions(position, items);
        }
        
        /// <summary>
        /// date_options
        /// 	 : date_option  (COMMA  date_option)+
        /// </summary>
        public static AstDateOptions New(params AstDateOption[] items)
        {
            return new AstDateOptions(Position.Default, items);
        }
        
        public static AstDateOptions? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// xml_common_directives
    /// 	 : xml_common_directive  (COMMA  xml_common_directive)*
    /// </summary>
    public partial class AstXmlCommonDirectives : AstRuleList<AstXmlCommonDirective>
    {
        
        private static string _ruleValue = "xml_common_directive  (COMMA  xml_common_directive)*\r\n";
        
        private static string _ruleName = "xml_common_directives";
        
        public AstXmlCommonDirectives(params AstXmlCommonDirective[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstXmlCommonDirectives(Position position, params AstXmlCommonDirective[] items) : 
                base(position, items)
        {
        }
        
        public AstXmlCommonDirectives(ParserRuleContext ctx, params AstXmlCommonDirective[] items) : 
                base(ctx, items)
        {
        }
        
        public AstXmlCommonDirectives(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlCommonDirectives(this);
        }
        
        /// <summary>
        /// xml_common_directives
        /// 	 : xml_common_directive  (COMMA  xml_common_directive)*
        /// </summary>
        public static AstXmlCommonDirectives New(ParserRuleContext ctx, params AstXmlCommonDirective[] items)
        {
            return new AstXmlCommonDirectives(ctx, items);
        }
        
        /// <summary>
        /// xml_common_directives
        /// 	 : xml_common_directive  (COMMA  xml_common_directive)*
        /// </summary>
        public static AstXmlCommonDirectives New(Position position, params AstXmlCommonDirective[] items)
        {
            return new AstXmlCommonDirectives(position, items);
        }
        
        /// <summary>
        /// xml_common_directives
        /// 	 : xml_common_directive  (COMMA  xml_common_directive)*
        /// </summary>
        public static AstXmlCommonDirectives New(params AstXmlCommonDirective[] items)
        {
            return new AstXmlCommonDirectives(Position.Default, items);
        }
        
        public static AstXmlCommonDirectives? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// receive_ids
    /// 	 : receive_id  (COMMA  receive_id)+
    /// </summary>
    public partial class AstReceiveIds : AstRuleList<AstReceiveId>
    {
        
        private static string _ruleValue = "receive_id  (COMMA  receive_id)+\r\n";
        
        private static string _ruleName = "receive_ids";
        
        public AstReceiveIds(params AstReceiveId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstReceiveIds(Position position, params AstReceiveId[] items) : 
                base(position, items)
        {
        }
        
        public AstReceiveIds(ParserRuleContext ctx, params AstReceiveId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstReceiveIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveIds(this);
        }
        
        /// <summary>
        /// receive_ids
        /// 	 : receive_id  (COMMA  receive_id)+
        /// </summary>
        public static AstReceiveIds New(ParserRuleContext ctx, params AstReceiveId[] items)
        {
            return new AstReceiveIds(ctx, items);
        }
        
        /// <summary>
        /// receive_ids
        /// 	 : receive_id  (COMMA  receive_id)+
        /// </summary>
        public static AstReceiveIds New(Position position, params AstReceiveId[] items)
        {
            return new AstReceiveIds(position, items);
        }
        
        /// <summary>
        /// receive_ids
        /// 	 : receive_id  (COMMA  receive_id)+
        /// </summary>
        public static AstReceiveIds New(params AstReceiveId[] items)
        {
            return new AstReceiveIds(Position.Default, items);
        }
        
        public static AstReceiveIds? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common_partials
    /// 	 : declare_set_cursor_common_partial+
    /// </summary>
    public partial class AstDeclareSetCursorCommonPartials : AstRuleList<AstDeclareSetCursorCommonPartial>
    {
        
        private static string _ruleValue = "declare_set_cursor_common_partial+\r\n";
        
        private static string _ruleName = "declare_set_cursor_common_partials";
        
        public AstDeclareSetCursorCommonPartials(params AstDeclareSetCursorCommonPartial[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstDeclareSetCursorCommonPartials(Position position, params AstDeclareSetCursorCommonPartial[] items) : 
                base(position, items)
        {
        }
        
        public AstDeclareSetCursorCommonPartials(ParserRuleContext ctx, params AstDeclareSetCursorCommonPartial[] items) : 
                base(ctx, items)
        {
        }
        
        public AstDeclareSetCursorCommonPartials(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommonPartials(this);
        }
        
        /// <summary>
        /// declare_set_cursor_common_partials
        /// 	 : declare_set_cursor_common_partial+
        /// </summary>
        public static AstDeclareSetCursorCommonPartials New(ParserRuleContext ctx, params AstDeclareSetCursorCommonPartial[] items)
        {
            return new AstDeclareSetCursorCommonPartials(ctx, items);
        }
        
        /// <summary>
        /// declare_set_cursor_common_partials
        /// 	 : declare_set_cursor_common_partial+
        /// </summary>
        public static AstDeclareSetCursorCommonPartials New(Position position, params AstDeclareSetCursorCommonPartial[] items)
        {
            return new AstDeclareSetCursorCommonPartials(position, items);
        }
        
        /// <summary>
        /// declare_set_cursor_common_partials
        /// 	 : declare_set_cursor_common_partial+
        /// </summary>
        public static AstDeclareSetCursorCommonPartials New(params AstDeclareSetCursorCommonPartial[] items)
        {
            return new AstDeclareSetCursorCommonPartials(Position.Default, items);
        }
        
        public static AstDeclareSetCursorCommonPartials? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// column_definition_elements
    /// 	 : column_definition_element+
    /// </summary>
    public partial class AstColumnDefinitionElements : AstRuleList<AstColumnDefinitionElement>
    {
        
        private static string _ruleValue = "column_definition_element+\r\n";
        
        private static string _ruleName = "column_definition_elements";
        
        public AstColumnDefinitionElements(params AstColumnDefinitionElement[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstColumnDefinitionElements(Position position, params AstColumnDefinitionElement[] items) : 
                base(position, items)
        {
        }
        
        public AstColumnDefinitionElements(ParserRuleContext ctx, params AstColumnDefinitionElement[] items) : 
                base(ctx, items)
        {
        }
        
        public AstColumnDefinitionElements(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinitionElements(this);
        }
        
        /// <summary>
        /// column_definition_elements
        /// 	 : column_definition_element+
        /// </summary>
        public static AstColumnDefinitionElements New(ParserRuleContext ctx, params AstColumnDefinitionElement[] items)
        {
            return new AstColumnDefinitionElements(ctx, items);
        }
        
        /// <summary>
        /// column_definition_elements
        /// 	 : column_definition_element+
        /// </summary>
        public static AstColumnDefinitionElements New(Position position, params AstColumnDefinitionElement[] items)
        {
            return new AstColumnDefinitionElements(position, items);
        }
        
        /// <summary>
        /// column_definition_elements
        /// 	 : column_definition_element+
        /// </summary>
        public static AstColumnDefinitionElements New(params AstColumnDefinitionElement[] items)
        {
            return new AstColumnDefinitionElements(Position.Default, items);
        }
        
        public static AstColumnDefinitionElements? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// file_group_list
    /// 	 : file_group_assign  (COMMA  file_group_assign)*
    /// </summary>
    public partial class AstFileGroupList : AstRuleList<AstFileGroupAssign>
    {
        
        private static string _ruleValue = "file_group_assign  (COMMA  file_group_assign)*\r\n";
        
        private static string _ruleName = "file_group_list";
        
        public AstFileGroupList(params AstFileGroupAssign[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstFileGroupList(Position position, params AstFileGroupAssign[] items) : 
                base(position, items)
        {
        }
        
        public AstFileGroupList(ParserRuleContext ctx, params AstFileGroupAssign[] items) : 
                base(ctx, items)
        {
        }
        
        public AstFileGroupList(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupList(this);
        }
        
        /// <summary>
        /// file_group_list
        /// 	 : file_group_assign  (COMMA  file_group_assign)*
        /// </summary>
        public static AstFileGroupList New(ParserRuleContext ctx, params AstFileGroupAssign[] items)
        {
            return new AstFileGroupList(ctx, items);
        }
        
        /// <summary>
        /// file_group_list
        /// 	 : file_group_assign  (COMMA  file_group_assign)*
        /// </summary>
        public static AstFileGroupList New(Position position, params AstFileGroupAssign[] items)
        {
            return new AstFileGroupList(position, items);
        }
        
        /// <summary>
        /// file_group_list
        /// 	 : file_group_assign  (COMMA  file_group_assign)*
        /// </summary>
        public static AstFileGroupList New(params AstFileGroupAssign[] items)
        {
            return new AstFileGroupList(Position.Default, items);
        }
        
        public static AstFileGroupList? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// schema_table_ref_impacts
    /// 	 : schema_table_ref_impact  (COMMA  schema_table_ref_impact)*
    /// </summary>
    public partial class AstSchemaTableRefImpacts : AstRuleList<AstSchemaTableRefImpact>
    {
        
        private static string _ruleValue = "schema_table_ref_impact  (COMMA  schema_table_ref_impact)*\r\n";
        
        private static string _ruleName = "schema_table_ref_impacts";
        
        public AstSchemaTableRefImpacts(params AstSchemaTableRefImpact[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstSchemaTableRefImpacts(Position position, params AstSchemaTableRefImpact[] items) : 
                base(position, items)
        {
        }
        
        public AstSchemaTableRefImpacts(ParserRuleContext ctx, params AstSchemaTableRefImpact[] items) : 
                base(ctx, items)
        {
        }
        
        public AstSchemaTableRefImpacts(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaTableRefImpacts(this);
        }
        
        /// <summary>
        /// schema_table_ref_impacts
        /// 	 : schema_table_ref_impact  (COMMA  schema_table_ref_impact)*
        /// </summary>
        public static AstSchemaTableRefImpacts New(ParserRuleContext ctx, params AstSchemaTableRefImpact[] items)
        {
            return new AstSchemaTableRefImpacts(ctx, items);
        }
        
        /// <summary>
        /// schema_table_ref_impacts
        /// 	 : schema_table_ref_impact  (COMMA  schema_table_ref_impact)*
        /// </summary>
        public static AstSchemaTableRefImpacts New(Position position, params AstSchemaTableRefImpact[] items)
        {
            return new AstSchemaTableRefImpacts(position, items);
        }
        
        /// <summary>
        /// schema_table_ref_impacts
        /// 	 : schema_table_ref_impact  (COMMA  schema_table_ref_impact)*
        /// </summary>
        public static AstSchemaTableRefImpacts New(params AstSchemaTableRefImpact[] items)
        {
            return new AstSchemaTableRefImpacts(Position.Default, items);
        }
        
        public static AstSchemaTableRefImpacts? Null()
        {
            return null;
        }
    }
    
    /// <summary>
    /// notification_ids
    /// 	 : notification_id  (COMMA  notification_id)*
    /// </summary>
    public partial class AstNotificationIds : AstRuleList<AstNotificationId>
    {
        
        private static string _ruleValue = "notification_id  (COMMA  notification_id)*\r\n";
        
        private static string _ruleName = "notification_ids";
        
        public AstNotificationIds(params AstNotificationId[] items) : 
                base(Position.Default, items)
        {
        }
        
        public AstNotificationIds(Position position, params AstNotificationId[] items) : 
                base(position, items)
        {
        }
        
        public AstNotificationIds(ParserRuleContext ctx, params AstNotificationId[] items) : 
                base(ctx, items)
        {
        }
        
        public AstNotificationIds(ParserRuleContext ctx, int capacity) : 
                base(ctx, capacity)
        {
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNotificationIds(this);
        }
        
        /// <summary>
        /// notification_ids
        /// 	 : notification_id  (COMMA  notification_id)*
        /// </summary>
        public static AstNotificationIds New(ParserRuleContext ctx, params AstNotificationId[] items)
        {
            return new AstNotificationIds(ctx, items);
        }
        
        /// <summary>
        /// notification_ids
        /// 	 : notification_id  (COMMA  notification_id)*
        /// </summary>
        public static AstNotificationIds New(Position position, params AstNotificationId[] items)
        {
            return new AstNotificationIds(position, items);
        }
        
        /// <summary>
        /// notification_ids
        /// 	 : notification_id  (COMMA  notification_id)*
        /// </summary>
        public static AstNotificationIds New(params AstNotificationId[] items)
        {
            return new AstNotificationIds(Position.Default, items);
        }
        
        public static AstNotificationIds? Null()
        {
            return null;
        }
    }
}
