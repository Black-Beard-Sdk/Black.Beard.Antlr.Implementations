#nullable disable
// Generated by ScriptClassWithProperties.cs (vendredi 5 mai 2023)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bb.SqlServer.Asts
{
    using System;
    using Bb.Asts;
    using Bb.Parsers;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Tree;
    using System.Collections;
    
    
    /// <summary>
    /// block_statement : BEGIN  SEMI?  sql_clauses?  END
    /// </summary>
    public partial class AstBlockStatement : AstBnfRule
    {
        
        private AstSqlClauses? _sqlClauses;
        
        private static string _ruleValue = "BEGIN  SEMI?  sql_clauses?  END";
        
        private static string _ruleName = "block_statement";
        
        public AstBlockStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClauses?>())
                {
                    this._sqlClauses = ((AstSqlClauses?)(enumerator.Current));
                }
            }
        }
        
        public AstBlockStatement(Position p, AstSqlClauses? sqlClauses) : 
                base(p)
        {
            this._sqlClauses = sqlClauses;
        }
        
        public AstBlockStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSqlClauses?>())
                {
                    this._sqlClauses = ((AstSqlClauses?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSqlClauses? SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBlockStatement(this);
        }
        
        public static AstBlockStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// block_statement : 
        ///    BEGIN SEMI? sql_clauses? END 
        /// </summary>
        public static AstBlockStatement New(AstSqlClauses? sqlClauses)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(sqlClauses);
            return new AstBlockStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// return_statement : RETURN  expression?
    /// </summary>
    public partial class AstReturnStatement : AstBnfRule
    {
        
        private AstExpression? _expression;
        
        private static string _ruleValue = "RETURN  expression?";
        
        private static string _ruleName = "return_statement";
        
        public AstReturnStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression?>())
                {
                    this._expression = ((AstExpression?)(enumerator.Current));
                }
            }
        }
        
        public AstReturnStatement(Position p, AstExpression? expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstReturnStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression?>())
                {
                    this._expression = ((AstExpression?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression? Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReturnStatement(this);
        }
        
        public static AstReturnStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// return_statement : 
        ///    RETURN expression? 
        /// </summary>
        public static AstReturnStatement New(AstExpression? expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expression);
            return new AstReturnStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// if_statement : IF  search_condition  sql_clause_true = sql_clause  (ELSE  sql_clause_false = sql_clause)?
    /// </summary>
    public partial class AstIfStatement : AstBnfRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstSqlClause _sqlClauseTrue;
        
        private AstSqlClause _sqlClauseFalse;
        
        private static string _ruleValue = "IF  search_condition  sql_clause_true = sql_clause  (ELSE  sql_clause_false = sql" +
            "_clause)?";
        
        private static string _ruleName = "if_statement";
        
        public AstIfStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClauseTrue = ((AstSqlClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClauseFalse = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public AstIfStatement(Position p, AstSearchCondition searchCondition, AstSqlClause sqlClauseTrue, AstSqlClause sqlClauseFalse) : 
                base(p)
        {
            this._searchCondition = searchCondition;
            this._sqlClauseTrue = sqlClauseTrue;
            this._sqlClauseFalse = sqlClauseFalse;
        }
        
        public AstIfStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClauseTrue = ((AstSqlClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause>())
                {
                    this._sqlClauseFalse = ((AstSqlClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstSqlClause SqlClauseTrue
        {
            get
            {
                return this._sqlClauseTrue;
            }
        }
        
        public virtual AstSqlClause SqlClauseFalse
        {
            get
            {
                return this._sqlClauseFalse;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIfStatement(this);
        }
        
        public static AstIfStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// if_statement : 
        ///    IF search_condition sql_clause_true=sql_clause ELSE sql_clause_false=sql_clause 
        /// </summary>
        public static AstIfStatement New(AstSearchCondition searchCondition, AstSqlClause sqlClauseTrue, AstSqlClause sqlClauseFalse)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(searchCondition);
            list.Add(sqlClauseTrue);
            list.Add(sqlClauseFalse);
            return new AstIfStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// throw_error_number : decimal_local_id
    /// </summary>
    public partial class AstThrowErrorNumber : AstBnfRule
    {
        
        private AstDecimalLocalId _decimalLocalId;
        
        private static string _ruleValue = "decimal_local_id";
        
        private static string _ruleName = "throw_error_number";
        
        public AstThrowErrorNumber(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowErrorNumber(Position p, AstDecimalLocalId decimalLocalId) : 
                base(p)
        {
            this._decimalLocalId = decimalLocalId;
        }
        
        public AstThrowErrorNumber(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowErrorNumber(this);
        }
        
        public static AstThrowErrorNumber? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// throw_error_number : 
        ///    decimal_local_id 
        /// </summary>
        public static AstThrowErrorNumber New(AstDecimalLocalId decimalLocalId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decimalLocalId);
            return new AstThrowErrorNumber(Position.Default, list);
        }
    }
    
    /// <summary>
    /// throw_message : string_local_id
    /// </summary>
    public partial class AstThrowMessage : AstBnfRule
    {
        
        private AstStringLocalId _stringLocalId;
        
        private static string _ruleValue = "string_local_id";
        
        private static string _ruleName = "throw_message";
        
        public AstThrowMessage(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringLocalId>())
                {
                    this._stringLocalId = ((AstStringLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowMessage(Position p, AstStringLocalId stringLocalId) : 
                base(p)
        {
            this._stringLocalId = stringLocalId;
        }
        
        public AstThrowMessage(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringLocalId>())
                {
                    this._stringLocalId = ((AstStringLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringLocalId StringLocalId
        {
            get
            {
                return this._stringLocalId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowMessage(this);
        }
        
        public static AstThrowMessage? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// throw_message : 
        ///    string_local_id 
        /// </summary>
        public static AstThrowMessage New(AstStringLocalId stringLocalId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringLocalId);
            return new AstThrowMessage(Position.Default, list);
        }
    }
    
    /// <summary>
    /// throw_state : decimal_local_id
    /// </summary>
    public partial class AstThrowState : AstBnfRule
    {
        
        private AstDecimalLocalId _decimalLocalId;
        
        private static string _ruleValue = "decimal_local_id";
        
        private static string _ruleName = "throw_state";
        
        public AstThrowState(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstThrowState(Position p, AstDecimalLocalId decimalLocalId) : 
                base(p)
        {
            this._decimalLocalId = decimalLocalId;
        }
        
        public AstThrowState(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitThrowState(this);
        }
        
        public static AstThrowState? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// throw_state : 
        ///    decimal_local_id 
        /// </summary>
        public static AstThrowState New(AstDecimalLocalId decimalLocalId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decimalLocalId);
            return new AstThrowState(Position.Default, list);
        }
    }
    
    /// <summary>
    /// waitfor_statement : WAITFOR  receive_statement?  COMMA?  (delay_time_timeout  timespan)?  expression?
    /// </summary>
    public partial class AstWaitforStatement : AstBnfRule
    {
        
        private AstReceiveStatement? _receiveStatement;
        
        private AstDelayTimeTimeout _delayTimeTimeout;
        
        private AstTimespan _timespan;
        
        private AstExpression? _expression;
        
        private static string _ruleValue = "WAITFOR  receive_statement?  COMMA?  (delay_time_timeout  timespan)?  expression?" +
            "";
        
        private static string _ruleName = "waitfor_statement";
        
        public AstWaitforStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement?>())
                {
                    this._receiveStatement = ((AstReceiveStatement?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDelayTimeTimeout>())
                {
                    this._delayTimeTimeout = ((AstDelayTimeTimeout)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTimespan>())
                {
                    this._timespan = ((AstTimespan)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression?>())
                {
                    this._expression = ((AstExpression?)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforStatement(Position p, AstReceiveStatement? receiveStatement, AstDelayTimeTimeout delayTimeTimeout, AstTimespan timespan, AstExpression? expression) : 
                base(p)
        {
            this._receiveStatement = receiveStatement;
            this._delayTimeTimeout = delayTimeTimeout;
            this._timespan = timespan;
            this._expression = expression;
        }
        
        public AstWaitforStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveStatement?>())
                {
                    this._receiveStatement = ((AstReceiveStatement?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDelayTimeTimeout>())
                {
                    this._delayTimeTimeout = ((AstDelayTimeTimeout)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTimespan>())
                {
                    this._timespan = ((AstTimespan)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression?>())
                {
                    this._expression = ((AstExpression?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveStatement? ReceiveStatement
        {
            get
            {
                return this._receiveStatement;
            }
        }
        
        public virtual AstDelayTimeTimeout DelayTimeTimeout
        {
            get
            {
                return this._delayTimeTimeout;
            }
        }
        
        public virtual AstTimespan Timespan
        {
            get
            {
                return this._timespan;
            }
        }
        
        public virtual AstExpression? Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforStatement(this);
        }
        
        public static AstWaitforStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// waitfor_statement : 
        ///    WAITFOR receive_statement? COMMA? delay_time_timeout timespan expression? 
        /// </summary>
        public static AstWaitforStatement New(AstReceiveStatement? receiveStatement, AstDelayTimeTimeout delayTimeTimeout, AstTimespan timespan, AstExpression? expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(receiveStatement);
            list.Add(delayTimeTimeout);
            list.Add(timespan);
            list.Add(expression);
            return new AstWaitforStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// while_statement : WHILE  search_condition  while_statement_content
    /// </summary>
    public partial class AstWhileStatement : AstBnfRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstWhileStatementContent _whileStatementContent;
        
        private static string _ruleValue = "WHILE  search_condition  while_statement_content";
        
        private static string _ruleName = "while_statement";
        
        public AstWhileStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhileStatementContent>())
                {
                    this._whileStatementContent = ((AstWhileStatementContent)(enumerator.Current));
                }
            }
        }
        
        public AstWhileStatement(Position p, AstSearchCondition searchCondition, AstWhileStatementContent whileStatementContent) : 
                base(p)
        {
            this._searchCondition = searchCondition;
            this._whileStatementContent = whileStatementContent;
        }
        
        public AstWhileStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhileStatementContent>())
                {
                    this._whileStatementContent = ((AstWhileStatementContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstWhileStatementContent WhileStatementContent
        {
            get
            {
                return this._whileStatementContent;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhileStatement(this);
        }
        
        public static AstWhileStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// while_statement : 
        ///    WHILE search_condition while_statement_content 
        /// </summary>
        public static AstWhileStatement New(AstSearchCondition searchCondition, AstWhileStatementContent whileStatementContent)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(searchCondition);
            list.Add(whileStatementContent);
            return new AstWhileStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// print_statement : PRINT  (expression | empty_value)  local_ids?
    /// </summary>
    public partial class AstPrintStatement : AstBnfRule
    {
        
        private AstExpression _expression;
        
        private AstEmptyValue _emptyValue;
        
        private AstLocalIds? _localIds;
        
        private static string _ruleValue = "PRINT  (expression | empty_value)  local_ids?";
        
        private static string _ruleName = "print_statement";
        
        public AstPrintStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEmptyValue>())
                {
                    this._emptyValue = ((AstEmptyValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds?>())
                {
                    this._localIds = ((AstLocalIds?)(enumerator.Current));
                }
            }
        }
        
        public AstPrintStatement(Position p, AstExpression expression, AstEmptyValue emptyValue, AstLocalIds? localIds) : 
                base(p)
        {
            this._expression = expression;
            this._emptyValue = emptyValue;
            this._localIds = localIds;
        }
        
        public AstPrintStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEmptyValue>())
                {
                    this._emptyValue = ((AstEmptyValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds?>())
                {
                    this._localIds = ((AstLocalIds?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstEmptyValue EmptyValue
        {
            get
            {
                return this._emptyValue;
            }
        }
        
        public virtual AstLocalIds? LocalIds
        {
            get
            {
                return this._localIds;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrintStatement(this);
        }
        
        public static AstPrintStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// print_statement : 
        ///    PRINT expression local_ids? 
        /// </summary>
        public static AstPrintStatement New(AstExpression expression, AstLocalIds? localIds)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expression);
            list.Add(localIds);
            return new AstPrintStatement(Position.Default, list);
        }
        
        /// <summary>
        /// print_statement : 
        ///    PRINT empty_value local_ids? 
        /// </summary>
        public static AstPrintStatement New(AstEmptyValue emptyValue, AstLocalIds? localIds)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(emptyValue);
            list.Add(localIds);
            return new AstPrintStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// constant_local_id_or_null : constant_local_id | NULL_
    /// </summary>
    public partial class AstConstantLocalIdOrNull : AstBnfRule
    {
        
        private AstConstantLocalId _constantLocalId;
        
        private static string _ruleValue = "constant_local_id | NULL_";
        
        private static string _ruleName = "constant_local_id_or_null";
        
        public AstConstantLocalIdOrNull(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstConstantLocalId>())
                {
                    this._constantLocalId = ((AstConstantLocalId)(enumerator.Current));
                }
            }
        }
        
        public AstConstantLocalIdOrNull(Position p, AstConstantLocalId constantLocalId) : 
                base(p)
        {
            this._constantLocalId = constantLocalId;
        }
        
        public AstConstantLocalIdOrNull(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstConstantLocalId>())
                {
                    this._constantLocalId = ((AstConstantLocalId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstConstantLocalId ConstantLocalId
        {
            get
            {
                return this._constantLocalId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitConstantLocalIdOrNull(this);
        }
        
        public static AstConstantLocalIdOrNull? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// constant_local_id_or_null : 
        ///    constant_local_id 
        /// </summary>
        public static AstConstantLocalIdOrNull New(AstConstantLocalId constantLocalId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(constantLocalId);
            return new AstConstantLocalIdOrNull(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_application_role : ALTER  APPLICATION  ROLE  role_id  WITH  (COMMA?  NAME  EQUAL  new_role = role_id)?  (COMMA?  password_setting)?  (COMMA?  default_schema_set)?
    /// </summary>
    public partial class AstAlterApplicationRole : AstBnfRule
    {
        
        private AstRoleId _roleId;
        
        private AstRoleId _newRole;
        
        private AstPasswordSetting _passwordSetting;
        
        private AstDefaultSchemaSet _defaultSchemaSet;
        
        private static string _ruleValue = "ALTER  APPLICATION  ROLE  role_id  WITH  (COMMA?  NAME  EQUAL  new_role = role_id" +
            ")?  (COMMA?  password_setting)?  (COMMA?  default_schema_set)?";
        
        private static string _ruleName = "alter_application_role";
        
        public AstAlterApplicationRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._newRole = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultSchemaSet>())
                {
                    this._defaultSchemaSet = ((AstDefaultSchemaSet)(enumerator.Current));
                }
            }
        }
        
        public AstAlterApplicationRole(Position p, AstRoleId roleId, AstRoleId newRole, AstPasswordSetting passwordSetting, AstDefaultSchemaSet defaultSchemaSet) : 
                base(p)
        {
            this._roleId = roleId;
            this._newRole = newRole;
            this._passwordSetting = passwordSetting;
            this._defaultSchemaSet = defaultSchemaSet;
        }
        
        public AstAlterApplicationRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._newRole = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultSchemaSet>())
                {
                    this._defaultSchemaSet = ((AstDefaultSchemaSet)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public virtual AstRoleId NewRole
        {
            get
            {
                return this._newRole;
            }
        }
        
        public virtual AstPasswordSetting PasswordSetting
        {
            get
            {
                return this._passwordSetting;
            }
        }
        
        public virtual AstDefaultSchemaSet DefaultSchemaSet
        {
            get
            {
                return this._defaultSchemaSet;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterApplicationRole(this);
        }
        
        public static AstAlterApplicationRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_application_role : 
        ///    ALTER APPLICATION ROLE role_id WITH COMMA? NAME EQUAL new_role=role_id COMMA? password_setting COMMA? default_schema_set 
        /// </summary>
        public static AstAlterApplicationRole New(AstRoleId roleId, AstRoleId newRole, AstPasswordSetting passwordSetting, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(roleId);
            list.Add(newRole);
            list.Add(passwordSetting);
            list.Add(defaultSchemaSet);
            return new AstAlterApplicationRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_application_role : CREATE  APPLICATION  ROLE  role_id  WITH  (COMMA?  password_setting)?  (COMMA?  default_schema_set)?
    /// </summary>
    public partial class AstCreateApplicationRole : AstBnfRule
    {
        
        private AstRoleId _roleId;
        
        private AstPasswordSetting _passwordSetting;
        
        private AstDefaultSchemaSet _defaultSchemaSet;
        
        private static string _ruleValue = "CREATE  APPLICATION  ROLE  role_id  WITH  (COMMA?  password_setting)?  (COMMA?  d" +
            "efault_schema_set)?";
        
        private static string _ruleName = "create_application_role";
        
        public AstCreateApplicationRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultSchemaSet>())
                {
                    this._defaultSchemaSet = ((AstDefaultSchemaSet)(enumerator.Current));
                }
            }
        }
        
        public AstCreateApplicationRole(Position p, AstRoleId roleId, AstPasswordSetting passwordSetting, AstDefaultSchemaSet defaultSchemaSet) : 
                base(p)
        {
            this._roleId = roleId;
            this._passwordSetting = passwordSetting;
            this._defaultSchemaSet = defaultSchemaSet;
        }
        
        public AstCreateApplicationRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultSchemaSet>())
                {
                    this._defaultSchemaSet = ((AstDefaultSchemaSet)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public virtual AstPasswordSetting PasswordSetting
        {
            get
            {
                return this._passwordSetting;
            }
        }
        
        public virtual AstDefaultSchemaSet DefaultSchemaSet
        {
            get
            {
                return this._defaultSchemaSet;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateApplicationRole(this);
        }
        
        public static AstCreateApplicationRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_application_role : 
        ///    CREATE APPLICATION ROLE role_id WITH COMMA? password_setting COMMA? default_schema_set 
        /// </summary>
        public static AstCreateApplicationRole New(AstRoleId roleId, AstPasswordSetting passwordSetting, AstDefaultSchemaSet defaultSchemaSet)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(roleId);
            list.Add(passwordSetting);
            list.Add(defaultSchemaSet);
            return new AstCreateApplicationRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_aggregate : DROP  AGGREGATE  (IF  EXISTS)?  schema_aggregate_ref
    /// </summary>
    public partial class AstDropAggregate : AstBnfRule
    {
        
        private AstSchemaAggregateRef _schemaAggregateRef;
        
        private static string _ruleValue = "DROP  AGGREGATE  (IF  EXISTS)?  schema_aggregate_ref";
        
        private static string _ruleName = "drop_aggregate";
        
        public AstDropAggregate(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaAggregateRef>())
                {
                    this._schemaAggregateRef = ((AstSchemaAggregateRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropAggregate(Position p, AstSchemaAggregateRef schemaAggregateRef) : 
                base(p)
        {
            this._schemaAggregateRef = schemaAggregateRef;
        }
        
        public AstDropAggregate(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaAggregateRef>())
                {
                    this._schemaAggregateRef = ((AstSchemaAggregateRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaAggregateRef SchemaAggregateRef
        {
            get
            {
                return this._schemaAggregateRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAggregate(this);
        }
        
        public static AstDropAggregate? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_aggregate : 
        ///    DROP AGGREGATE IF EXISTS schema_aggregate_ref 
        /// </summary>
        public static AstDropAggregate New(AstSchemaAggregateRef schemaAggregateRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaAggregateRef);
            return new AstDropAggregate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_application_role : DROP  APPLICATION  ROLE  role_id
    /// </summary>
    public partial class AstDropApplicationRole : AstBnfRule
    {
        
        private AstRoleId _roleId;
        
        private static string _ruleValue = "DROP  APPLICATION  ROLE  role_id";
        
        private static string _ruleName = "drop_application_role";
        
        public AstDropApplicationRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropApplicationRole(Position p, AstRoleId roleId) : 
                base(p)
        {
            this._roleId = roleId;
        }
        
        public AstDropApplicationRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropApplicationRole(this);
        }
        
        public static AstDropApplicationRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_application_role : 
        ///    DROP APPLICATION ROLE role_id 
        /// </summary>
        public static AstDropApplicationRole New(AstRoleId roleId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(roleId);
            return new AstDropApplicationRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly : alter_assembly_start  assembly_id  alter_assembly_clause
    /// </summary>
    public partial class AstAlterAssembly : AstBnfRule
    {
        
        private AstAlterAssemblyStart _alterAssemblyStart;
        
        private AstAssemblyId _assemblyId;
        
        private AstAlterAssemblyClause _alterAssemblyClause;
        
        private static string _ruleValue = "alter_assembly_start  assembly_id  alter_assembly_clause";
        
        private static string _ruleName = "alter_assembly";
        
        public AstAlterAssembly(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssembly(Position p, AstAlterAssemblyStart alterAssemblyStart, AstAssemblyId assemblyId, AstAlterAssemblyClause alterAssemblyClause) : 
                base(p)
        {
            this._alterAssemblyStart = alterAssemblyStart;
            this._assemblyId = assemblyId;
            this._alterAssemblyClause = alterAssemblyClause;
        }
        
        public AstAlterAssembly(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyStart>())
                {
                    this._alterAssemblyStart = ((AstAlterAssemblyStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyClause>())
                {
                    this._alterAssemblyClause = ((AstAlterAssemblyClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyStart AlterAssemblyStart
        {
            get
            {
                return this._alterAssemblyStart;
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstAlterAssemblyClause AlterAssemblyClause
        {
            get
            {
                return this._alterAssemblyClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssembly(this);
        }
        
        public static AstAlterAssembly? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly : 
        ///    alter_assembly_start assembly_id alter_assembly_clause 
        /// </summary>
        public static AstAlterAssembly New(AstAlterAssemblyStart alterAssemblyStart, AstAssemblyId assemblyId, AstAlterAssemblyClause alterAssemblyClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterAssemblyStart);
            list.Add(assemblyId);
            list.Add(alterAssemblyClause);
            return new AstAlterAssembly(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_clause : alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_clause?  alter_assembly_add_clause?
    /// </summary>
    public partial class AstAlterAssemblyClause : AstBnfRule
    {
        
        private AstAlterAssemblyFromClause? _alterAssemblyFromClause;
        
        private AstAlterAssemblyWithClause? _alterAssemblyWithClause;
        
        private AstAlterAssemblyDropClause? _alterAssemblyDropClause;
        
        private AstAlterAssemblyAddClause? _alterAssemblyAddClause;
        
        private static string _ruleValue = "alter_assembly_from_clause?  alter_assembly_with_clause?  alter_assembly_drop_cla" +
            "use?  alter_assembly_add_clause?";
        
        private static string _ruleName = "alter_assembly_clause";
        
        public AstAlterAssemblyClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause?>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause?>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause?>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause?>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause?)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClause(Position p, AstAlterAssemblyFromClause? alterAssemblyFromClause, AstAlterAssemblyWithClause? alterAssemblyWithClause, AstAlterAssemblyDropClause? alterAssemblyDropClause, AstAlterAssemblyAddClause? alterAssemblyAddClause) : 
                base(p)
        {
            this._alterAssemblyFromClause = alterAssemblyFromClause;
            this._alterAssemblyWithClause = alterAssemblyWithClause;
            this._alterAssemblyDropClause = alterAssemblyDropClause;
            this._alterAssemblyAddClause = alterAssemblyAddClause;
        }
        
        public AstAlterAssemblyClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClause?>())
                {
                    this._alterAssemblyFromClause = ((AstAlterAssemblyFromClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyWithClause?>())
                {
                    this._alterAssemblyWithClause = ((AstAlterAssemblyWithClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropClause?>())
                {
                    this._alterAssemblyDropClause = ((AstAlterAssemblyDropClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyAddClause?>())
                {
                    this._alterAssemblyAddClause = ((AstAlterAssemblyAddClause?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClause? AlterAssemblyFromClause
        {
            get
            {
                return this._alterAssemblyFromClause;
            }
        }
        
        public virtual AstAlterAssemblyWithClause? AlterAssemblyWithClause
        {
            get
            {
                return this._alterAssemblyWithClause;
            }
        }
        
        public virtual AstAlterAssemblyDropClause? AlterAssemblyDropClause
        {
            get
            {
                return this._alterAssemblyDropClause;
            }
        }
        
        public virtual AstAlterAssemblyAddClause? AlterAssemblyAddClause
        {
            get
            {
                return this._alterAssemblyAddClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClause(this);
        }
        
        public static AstAlterAssemblyClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly_clause : 
        ///    alter_assembly_from_clause? alter_assembly_with_clause? alter_assembly_drop_clause? alter_assembly_add_clause? 
        /// </summary>
        public static AstAlterAssemblyClause New(AstAlterAssemblyFromClause? alterAssemblyFromClause, AstAlterAssemblyWithClause? alterAssemblyWithClause, AstAlterAssemblyDropClause? alterAssemblyDropClause, AstAlterAssemblyAddClause? alterAssemblyAddClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterAssemblyFromClause);
            list.Add(alterAssemblyWithClause);
            list.Add(alterAssemblyDropClause);
            list.Add(alterAssemblyAddClause);
            return new AstAlterAssemblyClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_from_clause : alter_assembly_from_clause_start  (client_assembly_specifier | alter_assembly_file_bits)
    /// </summary>
    public partial class AstAlterAssemblyFromClause : AstBnfRule
    {
        
        private AstAlterAssemblyFromClauseStart _alterAssemblyFromClauseStart;
        
        private AstClientAssemblySpecifier _clientAssemblySpecifier;
        
        private AstAlterAssemblyFileBits _alterAssemblyFileBits;
        
        private static string _ruleValue = "alter_assembly_from_clause_start  (client_assembly_specifier | alter_assembly_fil" +
            "e_bits)";
        
        private static string _ruleName = "alter_assembly_from_clause";
        
        public AstAlterAssemblyFromClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClientAssemblySpecifier>())
                {
                    this._clientAssemblySpecifier = ((AstClientAssemblySpecifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyFileBits>())
                {
                    this._alterAssemblyFileBits = ((AstAlterAssemblyFileBits)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFromClause(Position p, AstAlterAssemblyFromClauseStart alterAssemblyFromClauseStart, AstClientAssemblySpecifier clientAssemblySpecifier, AstAlterAssemblyFileBits alterAssemblyFileBits) : 
                base(p)
        {
            this._alterAssemblyFromClauseStart = alterAssemblyFromClauseStart;
            this._clientAssemblySpecifier = clientAssemblySpecifier;
            this._alterAssemblyFileBits = alterAssemblyFileBits;
        }
        
        public AstAlterAssemblyFromClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyFromClauseStart>())
                {
                    this._alterAssemblyFromClauseStart = ((AstAlterAssemblyFromClauseStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClientAssemblySpecifier>())
                {
                    this._clientAssemblySpecifier = ((AstClientAssemblySpecifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyFileBits>())
                {
                    this._alterAssemblyFileBits = ((AstAlterAssemblyFileBits)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyFromClauseStart AlterAssemblyFromClauseStart
        {
            get
            {
                return this._alterAssemblyFromClauseStart;
            }
        }
        
        public virtual AstClientAssemblySpecifier ClientAssemblySpecifier
        {
            get
            {
                return this._clientAssemblySpecifier;
            }
        }
        
        public virtual AstAlterAssemblyFileBits AlterAssemblyFileBits
        {
            get
            {
                return this._alterAssemblyFileBits;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFromClause(this);
        }
        
        public static AstAlterAssemblyFromClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly_from_clause : 
        ///    alter_assembly_from_clause_start client_assembly_specifier 
        /// </summary>
        public static AstAlterAssemblyFromClause New(AstAlterAssemblyFromClauseStart alterAssemblyFromClauseStart, AstClientAssemblySpecifier clientAssemblySpecifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterAssemblyFromClauseStart);
            list.Add(clientAssemblySpecifier);
            return new AstAlterAssemblyFromClause(Position.Default, list);
        }
        
        /// <summary>
        /// alter_assembly_from_clause : 
        ///    alter_assembly_from_clause_start alter_assembly_file_bits 
        /// </summary>
        public static AstAlterAssemblyFromClause New(AstAlterAssemblyFromClauseStart alterAssemblyFromClauseStart, AstAlterAssemblyFileBits alterAssemblyFileBits)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterAssemblyFromClauseStart);
            list.Add(alterAssemblyFileBits);
            return new AstAlterAssemblyFromClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_drop_clause : alter_assembly_drop  alter_assembly_drop_multiple_files
    /// </summary>
    public partial class AstAlterAssemblyDropClause : AstBnfRule
    {
        
        private AstAlterAssemblyDrop _alterAssemblyDrop;
        
        private AstAlterAssemblyDropMultipleFiles _alterAssemblyDropMultipleFiles;
        
        private static string _ruleValue = "alter_assembly_drop  alter_assembly_drop_multiple_files";
        
        private static string _ruleName = "alter_assembly_drop_clause";
        
        public AstAlterAssemblyDropClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyDropClause(Position p, AstAlterAssemblyDrop alterAssemblyDrop, AstAlterAssemblyDropMultipleFiles alterAssemblyDropMultipleFiles) : 
                base(p)
        {
            this._alterAssemblyDrop = alterAssemblyDrop;
            this._alterAssemblyDropMultipleFiles = alterAssemblyDropMultipleFiles;
        }
        
        public AstAlterAssemblyDropClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyDrop>())
                {
                    this._alterAssemblyDrop = ((AstAlterAssemblyDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAssemblyDropMultipleFiles>())
                {
                    this._alterAssemblyDropMultipleFiles = ((AstAlterAssemblyDropMultipleFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyDrop AlterAssemblyDrop
        {
            get
            {
                return this._alterAssemblyDrop;
            }
        }
        
        public virtual AstAlterAssemblyDropMultipleFiles AlterAssemblyDropMultipleFiles
        {
            get
            {
                return this._alterAssemblyDropMultipleFiles;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyDropClause(this);
        }
        
        public static AstAlterAssemblyDropClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly_drop_clause : 
        ///    alter_assembly_drop alter_assembly_drop_multiple_files 
        /// </summary>
        public static AstAlterAssemblyDropClause New(AstAlterAssemblyDrop alterAssemblyDrop, AstAlterAssemblyDropMultipleFiles alterAssemblyDropMultipleFiles)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterAssemblyDrop);
            list.Add(alterAssemblyDropMultipleFiles);
            return new AstAlterAssemblyDropClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_add_clause : ADD  FILE  FROM  alter_assembly_client_file_clause
    /// </summary>
    public partial class AstAlterAssemblyAddClause : AstBnfRule
    {
        
        private AstAlterAssemblyClientFileClause _alterAssemblyClientFileClause;
        
        private static string _ruleValue = "ADD  FILE  FROM  alter_assembly_client_file_clause";
        
        private static string _ruleName = "alter_assembly_add_clause";
        
        public AstAlterAssemblyAddClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyAddClause(Position p, AstAlterAssemblyClientFileClause alterAssemblyClientFileClause) : 
                base(p)
        {
            this._alterAssemblyClientFileClause = alterAssemblyClientFileClause;
        }
        
        public AstAlterAssemblyAddClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAssemblyClientFileClause>())
                {
                    this._alterAssemblyClientFileClause = ((AstAlterAssemblyClientFileClause)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAssemblyClientFileClause AlterAssemblyClientFileClause
        {
            get
            {
                return this._alterAssemblyClientFileClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyAddClause(this);
        }
        
        public static AstAlterAssemblyAddClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly_add_clause : 
        ///    ADD FILE FROM alter_assembly_client_file_clause 
        /// </summary>
        public static AstAlterAssemblyAddClause New(AstAlterAssemblyClientFileClause alterAssemblyClientFileClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterAssemblyClientFileClause);
            return new AstAlterAssemblyAddClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_client_file_clause : assembly_file_name  (AS  id_)?
    /// </summary>
    public partial class AstAlterAssemblyClientFileClause : AstBnfRule
    {
        
        private AstAssemblyFileName _assemblyFileName;
        
        private AstId _id;
        
        private static string _ruleValue = "assembly_file_name  (AS  id_)?";
        
        private static string _ruleName = "alter_assembly_client_file_clause";
        
        public AstAlterAssemblyClientFileClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyFileName>())
                {
                    this._assemblyFileName = ((AstAssemblyFileName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyClientFileClause(Position p, AstAssemblyFileName assemblyFileName, AstId id) : 
                base(p)
        {
            this._assemblyFileName = assemblyFileName;
            this._id = id;
        }
        
        public AstAlterAssemblyClientFileClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyFileName>())
                {
                    this._assemblyFileName = ((AstAssemblyFileName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyFileName AssemblyFileName
        {
            get
            {
                return this._assemblyFileName;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyClientFileClause(this);
        }
        
        public static AstAlterAssemblyClientFileClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly_client_file_clause : 
        ///    assembly_file_name AS id_ 
        /// </summary>
        public static AstAlterAssemblyClientFileClause New(AstAssemblyFileName assemblyFileName, AstId id)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(assemblyFileName);
            list.Add(id);
            return new AstAlterAssemblyClientFileClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// assembly_file_name : stringtext
    /// </summary>
    public partial class AstAssemblyFileName : AstBnfRule
    {
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "stringtext";
        
        private static string _ruleName = "assembly_file_name";
        
        public AstAssemblyFileName(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstAssemblyFileName(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstAssemblyFileName(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAssemblyFileName(this);
        }
        
        public static AstAssemblyFileName? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// assembly_file_name : 
        ///    stringtext 
        /// </summary>
        public static AstAssemblyFileName New(AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringtext);
            return new AstAssemblyFileName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_file_bits : AS  id_
    /// </summary>
    public partial class AstAlterAssemblyFileBits : AstBnfRule
    {
        
        private AstId _id;
        
        private static string _ruleValue = "AS  id_";
        
        private static string _ruleName = "alter_assembly_file_bits";
        
        public AstAlterAssemblyFileBits(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyFileBits(Position p, AstId id) : 
                base(p)
        {
            this._id = id;
        }
        
        public AstAlterAssemblyFileBits(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyFileBits(this);
        }
        
        public static AstAlterAssemblyFileBits? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly_file_bits : 
        ///    AS id_ 
        /// </summary>
        public static AstAlterAssemblyFileBits New(AstId id)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            return new AstAlterAssemblyFileBits(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_assembly_with_clause : WITH  assembly_option
    /// </summary>
    public partial class AstAlterAssemblyWithClause : AstBnfRule
    {
        
        private AstAssemblyOption _assemblyOption;
        
        private static string _ruleValue = "WITH  assembly_option";
        
        private static string _ruleName = "alter_assembly_with_clause";
        
        public AstAlterAssemblyWithClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAssemblyWithClause(Position p, AstAssemblyOption assemblyOption) : 
                base(p)
        {
            this._assemblyOption = assemblyOption;
        }
        
        public AstAlterAssemblyWithClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyOption>())
                {
                    this._assemblyOption = ((AstAssemblyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyOption AssemblyOption
        {
            get
            {
                return this._assemblyOption;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAssemblyWithClause(this);
        }
        
        public static AstAlterAssemblyWithClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_assembly_with_clause : 
        ///    WITH assembly_option 
        /// </summary>
        public static AstAlterAssemblyWithClause New(AstAssemblyOption assemblyOption)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(assemblyOption);
            return new AstAlterAssemblyWithClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// network_file_share : network_file_start  network_computer  file_path
    /// </summary>
    public partial class AstNetworkFileShare : AstBnfRule
    {
        
        private AstNetworkFileStart _networkFileStart;
        
        private AstNetworkComputer _networkComputer;
        
        private AstFilePath _filePath;
        
        private static string _ruleValue = "network_file_start  network_computer  file_path";
        
        private static string _ruleName = "network_file_share";
        
        public AstNetworkFileShare(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstNetworkFileShare(Position p, AstNetworkFileStart networkFileStart, AstNetworkComputer networkComputer, AstFilePath filePath) : 
                base(p)
        {
            this._networkFileStart = networkFileStart;
            this._networkComputer = networkComputer;
            this._filePath = filePath;
        }
        
        public AstNetworkFileShare(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNetworkFileStart>())
                {
                    this._networkFileStart = ((AstNetworkFileStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstNetworkComputer>())
                {
                    this._networkComputer = ((AstNetworkComputer)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNetworkFileStart NetworkFileStart
        {
            get
            {
                return this._networkFileStart;
            }
        }
        
        public virtual AstNetworkComputer NetworkComputer
        {
            get
            {
                return this._networkComputer;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNetworkFileShare(this);
        }
        
        public static AstNetworkFileShare? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// network_file_share : 
        ///    network_file_start network_computer file_path 
        /// </summary>
        public static AstNetworkFileShare New(AstNetworkFileStart networkFileStart, AstNetworkComputer networkComputer, AstFilePath filePath)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(networkFileStart);
            list.Add(networkComputer);
            list.Add(filePath);
            return new AstNetworkFileShare(Position.Default, list);
        }
    }
    
    /// <summary>
    /// local_file : local_drive  file_path
    /// </summary>
    public partial class AstLocalFile : AstBnfRule
    {
        
        private AstLocalDrive _localDrive;
        
        private AstFilePath _filePath;
        
        private static string _ruleValue = "local_drive  file_path";
        
        private static string _ruleName = "local_file";
        
        public AstLocalFile(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public AstLocalFile(Position p, AstLocalDrive localDrive, AstFilePath filePath) : 
                base(p)
        {
            this._localDrive = localDrive;
            this._filePath = filePath;
        }
        
        public AstLocalFile(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalDrive>())
                {
                    this._localDrive = ((AstLocalDrive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilePath>())
                {
                    this._filePath = ((AstFilePath)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalDrive LocalDrive
        {
            get
            {
                return this._localDrive;
            }
        }
        
        public virtual AstFilePath FilePath
        {
            get
            {
                return this._filePath;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLocalFile(this);
        }
        
        public static AstLocalFile? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// local_file : 
        ///    local_drive file_path 
        /// </summary>
        public static AstLocalFile New(AstLocalDrive localDrive, AstFilePath filePath)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localDrive);
            list.Add(filePath);
            return new AstLocalFile(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_assembly : CREATE  ASSEMBLY  assembly_id  (AUTHORIZATION  owner_id)?  FROM  binary_content_nexts  (WITH  PERMISSION_SET  EQUAL  assembly_permission)?
    /// </summary>
    public partial class AstCreateAssembly : AstBnfRule
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstOwnerId _ownerId;
        
        private AstBinaryContentNexts _binaryContentNexts;
        
        private AstAssemblyPermission _assemblyPermission;
        
        private static string _ruleValue = "CREATE  ASSEMBLY  assembly_id  (AUTHORIZATION  owner_id)?  FROM  binary_content_n" +
            "exts  (WITH  PERMISSION_SET  EQUAL  assembly_permission)?";
        
        private static string _ruleName = "create_assembly";
        
        public AstCreateAssembly(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyPermission>())
                {
                    this._assemblyPermission = ((AstAssemblyPermission)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAssembly(Position p, AstAssemblyId assemblyId, AstOwnerId ownerId, AstBinaryContentNexts binaryContentNexts, AstAssemblyPermission assemblyPermission) : 
                base(p)
        {
            this._assemblyId = assemblyId;
            this._ownerId = ownerId;
            this._binaryContentNexts = binaryContentNexts;
            this._assemblyPermission = assemblyPermission;
        }
        
        public AstCreateAssembly(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinaryContentNexts>())
                {
                    this._binaryContentNexts = ((AstBinaryContentNexts)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAssemblyPermission>())
                {
                    this._assemblyPermission = ((AstAssemblyPermission)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstBinaryContentNexts BinaryContentNexts
        {
            get
            {
                return this._binaryContentNexts;
            }
        }
        
        public virtual AstAssemblyPermission AssemblyPermission
        {
            get
            {
                return this._assemblyPermission;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAssembly(this);
        }
        
        public static AstCreateAssembly? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_assembly : 
        ///    CREATE ASSEMBLY assembly_id AUTHORIZATION owner_id FROM binary_content_nexts WITH PERMISSION_SET EQUAL assembly_permission 
        /// </summary>
        public static AstCreateAssembly New(AstAssemblyId assemblyId, AstOwnerId ownerId, AstBinaryContentNexts binaryContentNexts, AstAssemblyPermission assemblyPermission)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(assemblyId);
            list.Add(ownerId);
            list.Add(binaryContentNexts);
            list.Add(assemblyPermission);
            return new AstCreateAssembly(Position.Default, list);
        }
    }
    
    /// <summary>
    /// binary_content_next : COMMA?  binary_content
    /// </summary>
    public partial class AstBinaryContentNext : AstBnfRule
    {
        
        private AstBinaryContent _binaryContent;
        
        private static string _ruleValue = "COMMA?  binary_content";
        
        private static string _ruleName = "binary_content_next";
        
        public AstBinaryContentNext(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public AstBinaryContentNext(Position p, AstBinaryContent binaryContent) : 
                base(p)
        {
            this._binaryContent = binaryContent;
        }
        
        public AstBinaryContentNext(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBinaryContent>())
                {
                    this._binaryContent = ((AstBinaryContent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBinaryContent BinaryContent
        {
            get
            {
                return this._binaryContent;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBinaryContentNext(this);
        }
        
        public static AstBinaryContentNext? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// binary_content_next : 
        ///    COMMA? binary_content 
        /// </summary>
        public static AstBinaryContentNext New(AstBinaryContent binaryContent)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(binaryContent);
            return new AstBinaryContentNext(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_assembly : DROP  ASSEMBLY  (IF  EXISTS)?  assemblies  (WITH  NO  DEPENDENTS)?
    /// </summary>
    public partial class AstDropAssembly : AstBnfRule
    {
        
        private AstAssemblies _assemblies;
        
        private static string _ruleValue = "DROP  ASSEMBLY  (IF  EXISTS)?  assemblies  (WITH  NO  DEPENDENTS)?";
        
        private static string _ruleName = "drop_assembly";
        
        public AstDropAssembly(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblies>())
                {
                    this._assemblies = ((AstAssemblies)(enumerator.Current));
                }
            }
        }
        
        public AstDropAssembly(Position p, AstAssemblies assemblies) : 
                base(p)
        {
            this._assemblies = assemblies;
        }
        
        public AstDropAssembly(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblies>())
                {
                    this._assemblies = ((AstAssemblies)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblies Assemblies
        {
            get
            {
                return this._assemblies;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAssembly(this);
        }
        
        public static AstDropAssembly? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_assembly : 
        ///    DROP ASSEMBLY IF EXISTS assemblies WITH NO DEPENDENTS 
        /// </summary>
        public static AstDropAssembly New(AstAssemblies assemblies)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(assemblies);
            return new AstDropAssembly(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_asymmetric_key : ALTER  ASYMMETRIC  KEY  asym_key_id  (asymmetric_key_option | REMOVE  PRIVATE  KEY)
    /// </summary>
    public partial class AstAlterAsymmetricKey : AstBnfRule
    {
        
        private AstAsymKeyId _asymKeyId;
        
        private AstAsymmetricKeyOption _asymmetricKeyOption;
        
        private static string _ruleValue = "ALTER  ASYMMETRIC  KEY  asym_key_id  (asymmetric_key_option | REMOVE  PRIVATE  KE" +
            "Y)";
        
        private static string _ruleName = "alter_asymmetric_key";
        
        public AstAlterAsymmetricKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyOption>())
                {
                    this._asymmetricKeyOption = ((AstAsymmetricKeyOption)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAsymmetricKey(Position p, AstAsymKeyId asymKeyId, AstAsymmetricKeyOption asymmetricKeyOption) : 
                base(p)
        {
            this._asymKeyId = asymKeyId;
            this._asymmetricKeyOption = asymmetricKeyOption;
        }
        
        public AstAlterAsymmetricKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymmetricKeyOption>())
                {
                    this._asymmetricKeyOption = ((AstAsymmetricKeyOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public virtual AstAsymmetricKeyOption AsymmetricKeyOption
        {
            get
            {
                return this._asymmetricKeyOption;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAsymmetricKey(this);
        }
        
        public static AstAlterAsymmetricKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_asymmetric_key : 
        ///    ALTER ASYMMETRIC KEY asym_key_id asymmetric_key_option 
        /// </summary>
        public static AstAlterAsymmetricKey New(AstAsymKeyId asymKeyId, AstAsymmetricKeyOption asymmetricKeyOption)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(asymKeyId);
            list.Add(asymmetricKeyOption);
            return new AstAlterAsymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_asymmetric_key : 
        ///    ALTER ASYMMETRIC KEY asym_key_id REMOVE PRIVATE KEY 
        /// </summary>
        public static AstAlterAsymmetricKey New(AstAsymKeyId asymKeyId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(asymKeyId);
            return new AstAlterAsymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// encryption_by_pwd : ENCRYPTION  BY  password_setting
    /// </summary>
    public partial class AstEncryptionByPwd : AstBnfRule
    {
        
        private AstPasswordSetting _passwordSetting;
        
        private static string _ruleValue = "ENCRYPTION  BY  password_setting";
        
        private static string _ruleName = "encryption_by_pwd";
        
        public AstEncryptionByPwd(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
            }
        }
        
        public AstEncryptionByPwd(Position p, AstPasswordSetting passwordSetting) : 
                base(p)
        {
            this._passwordSetting = passwordSetting;
        }
        
        public AstEncryptionByPwd(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPasswordSetting PasswordSetting
        {
            get
            {
                return this._passwordSetting;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEncryptionByPwd(this);
        }
        
        public static AstEncryptionByPwd? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// encryption_by_pwd : 
        ///    ENCRYPTION BY password_setting 
        /// </summary>
        public static AstEncryptionByPwd New(AstPasswordSetting passwordSetting)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(passwordSetting);
            return new AstEncryptionByPwd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// decryption_by_pwd : DECRYPTION  BY  password_setting
    /// </summary>
    public partial class AstDecryptionByPwd : AstBnfRule
    {
        
        private AstPasswordSetting _passwordSetting;
        
        private static string _ruleValue = "DECRYPTION  BY  password_setting";
        
        private static string _ruleName = "decryption_by_pwd";
        
        public AstDecryptionByPwd(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
            }
        }
        
        public AstDecryptionByPwd(Position p, AstPasswordSetting passwordSetting) : 
                base(p)
        {
            this._passwordSetting = passwordSetting;
        }
        
        public AstDecryptionByPwd(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPasswordSetting PasswordSetting
        {
            get
            {
                return this._passwordSetting;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecryptionByPwd(this);
        }
        
        public static AstDecryptionByPwd? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// decryption_by_pwd : 
        ///    DECRYPTION BY password_setting 
        /// </summary>
        public static AstDecryptionByPwd New(AstPasswordSetting passwordSetting)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(passwordSetting);
            return new AstDecryptionByPwd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_asymmetric_key : CREATE  ASYMMETRIC  KEY  asym_key_id  (AUTHORIZATION  database_id)?  (FROM  asymetric_key_from)?  (WITH  asymetric_key_with_info)?  encryption_by_pwd?
    /// </summary>
    public partial class AstCreateAsymmetricKey : AstBnfRule
    {
        
        private AstAsymKeyId _asymKeyId;
        
        private AstDatabaseId _databaseId;
        
        private AstAsymetricKeyFrom _asymetricKeyFrom;
        
        private AstAsymetricKeyWithInfo _asymetricKeyWithInfo;
        
        private AstEncryptionByPwd? _encryptionByPwd;
        
        private static string _ruleValue = "CREATE  ASYMMETRIC  KEY  asym_key_id  (AUTHORIZATION  database_id)?  (FROM  asyme" +
            "tric_key_from)?  (WITH  asymetric_key_with_info)?  encryption_by_pwd?";
        
        private static string _ruleName = "create_asymmetric_key";
        
        public AstCreateAsymmetricKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymetricKeyFrom>())
                {
                    this._asymetricKeyFrom = ((AstAsymetricKeyFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymetricKeyWithInfo>())
                {
                    this._asymetricKeyWithInfo = ((AstAsymetricKeyWithInfo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd?>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateAsymmetricKey(Position p, AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstAsymetricKeyFrom asymetricKeyFrom, AstAsymetricKeyWithInfo asymetricKeyWithInfo, AstEncryptionByPwd? encryptionByPwd) : 
                base(p)
        {
            this._asymKeyId = asymKeyId;
            this._databaseId = databaseId;
            this._asymetricKeyFrom = asymetricKeyFrom;
            this._asymetricKeyWithInfo = asymetricKeyWithInfo;
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstCreateAsymmetricKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymetricKeyFrom>())
                {
                    this._asymetricKeyFrom = ((AstAsymetricKeyFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymetricKeyWithInfo>())
                {
                    this._asymetricKeyWithInfo = ((AstAsymetricKeyWithInfo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd?>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstAsymetricKeyFrom AsymetricKeyFrom
        {
            get
            {
                return this._asymetricKeyFrom;
            }
        }
        
        public virtual AstAsymetricKeyWithInfo AsymetricKeyWithInfo
        {
            get
            {
                return this._asymetricKeyWithInfo;
            }
        }
        
        public virtual AstEncryptionByPwd? EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateAsymmetricKey(this);
        }
        
        public static AstCreateAsymmetricKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_asymmetric_key : 
        ///    CREATE ASYMMETRIC KEY asym_key_id AUTHORIZATION database_id FROM asymetric_key_from WITH asymetric_key_with_info encryption_by_pwd? 
        /// </summary>
        public static AstCreateAsymmetricKey New(AstAsymKeyId asymKeyId, AstDatabaseId databaseId, AstAsymetricKeyFrom asymetricKeyFrom, AstAsymetricKeyWithInfo asymetricKeyWithInfo, AstEncryptionByPwd? encryptionByPwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(asymKeyId);
            list.Add(databaseId);
            list.Add(asymetricKeyFrom);
            list.Add(asymetricKeyWithInfo);
            list.Add(encryptionByPwd);
            return new AstCreateAsymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization : ALTER  AUTHORIZATION  ON  (class_type  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorization : AstBnfRule
    {
        
        private AstClassType _classType;
        
        private AstEntityName _entity;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        private static string _ruleValue = "ALTER  AUTHORIZATION  ON  (class_type  DOUBLE_COLON)?  entity = entity_name  TO  " +
            "authorization_grantee";
        
        private static string _ruleName = "alter_authorization";
        
        public AstAlterAuthorization(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassType>())
                {
                    this._classType = ((AstClassType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entity = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorization(Position p, AstClassType classType, AstEntityName entity, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classType = classType;
            this._entity = entity;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorization(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassType>())
                {
                    this._classType = ((AstClassType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entity = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassType ClassType
        {
            get
            {
                return this._classType;
            }
        }
        
        public virtual AstEntityName Entity
        {
            get
            {
                return this._entity;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorization(this);
        }
        
        public static AstAlterAuthorization? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_authorization : 
        ///    ALTER AUTHORIZATION ON class_type :: entity=entity_name TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorization New(AstClassType classType, AstEntityName entity, AstAuthorizationGrantee authorizationGrantee)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(classType);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorization(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_sql_database : ALTER  AUTHORIZATION  ON  (class_type_for_sql_database  DOUBLE_COLON)?  entity = entity_name  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForSqlDatabase : AstBnfRule
    {
        
        private AstClassTypeForSqlDatabase _classTypeForSqlDatabase;
        
        private AstEntityName _entity;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        private static string _ruleValue = "ALTER  AUTHORIZATION  ON  (class_type_for_sql_database  DOUBLE_COLON)?  entity = " +
            "entity_name  TO  authorization_grantee";
        
        private static string _ruleName = "alter_authorization_for_sql_database";
        
        public AstAlterAuthorizationForSqlDatabase(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForSqlDatabase>())
                {
                    this._classTypeForSqlDatabase = ((AstClassTypeForSqlDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entity = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForSqlDatabase(Position p, AstClassTypeForSqlDatabase classTypeForSqlDatabase, AstEntityName entity, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classTypeForSqlDatabase = classTypeForSqlDatabase;
            this._entity = entity;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorizationForSqlDatabase(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForSqlDatabase>())
                {
                    this._classTypeForSqlDatabase = ((AstClassTypeForSqlDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityName>())
                {
                    this._entity = ((AstEntityName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassTypeForSqlDatabase ClassTypeForSqlDatabase
        {
            get
            {
                return this._classTypeForSqlDatabase;
            }
        }
        
        public virtual AstEntityName Entity
        {
            get
            {
                return this._entity;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForSqlDatabase(this);
        }
        
        public static AstAlterAuthorizationForSqlDatabase? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_authorization_for_sql_database : 
        ///    ALTER AUTHORIZATION ON class_type_for_sql_database :: entity=entity_name TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorizationForSqlDatabase New(AstClassTypeForSqlDatabase classTypeForSqlDatabase, AstEntityName entity, AstAuthorizationGrantee authorizationGrantee)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(classTypeForSqlDatabase);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorizationForSqlDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_azure_dw : ALTER  AUTHORIZATION  ON  (class_type_for_azure_dw  DOUBLE_COLON)?  entity = entity_name_for_azure_dw_ref  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForAzureDw : AstBnfRule
    {
        
        private AstClassTypeForAzureDw _classTypeForAzureDw;
        
        private AstEntityNameForAzureDwRef _entity;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        private static string _ruleValue = "ALTER  AUTHORIZATION  ON  (class_type_for_azure_dw  DOUBLE_COLON)?  entity = enti" +
            "ty_name_for_azure_dw_ref  TO  authorization_grantee";
        
        private static string _ruleName = "alter_authorization_for_azure_dw";
        
        public AstAlterAuthorizationForAzureDw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForAzureDw>())
                {
                    this._classTypeForAzureDw = ((AstClassTypeForAzureDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForAzureDwRef>())
                {
                    this._entity = ((AstEntityNameForAzureDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForAzureDw(Position p, AstClassTypeForAzureDw classTypeForAzureDw, AstEntityNameForAzureDwRef entity, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classTypeForAzureDw = classTypeForAzureDw;
            this._entity = entity;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorizationForAzureDw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForAzureDw>())
                {
                    this._classTypeForAzureDw = ((AstClassTypeForAzureDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForAzureDwRef>())
                {
                    this._entity = ((AstEntityNameForAzureDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassTypeForAzureDw ClassTypeForAzureDw
        {
            get
            {
                return this._classTypeForAzureDw;
            }
        }
        
        public virtual AstEntityNameForAzureDwRef Entity
        {
            get
            {
                return this._entity;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForAzureDw(this);
        }
        
        public static AstAlterAuthorizationForAzureDw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_authorization_for_azure_dw : 
        ///    ALTER AUTHORIZATION ON class_type_for_azure_dw :: entity=entity_name_for_azure_dw_ref TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorizationForAzureDw New(AstClassTypeForAzureDw classTypeForAzureDw, AstEntityNameForAzureDwRef entity, AstAuthorizationGrantee authorizationGrantee)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(classTypeForAzureDw);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorizationForAzureDw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_authorization_for_parallel_dw : ALTER  AUTHORIZATION  ON  (class_type_for_parallel_dw  DOUBLE_COLON)?  entity = entity_name_for_parallel_dw_ref  TO  authorization_grantee
    /// </summary>
    public partial class AstAlterAuthorizationForParallelDw : AstBnfRule
    {
        
        private AstClassTypeForParallelDw _classTypeForParallelDw;
        
        private AstEntityNameForParallelDwRef _entity;
        
        private AstAuthorizationGrantee _authorizationGrantee;
        
        private static string _ruleValue = "ALTER  AUTHORIZATION  ON  (class_type_for_parallel_dw  DOUBLE_COLON)?  entity = e" +
            "ntity_name_for_parallel_dw_ref  TO  authorization_grantee";
        
        private static string _ruleName = "alter_authorization_for_parallel_dw";
        
        public AstAlterAuthorizationForParallelDw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForParallelDw>())
                {
                    this._classTypeForParallelDw = ((AstClassTypeForParallelDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForParallelDwRef>())
                {
                    this._entity = ((AstEntityNameForParallelDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAuthorizationForParallelDw(Position p, AstClassTypeForParallelDw classTypeForParallelDw, AstEntityNameForParallelDwRef entity, AstAuthorizationGrantee authorizationGrantee) : 
                base(p)
        {
            this._classTypeForParallelDw = classTypeForParallelDw;
            this._entity = entity;
            this._authorizationGrantee = authorizationGrantee;
        }
        
        public AstAlterAuthorizationForParallelDw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClassTypeForParallelDw>())
                {
                    this._classTypeForParallelDw = ((AstClassTypeForParallelDw)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEntityNameForParallelDwRef>())
                {
                    this._entity = ((AstEntityNameForParallelDwRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuthorizationGrantee>())
                {
                    this._authorizationGrantee = ((AstAuthorizationGrantee)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClassTypeForParallelDw ClassTypeForParallelDw
        {
            get
            {
                return this._classTypeForParallelDw;
            }
        }
        
        public virtual AstEntityNameForParallelDwRef Entity
        {
            get
            {
                return this._entity;
            }
        }
        
        public virtual AstAuthorizationGrantee AuthorizationGrantee
        {
            get
            {
                return this._authorizationGrantee;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAuthorizationForParallelDw(this);
        }
        
        public static AstAlterAuthorizationForParallelDw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_authorization_for_parallel_dw : 
        ///    ALTER AUTHORIZATION ON class_type_for_parallel_dw :: entity=entity_name_for_parallel_dw_ref TO authorization_grantee 
        /// </summary>
        public static AstAlterAuthorizationForParallelDw New(AstClassTypeForParallelDw classTypeForParallelDw, AstEntityNameForParallelDwRef entity, AstAuthorizationGrantee authorizationGrantee)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(classTypeForParallelDw);
            list.Add(entity);
            list.Add(authorizationGrantee);
            return new AstAlterAuthorizationForParallelDw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_availability_group : DROP  AVAILABILITY  GROUP  group_id
    /// </summary>
    public partial class AstDropAvailabilityGroup : AstBnfRule
    {
        
        private AstGroupId _groupId;
        
        private static string _ruleValue = "DROP  AVAILABILITY  GROUP  group_id";
        
        private static string _ruleName = "drop_availability_group";
        
        public AstDropAvailabilityGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstDropAvailabilityGroup(Position p, AstGroupId groupId) : 
                base(p)
        {
            this._groupId = groupId;
        }
        
        public AstDropAvailabilityGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropAvailabilityGroup(this);
        }
        
        public static AstDropAvailabilityGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_availability_group : 
        ///    DROP AVAILABILITY GROUP group_id 
        /// </summary>
        public static AstDropAvailabilityGroup New(AstGroupId groupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(groupId);
            return new AstDropAvailabilityGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_group : alter_availability_group_start  add_remove_database
    /// </summary>
    public partial class AstAlterAvailabilityGroup : AstBnfRule
    {
        
        private AstAlterAvailabilityGroupStart _alterAvailabilityGroupStart;
        
        private AstAddRemoveDatabase _addRemoveDatabase;
        
        private static string _ruleValue = "alter_availability_group_start  add_remove_database";
        
        private static string _ruleName = "alter_availability_group";
        
        public AstAlterAvailabilityGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddRemoveDatabase>())
                {
                    this._addRemoveDatabase = ((AstAddRemoveDatabase)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroup(Position p, AstAlterAvailabilityGroupStart alterAvailabilityGroupStart, AstAddRemoveDatabase addRemoveDatabase) : 
                base(p)
        {
            this._alterAvailabilityGroupStart = alterAvailabilityGroupStart;
            this._addRemoveDatabase = addRemoveDatabase;
        }
        
        public AstAlterAvailabilityGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterAvailabilityGroupStart>())
                {
                    this._alterAvailabilityGroupStart = ((AstAlterAvailabilityGroupStart)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddRemoveDatabase>())
                {
                    this._addRemoveDatabase = ((AstAddRemoveDatabase)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterAvailabilityGroupStart AlterAvailabilityGroupStart
        {
            get
            {
                return this._alterAvailabilityGroupStart;
            }
        }
        
        public virtual AstAddRemoveDatabase AddRemoveDatabase
        {
            get
            {
                return this._addRemoveDatabase;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroup(this);
        }
        
        public static AstAlterAvailabilityGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_availability_group : 
        ///    alter_availability_group_start add_remove_database 
        /// </summary>
        public static AstAlterAvailabilityGroup New(AstAlterAvailabilityGroupStart alterAvailabilityGroupStart, AstAddRemoveDatabase addRemoveDatabase)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterAvailabilityGroupStart);
            list.Add(addRemoveDatabase);
            return new AstAlterAvailabilityGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_group_start : ALTER  AVAILABILITY  GROUP  group_id
    /// </summary>
    public partial class AstAlterAvailabilityGroupStart : AstBnfRule
    {
        
        private AstGroupId _groupId;
        
        private static string _ruleValue = "ALTER  AVAILABILITY  GROUP  group_id";
        
        private static string _ruleName = "alter_availability_group_start";
        
        public AstAlterAvailabilityGroupStart(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityGroupStart(Position p, AstGroupId groupId) : 
                base(p)
        {
            this._groupId = groupId;
        }
        
        public AstAlterAvailabilityGroupStart(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityGroupStart(this);
        }
        
        public static AstAlterAvailabilityGroupStart? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_availability_group_start : 
        ///    ALTER AVAILABILITY GROUP group_id 
        /// </summary>
        public static AstAlterAvailabilityGroupStart New(AstGroupId groupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(groupId);
            return new AstAlterAvailabilityGroupStart(Position.Default, list);
        }
    }
    
    /// <summary>
    /// add_remove_database : add_remove  DATABASE  database_id
    /// </summary>
    public partial class AstAddRemoveDatabase : AstBnfRule
    {
        
        private AstAddRemove _addRemove;
        
        private AstDatabaseId _databaseId;
        
        private static string _ruleValue = "add_remove  DATABASE  database_id";
        
        private static string _ruleName = "add_remove_database";
        
        public AstAddRemoveDatabase(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddRemove>())
                {
                    this._addRemove = ((AstAddRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public AstAddRemoveDatabase(Position p, AstAddRemove addRemove, AstDatabaseId databaseId) : 
                base(p)
        {
            this._addRemove = addRemove;
            this._databaseId = databaseId;
        }
        
        public AstAddRemoveDatabase(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddRemove>())
                {
                    this._addRemove = ((AstAddRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddRemove AddRemove
        {
            get
            {
                return this._addRemove;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddRemoveDatabase(this);
        }
        
        public static AstAddRemoveDatabase? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// add_remove_database : 
        ///    add_remove DATABASE database_id 
        /// </summary>
        public static AstAddRemoveDatabase New(AstAddRemove addRemove, AstDatabaseId databaseId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(addRemove);
            list.Add(databaseId);
            return new AstAddRemoveDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// restart_listener : restart_remove  LISTENER  listener_name
    /// </summary>
    public partial class AstRestartListener : AstBnfRule
    {
        
        private AstRestartRemove _restartRemove;
        
        private AstListenerName _listenerName;
        
        private static string _ruleValue = "restart_remove  LISTENER  listener_name";
        
        private static string _ruleName = "restart_listener";
        
        public AstRestartListener(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRestartRemove>())
                {
                    this._restartRemove = ((AstRestartRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstListenerName>())
                {
                    this._listenerName = ((AstListenerName)(enumerator.Current));
                }
            }
        }
        
        public AstRestartListener(Position p, AstRestartRemove restartRemove, AstListenerName listenerName) : 
                base(p)
        {
            this._restartRemove = restartRemove;
            this._listenerName = listenerName;
        }
        
        public AstRestartListener(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRestartRemove>())
                {
                    this._restartRemove = ((AstRestartRemove)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstListenerName>())
                {
                    this._listenerName = ((AstListenerName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRestartRemove RestartRemove
        {
            get
            {
                return this._restartRemove;
            }
        }
        
        public virtual AstListenerName ListenerName
        {
            get
            {
                return this._listenerName;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRestartListener(this);
        }
        
        public static AstRestartListener? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// restart_listener : 
        ///    restart_remove LISTENER listener_name 
        /// </summary>
        public static AstRestartListener New(AstRestartRemove restartRemove, AstListenerName listenerName)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(restartRemove);
            list.Add(listenerName);
            return new AstRestartListener(Position.Default, list);
        }
    }
    
    /// <summary>
    /// range_ip_v4 : left = ipv4  right = ipv4
    /// </summary>
    public partial class AstRangeIpV4 : AstBnfRule
    {
        
        private AstIpv4 _left;
        
        private AstIpv4 _right;
        
        private static string _ruleValue = "left = ipv4  right = ipv4";
        
        private static string _ruleName = "range_ip_v4";
        
        public AstRangeIpV4(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._left = ((AstIpv4)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._right = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public AstRangeIpV4(Position p, AstIpv4 left, AstIpv4 right) : 
                base(p)
        {
            this._left = left;
            this._right = right;
        }
        
        public AstRangeIpV4(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._left = ((AstIpv4)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._right = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIpv4 Left
        {
            get
            {
                return this._left;
            }
        }
        
        public virtual AstIpv4 Right
        {
            get
            {
                return this._right;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRangeIpV4(this);
        }
        
        public static AstRangeIpV4? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// range_ip_v4 : 
        ///    left=ipv4 right=ipv4 
        /// </summary>
        public static AstRangeIpV4 New(AstIpv4 left, AstIpv4 right)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(left);
            list.Add(right);
            return new AstRangeIpV4(Position.Default, list);
        }
    }
    
    /// <summary>
    /// range_ip_comma_v4 : left = ipv4  COMMA  right = ipv4
    /// </summary>
    public partial class AstRangeIpCommaV4 : AstBnfRule
    {
        
        private AstIpv4 _left;
        
        private AstIpv4 _right;
        
        private static string _ruleValue = "left = ipv4  COMMA  right = ipv4";
        
        private static string _ruleName = "range_ip_comma_v4";
        
        public AstRangeIpCommaV4(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._left = ((AstIpv4)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._right = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public AstRangeIpCommaV4(Position p, AstIpv4 left, AstIpv4 right) : 
                base(p)
        {
            this._left = left;
            this._right = right;
        }
        
        public AstRangeIpCommaV4(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._left = ((AstIpv4)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIpv4>())
                {
                    this._right = ((AstIpv4)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIpv4 Left
        {
            get
            {
                return this._left;
            }
        }
        
        public virtual AstIpv4 Right
        {
            get
            {
                return this._right;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRangeIpCommaV4(this);
        }
        
        public static AstRangeIpCommaV4? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// range_ip_comma_v4 : 
        ///    left=ipv4 , right=ipv4 
        /// </summary>
        public static AstRangeIpCommaV4 New(AstIpv4 left, AstIpv4 right)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(left);
            list.Add(right);
            return new AstRangeIpCommaV4(Position.Default, list);
        }
    }
    
    /// <summary>
    /// add_listener : ADD  LISTENER  listener_name  LR_BRACKET  address_listener  RR_BRACKET
    /// </summary>
    public partial class AstAddListener : AstBnfRule
    {
        
        private AstListenerName _listenerName;
        
        private AstAddressListener _addressListener;
        
        private static string _ruleValue = "ADD  LISTENER  listener_name  LR_BRACKET  address_listener  RR_BRACKET";
        
        private static string _ruleName = "add_listener";
        
        public AstAddListener(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstListenerName>())
                {
                    this._listenerName = ((AstListenerName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddressListener>())
                {
                    this._addressListener = ((AstAddressListener)(enumerator.Current));
                }
            }
        }
        
        public AstAddListener(Position p, AstListenerName listenerName, AstAddressListener addressListener) : 
                base(p)
        {
            this._listenerName = listenerName;
            this._addressListener = addressListener;
        }
        
        public AstAddListener(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstListenerName>())
                {
                    this._listenerName = ((AstListenerName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddressListener>())
                {
                    this._addressListener = ((AstAddressListener)(enumerator.Current));
                }
            }
        }
        
        public virtual AstListenerName ListenerName
        {
            get
            {
                return this._listenerName;
            }
        }
        
        public virtual AstAddressListener AddressListener
        {
            get
            {
                return this._addressListener;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddListener(this);
        }
        
        public static AstAddListener? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// add_listener : 
        ///    ADD LISTENER listener_name ( address_listener ) 
        /// </summary>
        public static AstAddListener New(AstListenerName listenerName, AstAddressListener addressListener)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(listenerName);
            list.Add(addressListener);
            return new AstAddListener(Position.Default, list);
        }
    }
    
    /// <summary>
    /// listener_name : stringtext
    /// </summary>
    public partial class AstListenerName : AstBnfRule
    {
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "stringtext";
        
        private static string _ruleName = "listener_name";
        
        public AstListenerName(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstListenerName(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstListenerName(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitListenerName(this);
        }
        
        public static AstListenerName? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// listener_name : 
        ///    stringtext 
        /// </summary>
        public static AstListenerName New(AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringtext);
            return new AstListenerName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// listener_dhcp : WITH  DHCP  ON  LR_BRACKET  range_ip_v4  RR_BRACKET
    /// </summary>
    public partial class AstListenerDhcp : AstBnfRule
    {
        
        private AstRangeIpV4 _rangeIpV4;
        
        private static string _ruleValue = "WITH  DHCP  ON  LR_BRACKET  range_ip_v4  RR_BRACKET";
        
        private static string _ruleName = "listener_dhcp";
        
        public AstListenerDhcp(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRangeIpV4>())
                {
                    this._rangeIpV4 = ((AstRangeIpV4)(enumerator.Current));
                }
            }
        }
        
        public AstListenerDhcp(Position p, AstRangeIpV4 rangeIpV4) : 
                base(p)
        {
            this._rangeIpV4 = rangeIpV4;
        }
        
        public AstListenerDhcp(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRangeIpV4>())
                {
                    this._rangeIpV4 = ((AstRangeIpV4)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRangeIpV4 RangeIpV4
        {
            get
            {
                return this._rangeIpV4;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitListenerDhcp(this);
        }
        
        public static AstListenerDhcp? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// listener_dhcp : 
        ///    WITH DHCP ON ( range_ip_v4 ) 
        /// </summary>
        public static AstListenerDhcp New(AstRangeIpV4 rangeIpV4)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(rangeIpV4);
            return new AstListenerDhcp(Position.Default, list);
        }
    }
    
    /// <summary>
    /// listener_ip_address : ips  (COMMA  port = PORT  EQUAL  port_number)?
    /// </summary>
    public partial class AstListenerIpAddress : AstBnfRule
    {
        
        private AstIps _ips;
        
        private AstPortNumber _portNumber;
        
        private static string _ruleValue = "ips  (COMMA  port = PORT  EQUAL  port_number)?";
        
        private static string _ruleName = "listener_ip_address";
        
        public AstListenerIpAddress(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIps>())
                {
                    this._ips = ((AstIps)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public AstListenerIpAddress(Position p, AstIps ips, AstPortNumber portNumber) : 
                base(p)
        {
            this._ips = ips;
            this._portNumber = portNumber;
        }
        
        public AstListenerIpAddress(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIps>())
                {
                    this._ips = ((AstIps)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIps Ips
        {
            get
            {
                return this._ips;
            }
        }
        
        public virtual AstPortNumber PortNumber
        {
            get
            {
                return this._portNumber;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitListenerIpAddress(this);
        }
        
        public static AstListenerIpAddress? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// listener_ip_address : 
        ///    ips , port=PORT EQUAL port_number 
        /// </summary>
        public static AstListenerIpAddress New(AstIps ips, AstPortNumber portNumber)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ips);
            list.Add(portNumber);
            return new AstListenerIpAddress(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_modify : MODIFY  REPLICA  ON  server_instance_txt  (WITH  LR_BRACKET  alter_availability_replicat_primary  RR_BRACKET | SECONDARY_ROLE  LR_BRACKET  alter_availability_secondary_role  RR_BRACKET | PRIMARY_ROLE  LR_BRACKET  alter_availability_primary_role  RR_BRACKET)
    /// </summary>
    public partial class AstAlterAvailabilityReplicatModify : AstBnfRule
    {
        
        private AstServerInstanceTxt _serverInstanceTxt;
        
        private AstAlterAvailabilityReplicatPrimary _alterAvailabilityReplicatPrimary;
        
        private AstAlterAvailabilitySecondaryRole _alterAvailabilitySecondaryRole;
        
        private AstAlterAvailabilityPrimaryRole _alterAvailabilityPrimaryRole;
        
        private static string _ruleValue = @"MODIFY  REPLICA  ON  server_instance_txt  (WITH  LR_BRACKET  alter_availability_replicat_primary  RR_BRACKET | SECONDARY_ROLE  LR_BRACKET  alter_availability_secondary_role  RR_BRACKET | PRIMARY_ROLE  LR_BRACKET  alter_availability_primary_role  RR_BRACKET)";
        
        private static string _ruleName = "alter_availability_replicat_modify";
        
        public AstAlterAvailabilityReplicatModify(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityReplicatPrimary>())
                {
                    this._alterAvailabilityReplicatPrimary = ((AstAlterAvailabilityReplicatPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilitySecondaryRole>())
                {
                    this._alterAvailabilitySecondaryRole = ((AstAlterAvailabilitySecondaryRole)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityPrimaryRole>())
                {
                    this._alterAvailabilityPrimaryRole = ((AstAlterAvailabilityPrimaryRole)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityReplicatModify(Position p, AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilityReplicatPrimary alterAvailabilityReplicatPrimary, AstAlterAvailabilitySecondaryRole alterAvailabilitySecondaryRole, AstAlterAvailabilityPrimaryRole alterAvailabilityPrimaryRole) : 
                base(p)
        {
            this._serverInstanceTxt = serverInstanceTxt;
            this._alterAvailabilityReplicatPrimary = alterAvailabilityReplicatPrimary;
            this._alterAvailabilitySecondaryRole = alterAvailabilitySecondaryRole;
            this._alterAvailabilityPrimaryRole = alterAvailabilityPrimaryRole;
        }
        
        public AstAlterAvailabilityReplicatModify(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityReplicatPrimary>())
                {
                    this._alterAvailabilityReplicatPrimary = ((AstAlterAvailabilityReplicatPrimary)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilitySecondaryRole>())
                {
                    this._alterAvailabilitySecondaryRole = ((AstAlterAvailabilitySecondaryRole)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterAvailabilityPrimaryRole>())
                {
                    this._alterAvailabilityPrimaryRole = ((AstAlterAvailabilityPrimaryRole)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerInstanceTxt ServerInstanceTxt
        {
            get
            {
                return this._serverInstanceTxt;
            }
        }
        
        public virtual AstAlterAvailabilityReplicatPrimary AlterAvailabilityReplicatPrimary
        {
            get
            {
                return this._alterAvailabilityReplicatPrimary;
            }
        }
        
        public virtual AstAlterAvailabilitySecondaryRole AlterAvailabilitySecondaryRole
        {
            get
            {
                return this._alterAvailabilitySecondaryRole;
            }
        }
        
        public virtual AstAlterAvailabilityPrimaryRole AlterAvailabilityPrimaryRole
        {
            get
            {
                return this._alterAvailabilityPrimaryRole;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityReplicatModify(this);
        }
        
        public static AstAlterAvailabilityReplicatModify? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_availability_replicat_modify : 
        ///    MODIFY REPLICA ON server_instance_txt WITH ( alter_availability_replicat_primary ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatModify New(AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilityReplicatPrimary alterAvailabilityReplicatPrimary)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(alterAvailabilityReplicatPrimary);
            return new AstAlterAvailabilityReplicatModify(Position.Default, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_modify : 
        ///    MODIFY REPLICA ON server_instance_txt SECONDARY_ROLE ( alter_availability_secondary_role ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatModify New(AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilitySecondaryRole alterAvailabilitySecondaryRole)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(alterAvailabilitySecondaryRole);
            return new AstAlterAvailabilityReplicatModify(Position.Default, list);
        }
        
        /// <summary>
        /// alter_availability_replicat_modify : 
        ///    MODIFY REPLICA ON server_instance_txt PRIMARY_ROLE ( alter_availability_primary_role ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatModify New(AstServerInstanceTxt serverInstanceTxt, AstAlterAvailabilityPrimaryRole alterAvailabilityPrimaryRole)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(alterAvailabilityPrimaryRole);
            return new AstAlterAvailabilityReplicatModify(Position.Default, list);
        }
    }
    
    /// <summary>
    /// url_value : stringtext
    /// </summary>
    public partial class AstUrlValue : AstBnfRule
    {
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "stringtext";
        
        private static string _ruleName = "url_value";
        
        public AstUrlValue(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstUrlValue(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstUrlValue(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUrlValue(this);
        }
        
        public static AstUrlValue? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// url_value : 
        ///    stringtext 
        /// </summary>
        public static AstUrlValue New(AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringtext);
            return new AstUrlValue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// routing_list : string_list | NONE
    /// </summary>
    public partial class AstRoutingList : AstBnfRule
    {
        
        private AstStringList _stringList;
        
        private static string _ruleValue = "string_list | NONE";
        
        private static string _ruleName = "routing_list";
        
        public AstRoutingList(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringList>())
                {
                    this._stringList = ((AstStringList)(enumerator.Current));
                }
            }
        }
        
        public AstRoutingList(Position p, AstStringList stringList) : 
                base(p)
        {
            this._stringList = stringList;
        }
        
        public AstRoutingList(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringList>())
                {
                    this._stringList = ((AstStringList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringList StringList
        {
            get
            {
                return this._stringList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRoutingList(this);
        }
        
        public static AstRoutingList? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// routing_list : 
        ///    string_list 
        /// </summary>
        public static AstRoutingList New(AstStringList stringList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringList);
            return new AstRoutingList(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_secondary_role : allow_connections_set | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routingList = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilitySecondaryRole : AstBnfRule
    {
        
        private AstAllowConnectionsSet _allowConnectionsSet;
        
        private AstStringtext _routingList;
        
        private static string _ruleValue = "allow_connections_set | READ_ONLY_ROUTING_LIST  EQUAL  LR_BRACKET  routingList = " +
            "stringtext  RR_BRACKET";
        
        private static string _ruleName = "alter_availability_secondary_role";
        
        public AstAlterAvailabilitySecondaryRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllowConnectionsSet>())
                {
                    this._allowConnectionsSet = ((AstAllowConnectionsSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._routingList = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilitySecondaryRole(Position p, AstAllowConnectionsSet allowConnectionsSet, AstStringtext routingList) : 
                base(p)
        {
            this._allowConnectionsSet = allowConnectionsSet;
            this._routingList = routingList;
        }
        
        public AstAlterAvailabilitySecondaryRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllowConnectionsSet>())
                {
                    this._allowConnectionsSet = ((AstAllowConnectionsSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._routingList = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAllowConnectionsSet AllowConnectionsSet
        {
            get
            {
                return this._allowConnectionsSet;
            }
        }
        
        public virtual AstStringtext Routinglist
        {
            get
            {
                return this._routingList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilitySecondaryRole(this);
        }
        
        public static AstAlterAvailabilitySecondaryRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_availability_secondary_role : 
        ///    allow_connections_set 
        /// </summary>
        public static AstAlterAvailabilitySecondaryRole New(AstAllowConnectionsSet allowConnectionsSet)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(allowConnectionsSet);
            return new AstAlterAvailabilitySecondaryRole(Position.Default, list);
        }
        
        /// <summary>
        /// alter_availability_secondary_role : 
        ///    READ_ONLY_ROUTING_LIST EQUAL ( routingList=stringtext ) 
        /// </summary>
        public static AstAlterAvailabilitySecondaryRole New(AstStringtext routingList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(routingList);
            return new AstAlterAvailabilitySecondaryRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_priority_set : BACKUP_PRIORITY  EQUAL  decimal
    /// </summary>
    public partial class AstBackupPrioritySet : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "BACKUP_PRIORITY  EQUAL  decimal";
        
        private static string _ruleName = "backup_priority_set";
        
        public AstBackupPrioritySet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstBackupPrioritySet(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstBackupPrioritySet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupPrioritySet(this);
        }
        
        public static AstBackupPrioritySet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// backup_priority_set : 
        ///    BACKUP_PRIORITY EQUAL decimal 
        /// </summary>
        public static AstBackupPrioritySet New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstBackupPrioritySet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_availability_replicat_add : ADD  REPLICA  ON  server_instance_txt  WITH  LR_BRACKET  (ENDPOINT_URL  EQUAL  stringtext)?  (COMMA?  availability_mode_set)?  (COMMA?  FAILOVER_MODE  EQUAL  auto_manual)?  (COMMA?  seeding_mode_set)?  (COMMA?  backup_priority_set)?  (COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  real_write_all  RR_BRACKET)?  (COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterAvailabilityReplicatAdd : AstBnfRule
    {
        
        private AstServerInstanceTxt _serverInstanceTxt;
        
        private AstStringtext _stringtext;
        
        private AstAvailabilityModeSet _availabilityModeSet;
        
        private AstAutoManual _autoManual;
        
        private AstSeedingModeSet _seedingModeSet;
        
        private AstBackupPrioritySet _backupPrioritySet;
        
        private AstRealWriteAll _realWriteAll;
        
        private static string _ruleValue = @"ADD  REPLICA  ON  server_instance_txt  WITH  LR_BRACKET  (ENDPOINT_URL  EQUAL  stringtext)?  (COMMA?  availability_mode_set)?  (COMMA?  FAILOVER_MODE  EQUAL  auto_manual)?  (COMMA?  seeding_mode_set)?  (COMMA?  backup_priority_set)?  (COMMA?  PRIMARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  real_write_all  RR_BRACKET)?  (COMMA?  SECONDARY_ROLE  LR_BRACKET  ALLOW_CONNECTIONS  EQUAL  READ_ONLY  RR_BRACKET)?  RR_BRACKET";
        
        private static string _ruleName = "alter_availability_replicat_add";
        
        public AstAlterAvailabilityReplicatAdd(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAvailabilityModeSet>())
                {
                    this._availabilityModeSet = ((AstAvailabilityModeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSeedingModeSet>())
                {
                    this._seedingModeSet = ((AstSeedingModeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupPrioritySet>())
                {
                    this._backupPrioritySet = ((AstBackupPrioritySet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRealWriteAll>())
                {
                    this._realWriteAll = ((AstRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public AstAlterAvailabilityReplicatAdd(Position p, AstServerInstanceTxt serverInstanceTxt, AstStringtext stringtext, AstAvailabilityModeSet availabilityModeSet, AstAutoManual autoManual, AstSeedingModeSet seedingModeSet, AstBackupPrioritySet backupPrioritySet, AstRealWriteAll realWriteAll) : 
                base(p)
        {
            this._serverInstanceTxt = serverInstanceTxt;
            this._stringtext = stringtext;
            this._availabilityModeSet = availabilityModeSet;
            this._autoManual = autoManual;
            this._seedingModeSet = seedingModeSet;
            this._backupPrioritySet = backupPrioritySet;
            this._realWriteAll = realWriteAll;
        }
        
        public AstAlterAvailabilityReplicatAdd(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerInstanceTxt>())
                {
                    this._serverInstanceTxt = ((AstServerInstanceTxt)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAvailabilityModeSet>())
                {
                    this._availabilityModeSet = ((AstAvailabilityModeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSeedingModeSet>())
                {
                    this._seedingModeSet = ((AstSeedingModeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupPrioritySet>())
                {
                    this._backupPrioritySet = ((AstBackupPrioritySet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRealWriteAll>())
                {
                    this._realWriteAll = ((AstRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerInstanceTxt ServerInstanceTxt
        {
            get
            {
                return this._serverInstanceTxt;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public virtual AstAvailabilityModeSet AvailabilityModeSet
        {
            get
            {
                return this._availabilityModeSet;
            }
        }
        
        public virtual AstAutoManual AutoManual
        {
            get
            {
                return this._autoManual;
            }
        }
        
        public virtual AstSeedingModeSet SeedingModeSet
        {
            get
            {
                return this._seedingModeSet;
            }
        }
        
        public virtual AstBackupPrioritySet BackupPrioritySet
        {
            get
            {
                return this._backupPrioritySet;
            }
        }
        
        public virtual AstRealWriteAll RealWriteAll
        {
            get
            {
                return this._realWriteAll;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterAvailabilityReplicatAdd(this);
        }
        
        public static AstAlterAvailabilityReplicatAdd? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_availability_replicat_add : 
        ///    ADD REPLICA ON server_instance_txt WITH ( ENDPOINT_URL EQUAL stringtext COMMA? availability_mode_set COMMA? FAILOVER_MODE EQUAL auto_manual COMMA? seeding_mode_set COMMA? backup_priority_set COMMA? PRIMARY_ROLE ( ALLOW_CONNECTIONS EQUAL real_write_all ) COMMA? SECONDARY_ROLE ( ALLOW_CONNECTIONS EQUAL READ_ONLY ) ) 
        /// </summary>
        public static AstAlterAvailabilityReplicatAdd New(AstServerInstanceTxt serverInstanceTxt, AstStringtext stringtext, AstAvailabilityModeSet availabilityModeSet, AstAutoManual autoManual, AstSeedingModeSet seedingModeSet, AstBackupPrioritySet backupPrioritySet, AstRealWriteAll realWriteAll)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverInstanceTxt);
            list.Add(stringtext);
            list.Add(availabilityModeSet);
            list.Add(autoManual);
            list.Add(seedingModeSet);
            list.Add(backupPrioritySet);
            list.Add(realWriteAll);
            return new AstAlterAvailabilityReplicatAdd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// listener_url_set : LISTENER_URL  EQUAL  url_value
    /// </summary>
    public partial class AstListenerUrlSet : AstBnfRule
    {
        
        private AstUrlValue _urlValue;
        
        private static string _ruleValue = "LISTENER_URL  EQUAL  url_value";
        
        private static string _ruleName = "listener_url_set";
        
        public AstListenerUrlSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUrlValue>())
                {
                    this._urlValue = ((AstUrlValue)(enumerator.Current));
                }
            }
        }
        
        public AstListenerUrlSet(Position p, AstUrlValue urlValue) : 
                base(p)
        {
            this._urlValue = urlValue;
        }
        
        public AstListenerUrlSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUrlValue>())
                {
                    this._urlValue = ((AstUrlValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUrlValue UrlValue
        {
            get
            {
                return this._urlValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitListenerUrlSet(this);
        }
        
        public static AstListenerUrlSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// listener_url_set : 
        ///    LISTENER_URL EQUAL url_value 
        /// </summary>
        public static AstListenerUrlSet New(AstUrlValue urlValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(urlValue);
            return new AstListenerUrlSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// availability_mode_set : AVAILABILITY_MODE  EQUAL  synch_asynch
    /// </summary>
    public partial class AstAvailabilityModeSet : AstBnfRule
    {
        
        private AstSynchAsynch _synchAsynch;
        
        private static string _ruleValue = "AVAILABILITY_MODE  EQUAL  synch_asynch";
        
        private static string _ruleName = "availability_mode_set";
        
        public AstAvailabilityModeSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynchAsynch>())
                {
                    this._synchAsynch = ((AstSynchAsynch)(enumerator.Current));
                }
            }
        }
        
        public AstAvailabilityModeSet(Position p, AstSynchAsynch synchAsynch) : 
                base(p)
        {
            this._synchAsynch = synchAsynch;
        }
        
        public AstAvailabilityModeSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSynchAsynch>())
                {
                    this._synchAsynch = ((AstSynchAsynch)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSynchAsynch SynchAsynch
        {
            get
            {
                return this._synchAsynch;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAvailabilityModeSet(this);
        }
        
        public static AstAvailabilityModeSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// availability_mode_set : 
        ///    AVAILABILITY_MODE EQUAL synch_asynch 
        /// </summary>
        public static AstAvailabilityModeSet New(AstSynchAsynch synchAsynch)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(synchAsynch);
            return new AstAvailabilityModeSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// seeding_mode_set : SEEDING_MODE  EQUAL  auto_manual
    /// </summary>
    public partial class AstSeedingModeSet : AstBnfRule
    {
        
        private AstAutoManual _autoManual;
        
        private static string _ruleValue = "SEEDING_MODE  EQUAL  auto_manual";
        
        private static string _ruleName = "seeding_mode_set";
        
        public AstSeedingModeSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
            }
        }
        
        public AstSeedingModeSet(Position p, AstAutoManual autoManual) : 
                base(p)
        {
            this._autoManual = autoManual;
        }
        
        public AstSeedingModeSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoManual>())
                {
                    this._autoManual = ((AstAutoManual)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAutoManual AutoManual
        {
            get
            {
                return this._autoManual;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSeedingModeSet(this);
        }
        
        public static AstSeedingModeSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// seeding_mode_set : 
        ///    SEEDING_MODE EQUAL auto_manual 
        /// </summary>
        public static AstSeedingModeSet New(AstAutoManual autoManual)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(autoManual);
            return new AstSeedingModeSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// primary_role_args : PRIMARY_ROLE  LR_BRACKET  primary_role_config  RR_BRACKET
    /// </summary>
    public partial class AstPrimaryRoleArgs : AstBnfRule
    {
        
        private AstPrimaryRoleConfig _primaryRoleConfig;
        
        private static string _ruleValue = "PRIMARY_ROLE  LR_BRACKET  primary_role_config  RR_BRACKET";
        
        private static string _ruleName = "primary_role_args";
        
        public AstPrimaryRoleArgs(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPrimaryRoleConfig>())
                {
                    this._primaryRoleConfig = ((AstPrimaryRoleConfig)(enumerator.Current));
                }
            }
        }
        
        public AstPrimaryRoleArgs(Position p, AstPrimaryRoleConfig primaryRoleConfig) : 
                base(p)
        {
            this._primaryRoleConfig = primaryRoleConfig;
        }
        
        public AstPrimaryRoleArgs(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPrimaryRoleConfig>())
                {
                    this._primaryRoleConfig = ((AstPrimaryRoleConfig)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPrimaryRoleConfig PrimaryRoleConfig
        {
            get
            {
                return this._primaryRoleConfig;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimaryRoleArgs(this);
        }
        
        public static AstPrimaryRoleArgs? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// primary_role_args : 
        ///    PRIMARY_ROLE ( primary_role_config ) 
        /// </summary>
        public static AstPrimaryRoleArgs New(AstPrimaryRoleConfig primaryRoleConfig)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(primaryRoleConfig);
            return new AstPrimaryRoleArgs(Position.Default, list);
        }
    }
    
    /// <summary>
    /// secondary_role_args : SECONDARY_ROLE  LR_BRACKET  secondary_role_config  RR_BRACKET
    /// </summary>
    public partial class AstSecondaryRoleArgs : AstBnfRule
    {
        
        private AstSecondaryRoleConfig _secondaryRoleConfig;
        
        private static string _ruleValue = "SECONDARY_ROLE  LR_BRACKET  secondary_role_config  RR_BRACKET";
        
        private static string _ruleName = "secondary_role_args";
        
        public AstSecondaryRoleArgs(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecondaryRoleConfig>())
                {
                    this._secondaryRoleConfig = ((AstSecondaryRoleConfig)(enumerator.Current));
                }
            }
        }
        
        public AstSecondaryRoleArgs(Position p, AstSecondaryRoleConfig secondaryRoleConfig) : 
                base(p)
        {
            this._secondaryRoleConfig = secondaryRoleConfig;
        }
        
        public AstSecondaryRoleArgs(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSecondaryRoleConfig>())
                {
                    this._secondaryRoleConfig = ((AstSecondaryRoleConfig)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSecondaryRoleConfig SecondaryRoleConfig
        {
            get
            {
                return this._secondaryRoleConfig;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSecondaryRoleArgs(this);
        }
        
        public static AstSecondaryRoleArgs? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// secondary_role_args : 
        ///    SECONDARY_ROLE ( secondary_role_config ) 
        /// </summary>
        public static AstSecondaryRoleArgs New(AstSecondaryRoleConfig secondaryRoleConfig)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(secondaryRoleConfig);
            return new AstSecondaryRoleArgs(Position.Default, list);
        }
    }
    
    /// <summary>
    /// allow_connections_set : ALLOW_CONNECTIONS  EQUAL  no_real_write_all
    /// </summary>
    public partial class AstAllowConnectionsSet : AstBnfRule
    {
        
        private AstNoRealWriteAll _noRealWriteAll;
        
        private static string _ruleValue = "ALLOW_CONNECTIONS  EQUAL  no_real_write_all";
        
        private static string _ruleName = "allow_connections_set";
        
        public AstAllowConnectionsSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNoRealWriteAll>())
                {
                    this._noRealWriteAll = ((AstNoRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public AstAllowConnectionsSet(Position p, AstNoRealWriteAll noRealWriteAll) : 
                base(p)
        {
            this._noRealWriteAll = noRealWriteAll;
        }
        
        public AstAllowConnectionsSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNoRealWriteAll>())
                {
                    this._noRealWriteAll = ((AstNoRealWriteAll)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNoRealWriteAll NoRealWriteAll
        {
            get
            {
                return this._noRealWriteAll;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllowConnectionsSet(this);
        }
        
        public static AstAllowConnectionsSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// allow_connections_set : 
        ///    ALLOW_CONNECTIONS EQUAL no_real_write_all 
        /// </summary>
        public static AstAllowConnectionsSet New(AstNoRealWriteAll noRealWriteAll)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(noRealWriteAll);
            return new AstAllowConnectionsSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_instance_txt : stringtext
    /// </summary>
    public partial class AstServerInstanceTxt : AstBnfRule
    {
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "stringtext";
        
        private static string _ruleName = "server_instance_txt";
        
        public AstServerInstanceTxt(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstServerInstanceTxt(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstServerInstanceTxt(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerInstanceTxt(this);
        }
        
        public static AstServerInstanceTxt? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// server_instance_txt : 
        ///    stringtext 
        /// </summary>
        public static AstServerInstanceTxt New(AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringtext);
            return new AstServerInstanceTxt(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_broker_priority : create_alter  BROKER  PRIORITY  ConversationPriorityName = id_  FOR  CONVERSATION  SET  LR_BRACKET  broker_contract_name?  broker_local_service_name?  broker_remote_service_name?  broker_priority_level?  RR_BRACKET
    /// </summary>
    public partial class AstCreateOrAlterBrokerPriority : AstBnfRule
    {
        
        private AstCreateAlter _createAlter;
        
        private AstId _ConversationPriorityName;
        
        private AstBrokerContractName? _brokerContractName;
        
        private AstBrokerLocalServiceName? _brokerLocalServiceName;
        
        private AstBrokerRemoteServiceName? _brokerRemoteServiceName;
        
        private AstBrokerPriorityLevel? _brokerPriorityLevel;
        
        private static string _ruleValue = "create_alter  BROKER  PRIORITY  ConversationPriorityName = id_  FOR  CONVERSATION" +
            "  SET  LR_BRACKET  broker_contract_name?  broker_local_service_name?  broker_rem" +
            "ote_service_name?  broker_priority_level?  RR_BRACKET";
        
        private static string _ruleName = "create_or_alter_broker_priority";
        
        public AstCreateOrAlterBrokerPriority(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._ConversationPriorityName = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerContractName?>())
                {
                    this._brokerContractName = ((AstBrokerContractName?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerLocalServiceName?>())
                {
                    this._brokerLocalServiceName = ((AstBrokerLocalServiceName?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerRemoteServiceName?>())
                {
                    this._brokerRemoteServiceName = ((AstBrokerRemoteServiceName?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerPriorityLevel?>())
                {
                    this._brokerPriorityLevel = ((AstBrokerPriorityLevel?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterBrokerPriority(Position p, AstCreateAlter createAlter, AstId conversationPriorityName, AstBrokerContractName? brokerContractName, AstBrokerLocalServiceName? brokerLocalServiceName, AstBrokerRemoteServiceName? brokerRemoteServiceName, AstBrokerPriorityLevel? brokerPriorityLevel) : 
                base(p)
        {
            this._createAlter = createAlter;
            this._ConversationPriorityName = conversationPriorityName;
            this._brokerContractName = brokerContractName;
            this._brokerLocalServiceName = brokerLocalServiceName;
            this._brokerRemoteServiceName = brokerRemoteServiceName;
            this._brokerPriorityLevel = brokerPriorityLevel;
        }
        
        public AstCreateOrAlterBrokerPriority(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._ConversationPriorityName = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerContractName?>())
                {
                    this._brokerContractName = ((AstBrokerContractName?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerLocalServiceName?>())
                {
                    this._brokerLocalServiceName = ((AstBrokerLocalServiceName?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerRemoteServiceName?>())
                {
                    this._brokerRemoteServiceName = ((AstBrokerRemoteServiceName?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBrokerPriorityLevel?>())
                {
                    this._brokerPriorityLevel = ((AstBrokerPriorityLevel?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateAlter CreateAlter
        {
            get
            {
                return this._createAlter;
            }
        }
        
        public virtual AstId Conversationpriorityname
        {
            get
            {
                return this._ConversationPriorityName;
            }
        }
        
        public virtual AstBrokerContractName? BrokerContractName
        {
            get
            {
                return this._brokerContractName;
            }
        }
        
        public virtual AstBrokerLocalServiceName? BrokerLocalServiceName
        {
            get
            {
                return this._brokerLocalServiceName;
            }
        }
        
        public virtual AstBrokerRemoteServiceName? BrokerRemoteServiceName
        {
            get
            {
                return this._brokerRemoteServiceName;
            }
        }
        
        public virtual AstBrokerPriorityLevel? BrokerPriorityLevel
        {
            get
            {
                return this._brokerPriorityLevel;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterBrokerPriority(this);
        }
        
        public static AstCreateOrAlterBrokerPriority? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_broker_priority : 
        ///    create_alter BROKER PRIORITY ConversationPriorityName=id_ FOR CONVERSATION SET ( broker_contract_name? broker_local_service_name? broker_remote_service_name? broker_priority_level? ) 
        /// </summary>
        public static AstCreateOrAlterBrokerPriority New(AstCreateAlter createAlter, AstId conversationPriorityName, AstBrokerContractName? brokerContractName, AstBrokerLocalServiceName? brokerLocalServiceName, AstBrokerRemoteServiceName? brokerRemoteServiceName, AstBrokerPriorityLevel? brokerPriorityLevel)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createAlter);
            list.Add(conversationPriorityName);
            list.Add(brokerContractName);
            list.Add(brokerLocalServiceName);
            list.Add(brokerRemoteServiceName);
            list.Add(brokerPriorityLevel);
            return new AstCreateOrAlterBrokerPriority(Position.Default, list);
        }
    }
    
    /// <summary>
    /// broker_contract_name : CONTRACT_NAME  EQUAL  id_any  COMMA?
    /// </summary>
    public partial class AstBrokerContractName : AstBnfRule
    {
        
        private AstIdAny _idAny;
        
        private static string _ruleValue = "CONTRACT_NAME  EQUAL  id_any  COMMA?";
        
        private static string _ruleName = "broker_contract_name";
        
        public AstBrokerContractName(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdAny>())
                {
                    this._idAny = ((AstIdAny)(enumerator.Current));
                }
            }
        }
        
        public AstBrokerContractName(Position p, AstIdAny idAny) : 
                base(p)
        {
            this._idAny = idAny;
        }
        
        public AstBrokerContractName(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdAny>())
                {
                    this._idAny = ((AstIdAny)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdAny IdAny
        {
            get
            {
                return this._idAny;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerContractName(this);
        }
        
        public static AstBrokerContractName? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// broker_contract_name : 
        ///    CONTRACT_NAME EQUAL id_any COMMA? 
        /// </summary>
        public static AstBrokerContractName New(AstIdAny idAny)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(idAny);
            return new AstBrokerContractName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// broker_remote_service_name : REMOTE_SERVICE_NAME  EQUAL  stringtext_any  COMMA?
    /// </summary>
    public partial class AstBrokerRemoteServiceName : AstBnfRule
    {
        
        private AstStringtextAny _stringtextAny;
        
        private static string _ruleValue = "REMOTE_SERVICE_NAME  EQUAL  stringtext_any  COMMA?";
        
        private static string _ruleName = "broker_remote_service_name";
        
        public AstBrokerRemoteServiceName(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtextAny>())
                {
                    this._stringtextAny = ((AstStringtextAny)(enumerator.Current));
                }
            }
        }
        
        public AstBrokerRemoteServiceName(Position p, AstStringtextAny stringtextAny) : 
                base(p)
        {
            this._stringtextAny = stringtextAny;
        }
        
        public AstBrokerRemoteServiceName(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtextAny>())
                {
                    this._stringtextAny = ((AstStringtextAny)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtextAny StringtextAny
        {
            get
            {
                return this._stringtextAny;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerRemoteServiceName(this);
        }
        
        public static AstBrokerRemoteServiceName? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// broker_remote_service_name : 
        ///    REMOTE_SERVICE_NAME EQUAL stringtext_any COMMA? 
        /// </summary>
        public static AstBrokerRemoteServiceName New(AstStringtextAny stringtextAny)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringtextAny);
            return new AstBrokerRemoteServiceName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// broker_priority_level : PRIORITY_LEVEL  EQUAL  decimal_default
    /// </summary>
    public partial class AstBrokerPriorityLevel : AstBnfRule
    {
        
        private AstDecimalDefault _decimalDefault;
        
        private static string _ruleValue = "PRIORITY_LEVEL  EQUAL  decimal_default";
        
        private static string _ruleName = "broker_priority_level";
        
        public AstBrokerPriorityLevel(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalDefault>())
                {
                    this._decimalDefault = ((AstDecimalDefault)(enumerator.Current));
                }
            }
        }
        
        public AstBrokerPriorityLevel(Position p, AstDecimalDefault decimalDefault) : 
                base(p)
        {
            this._decimalDefault = decimalDefault;
        }
        
        public AstBrokerPriorityLevel(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalDefault>())
                {
                    this._decimalDefault = ((AstDecimalDefault)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalDefault DecimalDefault
        {
            get
            {
                return this._decimalDefault;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBrokerPriorityLevel(this);
        }
        
        public static AstBrokerPriorityLevel? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// broker_priority_level : 
        ///    PRIORITY_LEVEL EQUAL decimal_default 
        /// </summary>
        public static AstBrokerPriorityLevel New(AstDecimalDefault decimalDefault)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decimalDefault);
            return new AstBrokerPriorityLevel(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_certificate : ALTER  CERTIFICATE  certificate_id  (REMOVE  PRIVATE_KEY | WITH  PRIVATE  KEY  LR_BRACKET  private_keys  RR_BRACKET | WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_off)
    /// </summary>
    public partial class AstAlterCertificate : AstBnfRule
    {
        
        private AstCertificateId _certificateId;
        
        private AstPrivateKeys _privateKeys;
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "ALTER  CERTIFICATE  certificate_id  (REMOVE  PRIVATE_KEY | WITH  PRIVATE  KEY  LR" +
            "_BRACKET  private_keys  RR_BRACKET | WITH  ACTIVE  FOR  BEGIN_DIALOG  EQUAL  on_" +
            "off)";
        
        private static string _ruleName = "alter_certificate";
        
        public AstAlterCertificate(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPrivateKeys>())
                {
                    this._privateKeys = ((AstPrivateKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCertificate(Position p, AstCertificateId certificateId, AstPrivateKeys privateKeys, AstOnOff onOff) : 
                base(p)
        {
            this._certificateId = certificateId;
            this._privateKeys = privateKeys;
            this._onOff = onOff;
        }
        
        public AstAlterCertificate(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPrivateKeys>())
                {
                    this._privateKeys = ((AstPrivateKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstPrivateKeys PrivateKeys
        {
            get
            {
                return this._privateKeys;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCertificate(this);
        }
        
        public static AstAlterCertificate? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_certificate : 
        ///    ALTER CERTIFICATE certificate_id REMOVE PRIVATE_KEY 
        /// </summary>
        public static AstAlterCertificate New(AstCertificateId certificateId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(certificateId);
            return new AstAlterCertificate(Position.Default, list);
        }
        
        /// <summary>
        /// alter_certificate : 
        ///    ALTER CERTIFICATE certificate_id WITH PRIVATE KEY ( private_keys ) 
        /// </summary>
        public static AstAlterCertificate New(AstCertificateId certificateId, AstPrivateKeys privateKeys)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(certificateId);
            list.Add(privateKeys);
            return new AstAlterCertificate(Position.Default, list);
        }
        
        /// <summary>
        /// alter_certificate : 
        ///    ALTER CERTIFICATE certificate_id WITH ACTIVE FOR BEGIN_DIALOG EQUAL on_off 
        /// </summary>
        public static AstAlterCertificate New(AstCertificateId certificateId, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(certificateId);
            list.Add(onOff);
            return new AstAlterCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_column_encryption_key : ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  add_drop  VALUE  LR_BRACKET  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  (COMMA  ALGORITHM  EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  binary_)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterColumnEncryptionKey : AstBnfRule
    {
        
        private AstColumnEncryptionKeyId _columnEncryptionKeyId;
        
        private AstAddDrop _addDrop;
        
        private AstId _columnMasterKeyName;
        
        private AstStringtext _algorithmName;
        
        private AstBinary _binary;
        
        private static string _ruleValue = "ALTER  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  add_drop  VALUE  LR_BRA" +
            "CKET  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  (COMMA  ALGORITHM " +
            " EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  binary_)?  R" +
            "R_BRACKET";
        
        private static string _ruleName = "alter_column_encryption_key";
        
        public AstAlterColumnEncryptionKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._columnMasterKeyName = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._algorithmName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public AstAlterColumnEncryptionKey(Position p, AstColumnEncryptionKeyId columnEncryptionKeyId, AstAddDrop addDrop, AstId columnMasterKeyName, AstStringtext algorithmName, AstBinary binary) : 
                base(p)
        {
            this._columnEncryptionKeyId = columnEncryptionKeyId;
            this._addDrop = addDrop;
            this._columnMasterKeyName = columnMasterKeyName;
            this._algorithmName = algorithmName;
            this._binary = binary;
        }
        
        public AstAlterColumnEncryptionKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._columnMasterKeyName = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._algorithmName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._binary = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
        {
            get
            {
                return this._columnEncryptionKeyId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstId ColumnMasterKeyName
        {
            get
            {
                return this._columnMasterKeyName;
            }
        }
        
        public virtual AstStringtext AlgorithmName
        {
            get
            {
                return this._algorithmName;
            }
        }
        
        public virtual AstBinary Binary
        {
            get
            {
                return this._binary;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterColumnEncryptionKey(this);
        }
        
        public static AstAlterColumnEncryptionKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_column_encryption_key : 
        ///    ALTER COLUMN ENCRYPTION KEY column_encryption_key_id add_drop VALUE ( COLUMN_MASTER_KEY EQUAL column_master_key_name=id_ , ALGORITHM EQUAL algorithm_name=stringtext , ENCRYPTED_VALUE EQUAL binary_ ) 
        /// </summary>
        public static AstAlterColumnEncryptionKey New(AstColumnEncryptionKeyId columnEncryptionKeyId, AstAddDrop addDrop, AstId columnMasterKeyName, AstStringtext algorithmName, AstBinary binary)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnEncryptionKeyId);
            list.Add(addDrop);
            list.Add(columnMasterKeyName);
            list.Add(algorithmName);
            list.Add(binary);
            return new AstAlterColumnEncryptionKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_column_encryption_key : CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  WITH  VALUES  (LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  COMMA  ALGORITHM  EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  encrypted_value = binary_  RR_BRACKET  COMMA?)+
    /// </summary>
    public partial class AstCreateColumnEncryptionKey : AstBnfRule
    {
        
        private AstColumnEncryptionKeyId _columnEncryptionKeyId;
        
        private AstId _columnMasterKeyName;
        
        private AstStringtext _algorithmName;
        
        private AstBinary _encryptedValue;
        
        private static string _ruleValue = @"CREATE  COLUMN  ENCRYPTION  KEY  column_encryption_key_id  WITH  VALUES  (LR_BRACKET  COMMA?  COLUMN_MASTER_KEY  EQUAL  column_master_key_name = id_  COMMA  ALGORITHM  EQUAL  algorithm_name = stringtext  COMMA  ENCRYPTED_VALUE  EQUAL  encrypted_value = binary_  RR_BRACKET  COMMA?)+";
        
        private static string _ruleName = "create_column_encryption_key";
        
        public AstCreateColumnEncryptionKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._columnMasterKeyName = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._algorithmName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._encryptedValue = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnEncryptionKey(Position p, AstColumnEncryptionKeyId columnEncryptionKeyId, AstId columnMasterKeyName, AstStringtext algorithmName, AstBinary encryptedValue) : 
                base(p)
        {
            this._columnEncryptionKeyId = columnEncryptionKeyId;
            this._columnMasterKeyName = columnMasterKeyName;
            this._algorithmName = algorithmName;
            this._encryptedValue = encryptedValue;
        }
        
        public AstCreateColumnEncryptionKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnEncryptionKeyId>())
                {
                    this._columnEncryptionKeyId = ((AstColumnEncryptionKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._columnMasterKeyName = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._algorithmName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._encryptedValue = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnEncryptionKeyId ColumnEncryptionKeyId
        {
            get
            {
                return this._columnEncryptionKeyId;
            }
        }
        
        public virtual AstId ColumnMasterKeyName
        {
            get
            {
                return this._columnMasterKeyName;
            }
        }
        
        public virtual AstStringtext AlgorithmName
        {
            get
            {
                return this._algorithmName;
            }
        }
        
        public virtual AstBinary EncryptedValue
        {
            get
            {
                return this._encryptedValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnEncryptionKey(this);
        }
        
        public static AstCreateColumnEncryptionKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_column_encryption_key : 
        ///    CREATE COLUMN ENCRYPTION KEY column_encryption_key_id WITH VALUES ( ,? COLUMN_MASTER_KEY EQUAL column_master_key_name=id_ , ALGORITHM EQUAL algorithm_name=stringtext , ENCRYPTED_VALUE EQUAL encrypted_value=binary_ ) ,? 
        /// </summary>
        public static AstCreateColumnEncryptionKey New(AstColumnEncryptionKeyId columnEncryptionKeyId, AstId columnMasterKeyName, AstStringtext algorithmName, AstBinary encryptedValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnEncryptionKeyId);
            list.Add(columnMasterKeyName);
            list.Add(algorithmName);
            list.Add(encryptedValue);
            return new AstCreateColumnEncryptionKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_certificate : DROP  CERTIFICATE  certificate_id
    /// </summary>
    public partial class AstDropCertificate : AstBnfRule
    {
        
        private AstCertificateId _certificateId;
        
        private static string _ruleValue = "DROP  CERTIFICATE  certificate_id";
        
        private static string _ruleName = "drop_certificate";
        
        public AstDropCertificate(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCertificate(Position p, AstCertificateId certificateId) : 
                base(p)
        {
            this._certificateId = certificateId;
        }
        
        public AstDropCertificate(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCertificate(this);
        }
        
        public static AstDropCertificate? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_certificate : 
        ///    DROP CERTIFICATE certificate_id 
        /// </summary>
        public static AstDropCertificate New(AstCertificateId certificateId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(certificateId);
            return new AstDropCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_column_encryption_key : DROP  COLUMN  ENCRYPTION  KEY  encryptor_id
    /// </summary>
    public partial class AstDropColumnEncryptionKey : AstBnfRule
    {
        
        private AstEncryptorId _encryptorId;
        
        private static string _ruleValue = "DROP  COLUMN  ENCRYPTION  KEY  encryptor_id";
        
        private static string _ruleName = "drop_column_encryption_key";
        
        public AstDropColumnEncryptionKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorId>())
                {
                    this._encryptorId = ((AstEncryptorId)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnEncryptionKey(Position p, AstEncryptorId encryptorId) : 
                base(p)
        {
            this._encryptorId = encryptorId;
        }
        
        public AstDropColumnEncryptionKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptorId>())
                {
                    this._encryptorId = ((AstEncryptorId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptorId EncryptorId
        {
            get
            {
                return this._encryptorId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnEncryptionKey(this);
        }
        
        public static AstDropColumnEncryptionKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_column_encryption_key : 
        ///    DROP COLUMN ENCRYPTION KEY encryptor_id 
        /// </summary>
        public static AstDropColumnEncryptionKey New(AstEncryptorId encryptorId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(encryptorId);
            return new AstDropColumnEncryptionKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_column_master_key : DROP  COLUMN  MASTER  KEY  master_key
    /// </summary>
    public partial class AstDropColumnMasterKey : AstBnfRule
    {
        
        private AstMasterKey _masterKey;
        
        private static string _ruleValue = "DROP  COLUMN  MASTER  KEY  master_key";
        
        private static string _ruleName = "drop_column_master_key";
        
        public AstDropColumnMasterKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public AstDropColumnMasterKey(Position p, AstMasterKey masterKey) : 
                base(p)
        {
            this._masterKey = masterKey;
        }
        
        public AstDropColumnMasterKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMasterKey>())
                {
                    this._masterKey = ((AstMasterKey)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMasterKey MasterKey
        {
            get
            {
                return this._masterKey;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropColumnMasterKey(this);
        }
        
        public static AstDropColumnMasterKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_column_master_key : 
        ///    DROP COLUMN MASTER KEY master_key 
        /// </summary>
        public static AstDropColumnMasterKey New(AstMasterKey masterKey)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(masterKey);
            return new AstDropColumnMasterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_credential : DROP  CREDENTIAL  credential_id
    /// </summary>
    public partial class AstDropCredential : AstBnfRule
    {
        
        private AstCredentialId _credentialId;
        
        private static string _ruleValue = "DROP  CREDENTIAL  credential_id";
        
        private static string _ruleName = "drop_credential";
        
        public AstDropCredential(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCredential(Position p, AstCredentialId credentialId) : 
                base(p)
        {
            this._credentialId = credentialId;
        }
        
        public AstDropCredential(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCredential(this);
        }
        
        public static AstDropCredential? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_credential : 
        ///    DROP CREDENTIAL credential_id 
        /// </summary>
        public static AstDropCredential New(AstCredentialId credentialId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(credentialId);
            return new AstDropCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_cryptograhic_provider : DROP  CRYPTOGRAPHIC  PROVIDER  provider_id
    /// </summary>
    public partial class AstDropCryptograhicProvider : AstBnfRule
    {
        
        private AstProviderId _providerId;
        
        private static string _ruleValue = "DROP  CRYPTOGRAPHIC  PROVIDER  provider_id";
        
        private static string _ruleName = "drop_cryptograhic_provider";
        
        public AstDropCryptograhicProvider(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public AstDropCryptograhicProvider(Position p, AstProviderId providerId) : 
                base(p)
        {
            this._providerId = providerId;
        }
        
        public AstDropCryptograhicProvider(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropCryptograhicProvider(this);
        }
        
        public static AstDropCryptograhicProvider? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_cryptograhic_provider : 
        ///    DROP CRYPTOGRAPHIC PROVIDER provider_id 
        /// </summary>
        public static AstDropCryptograhicProvider New(AstProviderId providerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(providerId);
            return new AstDropCryptograhicProvider(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_database_audit_specification : DROP  DATABASE  AUDIT  SPECIFICATION  audit_id
    /// </summary>
    public partial class AstDropDatabaseAuditSpecification : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private static string _ruleValue = "DROP  DATABASE  AUDIT  SPECIFICATION  audit_id";
        
        private static string _ruleName = "drop_database_audit_specification";
        
        public AstDropDatabaseAuditSpecification(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseAuditSpecification(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstDropDatabaseAuditSpecification(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseAuditSpecification(this);
        }
        
        public static AstDropDatabaseAuditSpecification? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_database_audit_specification : 
        ///    DROP DATABASE AUDIT SPECIFICATION audit_id 
        /// </summary>
        public static AstDropDatabaseAuditSpecification New(AstAuditId auditId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            return new AstDropDatabaseAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_database_scoped_credential : DROP  DATABASE  SCOPED  CREDENTIAL  credential_id
    /// </summary>
    public partial class AstDropDatabaseScopedCredential : AstBnfRule
    {
        
        private AstCredentialId _credentialId;
        
        private static string _ruleValue = "DROP  DATABASE  SCOPED  CREDENTIAL  credential_id";
        
        private static string _ruleName = "drop_database_scoped_credential";
        
        public AstDropDatabaseScopedCredential(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDatabaseScopedCredential(Position p, AstCredentialId credentialId) : 
                base(p)
        {
            this._credentialId = credentialId;
        }
        
        public AstDropDatabaseScopedCredential(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDatabaseScopedCredential(this);
        }
        
        public static AstDropDatabaseScopedCredential? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_database_scoped_credential : 
        ///    DROP DATABASE SCOPED CREDENTIAL credential_id 
        /// </summary>
        public static AstDropDatabaseScopedCredential New(AstCredentialId credentialId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(credentialId);
            return new AstDropDatabaseScopedCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_endpoint : DROP  ENDPOINT  endpoint_id
    /// </summary>
    public partial class AstDropEndpoint : AstBnfRule
    {
        
        private AstEndpointId _endpointId;
        
        private static string _ruleValue = "DROP  ENDPOINT  endpoint_id";
        
        private static string _ruleName = "drop_endpoint";
        
        public AstDropEndpoint(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public AstDropEndpoint(Position p, AstEndpointId endpointId) : 
                base(p)
        {
            this._endpointId = endpointId;
        }
        
        public AstDropEndpoint(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointId EndpointId
        {
            get
            {
                return this._endpointId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEndpoint(this);
        }
        
        public static AstDropEndpoint? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_endpoint : 
        ///    DROP ENDPOINT endpoint_id 
        /// </summary>
        public static AstDropEndpoint New(AstEndpointId endpointId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(endpointId);
            return new AstDropEndpoint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_data_source : DROP  EXTERNAL  DATA  SOURCE  external_data_source_id
    /// </summary>
    public partial class AstDropExternalDataSource : AstBnfRule
    {
        
        private AstExternalDataSourceId _externalDataSourceId;
        
        private static string _ruleValue = "DROP  EXTERNAL  DATA  SOURCE  external_data_source_id";
        
        private static string _ruleName = "drop_external_data_source";
        
        public AstDropExternalDataSource(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalDataSource(Position p, AstExternalDataSourceId externalDataSourceId) : 
                base(p)
        {
            this._externalDataSourceId = externalDataSourceId;
        }
        
        public AstDropExternalDataSource(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalDataSourceId>())
                {
                    this._externalDataSourceId = ((AstExternalDataSourceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalDataSourceId ExternalDataSourceId
        {
            get
            {
                return this._externalDataSourceId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalDataSource(this);
        }
        
        public static AstDropExternalDataSource? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_external_data_source : 
        ///    DROP EXTERNAL DATA SOURCE external_data_source_id 
        /// </summary>
        public static AstDropExternalDataSource New(AstExternalDataSourceId externalDataSourceId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(externalDataSourceId);
            return new AstDropExternalDataSource(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_file_format : DROP  EXTERNAL  FILE  FORMAT  external_file_format_id
    /// </summary>
    public partial class AstDropExternalFileFormat : AstBnfRule
    {
        
        private AstExternalFileFormatId _externalFileFormatId;
        
        private static string _ruleValue = "DROP  EXTERNAL  FILE  FORMAT  external_file_format_id";
        
        private static string _ruleName = "drop_external_file_format";
        
        public AstDropExternalFileFormat(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatId>())
                {
                    this._externalFileFormatId = ((AstExternalFileFormatId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalFileFormat(Position p, AstExternalFileFormatId externalFileFormatId) : 
                base(p)
        {
            this._externalFileFormatId = externalFileFormatId;
        }
        
        public AstDropExternalFileFormat(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExternalFileFormatId>())
                {
                    this._externalFileFormatId = ((AstExternalFileFormatId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExternalFileFormatId ExternalFileFormatId
        {
            get
            {
                return this._externalFileFormatId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalFileFormat(this);
        }
        
        public static AstDropExternalFileFormat? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_external_file_format : 
        ///    DROP EXTERNAL FILE FORMAT external_file_format_id 
        /// </summary>
        public static AstDropExternalFileFormat New(AstExternalFileFormatId externalFileFormatId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(externalFileFormatId);
            return new AstDropExternalFileFormat(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_library : DROP  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstDropExternalLibrary : AstBnfRule
    {
        
        private AstLibraryId _libraryId;
        
        private AstOwnerId _ownerId;
        
        private static string _ruleValue = "DROP  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?";
        
        private static string _ruleName = "drop_external_library";
        
        public AstDropExternalLibrary(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalLibrary(Position p, AstLibraryId libraryId, AstOwnerId ownerId) : 
                base(p)
        {
            this._libraryId = libraryId;
            this._ownerId = ownerId;
        }
        
        public AstDropExternalLibrary(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalLibrary(this);
        }
        
        public static AstDropExternalLibrary? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_external_library : 
        ///    DROP EXTERNAL LIBRARY library_id AUTHORIZATION owner_id 
        /// </summary>
        public static AstDropExternalLibrary New(AstLibraryId libraryId, AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            return new AstDropExternalLibrary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_resource_pool : DROP  EXTERNAL  RESOURCE  POOL  pool_id
    /// </summary>
    public partial class AstDropExternalResourcePool : AstBnfRule
    {
        
        private AstPoolId _poolId;
        
        private static string _ruleValue = "DROP  EXTERNAL  RESOURCE  POOL  pool_id";
        
        private static string _ruleName = "drop_external_resource_pool";
        
        public AstDropExternalResourcePool(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalResourcePool(Position p, AstPoolId poolId) : 
                base(p)
        {
            this._poolId = poolId;
        }
        
        public AstDropExternalResourcePool(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalResourcePool(this);
        }
        
        public static AstDropExternalResourcePool? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_external_resource_pool : 
        ///    DROP EXTERNAL RESOURCE POOL pool_id 
        /// </summary>
        public static AstDropExternalResourcePool New(AstPoolId poolId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(poolId);
            return new AstDropExternalResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_external_table : DROP  EXTERNAL  TABLE  database_schema_table_ref
    /// </summary>
    public partial class AstDropExternalTable : AstBnfRule
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private static string _ruleValue = "DROP  EXTERNAL  TABLE  database_schema_table_ref";
        
        private static string _ruleName = "drop_external_table";
        
        public AstDropExternalTable(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropExternalTable(Position p, AstDatabaseSchemaTableRef databaseSchemaTableRef) : 
                base(p)
        {
            this._databaseSchemaTableRef = databaseSchemaTableRef;
        }
        
        public AstDropExternalTable(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropExternalTable(this);
        }
        
        public static AstDropExternalTable? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_external_table : 
        ///    DROP EXTERNAL TABLE database_schema_table_ref 
        /// </summary>
        public static AstDropExternalTable New(AstDatabaseSchemaTableRef databaseSchemaTableRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseSchemaTableRef);
            return new AstDropExternalTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_event_notifications : DROP  EVENT  NOTIFICATION  notification_ids  ON  event_notification_on
    /// </summary>
    public partial class AstDropEventNotifications : AstBnfRule
    {
        
        private AstNotificationIds _notificationIds;
        
        private AstEventNotificationOn _eventNotificationOn;
        
        private static string _ruleValue = "DROP  EVENT  NOTIFICATION  notification_ids  ON  event_notification_on";
        
        private static string _ruleName = "drop_event_notifications";
        
        public AstDropEventNotifications(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNotificationIds>())
                {
                    this._notificationIds = ((AstNotificationIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
            }
        }
        
        public AstDropEventNotifications(Position p, AstNotificationIds notificationIds, AstEventNotificationOn eventNotificationOn) : 
                base(p)
        {
            this._notificationIds = notificationIds;
            this._eventNotificationOn = eventNotificationOn;
        }
        
        public AstDropEventNotifications(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNotificationIds>())
                {
                    this._notificationIds = ((AstNotificationIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNotificationIds NotificationIds
        {
            get
            {
                return this._notificationIds;
            }
        }
        
        public virtual AstEventNotificationOn EventNotificationOn
        {
            get
            {
                return this._eventNotificationOn;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventNotifications(this);
        }
        
        public static AstDropEventNotifications? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_event_notifications : 
        ///    DROP EVENT NOTIFICATION notification_ids ON event_notification_on 
        /// </summary>
        public static AstDropEventNotifications New(AstNotificationIds notificationIds, AstEventNotificationOn eventNotificationOn)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(notificationIds);
            list.Add(eventNotificationOn);
            return new AstDropEventNotifications(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_event_session : DROP  EVENT  SESSION  event_session_id  ON  SERVER
    /// </summary>
    public partial class AstDropEventSession : AstBnfRule
    {
        
        private AstEventSessionId _eventSessionId;
        
        private static string _ruleValue = "DROP  EVENT  SESSION  event_session_id  ON  SERVER";
        
        private static string _ruleName = "drop_event_session";
        
        public AstDropEventSession(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
            }
        }
        
        public AstDropEventSession(Position p, AstEventSessionId eventSessionId) : 
                base(p)
        {
            this._eventSessionId = eventSessionId;
        }
        
        public AstDropEventSession(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionId EventSessionId
        {
            get
            {
                return this._eventSessionId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropEventSession(this);
        }
        
        public static AstDropEventSession? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_event_session : 
        ///    DROP EVENT SESSION event_session_id ON SERVER 
        /// </summary>
        public static AstDropEventSession New(AstEventSessionId eventSessionId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventSessionId);
            return new AstDropEventSession(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_fulltext_catalog : DROP  FULLTEXT  CATALOG  catalog_id
    /// </summary>
    public partial class AstDropFulltextCatalog : AstBnfRule
    {
        
        private AstCatalogId _catalogId;
        
        private static string _ruleValue = "DROP  FULLTEXT  CATALOG  catalog_id";
        
        private static string _ruleName = "drop_fulltext_catalog";
        
        public AstDropFulltextCatalog(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextCatalog(Position p, AstCatalogId catalogId) : 
                base(p)
        {
            this._catalogId = catalogId;
        }
        
        public AstDropFulltextCatalog(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextCatalog(this);
        }
        
        public static AstDropFulltextCatalog? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_fulltext_catalog : 
        ///    DROP FULLTEXT CATALOG catalog_id 
        /// </summary>
        public static AstDropFulltextCatalog New(AstCatalogId catalogId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(catalogId);
            return new AstDropFulltextCatalog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_fulltext_index : DROP  FULLTEXT  INDEX  ON  database_schema_table_ref
    /// </summary>
    public partial class AstDropFulltextIndex : AstBnfRule
    {
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private static string _ruleValue = "DROP  FULLTEXT  INDEX  ON  database_schema_table_ref";
        
        private static string _ruleName = "drop_fulltext_index";
        
        public AstDropFulltextIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextIndex(Position p, AstDatabaseSchemaTableRef databaseSchemaTableRef) : 
                base(p)
        {
            this._databaseSchemaTableRef = databaseSchemaTableRef;
        }
        
        public AstDropFulltextIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextIndex(this);
        }
        
        public static AstDropFulltextIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_fulltext_index : 
        ///    DROP FULLTEXT INDEX ON database_schema_table_ref 
        /// </summary>
        public static AstDropFulltextIndex New(AstDatabaseSchemaTableRef databaseSchemaTableRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseSchemaTableRef);
            return new AstDropFulltextIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_fulltext_stoplist : DROP  FULLTEXT  STOPLIST  stoplist_id
    /// </summary>
    public partial class AstDropFulltextStoplist : AstBnfRule
    {
        
        private AstStoplistId _stoplistId;
        
        private static string _ruleValue = "DROP  FULLTEXT  STOPLIST  stoplist_id";
        
        private static string _ruleName = "drop_fulltext_stoplist";
        
        public AstDropFulltextStoplist(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public AstDropFulltextStoplist(Position p, AstStoplistId stoplistId) : 
                base(p)
        {
            this._stoplistId = stoplistId;
        }
        
        public AstDropFulltextStoplist(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFulltextStoplist(this);
        }
        
        public static AstDropFulltextStoplist? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_fulltext_stoplist : 
        ///    DROP FULLTEXT STOPLIST stoplist_id 
        /// </summary>
        public static AstDropFulltextStoplist New(AstStoplistId stoplistId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stoplistId);
            return new AstDropFulltextStoplist(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_login : DROP  LOGIN  login_id
    /// </summary>
    public partial class AstDropLogin : AstBnfRule
    {
        
        private AstLoginId _loginId;
        
        private static string _ruleValue = "DROP  LOGIN  login_id";
        
        private static string _ruleName = "drop_login";
        
        public AstDropLogin(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstDropLogin(Position p, AstLoginId loginId) : 
                base(p)
        {
            this._loginId = loginId;
        }
        
        public AstDropLogin(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropLogin(this);
        }
        
        public static AstDropLogin? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_login : 
        ///    DROP LOGIN login_id 
        /// </summary>
        public static AstDropLogin New(AstLoginId loginId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            return new AstDropLogin(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_message_type : DROP  MESSAGE  TYPE  message_type_id
    /// </summary>
    public partial class AstDropMessageType : AstBnfRule
    {
        
        private AstMessageTypeId _messageTypeId;
        
        private static string _ruleValue = "DROP  MESSAGE  TYPE  message_type_id";
        
        private static string _ruleName = "drop_message_type";
        
        public AstDropMessageType(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public AstDropMessageType(Position p, AstMessageTypeId messageTypeId) : 
                base(p)
        {
            this._messageTypeId = messageTypeId;
        }
        
        public AstDropMessageType(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropMessageType(this);
        }
        
        public static AstDropMessageType? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_message_type : 
        ///    DROP MESSAGE TYPE message_type_id 
        /// </summary>
        public static AstDropMessageType New(AstMessageTypeId messageTypeId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(messageTypeId);
            return new AstDropMessageType(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_partition_function : DROP  PARTITION  FUNCTION  partition_function_id
    /// </summary>
    public partial class AstDropPartitionFunction : AstBnfRule
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private static string _ruleValue = "DROP  PARTITION  FUNCTION  partition_function_id";
        
        private static string _ruleName = "drop_partition_function";
        
        public AstDropPartitionFunction(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionFunction(Position p, AstPartitionFunctionId partitionFunctionId) : 
                base(p)
        {
            this._partitionFunctionId = partitionFunctionId;
        }
        
        public AstDropPartitionFunction(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionFunction(this);
        }
        
        public static AstDropPartitionFunction? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_partition_function : 
        ///    DROP PARTITION FUNCTION partition_function_id 
        /// </summary>
        public static AstDropPartitionFunction New(AstPartitionFunctionId partitionFunctionId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partitionFunctionId);
            return new AstDropPartitionFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_partition_scheme : DROP  PARTITION  SCHEME  partition_scheme_id
    /// </summary>
    public partial class AstDropPartitionScheme : AstBnfRule
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        private static string _ruleValue = "DROP  PARTITION  SCHEME  partition_scheme_id";
        
        private static string _ruleName = "drop_partition_scheme";
        
        public AstDropPartitionScheme(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public AstDropPartitionScheme(Position p, AstPartitionSchemeId partitionSchemeId) : 
                base(p)
        {
            this._partitionSchemeId = partitionSchemeId;
        }
        
        public AstDropPartitionScheme(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropPartitionScheme(this);
        }
        
        public static AstDropPartitionScheme? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_partition_scheme : 
        ///    DROP PARTITION SCHEME partition_scheme_id 
        /// </summary>
        public static AstDropPartitionScheme New(AstPartitionSchemeId partitionSchemeId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partitionSchemeId);
            return new AstDropPartitionScheme(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_queue : DROP  QUEUE  database_schema_queue_ref
    /// </summary>
    public partial class AstDropQueue : AstBnfRule
    {
        
        private AstDatabaseSchemaQueueRef _databaseSchemaQueueRef;
        
        private static string _ruleValue = "DROP  QUEUE  database_schema_queue_ref";
        
        private static string _ruleName = "drop_queue";
        
        public AstDropQueue(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaQueueRef>())
                {
                    this._databaseSchemaQueueRef = ((AstDatabaseSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropQueue(Position p, AstDatabaseSchemaQueueRef databaseSchemaQueueRef) : 
                base(p)
        {
            this._databaseSchemaQueueRef = databaseSchemaQueueRef;
        }
        
        public AstDropQueue(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseSchemaQueueRef>())
                {
                    this._databaseSchemaQueueRef = ((AstDatabaseSchemaQueueRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseSchemaQueueRef DatabaseSchemaQueueRef
        {
            get
            {
                return this._databaseSchemaQueueRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropQueue(this);
        }
        
        public static AstDropQueue? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_queue : 
        ///    DROP QUEUE database_schema_queue_ref 
        /// </summary>
        public static AstDropQueue New(AstDatabaseSchemaQueueRef databaseSchemaQueueRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseSchemaQueueRef);
            return new AstDropQueue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_remote_service_binding : DROP  REMOTE  SERVICE  BINDING  binding_id
    /// </summary>
    public partial class AstDropRemoteServiceBinding : AstBnfRule
    {
        
        private AstBindingId _bindingId;
        
        private static string _ruleValue = "DROP  REMOTE  SERVICE  BINDING  binding_id";
        
        private static string _ruleName = "drop_remote_service_binding";
        
        public AstDropRemoteServiceBinding(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public AstDropRemoteServiceBinding(Position p, AstBindingId bindingId) : 
                base(p)
        {
            this._bindingId = bindingId;
        }
        
        public AstDropRemoteServiceBinding(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRemoteServiceBinding(this);
        }
        
        public static AstDropRemoteServiceBinding? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_remote_service_binding : 
        ///    DROP REMOTE SERVICE BINDING binding_id 
        /// </summary>
        public static AstDropRemoteServiceBinding New(AstBindingId bindingId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(bindingId);
            return new AstDropRemoteServiceBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_resource_pool : DROP  RESOURCE  POOL  pool_id
    /// </summary>
    public partial class AstDropResourcePool : AstBnfRule
    {
        
        private AstPoolId _poolId;
        
        private static string _ruleValue = "DROP  RESOURCE  POOL  pool_id";
        
        private static string _ruleName = "drop_resource_pool";
        
        public AstDropResourcePool(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public AstDropResourcePool(Position p, AstPoolId poolId) : 
                base(p)
        {
            this._poolId = poolId;
        }
        
        public AstDropResourcePool(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropResourcePool(this);
        }
        
        public static AstDropResourcePool? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_resource_pool : 
        ///    DROP RESOURCE POOL pool_id 
        /// </summary>
        public static AstDropResourcePool New(AstPoolId poolId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(poolId);
            return new AstDropResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_db_role : DROP  ROLE  (IF  EXISTS)?  role_id
    /// </summary>
    public partial class AstDropDbRole : AstBnfRule
    {
        
        private AstRoleId _roleId;
        
        private static string _ruleValue = "DROP  ROLE  (IF  EXISTS)?  role_id";
        
        private static string _ruleName = "drop_db_role";
        
        public AstDropDbRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropDbRole(Position p, AstRoleId roleId) : 
                base(p)
        {
            this._roleId = roleId;
        }
        
        public AstDropDbRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDbRole(this);
        }
        
        public static AstDropDbRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_db_role : 
        ///    DROP ROLE IF EXISTS role_id 
        /// </summary>
        public static AstDropDbRole New(AstRoleId roleId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(roleId);
            return new AstDropDbRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_route : DROP  ROUTE  route_id
    /// </summary>
    public partial class AstDropRoute : AstBnfRule
    {
        
        private AstRouteId _routeId;
        
        private static string _ruleValue = "DROP  ROUTE  route_id";
        
        private static string _ruleName = "drop_route";
        
        public AstDropRoute(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public AstDropRoute(Position p, AstRouteId routeId) : 
                base(p)
        {
            this._routeId = routeId;
        }
        
        public AstDropRoute(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteId RouteId
        {
            get
            {
                return this._routeId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRoute(this);
        }
        
        public static AstDropRoute? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_route : 
        ///    DROP ROUTE route_id 
        /// </summary>
        public static AstDropRoute New(AstRouteId routeId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(routeId);
            return new AstDropRoute(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_schema : DROP  SCHEMA  (IF  EXISTS)?  schema_identifier
    /// </summary>
    public partial class AstDropSchema : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private static string _ruleValue = "DROP  SCHEMA  (IF  EXISTS)?  schema_identifier";
        
        private static string _ruleName = "drop_schema";
        
        public AstDropSchema(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstDropSchema(Position p, AstSchemaIdentifier schemaIdentifier) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
        }
        
        public AstDropSchema(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSchema(this);
        }
        
        public static AstDropSchema? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_schema : 
        ///    DROP SCHEMA IF EXISTS schema_identifier 
        /// </summary>
        public static AstDropSchema New(AstSchemaIdentifier schemaIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            return new AstDropSchema(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_search_property_list : DROP  SEARCH  PROPERTY  LIST  property_list_id
    /// </summary>
    public partial class AstDropSearchPropertyList : AstBnfRule
    {
        
        private AstPropertyListId _propertyListId;
        
        private static string _ruleValue = "DROP  SEARCH  PROPERTY  LIST  property_list_id";
        
        private static string _ruleName = "drop_search_property_list";
        
        public AstDropSearchPropertyList(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListId>())
                {
                    this._propertyListId = ((AstPropertyListId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSearchPropertyList(Position p, AstPropertyListId propertyListId) : 
                base(p)
        {
            this._propertyListId = propertyListId;
        }
        
        public AstDropSearchPropertyList(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPropertyListId>())
                {
                    this._propertyListId = ((AstPropertyListId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPropertyListId PropertyListId
        {
            get
            {
                return this._propertyListId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSearchPropertyList(this);
        }
        
        public static AstDropSearchPropertyList? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_search_property_list : 
        ///    DROP SEARCH PROPERTY LIST property_list_id 
        /// </summary>
        public static AstDropSearchPropertyList New(AstPropertyListId propertyListId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(propertyListId);
            return new AstDropSearchPropertyList(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_security_policy : DROP  SECURITY  POLICY  (IF  EXISTS)?  schema_security_policy_ref
    /// </summary>
    public partial class AstDropSecurityPolicy : AstBnfRule
    {
        
        private AstSchemaSecurityPolicyRef _schemaSecurityPolicyRef;
        
        private static string _ruleValue = "DROP  SECURITY  POLICY  (IF  EXISTS)?  schema_security_policy_ref";
        
        private static string _ruleName = "drop_security_policy";
        
        public AstDropSecurityPolicy(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropSecurityPolicy(Position p, AstSchemaSecurityPolicyRef schemaSecurityPolicyRef) : 
                base(p)
        {
            this._schemaSecurityPolicyRef = schemaSecurityPolicyRef;
        }
        
        public AstDropSecurityPolicy(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSecurityPolicyRef SchemaSecurityPolicyRef
        {
            get
            {
                return this._schemaSecurityPolicyRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSecurityPolicy(this);
        }
        
        public static AstDropSecurityPolicy? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_security_policy : 
        ///    DROP SECURITY POLICY IF EXISTS schema_security_policy_ref 
        /// </summary>
        public static AstDropSecurityPolicy New(AstSchemaSecurityPolicyRef schemaSecurityPolicyRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSecurityPolicyRef);
            return new AstDropSecurityPolicy(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_server_audit : DROP  SERVER  AUDIT  audit_id
    /// </summary>
    public partial class AstDropServerAudit : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private static string _ruleValue = "DROP  SERVER  AUDIT  audit_id";
        
        private static string _ruleName = "drop_server_audit";
        
        public AstDropServerAudit(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAudit(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstDropServerAudit(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAudit(this);
        }
        
        public static AstDropServerAudit? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_server_audit : 
        ///    DROP SERVER AUDIT audit_id 
        /// </summary>
        public static AstDropServerAudit New(AstAuditId auditId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            return new AstDropServerAudit(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_server_audit_specification : DROP  SERVER  AUDIT  SPECIFICATION  audit_id
    /// </summary>
    public partial class AstDropServerAuditSpecification : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private static string _ruleValue = "DROP  SERVER  AUDIT  SPECIFICATION  audit_id";
        
        private static string _ruleName = "drop_server_audit_specification";
        
        public AstDropServerAuditSpecification(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerAuditSpecification(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstDropServerAuditSpecification(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerAuditSpecification(this);
        }
        
        public static AstDropServerAuditSpecification? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_server_audit_specification : 
        ///    DROP SERVER AUDIT SPECIFICATION audit_id 
        /// </summary>
        public static AstDropServerAuditSpecification New(AstAuditId auditId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            return new AstDropServerAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_server_role : DROP  SERVER  ROLE  role_id
    /// </summary>
    public partial class AstDropServerRole : AstBnfRule
    {
        
        private AstRoleId _roleId;
        
        private static string _ruleValue = "DROP  SERVER  ROLE  role_id";
        
        private static string _ruleName = "drop_server_role";
        
        public AstDropServerRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstDropServerRole(Position p, AstRoleId roleId) : 
                base(p)
        {
            this._roleId = roleId;
        }
        
        public AstDropServerRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropServerRole(this);
        }
        
        public static AstDropServerRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_server_role : 
        ///    DROP SERVER ROLE role_id 
        /// </summary>
        public static AstDropServerRole New(AstRoleId roleId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(roleId);
            return new AstDropServerRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_service : DROP  SERVICE  service_id
    /// </summary>
    public partial class AstDropService : AstBnfRule
    {
        
        private AstServiceId _serviceId;
        
        private static string _ruleValue = "DROP  SERVICE  service_id";
        
        private static string _ruleName = "drop_service";
        
        public AstDropService(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
            }
        }
        
        public AstDropService(Position p, AstServiceId serviceId) : 
                base(p)
        {
            this._serviceId = serviceId;
        }
        
        public AstDropService(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropService(this);
        }
        
        public static AstDropService? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_service : 
        ///    DROP SERVICE service_id 
        /// </summary>
        public static AstDropService New(AstServiceId serviceId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serviceId);
            return new AstDropService(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_signature : DROP  COUNTER?  SIGNATURE  FROM  schema_module_ref  BY  drop_signature_bys
    /// </summary>
    public partial class AstDropSignature : AstBnfRule
    {
        
        private AstSchemaModuleRef _schemaModuleRef;
        
        private AstDropSignatureBys _dropSignatureBys;
        
        private static string _ruleValue = "DROP  COUNTER?  SIGNATURE  FROM  schema_module_ref  BY  drop_signature_bys";
        
        private static string _ruleName = "drop_signature";
        
        public AstDropSignature(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaModuleRef>())
                {
                    this._schemaModuleRef = ((AstSchemaModuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropSignatureBys>())
                {
                    this._dropSignatureBys = ((AstDropSignatureBys)(enumerator.Current));
                }
            }
        }
        
        public AstDropSignature(Position p, AstSchemaModuleRef schemaModuleRef, AstDropSignatureBys dropSignatureBys) : 
                base(p)
        {
            this._schemaModuleRef = schemaModuleRef;
            this._dropSignatureBys = dropSignatureBys;
        }
        
        public AstDropSignature(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaModuleRef>())
                {
                    this._schemaModuleRef = ((AstSchemaModuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropSignatureBys>())
                {
                    this._dropSignatureBys = ((AstDropSignatureBys)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaModuleRef SchemaModuleRef
        {
            get
            {
                return this._schemaModuleRef;
            }
        }
        
        public virtual AstDropSignatureBys DropSignatureBys
        {
            get
            {
                return this._dropSignatureBys;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSignature(this);
        }
        
        public static AstDropSignature? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_signature : 
        ///    DROP COUNTER? SIGNATURE FROM schema_module_ref BY drop_signature_bys 
        /// </summary>
        public static AstDropSignature New(AstSchemaModuleRef schemaModuleRef, AstDropSignatureBys dropSignatureBys)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaModuleRef);
            list.Add(dropSignatureBys);
            return new AstDropSignature(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_statistics_id_azure_dw_and_pdw : DROP  STATISTICS  schema_object_statistics_ref
    /// </summary>
    public partial class AstDropStatisticsIdAzureDwAndPdw : AstBnfRule
    {
        
        private AstSchemaObjectStatisticsRef _schemaObjectStatisticsRef;
        
        private static string _ruleValue = "DROP  STATISTICS  schema_object_statistics_ref";
        
        private static string _ruleName = "drop_statistics_id_azure_dw_and_pdw";
        
        public AstDropStatisticsIdAzureDwAndPdw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectStatisticsRef>())
                {
                    this._schemaObjectStatisticsRef = ((AstSchemaObjectStatisticsRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropStatisticsIdAzureDwAndPdw(Position p, AstSchemaObjectStatisticsRef schemaObjectStatisticsRef) : 
                base(p)
        {
            this._schemaObjectStatisticsRef = schemaObjectStatisticsRef;
        }
        
        public AstDropStatisticsIdAzureDwAndPdw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaObjectStatisticsRef>())
                {
                    this._schemaObjectStatisticsRef = ((AstSchemaObjectStatisticsRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaObjectStatisticsRef SchemaObjectStatisticsRef
        {
            get
            {
                return this._schemaObjectStatisticsRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropStatisticsIdAzureDwAndPdw(this);
        }
        
        public static AstDropStatisticsIdAzureDwAndPdw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_statistics_id_azure_dw_and_pdw : 
        ///    DROP STATISTICS schema_object_statistics_ref 
        /// </summary>
        public static AstDropStatisticsIdAzureDwAndPdw New(AstSchemaObjectStatisticsRef schemaObjectStatisticsRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaObjectStatisticsRef);
            return new AstDropStatisticsIdAzureDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_symmetric_key : DROP  SYMMETRIC  KEY  symmetric_key_id  (REMOVE  PROVIDER  KEY)?
    /// </summary>
    public partial class AstDropSymmetricKey : AstBnfRule
    {
        
        private AstSymmetricKeyId _symmetricKeyId;
        
        private static string _ruleValue = "DROP  SYMMETRIC  KEY  symmetric_key_id  (REMOVE  PROVIDER  KEY)?";
        
        private static string _ruleName = "drop_symmetric_key";
        
        public AstDropSymmetricKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstDropSymmetricKey(Position p, AstSymmetricKeyId symmetricKeyId) : 
                base(p)
        {
            this._symmetricKeyId = symmetricKeyId;
        }
        
        public AstDropSymmetricKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyId SymmetricKeyId
        {
            get
            {
                return this._symmetricKeyId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSymmetricKey(this);
        }
        
        public static AstDropSymmetricKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_symmetric_key : 
        ///    DROP SYMMETRIC KEY symmetric_key_id REMOVE PROVIDER KEY 
        /// </summary>
        public static AstDropSymmetricKey New(AstSymmetricKeyId symmetricKeyId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(symmetricKeyId);
            return new AstDropSymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_synonym : DROP  SYNONYM  (IF  EXISTS)?  schema_synonym_ref
    /// </summary>
    public partial class AstDropSynonym : AstBnfRule
    {
        
        private AstSchemaSynonymRef _schemaSynonymRef;
        
        private static string _ruleValue = "DROP  SYNONYM  (IF  EXISTS)?  schema_synonym_ref";
        
        private static string _ruleName = "drop_synonym";
        
        public AstDropSynonym(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropSynonym(Position p, AstSchemaSynonymRef schemaSynonymRef) : 
                base(p)
        {
            this._schemaSynonymRef = schemaSynonymRef;
        }
        
        public AstDropSynonym(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSynonymRef SchemaSynonymRef
        {
            get
            {
                return this._schemaSynonymRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropSynonym(this);
        }
        
        public static AstDropSynonym? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_synonym : 
        ///    DROP SYNONYM IF EXISTS schema_synonym_ref 
        /// </summary>
        public static AstDropSynonym New(AstSchemaSynonymRef schemaSynonymRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSynonymRef);
            return new AstDropSynonym(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_user : DROP  USER  (IF  EXISTS)?  user_id
    /// </summary>
    public partial class AstDropUser : AstBnfRule
    {
        
        private AstUserId _userId;
        
        private static string _ruleValue = "DROP  USER  (IF  EXISTS)?  user_id";
        
        private static string _ruleName = "drop_user";
        
        public AstDropUser(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
            }
        }
        
        public AstDropUser(Position p, AstUserId userId) : 
                base(p)
        {
            this._userId = userId;
        }
        
        public AstDropUser(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropUser(this);
        }
        
        public static AstDropUser? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_user : 
        ///    DROP USER IF EXISTS user_id 
        /// </summary>
        public static AstDropUser New(AstUserId userId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(userId);
            return new AstDropUser(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_workload_group : DROP  WORKLOAD  GROUP  group_id
    /// </summary>
    public partial class AstDropWorkloadGroup : AstBnfRule
    {
        
        private AstGroupId _groupId;
        
        private static string _ruleValue = "DROP  WORKLOAD  GROUP  group_id";
        
        private static string _ruleName = "drop_workload_group";
        
        public AstDropWorkloadGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstDropWorkloadGroup(Position p, AstGroupId groupId) : 
                base(p)
        {
            this._groupId = groupId;
        }
        
        public AstDropWorkloadGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropWorkloadGroup(this);
        }
        
        public static AstDropWorkloadGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_workload_group : 
        ///    DROP WORKLOAD GROUP group_id 
        /// </summary>
        public static AstDropWorkloadGroup New(AstGroupId groupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(groupId);
            return new AstDropWorkloadGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_xml_schema_collection : DROP  XML  SCHEMA  COLLECTION  schema_sql_identifier_id
    /// </summary>
    public partial class AstDropXmlSchemaCollection : AstBnfRule
    {
        
        private AstSchemaSqlIdentifierId _schemaSqlIdentifierId;
        
        private static string _ruleValue = "DROP  XML  SCHEMA  COLLECTION  schema_sql_identifier_id";
        
        private static string _ruleName = "drop_xml_schema_collection";
        
        public AstDropXmlSchemaCollection(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public AstDropXmlSchemaCollection(Position p, AstSchemaSqlIdentifierId schemaSqlIdentifierId) : 
                base(p)
        {
            this._schemaSqlIdentifierId = schemaSqlIdentifierId;
        }
        
        public AstDropXmlSchemaCollection(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSqlIdentifierId SchemaSqlIdentifierId
        {
            get
            {
                return this._schemaSqlIdentifierId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropXmlSchemaCollection(this);
        }
        
        public static AstDropXmlSchemaCollection? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_xml_schema_collection : 
        ///    DROP XML SCHEMA COLLECTION schema_sql_identifier_id 
        /// </summary>
        public static AstDropXmlSchemaCollection New(AstSchemaSqlIdentifierId schemaSqlIdentifierId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSqlIdentifierId);
            return new AstDropXmlSchemaCollection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// disable_trigger : DISABLE  trigger_setting
    /// </summary>
    public partial class AstDisableTrigger : AstBnfRule
    {
        
        private AstTriggerSetting _triggerSetting;
        
        private static string _ruleValue = "DISABLE  trigger_setting";
        
        private static string _ruleName = "disable_trigger";
        
        public AstDisableTrigger(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public AstDisableTrigger(Position p, AstTriggerSetting triggerSetting) : 
                base(p)
        {
            this._triggerSetting = triggerSetting;
        }
        
        public AstDisableTrigger(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTriggerSetting TriggerSetting
        {
            get
            {
                return this._triggerSetting;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDisableTrigger(this);
        }
        
        public static AstDisableTrigger? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// disable_trigger : 
        ///    DISABLE trigger_setting 
        /// </summary>
        public static AstDisableTrigger New(AstTriggerSetting triggerSetting)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(triggerSetting);
            return new AstDisableTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// enable_trigger : ENABLE  trigger_setting
    /// </summary>
    public partial class AstEnableTrigger : AstBnfRule
    {
        
        private AstTriggerSetting _triggerSetting;
        
        private static string _ruleValue = "ENABLE  trigger_setting";
        
        private static string _ruleName = "enable_trigger";
        
        public AstEnableTrigger(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public AstEnableTrigger(Position p, AstTriggerSetting triggerSetting) : 
                base(p)
        {
            this._triggerSetting = triggerSetting;
        }
        
        public AstEnableTrigger(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerSetting>())
                {
                    this._triggerSetting = ((AstTriggerSetting)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTriggerSetting TriggerSetting
        {
            get
            {
                return this._triggerSetting;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEnableTrigger(this);
        }
        
        public static AstEnableTrigger? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// enable_trigger : 
        ///    ENABLE trigger_setting 
        /// </summary>
        public static AstEnableTrigger New(AstTriggerSetting triggerSetting)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(triggerSetting);
            return new AstEnableTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// trigger_setting : TRIGGER  trigger_name  ON  trigger_target
    /// </summary>
    public partial class AstTriggerSetting : AstBnfRule
    {
        
        private AstTriggerName _triggerName;
        
        private AstTriggerTarget _triggerTarget;
        
        private static string _ruleValue = "TRIGGER  trigger_name  ON  trigger_target";
        
        private static string _ruleName = "trigger_setting";
        
        public AstTriggerSetting(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerName>())
                {
                    this._triggerName = ((AstTriggerName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTriggerTarget>())
                {
                    this._triggerTarget = ((AstTriggerTarget)(enumerator.Current));
                }
            }
        }
        
        public AstTriggerSetting(Position p, AstTriggerName triggerName, AstTriggerTarget triggerTarget) : 
                base(p)
        {
            this._triggerName = triggerName;
            this._triggerTarget = triggerTarget;
        }
        
        public AstTriggerSetting(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTriggerName>())
                {
                    this._triggerName = ((AstTriggerName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTriggerTarget>())
                {
                    this._triggerTarget = ((AstTriggerTarget)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTriggerName TriggerName
        {
            get
            {
                return this._triggerName;
            }
        }
        
        public virtual AstTriggerTarget TriggerTarget
        {
            get
            {
                return this._triggerTarget;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTriggerSetting(this);
        }
        
        public static AstTriggerSetting? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// trigger_setting : 
        ///    TRIGGER trigger_name ON trigger_target 
        /// </summary>
        public static AstTriggerSetting New(AstTriggerName triggerName, AstTriggerTarget triggerTarget)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(triggerName);
            list.Add(triggerTarget);
            return new AstTriggerSetting(Position.Default, list);
        }
    }
    
    /// <summary>
    /// lock_table : LOCK  TABLE  full_table_ref  IN  share_exclusive  MODE  lock_table_delay?
    /// </summary>
    public partial class AstLockTable : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstShareExclusive _shareExclusive;
        
        private AstLockTableDelay? _lockTableDelay;
        
        private static string _ruleValue = "LOCK  TABLE  full_table_ref  IN  share_exclusive  MODE  lock_table_delay?";
        
        private static string _ruleName = "lock_table";
        
        public AstLockTable(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstShareExclusive>())
                {
                    this._shareExclusive = ((AstShareExclusive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLockTableDelay?>())
                {
                    this._lockTableDelay = ((AstLockTableDelay?)(enumerator.Current));
                }
            }
        }
        
        public AstLockTable(Position p, AstFullTableRef fullTableRef, AstShareExclusive shareExclusive, AstLockTableDelay? lockTableDelay) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._shareExclusive = shareExclusive;
            this._lockTableDelay = lockTableDelay;
        }
        
        public AstLockTable(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstShareExclusive>())
                {
                    this._shareExclusive = ((AstShareExclusive)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLockTableDelay?>())
                {
                    this._lockTableDelay = ((AstLockTableDelay?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstShareExclusive ShareExclusive
        {
            get
            {
                return this._shareExclusive;
            }
        }
        
        public virtual AstLockTableDelay? LockTableDelay
        {
            get
            {
                return this._lockTableDelay;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLockTable(this);
        }
        
        public static AstLockTable? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// lock_table : 
        ///    LOCK TABLE full_table_ref IN share_exclusive MODE lock_table_delay? 
        /// </summary>
        public static AstLockTable New(AstFullTableRef fullTableRef, AstShareExclusive shareExclusive, AstLockTableDelay? lockTableDelay)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(shareExclusive);
            list.Add(lockTableDelay);
            return new AstLockTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// truncate_table : TRUNCATE  TABLE  full_table_ref  (WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  decimal_range  RR_BRACKET  decimals?)?
    /// </summary>
    public partial class AstTruncateTable : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstDecimalRange _decimalRange;
        
        private AstDecimals? _decimals;
        
        private static string _ruleValue = "TRUNCATE  TABLE  full_table_ref  (WITH  LR_BRACKET  PARTITIONS  LR_BRACKET  decim" +
            "al_range  RR_BRACKET  decimals?)?";
        
        private static string _ruleName = "truncate_table";
        
        public AstTruncateTable(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRange>())
                {
                    this._decimalRange = ((AstDecimalRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimals?>())
                {
                    this._decimals = ((AstDecimals?)(enumerator.Current));
                }
            }
        }
        
        public AstTruncateTable(Position p, AstFullTableRef fullTableRef, AstDecimalRange decimalRange, AstDecimals? decimals) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._decimalRange = decimalRange;
            this._decimals = decimals;
        }
        
        public AstTruncateTable(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRange>())
                {
                    this._decimalRange = ((AstDecimalRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimals?>())
                {
                    this._decimals = ((AstDecimals?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstDecimalRange DecimalRange
        {
            get
            {
                return this._decimalRange;
            }
        }
        
        public virtual AstDecimals? Decimals
        {
            get
            {
                return this._decimals;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTruncateTable(this);
        }
        
        public static AstTruncateTable? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// truncate_table : 
        ///    TRUNCATE TABLE full_table_ref WITH ( PARTITIONS ( decimal_range ) decimals? 
        /// </summary>
        public static AstTruncateTable New(AstFullTableRef fullTableRef, AstDecimalRange decimalRange, AstDecimals? decimals)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(decimalRange);
            list.Add(decimals);
            return new AstTruncateTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_credential : ALTER  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringtext  (COMMA  SECRET  EQUAL  secret = stringtext)?
    /// </summary>
    public partial class AstAlterCredential : AstBnfRule
    {
        
        private AstCredentialId _credentialId;
        
        private AstStringtext _identityName;
        
        private AstStringtext _secret;
        
        private static string _ruleValue = "ALTER  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringte" +
            "xt  (COMMA  SECRET  EQUAL  secret = stringtext)?";
        
        private static string _ruleName = "alter_credential";
        
        public AstAlterCredential(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._identityName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._secret = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCredential(Position p, AstCredentialId credentialId, AstStringtext identityName, AstStringtext secret) : 
                base(p)
        {
            this._credentialId = credentialId;
            this._identityName = identityName;
            this._secret = secret;
        }
        
        public AstAlterCredential(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._identityName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._secret = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public virtual AstStringtext IdentityName
        {
            get
            {
                return this._identityName;
            }
        }
        
        public virtual AstStringtext Secret
        {
            get
            {
                return this._secret;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCredential(this);
        }
        
        public static AstAlterCredential? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_credential : 
        ///    ALTER CREDENTIAL credential_id WITH IDENTITY EQUAL identity_name=stringtext , SECRET EQUAL secret=stringtext 
        /// </summary>
        public static AstAlterCredential New(AstCredentialId credentialId, AstStringtext identityName, AstStringtext secret)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(credentialId);
            list.Add(identityName);
            list.Add(secret);
            return new AstAlterCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_credential : CREATE  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringtext  (COMMA  SECRET  EQUAL  secret = stringtext)?  (FOR  CRYPTOGRAPHIC  PROVIDER  cryptographic_provider_id)?
    /// </summary>
    public partial class AstCreateCredential : AstBnfRule
    {
        
        private AstCredentialId _credentialId;
        
        private AstStringtext _identityName;
        
        private AstStringtext _secret;
        
        private AstCryptographicProviderId _cryptographicProviderId;
        
        private static string _ruleValue = "CREATE  CREDENTIAL  credential_id  WITH  IDENTITY  EQUAL  identity_name = stringt" +
            "ext  (COMMA  SECRET  EQUAL  secret = stringtext)?  (FOR  CRYPTOGRAPHIC  PROVIDER" +
            "  cryptographic_provider_id)?";
        
        private static string _ruleName = "create_credential";
        
        public AstCreateCredential(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._identityName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._secret = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCryptographicProviderId>())
                {
                    this._cryptographicProviderId = ((AstCryptographicProviderId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCredential(Position p, AstCredentialId credentialId, AstStringtext identityName, AstStringtext secret, AstCryptographicProviderId cryptographicProviderId) : 
                base(p)
        {
            this._credentialId = credentialId;
            this._identityName = identityName;
            this._secret = secret;
            this._cryptographicProviderId = cryptographicProviderId;
        }
        
        public AstCreateCredential(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._identityName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._secret = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCryptographicProviderId>())
                {
                    this._cryptographicProviderId = ((AstCryptographicProviderId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public virtual AstStringtext IdentityName
        {
            get
            {
                return this._identityName;
            }
        }
        
        public virtual AstStringtext Secret
        {
            get
            {
                return this._secret;
            }
        }
        
        public virtual AstCryptographicProviderId CryptographicProviderId
        {
            get
            {
                return this._cryptographicProviderId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCredential(this);
        }
        
        public static AstCreateCredential? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_credential : 
        ///    CREATE CREDENTIAL credential_id WITH IDENTITY EQUAL identity_name=stringtext , SECRET EQUAL secret=stringtext FOR CRYPTOGRAPHIC PROVIDER cryptographic_provider_id 
        /// </summary>
        public static AstCreateCredential New(AstCredentialId credentialId, AstStringtext identityName, AstStringtext secret, AstCryptographicProviderId cryptographicProviderId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(credentialId);
            list.Add(identityName);
            list.Add(secret);
            list.Add(cryptographicProviderId);
            return new AstCreateCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_cryptographic_provider : ALTER  CRYPTOGRAPHIC  PROVIDER  provider_id  (FROM  FILE  EQUAL  crypto_provider_ddl_file = stringtext)?  enable_disable?
    /// </summary>
    public partial class AstAlterCryptographicProvider : AstBnfRule
    {
        
        private AstProviderId _providerId;
        
        private AstStringtext _cryptoProviderDdlFile;
        
        private AstEnableDisable? _enableDisable;
        
        private static string _ruleValue = "ALTER  CRYPTOGRAPHIC  PROVIDER  provider_id  (FROM  FILE  EQUAL  crypto_provider_" +
            "ddl_file = stringtext)?  enable_disable?";
        
        private static string _ruleName = "alter_cryptographic_provider";
        
        public AstAlterCryptographicProvider(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._cryptoProviderDdlFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable?>())
                {
                    this._enableDisable = ((AstEnableDisable?)(enumerator.Current));
                }
            }
        }
        
        public AstAlterCryptographicProvider(Position p, AstProviderId providerId, AstStringtext cryptoProviderDdlFile, AstEnableDisable? enableDisable) : 
                base(p)
        {
            this._providerId = providerId;
            this._cryptoProviderDdlFile = cryptoProviderDdlFile;
            this._enableDisable = enableDisable;
        }
        
        public AstAlterCryptographicProvider(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._cryptoProviderDdlFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable?>())
                {
                    this._enableDisable = ((AstEnableDisable?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public virtual AstStringtext CryptoProviderDdlFile
        {
            get
            {
                return this._cryptoProviderDdlFile;
            }
        }
        
        public virtual AstEnableDisable? EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterCryptographicProvider(this);
        }
        
        public static AstAlterCryptographicProvider? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_cryptographic_provider : 
        ///    ALTER CRYPTOGRAPHIC PROVIDER provider_id FROM FILE EQUAL crypto_provider_ddl_file=stringtext enable_disable? 
        /// </summary>
        public static AstAlterCryptographicProvider New(AstProviderId providerId, AstStringtext cryptoProviderDdlFile, AstEnableDisable? enableDisable)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(providerId);
            list.Add(cryptoProviderDdlFile);
            list.Add(enableDisable);
            return new AstAlterCryptographicProvider(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_cryptographic_provider : CREATE  CRYPTOGRAPHIC  PROVIDER  provider_id  FROM  FILE  EQUAL  path_of_DLL = stringtext
    /// </summary>
    public partial class AstCreateCryptographicProvider : AstBnfRule
    {
        
        private AstProviderId _providerId;
        
        private AstStringtext _pathOfDLL;
        
        private static string _ruleValue = "CREATE  CRYPTOGRAPHIC  PROVIDER  provider_id  FROM  FILE  EQUAL  path_of_DLL = st" +
            "ringtext";
        
        private static string _ruleName = "create_cryptographic_provider";
        
        public AstCreateCryptographicProvider(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._pathOfDLL = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCryptographicProvider(Position p, AstProviderId providerId, AstStringtext pathOfDLL) : 
                base(p)
        {
            this._providerId = providerId;
            this._pathOfDLL = pathOfDLL;
        }
        
        public AstCreateCryptographicProvider(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProviderId>())
                {
                    this._providerId = ((AstProviderId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._pathOfDLL = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProviderId ProviderId
        {
            get
            {
                return this._providerId;
            }
        }
        
        public virtual AstStringtext PathOfDll
        {
            get
            {
                return this._pathOfDLL;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCryptographicProvider(this);
        }
        
        public static AstCreateCryptographicProvider? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_cryptographic_provider : 
        ///    CREATE CRYPTOGRAPHIC PROVIDER provider_id FROM FILE EQUAL path_of_DLL=stringtext 
        /// </summary>
        public static AstCreateCryptographicProvider New(AstProviderId providerId, AstStringtext pathOfDLL)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(providerId);
            list.Add(pathOfDLL);
            return new AstCreateCryptographicProvider(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_event_notification : CREATE  EVENT  NOTIFICATION  event_notification_id  ON  event_notification_on  (WITH  FAN_IN)?  FOR  (COMMA?  event_type_or_group_id)+  TO  SERVICE  broker_service = stringtext  COMMA  broker_service_specifier_or_current_database = stringtext
    /// </summary>
    public partial class AstCreateEventNotification : AstBnfRule
    {
        
        private AstEventNotificationId _eventNotificationId;
        
        private AstEventNotificationOn _eventNotificationOn;
        
        private AstEventTypeOrGroupId _eventTypeOrGroupId;
        
        private AstStringtext _brokerService;
        
        private AstStringtext _brokerServiceSpecifierOrCurrentDatabase;
        
        private static string _ruleValue = "CREATE  EVENT  NOTIFICATION  event_notification_id  ON  event_notification_on  (W" +
            "ITH  FAN_IN)?  FOR  (COMMA?  event_type_or_group_id)+  TO  SERVICE  broker_servi" +
            "ce = stringtext  COMMA  broker_service_specifier_or_current_database = stringtex" +
            "t";
        
        private static string _ruleName = "create_event_notification";
        
        public AstCreateEventNotification(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationId>())
                {
                    this._eventNotificationId = ((AstEventNotificationId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventTypeOrGroupId>())
                {
                    this._eventTypeOrGroupId = ((AstEventTypeOrGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._brokerService = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._brokerServiceSpecifierOrCurrentDatabase = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstCreateEventNotification(Position p, AstEventNotificationId eventNotificationId, AstEventNotificationOn eventNotificationOn, AstEventTypeOrGroupId eventTypeOrGroupId, AstStringtext brokerService, AstStringtext brokerServiceSpecifierOrCurrentDatabase) : 
                base(p)
        {
            this._eventNotificationId = eventNotificationId;
            this._eventNotificationOn = eventNotificationOn;
            this._eventTypeOrGroupId = eventTypeOrGroupId;
            this._brokerService = brokerService;
            this._brokerServiceSpecifierOrCurrentDatabase = brokerServiceSpecifierOrCurrentDatabase;
        }
        
        public AstCreateEventNotification(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventNotificationId>())
                {
                    this._eventNotificationId = ((AstEventNotificationId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventNotificationOn>())
                {
                    this._eventNotificationOn = ((AstEventNotificationOn)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventTypeOrGroupId>())
                {
                    this._eventTypeOrGroupId = ((AstEventTypeOrGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._brokerService = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._brokerServiceSpecifierOrCurrentDatabase = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventNotificationId EventNotificationId
        {
            get
            {
                return this._eventNotificationId;
            }
        }
        
        public virtual AstEventNotificationOn EventNotificationOn
        {
            get
            {
                return this._eventNotificationOn;
            }
        }
        
        public virtual AstEventTypeOrGroupId EventTypeOrGroupId
        {
            get
            {
                return this._eventTypeOrGroupId;
            }
        }
        
        public virtual AstStringtext BrokerService
        {
            get
            {
                return this._brokerService;
            }
        }
        
        public virtual AstStringtext BrokerServiceSpecifierOrCurrentDatabase
        {
            get
            {
                return this._brokerServiceSpecifierOrCurrentDatabase;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateEventNotification(this);
        }
        
        public static AstCreateEventNotification? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_event_notification : 
        ///    CREATE EVENT NOTIFICATION event_notification_id ON event_notification_on WITH FAN_IN FOR ,? event_type_or_group_id TO SERVICE broker_service=stringtext , broker_service_specifier_or_current_database=stringtext 
        /// </summary>
        public static AstCreateEventNotification New(AstEventNotificationId eventNotificationId, AstEventNotificationOn eventNotificationOn, AstEventTypeOrGroupId eventTypeOrGroupId, AstStringtext brokerService, AstStringtext brokerServiceSpecifierOrCurrentDatabase)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventNotificationId);
            list.Add(eventNotificationOn);
            list.Add(eventTypeOrGroupId);
            list.Add(brokerService);
            list.Add(brokerServiceSpecifierOrCurrentDatabase);
            return new AstCreateEventNotification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session : create_alter  EVENT  SESSION  event_session_id  ON  SERVER  create_or_alter_event_session_add_events?  create_or_alter_event_session_del_events?  create_or_alter_event_session_add_targets?  create_or_alter_event_session_del_targets?  create_or_alter_event_session_with?  (STATE  EQUAL  start_stop)?
    /// </summary>
    public partial class AstCreateOrAlterEventSession : AstBnfRule
    {
        
        private AstCreateAlter _createAlter;
        
        private AstEventSessionId _eventSessionId;
        
        private AstCreateOrAlterEventSessionAddEvents? _createOrAlterEventSessionAddEvents;
        
        private AstCreateOrAlterEventSessionDelEvents? _createOrAlterEventSessionDelEvents;
        
        private AstCreateOrAlterEventSessionAddTargets? _createOrAlterEventSessionAddTargets;
        
        private AstCreateOrAlterEventSessionDelTargets? _createOrAlterEventSessionDelTargets;
        
        private AstCreateOrAlterEventSessionWith? _createOrAlterEventSessionWith;
        
        private AstStartStop _startStop;
        
        private static string _ruleValue = @"create_alter  EVENT  SESSION  event_session_id  ON  SERVER  create_or_alter_event_session_add_events?  create_or_alter_event_session_del_events?  create_or_alter_event_session_add_targets?  create_or_alter_event_session_del_targets?  create_or_alter_event_session_with?  (STATE  EQUAL  start_stop)?";
        
        private static string _ruleName = "create_or_alter_event_session";
        
        public AstCreateOrAlterEventSession(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddEvents?>())
                {
                    this._createOrAlterEventSessionAddEvents = ((AstCreateOrAlterEventSessionAddEvents?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelEvents?>())
                {
                    this._createOrAlterEventSessionDelEvents = ((AstCreateOrAlterEventSessionDelEvents?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddTargets?>())
                {
                    this._createOrAlterEventSessionAddTargets = ((AstCreateOrAlterEventSessionAddTargets?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelTargets?>())
                {
                    this._createOrAlterEventSessionDelTargets = ((AstCreateOrAlterEventSessionDelTargets?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionWith?>())
                {
                    this._createOrAlterEventSessionWith = ((AstCreateOrAlterEventSessionWith?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStartStop>())
                {
                    this._startStop = ((AstStartStop)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSession(Position p, AstCreateAlter createAlter, AstEventSessionId eventSessionId, AstCreateOrAlterEventSessionAddEvents? createOrAlterEventSessionAddEvents, AstCreateOrAlterEventSessionDelEvents? createOrAlterEventSessionDelEvents, AstCreateOrAlterEventSessionAddTargets? createOrAlterEventSessionAddTargets, AstCreateOrAlterEventSessionDelTargets? createOrAlterEventSessionDelTargets, AstCreateOrAlterEventSessionWith? createOrAlterEventSessionWith, AstStartStop startStop) : 
                base(p)
        {
            this._createAlter = createAlter;
            this._eventSessionId = eventSessionId;
            this._createOrAlterEventSessionAddEvents = createOrAlterEventSessionAddEvents;
            this._createOrAlterEventSessionDelEvents = createOrAlterEventSessionDelEvents;
            this._createOrAlterEventSessionAddTargets = createOrAlterEventSessionAddTargets;
            this._createOrAlterEventSessionDelTargets = createOrAlterEventSessionDelTargets;
            this._createOrAlterEventSessionWith = createOrAlterEventSessionWith;
            this._startStop = startStop;
        }
        
        public AstCreateOrAlterEventSession(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateAlter>())
                {
                    this._createAlter = ((AstCreateAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionId>())
                {
                    this._eventSessionId = ((AstEventSessionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddEvents?>())
                {
                    this._createOrAlterEventSessionAddEvents = ((AstCreateOrAlterEventSessionAddEvents?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelEvents?>())
                {
                    this._createOrAlterEventSessionDelEvents = ((AstCreateOrAlterEventSessionDelEvents?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionAddTargets?>())
                {
                    this._createOrAlterEventSessionAddTargets = ((AstCreateOrAlterEventSessionAddTargets?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionDelTargets?>())
                {
                    this._createOrAlterEventSessionDelTargets = ((AstCreateOrAlterEventSessionDelTargets?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateOrAlterEventSessionWith?>())
                {
                    this._createOrAlterEventSessionWith = ((AstCreateOrAlterEventSessionWith?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStartStop>())
                {
                    this._startStop = ((AstStartStop)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateAlter CreateAlter
        {
            get
            {
                return this._createAlter;
            }
        }
        
        public virtual AstEventSessionId EventSessionId
        {
            get
            {
                return this._eventSessionId;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionAddEvents? CreateOrAlterEventSessionAddEvents
        {
            get
            {
                return this._createOrAlterEventSessionAddEvents;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionDelEvents? CreateOrAlterEventSessionDelEvents
        {
            get
            {
                return this._createOrAlterEventSessionDelEvents;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionAddTargets? CreateOrAlterEventSessionAddTargets
        {
            get
            {
                return this._createOrAlterEventSessionAddTargets;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionDelTargets? CreateOrAlterEventSessionDelTargets
        {
            get
            {
                return this._createOrAlterEventSessionDelTargets;
            }
        }
        
        public virtual AstCreateOrAlterEventSessionWith? CreateOrAlterEventSessionWith
        {
            get
            {
                return this._createOrAlterEventSessionWith;
            }
        }
        
        public virtual AstStartStop StartStop
        {
            get
            {
                return this._startStop;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSession(this);
        }
        
        public static AstCreateOrAlterEventSession? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_event_session : 
        ///    create_alter EVENT SESSION event_session_id ON SERVER create_or_alter_event_session_add_events? create_or_alter_event_session_del_events? create_or_alter_event_session_add_targets? create_or_alter_event_session_del_targets? create_or_alter_event_session_with? STATE EQUAL start_stop 
        /// </summary>
        public static AstCreateOrAlterEventSession New(AstCreateAlter createAlter, AstEventSessionId eventSessionId, AstCreateOrAlterEventSessionAddEvents? createOrAlterEventSessionAddEvents, AstCreateOrAlterEventSessionDelEvents? createOrAlterEventSessionDelEvents, AstCreateOrAlterEventSessionAddTargets? createOrAlterEventSessionAddTargets, AstCreateOrAlterEventSessionDelTargets? createOrAlterEventSessionDelTargets, AstCreateOrAlterEventSessionWith? createOrAlterEventSessionWith, AstStartStop startStop)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createAlter);
            list.Add(eventSessionId);
            list.Add(createOrAlterEventSessionAddEvents);
            list.Add(createOrAlterEventSessionDelEvents);
            list.Add(createOrAlterEventSessionAddTargets);
            list.Add(createOrAlterEventSessionDelTargets);
            list.Add(createOrAlterEventSessionWith);
            list.Add(startStop);
            return new AstCreateOrAlterEventSession(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_max_memory : MAX_MEMORY  EQUAL  decimal  memory_size_unity
    /// </summary>
    public partial class AstSessionArgMaxMemory : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private AstMemorySizeUnity _memorySizeUnity;
        
        private static string _ruleValue = "MAX_MEMORY  EQUAL  decimal  memory_size_unity";
        
        private static string _ruleName = "session_arg_max_memory";
        
        public AstSessionArgMaxMemory(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgMaxMemory(Position p, AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity) : 
                base(p)
        {
            this._decimal = @decimal;
            this._memorySizeUnity = memorySizeUnity;
        }
        
        public AstSessionArgMaxMemory(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstMemorySizeUnity MemorySizeUnity
        {
            get
            {
                return this._memorySizeUnity;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMaxMemory(this);
        }
        
        public static AstSessionArgMaxMemory? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// session_arg_max_memory : 
        ///    MAX_MEMORY EQUAL decimal memory_size_unity 
        /// </summary>
        public static AstSessionArgMaxMemory New(AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            list.Add(memorySizeUnity);
            return new AstSessionArgMaxMemory(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_event_retention_mode : EVENT_RETENTION_MODE  EQUAL  session_mode
    /// </summary>
    public partial class AstSessionArgEventRetentionMode : AstBnfRule
    {
        
        private AstSessionMode _sessionMode;
        
        private static string _ruleValue = "EVENT_RETENTION_MODE  EQUAL  session_mode";
        
        private static string _ruleName = "session_arg_event_retention_mode";
        
        public AstSessionArgEventRetentionMode(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSessionMode>())
                {
                    this._sessionMode = ((AstSessionMode)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgEventRetentionMode(Position p, AstSessionMode sessionMode) : 
                base(p)
        {
            this._sessionMode = sessionMode;
        }
        
        public AstSessionArgEventRetentionMode(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSessionMode>())
                {
                    this._sessionMode = ((AstSessionMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSessionMode SessionMode
        {
            get
            {
                return this._sessionMode;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgEventRetentionMode(this);
        }
        
        public static AstSessionArgEventRetentionMode? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// session_arg_event_retention_mode : 
        ///    EVENT_RETENTION_MODE EQUAL session_mode 
        /// </summary>
        public static AstSessionArgEventRetentionMode New(AstSessionMode sessionMode)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(sessionMode);
            return new AstSessionArgEventRetentionMode(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_max_event_size : MAX_EVENT_SIZE  EQUAL  decimal  memory_size_unity
    /// </summary>
    public partial class AstSessionArgMaxEventSize : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private AstMemorySizeUnity _memorySizeUnity;
        
        private static string _ruleValue = "MAX_EVENT_SIZE  EQUAL  decimal  memory_size_unity";
        
        private static string _ruleName = "session_arg_max_event_size";
        
        public AstSessionArgMaxEventSize(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgMaxEventSize(Position p, AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity) : 
                base(p)
        {
            this._decimal = @decimal;
            this._memorySizeUnity = memorySizeUnity;
        }
        
        public AstSessionArgMaxEventSize(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMemorySizeUnity>())
                {
                    this._memorySizeUnity = ((AstMemorySizeUnity)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstMemorySizeUnity MemorySizeUnity
        {
            get
            {
                return this._memorySizeUnity;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMaxEventSize(this);
        }
        
        public static AstSessionArgMaxEventSize? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// session_arg_max_event_size : 
        ///    MAX_EVENT_SIZE EQUAL decimal memory_size_unity 
        /// </summary>
        public static AstSessionArgMaxEventSize New(AstDecimal @decimal, AstMemorySizeUnity memorySizeUnity)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            list.Add(memorySizeUnity);
            return new AstSessionArgMaxEventSize(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_memory_partition : MEMORY_PARTITION_MODE  EQUAL  partition_mode
    /// </summary>
    public partial class AstSessionArgMemoryPartition : AstBnfRule
    {
        
        private AstPartitionMode _partitionMode;
        
        private static string _ruleValue = "MEMORY_PARTITION_MODE  EQUAL  partition_mode";
        
        private static string _ruleName = "session_arg_memory_partition";
        
        public AstSessionArgMemoryPartition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionMode>())
                {
                    this._partitionMode = ((AstPartitionMode)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgMemoryPartition(Position p, AstPartitionMode partitionMode) : 
                base(p)
        {
            this._partitionMode = partitionMode;
        }
        
        public AstSessionArgMemoryPartition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionMode>())
                {
                    this._partitionMode = ((AstPartitionMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionMode PartitionMode
        {
            get
            {
                return this._partitionMode;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgMemoryPartition(this);
        }
        
        public static AstSessionArgMemoryPartition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// session_arg_memory_partition : 
        ///    MEMORY_PARTITION_MODE EQUAL partition_mode 
        /// </summary>
        public static AstSessionArgMemoryPartition New(AstPartitionMode partitionMode)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partitionMode);
            return new AstSessionArgMemoryPartition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_track_causality : TRACK_CAUSALITY  EQUAL  on_off
    /// </summary>
    public partial class AstSessionArgTrackCausality : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "TRACK_CAUSALITY  EQUAL  on_off";
        
        private static string _ruleName = "session_arg_track_causality";
        
        public AstSessionArgTrackCausality(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgTrackCausality(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstSessionArgTrackCausality(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgTrackCausality(this);
        }
        
        public static AstSessionArgTrackCausality? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// session_arg_track_causality : 
        ///    TRACK_CAUSALITY EQUAL on_off 
        /// </summary>
        public static AstSessionArgTrackCausality New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstSessionArgTrackCausality(Position.Default, list);
        }
    }
    
    /// <summary>
    /// session_arg_startup_state : STARTUP_STATE  EQUAL  on_off
    /// </summary>
    public partial class AstSessionArgStartupState : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "STARTUP_STATE  EQUAL  on_off";
        
        private static string _ruleName = "session_arg_startup_state";
        
        public AstSessionArgStartupState(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSessionArgStartupState(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstSessionArgStartupState(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSessionArgStartupState(this);
        }
        
        public static AstSessionArgStartupState? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// session_arg_startup_state : 
        ///    STARTUP_STATE EQUAL on_off 
        /// </summary>
        public static AstSessionArgStartupState New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstSessionArgStartupState(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_add_event : ADD  EVENT  module_package_event_ref  (LR_BRACKET  (SET  set_attributes)?  event_session_actions  where_session_condition?  RR_BRACKET)
    /// </summary>
    public partial class AstCreateOrAlterEventSessionAddEvent : AstBnfRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        private AstSetAttributes _setAttributes;
        
        private AstEventSessionActions _eventSessionActions;
        
        private AstWhereSessionCondition? _whereSessionCondition;
        
        private static string _ruleValue = "ADD  EVENT  module_package_event_ref  (LR_BRACKET  (SET  set_attributes)?  event_" +
            "session_actions  where_session_condition?  RR_BRACKET)";
        
        private static string _ruleName = "create_or_alter_event_session_add_event";
        
        public AstCreateOrAlterEventSessionAddEvent(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAttributes>())
                {
                    this._setAttributes = ((AstSetAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionActions>())
                {
                    this._eventSessionActions = ((AstEventSessionActions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereSessionCondition?>())
                {
                    this._whereSessionCondition = ((AstWhereSessionCondition?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionAddEvent(Position p, AstModulePackageEventRef modulePackageEventRef, AstSetAttributes setAttributes, AstEventSessionActions eventSessionActions, AstWhereSessionCondition? whereSessionCondition) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
            this._setAttributes = setAttributes;
            this._eventSessionActions = eventSessionActions;
            this._whereSessionCondition = whereSessionCondition;
        }
        
        public AstCreateOrAlterEventSessionAddEvent(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSetAttributes>())
                {
                    this._setAttributes = ((AstSetAttributes)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEventSessionActions>())
                {
                    this._eventSessionActions = ((AstEventSessionActions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereSessionCondition?>())
                {
                    this._whereSessionCondition = ((AstWhereSessionCondition?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public virtual AstSetAttributes SetAttributes
        {
            get
            {
                return this._setAttributes;
            }
        }
        
        public virtual AstEventSessionActions EventSessionActions
        {
            get
            {
                return this._eventSessionActions;
            }
        }
        
        public virtual AstWhereSessionCondition? WhereSessionCondition
        {
            get
            {
                return this._whereSessionCondition;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionAddEvent(this);
        }
        
        public static AstCreateOrAlterEventSessionAddEvent? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_event : 
        ///    ADD EVENT module_package_event_ref ( SET set_attributes event_session_actions where_session_condition? ) 
        /// </summary>
        public static AstCreateOrAlterEventSessionAddEvent New(AstModulePackageEventRef modulePackageEventRef, AstSetAttributes setAttributes, AstEventSessionActions eventSessionActions, AstWhereSessionCondition? whereSessionCondition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(modulePackageEventRef);
            list.Add(setAttributes);
            list.Add(eventSessionActions);
            list.Add(whereSessionCondition);
            return new AstCreateOrAlterEventSessionAddEvent(Position.Default, list);
        }
    }
    
    /// <summary>
    /// set_attribute : event_customizable_attribute_id  EQUAL  decimal_string
    /// </summary>
    public partial class AstSetAttribute : AstBnfRule
    {
        
        private AstEventCustomizableAttributeId _eventCustomizableAttributeId;
        
        private AstDecimalString _decimalString;
        
        private static string _ruleValue = "event_customizable_attribute_id  EQUAL  decimal_string";
        
        private static string _ruleName = "set_attribute";
        
        public AstSetAttribute(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventCustomizableAttributeId>())
                {
                    this._eventCustomizableAttributeId = ((AstEventCustomizableAttributeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._decimalString = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public AstSetAttribute(Position p, AstEventCustomizableAttributeId eventCustomizableAttributeId, AstDecimalString decimalString) : 
                base(p)
        {
            this._eventCustomizableAttributeId = eventCustomizableAttributeId;
            this._decimalString = decimalString;
        }
        
        public AstSetAttribute(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventCustomizableAttributeId>())
                {
                    this._eventCustomizableAttributeId = ((AstEventCustomizableAttributeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._decimalString = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventCustomizableAttributeId EventCustomizableAttributeId
        {
            get
            {
                return this._eventCustomizableAttributeId;
            }
        }
        
        public virtual AstDecimalString DecimalString
        {
            get
            {
                return this._decimalString;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSetAttribute(this);
        }
        
        public static AstSetAttribute? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// set_attribute : 
        ///    event_customizable_attribute_id EQUAL decimal_string 
        /// </summary>
        public static AstSetAttribute New(AstEventCustomizableAttributeId eventCustomizableAttributeId, AstDecimalString decimalString)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventCustomizableAttributeId);
            list.Add(decimalString);
            return new AstSetAttribute(Position.Default, list);
        }
    }
    
    /// <summary>
    /// event_session_action : ACTION  LR_BRACKET  event_module_package_action_refs  RR_BRACKET
    /// </summary>
    public partial class AstEventSessionAction : AstBnfRule
    {
        
        private AstEventModulePackageActionRefs _eventModulePackageActionRefs;
        
        private static string _ruleValue = "ACTION  LR_BRACKET  event_module_package_action_refs  RR_BRACKET";
        
        private static string _ruleName = "event_session_action";
        
        public AstEventSessionAction(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModulePackageActionRefs>())
                {
                    this._eventModulePackageActionRefs = ((AstEventModulePackageActionRefs)(enumerator.Current));
                }
            }
        }
        
        public AstEventSessionAction(Position p, AstEventModulePackageActionRefs eventModulePackageActionRefs) : 
                base(p)
        {
            this._eventModulePackageActionRefs = eventModulePackageActionRefs;
        }
        
        public AstEventSessionAction(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventModulePackageActionRefs>())
                {
                    this._eventModulePackageActionRefs = ((AstEventModulePackageActionRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventModulePackageActionRefs EventModulePackageActionRefs
        {
            get
            {
                return this._eventModulePackageActionRefs;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitEventSessionAction(this);
        }
        
        public static AstEventSessionAction? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// event_session_action : 
        ///    ACTION ( event_module_package_action_refs ) 
        /// </summary>
        public static AstEventSessionAction New(AstEventModulePackageActionRefs eventModulePackageActionRefs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventModulePackageActionRefs);
            return new AstEventSessionAction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// where_session_condition : WHERE  event_session_predicate_expression
    /// </summary>
    public partial class AstWhereSessionCondition : AstBnfRule
    {
        
        private AstEventSessionPredicateExpression _eventSessionPredicateExpression;
        
        private static string _ruleValue = "WHERE  event_session_predicate_expression";
        
        private static string _ruleName = "where_session_condition";
        
        public AstWhereSessionCondition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionPredicateExpression>())
                {
                    this._eventSessionPredicateExpression = ((AstEventSessionPredicateExpression)(enumerator.Current));
                }
            }
        }
        
        public AstWhereSessionCondition(Position p, AstEventSessionPredicateExpression eventSessionPredicateExpression) : 
                base(p)
        {
            this._eventSessionPredicateExpression = eventSessionPredicateExpression;
        }
        
        public AstWhereSessionCondition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEventSessionPredicateExpression>())
                {
                    this._eventSessionPredicateExpression = ((AstEventSessionPredicateExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEventSessionPredicateExpression EventSessionPredicateExpression
        {
            get
            {
                return this._eventSessionPredicateExpression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhereSessionCondition(this);
        }
        
        public static AstWhereSessionCondition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// where_session_condition : 
        ///    WHERE event_session_predicate_expression 
        /// </summary>
        public static AstWhereSessionCondition New(AstEventSessionPredicateExpression eventSessionPredicateExpression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(eventSessionPredicateExpression);
            return new AstWhereSessionCondition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_add_target : ADD  TARGET  module_package_event_ref  target_parameter_blocks
    /// </summary>
    public partial class AstCreateOrAlterEventSessionAddTarget : AstBnfRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        private AstTargetParameterBlocks _targetParameterBlocks;
        
        private static string _ruleValue = "ADD  TARGET  module_package_event_ref  target_parameter_blocks";
        
        private static string _ruleName = "create_or_alter_event_session_add_target";
        
        public AstCreateOrAlterEventSessionAddTarget(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterBlocks>())
                {
                    this._targetParameterBlocks = ((AstTargetParameterBlocks)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionAddTarget(Position p, AstModulePackageEventRef modulePackageEventRef, AstTargetParameterBlocks targetParameterBlocks) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
            this._targetParameterBlocks = targetParameterBlocks;
        }
        
        public AstCreateOrAlterEventSessionAddTarget(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterBlocks>())
                {
                    this._targetParameterBlocks = ((AstTargetParameterBlocks)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public virtual AstTargetParameterBlocks TargetParameterBlocks
        {
            get
            {
                return this._targetParameterBlocks;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionAddTarget(this);
        }
        
        public static AstCreateOrAlterEventSessionAddTarget? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_event_session_add_target : 
        ///    ADD TARGET module_package_event_ref target_parameter_blocks 
        /// </summary>
        public static AstCreateOrAlterEventSessionAddTarget New(AstModulePackageEventRef modulePackageEventRef, AstTargetParameterBlocks targetParameterBlocks)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(modulePackageEventRef);
            list.Add(targetParameterBlocks);
            return new AstCreateOrAlterEventSessionAddTarget(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_parameter_block : LR_BRACKET  SET  target_parameter_sets  RR_BRACKET
    /// </summary>
    public partial class AstTargetParameterBlock : AstBnfRule
    {
        
        private AstTargetParameterSets _targetParameterSets;
        
        private static string _ruleValue = "LR_BRACKET  SET  target_parameter_sets  RR_BRACKET";
        
        private static string _ruleName = "target_parameter_block";
        
        public AstTargetParameterBlock(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterSets>())
                {
                    this._targetParameterSets = ((AstTargetParameterSets)(enumerator.Current));
                }
            }
        }
        
        public AstTargetParameterBlock(Position p, AstTargetParameterSets targetParameterSets) : 
                base(p)
        {
            this._targetParameterSets = targetParameterSets;
        }
        
        public AstTargetParameterBlock(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterSets>())
                {
                    this._targetParameterSets = ((AstTargetParameterSets)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTargetParameterSets TargetParameterSets
        {
            get
            {
                return this._targetParameterSets;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterBlock(this);
        }
        
        public static AstTargetParameterBlock? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// target_parameter_block : 
        ///    ( SET target_parameter_sets ) 
        /// </summary>
        public static AstTargetParameterBlock New(AstTargetParameterSets targetParameterSets)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(targetParameterSets);
            return new AstTargetParameterBlock(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_parameter_sets : target_parameter_value  target_parameter_ids?
    /// </summary>
    public partial class AstTargetParameterSets : AstBnfRule
    {
        
        private AstTargetParameterValue _targetParameterValue;
        
        private AstTargetParameterIds? _targetParameterIds;
        
        private static string _ruleValue = "target_parameter_value  target_parameter_ids?";
        
        private static string _ruleName = "target_parameter_sets";
        
        public AstTargetParameterSets(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterIds?>())
                {
                    this._targetParameterIds = ((AstTargetParameterIds?)(enumerator.Current));
                }
            }
        }
        
        public AstTargetParameterSets(Position p, AstTargetParameterValue targetParameterValue, AstTargetParameterIds? targetParameterIds) : 
                base(p)
        {
            this._targetParameterValue = targetParameterValue;
            this._targetParameterIds = targetParameterIds;
        }
        
        public AstTargetParameterSets(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterIds?>())
                {
                    this._targetParameterIds = ((AstTargetParameterIds?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTargetParameterValue TargetParameterValue
        {
            get
            {
                return this._targetParameterValue;
            }
        }
        
        public virtual AstTargetParameterIds? TargetParameterIds
        {
            get
            {
                return this._targetParameterIds;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterSets(this);
        }
        
        public static AstTargetParameterSets? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// target_parameter_sets : 
        ///    target_parameter_value target_parameter_ids? 
        /// </summary>
        public static AstTargetParameterSets New(AstTargetParameterValue targetParameterValue, AstTargetParameterIds? targetParameterIds)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(targetParameterValue);
            list.Add(targetParameterIds);
            return new AstTargetParameterSets(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_parameter_set : target_parameter_id  EQUAL  target_parameter_value
    /// </summary>
    public partial class AstTargetParameterSet : AstBnfRule
    {
        
        private AstTargetParameterId _targetParameterId;
        
        private AstTargetParameterValue _targetParameterValue;
        
        private static string _ruleValue = "target_parameter_id  EQUAL  target_parameter_value";
        
        private static string _ruleName = "target_parameter_set";
        
        public AstTargetParameterSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterId>())
                {
                    this._targetParameterId = ((AstTargetParameterId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
            }
        }
        
        public AstTargetParameterSet(Position p, AstTargetParameterId targetParameterId, AstTargetParameterValue targetParameterValue) : 
                base(p)
        {
            this._targetParameterId = targetParameterId;
            this._targetParameterValue = targetParameterValue;
        }
        
        public AstTargetParameterSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTargetParameterId>())
                {
                    this._targetParameterId = ((AstTargetParameterId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTargetParameterValue>())
                {
                    this._targetParameterValue = ((AstTargetParameterValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTargetParameterId TargetParameterId
        {
            get
            {
                return this._targetParameterId;
            }
        }
        
        public virtual AstTargetParameterValue TargetParameterValue
        {
            get
            {
                return this._targetParameterValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetParameterSet(this);
        }
        
        public static AstTargetParameterSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// target_parameter_set : 
        ///    target_parameter_id EQUAL target_parameter_value 
        /// </summary>
        public static AstTargetParameterSet New(AstTargetParameterId targetParameterId, AstTargetParameterValue targetParameterValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(targetParameterId);
            list.Add(targetParameterValue);
            return new AstTargetParameterSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_del_target : DROP  TARGET  module_package_event_ref
    /// </summary>
    public partial class AstCreateOrAlterEventSessionDelTarget : AstBnfRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        private static string _ruleValue = "DROP  TARGET  module_package_event_ref";
        
        private static string _ruleName = "create_or_alter_event_session_del_target";
        
        public AstCreateOrAlterEventSessionDelTarget(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionDelTarget(Position p, AstModulePackageEventRef modulePackageEventRef) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
        }
        
        public AstCreateOrAlterEventSessionDelTarget(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionDelTarget(this);
        }
        
        public static AstCreateOrAlterEventSessionDelTarget? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_target : 
        ///    DROP TARGET module_package_event_ref 
        /// </summary>
        public static AstCreateOrAlterEventSessionDelTarget New(AstModulePackageEventRef modulePackageEventRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(modulePackageEventRef);
            return new AstCreateOrAlterEventSessionDelTarget(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_event_session_del_event : DROP  EVENT  module_package_event_ref
    /// </summary>
    public partial class AstCreateOrAlterEventSessionDelEvent : AstBnfRule
    {
        
        private AstModulePackageEventRef _modulePackageEventRef;
        
        private static string _ruleValue = "DROP  EVENT  module_package_event_ref";
        
        private static string _ruleName = "create_or_alter_event_session_del_event";
        
        public AstCreateOrAlterEventSessionDelEvent(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterEventSessionDelEvent(Position p, AstModulePackageEventRef modulePackageEventRef) : 
                base(p)
        {
            this._modulePackageEventRef = modulePackageEventRef;
        }
        
        public AstCreateOrAlterEventSessionDelEvent(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstModulePackageEventRef>())
                {
                    this._modulePackageEventRef = ((AstModulePackageEventRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstModulePackageEventRef ModulePackageEventRef
        {
            get
            {
                return this._modulePackageEventRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterEventSessionDelEvent(this);
        }
        
        public static AstCreateOrAlterEventSessionDelEvent? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_event_session_del_event : 
        ///    DROP EVENT module_package_event_ref 
        /// </summary>
        public static AstCreateOrAlterEventSessionDelEvent New(AstModulePackageEventRef modulePackageEventRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(modulePackageEventRef);
            return new AstCreateOrAlterEventSessionDelEvent(Position.Default, list);
        }
    }
    
    /// <summary>
    /// external_credential : CREDENTIAL  EQUAL  credential_id
    /// </summary>
    public partial class AstExternalCredential : AstBnfRule
    {
        
        private AstCredentialId _credentialId;
        
        private static string _ruleValue = "CREDENTIAL  EQUAL  credential_id";
        
        private static string _ruleName = "external_credential";
        
        public AstExternalCredential(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstExternalCredential(Position p, AstCredentialId credentialId) : 
                base(p)
        {
            this._credentialId = credentialId;
        }
        
        public AstExternalCredential(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalCredential(this);
        }
        
        public static AstExternalCredential? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// external_credential : 
        ///    CREDENTIAL EQUAL credential_id 
        /// </summary>
        public static AstExternalCredential New(AstCredentialId credentialId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(credentialId);
            return new AstExternalCredential(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_external_library : ALTER  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  SET  file_spec2  external_lib_infos
    /// </summary>
    public partial class AstAlterExternalLibrary : AstBnfRule
    {
        
        private AstLibraryId _libraryId;
        
        private AstOwnerId _ownerId;
        
        private AstFileSpec2 _fileSpec2;
        
        private AstExternalLibInfos _externalLibInfos;
        
        private static string _ruleValue = "ALTER  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  SET  file_spec2" +
            "  external_lib_infos";
        
        private static string _ruleName = "alter_external_library";
        
        public AstAlterExternalLibrary(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalLibInfos>())
                {
                    this._externalLibInfos = ((AstExternalLibInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalLibrary(Position p, AstLibraryId libraryId, AstOwnerId ownerId, AstFileSpec2 fileSpec2, AstExternalLibInfos externalLibInfos) : 
                base(p)
        {
            this._libraryId = libraryId;
            this._ownerId = ownerId;
            this._fileSpec2 = fileSpec2;
            this._externalLibInfos = externalLibInfos;
        }
        
        public AstAlterExternalLibrary(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalLibInfos>())
                {
                    this._externalLibInfos = ((AstExternalLibInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstFileSpec2 FileSpec2
        {
            get
            {
                return this._fileSpec2;
            }
        }
        
        public virtual AstExternalLibInfos ExternalLibInfos
        {
            get
            {
                return this._externalLibInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalLibrary(this);
        }
        
        public static AstAlterExternalLibrary? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_external_library : 
        ///    ALTER EXTERNAL LIBRARY library_id AUTHORIZATION owner_id SET file_spec2 external_lib_infos 
        /// </summary>
        public static AstAlterExternalLibrary New(AstLibraryId libraryId, AstOwnerId ownerId, AstFileSpec2 fileSpec2, AstExternalLibInfos externalLibInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            list.Add(fileSpec2);
            list.Add(externalLibInfos);
            return new AstAlterExternalLibrary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// external_lib_infos : WITH  LR_BRACKET  LANGUAGE  EQUAL  code_language  RR_BRACKET
    /// </summary>
    public partial class AstExternalLibInfos : AstBnfRule
    {
        
        private AstCodeLanguage _codeLanguage;
        
        private static string _ruleValue = "WITH  LR_BRACKET  LANGUAGE  EQUAL  code_language  RR_BRACKET";
        
        private static string _ruleName = "external_lib_infos";
        
        public AstExternalLibInfos(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeLanguage>())
                {
                    this._codeLanguage = ((AstCodeLanguage)(enumerator.Current));
                }
            }
        }
        
        public AstExternalLibInfos(Position p, AstCodeLanguage codeLanguage) : 
                base(p)
        {
            this._codeLanguage = codeLanguage;
        }
        
        public AstExternalLibInfos(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeLanguage>())
                {
                    this._codeLanguage = ((AstCodeLanguage)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCodeLanguage CodeLanguage
        {
            get
            {
                return this._codeLanguage;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalLibInfos(this);
        }
        
        public static AstExternalLibInfos? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// external_lib_infos : 
        ///    WITH ( LANGUAGE EQUAL code_language ) 
        /// </summary>
        public static AstExternalLibInfos New(AstCodeLanguage codeLanguage)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(codeLanguage);
            return new AstExternalLibInfos(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_external_library : CREATE  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  FROM  file_spec2  external_lib_infos
    /// </summary>
    public partial class AstCreateExternalLibrary : AstBnfRule
    {
        
        private AstLibraryId _libraryId;
        
        private AstOwnerId _ownerId;
        
        private AstFileSpec2 _fileSpec2;
        
        private AstExternalLibInfos _externalLibInfos;
        
        private static string _ruleValue = "CREATE  EXTERNAL  LIBRARY  library_id  (AUTHORIZATION  owner_id)?  FROM  file_spe" +
            "c2  external_lib_infos";
        
        private static string _ruleName = "create_external_library";
        
        public AstCreateExternalLibrary(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalLibInfos>())
                {
                    this._externalLibInfos = ((AstExternalLibInfos)(enumerator.Current));
                }
            }
        }
        
        public AstCreateExternalLibrary(Position p, AstLibraryId libraryId, AstOwnerId ownerId, AstFileSpec2 fileSpec2, AstExternalLibInfos externalLibInfos) : 
                base(p)
        {
            this._libraryId = libraryId;
            this._ownerId = ownerId;
            this._fileSpec2 = fileSpec2;
            this._externalLibInfos = externalLibInfos;
        }
        
        public AstCreateExternalLibrary(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLibraryId>())
                {
                    this._libraryId = ((AstLibraryId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpec2>())
                {
                    this._fileSpec2 = ((AstFileSpec2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalLibInfos>())
                {
                    this._externalLibInfos = ((AstExternalLibInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLibraryId LibraryId
        {
            get
            {
                return this._libraryId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstFileSpec2 FileSpec2
        {
            get
            {
                return this._fileSpec2;
            }
        }
        
        public virtual AstExternalLibInfos ExternalLibInfos
        {
            get
            {
                return this._externalLibInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateExternalLibrary(this);
        }
        
        public static AstCreateExternalLibrary? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_external_library : 
        ///    CREATE EXTERNAL LIBRARY library_id AUTHORIZATION owner_id FROM file_spec2 external_lib_infos 
        /// </summary>
        public static AstCreateExternalLibrary New(AstLibraryId libraryId, AstOwnerId ownerId, AstFileSpec2 fileSpec2, AstExternalLibInfos externalLibInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(libraryId);
            list.Add(ownerId);
            list.Add(fileSpec2);
            list.Add(externalLibInfos);
            return new AstCreateExternalLibrary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_spec2 : LR_BRACKET  CONTENT  EQUAL  code_content  (COMMA  PLATFORM  EQUAL  platform)?  RR_BRACKET
    /// </summary>
    public partial class AstFileSpec2 : AstBnfRule
    {
        
        private AstCodeContent _codeContent;
        
        private AstPlatform _platform;
        
        private static string _ruleValue = "LR_BRACKET  CONTENT  EQUAL  code_content  (COMMA  PLATFORM  EQUAL  platform)?  RR" +
            "_BRACKET";
        
        private static string _ruleName = "file_spec2";
        
        public AstFileSpec2(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeContent>())
                {
                    this._codeContent = ((AstCodeContent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPlatform>())
                {
                    this._platform = ((AstPlatform)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec2(Position p, AstCodeContent codeContent, AstPlatform platform) : 
                base(p)
        {
            this._codeContent = codeContent;
            this._platform = platform;
        }
        
        public AstFileSpec2(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCodeContent>())
                {
                    this._codeContent = ((AstCodeContent)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPlatform>())
                {
                    this._platform = ((AstPlatform)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCodeContent CodeContent
        {
            get
            {
                return this._codeContent;
            }
        }
        
        public virtual AstPlatform Platform
        {
            get
            {
                return this._platform;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec2(this);
        }
        
        public static AstFileSpec2? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// file_spec2 : 
        ///    ( CONTENT EQUAL code_content , PLATFORM EQUAL platform ) 
        /// </summary>
        public static AstFileSpec2 New(AstCodeContent codeContent, AstPlatform platform)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(codeContent);
            list.Add(platform);
            return new AstFileSpec2(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_external_resource_pool : ALTER  EXTERNAL  RESOURCE  POOL  (pool_id | DEFAULT_DOUBLE_QUOTE)  WITH  external_resource_with
    /// </summary>
    public partial class AstAlterExternalResourcePool : AstBnfRule
    {
        
        private AstPoolId _poolId;
        
        private AstExternalResourceWith _externalResourceWith;
        
        private static string _ruleValue = "ALTER  EXTERNAL  RESOURCE  POOL  (pool_id | DEFAULT_DOUBLE_QUOTE)  WITH  external" +
            "_resource_with";
        
        private static string _ruleName = "alter_external_resource_pool";
        
        public AstAlterExternalResourcePool(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public AstAlterExternalResourcePool(Position p, AstPoolId poolId, AstExternalResourceWith externalResourceWith) : 
                base(p)
        {
            this._poolId = poolId;
            this._externalResourceWith = externalResourceWith;
        }
        
        public AstAlterExternalResourcePool(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExternalResourceWith>())
                {
                    this._externalResourceWith = ((AstExternalResourceWith)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public virtual AstExternalResourceWith ExternalResourceWith
        {
            get
            {
                return this._externalResourceWith;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterExternalResourcePool(this);
        }
        
        public static AstAlterExternalResourcePool? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_external_resource_pool : 
        ///    ALTER EXTERNAL RESOURCE POOL pool_id WITH external_resource_with 
        /// </summary>
        public static AstAlterExternalResourcePool New(AstPoolId poolId, AstExternalResourceWith externalResourceWith)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(poolId);
            list.Add(externalResourceWith);
            return new AstAlterExternalResourcePool(Position.Default, list);
        }
        
        /// <summary>
        /// alter_external_resource_pool : 
        ///    ALTER EXTERNAL RESOURCE POOL DEFAULT_DOUBLE_QUOTE WITH external_resource_with 
        /// </summary>
        public static AstAlterExternalResourcePool New(AstExternalResourceWith externalResourceWith)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(externalResourceWith);
            return new AstAlterExternalResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// external_resource_with : LR_BRACKET  max_cpu  (COMMA?  AFFINITY  CPU  EQUAL  (AUTO | decimal_ranges) | NUMANODE  EQUAL  decimal_ranges)  (COMMA?  max_memory_set)?  (COMMA?  max_process_set)?  RR_BRACKET
    /// </summary>
    public partial class AstExternalResourceWith : AstBnfRule
    {
        
        private AstMaxCpu _maxCpu;
        
        private AstDecimalRanges _decimalRanges;
        
        private AstMaxMemorySet _maxMemorySet;
        
        private AstMaxProcessSet _maxProcessSet;
        
        private static string _ruleValue = "LR_BRACKET  max_cpu  (COMMA?  AFFINITY  CPU  EQUAL  (AUTO | decimal_ranges) | NUM" +
            "ANODE  EQUAL  decimal_ranges)  (COMMA?  max_memory_set)?  (COMMA?  max_process_s" +
            "et)?  RR_BRACKET";
        
        private static string _ruleName = "external_resource_with";
        
        public AstExternalResourceWith(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxCpu>())
                {
                    this._maxCpu = ((AstMaxCpu)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxMemorySet>())
                {
                    this._maxMemorySet = ((AstMaxMemorySet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxProcessSet>())
                {
                    this._maxProcessSet = ((AstMaxProcessSet)(enumerator.Current));
                }
            }
        }
        
        public AstExternalResourceWith(Position p, AstMaxCpu maxCpu, AstDecimalRanges decimalRanges, AstMaxMemorySet maxMemorySet, AstMaxProcessSet maxProcessSet) : 
                base(p)
        {
            this._maxCpu = maxCpu;
            this._decimalRanges = decimalRanges;
            this._maxMemorySet = maxMemorySet;
            this._maxProcessSet = maxProcessSet;
        }
        
        public AstExternalResourceWith(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxCpu>())
                {
                    this._maxCpu = ((AstMaxCpu)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxMemorySet>())
                {
                    this._maxMemorySet = ((AstMaxMemorySet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxProcessSet>())
                {
                    this._maxProcessSet = ((AstMaxProcessSet)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMaxCpu MaxCpu
        {
            get
            {
                return this._maxCpu;
            }
        }
        
        public virtual AstDecimalRanges DecimalRanges
        {
            get
            {
                return this._decimalRanges;
            }
        }
        
        public virtual AstMaxMemorySet MaxMemorySet
        {
            get
            {
                return this._maxMemorySet;
            }
        }
        
        public virtual AstMaxProcessSet MaxProcessSet
        {
            get
            {
                return this._maxProcessSet;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExternalResourceWith(this);
        }
        
        public static AstExternalResourceWith? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// external_resource_with : 
        ///    ( max_cpu COMMA? AFFINITY CPU EQUAL AUTO COMMA? max_memory_set COMMA? max_process_set ) 
        /// </summary>
        public static AstExternalResourceWith New(AstMaxCpu maxCpu, AstMaxMemorySet maxMemorySet, AstMaxProcessSet maxProcessSet)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(maxCpu);
            list.Add(maxMemorySet);
            list.Add(maxProcessSet);
            return new AstExternalResourceWith(Position.Default, list);
        }
        
        /// <summary>
        /// external_resource_with : 
        ///    ( max_cpu COMMA? AFFINITY CPU EQUAL decimal_ranges COMMA? max_memory_set COMMA? max_process_set ) 
        /// </summary>
        public static AstExternalResourceWith New(AstMaxCpu maxCpu, AstDecimalRanges decimalRanges, AstMaxMemorySet maxMemorySet, AstMaxProcessSet maxProcessSet)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(maxCpu);
            list.Add(decimalRanges);
            list.Add(maxMemorySet);
            list.Add(maxProcessSet);
            return new AstExternalResourceWith(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_process_set : MAX_PROCESSES  EQUAL  decimal
    /// </summary>
    public partial class AstMaxProcessSet : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "MAX_PROCESSES  EQUAL  decimal";
        
        private static string _ruleName = "max_process_set";
        
        public AstMaxProcessSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxProcessSet(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxProcessSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxProcessSet(this);
        }
        
        public static AstMaxProcessSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// max_process_set : 
        ///    MAX_PROCESSES EQUAL decimal 
        /// </summary>
        public static AstMaxProcessSet New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstMaxProcessSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_memory_set : MAX_MEMORY_PERCENT  EQUAL  decimal
    /// </summary>
    public partial class AstMaxMemorySet : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "MAX_MEMORY_PERCENT  EQUAL  decimal";
        
        private static string _ruleName = "max_memory_set";
        
        public AstMaxMemorySet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxMemorySet(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxMemorySet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxMemorySet(this);
        }
        
        public static AstMaxMemorySet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// max_memory_set : 
        ///    MAX_MEMORY_PERCENT EQUAL decimal 
        /// </summary>
        public static AstMaxMemorySet New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstMaxMemorySet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_cpu : MAX_CPU_PERCENT  EQUAL  decimal
    /// </summary>
    public partial class AstMaxCpu : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "MAX_CPU_PERCENT  EQUAL  decimal";
        
        private static string _ruleName = "max_cpu";
        
        public AstMaxCpu(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxCpu(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxCpu(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxCpu(this);
        }
        
        public static AstMaxCpu? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// max_cpu : 
        ///    MAX_CPU_PERCENT EQUAL decimal 
        /// </summary>
        public static AstMaxCpu New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstMaxCpu(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_fulltext_catalog : ALTER  FULLTEXT  CATALOG  catalog_id  (REBUILD  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)? | REORGANIZE | AS  DEFAULT)
    /// </summary>
    public partial class AstAlterFulltextCatalog : AstBnfRule
    {
        
        private AstCatalogId _catalogId;
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "ALTER  FULLTEXT  CATALOG  catalog_id  (REBUILD  (WITH  ACCENT_SENSITIVITY  EQUAL " +
            " on_off)? | REORGANIZE | AS  DEFAULT)";
        
        private static string _ruleName = "alter_fulltext_catalog";
        
        public AstAlterFulltextCatalog(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextCatalog(Position p, AstCatalogId catalogId, AstOnOff onOff) : 
                base(p)
        {
            this._catalogId = catalogId;
            this._onOff = onOff;
        }
        
        public AstAlterFulltextCatalog(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextCatalog(this);
        }
        
        public static AstAlterFulltextCatalog? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_fulltext_catalog : 
        ///    ALTER FULLTEXT CATALOG catalog_id REBUILD WITH ACCENT_SENSITIVITY EQUAL on_off 
        /// </summary>
        public static AstAlterFulltextCatalog New(AstCatalogId catalogId, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(catalogId);
            list.Add(onOff);
            return new AstAlterFulltextCatalog(Position.Default, list);
        }
        
        /// <summary>
        /// alter_fulltext_catalog : 
        ///    ALTER FULLTEXT CATALOG catalog_id REORGANIZE 
        /// </summary>
        public static AstAlterFulltextCatalog New(AstCatalogId catalogId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(catalogId);
            return new AstAlterFulltextCatalog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_fulltext_catalog : CREATE  FULLTEXT  CATALOG  catalog_id  (ON  FILEGROUP  file_group_id)?  (IN  PATH  rootpath = stringtext)?  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)?  (AS  DEFAULT)?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateFulltextCatalog : AstBnfRule
    {
        
        private AstCatalogId _catalogId;
        
        private AstFileGroupId _fileGroupId;
        
        private AstStringtext _rootpath;
        
        private AstOnOff _onOff;
        
        private AstOwnerId _ownerId;
        
        private static string _ruleValue = "CREATE  FULLTEXT  CATALOG  catalog_id  (ON  FILEGROUP  file_group_id)?  (IN  PATH" +
            "  rootpath = stringtext)?  (WITH  ACCENT_SENSITIVITY  EQUAL  on_off)?  (AS  DEFA" +
            "ULT)?  (AUTHORIZATION  owner_id)?";
        
        private static string _ruleName = "create_fulltext_catalog";
        
        public AstCreateFulltextCatalog(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._rootpath = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextCatalog(Position p, AstCatalogId catalogId, AstFileGroupId fileGroupId, AstStringtext rootpath, AstOnOff onOff, AstOwnerId ownerId) : 
                base(p)
        {
            this._catalogId = catalogId;
            this._fileGroupId = fileGroupId;
            this._rootpath = rootpath;
            this._onOff = onOff;
            this._ownerId = ownerId;
        }
        
        public AstCreateFulltextCatalog(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCatalogId>())
                {
                    this._catalogId = ((AstCatalogId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._rootpath = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCatalogId CatalogId
        {
            get
            {
                return this._catalogId;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public virtual AstStringtext Rootpath
        {
            get
            {
                return this._rootpath;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextCatalog(this);
        }
        
        public static AstCreateFulltextCatalog? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_fulltext_catalog : 
        ///    CREATE FULLTEXT CATALOG catalog_id ON FILEGROUP file_group_id IN PATH rootpath=stringtext WITH ACCENT_SENSITIVITY EQUAL on_off AS DEFAULT AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateFulltextCatalog New(AstCatalogId catalogId, AstFileGroupId fileGroupId, AstStringtext rootpath, AstOnOff onOff, AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(catalogId);
            list.Add(fileGroupId);
            list.Add(rootpath);
            list.Add(onOff);
            list.Add(ownerId);
            return new AstCreateFulltextCatalog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_fulltext_stoplist : ALTER  FULLTEXT  STOPLIST  stoplist_id  (ADD  stopword = stringtext  LANGUAGE  fulltext_languageList | DROP  (stopword = stringtext  LANGUAGE  fulltext_languageList | ALL  fulltext_languageList | ALL))
    /// </summary>
    public partial class AstAlterFulltextStoplist : AstBnfRule
    {
        
        private AstStoplistId _stoplistId;
        
        private AstStringtext _stopword;
        
        private AstFulltextLanguagelist _fulltextLanguageList;
        
        private static string _ruleValue = "ALTER  FULLTEXT  STOPLIST  stoplist_id  (ADD  stopword = stringtext  LANGUAGE  fu" +
            "lltext_languageList | DROP  (stopword = stringtext  LANGUAGE  fulltext_languageL" +
            "ist | ALL  fulltext_languageList | ALL))";
        
        private static string _ruleName = "alter_fulltext_stoplist";
        
        public AstAlterFulltextStoplist(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stopword = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFulltextLanguagelist>())
                {
                    this._fulltextLanguageList = ((AstFulltextLanguagelist)(enumerator.Current));
                }
            }
        }
        
        public AstAlterFulltextStoplist(Position p, AstStoplistId stoplistId, AstStringtext stopword, AstFulltextLanguagelist fulltextLanguageList) : 
                base(p)
        {
            this._stoplistId = stoplistId;
            this._stopword = stopword;
            this._fulltextLanguageList = fulltextLanguageList;
        }
        
        public AstAlterFulltextStoplist(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stopword = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFulltextLanguagelist>())
                {
                    this._fulltextLanguageList = ((AstFulltextLanguagelist)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public virtual AstStringtext Stopword
        {
            get
            {
                return this._stopword;
            }
        }
        
        public virtual AstFulltextLanguagelist FulltextLanguagelist
        {
            get
            {
                return this._fulltextLanguageList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterFulltextStoplist(this);
        }
        
        public static AstAlterFulltextStoplist? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_fulltext_stoplist : 
        ///    ALTER FULLTEXT STOPLIST stoplist_id ADD stopword=stringtext LANGUAGE fulltext_languageList 
        /// </summary>
        public static AstAlterFulltextStoplist New(AstStoplistId stoplistId, AstStringtext stopword, AstFulltextLanguagelist fulltextLanguageList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stoplistId);
            list.Add(stopword);
            list.Add(fulltextLanguageList);
            return new AstAlterFulltextStoplist(Position.Default, list);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist : 
        ///    ALTER FULLTEXT STOPLIST stoplist_id DROP ALL fulltext_languageList 
        /// </summary>
        public static AstAlterFulltextStoplist New(AstStoplistId stoplistId, AstFulltextLanguagelist fulltextLanguageList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stoplistId);
            list.Add(fulltextLanguageList);
            return new AstAlterFulltextStoplist(Position.Default, list);
        }
        
        /// <summary>
        /// alter_fulltext_stoplist : 
        ///    ALTER FULLTEXT STOPLIST stoplist_id DROP ALL 
        /// </summary>
        public static AstAlterFulltextStoplist New(AstStoplistId stoplistId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stoplistId);
            return new AstAlterFulltextStoplist(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_fulltext_stoplist : CREATE  FULLTEXT  STOPLIST  stoplist_id  (FROM  (database_stoplist_ref | SYSTEM  STOPLIST))?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateFulltextStoplist : AstBnfRule
    {
        
        private AstStoplistId _stoplistId;
        
        private AstDatabaseStoplistRef _databaseStoplistRef;
        
        private AstOwnerId _ownerId;
        
        private static string _ruleValue = "CREATE  FULLTEXT  STOPLIST  stoplist_id  (FROM  (database_stoplist_ref | SYSTEM  " +
            "STOPLIST))?  (AUTHORIZATION  owner_id)?";
        
        private static string _ruleName = "create_fulltext_stoplist";
        
        public AstCreateFulltextStoplist(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseStoplistRef>())
                {
                    this._databaseStoplistRef = ((AstDatabaseStoplistRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateFulltextStoplist(Position p, AstStoplistId stoplistId, AstDatabaseStoplistRef databaseStoplistRef, AstOwnerId ownerId) : 
                base(p)
        {
            this._stoplistId = stoplistId;
            this._databaseStoplistRef = databaseStoplistRef;
            this._ownerId = ownerId;
        }
        
        public AstCreateFulltextStoplist(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStoplistId>())
                {
                    this._stoplistId = ((AstStoplistId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseStoplistRef>())
                {
                    this._databaseStoplistRef = ((AstDatabaseStoplistRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStoplistId StoplistId
        {
            get
            {
                return this._stoplistId;
            }
        }
        
        public virtual AstDatabaseStoplistRef DatabaseStoplistRef
        {
            get
            {
                return this._databaseStoplistRef;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateFulltextStoplist(this);
        }
        
        public static AstCreateFulltextStoplist? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_fulltext_stoplist : 
        ///    CREATE FULLTEXT STOPLIST stoplist_id FROM database_stoplist_ref AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateFulltextStoplist New(AstStoplistId stoplistId, AstDatabaseStoplistRef databaseStoplistRef, AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stoplistId);
            list.Add(databaseStoplistRef);
            list.Add(ownerId);
            return new AstCreateFulltextStoplist(Position.Default, list);
        }
        
        /// <summary>
        /// create_fulltext_stoplist : 
        ///    CREATE FULLTEXT STOPLIST stoplist_id FROM SYSTEM STOPLIST AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateFulltextStoplist New(AstStoplistId stoplistId, AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stoplistId);
            list.Add(ownerId);
            return new AstCreateFulltextStoplist(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_sql_server : ALTER  LOGIN  login_id  alter_login_sql_server_infos
    /// </summary>
    public partial class AstAlterLoginSqlServer : AstBnfRule
    {
        
        private AstLoginId _loginId;
        
        private AstAlterLoginSqlServerInfos _alterLoginSqlServerInfos;
        
        private static string _ruleValue = "ALTER  LOGIN  login_id  alter_login_sql_server_infos";
        
        private static string _ruleName = "alter_login_sql_server";
        
        public AstAlterLoginSqlServer(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginSqlServerInfos>())
                {
                    this._alterLoginSqlServerInfos = ((AstAlterLoginSqlServerInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginSqlServer(Position p, AstLoginId loginId, AstAlterLoginSqlServerInfos alterLoginSqlServerInfos) : 
                base(p)
        {
            this._loginId = loginId;
            this._alterLoginSqlServerInfos = alterLoginSqlServerInfos;
        }
        
        public AstAlterLoginSqlServer(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginSqlServerInfos>())
                {
                    this._alterLoginSqlServerInfos = ((AstAlterLoginSqlServerInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstAlterLoginSqlServerInfos AlterLoginSqlServerInfos
        {
            get
            {
                return this._alterLoginSqlServerInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServer(this);
        }
        
        public static AstAlterLoginSqlServer? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_login_sql_server : 
        ///    ALTER LOGIN login_id alter_login_sql_server_infos 
        /// </summary>
        public static AstAlterLoginSqlServer New(AstLoginId loginId, AstAlterLoginSqlServerInfos alterLoginSqlServerInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            list.Add(alterLoginSqlServerInfos);
            return new AstAlterLoginSqlServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_sql_server_settings : pwd_settings?  old_pwd_strategies?  (DEFAULT_DATABASE  EQUAL  database_id)?  default_language_set?  (NAME  EQUAL  login_id)?  (CHECK_POLICY  EQUAL  check_policy = on_off)?  (CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (CREDENTIAL  EQUAL  credential_id)?  (NO  CREDENTIAL)?
    /// </summary>
    public partial class AstAlterLoginSqlServerSettings : AstBnfRule
    {
        
        private AstPwdSettings? _pwdSettings;
        
        private AstOldPwdStrategies? _oldPwdStrategies;
        
        private AstDatabaseId _databaseId;
        
        private AstDefaultLanguageSet? _defaultLanguageSet;
        
        private AstLoginId _loginId;
        
        private AstOnOff _checkPolicy;
        
        private AstOnOff _checkExpiration;
        
        private AstCredentialId _credentialId;
        
        private static string _ruleValue = @"pwd_settings?  old_pwd_strategies?  (DEFAULT_DATABASE  EQUAL  database_id)?  default_language_set?  (NAME  EQUAL  login_id)?  (CHECK_POLICY  EQUAL  check_policy = on_off)?  (CHECK_EXPIRATION  EQUAL  check_expiration = on_off)?  (CREDENTIAL  EQUAL  credential_id)?  (NO  CREDENTIAL)?";
        
        private static string _ruleName = "alter_login_sql_server_settings";
        
        public AstAlterLoginSqlServerSettings(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwdSettings?>())
                {
                    this._pwdSettings = ((AstPwdSettings?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOldPwdStrategies?>())
                {
                    this._oldPwdStrategies = ((AstOldPwdStrategies?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultLanguageSet?>())
                {
                    this._defaultLanguageSet = ((AstDefaultLanguageSet?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._checkPolicy = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._checkExpiration = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginSqlServerSettings(Position p, AstPwdSettings? pwdSettings, AstOldPwdStrategies? oldPwdStrategies, AstDatabaseId databaseId, AstDefaultLanguageSet? defaultLanguageSet, AstLoginId loginId, AstOnOff checkPolicy, AstOnOff checkExpiration, AstCredentialId credentialId) : 
                base(p)
        {
            this._pwdSettings = pwdSettings;
            this._oldPwdStrategies = oldPwdStrategies;
            this._databaseId = databaseId;
            this._defaultLanguageSet = defaultLanguageSet;
            this._loginId = loginId;
            this._checkPolicy = checkPolicy;
            this._checkExpiration = checkExpiration;
            this._credentialId = credentialId;
        }
        
        public AstAlterLoginSqlServerSettings(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwdSettings?>())
                {
                    this._pwdSettings = ((AstPwdSettings?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOldPwdStrategies?>())
                {
                    this._oldPwdStrategies = ((AstOldPwdStrategies?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultLanguageSet?>())
                {
                    this._defaultLanguageSet = ((AstDefaultLanguageSet?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._checkPolicy = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._checkExpiration = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCredentialId>())
                {
                    this._credentialId = ((AstCredentialId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPwdSettings? PwdSettings
        {
            get
            {
                return this._pwdSettings;
            }
        }
        
        public virtual AstOldPwdStrategies? OldPwdStrategies
        {
            get
            {
                return this._oldPwdStrategies;
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstDefaultLanguageSet? DefaultLanguageSet
        {
            get
            {
                return this._defaultLanguageSet;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstOnOff CheckPolicy
        {
            get
            {
                return this._checkPolicy;
            }
        }
        
        public virtual AstOnOff CheckExpiration
        {
            get
            {
                return this._checkExpiration;
            }
        }
        
        public virtual AstCredentialId CredentialId
        {
            get
            {
                return this._credentialId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginSqlServerSettings(this);
        }
        
        public static AstAlterLoginSqlServerSettings? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_login_sql_server_settings : 
        ///    pwd_settings? old_pwd_strategies? DEFAULT_DATABASE EQUAL database_id default_language_set? NAME EQUAL login_id CHECK_POLICY EQUAL check_policy=on_off CHECK_EXPIRATION EQUAL check_expiration=on_off CREDENTIAL EQUAL credential_id NO CREDENTIAL 
        /// </summary>
        public static AstAlterLoginSqlServerSettings New(AstPwdSettings? pwdSettings, AstOldPwdStrategies? oldPwdStrategies, AstDatabaseId databaseId, AstDefaultLanguageSet? defaultLanguageSet, AstLoginId loginId, AstOnOff checkPolicy, AstOnOff checkExpiration, AstCredentialId credentialId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(pwdSettings);
            list.Add(oldPwdStrategies);
            list.Add(databaseId);
            list.Add(defaultLanguageSet);
            list.Add(loginId);
            list.Add(checkPolicy);
            list.Add(checkExpiration);
            list.Add(credentialId);
            return new AstAlterLoginSqlServerSettings(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_login_sql_server : CREATE  LOGIN  login_id  (WITH  create_login_sql_server_settings | FROM  create_login_sql_server_from)
    /// </summary>
    public partial class AstCreateLoginSqlServer : AstBnfRule
    {
        
        private AstLoginId _loginId;
        
        private AstCreateLoginSqlServerSettings _createLoginSqlServerSettings;
        
        private AstCreateLoginSqlServerFrom _createLoginSqlServerFrom;
        
        private static string _ruleValue = "CREATE  LOGIN  login_id  (WITH  create_login_sql_server_settings | FROM  create_l" +
            "ogin_sql_server_from)";
        
        private static string _ruleName = "create_login_sql_server";
        
        public AstCreateLoginSqlServer(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerSettings>())
                {
                    this._createLoginSqlServerSettings = ((AstCreateLoginSqlServerSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerFrom>())
                {
                    this._createLoginSqlServerFrom = ((AstCreateLoginSqlServerFrom)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginSqlServer(Position p, AstLoginId loginId, AstCreateLoginSqlServerSettings createLoginSqlServerSettings, AstCreateLoginSqlServerFrom createLoginSqlServerFrom) : 
                base(p)
        {
            this._loginId = loginId;
            this._createLoginSqlServerSettings = createLoginSqlServerSettings;
            this._createLoginSqlServerFrom = createLoginSqlServerFrom;
        }
        
        public AstCreateLoginSqlServer(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerSettings>())
                {
                    this._createLoginSqlServerSettings = ((AstCreateLoginSqlServerSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateLoginSqlServerFrom>())
                {
                    this._createLoginSqlServerFrom = ((AstCreateLoginSqlServerFrom)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstCreateLoginSqlServerSettings CreateLoginSqlServerSettings
        {
            get
            {
                return this._createLoginSqlServerSettings;
            }
        }
        
        public virtual AstCreateLoginSqlServerFrom CreateLoginSqlServerFrom
        {
            get
            {
                return this._createLoginSqlServerFrom;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginSqlServer(this);
        }
        
        public static AstCreateLoginSqlServer? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_login_sql_server : 
        ///    CREATE LOGIN login_id WITH create_login_sql_server_settings 
        /// </summary>
        public static AstCreateLoginSqlServer New(AstLoginId loginId, AstCreateLoginSqlServerSettings createLoginSqlServerSettings)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            list.Add(createLoginSqlServerSettings);
            return new AstCreateLoginSqlServer(Position.Default, list);
        }
        
        /// <summary>
        /// create_login_sql_server : 
        ///    CREATE LOGIN login_id FROM create_login_sql_server_from 
        /// </summary>
        public static AstCreateLoginSqlServer New(AstLoginId loginId, AstCreateLoginSqlServerFrom createLoginSqlServerFrom)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            list.Add(createLoginSqlServerFrom);
            return new AstCreateLoginSqlServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql : ALTER  LOGIN  login_id  alter_login_azure_sql_infos
    /// </summary>
    public partial class AstAlterLoginAzureSql : AstBnfRule
    {
        
        private AstLoginId _loginId;
        
        private AstAlterLoginAzureSqlInfos _alterLoginAzureSqlInfos;
        
        private static string _ruleValue = "ALTER  LOGIN  login_id  alter_login_azure_sql_infos";
        
        private static string _ruleName = "alter_login_azure_sql";
        
        public AstAlterLoginAzureSql(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginAzureSqlInfos>())
                {
                    this._alterLoginAzureSqlInfos = ((AstAlterLoginAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSql(Position p, AstLoginId loginId, AstAlterLoginAzureSqlInfos alterLoginAzureSqlInfos) : 
                base(p)
        {
            this._loginId = loginId;
            this._alterLoginAzureSqlInfos = alterLoginAzureSqlInfos;
        }
        
        public AstAlterLoginAzureSql(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterLoginAzureSqlInfos>())
                {
                    this._alterLoginAzureSqlInfos = ((AstAlterLoginAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstAlterLoginAzureSqlInfos AlterLoginAzureSqlInfos
        {
            get
            {
                return this._alterLoginAzureSqlInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSql(this);
        }
        
        public static AstAlterLoginAzureSql? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_login_azure_sql : 
        ///    ALTER LOGIN login_id alter_login_azure_sql_infos 
        /// </summary>
        public static AstAlterLoginAzureSql New(AstLoginId loginId, AstAlterLoginAzureSqlInfos alterLoginAzureSqlInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            list.Add(alterLoginAzureSqlInfos);
            return new AstAlterLoginAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_login_azure_sql : CREATE  LOGIN  login_id  WITH  password_setting  (SID  EQUAL  sid = binary_)?
    /// </summary>
    public partial class AstCreateLoginAzureSql : AstBnfRule
    {
        
        private AstLoginId _loginId;
        
        private AstPasswordSetting _passwordSetting;
        
        private AstBinary _sid;
        
        private static string _ruleValue = "CREATE  LOGIN  login_id  WITH  password_setting  (SID  EQUAL  sid = binary_)?";
        
        private static string _ruleName = "create_login_azure_sql";
        
        public AstCreateLoginAzureSql(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._sid = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginAzureSql(Position p, AstLoginId loginId, AstPasswordSetting passwordSetting, AstBinary sid) : 
                base(p)
        {
            this._loginId = loginId;
            this._passwordSetting = passwordSetting;
            this._sid = sid;
        }
        
        public AstCreateLoginAzureSql(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBinary>())
                {
                    this._sid = ((AstBinary)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstPasswordSetting PasswordSetting
        {
            get
            {
                return this._passwordSetting;
            }
        }
        
        public virtual AstBinary Sid
        {
            get
            {
                return this._sid;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginAzureSql(this);
        }
        
        public static AstCreateLoginAzureSql? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_login_azure_sql : 
        ///    CREATE LOGIN login_id WITH password_setting SID EQUAL sid=binary_ 
        /// </summary>
        public static AstCreateLoginAzureSql New(AstLoginId loginId, AstPasswordSetting passwordSetting, AstBinary sid)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            list.Add(passwordSetting);
            list.Add(sid);
            return new AstCreateLoginAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_login_azure_sql_dw_and_pdw : ALTER  LOGIN  login_id  login_pwd_strategy
    /// </summary>
    public partial class AstAlterLoginAzureSqlDwAndPdw : AstBnfRule
    {
        
        private AstLoginId _loginId;
        
        private AstLoginPwdStrategy _loginPwdStrategy;
        
        private static string _ruleValue = "ALTER  LOGIN  login_id  login_pwd_strategy";
        
        private static string _ruleName = "alter_login_azure_sql_dw_and_pdw";
        
        public AstAlterLoginAzureSqlDwAndPdw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginPwdStrategy>())
                {
                    this._loginPwdStrategy = ((AstLoginPwdStrategy)(enumerator.Current));
                }
            }
        }
        
        public AstAlterLoginAzureSqlDwAndPdw(Position p, AstLoginId loginId, AstLoginPwdStrategy loginPwdStrategy) : 
                base(p)
        {
            this._loginId = loginId;
            this._loginPwdStrategy = loginPwdStrategy;
        }
        
        public AstAlterLoginAzureSqlDwAndPdw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginPwdStrategy>())
                {
                    this._loginPwdStrategy = ((AstLoginPwdStrategy)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstLoginPwdStrategy LoginPwdStrategy
        {
            get
            {
                return this._loginPwdStrategy;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterLoginAzureSqlDwAndPdw(this);
        }
        
        public static AstAlterLoginAzureSqlDwAndPdw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_login_azure_sql_dw_and_pdw : 
        ///    ALTER LOGIN login_id login_pwd_strategy 
        /// </summary>
        public static AstAlterLoginAzureSqlDwAndPdw New(AstLoginId loginId, AstLoginPwdStrategy loginPwdStrategy)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            list.Add(loginPwdStrategy);
            return new AstAlterLoginAzureSqlDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_login_pdw : CREATE  LOGIN  login_id  login_pdw_pwd
    /// </summary>
    public partial class AstCreateLoginPdw : AstBnfRule
    {
        
        private AstLoginId _loginId;
        
        private AstLoginPdwPwd _loginPdwPwd;
        
        private static string _ruleValue = "CREATE  LOGIN  login_id  login_pdw_pwd";
        
        private static string _ruleName = "create_login_pdw";
        
        public AstCreateLoginPdw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginPdwPwd>())
                {
                    this._loginPdwPwd = ((AstLoginPdwPwd)(enumerator.Current));
                }
            }
        }
        
        public AstCreateLoginPdw(Position p, AstLoginId loginId, AstLoginPdwPwd loginPdwPwd) : 
                base(p)
        {
            this._loginId = loginId;
            this._loginPdwPwd = loginPdwPwd;
        }
        
        public AstCreateLoginPdw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginPdwPwd>())
                {
                    this._loginPdwPwd = ((AstLoginPdwPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstLoginPdwPwd LoginPdwPwd
        {
            get
            {
                return this._loginPdwPwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateLoginPdw(this);
        }
        
        public static AstCreateLoginPdw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_login_pdw : 
        ///    CREATE LOGIN login_id login_pdw_pwd 
        /// </summary>
        public static AstCreateLoginPdw New(AstLoginId loginId, AstLoginPdwPwd loginPdwPwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(loginId);
            list.Add(loginPdwPwd);
            return new AstCreateLoginPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_master_key_sql_server : CREATE  MASTER  KEY  encryption_by_pwd
    /// </summary>
    public partial class AstCreateMasterKeySqlServer : AstBnfRule
    {
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        private static string _ruleValue = "CREATE  MASTER  KEY  encryption_by_pwd";
        
        private static string _ruleName = "create_master_key_sql_server";
        
        public AstCreateMasterKeySqlServer(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstCreateMasterKeySqlServer(Position p, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstCreateMasterKeySqlServer(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeySqlServer(this);
        }
        
        public static AstCreateMasterKeySqlServer? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_master_key_sql_server : 
        ///    CREATE MASTER KEY encryption_by_pwd 
        /// </summary>
        public static AstCreateMasterKeySqlServer New(AstEncryptionByPwd encryptionByPwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(encryptionByPwd);
            return new AstCreateMasterKeySqlServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// regenerate_mater_key : (FORCE)?  REGENERATE  WITH  encryption_by_pwd
    /// </summary>
    public partial class AstRegenerateMaterKey : AstBnfRule
    {
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        private static string _ruleValue = "(FORCE)?  REGENERATE  WITH  encryption_by_pwd";
        
        private static string _ruleName = "regenerate_mater_key";
        
        public AstRegenerateMaterKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstRegenerateMaterKey(Position p, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstRegenerateMaterKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRegenerateMaterKey(this);
        }
        
        public static AstRegenerateMaterKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// regenerate_mater_key : 
        ///    FORCE REGENERATE WITH encryption_by_pwd 
        /// </summary>
        public static AstRegenerateMaterKey New(AstEncryptionByPwd encryptionByPwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(encryptionByPwd);
            return new AstRegenerateMaterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_master_key_azure_sql : CREATE  MASTER  KEY  encryption_by_pwd?
    /// </summary>
    public partial class AstCreateMasterKeyAzureSql : AstBnfRule
    {
        
        private AstEncryptionByPwd? _encryptionByPwd;
        
        private static string _ruleValue = "CREATE  MASTER  KEY  encryption_by_pwd?";
        
        private static string _ruleName = "create_master_key_azure_sql";
        
        public AstCreateMasterKeyAzureSql(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd?>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateMasterKeyAzureSql(Position p, AstEncryptionByPwd? encryptionByPwd) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstCreateMasterKeyAzureSql(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd?>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd? EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateMasterKeyAzureSql(this);
        }
        
        public static AstCreateMasterKeyAzureSql? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_master_key_azure_sql : 
        ///    CREATE MASTER KEY encryption_by_pwd? 
        /// </summary>
        public static AstCreateMasterKeyAzureSql New(AstEncryptionByPwd? encryptionByPwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(encryptionByPwd);
            return new AstCreateMasterKeyAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_message_type : ALTER  MESSAGE  TYPE  message_type_id  VALIDATION  EQUAL  message_validation_value
    /// </summary>
    public partial class AstAlterMessageType : AstBnfRule
    {
        
        private AstMessageTypeId _messageTypeId;
        
        private AstMessageValidationValue _messageValidationValue;
        
        private static string _ruleValue = "ALTER  MESSAGE  TYPE  message_type_id  VALIDATION  EQUAL  message_validation_valu" +
            "e";
        
        private static string _ruleName = "alter_message_type";
        
        public AstAlterMessageType(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMessageValidationValue>())
                {
                    this._messageValidationValue = ((AstMessageValidationValue)(enumerator.Current));
                }
            }
        }
        
        public AstAlterMessageType(Position p, AstMessageTypeId messageTypeId, AstMessageValidationValue messageValidationValue) : 
                base(p)
        {
            this._messageTypeId = messageTypeId;
            this._messageValidationValue = messageValidationValue;
        }
        
        public AstAlterMessageType(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMessageValidationValue>())
                {
                    this._messageValidationValue = ((AstMessageValidationValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public virtual AstMessageValidationValue MessageValidationValue
        {
            get
            {
                return this._messageValidationValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterMessageType(this);
        }
        
        public static AstAlterMessageType? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_message_type : 
        ///    ALTER MESSAGE TYPE message_type_id VALIDATION EQUAL message_validation_value 
        /// </summary>
        public static AstAlterMessageType New(AstMessageTypeId messageTypeId, AstMessageValidationValue messageValidationValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(messageTypeId);
            list.Add(messageValidationValue);
            return new AstAlterMessageType(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_partition_function : ALTER  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  RR_BRACKET  split_or_merge  RANGE  LR_BRACKET  decimal  RR_BRACKET
    /// </summary>
    public partial class AstAlterPartitionFunction : AstBnfRule
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstSplitOrMerge _splitOrMerge;
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "ALTER  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  RR_BRACKET  split_" +
            "or_merge  RANGE  LR_BRACKET  decimal  RR_BRACKET";
        
        private static string _ruleName = "alter_partition_function";
        
        public AstAlterPartitionFunction(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionFunction(Position p, AstPartitionFunctionId partitionFunctionId, AstSplitOrMerge splitOrMerge, AstDecimal @decimal) : 
                base(p)
        {
            this._partitionFunctionId = partitionFunctionId;
            this._splitOrMerge = splitOrMerge;
            this._decimal = @decimal;
        }
        
        public AstAlterPartitionFunction(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSplitOrMerge>())
                {
                    this._splitOrMerge = ((AstSplitOrMerge)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstSplitOrMerge SplitOrMerge
        {
            get
            {
                return this._splitOrMerge;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionFunction(this);
        }
        
        public static AstAlterPartitionFunction? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_partition_function : 
        ///    ALTER PARTITION FUNCTION partition_function_id ( ) split_or_merge RANGE ( decimal ) 
        /// </summary>
        public static AstAlterPartitionFunction New(AstPartitionFunctionId partitionFunctionId, AstSplitOrMerge splitOrMerge, AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partitionFunctionId);
            list.Add(splitOrMerge);
            list.Add(@decimal);
            return new AstAlterPartitionFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_partition_scheme : ALTER  PARTITION  SCHEME  partition_scheme_id  NEXT  USED  (file_group_id)?
    /// </summary>
    public partial class AstAlterPartitionScheme : AstBnfRule
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        private AstFileGroupId _fileGroupId;
        
        private static string _ruleValue = "ALTER  PARTITION  SCHEME  partition_scheme_id  NEXT  USED  (file_group_id)?";
        
        private static string _ruleName = "alter_partition_scheme";
        
        public AstAlterPartitionScheme(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterPartitionScheme(Position p, AstPartitionSchemeId partitionSchemeId, AstFileGroupId fileGroupId) : 
                base(p)
        {
            this._partitionSchemeId = partitionSchemeId;
            this._fileGroupId = fileGroupId;
        }
        
        public AstAlterPartitionScheme(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterPartitionScheme(this);
        }
        
        public static AstAlterPartitionScheme? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_partition_scheme : 
        ///    ALTER PARTITION SCHEME partition_scheme_id NEXT USED file_group_id 
        /// </summary>
        public static AstAlterPartitionScheme New(AstPartitionSchemeId partitionSchemeId, AstFileGroupId fileGroupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partitionSchemeId);
            list.Add(fileGroupId);
            return new AstAlterPartitionScheme(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_remote_service_binding : ALTER  REMOTE  SERVICE  BINDING  binding_id  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstAlterRemoteServiceBinding : AstBnfRule
    {
        
        private AstBindingId _bindingId;
        
        private AstUserId _userId;
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "ALTER  REMOTE  SERVICE  BINDING  binding_id  WITH  (USER  EQUAL  user_id)?  (COMM" +
            "A  ANONYMOUS  EQUAL  on_off)?";
        
        private static string _ruleName = "alter_remote_service_binding";
        
        public AstAlterRemoteServiceBinding(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstAlterRemoteServiceBinding(Position p, AstBindingId bindingId, AstUserId userId, AstOnOff onOff) : 
                base(p)
        {
            this._bindingId = bindingId;
            this._userId = userId;
            this._onOff = onOff;
        }
        
        public AstAlterRemoteServiceBinding(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterRemoteServiceBinding(this);
        }
        
        public static AstAlterRemoteServiceBinding? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_remote_service_binding : 
        ///    ALTER REMOTE SERVICE BINDING binding_id WITH USER EQUAL user_id , ANONYMOUS EQUAL on_off 
        /// </summary>
        public static AstAlterRemoteServiceBinding New(AstBindingId bindingId, AstUserId userId, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(bindingId);
            list.Add(userId);
            list.Add(onOff);
            return new AstAlterRemoteServiceBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_remote_service_binding : CREATE  REMOTE  SERVICE  BINDING  binding_id  (AUTHORIZATION  owner_id)?  TO  SERVICE  remote_service_name = stringtext  WITH  (USER  EQUAL  user_id)?  (COMMA  ANONYMOUS  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateRemoteServiceBinding : AstBnfRule
    {
        
        private AstBindingId _bindingId;
        
        private AstOwnerId _ownerId;
        
        private AstStringtext _remoteServiceName;
        
        private AstUserId _userId;
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "CREATE  REMOTE  SERVICE  BINDING  binding_id  (AUTHORIZATION  owner_id)?  TO  SER" +
            "VICE  remote_service_name = stringtext  WITH  (USER  EQUAL  user_id)?  (COMMA  A" +
            "NONYMOUS  EQUAL  on_off)?";
        
        private static string _ruleName = "create_remote_service_binding";
        
        public AstCreateRemoteServiceBinding(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._remoteServiceName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRemoteServiceBinding(Position p, AstBindingId bindingId, AstOwnerId ownerId, AstStringtext remoteServiceName, AstUserId userId, AstOnOff onOff) : 
                base(p)
        {
            this._bindingId = bindingId;
            this._ownerId = ownerId;
            this._remoteServiceName = remoteServiceName;
            this._userId = userId;
            this._onOff = onOff;
        }
        
        public AstCreateRemoteServiceBinding(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBindingId>())
                {
                    this._bindingId = ((AstBindingId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._remoteServiceName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBindingId BindingId
        {
            get
            {
                return this._bindingId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstStringtext RemoteServiceName
        {
            get
            {
                return this._remoteServiceName;
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRemoteServiceBinding(this);
        }
        
        public static AstCreateRemoteServiceBinding? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_remote_service_binding : 
        ///    CREATE REMOTE SERVICE BINDING binding_id AUTHORIZATION owner_id TO SERVICE remote_service_name=stringtext WITH USER EQUAL user_id , ANONYMOUS EQUAL on_off 
        /// </summary>
        public static AstCreateRemoteServiceBinding New(AstBindingId bindingId, AstOwnerId ownerId, AstStringtext remoteServiceName, AstUserId userId, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(bindingId);
            list.Add(ownerId);
            list.Add(remoteServiceName);
            list.Add(userId);
            list.Add(onOff);
            return new AstCreateRemoteServiceBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_resource_pool : CREATE  RESOURCE  POOL  pool_id  create_resource_pool_infos?
    /// </summary>
    public partial class AstCreateResourcePool : AstBnfRule
    {
        
        private AstPoolId _poolId;
        
        private AstCreateResourcePoolInfos? _createResourcePoolInfos;
        
        private static string _ruleValue = "CREATE  RESOURCE  POOL  pool_id  create_resource_pool_infos?";
        
        private static string _ruleName = "create_resource_pool";
        
        public AstCreateResourcePool(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateResourcePoolInfos?>())
                {
                    this._createResourcePoolInfos = ((AstCreateResourcePoolInfos?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateResourcePool(Position p, AstPoolId poolId, AstCreateResourcePoolInfos? createResourcePoolInfos) : 
                base(p)
        {
            this._poolId = poolId;
            this._createResourcePoolInfos = createResourcePoolInfos;
        }
        
        public AstCreateResourcePool(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPoolId>())
                {
                    this._poolId = ((AstPoolId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateResourcePoolInfos?>())
                {
                    this._createResourcePoolInfos = ((AstCreateResourcePoolInfos?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPoolId PoolId
        {
            get
            {
                return this._poolId;
            }
        }
        
        public virtual AstCreateResourcePoolInfos? CreateResourcePoolInfos
        {
            get
            {
                return this._createResourcePoolInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateResourcePool(this);
        }
        
        public static AstCreateResourcePool? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_resource_pool : 
        ///    CREATE RESOURCE POOL pool_id create_resource_pool_infos? 
        /// </summary>
        public static AstCreateResourcePool New(AstPoolId poolId, AstCreateResourcePoolInfos? createResourcePoolInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(poolId);
            list.Add(createResourcePoolInfos);
            return new AstCreateResourcePool(Position.Default, list);
        }
    }
    
    /// <summary>
    /// decimal_range : dec_start = decimal | dec_start = decimal  TO  dec_end = decimal
    /// </summary>
    public partial class AstDecimalRange : AstBnfRule
    {
        
        private AstDecimal _decStart;
        
        private AstDecimal _decEnd;
        
        private static string _ruleValue = "dec_start = decimal | dec_start = decimal  TO  dec_end = decimal";
        
        private static string _ruleName = "decimal_range";
        
        public AstDecimalRange(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decStart = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decEnd = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstDecimalRange(Position p, AstDecimal decStart, AstDecimal decEnd) : 
                base(p)
        {
            this._decStart = decStart;
            this._decEnd = decEnd;
        }
        
        public AstDecimalRange(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decStart = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decEnd = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal DecStart
        {
            get
            {
                return this._decStart;
            }
        }
        
        public virtual AstDecimal DecEnd
        {
            get
            {
                return this._decEnd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalRange(this);
        }
        
        public static AstDecimalRange? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// decimal_range : 
        ///    dec_start=decimal 
        /// </summary>
        public static AstDecimalRange New(AstDecimal decStart)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decStart);
            return new AstDecimalRange(Position.Default, list);
        }
        
        /// <summary>
        /// decimal_range : 
        ///    dec_start=decimal TO dec_end=decimal 
        /// </summary>
        public static AstDecimalRange New(AstDecimal decStart, AstDecimal decEnd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decStart);
            list.Add(decEnd);
            return new AstDecimalRange(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_db_role : CREATE  ROLE  role_id  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateDbRole : AstBnfRule
    {
        
        private AstRoleId _roleId;
        
        private AstOwnerId _ownerId;
        
        private static string _ruleValue = "CREATE  ROLE  role_id  (AUTHORIZATION  owner_id)?";
        
        private static string _ruleName = "create_db_role";
        
        public AstCreateDbRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDbRole(Position p, AstRoleId roleId, AstOwnerId ownerId) : 
                base(p)
        {
            this._roleId = roleId;
            this._ownerId = ownerId;
        }
        
        public AstCreateDbRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRoleId>())
                {
                    this._roleId = ((AstRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRoleId RoleId
        {
            get
            {
                return this._roleId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDbRole(this);
        }
        
        public static AstCreateDbRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_db_role : 
        ///    CREATE ROLE role_id AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateDbRole New(AstRoleId roleId, AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(roleId);
            list.Add(ownerId);
            return new AstCreateDbRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_route : CREATE  ROUTE  route_id  (AUTHORIZATION  owner_id)?  WITH  (COMMA?  SERVICE_NAME  EQUAL  route_service_name = stringtext)?  (COMMA?  BROKER_INSTANCE  EQUAL  broker_instance_identifier = stringtext)?  (COMMA?  LIFETIME  EQUAL  lifetime = decimal)?  COMMA?  ADDRESS  EQUAL  address = stringtext  (COMMA  MIRROR_ADDRESS  EQUAL  mirror_address = stringtext)?
    /// </summary>
    public partial class AstCreateRoute : AstBnfRule
    {
        
        private AstRouteId _routeId;
        
        private AstOwnerId _ownerId;
        
        private AstStringtext _routeServiceName;
        
        private AstStringtext _brokerInstanceIdentifier;
        
        private AstDecimal _lifetime;
        
        private AstStringtext _address;
        
        private AstStringtext _mirrorAddress;
        
        private static string _ruleValue = @"CREATE  ROUTE  route_id  (AUTHORIZATION  owner_id)?  WITH  (COMMA?  SERVICE_NAME  EQUAL  route_service_name = stringtext)?  (COMMA?  BROKER_INSTANCE  EQUAL  broker_instance_identifier = stringtext)?  (COMMA?  LIFETIME  EQUAL  lifetime = decimal)?  COMMA?  ADDRESS  EQUAL  address = stringtext  (COMMA  MIRROR_ADDRESS  EQUAL  mirror_address = stringtext)?";
        
        private static string _ruleName = "create_route";
        
        public AstCreateRoute(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._routeServiceName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._brokerInstanceIdentifier = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._lifetime = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._address = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._mirrorAddress = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRoute(Position p, AstRouteId routeId, AstOwnerId ownerId, AstStringtext routeServiceName, AstStringtext brokerInstanceIdentifier, AstDecimal lifetime, AstStringtext address, AstStringtext mirrorAddress) : 
                base(p)
        {
            this._routeId = routeId;
            this._ownerId = ownerId;
            this._routeServiceName = routeServiceName;
            this._brokerInstanceIdentifier = brokerInstanceIdentifier;
            this._lifetime = lifetime;
            this._address = address;
            this._mirrorAddress = mirrorAddress;
        }
        
        public AstCreateRoute(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRouteId>())
                {
                    this._routeId = ((AstRouteId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._routeServiceName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._brokerInstanceIdentifier = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._lifetime = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._address = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._mirrorAddress = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRouteId RouteId
        {
            get
            {
                return this._routeId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstStringtext RouteServiceName
        {
            get
            {
                return this._routeServiceName;
            }
        }
        
        public virtual AstStringtext BrokerInstanceIdentifier
        {
            get
            {
                return this._brokerInstanceIdentifier;
            }
        }
        
        public virtual AstDecimal Lifetime
        {
            get
            {
                return this._lifetime;
            }
        }
        
        public virtual AstStringtext Address
        {
            get
            {
                return this._address;
            }
        }
        
        public virtual AstStringtext MirrorAddress
        {
            get
            {
                return this._mirrorAddress;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRoute(this);
        }
        
        public static AstCreateRoute? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_route : 
        ///    CREATE ROUTE route_id AUTHORIZATION owner_id WITH ,? SERVICE_NAME EQUAL route_service_name=stringtext ,? BROKER_INSTANCE EQUAL broker_instance_identifier=stringtext ,? LIFETIME EQUAL lifetime=decimal ,? ADDRESS EQUAL address=stringtext , MIRROR_ADDRESS EQUAL mirror_address=stringtext 
        /// </summary>
        public static AstCreateRoute New(AstRouteId routeId, AstOwnerId ownerId, AstStringtext routeServiceName, AstStringtext brokerInstanceIdentifier, AstDecimal lifetime, AstStringtext address, AstStringtext mirrorAddress)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(routeId);
            list.Add(ownerId);
            list.Add(routeServiceName);
            list.Add(brokerInstanceIdentifier);
            list.Add(lifetime);
            list.Add(address);
            list.Add(mirrorAddress);
            return new AstCreateRoute(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_rule : CREATE  RULE  schema_rule_ref  AS  search_condition
    /// </summary>
    public partial class AstCreateRule : AstBnfRule
    {
        
        private AstSchemaRuleRef _schemaRuleRef;
        
        private AstSearchCondition _searchCondition;
        
        private static string _ruleValue = "CREATE  RULE  schema_rule_ref  AS  search_condition";
        
        private static string _ruleName = "create_rule";
        
        public AstCreateRule(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaRuleRef>())
                {
                    this._schemaRuleRef = ((AstSchemaRuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCreateRule(Position p, AstSchemaRuleRef schemaRuleRef, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._schemaRuleRef = schemaRuleRef;
            this._searchCondition = searchCondition;
        }
        
        public AstCreateRule(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaRuleRef>())
                {
                    this._schemaRuleRef = ((AstSchemaRuleRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaRuleRef SchemaRuleRef
        {
            get
            {
                return this._schemaRuleRef;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateRule(this);
        }
        
        public static AstCreateRule? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_rule : 
        ///    CREATE RULE schema_rule_ref AS search_condition 
        /// </summary>
        public static AstCreateRule New(AstSchemaRuleRef schemaRuleRef, AstSearchCondition searchCondition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaRuleRef);
            list.Add(searchCondition);
            return new AstCreateRule(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_schema_sql : ALTER  SCHEMA  schema_identifier  TRANSFER  transfert_target?  id_dot_id
    /// </summary>
    public partial class AstAlterSchemaSql : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstTransfertTarget? _transfertTarget;
        
        private AstIdDotId _idDotId;
        
        private static string _ruleValue = "ALTER  SCHEMA  schema_identifier  TRANSFER  transfert_target?  id_dot_id";
        
        private static string _ruleName = "alter_schema_sql";
        
        public AstAlterSchemaSql(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTransfertTarget?>())
                {
                    this._transfertTarget = ((AstTransfertTarget?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaSql(Position p, AstSchemaIdentifier schemaIdentifier, AstTransfertTarget? transfertTarget, AstIdDotId idDotId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._transfertTarget = transfertTarget;
            this._idDotId = idDotId;
        }
        
        public AstAlterSchemaSql(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTransfertTarget?>())
                {
                    this._transfertTarget = ((AstTransfertTarget?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstTransfertTarget? TransfertTarget
        {
            get
            {
                return this._transfertTarget;
            }
        }
        
        public virtual AstIdDotId IdDotId
        {
            get
            {
                return this._idDotId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaSql(this);
        }
        
        public static AstAlterSchemaSql? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_schema_sql : 
        ///    ALTER SCHEMA schema_identifier TRANSFER transfert_target? id_dot_id 
        /// </summary>
        public static AstAlterSchemaSql New(AstSchemaIdentifier schemaIdentifier, AstTransfertTarget? transfertTarget, AstIdDotId idDotId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(transfertTarget);
            list.Add(idDotId);
            return new AstAlterSchemaSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_schema : CREATE  SCHEMA  create_schema_name  create_schema_targets?
    /// </summary>
    public partial class AstCreateSchema : AstBnfRule
    {
        
        private AstCreateSchemaName _createSchemaName;
        
        private AstCreateSchemaTargets? _createSchemaTargets;
        
        private static string _ruleValue = "CREATE  SCHEMA  create_schema_name  create_schema_targets?";
        
        private static string _ruleName = "create_schema";
        
        public AstCreateSchema(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateSchemaName>())
                {
                    this._createSchemaName = ((AstCreateSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSchemaTargets?>())
                {
                    this._createSchemaTargets = ((AstCreateSchemaTargets?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchema(Position p, AstCreateSchemaName createSchemaName, AstCreateSchemaTargets? createSchemaTargets) : 
                base(p)
        {
            this._createSchemaName = createSchemaName;
            this._createSchemaTargets = createSchemaTargets;
        }
        
        public AstCreateSchema(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateSchemaName>())
                {
                    this._createSchemaName = ((AstCreateSchemaName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSchemaTargets?>())
                {
                    this._createSchemaTargets = ((AstCreateSchemaTargets?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateSchemaName CreateSchemaName
        {
            get
            {
                return this._createSchemaName;
            }
        }
        
        public virtual AstCreateSchemaTargets? CreateSchemaTargets
        {
            get
            {
                return this._createSchemaTargets;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchema(this);
        }
        
        public static AstCreateSchema? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_schema : 
        ///    CREATE SCHEMA create_schema_name create_schema_targets? 
        /// </summary>
        public static AstCreateSchema New(AstCreateSchemaName createSchemaName, AstCreateSchemaTargets? createSchemaTargets)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createSchemaName);
            list.Add(createSchemaTargets);
            return new AstCreateSchema(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_authorization : AUTHORIZATION  owner_id
    /// </summary>
    public partial class AstSchemaAuthorization : AstBnfRule
    {
        
        private AstOwnerId _ownerId;
        
        private static string _ruleValue = "AUTHORIZATION  owner_id";
        
        private static string _ruleName = "schema_authorization";
        
        public AstSchemaAuthorization(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaAuthorization(Position p, AstOwnerId ownerId) : 
                base(p)
        {
            this._ownerId = ownerId;
        }
        
        public AstSchemaAuthorization(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaAuthorization(this);
        }
        
        public static AstSchemaAuthorization? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// schema_authorization : 
        ///    AUTHORIZATION owner_id 
        /// </summary>
        public static AstSchemaAuthorization New(AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ownerId);
            return new AstSchemaAuthorization(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_schema_azure_sql_dw_and_pdw : CREATE  SCHEMA  schema_identifier  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateSchemaAzureSqlDwAndPdw : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstOwnerId _ownerId;
        
        private static string _ruleValue = "CREATE  SCHEMA  schema_identifier  (AUTHORIZATION  owner_id)?";
        
        private static string _ruleName = "create_schema_azure_sql_dw_and_pdw";
        
        public AstCreateSchemaAzureSqlDwAndPdw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSchemaAzureSqlDwAndPdw(Position p, AstSchemaIdentifier schemaIdentifier, AstOwnerId ownerId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._ownerId = ownerId;
        }
        
        public AstCreateSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSchemaAzureSqlDwAndPdw(this);
        }
        
        public static AstCreateSchemaAzureSqlDwAndPdw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_schema_azure_sql_dw_and_pdw : 
        ///    CREATE SCHEMA schema_identifier AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateSchemaAzureSqlDwAndPdw New(AstSchemaIdentifier schemaIdentifier, AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(ownerId);
            return new AstCreateSchemaAzureSqlDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_schema_azure_sql_dw_and_pdw : ALTER  SCHEMA  schema_identifier  TRANSFER  (OBJECT  DOUBLE_COLON)?  id_dot_id
    /// </summary>
    public partial class AstAlterSchemaAzureSqlDwAndPdw : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private AstIdDotId _idDotId;
        
        private static string _ruleValue = "ALTER  SCHEMA  schema_identifier  TRANSFER  (OBJECT  DOUBLE_COLON)?  id_dot_id";
        
        private static string _ruleName = "alter_schema_azure_sql_dw_and_pdw";
        
        public AstAlterSchemaAzureSqlDwAndPdw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSchemaAzureSqlDwAndPdw(Position p, AstSchemaIdentifier schemaIdentifier, AstIdDotId idDotId) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
            this._idDotId = idDotId;
        }
        
        public AstAlterSchemaAzureSqlDwAndPdw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIdDotId>())
                {
                    this._idDotId = ((AstIdDotId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstIdDotId IdDotId
        {
            get
            {
                return this._idDotId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSchemaAzureSqlDwAndPdw(this);
        }
        
        public static AstAlterSchemaAzureSqlDwAndPdw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_schema_azure_sql_dw_and_pdw : 
        ///    ALTER SCHEMA schema_identifier TRANSFER OBJECT :: id_dot_id 
        /// </summary>
        public static AstAlterSchemaAzureSqlDwAndPdw New(AstSchemaIdentifier schemaIdentifier, AstIdDotId idDotId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            list.Add(idDotId);
            return new AstAlterSchemaAzureSqlDwAndPdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_search_property_list : CREATE  SEARCH  PROPERTY  LIST  source_list_id  (FROM  database_source_list_ref)?  (AUTHORIZATION  owner_id)?
    /// </summary>
    public partial class AstCreateSearchPropertyList : AstBnfRule
    {
        
        private AstSourceListId _sourceListId;
        
        private AstDatabaseSourceListRef _databaseSourceListRef;
        
        private AstOwnerId _ownerId;
        
        private static string _ruleValue = "CREATE  SEARCH  PROPERTY  LIST  source_list_id  (FROM  database_source_list_ref)?" +
            "  (AUTHORIZATION  owner_id)?";
        
        private static string _ruleName = "create_search_property_list";
        
        public AstCreateSearchPropertyList(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSourceListRef>())
                {
                    this._databaseSourceListRef = ((AstDatabaseSourceListRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSearchPropertyList(Position p, AstSourceListId sourceListId, AstDatabaseSourceListRef databaseSourceListRef, AstOwnerId ownerId) : 
                base(p)
        {
            this._sourceListId = sourceListId;
            this._databaseSourceListRef = databaseSourceListRef;
            this._ownerId = ownerId;
        }
        
        public AstCreateSearchPropertyList(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSourceListId>())
                {
                    this._sourceListId = ((AstSourceListId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSourceListRef>())
                {
                    this._databaseSourceListRef = ((AstDatabaseSourceListRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSourceListId SourceListId
        {
            get
            {
                return this._sourceListId;
            }
        }
        
        public virtual AstDatabaseSourceListRef DatabaseSourceListRef
        {
            get
            {
                return this._databaseSourceListRef;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSearchPropertyList(this);
        }
        
        public static AstCreateSearchPropertyList? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_search_property_list : 
        ///    CREATE SEARCH PROPERTY LIST source_list_id FROM database_source_list_ref AUTHORIZATION owner_id 
        /// </summary>
        public static AstCreateSearchPropertyList New(AstSourceListId sourceListId, AstDatabaseSourceListRef databaseSourceListRef, AstOwnerId ownerId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(sourceListId);
            list.Add(databaseSourceListRef);
            list.Add(ownerId);
            return new AstCreateSearchPropertyList(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_security_policy : CREATE  SECURITY  POLICY  schema_security_policy_ref  create_security_policy_adds  (WITH  LR_BRACKET  STATE  EQUAL  on_off  schema_binding?  RR_BRACKET)?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstCreateSecurityPolicy : AstBnfRule
    {
        
        private AstSchemaSecurityPolicyRef _schemaSecurityPolicyRef;
        
        private AstCreateSecurityPolicyAdds _createSecurityPolicyAdds;
        
        private AstOnOff _onOff;
        
        private AstSchemaBinding? _schemaBinding;
        
        private static string _ruleValue = "CREATE  SECURITY  POLICY  schema_security_policy_ref  create_security_policy_adds" +
            "  (WITH  LR_BRACKET  STATE  EQUAL  on_off  schema_binding?  RR_BRACKET)?  (NOT  " +
            "FOR  REPLICATION)?";
        
        private static string _ruleName = "create_security_policy";
        
        public AstCreateSecurityPolicy(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSecurityPolicyAdds>())
                {
                    this._createSecurityPolicyAdds = ((AstCreateSecurityPolicyAdds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaBinding?>())
                {
                    this._schemaBinding = ((AstSchemaBinding?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicy(Position p, AstSchemaSecurityPolicyRef schemaSecurityPolicyRef, AstCreateSecurityPolicyAdds createSecurityPolicyAdds, AstOnOff onOff, AstSchemaBinding? schemaBinding) : 
                base(p)
        {
            this._schemaSecurityPolicyRef = schemaSecurityPolicyRef;
            this._createSecurityPolicyAdds = createSecurityPolicyAdds;
            this._onOff = onOff;
            this._schemaBinding = schemaBinding;
        }
        
        public AstCreateSecurityPolicy(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSecurityPolicyRef>())
                {
                    this._schemaSecurityPolicyRef = ((AstSchemaSecurityPolicyRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSecurityPolicyAdds>())
                {
                    this._createSecurityPolicyAdds = ((AstCreateSecurityPolicyAdds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaBinding?>())
                {
                    this._schemaBinding = ((AstSchemaBinding?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSecurityPolicyRef SchemaSecurityPolicyRef
        {
            get
            {
                return this._schemaSecurityPolicyRef;
            }
        }
        
        public virtual AstCreateSecurityPolicyAdds CreateSecurityPolicyAdds
        {
            get
            {
                return this._createSecurityPolicyAdds;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public virtual AstSchemaBinding? SchemaBinding
        {
            get
            {
                return this._schemaBinding;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicy(this);
        }
        
        public static AstCreateSecurityPolicy? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_security_policy : 
        ///    CREATE SECURITY POLICY schema_security_policy_ref create_security_policy_adds WITH ( STATE EQUAL on_off schema_binding? ) NOT FOR REPLICATION 
        /// </summary>
        public static AstCreateSecurityPolicy New(AstSchemaSecurityPolicyRef schemaSecurityPolicyRef, AstCreateSecurityPolicyAdds createSecurityPolicyAdds, AstOnOff onOff, AstSchemaBinding? schemaBinding)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSecurityPolicyRef);
            list.Add(createSecurityPolicyAdds);
            list.Add(onOff);
            list.Add(schemaBinding);
            return new AstCreateSecurityPolicy(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_binding : SCHEMABINDING  on_off
    /// </summary>
    public partial class AstSchemaBinding : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "SCHEMABINDING  on_off";
        
        private static string _ruleName = "schema_binding";
        
        public AstSchemaBinding(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaBinding(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstSchemaBinding(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaBinding(this);
        }
        
        public static AstSchemaBinding? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// schema_binding : 
        ///    SCHEMABINDING on_off 
        /// </summary>
        public static AstSchemaBinding New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstSchemaBinding(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_security_policy_add : ADD  filter_block?  PREDICATE  schema_security_predicate_function_id  LR_BRACKET  column_or_argument_ids  RR_BRACKET  ON  database_schema_table_ref  schema_table_ref_impacts?
    /// </summary>
    public partial class AstCreateSecurityPolicyAdd : AstBnfRule
    {
        
        private AstFilterBlock? _filterBlock;
        
        private AstSchemaSecurityPredicateFunctionId _schemaSecurityPredicateFunctionId;
        
        private AstColumnOrArgumentIds _columnOrArgumentIds;
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private AstSchemaTableRefImpacts? _schemaTableRefImpacts;
        
        private static string _ruleValue = "ADD  filter_block?  PREDICATE  schema_security_predicate_function_id  LR_BRACKET " +
            " column_or_argument_ids  RR_BRACKET  ON  database_schema_table_ref  schema_table" +
            "_ref_impacts?";
        
        private static string _ruleName = "create_security_policy_add";
        
        public AstCreateSecurityPolicyAdd(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilterBlock?>())
                {
                    this._filterBlock = ((AstFilterBlock?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSecurityPredicateFunctionId>())
                {
                    this._schemaSecurityPredicateFunctionId = ((AstSchemaSecurityPredicateFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnOrArgumentIds>())
                {
                    this._columnOrArgumentIds = ((AstColumnOrArgumentIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTableRefImpacts?>())
                {
                    this._schemaTableRefImpacts = ((AstSchemaTableRefImpacts?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSecurityPolicyAdd(Position p, AstFilterBlock? filterBlock, AstSchemaSecurityPredicateFunctionId schemaSecurityPredicateFunctionId, AstColumnOrArgumentIds columnOrArgumentIds, AstDatabaseSchemaTableRef databaseSchemaTableRef, AstSchemaTableRefImpacts? schemaTableRefImpacts) : 
                base(p)
        {
            this._filterBlock = filterBlock;
            this._schemaSecurityPredicateFunctionId = schemaSecurityPredicateFunctionId;
            this._columnOrArgumentIds = columnOrArgumentIds;
            this._databaseSchemaTableRef = databaseSchemaTableRef;
            this._schemaTableRefImpacts = schemaTableRefImpacts;
        }
        
        public AstCreateSecurityPolicyAdd(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFilterBlock?>())
                {
                    this._filterBlock = ((AstFilterBlock?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaSecurityPredicateFunctionId>())
                {
                    this._schemaSecurityPredicateFunctionId = ((AstSchemaSecurityPredicateFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnOrArgumentIds>())
                {
                    this._columnOrArgumentIds = ((AstColumnOrArgumentIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTableRefImpacts?>())
                {
                    this._schemaTableRefImpacts = ((AstSchemaTableRefImpacts?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFilterBlock? FilterBlock
        {
            get
            {
                return this._filterBlock;
            }
        }
        
        public virtual AstSchemaSecurityPredicateFunctionId SchemaSecurityPredicateFunctionId
        {
            get
            {
                return this._schemaSecurityPredicateFunctionId;
            }
        }
        
        public virtual AstColumnOrArgumentIds ColumnOrArgumentIds
        {
            get
            {
                return this._columnOrArgumentIds;
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public virtual AstSchemaTableRefImpacts? SchemaTableRefImpacts
        {
            get
            {
                return this._schemaTableRefImpacts;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSecurityPolicyAdd(this);
        }
        
        public static AstCreateSecurityPolicyAdd? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_security_policy_add : 
        ///    ADD filter_block? PREDICATE schema_security_predicate_function_id ( column_or_argument_ids ) ON database_schema_table_ref schema_table_ref_impacts? 
        /// </summary>
        public static AstCreateSecurityPolicyAdd New(AstFilterBlock? filterBlock, AstSchemaSecurityPredicateFunctionId schemaSecurityPredicateFunctionId, AstColumnOrArgumentIds columnOrArgumentIds, AstDatabaseSchemaTableRef databaseSchemaTableRef, AstSchemaTableRefImpacts? schemaTableRefImpacts)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(filterBlock);
            list.Add(schemaSecurityPredicateFunctionId);
            list.Add(columnOrArgumentIds);
            list.Add(databaseSchemaTableRef);
            list.Add(schemaTableRefImpacts);
            return new AstCreateSecurityPolicyAdd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_sequence : ALTER  SEQUENCE  schema_sequence_ref  alter_sequence_restart?  alter_sequence_increment?  alter_sequence_min_value?  alter_sequence_max_value  sequence_cycle?  sequence_cache?
    /// </summary>
    public partial class AstAlterSequence : AstBnfRule
    {
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        private AstAlterSequenceRestart? _alterSequenceRestart;
        
        private AstAlterSequenceIncrement? _alterSequenceIncrement;
        
        private AstAlterSequenceMinValue? _alterSequenceMinValue;
        
        private AstAlterSequenceMaxValue _alterSequenceMaxValue;
        
        private AstSequenceCycle? _sequenceCycle;
        
        private AstSequenceCache? _sequenceCache;
        
        private static string _ruleValue = "ALTER  SEQUENCE  schema_sequence_ref  alter_sequence_restart?  alter_sequence_inc" +
            "rement?  alter_sequence_min_value?  alter_sequence_max_value  sequence_cycle?  s" +
            "equence_cache?";
        
        private static string _ruleName = "alter_sequence";
        
        public AstAlterSequence(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceRestart?>())
                {
                    this._alterSequenceRestart = ((AstAlterSequenceRestart?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceIncrement?>())
                {
                    this._alterSequenceIncrement = ((AstAlterSequenceIncrement?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMinValue?>())
                {
                    this._alterSequenceMinValue = ((AstAlterSequenceMinValue?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMaxValue>())
                {
                    this._alterSequenceMaxValue = ((AstAlterSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCycle?>())
                {
                    this._sequenceCycle = ((AstSequenceCycle?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache?>())
                {
                    this._sequenceCache = ((AstSequenceCache?)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSequence(Position p, AstSchemaSequenceRef schemaSequenceRef, AstAlterSequenceRestart? alterSequenceRestart, AstAlterSequenceIncrement? alterSequenceIncrement, AstAlterSequenceMinValue? alterSequenceMinValue, AstAlterSequenceMaxValue alterSequenceMaxValue, AstSequenceCycle? sequenceCycle, AstSequenceCache? sequenceCache) : 
                base(p)
        {
            this._schemaSequenceRef = schemaSequenceRef;
            this._alterSequenceRestart = alterSequenceRestart;
            this._alterSequenceIncrement = alterSequenceIncrement;
            this._alterSequenceMinValue = alterSequenceMinValue;
            this._alterSequenceMaxValue = alterSequenceMaxValue;
            this._sequenceCycle = sequenceCycle;
            this._sequenceCache = sequenceCache;
        }
        
        public AstAlterSequence(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceRestart?>())
                {
                    this._alterSequenceRestart = ((AstAlterSequenceRestart?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceIncrement?>())
                {
                    this._alterSequenceIncrement = ((AstAlterSequenceIncrement?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMinValue?>())
                {
                    this._alterSequenceMinValue = ((AstAlterSequenceMinValue?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterSequenceMaxValue>())
                {
                    this._alterSequenceMaxValue = ((AstAlterSequenceMaxValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCycle?>())
                {
                    this._sequenceCycle = ((AstSequenceCycle?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache?>())
                {
                    this._sequenceCache = ((AstSequenceCache?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public virtual AstAlterSequenceRestart? AlterSequenceRestart
        {
            get
            {
                return this._alterSequenceRestart;
            }
        }
        
        public virtual AstAlterSequenceIncrement? AlterSequenceIncrement
        {
            get
            {
                return this._alterSequenceIncrement;
            }
        }
        
        public virtual AstAlterSequenceMinValue? AlterSequenceMinValue
        {
            get
            {
                return this._alterSequenceMinValue;
            }
        }
        
        public virtual AstAlterSequenceMaxValue AlterSequenceMaxValue
        {
            get
            {
                return this._alterSequenceMaxValue;
            }
        }
        
        public virtual AstSequenceCycle? SequenceCycle
        {
            get
            {
                return this._sequenceCycle;
            }
        }
        
        public virtual AstSequenceCache? SequenceCache
        {
            get
            {
                return this._sequenceCache;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSequence(this);
        }
        
        public static AstAlterSequence? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_sequence : 
        ///    ALTER SEQUENCE schema_sequence_ref alter_sequence_restart? alter_sequence_increment? alter_sequence_min_value? alter_sequence_max_value sequence_cycle? sequence_cache? 
        /// </summary>
        public static AstAlterSequence New(AstSchemaSequenceRef schemaSequenceRef, AstAlterSequenceRestart? alterSequenceRestart, AstAlterSequenceIncrement? alterSequenceIncrement, AstAlterSequenceMinValue? alterSequenceMinValue, AstAlterSequenceMaxValue alterSequenceMaxValue, AstSequenceCycle? sequenceCycle, AstSequenceCache? sequenceCache)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSequenceRef);
            list.Add(alterSequenceRestart);
            list.Add(alterSequenceIncrement);
            list.Add(alterSequenceMinValue);
            list.Add(alterSequenceMaxValue);
            list.Add(sequenceCycle);
            list.Add(sequenceCache);
            return new AstAlterSequence(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_value_decimal : MAXVALUE  decimal
    /// </summary>
    public partial class AstMaxValueDecimal : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "MAXVALUE  decimal";
        
        private static string _ruleName = "max_value_decimal";
        
        public AstMaxValueDecimal(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxValueDecimal(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxValueDecimal(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxValueDecimal(this);
        }
        
        public static AstMaxValueDecimal? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// max_value_decimal : 
        ///    MAXVALUE decimal 
        /// </summary>
        public static AstMaxValueDecimal New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstMaxValueDecimal(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_sequence : CREATE  SEQUENCE  schema_sequence_ref  (AS  data_type)?  create_sequence_start?  create_sequence_increment?  create_sequence_min_value?  create_sequence_max_value?  sequence_cycle?  sequence_cache?
    /// </summary>
    public partial class AstCreateSequence : AstBnfRule
    {
        
        private AstSchemaSequenceRef _schemaSequenceRef;
        
        private AstDataType _dataType;
        
        private AstCreateSequenceStart? _createSequenceStart;
        
        private AstCreateSequenceIncrement? _createSequenceIncrement;
        
        private AstCreateSequenceMinValue? _createSequenceMinValue;
        
        private AstCreateSequenceMaxValue? _createSequenceMaxValue;
        
        private AstSequenceCycle? _sequenceCycle;
        
        private AstSequenceCache? _sequenceCache;
        
        private static string _ruleValue = "CREATE  SEQUENCE  schema_sequence_ref  (AS  data_type)?  create_sequence_start?  " +
            "create_sequence_increment?  create_sequence_min_value?  create_sequence_max_valu" +
            "e?  sequence_cycle?  sequence_cache?";
        
        private static string _ruleName = "create_sequence";
        
        public AstCreateSequence(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceStart?>())
                {
                    this._createSequenceStart = ((AstCreateSequenceStart?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceIncrement?>())
                {
                    this._createSequenceIncrement = ((AstCreateSequenceIncrement?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMinValue?>())
                {
                    this._createSequenceMinValue = ((AstCreateSequenceMinValue?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMaxValue?>())
                {
                    this._createSequenceMaxValue = ((AstCreateSequenceMaxValue?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCycle?>())
                {
                    this._sequenceCycle = ((AstSequenceCycle?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache?>())
                {
                    this._sequenceCache = ((AstSequenceCache?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequence(Position p, AstSchemaSequenceRef schemaSequenceRef, AstDataType dataType, AstCreateSequenceStart? createSequenceStart, AstCreateSequenceIncrement? createSequenceIncrement, AstCreateSequenceMinValue? createSequenceMinValue, AstCreateSequenceMaxValue? createSequenceMaxValue, AstSequenceCycle? sequenceCycle, AstSequenceCache? sequenceCache) : 
                base(p)
        {
            this._schemaSequenceRef = schemaSequenceRef;
            this._dataType = dataType;
            this._createSequenceStart = createSequenceStart;
            this._createSequenceIncrement = createSequenceIncrement;
            this._createSequenceMinValue = createSequenceMinValue;
            this._createSequenceMaxValue = createSequenceMaxValue;
            this._sequenceCycle = sequenceCycle;
            this._sequenceCache = sequenceCache;
        }
        
        public AstCreateSequence(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSequenceRef>())
                {
                    this._schemaSequenceRef = ((AstSchemaSequenceRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceStart?>())
                {
                    this._createSequenceStart = ((AstCreateSequenceStart?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceIncrement?>())
                {
                    this._createSequenceIncrement = ((AstCreateSequenceIncrement?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMinValue?>())
                {
                    this._createSequenceMinValue = ((AstCreateSequenceMinValue?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateSequenceMaxValue?>())
                {
                    this._createSequenceMaxValue = ((AstCreateSequenceMaxValue?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCycle?>())
                {
                    this._sequenceCycle = ((AstSequenceCycle?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSequenceCache?>())
                {
                    this._sequenceCache = ((AstSequenceCache?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSequenceRef SchemaSequenceRef
        {
            get
            {
                return this._schemaSequenceRef;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstCreateSequenceStart? CreateSequenceStart
        {
            get
            {
                return this._createSequenceStart;
            }
        }
        
        public virtual AstCreateSequenceIncrement? CreateSequenceIncrement
        {
            get
            {
                return this._createSequenceIncrement;
            }
        }
        
        public virtual AstCreateSequenceMinValue? CreateSequenceMinValue
        {
            get
            {
                return this._createSequenceMinValue;
            }
        }
        
        public virtual AstCreateSequenceMaxValue? CreateSequenceMaxValue
        {
            get
            {
                return this._createSequenceMaxValue;
            }
        }
        
        public virtual AstSequenceCycle? SequenceCycle
        {
            get
            {
                return this._sequenceCycle;
            }
        }
        
        public virtual AstSequenceCache? SequenceCache
        {
            get
            {
                return this._sequenceCache;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequence(this);
        }
        
        public static AstCreateSequence? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_sequence : 
        ///    CREATE SEQUENCE schema_sequence_ref AS data_type create_sequence_start? create_sequence_increment? create_sequence_min_value? create_sequence_max_value? sequence_cycle? sequence_cache? 
        /// </summary>
        public static AstCreateSequence New(AstSchemaSequenceRef schemaSequenceRef, AstDataType dataType, AstCreateSequenceStart? createSequenceStart, AstCreateSequenceIncrement? createSequenceIncrement, AstCreateSequenceMinValue? createSequenceMinValue, AstCreateSequenceMaxValue? createSequenceMaxValue, AstSequenceCycle? sequenceCycle, AstSequenceCache? sequenceCache)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSequenceRef);
            list.Add(dataType);
            list.Add(createSequenceStart);
            list.Add(createSequenceIncrement);
            list.Add(createSequenceMinValue);
            list.Add(createSequenceMaxValue);
            list.Add(sequenceCycle);
            list.Add(sequenceCache);
            return new AstCreateSequence(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_sequence_increment : INCREMENT  BY  real
    /// </summary>
    public partial class AstCreateSequenceIncrement : AstBnfRule
    {
        
        private AstReal _real;
        
        private static string _ruleValue = "INCREMENT  BY  real";
        
        private static string _ruleName = "create_sequence_increment";
        
        public AstCreateSequenceIncrement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReal>())
                {
                    this._real = ((AstReal)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequenceIncrement(Position p, AstReal real) : 
                base(p)
        {
            this._real = real;
        }
        
        public AstCreateSequenceIncrement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReal>())
                {
                    this._real = ((AstReal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReal Real
        {
            get
            {
                return this._real;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequenceIncrement(this);
        }
        
        public static AstCreateSequenceIncrement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_sequence_increment : 
        ///    INCREMENT BY real 
        /// </summary>
        public static AstCreateSequenceIncrement New(AstReal real)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(real);
            return new AstCreateSequenceIncrement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// real : sign?  decimal
    /// </summary>
    public partial class AstReal : AstBnfRule
    {
        
        private AstSign? _sign;
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "sign?  decimal";
        
        private static string _ruleName = "real";
        
        public AstReal(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSign?>())
                {
                    this._sign = ((AstSign?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstReal(Position p, AstSign? sign, AstDecimal @decimal) : 
                base(p)
        {
            this._sign = sign;
            this._decimal = @decimal;
        }
        
        public AstReal(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSign?>())
                {
                    this._sign = ((AstSign?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSign? Sign
        {
            get
            {
                return this._sign;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReal(this);
        }
        
        public static AstReal? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// real : 
        ///    sign? decimal 
        /// </summary>
        public static AstReal New(AstSign? sign, AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(sign);
            list.Add(@decimal);
            return new AstReal(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_sequence_start : START  WITH  decimal
    /// </summary>
    public partial class AstCreateSequenceStart : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "START  WITH  decimal";
        
        private static string _ruleName = "create_sequence_start";
        
        public AstCreateSequenceStart(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSequenceStart(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstCreateSequenceStart(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSequenceStart(this);
        }
        
        public static AstCreateSequenceStart? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_sequence_start : 
        ///    START WITH decimal 
        /// </summary>
        public static AstCreateSequenceStart New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstCreateSequenceStart(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_audit : ALTER  SERVER  AUDIT  audit_id  alter_server_audit_infos
    /// </summary>
    public partial class AstAlterServerAudit : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditInfos _alterServerAuditInfos;
        
        private static string _ruleValue = "ALTER  SERVER  AUDIT  audit_id  alter_server_audit_infos";
        
        private static string _ruleName = "alter_server_audit";
        
        public AstAlterServerAudit(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditInfos>())
                {
                    this._alterServerAuditInfos = ((AstAlterServerAuditInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAudit(Position p, AstAuditId auditId, AstAlterServerAuditInfos alterServerAuditInfos) : 
                base(p)
        {
            this._auditId = auditId;
            this._alterServerAuditInfos = alterServerAuditInfos;
        }
        
        public AstAlterServerAudit(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditInfos>())
                {
                    this._alterServerAuditInfos = ((AstAlterServerAuditInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditInfos AlterServerAuditInfos
        {
            get
            {
                return this._alterServerAuditInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAudit(this);
        }
        
        public static AstAlterServerAudit? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_server_audit : 
        ///    ALTER SERVER AUDIT audit_id alter_server_audit_infos 
        /// </summary>
        public static AstAlterServerAudit New(AstAuditId auditId, AstAlterServerAuditInfos alterServerAuditInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            list.Add(alterServerAuditInfos);
            return new AstAlterServerAudit(Position.Default, list);
        }
    }
    
    /// <summary>
    /// with_server_audit_file : WITH  LR_BRACKET  server_audit_file_infos?  RR_BRACKET
    /// </summary>
    public partial class AstWithServerAuditFile : AstBnfRule
    {
        
        private AstServerAuditFileInfos? _serverAuditFileInfos;
        
        private static string _ruleValue = "WITH  LR_BRACKET  server_audit_file_infos?  RR_BRACKET";
        
        private static string _ruleName = "with_server_audit_file";
        
        public AstWithServerAuditFile(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerAuditFileInfos?>())
                {
                    this._serverAuditFileInfos = ((AstServerAuditFileInfos?)(enumerator.Current));
                }
            }
        }
        
        public AstWithServerAuditFile(Position p, AstServerAuditFileInfos? serverAuditFileInfos) : 
                base(p)
        {
            this._serverAuditFileInfos = serverAuditFileInfos;
        }
        
        public AstWithServerAuditFile(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerAuditFileInfos?>())
                {
                    this._serverAuditFileInfos = ((AstServerAuditFileInfos?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerAuditFileInfos? ServerAuditFileInfos
        {
            get
            {
                return this._serverAuditFileInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWithServerAuditFile(this);
        }
        
        public static AstWithServerAuditFile? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// with_server_audit_file : 
        ///    WITH ( server_audit_file_infos? ) 
        /// </summary>
        public static AstWithServerAuditFile New(AstServerAuditFileInfos? serverAuditFileInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverAuditFileInfos);
            return new AstWithServerAuditFile(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_server_audit : CREATE  SERVER  AUDIT  audit_id  create_server_audit_to_infos
    /// </summary>
    public partial class AstCreateServerAudit : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private AstCreateServerAuditToInfos _createServerAuditToInfos;
        
        private static string _ruleValue = "CREATE  SERVER  AUDIT  audit_id  create_server_audit_to_infos";
        
        private static string _ruleName = "create_server_audit";
        
        public AstCreateServerAudit(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateServerAuditToInfos>())
                {
                    this._createServerAuditToInfos = ((AstCreateServerAuditToInfos)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAudit(Position p, AstAuditId auditId, AstCreateServerAuditToInfos createServerAuditToInfos) : 
                base(p)
        {
            this._auditId = auditId;
            this._createServerAuditToInfos = createServerAuditToInfos;
        }
        
        public AstCreateServerAudit(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateServerAuditToInfos>())
                {
                    this._createServerAuditToInfos = ((AstCreateServerAuditToInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstCreateServerAuditToInfos CreateServerAuditToInfos
        {
            get
            {
                return this._createServerAuditToInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAudit(this);
        }
        
        public static AstCreateServerAudit? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_server_audit : 
        ///    CREATE SERVER AUDIT audit_id create_server_audit_to_infos 
        /// </summary>
        public static AstCreateServerAudit New(AstAuditId auditId, AstCreateServerAuditToInfos createServerAuditToInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            list.Add(createServerAuditToInfos);
            return new AstCreateServerAudit(Position.Default, list);
        }
    }
    
    /// <summary>
    /// where_server_audit_condition : WHERE  alter_server_audit_condition?
    /// </summary>
    public partial class AstWhereServerAuditCondition : AstBnfRule
    {
        
        private AstAlterServerAuditCondition? _alterServerAuditCondition;
        
        private static string _ruleValue = "WHERE  alter_server_audit_condition?";
        
        private static string _ruleName = "where_server_audit_condition";
        
        public AstWhereServerAuditCondition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterServerAuditCondition?>())
                {
                    this._alterServerAuditCondition = ((AstAlterServerAuditCondition?)(enumerator.Current));
                }
            }
        }
        
        public AstWhereServerAuditCondition(Position p, AstAlterServerAuditCondition? alterServerAuditCondition) : 
                base(p)
        {
            this._alterServerAuditCondition = alterServerAuditCondition;
        }
        
        public AstWhereServerAuditCondition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAlterServerAuditCondition?>())
                {
                    this._alterServerAuditCondition = ((AstAlterServerAuditCondition?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAlterServerAuditCondition? AlterServerAuditCondition
        {
            get
            {
                return this._alterServerAuditCondition;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhereServerAuditCondition(this);
        }
        
        public static AstWhereServerAuditCondition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// where_server_audit_condition : 
        ///    WHERE alter_server_audit_condition? 
        /// </summary>
        public static AstWhereServerAuditCondition New(AstAlterServerAuditCondition? alterServerAuditCondition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterServerAuditCondition);
            return new AstWhereServerAuditCondition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification : ALTER  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  add_drop_audit_action_groups?  server_audit_state?
    /// </summary>
    public partial class AstAlterServerAuditSpecification : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditSpecificationServer? _alterServerAuditSpecificationServer;
        
        private AstAddDropAuditActionGroups? _addDropAuditActionGroups;
        
        private AstServerAuditState? _serverAuditState;
        
        private static string _ruleValue = "ALTER  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_s" +
            "erver?  add_drop_audit_action_groups?  server_audit_state?";
        
        private static string _ruleName = "alter_server_audit_specification";
        
        public AstAlterServerAuditSpecification(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer?>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDropAuditActionGroups?>())
                {
                    this._addDropAuditActionGroups = ((AstAddDropAuditActionGroups?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState?>())
                {
                    this._serverAuditState = ((AstServerAuditState?)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecification(Position p, AstAuditId auditId, AstAlterServerAuditSpecificationServer? alterServerAuditSpecificationServer, AstAddDropAuditActionGroups? addDropAuditActionGroups, AstServerAuditState? serverAuditState) : 
                base(p)
        {
            this._auditId = auditId;
            this._alterServerAuditSpecificationServer = alterServerAuditSpecificationServer;
            this._addDropAuditActionGroups = addDropAuditActionGroups;
            this._serverAuditState = serverAuditState;
        }
        
        public AstAlterServerAuditSpecification(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer?>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDropAuditActionGroups?>())
                {
                    this._addDropAuditActionGroups = ((AstAddDropAuditActionGroups?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState?>())
                {
                    this._serverAuditState = ((AstServerAuditState?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditSpecificationServer? AlterServerAuditSpecificationServer
        {
            get
            {
                return this._alterServerAuditSpecificationServer;
            }
        }
        
        public virtual AstAddDropAuditActionGroups? AddDropAuditActionGroups
        {
            get
            {
                return this._addDropAuditActionGroups;
            }
        }
        
        public virtual AstServerAuditState? ServerAuditState
        {
            get
            {
                return this._serverAuditState;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecification(this);
        }
        
        public static AstAlterServerAuditSpecification? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_server_audit_specification : 
        ///    ALTER SERVER AUDIT SPECIFICATION audit_id alter_server_audit_specification_server? add_drop_audit_action_groups? server_audit_state? 
        /// </summary>
        public static AstAlterServerAuditSpecification New(AstAuditId auditId, AstAlterServerAuditSpecificationServer? alterServerAuditSpecificationServer, AstAddDropAuditActionGroups? addDropAuditActionGroups, AstServerAuditState? serverAuditState)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            list.Add(alterServerAuditSpecificationServer);
            list.Add(addDropAuditActionGroups);
            list.Add(serverAuditState);
            return new AstAlterServerAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_audit_state : WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET
    /// </summary>
    public partial class AstServerAuditState : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "WITH  LR_BRACKET  STATE  EQUAL  on_off  RR_BRACKET";
        
        private static string _ruleName = "server_audit_state";
        
        public AstServerAuditState(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstServerAuditState(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstServerAuditState(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditState(this);
        }
        
        public static AstServerAuditState? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// server_audit_state : 
        ///    WITH ( STATE EQUAL on_off ) 
        /// </summary>
        public static AstServerAuditState New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstServerAuditState(Position.Default, list);
        }
    }
    
    /// <summary>
    /// add_drop_audit_action_group : add_drop  LR_BRACKET  audit_action_group_id  RR_BRACKET
    /// </summary>
    public partial class AstAddDropAuditActionGroup : AstBnfRule
    {
        
        private AstAddDrop _addDrop;
        
        private AstAuditActionGroupId _auditActionGroupId;
        
        private static string _ruleValue = "add_drop  LR_BRACKET  audit_action_group_id  RR_BRACKET";
        
        private static string _ruleName = "add_drop_audit_action_group";
        
        public AstAddDropAuditActionGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstAddDropAuditActionGroup(Position p, AstAddDrop addDrop, AstAuditActionGroupId auditActionGroupId) : 
                base(p)
        {
            this._addDrop = addDrop;
            this._auditActionGroupId = auditActionGroupId;
        }
        
        public AstAddDropAuditActionGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstAuditActionGroupId AuditActionGroupId
        {
            get
            {
                return this._auditActionGroupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAddDropAuditActionGroup(this);
        }
        
        public static AstAddDropAuditActionGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// add_drop_audit_action_group : 
        ///    add_drop ( audit_action_group_id ) 
        /// </summary>
        public static AstAddDropAuditActionGroup New(AstAddDrop addDrop, AstAuditActionGroupId auditActionGroupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(addDrop);
            list.Add(auditActionGroupId);
            return new AstAddDropAuditActionGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_audit_specification_server : FOR  SERVER  AUDIT  audit_id
    /// </summary>
    public partial class AstAlterServerAuditSpecificationServer : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private static string _ruleValue = "FOR  SERVER  AUDIT  audit_id";
        
        private static string _ruleName = "alter_server_audit_specification_server";
        
        public AstAlterServerAuditSpecificationServer(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerAuditSpecificationServer(Position p, AstAuditId auditId) : 
                base(p)
        {
            this._auditId = auditId;
        }
        
        public AstAlterServerAuditSpecificationServer(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerAuditSpecificationServer(this);
        }
        
        public static AstAlterServerAuditSpecificationServer? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_server_audit_specification_server : 
        ///    FOR SERVER AUDIT audit_id 
        /// </summary>
        public static AstAlterServerAuditSpecificationServer New(AstAuditId auditId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            return new AstAlterServerAuditSpecificationServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_server_audit_specification : CREATE  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_server?  server_audit_specification_add_groups?  server_audit_state?
    /// </summary>
    public partial class AstCreateServerAuditSpecification : AstBnfRule
    {
        
        private AstAuditId _auditId;
        
        private AstAlterServerAuditSpecificationServer? _alterServerAuditSpecificationServer;
        
        private AstServerAuditSpecificationAddGroups? _serverAuditSpecificationAddGroups;
        
        private AstServerAuditState? _serverAuditState;
        
        private static string _ruleValue = "CREATE  SERVER  AUDIT  SPECIFICATION  audit_id  alter_server_audit_specification_" +
            "server?  server_audit_specification_add_groups?  server_audit_state?";
        
        private static string _ruleName = "create_server_audit_specification";
        
        public AstCreateServerAuditSpecification(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer?>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditSpecificationAddGroups?>())
                {
                    this._serverAuditSpecificationAddGroups = ((AstServerAuditSpecificationAddGroups?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState?>())
                {
                    this._serverAuditState = ((AstServerAuditState?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerAuditSpecification(Position p, AstAuditId auditId, AstAlterServerAuditSpecificationServer? alterServerAuditSpecificationServer, AstServerAuditSpecificationAddGroups? serverAuditSpecificationAddGroups, AstServerAuditState? serverAuditState) : 
                base(p)
        {
            this._auditId = auditId;
            this._alterServerAuditSpecificationServer = alterServerAuditSpecificationServer;
            this._serverAuditSpecificationAddGroups = serverAuditSpecificationAddGroups;
            this._serverAuditState = serverAuditState;
        }
        
        public AstCreateServerAuditSpecification(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditId>())
                {
                    this._auditId = ((AstAuditId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerAuditSpecificationServer?>())
                {
                    this._alterServerAuditSpecificationServer = ((AstAlterServerAuditSpecificationServer?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditSpecificationAddGroups?>())
                {
                    this._serverAuditSpecificationAddGroups = ((AstServerAuditSpecificationAddGroups?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerAuditState?>())
                {
                    this._serverAuditState = ((AstServerAuditState?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditId AuditId
        {
            get
            {
                return this._auditId;
            }
        }
        
        public virtual AstAlterServerAuditSpecificationServer? AlterServerAuditSpecificationServer
        {
            get
            {
                return this._alterServerAuditSpecificationServer;
            }
        }
        
        public virtual AstServerAuditSpecificationAddGroups? ServerAuditSpecificationAddGroups
        {
            get
            {
                return this._serverAuditSpecificationAddGroups;
            }
        }
        
        public virtual AstServerAuditState? ServerAuditState
        {
            get
            {
                return this._serverAuditState;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerAuditSpecification(this);
        }
        
        public static AstCreateServerAuditSpecification? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_server_audit_specification : 
        ///    CREATE SERVER AUDIT SPECIFICATION audit_id alter_server_audit_specification_server? server_audit_specification_add_groups? server_audit_state? 
        /// </summary>
        public static AstCreateServerAuditSpecification New(AstAuditId auditId, AstAlterServerAuditSpecificationServer? alterServerAuditSpecificationServer, AstServerAuditSpecificationAddGroups? serverAuditSpecificationAddGroups, AstServerAuditState? serverAuditState)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditId);
            list.Add(alterServerAuditSpecificationServer);
            list.Add(serverAuditSpecificationAddGroups);
            list.Add(serverAuditState);
            return new AstCreateServerAuditSpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_audit_specification_add_group : ADD  LR_BRACKET  audit_action_group_id  RR_BRACKET
    /// </summary>
    public partial class AstServerAuditSpecificationAddGroup : AstBnfRule
    {
        
        private AstAuditActionGroupId _auditActionGroupId;
        
        private static string _ruleValue = "ADD  LR_BRACKET  audit_action_group_id  RR_BRACKET";
        
        private static string _ruleName = "server_audit_specification_add_group";
        
        public AstServerAuditSpecificationAddGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstServerAuditSpecificationAddGroup(Position p, AstAuditActionGroupId auditActionGroupId) : 
                base(p)
        {
            this._auditActionGroupId = auditActionGroupId;
        }
        
        public AstServerAuditSpecificationAddGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuditActionGroupId>())
                {
                    this._auditActionGroupId = ((AstAuditActionGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuditActionGroupId AuditActionGroupId
        {
            get
            {
                return this._auditActionGroupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerAuditSpecificationAddGroup(this);
        }
        
        public static AstServerAuditSpecificationAddGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// server_audit_specification_add_group : 
        ///    ADD ( audit_action_group_id ) 
        /// </summary>
        public static AstServerAuditSpecificationAddGroup New(AstAuditActionGroupId auditActionGroupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(auditActionGroupId);
            return new AstServerAuditSpecificationAddGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// process_numanode_set : NUMANODE  EQUAL  decimal_range  decimal_ranges
    /// </summary>
    public partial class AstProcessNumanodeSet : AstBnfRule
    {
        
        private AstDecimalRange _decimalRange;
        
        private AstDecimalRanges _decimalRanges;
        
        private static string _ruleValue = "NUMANODE  EQUAL  decimal_range  decimal_ranges";
        
        private static string _ruleName = "process_numanode_set";
        
        public AstProcessNumanodeSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalRange>())
                {
                    this._decimalRange = ((AstDecimalRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
            }
        }
        
        public AstProcessNumanodeSet(Position p, AstDecimalRange decimalRange, AstDecimalRanges decimalRanges) : 
                base(p)
        {
            this._decimalRange = decimalRange;
            this._decimalRanges = decimalRanges;
        }
        
        public AstProcessNumanodeSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalRange>())
                {
                    this._decimalRange = ((AstDecimalRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalRanges>())
                {
                    this._decimalRanges = ((AstDecimalRanges)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalRange DecimalRange
        {
            get
            {
                return this._decimalRange;
            }
        }
        
        public virtual AstDecimalRanges DecimalRanges
        {
            get
            {
                return this._decimalRanges;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcessNumanodeSet(this);
        }
        
        public static AstProcessNumanodeSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// process_numanode_set : 
        ///    NUMANODE EQUAL decimal_range decimal_ranges 
        /// </summary>
        public static AstProcessNumanodeSet New(AstDecimalRange decimalRange, AstDecimalRanges decimalRanges)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decimalRange);
            list.Add(decimalRanges);
            return new AstProcessNumanodeSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// diagnos_path_set : PATH  EQUAL  string_or_default
    /// </summary>
    public partial class AstDiagnosPathSet : AstBnfRule
    {
        
        private AstStringOrDefault _stringOrDefault;
        
        private static string _ruleValue = "PATH  EQUAL  string_or_default";
        
        private static string _ruleName = "diagnos_path_set";
        
        public AstDiagnosPathSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringOrDefault>())
                {
                    this._stringOrDefault = ((AstStringOrDefault)(enumerator.Current));
                }
            }
        }
        
        public AstDiagnosPathSet(Position p, AstStringOrDefault stringOrDefault) : 
                base(p)
        {
            this._stringOrDefault = stringOrDefault;
        }
        
        public AstDiagnosPathSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringOrDefault>())
                {
                    this._stringOrDefault = ((AstStringOrDefault)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringOrDefault StringOrDefault
        {
            get
            {
                return this._stringOrDefault;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiagnosPathSet(this);
        }
        
        public static AstDiagnosPathSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// diagnos_path_set : 
        ///    PATH EQUAL string_or_default 
        /// </summary>
        public static AstDiagnosPathSet New(AstStringOrDefault stringOrDefault)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringOrDefault);
            return new AstDiagnosPathSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// diagnos_max_size_set : MAX_SIZE  EQUAL  size_value
    /// </summary>
    public partial class AstDiagnosMaxSizeSet : AstBnfRule
    {
        
        private AstSizeValue _sizeValue;
        
        private static string _ruleValue = "MAX_SIZE  EQUAL  size_value";
        
        private static string _ruleName = "diagnos_max_size_set";
        
        public AstDiagnosMaxSizeSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSizeValue>())
                {
                    this._sizeValue = ((AstSizeValue)(enumerator.Current));
                }
            }
        }
        
        public AstDiagnosMaxSizeSet(Position p, AstSizeValue sizeValue) : 
                base(p)
        {
            this._sizeValue = sizeValue;
        }
        
        public AstDiagnosMaxSizeSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSizeValue>())
                {
                    this._sizeValue = ((AstSizeValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSizeValue SizeValue
        {
            get
            {
                return this._sizeValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiagnosMaxSizeSet(this);
        }
        
        public static AstDiagnosMaxSizeSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// diagnos_max_size_set : 
        ///    MAX_SIZE EQUAL size_value 
        /// </summary>
        public static AstDiagnosMaxSizeSet New(AstSizeValue sizeValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(sizeValue);
            return new AstDiagnosMaxSizeSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// diagnos_max_files_set : MAX_FILES  EQUAL  decimal_default
    /// </summary>
    public partial class AstDiagnosMaxFilesSet : AstBnfRule
    {
        
        private AstDecimalDefault _decimalDefault;
        
        private static string _ruleValue = "MAX_FILES  EQUAL  decimal_default";
        
        private static string _ruleName = "diagnos_max_files_set";
        
        public AstDiagnosMaxFilesSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalDefault>())
                {
                    this._decimalDefault = ((AstDecimalDefault)(enumerator.Current));
                }
            }
        }
        
        public AstDiagnosMaxFilesSet(Position p, AstDecimalDefault decimalDefault) : 
                base(p)
        {
            this._decimalDefault = decimalDefault;
        }
        
        public AstDiagnosMaxFilesSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalDefault>())
                {
                    this._decimalDefault = ((AstDecimalDefault)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalDefault DecimalDefault
        {
            get
            {
                return this._decimalDefault;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiagnosMaxFilesSet(this);
        }
        
        public static AstDiagnosMaxFilesSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// diagnos_max_files_set : 
        ///    MAX_FILES EQUAL decimal_default 
        /// </summary>
        public static AstDiagnosMaxFilesSet New(AstDecimalDefault decimalDefault)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decimalDefault);
            return new AstDiagnosMaxFilesSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// audit_maxsize : MAXSIZE  EQUAL  decimal_size_unlimited
    /// </summary>
    public partial class AstAuditMaxsize : AstBnfRule
    {
        
        private AstDecimalSizeUnlimited _decimalSizeUnlimited;
        
        private static string _ruleValue = "MAXSIZE  EQUAL  decimal_size_unlimited";
        
        private static string _ruleName = "audit_maxsize";
        
        public AstAuditMaxsize(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalSizeUnlimited>())
                {
                    this._decimalSizeUnlimited = ((AstDecimalSizeUnlimited)(enumerator.Current));
                }
            }
        }
        
        public AstAuditMaxsize(Position p, AstDecimalSizeUnlimited decimalSizeUnlimited) : 
                base(p)
        {
            this._decimalSizeUnlimited = decimalSizeUnlimited;
        }
        
        public AstAuditMaxsize(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalSizeUnlimited>())
                {
                    this._decimalSizeUnlimited = ((AstDecimalSizeUnlimited)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalSizeUnlimited DecimalSizeUnlimited
        {
            get
            {
                return this._decimalSizeUnlimited;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAuditMaxsize(this);
        }
        
        public static AstAuditMaxsize? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// audit_maxsize : 
        ///    MAXSIZE EQUAL decimal_size_unlimited 
        /// </summary>
        public static AstAuditMaxsize New(AstDecimalSizeUnlimited decimalSizeUnlimited)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decimalSizeUnlimited);
            return new AstAuditMaxsize(Position.Default, list);
        }
    }
    
    /// <summary>
    /// filepath_set : FILEPATH  EQUAL  stringtext
    /// </summary>
    public partial class AstFilepathSet : AstBnfRule
    {
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "FILEPATH  EQUAL  stringtext";
        
        private static string _ruleName = "filepath_set";
        
        public AstFilepathSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstFilepathSet(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstFilepathSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilepathSet(this);
        }
        
        public static AstFilepathSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// filepath_set : 
        ///    FILEPATH EQUAL stringtext 
        /// </summary>
        public static AstFilepathSet New(AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringtext);
            return new AstFilepathSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_rollover_files_set : MAX_ROLLOVER_FILES  EQUAL  decimal_unlimited
    /// </summary>
    public partial class AstMaxRolloverFilesSet : AstBnfRule
    {
        
        private AstDecimalUnlimited _decimalUnlimited;
        
        private static string _ruleValue = "MAX_ROLLOVER_FILES  EQUAL  decimal_unlimited";
        
        private static string _ruleName = "max_rollover_files_set";
        
        public AstMaxRolloverFilesSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalUnlimited>())
                {
                    this._decimalUnlimited = ((AstDecimalUnlimited)(enumerator.Current));
                }
            }
        }
        
        public AstMaxRolloverFilesSet(Position p, AstDecimalUnlimited decimalUnlimited) : 
                base(p)
        {
            this._decimalUnlimited = decimalUnlimited;
        }
        
        public AstMaxRolloverFilesSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimalUnlimited>())
                {
                    this._decimalUnlimited = ((AstDecimalUnlimited)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimalUnlimited DecimalUnlimited
        {
            get
            {
                return this._decimalUnlimited;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxRolloverFilesSet(this);
        }
        
        public static AstMaxRolloverFilesSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// max_rollover_files_set : 
        ///    MAX_ROLLOVER_FILES EQUAL decimal_unlimited 
        /// </summary>
        public static AstMaxRolloverFilesSet New(AstDecimalUnlimited decimalUnlimited)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(decimalUnlimited);
            return new AstMaxRolloverFilesSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// max_files_set : MAX_FILES  EQUAL  decimal
    /// </summary>
    public partial class AstMaxFilesSet : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "MAX_FILES  EQUAL  decimal";
        
        private static string _ruleName = "max_files_set";
        
        public AstMaxFilesSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstMaxFilesSet(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstMaxFilesSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxFilesSet(this);
        }
        
        public static AstMaxFilesSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// max_files_set : 
        ///    MAX_FILES EQUAL decimal 
        /// </summary>
        public static AstMaxFilesSet New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstMaxFilesSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// disk_space_set : RESERVE_DISK_SPACE  EQUAL  on_off
    /// </summary>
    public partial class AstDiskSpaceSet : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "RESERVE_DISK_SPACE  EQUAL  on_off";
        
        private static string _ruleName = "disk_space_set";
        
        public AstDiskSpaceSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDiskSpaceSet(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstDiskSpaceSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiskSpaceSet(this);
        }
        
        public static AstDiskSpaceSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// disk_space_set : 
        ///    RESERVE_DISK_SPACE EQUAL on_off 
        /// </summary>
        public static AstDiskSpaceSet New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstDiskSpaceSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// name_set : NAME  EQUAL  id_or_string
    /// </summary>
    public partial class AstNameSet : AstBnfRule
    {
        
        private AstIdOrString _idOrString;
        
        private static string _ruleValue = "NAME  EQUAL  id_or_string";
        
        private static string _ruleName = "name_set";
        
        public AstNameSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public AstNameSet(Position p, AstIdOrString idOrString) : 
                base(p)
        {
            this._idOrString = idOrString;
        }
        
        public AstNameSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdOrString IdOrString
        {
            get
            {
                return this._idOrString;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNameSet(this);
        }
        
        public static AstNameSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// name_set : 
        ///    NAME EQUAL id_or_string 
        /// </summary>
        public static AstNameSet New(AstIdOrString idOrString)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(idOrString);
            return new AstNameSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// maxsize_set : MAXSIZE  EQUAL  max_file_size_value
    /// </summary>
    public partial class AstMaxsizeSet : AstBnfRule
    {
        
        private AstMaxFileSizeValue _maxFileSizeValue;
        
        private static string _ruleValue = "MAXSIZE  EQUAL  max_file_size_value";
        
        private static string _ruleName = "maxsize_set";
        
        public AstMaxsizeSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxFileSizeValue>())
                {
                    this._maxFileSizeValue = ((AstMaxFileSizeValue)(enumerator.Current));
                }
            }
        }
        
        public AstMaxsizeSet(Position p, AstMaxFileSizeValue maxFileSizeValue) : 
                base(p)
        {
            this._maxFileSizeValue = maxFileSizeValue;
        }
        
        public AstMaxsizeSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMaxFileSizeValue>())
                {
                    this._maxFileSizeValue = ((AstMaxFileSizeValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMaxFileSizeValue MaxFileSizeValue
        {
            get
            {
                return this._maxFileSizeValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaxsizeSet(this);
        }
        
        public static AstMaxsizeSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// maxsize_set : 
        ///    MAXSIZE EQUAL max_file_size_value 
        /// </summary>
        public static AstMaxsizeSet New(AstMaxFileSizeValue maxFileSizeValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(maxFileSizeValue);
            return new AstMaxsizeSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// filegrowth_set : FILEGROWTH  EQUAL  file_size
    /// </summary>
    public partial class AstFilegrowthSet : AstBnfRule
    {
        
        private AstFileSize _fileSize;
        
        private static string _ruleValue = "FILEGROWTH  EQUAL  file_size";
        
        private static string _ruleName = "filegrowth_set";
        
        public AstFilegrowthSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSize>())
                {
                    this._fileSize = ((AstFileSize)(enumerator.Current));
                }
            }
        }
        
        public AstFilegrowthSet(Position p, AstFileSize fileSize) : 
                base(p)
        {
            this._fileSize = fileSize;
        }
        
        public AstFilegrowthSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileSize>())
                {
                    this._fileSize = ((AstFileSize)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileSize FileSize
        {
            get
            {
                return this._fileSize;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFilegrowthSet(this);
        }
        
        public static AstFilegrowthSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// filegrowth_set : 
        ///    FILEGROWTH EQUAL file_size 
        /// </summary>
        public static AstFilegrowthSet New(AstFileSize fileSize)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fileSize);
            return new AstFilegrowthSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_role : ALTER  SERVER  ROLE  server_role_id  (add_drop  MEMBER  server_id | alter_server_role_new_name)
    /// </summary>
    public partial class AstAlterServerRole : AstBnfRule
    {
        
        private AstServerRoleId _serverRoleId;
        
        private AstAddDrop _addDrop;
        
        private AstServerId _serverId;
        
        private AstAlterServerRoleNewName _alterServerRoleNewName;
        
        private static string _ruleValue = "ALTER  SERVER  ROLE  server_role_id  (add_drop  MEMBER  server_id | alter_server_" +
            "role_new_name)";
        
        private static string _ruleName = "alter_server_role";
        
        public AstAlterServerRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerRoleNewName>())
                {
                    this._alterServerRoleNewName = ((AstAlterServerRoleNewName)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRole(Position p, AstServerRoleId serverRoleId, AstAddDrop addDrop, AstServerId serverId, AstAlterServerRoleNewName alterServerRoleNewName) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
            this._addDrop = addDrop;
            this._serverId = serverId;
            this._alterServerRoleNewName = alterServerRoleNewName;
        }
        
        public AstAlterServerRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServerRoleNewName>())
                {
                    this._alterServerRoleNewName = ((AstAlterServerRoleNewName)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstAlterServerRoleNewName AlterServerRoleNewName
        {
            get
            {
                return this._alterServerRoleNewName;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRole(this);
        }
        
        public static AstAlterServerRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_server_role : 
        ///    ALTER SERVER ROLE server_role_id add_drop MEMBER server_id 
        /// </summary>
        public static AstAlterServerRole New(AstServerRoleId serverRoleId, AstAddDrop addDrop, AstServerId serverId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverRoleId);
            list.Add(addDrop);
            list.Add(serverId);
            return new AstAlterServerRole(Position.Default, list);
        }
        
        /// <summary>
        /// alter_server_role : 
        ///    ALTER SERVER ROLE server_role_id alter_server_role_new_name 
        /// </summary>
        public static AstAlterServerRole New(AstServerRoleId serverRoleId, AstAlterServerRoleNewName alterServerRoleNewName)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverRoleId);
            list.Add(alterServerRoleNewName);
            return new AstAlterServerRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_role_new_name : WITH  NAME  EQUAL  server_role_id
    /// </summary>
    public partial class AstAlterServerRoleNewName : AstBnfRule
    {
        
        private AstServerRoleId _serverRoleId;
        
        private static string _ruleValue = "WITH  NAME  EQUAL  server_role_id";
        
        private static string _ruleName = "alter_server_role_new_name";
        
        public AstAlterServerRoleNewName(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRoleNewName(Position p, AstServerRoleId serverRoleId) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
        }
        
        public AstAlterServerRoleNewName(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRoleNewName(this);
        }
        
        public static AstAlterServerRoleNewName? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_server_role_new_name : 
        ///    WITH NAME EQUAL server_role_id 
        /// </summary>
        public static AstAlterServerRoleNewName New(AstServerRoleId serverRoleId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverRoleId);
            return new AstAlterServerRoleNewName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_server_role : CREATE  SERVER  ROLE  server_role_id  (AUTHORIZATION  server_id)?
    /// </summary>
    public partial class AstCreateServerRole : AstBnfRule
    {
        
        private AstServerRoleId _serverRoleId;
        
        private AstServerId _serverId;
        
        private static string _ruleValue = "CREATE  SERVER  ROLE  server_role_id  (AUTHORIZATION  server_id)?";
        
        private static string _ruleName = "create_server_role";
        
        public AstCreateServerRole(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateServerRole(Position p, AstServerRoleId serverRoleId, AstServerId serverId) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
            this._serverId = serverId;
        }
        
        public AstCreateServerRole(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateServerRole(this);
        }
        
        public static AstCreateServerRole? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_server_role : 
        ///    CREATE SERVER ROLE server_role_id AUTHORIZATION server_id 
        /// </summary>
        public static AstCreateServerRole New(AstServerRoleId serverRoleId, AstServerId serverId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverRoleId);
            list.Add(serverId);
            return new AstCreateServerRole(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_server_role_pdw : ALTER  SERVER  ROLE  server_role_id  add_drop  MEMBER  login_id
    /// </summary>
    public partial class AstAlterServerRolePdw : AstBnfRule
    {
        
        private AstServerRoleId _serverRoleId;
        
        private AstAddDrop _addDrop;
        
        private AstLoginId _loginId;
        
        private static string _ruleValue = "ALTER  SERVER  ROLE  server_role_id  add_drop  MEMBER  login_id";
        
        private static string _ruleName = "alter_server_role_pdw";
        
        public AstAlterServerRolePdw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServerRolePdw(Position p, AstServerRoleId serverRoleId, AstAddDrop addDrop, AstLoginId loginId) : 
                base(p)
        {
            this._serverRoleId = serverRoleId;
            this._addDrop = addDrop;
            this._loginId = loginId;
        }
        
        public AstAlterServerRolePdw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerRoleId>())
                {
                    this._serverRoleId = ((AstServerRoleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerRoleId ServerRoleId
        {
            get
            {
                return this._serverRoleId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServerRolePdw(this);
        }
        
        public static AstAlterServerRolePdw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_server_role_pdw : 
        ///    ALTER SERVER ROLE server_role_id add_drop MEMBER login_id 
        /// </summary>
        public static AstAlterServerRolePdw New(AstServerRoleId serverRoleId, AstAddDrop addDrop, AstLoginId loginId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverRoleId);
            list.Add(addDrop);
            list.Add(loginId);
            return new AstAlterServerRolePdw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_service : ALTER  SERVICE  service_id  (ON  QUEUE  schema_queue_ref)?  alter_service_contracts?
    /// </summary>
    public partial class AstAlterService : AstBnfRule
    {
        
        private AstServiceId _serviceId;
        
        private AstSchemaQueueRef _schemaQueueRef;
        
        private AstAlterServiceContracts? _alterServiceContracts;
        
        private static string _ruleValue = "ALTER  SERVICE  service_id  (ON  QUEUE  schema_queue_ref)?  alter_service_contrac" +
            "ts?";
        
        private static string _ruleName = "alter_service";
        
        public AstAlterService(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServiceContracts?>())
                {
                    this._alterServiceContracts = ((AstAlterServiceContracts?)(enumerator.Current));
                }
            }
        }
        
        public AstAlterService(Position p, AstServiceId serviceId, AstSchemaQueueRef schemaQueueRef, AstAlterServiceContracts? alterServiceContracts) : 
                base(p)
        {
            this._serviceId = serviceId;
            this._schemaQueueRef = schemaQueueRef;
            this._alterServiceContracts = alterServiceContracts;
        }
        
        public AstAlterService(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterServiceContracts?>())
                {
                    this._alterServiceContracts = ((AstAlterServiceContracts?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public virtual AstSchemaQueueRef SchemaQueueRef
        {
            get
            {
                return this._schemaQueueRef;
            }
        }
        
        public virtual AstAlterServiceContracts? AlterServiceContracts
        {
            get
            {
                return this._alterServiceContracts;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterService(this);
        }
        
        public static AstAlterService? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_service : 
        ///    ALTER SERVICE service_id ON QUEUE schema_queue_ref alter_service_contracts? 
        /// </summary>
        public static AstAlterService New(AstServiceId serviceId, AstSchemaQueueRef schemaQueueRef, AstAlterServiceContracts? alterServiceContracts)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serviceId);
            list.Add(schemaQueueRef);
            list.Add(alterServiceContracts);
            return new AstAlterService(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_service_contract : add_drop  contract_id
    /// </summary>
    public partial class AstAlterServiceContract : AstBnfRule
    {
        
        private AstAddDrop _addDrop;
        
        private AstContractId _contractId;
        
        private static string _ruleValue = "add_drop  contract_id";
        
        private static string _ruleName = "alter_service_contract";
        
        public AstAlterServiceContract(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractId>())
                {
                    this._contractId = ((AstContractId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServiceContract(Position p, AstAddDrop addDrop, AstContractId contractId) : 
                base(p)
        {
            this._addDrop = addDrop;
            this._contractId = contractId;
        }
        
        public AstAlterServiceContract(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractId>())
                {
                    this._contractId = ((AstContractId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstContractId ContractId
        {
            get
            {
                return this._contractId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceContract(this);
        }
        
        public static AstAlterServiceContract? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_service_contract : 
        ///    add_drop contract_id 
        /// </summary>
        public static AstAlterServiceContract New(AstAddDrop addDrop, AstContractId contractId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(addDrop);
            list.Add(contractId);
            return new AstAlterServiceContract(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_service : CREATE  SERVICE  service_id  (AUTHORIZATION  owner_id)?  ON  QUEUE  schema_queue_ref  (LR_BRACKET  contract_refs  RR_BRACKET)?
    /// </summary>
    public partial class AstCreateService : AstBnfRule
    {
        
        private AstServiceId _serviceId;
        
        private AstOwnerId _ownerId;
        
        private AstSchemaQueueRef _schemaQueueRef;
        
        private AstContractRefs _contractRefs;
        
        private static string _ruleValue = "CREATE  SERVICE  service_id  (AUTHORIZATION  owner_id)?  ON  QUEUE  schema_queue_" +
            "ref  (LR_BRACKET  contract_refs  RR_BRACKET)?";
        
        private static string _ruleName = "create_service";
        
        public AstCreateService(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractRefs>())
                {
                    this._contractRefs = ((AstContractRefs)(enumerator.Current));
                }
            }
        }
        
        public AstCreateService(Position p, AstServiceId serviceId, AstOwnerId ownerId, AstSchemaQueueRef schemaQueueRef, AstContractRefs contractRefs) : 
                base(p)
        {
            this._serviceId = serviceId;
            this._ownerId = ownerId;
            this._schemaQueueRef = schemaQueueRef;
            this._contractRefs = contractRefs;
        }
        
        public AstCreateService(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceId>())
                {
                    this._serviceId = ((AstServiceId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaQueueRef>())
                {
                    this._schemaQueueRef = ((AstSchemaQueueRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractRefs>())
                {
                    this._contractRefs = ((AstContractRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceId ServiceId
        {
            get
            {
                return this._serviceId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstSchemaQueueRef SchemaQueueRef
        {
            get
            {
                return this._schemaQueueRef;
            }
        }
        
        public virtual AstContractRefs ContractRefs
        {
            get
            {
                return this._contractRefs;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateService(this);
        }
        
        public static AstCreateService? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_service : 
        ///    CREATE SERVICE service_id AUTHORIZATION owner_id ON QUEUE schema_queue_ref ( contract_refs ) 
        /// </summary>
        public static AstCreateService New(AstServiceId serviceId, AstOwnerId ownerId, AstSchemaQueueRef schemaQueueRef, AstContractRefs contractRefs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serviceId);
            list.Add(ownerId);
            list.Add(schemaQueueRef);
            list.Add(contractRefs);
            return new AstCreateService(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_service_master_key : ALTER  SERVICE  MASTER  KEY  service_master_key_items
    /// </summary>
    public partial class AstAlterServiceMasterKey : AstBnfRule
    {
        
        private AstServiceMasterKeyItems _serviceMasterKeyItems;
        
        private static string _ruleValue = "ALTER  SERVICE  MASTER  KEY  service_master_key_items";
        
        private static string _ruleName = "alter_service_master_key";
        
        public AstAlterServiceMasterKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceMasterKeyItems>())
                {
                    this._serviceMasterKeyItems = ((AstServiceMasterKeyItems)(enumerator.Current));
                }
            }
        }
        
        public AstAlterServiceMasterKey(Position p, AstServiceMasterKeyItems serviceMasterKeyItems) : 
                base(p)
        {
            this._serviceMasterKeyItems = serviceMasterKeyItems;
        }
        
        public AstAlterServiceMasterKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServiceMasterKeyItems>())
                {
                    this._serviceMasterKeyItems = ((AstServiceMasterKeyItems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServiceMasterKeyItems ServiceMasterKeyItems
        {
            get
            {
                return this._serviceMasterKeyItems;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterServiceMasterKey(this);
        }
        
        public static AstAlterServiceMasterKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_service_master_key : 
        ///    ALTER SERVICE MASTER KEY service_master_key_items 
        /// </summary>
        public static AstAlterServiceMasterKey New(AstServiceMasterKeyItems serviceMasterKeyItems)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serviceMasterKeyItems);
            return new AstAlterServiceMasterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_symmetric_key : ALTER  SYMMETRIC  KEY  symmetric_key_id  (add_drop  ENCRYPTION  BY  (CERTIFICATE  certificate_id | password_setting | SYMMETRIC  KEY  newkey = symmetric_key_id | ASYMMETRIC  KEY  asym_key_id))
    /// </summary>
    public partial class AstAlterSymmetricKey : AstBnfRule
    {
        
        private AstSymmetricKeyId _symmetricKeyId;
        
        private AstAddDrop _addDrop;
        
        private AstCertificateId _certificateId;
        
        private AstPasswordSetting _passwordSetting;
        
        private AstSymmetricKeyId _newkey;
        
        private AstAsymKeyId _asymKeyId;
        
        private static string _ruleValue = "ALTER  SYMMETRIC  KEY  symmetric_key_id  (add_drop  ENCRYPTION  BY  (CERTIFICATE " +
            " certificate_id | password_setting | SYMMETRIC  KEY  newkey = symmetric_key_id |" +
            " ASYMMETRIC  KEY  asym_key_id))";
        
        private static string _ruleName = "alter_symmetric_key";
        
        public AstAlterSymmetricKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._newkey = ((AstSymmetricKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public AstAlterSymmetricKey(Position p, AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstCertificateId certificateId, AstPasswordSetting passwordSetting, AstSymmetricKeyId newkey, AstAsymKeyId asymKeyId) : 
                base(p)
        {
            this._symmetricKeyId = symmetricKeyId;
            this._addDrop = addDrop;
            this._certificateId = certificateId;
            this._passwordSetting = passwordSetting;
            this._newkey = newkey;
            this._asymKeyId = asymKeyId;
        }
        
        public AstAlterSymmetricKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._symmetricKeyId = ((AstSymmetricKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPasswordSetting>())
                {
                    this._passwordSetting = ((AstPasswordSetting)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSymmetricKeyId>())
                {
                    this._newkey = ((AstSymmetricKeyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsymKeyId>())
                {
                    this._asymKeyId = ((AstAsymKeyId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSymmetricKeyId SymmetricKeyId
        {
            get
            {
                return this._symmetricKeyId;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstPasswordSetting PasswordSetting
        {
            get
            {
                return this._passwordSetting;
            }
        }
        
        public virtual AstSymmetricKeyId Newkey
        {
            get
            {
                return this._newkey;
            }
        }
        
        public virtual AstAsymKeyId AsymKeyId
        {
            get
            {
                return this._asymKeyId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterSymmetricKey(this);
        }
        
        public static AstAlterSymmetricKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY CERTIFICATE certificate_id 
        /// </summary>
        public static AstAlterSymmetricKey New(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstCertificateId certificateId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(certificateId);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY password_setting 
        /// </summary>
        public static AstAlterSymmetricKey New(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstPasswordSetting passwordSetting)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(passwordSetting);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY SYMMETRIC KEY newkey=symmetric_key_id 
        /// </summary>
        public static AstAlterSymmetricKey New(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstSymmetricKeyId newkey)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(newkey);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
        
        /// <summary>
        /// alter_symmetric_key : 
        ///    ALTER SYMMETRIC KEY symmetric_key_id add_drop ENCRYPTION BY ASYMMETRIC KEY asym_key_id 
        /// </summary>
        public static AstAlterSymmetricKey New(AstSymmetricKeyId symmetricKeyId, AstAddDrop addDrop, AstAsymKeyId asymKeyId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(symmetricKeyId);
            list.Add(addDrop);
            list.Add(asymKeyId);
            return new AstAlterSymmetricKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_synonym : CREATE  SYNONYM  schema_synonym_ref  FOR  server_database_schema_object_ref
    /// </summary>
    public partial class AstCreateSynonym : AstBnfRule
    {
        
        private AstSchemaSynonymRef _schemaSynonymRef;
        
        private AstServerDatabaseSchemaObjectRef _serverDatabaseSchemaObjectRef;
        
        private static string _ruleValue = "CREATE  SYNONYM  schema_synonym_ref  FOR  server_database_schema_object_ref";
        
        private static string _ruleName = "create_synonym";
        
        public AstCreateSynonym(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerDatabaseSchemaObjectRef>())
                {
                    this._serverDatabaseSchemaObjectRef = ((AstServerDatabaseSchemaObjectRef)(enumerator.Current));
                }
            }
        }
        
        public AstCreateSynonym(Position p, AstSchemaSynonymRef schemaSynonymRef, AstServerDatabaseSchemaObjectRef serverDatabaseSchemaObjectRef) : 
                base(p)
        {
            this._schemaSynonymRef = schemaSynonymRef;
            this._serverDatabaseSchemaObjectRef = serverDatabaseSchemaObjectRef;
        }
        
        public AstCreateSynonym(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSynonymRef>())
                {
                    this._schemaSynonymRef = ((AstSchemaSynonymRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServerDatabaseSchemaObjectRef>())
                {
                    this._serverDatabaseSchemaObjectRef = ((AstServerDatabaseSchemaObjectRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSynonymRef SchemaSynonymRef
        {
            get
            {
                return this._schemaSynonymRef;
            }
        }
        
        public virtual AstServerDatabaseSchemaObjectRef ServerDatabaseSchemaObjectRef
        {
            get
            {
                return this._serverDatabaseSchemaObjectRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateSynonym(this);
        }
        
        public static AstCreateSynonym? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_synonym : 
        ///    CREATE SYNONYM schema_synonym_ref FOR server_database_schema_object_ref 
        /// </summary>
        public static AstCreateSynonym New(AstSchemaSynonymRef schemaSynonymRef, AstServerDatabaseSchemaObjectRef serverDatabaseSchemaObjectRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSynonymRef);
            list.Add(serverDatabaseSchemaObjectRef);
            return new AstCreateSynonym(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_user : ALTER  USER  user_id  WITH  alter_user_items
    /// </summary>
    public partial class AstAlterUser : AstBnfRule
    {
        
        private AstUserId _userId;
        
        private AstAlterUserItems _alterUserItems;
        
        private static string _ruleValue = "ALTER  USER  user_id  WITH  alter_user_items";
        
        private static string _ruleName = "alter_user";
        
        public AstAlterUser(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserItems>())
                {
                    this._alterUserItems = ((AstAlterUserItems)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUser(Position p, AstUserId userId, AstAlterUserItems alterUserItems) : 
                base(p)
        {
            this._userId = userId;
            this._alterUserItems = alterUserItems;
        }
        
        public AstAlterUser(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserItems>())
                {
                    this._alterUserItems = ((AstAlterUserItems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstAlterUserItems AlterUserItems
        {
            get
            {
                return this._alterUserItems;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUser(this);
        }
        
        public static AstAlterUser? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_user : 
        ///    ALTER USER user_id WITH alter_user_items 
        /// </summary>
        public static AstAlterUser New(AstUserId userId, AstAlterUserItems alterUserItems)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(userId);
            list.Add(alterUserItems);
            return new AstAlterUser(Position.Default, list);
        }
    }
    
    /// <summary>
    /// old_pwd_strategies : old_pwd  pwd_strategies?
    /// </summary>
    public partial class AstOldPwdStrategies : AstBnfRule
    {
        
        private AstOldPwd _oldPwd;
        
        private AstPwdStrategies? _pwdStrategies;
        
        private static string _ruleValue = "old_pwd  pwd_strategies?";
        
        private static string _ruleName = "old_pwd_strategies";
        
        public AstOldPwdStrategies(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOldPwd>())
                {
                    this._oldPwd = ((AstOldPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies?>())
                {
                    this._pwdStrategies = ((AstPwdStrategies?)(enumerator.Current));
                }
            }
        }
        
        public AstOldPwdStrategies(Position p, AstOldPwd oldPwd, AstPwdStrategies? pwdStrategies) : 
                base(p)
        {
            this._oldPwd = oldPwd;
            this._pwdStrategies = pwdStrategies;
        }
        
        public AstOldPwdStrategies(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOldPwd>())
                {
                    this._oldPwd = ((AstOldPwd)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies?>())
                {
                    this._pwdStrategies = ((AstPwdStrategies?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOldPwd OldPwd
        {
            get
            {
                return this._oldPwd;
            }
        }
        
        public virtual AstPwdStrategies? PwdStrategies
        {
            get
            {
                return this._pwdStrategies;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOldPwdStrategies(this);
        }
        
        public static AstOldPwdStrategies? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// old_pwd_strategies : 
        ///    old_pwd pwd_strategies? 
        /// </summary>
        public static AstOldPwdStrategies New(AstOldPwd oldPwd, AstPwdStrategies? pwdStrategies)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(oldPwd);
            list.Add(pwdStrategies);
            return new AstOldPwdStrategies(Position.Default, list);
        }
    }
    
    /// <summary>
    /// pwd_settings : PASSWORD  EQUAL  pwd_value  pwd_strategies?
    /// </summary>
    public partial class AstPwdSettings : AstBnfRule
    {
        
        private AstPwdValue _pwdValue;
        
        private AstPwdStrategies? _pwdStrategies;
        
        private static string _ruleValue = "PASSWORD  EQUAL  pwd_value  pwd_strategies?";
        
        private static string _ruleName = "pwd_settings";
        
        public AstPwdSettings(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwdValue>())
                {
                    this._pwdValue = ((AstPwdValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies?>())
                {
                    this._pwdStrategies = ((AstPwdStrategies?)(enumerator.Current));
                }
            }
        }
        
        public AstPwdSettings(Position p, AstPwdValue pwdValue, AstPwdStrategies? pwdStrategies) : 
                base(p)
        {
            this._pwdValue = pwdValue;
            this._pwdStrategies = pwdStrategies;
        }
        
        public AstPwdSettings(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwdValue>())
                {
                    this._pwdValue = ((AstPwdValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPwdStrategies?>())
                {
                    this._pwdStrategies = ((AstPwdStrategies?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPwdValue PwdValue
        {
            get
            {
                return this._pwdValue;
            }
        }
        
        public virtual AstPwdStrategies? PwdStrategies
        {
            get
            {
                return this._pwdStrategies;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPwdSettings(this);
        }
        
        public static AstPwdSettings? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// pwd_settings : 
        ///    PASSWORD EQUAL pwd_value pwd_strategies? 
        /// </summary>
        public static AstPwdSettings New(AstPwdValue pwdValue, AstPwdStrategies? pwdStrategies)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(pwdValue);
            list.Add(pwdStrategies);
            return new AstPwdSettings(Position.Default, list);
        }
    }
    
    /// <summary>
    /// password_setting : PASSWORD  EQUAL  pwd
    /// </summary>
    public partial class AstPasswordSetting : AstBnfRule
    {
        
        private AstPwd _pwd;
        
        private static string _ruleValue = "PASSWORD  EQUAL  pwd";
        
        private static string _ruleName = "password_setting";
        
        public AstPasswordSetting(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwd>())
                {
                    this._pwd = ((AstPwd)(enumerator.Current));
                }
            }
        }
        
        public AstPasswordSetting(Position p, AstPwd pwd) : 
                base(p)
        {
            this._pwd = pwd;
        }
        
        public AstPasswordSetting(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwd>())
                {
                    this._pwd = ((AstPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPwd Pwd
        {
            get
            {
                return this._pwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPasswordSetting(this);
        }
        
        public static AstPasswordSetting? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// password_setting : 
        ///    PASSWORD EQUAL pwd 
        /// </summary>
        public static AstPasswordSetting New(AstPwd pwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(pwd);
            return new AstPasswordSetting(Position.Default, list);
        }
    }
    
    /// <summary>
    /// new_password_set : NEW_PASSWORD  EQUAL  pwd
    /// </summary>
    public partial class AstNewPasswordSet : AstBnfRule
    {
        
        private AstPwd _pwd;
        
        private static string _ruleValue = "NEW_PASSWORD  EQUAL  pwd";
        
        private static string _ruleName = "new_password_set";
        
        public AstNewPasswordSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwd>())
                {
                    this._pwd = ((AstPwd)(enumerator.Current));
                }
            }
        }
        
        public AstNewPasswordSet(Position p, AstPwd pwd) : 
                base(p)
        {
            this._pwd = pwd;
        }
        
        public AstNewPasswordSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwd>())
                {
                    this._pwd = ((AstPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPwd Pwd
        {
            get
            {
                return this._pwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNewPasswordSet(this);
        }
        
        public static AstNewPasswordSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// new_password_set : 
        ///    NEW_PASSWORD EQUAL pwd 
        /// </summary>
        public static AstNewPasswordSet New(AstPwd pwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(pwd);
            return new AstNewPasswordSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// old_pwd : OLD_PASSWORD  EQUAL  pwd
    /// </summary>
    public partial class AstOldPwd : AstBnfRule
    {
        
        private AstPwd _pwd;
        
        private static string _ruleValue = "OLD_PASSWORD  EQUAL  pwd";
        
        private static string _ruleName = "old_pwd";
        
        public AstOldPwd(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwd>())
                {
                    this._pwd = ((AstPwd)(enumerator.Current));
                }
            }
        }
        
        public AstOldPwd(Position p, AstPwd pwd) : 
                base(p)
        {
            this._pwd = pwd;
        }
        
        public AstOldPwd(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPwd>())
                {
                    this._pwd = ((AstPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPwd Pwd
        {
            get
            {
                return this._pwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOldPwd(this);
        }
        
        public static AstOldPwd? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// old_pwd : 
        ///    OLD_PASSWORD EQUAL pwd 
        /// </summary>
        public static AstOldPwd New(AstPwd pwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(pwd);
            return new AstOldPwd(Position.Default, list);
        }
    }
    
    /// <summary>
    /// default_schema_set : DEFAULT_SCHEMA  EQUAL  schema_identifier
    /// </summary>
    public partial class AstDefaultSchemaSet : AstBnfRule
    {
        
        private AstSchemaIdentifier _schemaIdentifier;
        
        private static string _ruleValue = "DEFAULT_SCHEMA  EQUAL  schema_identifier";
        
        private static string _ruleName = "default_schema_set";
        
        public AstDefaultSchemaSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
            }
        }
        
        public AstDefaultSchemaSet(Position p, AstSchemaIdentifier schemaIdentifier) : 
                base(p)
        {
            this._schemaIdentifier = schemaIdentifier;
        }
        
        public AstDefaultSchemaSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaIdentifier>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaIdentifier SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultSchemaSet(this);
        }
        
        public static AstDefaultSchemaSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// default_schema_set : 
        ///    DEFAULT_SCHEMA EQUAL schema_identifier 
        /// </summary>
        public static AstDefaultSchemaSet New(AstSchemaIdentifier schemaIdentifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaIdentifier);
            return new AstDefaultSchemaSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_user_azure_sql : ALTER  USER  user_id  WITH  alter_user_azure_sql_infos
    /// </summary>
    public partial class AstAlterUserAzureSql : AstBnfRule
    {
        
        private AstUserId _userId;
        
        private AstAlterUserAzureSqlInfos _alterUserAzureSqlInfos;
        
        private static string _ruleValue = "ALTER  USER  user_id  WITH  alter_user_azure_sql_infos";
        
        private static string _ruleName = "alter_user_azure_sql";
        
        public AstAlterUserAzureSql(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserAzureSqlInfos>())
                {
                    this._alterUserAzureSqlInfos = ((AstAlterUserAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterUserAzureSql(Position p, AstUserId userId, AstAlterUserAzureSqlInfos alterUserAzureSqlInfos) : 
                base(p)
        {
            this._userId = userId;
            this._alterUserAzureSqlInfos = alterUserAzureSqlInfos;
        }
        
        public AstAlterUserAzureSql(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterUserAzureSqlInfos>())
                {
                    this._alterUserAzureSqlInfos = ((AstAlterUserAzureSqlInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstAlterUserAzureSqlInfos AlterUserAzureSqlInfos
        {
            get
            {
                return this._alterUserAzureSqlInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterUserAzureSql(this);
        }
        
        public static AstAlterUserAzureSql? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_user_azure_sql : 
        ///    ALTER USER user_id WITH alter_user_azure_sql_infos 
        /// </summary>
        public static AstAlterUserAzureSql New(AstUserId userId, AstAlterUserAzureSqlInfos alterUserAzureSqlInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(userId);
            list.Add(alterUserAzureSqlInfos);
            return new AstAlterUserAzureSql(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_workload_group : ALTER  WORKLOAD  GROUP  workload_group_name  workload_option?  alter_workload_group_using?
    /// </summary>
    public partial class AstAlterWorkloadGroup : AstBnfRule
    {
        
        private AstWorkloadGroupName _workloadGroupName;
        
        private AstWorkloadOption? _workloadOption;
        
        private AstAlterWorkloadGroupUsing? _alterWorkloadGroupUsing;
        
        private static string _ruleValue = "ALTER  WORKLOAD  GROUP  workload_group_name  workload_option?  alter_workload_gro" +
            "up_using?";
        
        private static string _ruleName = "alter_workload_group";
        
        public AstAlterWorkloadGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupName>())
                {
                    this._workloadGroupName = ((AstWorkloadGroupName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadOption?>())
                {
                    this._workloadOption = ((AstWorkloadOption?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterWorkloadGroupUsing?>())
                {
                    this._alterWorkloadGroupUsing = ((AstAlterWorkloadGroupUsing?)(enumerator.Current));
                }
            }
        }
        
        public AstAlterWorkloadGroup(Position p, AstWorkloadGroupName workloadGroupName, AstWorkloadOption? workloadOption, AstAlterWorkloadGroupUsing? alterWorkloadGroupUsing) : 
                base(p)
        {
            this._workloadGroupName = workloadGroupName;
            this._workloadOption = workloadOption;
            this._alterWorkloadGroupUsing = alterWorkloadGroupUsing;
        }
        
        public AstAlterWorkloadGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupName>())
                {
                    this._workloadGroupName = ((AstWorkloadGroupName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadOption?>())
                {
                    this._workloadOption = ((AstWorkloadOption?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterWorkloadGroupUsing?>())
                {
                    this._alterWorkloadGroupUsing = ((AstAlterWorkloadGroupUsing?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupName WorkloadGroupName
        {
            get
            {
                return this._workloadGroupName;
            }
        }
        
        public virtual AstWorkloadOption? WorkloadOption
        {
            get
            {
                return this._workloadOption;
            }
        }
        
        public virtual AstAlterWorkloadGroupUsing? AlterWorkloadGroupUsing
        {
            get
            {
                return this._alterWorkloadGroupUsing;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterWorkloadGroup(this);
        }
        
        public static AstAlterWorkloadGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_workload_group : 
        ///    ALTER WORKLOAD GROUP workload_group_name workload_option? alter_workload_group_using? 
        /// </summary>
        public static AstAlterWorkloadGroup New(AstWorkloadGroupName workloadGroupName, AstWorkloadOption? workloadOption, AstAlterWorkloadGroupUsing? alterWorkloadGroupUsing)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(workloadGroupName);
            list.Add(workloadOption);
            list.Add(alterWorkloadGroupUsing);
            return new AstAlterWorkloadGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// workload_option : WITH  LR_BRACKET  workload_option_item  RR_BRACKET
    /// </summary>
    public partial class AstWorkloadOption : AstBnfRule
    {
        
        private AstWorkloadOptionItem _workloadOptionItem;
        
        private static string _ruleValue = "WITH  LR_BRACKET  workload_option_item  RR_BRACKET";
        
        private static string _ruleName = "workload_option";
        
        public AstWorkloadOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadOptionItem>())
                {
                    this._workloadOptionItem = ((AstWorkloadOptionItem)(enumerator.Current));
                }
            }
        }
        
        public AstWorkloadOption(Position p, AstWorkloadOptionItem workloadOptionItem) : 
                base(p)
        {
            this._workloadOptionItem = workloadOptionItem;
        }
        
        public AstWorkloadOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadOptionItem>())
                {
                    this._workloadOptionItem = ((AstWorkloadOptionItem)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadOptionItem WorkloadOptionItem
        {
            get
            {
                return this._workloadOptionItem;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWorkloadOption(this);
        }
        
        public static AstWorkloadOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// workload_option : 
        ///    WITH ( workload_option_item ) 
        /// </summary>
        public static AstWorkloadOption New(AstWorkloadOptionItem workloadOptionItem)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(workloadOptionItem);
            return new AstWorkloadOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_workload_group : CREATE  WORKLOAD  GROUP  workload_group_group_id  workload_option?  (USING  workload_group_id_or_defaults)?
    /// </summary>
    public partial class AstCreateWorkloadGroup : AstBnfRule
    {
        
        private AstWorkloadGroupGroupId _workloadGroupGroupId;
        
        private AstWorkloadOption? _workloadOption;
        
        private AstWorkloadGroupIdOrDefaults _workloadGroupIdOrDefaults;
        
        private static string _ruleValue = "CREATE  WORKLOAD  GROUP  workload_group_group_id  workload_option?  (USING  workl" +
            "oad_group_id_or_defaults)?";
        
        private static string _ruleName = "create_workload_group";
        
        public AstCreateWorkloadGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadOption?>())
                {
                    this._workloadOption = ((AstWorkloadOption?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadGroupIdOrDefaults>())
                {
                    this._workloadGroupIdOrDefaults = ((AstWorkloadGroupIdOrDefaults)(enumerator.Current));
                }
            }
        }
        
        public AstCreateWorkloadGroup(Position p, AstWorkloadGroupGroupId workloadGroupGroupId, AstWorkloadOption? workloadOption, AstWorkloadGroupIdOrDefaults workloadGroupIdOrDefaults) : 
                base(p)
        {
            this._workloadGroupGroupId = workloadGroupGroupId;
            this._workloadOption = workloadOption;
            this._workloadGroupIdOrDefaults = workloadGroupIdOrDefaults;
        }
        
        public AstCreateWorkloadGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWorkloadGroupGroupId>())
                {
                    this._workloadGroupGroupId = ((AstWorkloadGroupGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadOption?>())
                {
                    this._workloadOption = ((AstWorkloadOption?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWorkloadGroupIdOrDefaults>())
                {
                    this._workloadGroupIdOrDefaults = ((AstWorkloadGroupIdOrDefaults)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWorkloadGroupGroupId WorkloadGroupGroupId
        {
            get
            {
                return this._workloadGroupGroupId;
            }
        }
        
        public virtual AstWorkloadOption? WorkloadOption
        {
            get
            {
                return this._workloadOption;
            }
        }
        
        public virtual AstWorkloadGroupIdOrDefaults WorkloadGroupIdOrDefaults
        {
            get
            {
                return this._workloadGroupIdOrDefaults;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateWorkloadGroup(this);
        }
        
        public static AstCreateWorkloadGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_workload_group : 
        ///    CREATE WORKLOAD GROUP workload_group_group_id workload_option? USING workload_group_id_or_defaults 
        /// </summary>
        public static AstCreateWorkloadGroup New(AstWorkloadGroupGroupId workloadGroupGroupId, AstWorkloadOption? workloadOption, AstWorkloadGroupIdOrDefaults workloadGroupIdOrDefaults)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(workloadGroupGroupId);
            list.Add(workloadOption);
            list.Add(workloadGroupIdOrDefaults);
            return new AstCreateWorkloadGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_xml_schema_collection : CREATE  XML  SCHEMA  COLLECTION  schema_sql_identifier_id  AS  string_id2
    /// </summary>
    public partial class AstCreateXmlSchemaCollection : AstBnfRule
    {
        
        private AstSchemaSqlIdentifierId _schemaSqlIdentifierId;
        
        private AstStringId2 _stringId2;
        
        private static string _ruleValue = "CREATE  XML  SCHEMA  COLLECTION  schema_sql_identifier_id  AS  string_id2";
        
        private static string _ruleName = "create_xml_schema_collection";
        
        public AstCreateXmlSchemaCollection(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId2>())
                {
                    this._stringId2 = ((AstStringId2)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlSchemaCollection(Position p, AstSchemaSqlIdentifierId schemaSqlIdentifierId, AstStringId2 stringId2) : 
                base(p)
        {
            this._schemaSqlIdentifierId = schemaSqlIdentifierId;
            this._stringId2 = stringId2;
        }
        
        public AstCreateXmlSchemaCollection(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaSqlIdentifierId>())
                {
                    this._schemaSqlIdentifierId = ((AstSchemaSqlIdentifierId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId2>())
                {
                    this._stringId2 = ((AstStringId2)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaSqlIdentifierId SchemaSqlIdentifierId
        {
            get
            {
                return this._schemaSqlIdentifierId;
            }
        }
        
        public virtual AstStringId2 StringId2
        {
            get
            {
                return this._stringId2;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlSchemaCollection(this);
        }
        
        public static AstCreateXmlSchemaCollection? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_xml_schema_collection : 
        ///    CREATE XML SCHEMA COLLECTION schema_sql_identifier_id AS string_id2 
        /// </summary>
        public static AstCreateXmlSchemaCollection New(AstSchemaSqlIdentifierId schemaSqlIdentifierId, AstStringId2 stringId2)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaSqlIdentifierId);
            list.Add(stringId2);
            return new AstCreateXmlSchemaCollection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_partition_function : CREATE  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  input_parameter_type = data_type  RR_BRACKET  AS  RANGE  left_right?  FOR  VALUES  LR_BRACKET  boundary_values = expression_list  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionFunction : AstBnfRule
    {
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstDataType _inputParameterType;
        
        private AstLeftRight? _leftRight;
        
        private AstExpressionList _boundaryValues;
        
        private static string _ruleValue = "CREATE  PARTITION  FUNCTION  partition_function_id  LR_BRACKET  input_parameter_t" +
            "ype = data_type  RR_BRACKET  AS  RANGE  left_right?  FOR  VALUES  LR_BRACKET  bo" +
            "undary_values = expression_list  RR_BRACKET";
        
        private static string _ruleName = "create_partition_function";
        
        public AstCreatePartitionFunction(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._inputParameterType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLeftRight?>())
                {
                    this._leftRight = ((AstLeftRight?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._boundaryValues = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionFunction(Position p, AstPartitionFunctionId partitionFunctionId, AstDataType inputParameterType, AstLeftRight? leftRight, AstExpressionList boundaryValues) : 
                base(p)
        {
            this._partitionFunctionId = partitionFunctionId;
            this._inputParameterType = inputParameterType;
            this._leftRight = leftRight;
            this._boundaryValues = boundaryValues;
        }
        
        public AstCreatePartitionFunction(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._inputParameterType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLeftRight?>())
                {
                    this._leftRight = ((AstLeftRight?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._boundaryValues = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstDataType InputParameterType
        {
            get
            {
                return this._inputParameterType;
            }
        }
        
        public virtual AstLeftRight? LeftRight
        {
            get
            {
                return this._leftRight;
            }
        }
        
        public virtual AstExpressionList BoundaryValues
        {
            get
            {
                return this._boundaryValues;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionFunction(this);
        }
        
        public static AstCreatePartitionFunction? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_partition_function : 
        ///    CREATE PARTITION FUNCTION partition_function_id ( input_parameter_type=data_type ) AS RANGE left_right? FOR VALUES ( boundary_values=expression_list ) 
        /// </summary>
        public static AstCreatePartitionFunction New(AstPartitionFunctionId partitionFunctionId, AstDataType inputParameterType, AstLeftRight? leftRight, AstExpressionList boundaryValues)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partitionFunctionId);
            list.Add(inputParameterType);
            list.Add(leftRight);
            list.Add(boundaryValues);
            return new AstCreatePartitionFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_partition_scheme : CREATE  PARTITION  SCHEME  partition_scheme_id  AS  PARTITION  partition_function_id  ALL?  TO  LR_BRACKET  file_group_ids  RR_BRACKET
    /// </summary>
    public partial class AstCreatePartitionScheme : AstBnfRule
    {
        
        private AstPartitionSchemeId _partitionSchemeId;
        
        private AstPartitionFunctionId _partitionFunctionId;
        
        private AstFileGroupIds _fileGroupIds;
        
        private static string _ruleValue = "CREATE  PARTITION  SCHEME  partition_scheme_id  AS  PARTITION  partition_function" +
            "_id  ALL?  TO  LR_BRACKET  file_group_ids  RR_BRACKET";
        
        private static string _ruleName = "create_partition_scheme";
        
        public AstCreatePartitionScheme(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupIds>())
                {
                    this._fileGroupIds = ((AstFileGroupIds)(enumerator.Current));
                }
            }
        }
        
        public AstCreatePartitionScheme(Position p, AstPartitionSchemeId partitionSchemeId, AstPartitionFunctionId partitionFunctionId, AstFileGroupIds fileGroupIds) : 
                base(p)
        {
            this._partitionSchemeId = partitionSchemeId;
            this._partitionFunctionId = partitionFunctionId;
            this._fileGroupIds = fileGroupIds;
        }
        
        public AstCreatePartitionScheme(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartitionSchemeId>())
                {
                    this._partitionSchemeId = ((AstPartitionSchemeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPartitionFunctionId>())
                {
                    this._partitionFunctionId = ((AstPartitionFunctionId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupIds>())
                {
                    this._fileGroupIds = ((AstFileGroupIds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartitionSchemeId PartitionSchemeId
        {
            get
            {
                return this._partitionSchemeId;
            }
        }
        
        public virtual AstPartitionFunctionId PartitionFunctionId
        {
            get
            {
                return this._partitionFunctionId;
            }
        }
        
        public virtual AstFileGroupIds FileGroupIds
        {
            get
            {
                return this._fileGroupIds;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreatePartitionScheme(this);
        }
        
        public static AstCreatePartitionScheme? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_partition_scheme : 
        ///    CREATE PARTITION SCHEME partition_scheme_id AS PARTITION partition_function_id ALL? TO ( file_group_ids ) 
        /// </summary>
        public static AstCreatePartitionScheme New(AstPartitionSchemeId partitionSchemeId, AstPartitionFunctionId partitionFunctionId, AstFileGroupIds fileGroupIds)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partitionSchemeId);
            list.Add(partitionFunctionId);
            list.Add(fileGroupIds);
            return new AstCreatePartitionScheme(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_queue : CREATE  QUEUE  table_or_queue  queue_settings?  (ON  file_group_id | DEFAULT)?
    /// </summary>
    public partial class AstCreateQueue : AstBnfRule
    {
        
        private AstTableOrQueue _tableOrQueue;
        
        private AstQueueSettings? _queueSettings;
        
        private AstFileGroupId _fileGroupId;
        
        private static string _ruleValue = "CREATE  QUEUE  table_or_queue  queue_settings?  (ON  file_group_id | DEFAULT)?";
        
        private static string _ruleName = "create_queue";
        
        public AstCreateQueue(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrQueue>())
                {
                    this._tableOrQueue = ((AstTableOrQueue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueSettings?>())
                {
                    this._queueSettings = ((AstQueueSettings?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateQueue(Position p, AstTableOrQueue tableOrQueue, AstQueueSettings? queueSettings, AstFileGroupId fileGroupId) : 
                base(p)
        {
            this._tableOrQueue = tableOrQueue;
            this._queueSettings = queueSettings;
            this._fileGroupId = fileGroupId;
        }
        
        public AstCreateQueue(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrQueue>())
                {
                    this._tableOrQueue = ((AstTableOrQueue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueSettings?>())
                {
                    this._queueSettings = ((AstQueueSettings?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableOrQueue TableOrQueue
        {
            get
            {
                return this._tableOrQueue;
            }
        }
        
        public virtual AstQueueSettings? QueueSettings
        {
            get
            {
                return this._queueSettings;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateQueue(this);
        }
        
        public static AstCreateQueue? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_queue : 
        ///    CREATE QUEUE table_or_queue queue_settings? ON file_group_id 
        /// </summary>
        public static AstCreateQueue New(AstTableOrQueue tableOrQueue, AstQueueSettings? queueSettings, AstFileGroupId fileGroupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableOrQueue);
            list.Add(queueSettings);
            list.Add(fileGroupId);
            return new AstCreateQueue(Position.Default, list);
        }
        
        /// <summary>
        /// create_queue : 
        ///    CREATE QUEUE table_or_queue queue_settings? DEFAULT 
        /// </summary>
        public static AstCreateQueue New(AstTableOrQueue tableOrQueue, AstQueueSettings? queueSettings)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableOrQueue);
            list.Add(queueSettings);
            return new AstCreateQueue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_queue : ALTER  QUEUE  table_or_queue  (queue_settings | queue_action)
    /// </summary>
    public partial class AstAlterQueue : AstBnfRule
    {
        
        private AstTableOrQueue _tableOrQueue;
        
        private AstQueueSettings _queueSettings;
        
        private AstQueueAction _queueAction;
        
        private static string _ruleValue = "ALTER  QUEUE  table_or_queue  (queue_settings | queue_action)";
        
        private static string _ruleName = "alter_queue";
        
        public AstAlterQueue(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrQueue>())
                {
                    this._tableOrQueue = ((AstTableOrQueue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueAction>())
                {
                    this._queueAction = ((AstQueueAction)(enumerator.Current));
                }
            }
        }
        
        public AstAlterQueue(Position p, AstTableOrQueue tableOrQueue, AstQueueSettings queueSettings, AstQueueAction queueAction) : 
                base(p)
        {
            this._tableOrQueue = tableOrQueue;
            this._queueSettings = queueSettings;
            this._queueAction = queueAction;
        }
        
        public AstAlterQueue(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableOrQueue>())
                {
                    this._tableOrQueue = ((AstTableOrQueue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueSettings>())
                {
                    this._queueSettings = ((AstQueueSettings)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstQueueAction>())
                {
                    this._queueAction = ((AstQueueAction)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableOrQueue TableOrQueue
        {
            get
            {
                return this._tableOrQueue;
            }
        }
        
        public virtual AstQueueSettings QueueSettings
        {
            get
            {
                return this._queueSettings;
            }
        }
        
        public virtual AstQueueAction QueueAction
        {
            get
            {
                return this._queueAction;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterQueue(this);
        }
        
        public static AstAlterQueue? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_queue : 
        ///    ALTER QUEUE table_or_queue queue_settings 
        /// </summary>
        public static AstAlterQueue New(AstTableOrQueue tableOrQueue, AstQueueSettings queueSettings)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableOrQueue);
            list.Add(queueSettings);
            return new AstAlterQueue(Position.Default, list);
        }
        
        /// <summary>
        /// alter_queue : 
        ///    ALTER QUEUE table_or_queue queue_action 
        /// </summary>
        public static AstAlterQueue New(AstTableOrQueue tableOrQueue, AstQueueAction queueAction)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableOrQueue);
            list.Add(queueAction);
            return new AstAlterQueue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// queue_rebuild_options : MAXDOP  EQUAL  decimal
    /// </summary>
    public partial class AstQueueRebuildOptions : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "MAXDOP  EQUAL  decimal";
        
        private static string _ruleName = "queue_rebuild_options";
        
        public AstQueueRebuildOptions(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstQueueRebuildOptions(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstQueueRebuildOptions(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQueueRebuildOptions(this);
        }
        
        public static AstQueueRebuildOptions? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// queue_rebuild_options : 
        ///    MAXDOP EQUAL decimal 
        /// </summary>
        public static AstQueueRebuildOptions New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstQueueRebuildOptions(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_contract : CREATE  CONTRACT  contract_name_expression  (AUTHORIZATION  owner_id)?  LR_BRACKET  contract_items  RR_BRACKET
    /// </summary>
    public partial class AstCreateContract : AstBnfRule
    {
        
        private AstContractNameExpression _contractNameExpression;
        
        private AstOwnerId _ownerId;
        
        private AstContractItems _contractItems;
        
        private static string _ruleValue = "CREATE  CONTRACT  contract_name_expression  (AUTHORIZATION  owner_id)?  LR_BRACKE" +
            "T  contract_items  RR_BRACKET";
        
        private static string _ruleName = "create_contract";
        
        public AstCreateContract(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractItems>())
                {
                    this._contractItems = ((AstContractItems)(enumerator.Current));
                }
            }
        }
        
        public AstCreateContract(Position p, AstContractNameExpression contractNameExpression, AstOwnerId ownerId, AstContractItems contractItems) : 
                base(p)
        {
            this._contractNameExpression = contractNameExpression;
            this._ownerId = ownerId;
            this._contractItems = contractItems;
        }
        
        public AstCreateContract(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractItems>())
                {
                    this._contractItems = ((AstContractItems)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractNameExpression ContractNameExpression
        {
            get
            {
                return this._contractNameExpression;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstContractItems ContractItems
        {
            get
            {
                return this._contractItems;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateContract(this);
        }
        
        public static AstCreateContract? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_contract : 
        ///    CREATE CONTRACT contract_name_expression AUTHORIZATION owner_id ( contract_items ) 
        /// </summary>
        public static AstCreateContract New(AstContractNameExpression contractNameExpression, AstOwnerId ownerId, AstContractItems contractItems)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(contractNameExpression);
            list.Add(ownerId);
            list.Add(contractItems);
            return new AstCreateContract(Position.Default, list);
        }
    }
    
    /// <summary>
    /// contract_item : contract_item_target  SENT  BY  init_target_any
    /// </summary>
    public partial class AstContractItem : AstBnfRule
    {
        
        private AstContractItemTarget _contractItemTarget;
        
        private AstInitTargetAny _initTargetAny;
        
        private static string _ruleValue = "contract_item_target  SENT  BY  init_target_any";
        
        private static string _ruleName = "contract_item";
        
        public AstContractItem(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractItemTarget>())
                {
                    this._contractItemTarget = ((AstContractItemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInitTargetAny>())
                {
                    this._initTargetAny = ((AstInitTargetAny)(enumerator.Current));
                }
            }
        }
        
        public AstContractItem(Position p, AstContractItemTarget contractItemTarget, AstInitTargetAny initTargetAny) : 
                base(p)
        {
            this._contractItemTarget = contractItemTarget;
            this._initTargetAny = initTargetAny;
        }
        
        public AstContractItem(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContractItemTarget>())
                {
                    this._contractItemTarget = ((AstContractItemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInitTargetAny>())
                {
                    this._initTargetAny = ((AstInitTargetAny)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContractItemTarget ContractItemTarget
        {
            get
            {
                return this._contractItemTarget;
            }
        }
        
        public virtual AstInitTargetAny InitTargetAny
        {
            get
            {
                return this._initTargetAny;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContractItem(this);
        }
        
        public static AstContractItem? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// contract_item : 
        ///    contract_item_target SENT BY init_target_any 
        /// </summary>
        public static AstContractItem New(AstContractItemTarget contractItemTarget, AstInitTargetAny initTargetAny)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(contractItemTarget);
            list.Add(initTargetAny);
            return new AstContractItem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// message_statement : CREATE  MESSAGE  TYPE  message_type_id  (AUTHORIZATION  owner_id)?  (VALIDATION  EQUAL  message_validation_value)
    /// </summary>
    public partial class AstMessageStatement : AstBnfRule
    {
        
        private AstMessageTypeId _messageTypeId;
        
        private AstOwnerId _ownerId;
        
        private AstMessageValidationValue _messageValidationValue;
        
        private static string _ruleValue = "CREATE  MESSAGE  TYPE  message_type_id  (AUTHORIZATION  owner_id)?  (VALIDATION  " +
            "EQUAL  message_validation_value)";
        
        private static string _ruleName = "message_statement";
        
        public AstMessageStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMessageValidationValue>())
                {
                    this._messageValidationValue = ((AstMessageValidationValue)(enumerator.Current));
                }
            }
        }
        
        public AstMessageStatement(Position p, AstMessageTypeId messageTypeId, AstOwnerId ownerId, AstMessageValidationValue messageValidationValue) : 
                base(p)
        {
            this._messageTypeId = messageTypeId;
            this._ownerId = ownerId;
            this._messageValidationValue = messageValidationValue;
        }
        
        public AstMessageStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMessageTypeId>())
                {
                    this._messageTypeId = ((AstMessageTypeId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOwnerId>())
                {
                    this._ownerId = ((AstOwnerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMessageValidationValue>())
                {
                    this._messageValidationValue = ((AstMessageValidationValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMessageTypeId MessageTypeId
        {
            get
            {
                return this._messageTypeId;
            }
        }
        
        public virtual AstOwnerId OwnerId
        {
            get
            {
                return this._ownerId;
            }
        }
        
        public virtual AstMessageValidationValue MessageValidationValue
        {
            get
            {
                return this._messageValidationValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMessageStatement(this);
        }
        
        public static AstMessageStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// message_statement : 
        ///    CREATE MESSAGE TYPE message_type_id AUTHORIZATION owner_id VALIDATION EQUAL message_validation_value 
        /// </summary>
        public static AstMessageStatement New(AstMessageTypeId messageTypeId, AstOwnerId ownerId, AstMessageValidationValue messageValidationValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(messageTypeId);
            list.Add(ownerId);
            list.Add(messageValidationValue);
            return new AstMessageStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// merge_statement : with_expression?  MERGE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  search_condition  when_matches  output_clause?  update_option_clause?  SEMI
    /// </summary>
    public partial class AstMergeStatement : AstBnfRule
    {
        
        private AstWithExpression? _withExpression;
        
        private AstExpression _expression;
        
        private AstDdlObject _ddlObject;
        
        private AstWithTableHints? _withTableHints;
        
        private AstAsTableAlias? _asTableAlias;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstWhenMatches _whenMatches;
        
        private AstOutputClause? _outputClause;
        
        private AstUpdateOptionClause? _updateOptionClause;
        
        private static string _ruleValue = "with_expression?  MERGE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  IN" +
            "TO?  ddl_object  with_table_hints?  as_table_alias?  USING  table_sources  ON  s" +
            "earch_condition  when_matches  output_clause?  update_option_clause?  SEMI";
        
        private static string _ruleName = "merge_statement";
        
        public AstMergeStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias?>())
                {
                    this._asTableAlias = ((AstAsTableAlias?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public AstMergeStatement(Position p, AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstAsTableAlias? asTableAlias, AstTableSources tableSources, AstSearchCondition searchCondition, AstWhenMatches whenMatches, AstOutputClause? outputClause, AstUpdateOptionClause? updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._ddlObject = ddlObject;
            this._withTableHints = withTableHints;
            this._asTableAlias = asTableAlias;
            this._tableSources = tableSources;
            this._searchCondition = searchCondition;
            this._whenMatches = whenMatches;
            this._outputClause = outputClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstMergeStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias?>())
                {
                    this._asTableAlias = ((AstAsTableAlias?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhenMatches>())
                {
                    this._whenMatches = ((AstWhenMatches)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression? WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstWithTableHints? WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstAsTableAlias? AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstWhenMatches WhenMatches
        {
            get
            {
                return this._whenMatches;
            }
        }
        
        public virtual AstOutputClause? OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstUpdateOptionClause? UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMergeStatement(this);
        }
        
        public static AstMergeStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// merge_statement : 
        ///    with_expression? MERGE TOP ( expression ) PERCENT? INTO? ddl_object with_table_hints? as_table_alias? USING table_sources ON search_condition when_matches output_clause? update_option_clause? ; 
        /// </summary>
        public static AstMergeStatement New(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstAsTableAlias? asTableAlias, AstTableSources tableSources, AstSearchCondition searchCondition, AstWhenMatches whenMatches, AstOutputClause? outputClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(asTableAlias);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(whenMatches);
            list.Add(outputClause);
            list.Add(updateOptionClause);
            return new AstMergeStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// delete_statement : with_expression?  DELETE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? | TOP  decimal)?  FROM?  delete_statement_from  with_table_hints?  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = local_id)))?  for_clause?  update_option_clause?
    /// </summary>
    public partial class AstDeleteStatement : AstBnfRule
    {
        
        private AstWithExpression? _withExpression;
        
        private AstExpression _expression;
        
        private AstDecimal _decimal;
        
        private AstDeleteStatementFrom _deleteStatementFrom;
        
        private AstWithTableHints? _withTableHints;
        
        private AstOutputClause? _outputClause;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstCursorName _cursorName;
        
        private AstLocalId _cursorVar;
        
        private AstForClause? _forClause;
        
        private AstUpdateOptionClause? _updateOptionClause;
        
        private static string _ruleValue = @"with_expression?  DELETE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT? | TOP  decimal)?  FROM?  delete_statement_from  with_table_hints?  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = local_id)))?  for_clause?  update_option_clause?";
        
        private static string _ruleName = "delete_statement";
        
        public AstDeleteStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._cursorVar = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public AstDeleteStatement(Position p, AstWithExpression? withExpression, AstExpression expression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstCursorName cursorName, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._decimal = @decimal;
            this._deleteStatementFrom = deleteStatementFrom;
            this._withTableHints = withTableHints;
            this._outputClause = outputClause;
            this._tableSources = tableSources;
            this._searchCondition = searchCondition;
            this._cursorName = cursorName;
            this._cursorVar = cursorVar;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstDeleteStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeleteStatementFrom>())
                {
                    this._deleteStatementFrom = ((AstDeleteStatementFrom)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._cursorVar = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression? WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstDeleteStatementFrom DeleteStatementFrom
        {
            get
            {
                return this._deleteStatementFrom;
            }
        }
        
        public virtual AstWithTableHints? WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstOutputClause? OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstLocalId CursorVar
        {
            get
            {
                return this._cursorVar;
            }
        }
        
        public virtual AstForClause? ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause? UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteStatement(this);
        }
        
        public static AstDeleteStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP ( expression ) PERCENT? FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? 
        /// </summary>
        public static AstDeleteStatement New(AstWithExpression? withExpression, AstExpression expression, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP decimal FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? 
        /// </summary>
        public static AstDeleteStatement New(AstWithExpression? withExpression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(@decimal);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP ( expression ) PERCENT? FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? 
        /// </summary>
        public static AstDeleteStatement New(AstWithExpression? withExpression, AstExpression expression, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP decimal FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? 
        /// </summary>
        public static AstDeleteStatement New(AstWithExpression? withExpression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(@decimal);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP ( expression ) PERCENT? FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? 
        /// </summary>
        public static AstDeleteStatement New(AstWithExpression? withExpression, AstExpression expression, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
        
        /// <summary>
        /// delete_statement : 
        ///    with_expression? DELETE TOP decimal FROM? delete_statement_from with_table_hints? output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? 
        /// </summary>
        public static AstDeleteStatement New(AstWithExpression? withExpression, AstDecimal @decimal, AstDeleteStatementFrom deleteStatementFrom, AstWithTableHints? withTableHints, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(@decimal);
            list.Add(deleteStatementFrom);
            list.Add(withTableHints);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstDeleteStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// insert_statement : with_expression?  INSERT  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  (ddl_object | rowset_function_limited)  with_table_hints?  (LR_BRACKET  insert_column_name_list  RR_BRACKET)?  output_clause?  insert_statement_value  for_clause?  update_option_clause?
    /// </summary>
    public partial class AstInsertStatement : AstBnfRule
    {
        
        private AstWithExpression? _withExpression;
        
        private AstExpression _expression;
        
        private AstDdlObject _ddlObject;
        
        private AstRowsetFunctionLimited _rowsetFunctionLimited;
        
        private AstWithTableHints? _withTableHints;
        
        private AstInsertColumnNameList _insertColumnNameList;
        
        private AstOutputClause? _outputClause;
        
        private AstInsertStatementValue _insertStatementValue;
        
        private AstForClause? _forClause;
        
        private AstUpdateOptionClause? _updateOptionClause;
        
        private static string _ruleValue = @"with_expression?  INSERT  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  INTO?  (ddl_object | rowset_function_limited)  with_table_hints?  (LR_BRACKET  insert_column_name_list  RR_BRACKET)?  output_clause?  insert_statement_value  for_clause?  update_option_clause?";
        
        private static string _ruleName = "insert_statement";
        
        public AstInsertStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertColumnNameList>())
                {
                    this._insertColumnNameList = ((AstInsertColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public AstInsertStatement(Position p, AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstInsertColumnNameList insertColumnNameList, AstOutputClause? outputClause, AstInsertStatementValue insertStatementValue, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._ddlObject = ddlObject;
            this._rowsetFunctionLimited = rowsetFunctionLimited;
            this._withTableHints = withTableHints;
            this._insertColumnNameList = insertColumnNameList;
            this._outputClause = outputClause;
            this._insertStatementValue = insertStatementValue;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstInsertStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertColumnNameList>())
                {
                    this._insertColumnNameList = ((AstInsertColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstInsertStatementValue>())
                {
                    this._insertStatementValue = ((AstInsertStatementValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression? WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstRowsetFunctionLimited RowsetFunctionLimited
        {
            get
            {
                return this._rowsetFunctionLimited;
            }
        }
        
        public virtual AstWithTableHints? WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstInsertColumnNameList InsertColumnNameList
        {
            get
            {
                return this._insertColumnNameList;
            }
        }
        
        public virtual AstOutputClause? OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstInsertStatementValue InsertStatementValue
        {
            get
            {
                return this._insertStatementValue;
            }
        }
        
        public virtual AstForClause? ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause? UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitInsertStatement(this);
        }
        
        public static AstInsertStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// insert_statement : 
        ///    with_expression? INSERT TOP ( expression ) PERCENT? INTO? ddl_object with_table_hints? ( insert_column_name_list ) output_clause? insert_statement_value for_clause? update_option_clause? 
        /// </summary>
        public static AstInsertStatement New(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstInsertColumnNameList insertColumnNameList, AstOutputClause? outputClause, AstInsertStatementValue insertStatementValue, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(insertColumnNameList);
            list.Add(outputClause);
            list.Add(insertStatementValue);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstInsertStatement(Position.Default, list);
        }
        
        /// <summary>
        /// insert_statement : 
        ///    with_expression? INSERT TOP ( expression ) PERCENT? INTO? rowset_function_limited with_table_hints? ( insert_column_name_list ) output_clause? insert_statement_value for_clause? update_option_clause? 
        /// </summary>
        public static AstInsertStatement New(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstInsertColumnNameList insertColumnNameList, AstOutputClause? outputClause, AstInsertStatementValue insertStatementValue, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(insertColumnNameList);
            list.Add(outputClause);
            list.Add(insertStatementValue);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstInsertStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// receive_statement : LR_BRACKET?  RECEIVE  receive_mode  receive_ids?  FROM  complete_table_ref  receive_into?  RR_BRACKET?
    /// </summary>
    public partial class AstReceiveStatement : AstBnfRule
    {
        
        private AstReceiveMode _receiveMode;
        
        private AstReceiveIds? _receiveIds;
        
        private AstCompleteTableRef _completeTableRef;
        
        private AstReceiveInto? _receiveInto;
        
        private static string _ruleValue = "LR_BRACKET?  RECEIVE  receive_mode  receive_ids?  FROM  complete_table_ref  recei" +
            "ve_into?  RR_BRACKET?";
        
        private static string _ruleName = "receive_statement";
        
        public AstReceiveStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveMode>())
                {
                    this._receiveMode = ((AstReceiveMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveIds?>())
                {
                    this._receiveIds = ((AstReceiveIds?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveInto?>())
                {
                    this._receiveInto = ((AstReceiveInto?)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveStatement(Position p, AstReceiveMode receiveMode, AstReceiveIds? receiveIds, AstCompleteTableRef completeTableRef, AstReceiveInto? receiveInto) : 
                base(p)
        {
            this._receiveMode = receiveMode;
            this._receiveIds = receiveIds;
            this._completeTableRef = completeTableRef;
            this._receiveInto = receiveInto;
        }
        
        public AstReceiveStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstReceiveMode>())
                {
                    this._receiveMode = ((AstReceiveMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveIds?>())
                {
                    this._receiveIds = ((AstReceiveIds?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReceiveInto?>())
                {
                    this._receiveInto = ((AstReceiveInto?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstReceiveMode ReceiveMode
        {
            get
            {
                return this._receiveMode;
            }
        }
        
        public virtual AstReceiveIds? ReceiveIds
        {
            get
            {
                return this._receiveIds;
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public virtual AstReceiveInto? ReceiveInto
        {
            get
            {
                return this._receiveInto;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveStatement(this);
        }
        
        public static AstReceiveStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// receive_statement : 
        ///    LR_BRACKET? RECEIVE receive_mode receive_ids? FROM complete_table_ref receive_into? RR_BRACKET? 
        /// </summary>
        public static AstReceiveStatement New(AstReceiveMode receiveMode, AstReceiveIds? receiveIds, AstCompleteTableRef completeTableRef, AstReceiveInto? receiveInto)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(receiveMode);
            list.Add(receiveIds);
            list.Add(completeTableRef);
            list.Add(receiveInto);
            return new AstReceiveStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// receive_into : INTO  table_id  where_condition
    /// </summary>
    public partial class AstReceiveInto : AstBnfRule
    {
        
        private AstTableId _tableId;
        
        private AstWhereCondition _whereCondition;
        
        private static string _ruleValue = "INTO  table_id  where_condition";
        
        private static string _ruleName = "receive_into";
        
        public AstReceiveInto(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveInto(Position p, AstTableId tableId, AstWhereCondition whereCondition) : 
                base(p)
        {
            this._tableId = tableId;
            this._whereCondition = whereCondition;
        }
        
        public AstReceiveInto(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition>())
                {
                    this._whereCondition = ((AstWhereCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public virtual AstWhereCondition WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveInto(this);
        }
        
        public static AstReceiveInto? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// receive_into : 
        ///    INTO table_id where_condition 
        /// </summary>
        public static AstReceiveInto New(AstTableId tableId, AstWhereCondition whereCondition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableId);
            list.Add(whereCondition);
            return new AstReceiveInto(Position.Default, list);
        }
    }
    
    /// <summary>
    /// where_condition : WHERE  search_condition
    /// </summary>
    public partial class AstWhereCondition : AstBnfRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private static string _ruleValue = "WHERE  search_condition";
        
        private static string _ruleName = "where_condition";
        
        public AstWhereCondition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstWhereCondition(Position p, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._searchCondition = searchCondition;
        }
        
        public AstWhereCondition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWhereCondition(this);
        }
        
        public static AstWhereCondition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// where_condition : 
        ///    WHERE search_condition 
        /// </summary>
        public static AstWhereCondition New(AstSearchCondition searchCondition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(searchCondition);
            return new AstWhereCondition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// receive_id : local_id  EQUAL  expression
    /// </summary>
    public partial class AstReceiveId : AstBnfRule
    {
        
        private AstLocalId _localId;
        
        private AstExpression _expression;
        
        private static string _ruleValue = "local_id  EQUAL  expression";
        
        private static string _ruleName = "receive_id";
        
        public AstReceiveId(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstReceiveId(Position p, AstLocalId localId, AstExpression expression) : 
                base(p)
        {
            this._localId = localId;
            this._expression = expression;
        }
        
        public AstReceiveId(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReceiveId(this);
        }
        
        public static AstReceiveId? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// receive_id : 
        ///    local_id EQUAL expression 
        /// </summary>
        public static AstReceiveId New(AstLocalId localId, AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localId);
            list.Add(expression);
            return new AstReceiveId(Position.Default, list);
        }
    }
    
    /// <summary>
    /// select_statement_standalone : with_expression?  select_statement
    /// </summary>
    public partial class AstSelectStatementStandalone : AstBnfRule
    {
        
        private AstWithExpression? _withExpression;
        
        private AstSelectStatement _selectStatement;
        
        private static string _ruleValue = "with_expression?  select_statement";
        
        private static string _ruleName = "select_statement_standalone";
        
        public AstSelectStatementStandalone(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatementStandalone(Position p, AstWithExpression? withExpression, AstSelectStatement selectStatement) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._selectStatement = selectStatement;
        }
        
        public AstSelectStatementStandalone(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression? WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatementStandalone(this);
        }
        
        public static AstSelectStatementStandalone? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// select_statement_standalone : 
        ///    with_expression? select_statement 
        /// </summary>
        public static AstSelectStatementStandalone New(AstWithExpression? withExpression, AstSelectStatement selectStatement)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(selectStatement);
            return new AstSelectStatementStandalone(Position.Default, list);
        }
    }
    
    /// <summary>
    /// select_statement : query_expression  select_order_by_clause?  for_clause?  update_option_clause?  SEMI?
    /// </summary>
    public partial class AstSelectStatement : AstBnfRule
    {
        
        private AstQueryExpression _queryExpression;
        
        private AstSelectOrderByClause? _selectOrderByClause;
        
        private AstForClause? _forClause;
        
        private AstUpdateOptionClause? _updateOptionClause;
        
        private static string _ruleValue = "query_expression  select_order_by_clause?  for_clause?  update_option_clause?  SE" +
            "MI?";
        
        private static string _ruleName = "select_statement";
        
        public AstSelectStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause?>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public AstSelectStatement(Position p, AstQueryExpression queryExpression, AstSelectOrderByClause? selectOrderByClause, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause) : 
                base(p)
        {
            this._queryExpression = queryExpression;
            this._selectOrderByClause = selectOrderByClause;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstSelectStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstQueryExpression>())
                {
                    this._queryExpression = ((AstQueryExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectOrderByClause?>())
                {
                    this._selectOrderByClause = ((AstSelectOrderByClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstQueryExpression QueryExpression
        {
            get
            {
                return this._queryExpression;
            }
        }
        
        public virtual AstSelectOrderByClause? SelectOrderByClause
        {
            get
            {
                return this._selectOrderByClause;
            }
        }
        
        public virtual AstForClause? ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause? UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectStatement(this);
        }
        
        public static AstSelectStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// select_statement : 
        ///    query_expression select_order_by_clause? for_clause? update_option_clause? SEMI? 
        /// </summary>
        public static AstSelectStatement New(AstQueryExpression queryExpression, AstSelectOrderByClause? selectOrderByClause, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(queryExpression);
            list.Add(selectOrderByClause);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstSelectStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// update_statement : with_expression?  UPDATE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  (ddl_object | rowset_function_limited)  with_table_hints?  SET  update_elems  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = local_id)))?  for_clause?  update_option_clause?
    /// </summary>
    public partial class AstUpdateStatement : AstBnfRule
    {
        
        private AstWithExpression? _withExpression;
        
        private AstExpression _expression;
        
        private AstDdlObject _ddlObject;
        
        private AstRowsetFunctionLimited _rowsetFunctionLimited;
        
        private AstWithTableHints? _withTableHints;
        
        private AstUpdateElems _updateElems;
        
        private AstOutputClause? _outputClause;
        
        private AstTableSources _tableSources;
        
        private AstSearchCondition _searchCondition;
        
        private AstCursorName _cursorName;
        
        private AstLocalId _cursorVar;
        
        private AstForClause? _forClause;
        
        private AstUpdateOptionClause? _updateOptionClause;
        
        private static string _ruleValue = @"with_expression?  UPDATE  (TOP  LR_BRACKET  expression  RR_BRACKET  PERCENT?)?  (ddl_object | rowset_function_limited)  with_table_hints?  SET  update_elems  output_clause?  (FROM  table_sources)?  (WHERE  (search_condition | CURRENT  OF  (GLOBAL?  cursor_name | cursor_var = local_id)))?  for_clause?  update_option_clause?";
        
        private static string _ruleName = "update_statement";
        
        public AstUpdateStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._cursorVar = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatement(Position p, AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstCursorName cursorName, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause) : 
                base(p)
        {
            this._withExpression = withExpression;
            this._expression = expression;
            this._ddlObject = ddlObject;
            this._rowsetFunctionLimited = rowsetFunctionLimited;
            this._withTableHints = withTableHints;
            this._updateElems = updateElems;
            this._outputClause = outputClause;
            this._tableSources = tableSources;
            this._searchCondition = searchCondition;
            this._cursorName = cursorName;
            this._cursorVar = cursorVar;
            this._forClause = forClause;
            this._updateOptionClause = updateOptionClause;
        }
        
        public AstUpdateStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstWithExpression?>())
                {
                    this._withExpression = ((AstWithExpression?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDdlObject>())
                {
                    this._ddlObject = ((AstDdlObject)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowsetFunctionLimited>())
                {
                    this._rowsetFunctionLimited = ((AstRowsetFunctionLimited)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWithTableHints?>())
                {
                    this._withTableHints = ((AstWithTableHints?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateElems>())
                {
                    this._updateElems = ((AstUpdateElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOutputClause?>())
                {
                    this._outputClause = ((AstOutputClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._tableSources = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._cursorVar = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForClause?>())
                {
                    this._forClause = ((AstForClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOptionClause?>())
                {
                    this._updateOptionClause = ((AstUpdateOptionClause?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstWithExpression? WithExpression
        {
            get
            {
                return this._withExpression;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstDdlObject DdlObject
        {
            get
            {
                return this._ddlObject;
            }
        }
        
        public virtual AstRowsetFunctionLimited RowsetFunctionLimited
        {
            get
            {
                return this._rowsetFunctionLimited;
            }
        }
        
        public virtual AstWithTableHints? WithTableHints
        {
            get
            {
                return this._withTableHints;
            }
        }
        
        public virtual AstUpdateElems UpdateElems
        {
            get
            {
                return this._updateElems;
            }
        }
        
        public virtual AstOutputClause? OutputClause
        {
            get
            {
                return this._outputClause;
            }
        }
        
        public virtual AstTableSources TableSources
        {
            get
            {
                return this._tableSources;
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstLocalId CursorVar
        {
            get
            {
                return this._cursorVar;
            }
        }
        
        public virtual AstForClause? ForClause
        {
            get
            {
                return this._forClause;
            }
        }
        
        public virtual AstUpdateOptionClause? UpdateOptionClause
        {
            get
            {
                return this._updateOptionClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatement(this);
        }
        
        public static AstUpdateStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? ddl_object with_table_hints? SET update_elems output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? 
        /// </summary>
        public static AstUpdateStatement New(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? rowset_function_limited with_table_hints? SET update_elems output_clause? FROM table_sources WHERE search_condition for_clause? update_option_clause? 
        /// </summary>
        public static AstUpdateStatement New(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstSearchCondition searchCondition, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(searchCondition);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? ddl_object with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? 
        /// </summary>
        public static AstUpdateStatement New(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? rowset_function_limited with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF GLOBAL? cursor_name for_clause? update_option_clause? 
        /// </summary>
        public static AstUpdateStatement New(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstCursorName cursorName, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorName);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? ddl_object with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? 
        /// </summary>
        public static AstUpdateStatement New(AstWithExpression? withExpression, AstExpression expression, AstDdlObject ddlObject, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(ddlObject);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
        
        /// <summary>
        /// update_statement : 
        ///    with_expression? UPDATE TOP ( expression ) PERCENT? rowset_function_limited with_table_hints? SET update_elems output_clause? FROM table_sources WHERE CURRENT OF cursor_var=local_id for_clause? update_option_clause? 
        /// </summary>
        public static AstUpdateStatement New(AstWithExpression? withExpression, AstExpression expression, AstRowsetFunctionLimited rowsetFunctionLimited, AstWithTableHints? withTableHints, AstUpdateElems updateElems, AstOutputClause? outputClause, AstTableSources tableSources, AstLocalId cursorVar, AstForClause? forClause, AstUpdateOptionClause? updateOptionClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(withExpression);
            list.Add(expression);
            list.Add(rowsetFunctionLimited);
            list.Add(withTableHints);
            list.Add(updateElems);
            list.Add(outputClause);
            list.Add(tableSources);
            list.Add(cursorVar);
            list.Add(forClause);
            list.Add(updateOptionClause);
            return new AstUpdateStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// output_clause : OUTPUT  output_dml_list_elems  (INTO  (local_id | full_table_ref)  (LR_BRACKET  column_name_list  RR_BRACKET)?)?
    /// </summary>
    public partial class AstOutputClause : AstBnfRule
    {
        
        private AstOutputDmlListElems _outputDmlListElems;
        
        private AstLocalId _localId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _columnNameList;
        
        private static string _ruleValue = "OUTPUT  output_dml_list_elems  (INTO  (local_id | full_table_ref)  (LR_BRACKET  c" +
            "olumn_name_list  RR_BRACKET)?)?";
        
        private static string _ruleName = "output_clause";
        
        public AstOutputClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstOutputClause(Position p, AstOutputDmlListElems outputDmlListElems, AstLocalId localId, AstFullTableRef fullTableRef, AstColumnNameList columnNameList) : 
                base(p)
        {
            this._outputDmlListElems = outputDmlListElems;
            this._localId = localId;
            this._fullTableRef = fullTableRef;
            this._columnNameList = columnNameList;
        }
        
        public AstOutputClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOutputDmlListElems>())
                {
                    this._outputDmlListElems = ((AstOutputDmlListElems)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOutputDmlListElems OutputDmlListElems
        {
            get
            {
                return this._outputDmlListElems;
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputClause(this);
        }
        
        public static AstOutputClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// output_clause : 
        ///    OUTPUT output_dml_list_elems INTO local_id ( column_name_list ) 
        /// </summary>
        public static AstOutputClause New(AstOutputDmlListElems outputDmlListElems, AstLocalId localId, AstColumnNameList columnNameList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(outputDmlListElems);
            list.Add(localId);
            list.Add(columnNameList);
            return new AstOutputClause(Position.Default, list);
        }
        
        /// <summary>
        /// output_clause : 
        ///    OUTPUT output_dml_list_elems INTO full_table_ref ( column_name_list ) 
        /// </summary>
        public static AstOutputClause New(AstOutputDmlListElems outputDmlListElems, AstFullTableRef fullTableRef, AstColumnNameList columnNameList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(outputDmlListElems);
            list.Add(fullTableRef);
            list.Add(columnNameList);
            return new AstOutputClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// output_dml_list_elem : (expression | asterisk)  as_column_alias?
    /// </summary>
    public partial class AstOutputDmlListElem : AstBnfRule
    {
        
        private AstExpression _expression;
        
        private AstAsterisk _asterisk;
        
        private AstAsColumnAlias? _asColumnAlias;
        
        private static string _ruleValue = "(expression | asterisk)  as_column_alias?";
        
        private static string _ruleName = "output_dml_list_elem";
        
        public AstOutputDmlListElem(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsterisk>())
                {
                    this._asterisk = ((AstAsterisk)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias?>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias?)(enumerator.Current));
                }
            }
        }
        
        public AstOutputDmlListElem(Position p, AstExpression expression, AstAsterisk asterisk, AstAsColumnAlias? asColumnAlias) : 
                base(p)
        {
            this._expression = expression;
            this._asterisk = asterisk;
            this._asColumnAlias = asColumnAlias;
        }
        
        public AstOutputDmlListElem(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsterisk>())
                {
                    this._asterisk = ((AstAsterisk)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias?>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstAsterisk Asterisk
        {
            get
            {
                return this._asterisk;
            }
        }
        
        public virtual AstAsColumnAlias? AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOutputDmlListElem(this);
        }
        
        public static AstOutputDmlListElem? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// output_dml_list_elem : 
        ///    expression as_column_alias? 
        /// </summary>
        public static AstOutputDmlListElem New(AstExpression expression, AstAsColumnAlias? asColumnAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expression);
            list.Add(asColumnAlias);
            return new AstOutputDmlListElem(Position.Default, list);
        }
        
        /// <summary>
        /// output_dml_list_elem : 
        ///    asterisk as_column_alias? 
        /// </summary>
        public static AstOutputDmlListElem New(AstAsterisk asterisk, AstAsColumnAlias? asColumnAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(asterisk);
            list.Add(asColumnAlias);
            return new AstOutputDmlListElem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_database : CREATE  DATABASE  database_id  containment_set?  database_on_primary?  database_on_log?  collate_set?  database_with_option?
    /// </summary>
    public partial class AstCreateDatabase : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstContainmentSet? _containmentSet;
        
        private AstDatabaseOnPrimary? _databaseOnPrimary;
        
        private AstDatabaseOnLog? _databaseOnLog;
        
        private AstCollateSet? _collateSet;
        
        private AstDatabaseWithOption? _databaseWithOption;
        
        private static string _ruleValue = "CREATE  DATABASE  database_id  containment_set?  database_on_primary?  database_o" +
            "n_log?  collate_set?  database_with_option?";
        
        private static string _ruleName = "create_database";
        
        public AstCreateDatabase(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContainmentSet?>())
                {
                    this._containmentSet = ((AstContainmentSet?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnPrimary?>())
                {
                    this._databaseOnPrimary = ((AstDatabaseOnPrimary?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnLog?>())
                {
                    this._databaseOnLog = ((AstDatabaseOnLog?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCollateSet?>())
                {
                    this._collateSet = ((AstCollateSet?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseWithOption?>())
                {
                    this._databaseWithOption = ((AstDatabaseWithOption?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateDatabase(Position p, AstDatabaseId databaseId, AstContainmentSet? containmentSet, AstDatabaseOnPrimary? databaseOnPrimary, AstDatabaseOnLog? databaseOnLog, AstCollateSet? collateSet, AstDatabaseWithOption? databaseWithOption) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._containmentSet = containmentSet;
            this._databaseOnPrimary = databaseOnPrimary;
            this._databaseOnLog = databaseOnLog;
            this._collateSet = collateSet;
            this._databaseWithOption = databaseWithOption;
        }
        
        public AstCreateDatabase(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContainmentSet?>())
                {
                    this._containmentSet = ((AstContainmentSet?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnPrimary?>())
                {
                    this._databaseOnPrimary = ((AstDatabaseOnPrimary?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseOnLog?>())
                {
                    this._databaseOnLog = ((AstDatabaseOnLog?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCollateSet?>())
                {
                    this._collateSet = ((AstCollateSet?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseWithOption?>())
                {
                    this._databaseWithOption = ((AstDatabaseWithOption?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstContainmentSet? ContainmentSet
        {
            get
            {
                return this._containmentSet;
            }
        }
        
        public virtual AstDatabaseOnPrimary? DatabaseOnPrimary
        {
            get
            {
                return this._databaseOnPrimary;
            }
        }
        
        public virtual AstDatabaseOnLog? DatabaseOnLog
        {
            get
            {
                return this._databaseOnLog;
            }
        }
        
        public virtual AstCollateSet? CollateSet
        {
            get
            {
                return this._collateSet;
            }
        }
        
        public virtual AstDatabaseWithOption? DatabaseWithOption
        {
            get
            {
                return this._databaseWithOption;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateDatabase(this);
        }
        
        public static AstCreateDatabase? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_database : 
        ///    CREATE DATABASE database_id containment_set? database_on_primary? database_on_log? collate_set? database_with_option? 
        /// </summary>
        public static AstCreateDatabase New(AstDatabaseId databaseId, AstContainmentSet? containmentSet, AstDatabaseOnPrimary? databaseOnPrimary, AstDatabaseOnLog? databaseOnLog, AstCollateSet? collateSet, AstDatabaseWithOption? databaseWithOption)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(containmentSet);
            list.Add(databaseOnPrimary);
            list.Add(databaseOnLog);
            list.Add(collateSet);
            list.Add(databaseWithOption);
            return new AstCreateDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_with_option : WITH  create_database_option_list
    /// </summary>
    public partial class AstDatabaseWithOption : AstBnfRule
    {
        
        private AstCreateDatabaseOptionList _createDatabaseOptionList;
        
        private static string _ruleValue = "WITH  create_database_option_list";
        
        private static string _ruleName = "database_with_option";
        
        public AstDatabaseWithOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateDatabaseOptionList>())
                {
                    this._createDatabaseOptionList = ((AstCreateDatabaseOptionList)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseWithOption(Position p, AstCreateDatabaseOptionList createDatabaseOptionList) : 
                base(p)
        {
            this._createDatabaseOptionList = createDatabaseOptionList;
        }
        
        public AstDatabaseWithOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateDatabaseOptionList>())
                {
                    this._createDatabaseOptionList = ((AstCreateDatabaseOptionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateDatabaseOptionList CreateDatabaseOptionList
        {
            get
            {
                return this._createDatabaseOptionList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseWithOption(this);
        }
        
        public static AstDatabaseWithOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// database_with_option : 
        ///    WITH create_database_option_list 
        /// </summary>
        public static AstDatabaseWithOption New(AstCreateDatabaseOptionList createDatabaseOptionList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createDatabaseOptionList);
            return new AstDatabaseWithOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_on_primary : ON  PRIMARY?  database_files
    /// </summary>
    public partial class AstDatabaseOnPrimary : AstBnfRule
    {
        
        private AstDatabaseFiles _databaseFiles;
        
        private static string _ruleValue = "ON  PRIMARY?  database_files";
        
        private static string _ruleName = "database_on_primary";
        
        public AstDatabaseOnPrimary(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFiles>())
                {
                    this._databaseFiles = ((AstDatabaseFiles)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseOnPrimary(Position p, AstDatabaseFiles databaseFiles) : 
                base(p)
        {
            this._databaseFiles = databaseFiles;
        }
        
        public AstDatabaseOnPrimary(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFiles>())
                {
                    this._databaseFiles = ((AstDatabaseFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFiles DatabaseFiles
        {
            get
            {
                return this._databaseFiles;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOnPrimary(this);
        }
        
        public static AstDatabaseOnPrimary? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// database_on_primary : 
        ///    ON PRIMARY? database_files 
        /// </summary>
        public static AstDatabaseOnPrimary New(AstDatabaseFiles databaseFiles)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseFiles);
            return new AstDatabaseOnPrimary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_on_log : LOG  ON  database_files
    /// </summary>
    public partial class AstDatabaseOnLog : AstBnfRule
    {
        
        private AstDatabaseFiles _databaseFiles;
        
        private static string _ruleValue = "LOG  ON  database_files";
        
        private static string _ruleName = "database_on_log";
        
        public AstDatabaseOnLog(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFiles>())
                {
                    this._databaseFiles = ((AstDatabaseFiles)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseOnLog(Position p, AstDatabaseFiles databaseFiles) : 
                base(p)
        {
            this._databaseFiles = databaseFiles;
        }
        
        public AstDatabaseOnLog(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFiles>())
                {
                    this._databaseFiles = ((AstDatabaseFiles)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFiles DatabaseFiles
        {
            get
            {
                return this._databaseFiles;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseOnLog(this);
        }
        
        public static AstDatabaseOnLog? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// database_on_log : 
        ///    LOG ON database_files 
        /// </summary>
        public static AstDatabaseOnLog New(AstDatabaseFiles databaseFiles)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseFiles);
            return new AstDatabaseOnLog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// collate_set : COLLATE  collation_id
    /// </summary>
    public partial class AstCollateSet : AstBnfRule
    {
        
        private AstCollationId _collationId;
        
        private static string _ruleValue = "COLLATE  collation_id";
        
        private static string _ruleName = "collate_set";
        
        public AstCollateSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCollationId>())
                {
                    this._collationId = ((AstCollationId)(enumerator.Current));
                }
            }
        }
        
        public AstCollateSet(Position p, AstCollationId collationId) : 
                base(p)
        {
            this._collationId = collationId;
        }
        
        public AstCollateSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCollationId>())
                {
                    this._collationId = ((AstCollationId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCollationId CollationId
        {
            get
            {
                return this._collationId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCollateSet(this);
        }
        
        public static AstCollateSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// collate_set : 
        ///    COLLATE collation_id 
        /// </summary>
        public static AstCollateSet New(AstCollationId collationId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(collationId);
            return new AstCollateSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_index : CREATE  UNIQUE?  clustered?  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  (INCLUDE  LR_BRACKET  column_name_list  RR_BRACKET)?  where_condition?  (create_index_options)?  (ON  file_group_id)?
    /// </summary>
    public partial class AstCreateIndex : AstBnfRule
    {
        
        private AstClustered? _clustered;
        
        private AstIndexId _indexId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstColumnNameList _columnNameList;
        
        private AstWhereCondition? _whereCondition;
        
        private AstCreateIndexOptions _createIndexOptions;
        
        private AstFileGroupId _fileGroupId;
        
        private static string _ruleValue = "CREATE  UNIQUE?  clustered?  INDEX  index_id  ON  full_table_ref  LR_BRACKET  col" +
            "umn_name_list_with_order  RR_BRACKET  (INCLUDE  LR_BRACKET  column_name_list  RR" +
            "_BRACKET)?  where_condition?  (create_index_options)?  (ON  file_group_id)?";
        
        private static string _ruleName = "create_index";
        
        public AstCreateIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered?>())
                {
                    this._clustered = ((AstClustered?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition?>())
                {
                    this._whereCondition = ((AstWhereCondition?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateIndexOptions>())
                {
                    this._createIndexOptions = ((AstCreateIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndex(Position p, AstClustered? clustered, AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstColumnNameList columnNameList, AstWhereCondition? whereCondition, AstCreateIndexOptions createIndexOptions, AstFileGroupId fileGroupId) : 
                base(p)
        {
            this._clustered = clustered;
            this._indexId = indexId;
            this._fullTableRef = fullTableRef;
            this._columnNameListWithOrder = columnNameListWithOrder;
            this._columnNameList = columnNameList;
            this._whereCondition = whereCondition;
            this._createIndexOptions = createIndexOptions;
            this._fileGroupId = fileGroupId;
        }
        
        public AstCreateIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstClustered?>())
                {
                    this._clustered = ((AstClustered?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition?>())
                {
                    this._whereCondition = ((AstWhereCondition?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateIndexOptions>())
                {
                    this._createIndexOptions = ((AstCreateIndexOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstClustered? Clustered
        {
            get
            {
                return this._clustered;
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstWhereCondition? WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public virtual AstCreateIndexOptions CreateIndexOptions
        {
            get
            {
                return this._createIndexOptions;
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndex(this);
        }
        
        public static AstCreateIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_index : 
        ///    CREATE UNIQUE? clustered? INDEX index_id ON full_table_ref ( column_name_list_with_order ) INCLUDE ( column_name_list ) where_condition? create_index_options ON file_group_id 
        /// </summary>
        public static AstCreateIndex New(AstClustered? clustered, AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstColumnNameList columnNameList, AstWhereCondition? whereCondition, AstCreateIndexOptions createIndexOptions, AstFileGroupId fileGroupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(clustered);
            list.Add(indexId);
            list.Add(fullTableRef);
            list.Add(columnNameListWithOrder);
            list.Add(columnNameList);
            list.Add(whereCondition);
            list.Add(createIndexOptions);
            list.Add(fileGroupId);
            return new AstCreateIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_index : ALTER  INDEX  index_name  ON  full_table_ref  index_status
    /// </summary>
    public partial class AstAlterIndex : AstBnfRule
    {
        
        private AstIndexName _indexName;
        
        private AstFullTableRef _fullTableRef;
        
        private AstIndexStatus _indexStatus;
        
        private static string _ruleValue = "ALTER  INDEX  index_name  ON  full_table_ref  index_status";
        
        private static string _ruleName = "alter_index";
        
        public AstAlterIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStatus>())
                {
                    this._indexStatus = ((AstIndexStatus)(enumerator.Current));
                }
            }
        }
        
        public AstAlterIndex(Position p, AstIndexName indexName, AstFullTableRef fullTableRef, AstIndexStatus indexStatus) : 
                base(p)
        {
            this._indexName = indexName;
            this._fullTableRef = fullTableRef;
            this._indexStatus = indexStatus;
        }
        
        public AstAlterIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexName>())
                {
                    this._indexName = ((AstIndexName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStatus>())
                {
                    this._indexStatus = ((AstIndexStatus)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexName IndexName
        {
            get
            {
                return this._indexName;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstIndexStatus IndexStatus
        {
            get
            {
                return this._indexStatus;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterIndex(this);
        }
        
        public static AstAlterIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_index : 
        ///    ALTER INDEX index_name ON full_table_ref index_status 
        /// </summary>
        public static AstAlterIndex New(AstIndexName indexName, AstFullTableRef fullTableRef, AstIndexStatus indexStatus)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(indexName);
            list.Add(fullTableRef);
            list.Add(indexStatus);
            return new AstAlterIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// reorganize_partition : REORGANIZE  (PARTITION  EQUAL  decimal)?  reorganize_options?
    /// </summary>
    public partial class AstReorganizePartition : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private AstReorganizeOptions? _reorganizeOptions;
        
        private static string _ruleValue = "REORGANIZE  (PARTITION  EQUAL  decimal)?  reorganize_options?";
        
        private static string _ruleName = "reorganize_partition";
        
        public AstReorganizePartition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReorganizeOptions?>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions?)(enumerator.Current));
                }
            }
        }
        
        public AstReorganizePartition(Position p, AstDecimal @decimal, AstReorganizeOptions? reorganizeOptions) : 
                base(p)
        {
            this._decimal = @decimal;
            this._reorganizeOptions = reorganizeOptions;
        }
        
        public AstReorganizePartition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReorganizeOptions?>())
                {
                    this._reorganizeOptions = ((AstReorganizeOptions?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstReorganizeOptions? ReorganizeOptions
        {
            get
            {
                return this._reorganizeOptions;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitReorganizePartition(this);
        }
        
        public static AstReorganizePartition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// reorganize_partition : 
        ///    REORGANIZE PARTITION EQUAL decimal reorganize_options? 
        /// </summary>
        public static AstReorganizePartition New(AstDecimal @decimal, AstReorganizeOptions? reorganizeOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            list.Add(reorganizeOptions);
            return new AstReorganizePartition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_columnstore_index : CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_ref  create_columnstore_index_options?  (ON  table_id)?
    /// </summary>
    public partial class AstCreateColumnstoreIndex : AstBnfRule
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstCreateColumnstoreIndexOptions? _createColumnstoreIndexOptions;
        
        private AstTableId _tableId;
        
        private static string _ruleValue = "CREATE  CLUSTERED  COLUMNSTORE  INDEX  id_  ON  full_table_ref  create_columnstor" +
            "e_index_options?  (ON  table_id)?";
        
        private static string _ruleName = "create_columnstore_index";
        
        public AstCreateColumnstoreIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions?>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateColumnstoreIndex(Position p, AstId id, AstFullTableRef fullTableRef, AstCreateColumnstoreIndexOptions? createColumnstoreIndexOptions, AstTableId tableId) : 
                base(p)
        {
            this._id = id;
            this._fullTableRef = fullTableRef;
            this._createColumnstoreIndexOptions = createColumnstoreIndexOptions;
            this._tableId = tableId;
        }
        
        public AstCreateColumnstoreIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions?>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableId>())
                {
                    this._tableId = ((AstTableId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions? CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public virtual AstTableId TableId
        {
            get
            {
                return this._tableId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateColumnstoreIndex(this);
        }
        
        public static AstCreateColumnstoreIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_columnstore_index : 
        ///    CREATE CLUSTERED COLUMNSTORE INDEX id_ ON full_table_ref create_columnstore_index_options? ON table_id 
        /// </summary>
        public static AstCreateColumnstoreIndex New(AstId id, AstFullTableRef fullTableRef, AstCreateColumnstoreIndexOptions? createColumnstoreIndexOptions, AstTableId tableId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(fullTableRef);
            list.Add(createColumnstoreIndexOptions);
            list.Add(tableId);
            return new AstCreateColumnstoreIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_nonclustered_columnstore_index : CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_ref  LR_BRACKET  column_name_list_with_order  RR_BRACKET  where_condition?  create_columnstore_index_options?  (ON  group_id)?
    /// </summary>
    public partial class AstCreateNonclusteredColumnstoreIndex : AstBnfRule
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameListWithOrder _columnNameListWithOrder;
        
        private AstWhereCondition? _whereCondition;
        
        private AstCreateColumnstoreIndexOptions? _createColumnstoreIndexOptions;
        
        private AstGroupId _groupId;
        
        private static string _ruleValue = "CREATE  NONCLUSTERED?  COLUMNSTORE  INDEX  id_  ON  full_table_ref  LR_BRACKET  c" +
            "olumn_name_list_with_order  RR_BRACKET  where_condition?  create_columnstore_ind" +
            "ex_options?  (ON  group_id)?";
        
        private static string _ruleName = "create_nonclustered_columnstore_index";
        
        public AstCreateNonclusteredColumnstoreIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition?>())
                {
                    this._whereCondition = ((AstWhereCondition?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions?>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateNonclusteredColumnstoreIndex(Position p, AstId id, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstWhereCondition? whereCondition, AstCreateColumnstoreIndexOptions? createColumnstoreIndexOptions, AstGroupId groupId) : 
                base(p)
        {
            this._id = id;
            this._fullTableRef = fullTableRef;
            this._columnNameListWithOrder = columnNameListWithOrder;
            this._whereCondition = whereCondition;
            this._createColumnstoreIndexOptions = createColumnstoreIndexOptions;
            this._groupId = groupId;
        }
        
        public AstCreateNonclusteredColumnstoreIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameListWithOrder>())
                {
                    this._columnNameListWithOrder = ((AstColumnNameListWithOrder)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition?>())
                {
                    this._whereCondition = ((AstWhereCondition?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateColumnstoreIndexOptions?>())
                {
                    this._createColumnstoreIndexOptions = ((AstCreateColumnstoreIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._groupId = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameListWithOrder ColumnNameListWithOrder
        {
            get
            {
                return this._columnNameListWithOrder;
            }
        }
        
        public virtual AstWhereCondition? WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public virtual AstCreateColumnstoreIndexOptions? CreateColumnstoreIndexOptions
        {
            get
            {
                return this._createColumnstoreIndexOptions;
            }
        }
        
        public virtual AstGroupId GroupId
        {
            get
            {
                return this._groupId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateNonclusteredColumnstoreIndex(this);
        }
        
        public static AstCreateNonclusteredColumnstoreIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_nonclustered_columnstore_index : 
        ///    CREATE NONCLUSTERED? COLUMNSTORE INDEX id_ ON full_table_ref ( column_name_list_with_order ) where_condition? create_columnstore_index_options? ON group_id 
        /// </summary>
        public static AstCreateNonclusteredColumnstoreIndex New(AstId id, AstFullTableRef fullTableRef, AstColumnNameListWithOrder columnNameListWithOrder, AstWhereCondition? whereCondition, AstCreateColumnstoreIndexOptions? createColumnstoreIndexOptions, AstGroupId groupId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(fullTableRef);
            list.Add(columnNameListWithOrder);
            list.Add(whereCondition);
            list.Add(createColumnstoreIndexOptions);
            list.Add(groupId);
            return new AstCreateNonclusteredColumnstoreIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_xml_index : CREATE  PRIMARY?  XML  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_id  RR_BRACKET  using_xml_index?  xml_index_options?
    /// </summary>
    public partial class AstCreateXmlIndex : AstBnfRule
    {
        
        private AstIndexId _indexId;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnId _columnId;
        
        private AstUsingXmlIndex? _usingXmlIndex;
        
        private AstXmlIndexOptions? _xmlIndexOptions;
        
        private static string _ruleValue = "CREATE  PRIMARY?  XML  INDEX  index_id  ON  full_table_ref  LR_BRACKET  column_id" +
            "  RR_BRACKET  using_xml_index?  xml_index_options?";
        
        private static string _ruleName = "create_xml_index";
        
        public AstCreateXmlIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUsingXmlIndex?>())
                {
                    this._usingXmlIndex = ((AstUsingXmlIndex?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions?>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateXmlIndex(Position p, AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnId columnId, AstUsingXmlIndex? usingXmlIndex, AstXmlIndexOptions? xmlIndexOptions) : 
                base(p)
        {
            this._indexId = indexId;
            this._fullTableRef = fullTableRef;
            this._columnId = columnId;
            this._usingXmlIndex = usingXmlIndex;
            this._xmlIndexOptions = xmlIndexOptions;
        }
        
        public AstCreateXmlIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUsingXmlIndex?>())
                {
                    this._usingXmlIndex = ((AstUsingXmlIndex?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlIndexOptions?>())
                {
                    this._xmlIndexOptions = ((AstXmlIndexOptions?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstUsingXmlIndex? UsingXmlIndex
        {
            get
            {
                return this._usingXmlIndex;
            }
        }
        
        public virtual AstXmlIndexOptions? XmlIndexOptions
        {
            get
            {
                return this._xmlIndexOptions;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateXmlIndex(this);
        }
        
        public static AstCreateXmlIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_xml_index : 
        ///    CREATE PRIMARY? XML INDEX index_id ON full_table_ref ( column_id ) using_xml_index? xml_index_options? 
        /// </summary>
        public static AstCreateXmlIndex New(AstIndexId indexId, AstFullTableRef fullTableRef, AstColumnId columnId, AstUsingXmlIndex? usingXmlIndex, AstXmlIndexOptions? xmlIndexOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(indexId);
            list.Add(fullTableRef);
            list.Add(columnId);
            list.Add(usingXmlIndex);
            list.Add(xmlIndexOptions);
            return new AstCreateXmlIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// using_xml_index : USING  XML  INDEX  index_id  index_using_xml_mode?
    /// </summary>
    public partial class AstUsingXmlIndex : AstBnfRule
    {
        
        private AstIndexId _indexId;
        
        private AstIndexUsingXmlMode? _indexUsingXmlMode;
        
        private static string _ruleValue = "USING  XML  INDEX  index_id  index_using_xml_mode?";
        
        private static string _ruleName = "using_xml_index";
        
        public AstUsingXmlIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexUsingXmlMode?>())
                {
                    this._indexUsingXmlMode = ((AstIndexUsingXmlMode?)(enumerator.Current));
                }
            }
        }
        
        public AstUsingXmlIndex(Position p, AstIndexId indexId, AstIndexUsingXmlMode? indexUsingXmlMode) : 
                base(p)
        {
            this._indexId = indexId;
            this._indexUsingXmlMode = indexUsingXmlMode;
        }
        
        public AstUsingXmlIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexUsingXmlMode?>())
                {
                    this._indexUsingXmlMode = ((AstIndexUsingXmlMode?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstIndexUsingXmlMode? IndexUsingXmlMode
        {
            get
            {
                return this._indexUsingXmlMode;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUsingXmlIndex(this);
        }
        
        public static AstUsingXmlIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// using_xml_index : 
        ///    USING XML INDEX index_id index_using_xml_mode? 
        /// </summary>
        public static AstUsingXmlIndex New(AstIndexId indexId, AstIndexUsingXmlMode? indexUsingXmlMode)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(indexId);
            list.Add(indexUsingXmlMode);
            return new AstUsingXmlIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_procedure : procedure_declaration  proc_keyword  schema_func_proc_ref  (SEMI  decimal)?  procedure_declaration_arguments?  procedure_options?  (FOR  REPLICATION)?  AS  replication_alias
    /// </summary>
    public partial class AstCreateOrAlterProcedure : AstBnfRule
    {
        
        private AstProcedureDeclaration _procedureDeclaration;
        
        private AstProcKeyword _procKeyword;
        
        private AstSchemaFuncProcRef _schemaFuncProcRef;
        
        private AstDecimal _decimal;
        
        private AstProcedureDeclarationArguments? _procedureDeclarationArguments;
        
        private AstProcedureOptions? _procedureOptions;
        
        private AstReplicationAlias _replicationAlias;
        
        private static string _ruleValue = "procedure_declaration  proc_keyword  schema_func_proc_ref  (SEMI  decimal)?  proc" +
            "edure_declaration_arguments?  procedure_options?  (FOR  REPLICATION)?  AS  repli" +
            "cation_alias";
        
        private static string _ruleName = "create_or_alter_procedure";
        
        public AstCreateOrAlterProcedure(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureDeclaration>())
                {
                    this._procedureDeclaration = ((AstProcedureDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureDeclarationArguments?>())
                {
                    this._procedureDeclarationArguments = ((AstProcedureDeclarationArguments?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureOptions?>())
                {
                    this._procedureOptions = ((AstProcedureOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReplicationAlias>())
                {
                    this._replicationAlias = ((AstReplicationAlias)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterProcedure(Position p, AstProcedureDeclaration procedureDeclaration, AstProcKeyword procKeyword, AstSchemaFuncProcRef schemaFuncProcRef, AstDecimal @decimal, AstProcedureDeclarationArguments? procedureDeclarationArguments, AstProcedureOptions? procedureOptions, AstReplicationAlias replicationAlias) : 
                base(p)
        {
            this._procedureDeclaration = procedureDeclaration;
            this._procKeyword = procKeyword;
            this._schemaFuncProcRef = schemaFuncProcRef;
            this._decimal = @decimal;
            this._procedureDeclarationArguments = procedureDeclarationArguments;
            this._procedureOptions = procedureOptions;
            this._replicationAlias = replicationAlias;
        }
        
        public AstCreateOrAlterProcedure(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcedureDeclaration>())
                {
                    this._procedureDeclaration = ((AstProcedureDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._schemaFuncProcRef = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureDeclarationArguments?>())
                {
                    this._procedureDeclarationArguments = ((AstProcedureDeclarationArguments?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureOptions?>())
                {
                    this._procedureOptions = ((AstProcedureOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstReplicationAlias>())
                {
                    this._replicationAlias = ((AstReplicationAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcedureDeclaration ProcedureDeclaration
        {
            get
            {
                return this._procedureDeclaration;
            }
        }
        
        public virtual AstProcKeyword ProcKeyword
        {
            get
            {
                return this._procKeyword;
            }
        }
        
        public virtual AstSchemaFuncProcRef SchemaFuncProcRef
        {
            get
            {
                return this._schemaFuncProcRef;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstProcedureDeclarationArguments? ProcedureDeclarationArguments
        {
            get
            {
                return this._procedureDeclarationArguments;
            }
        }
        
        public virtual AstProcedureOptions? ProcedureOptions
        {
            get
            {
                return this._procedureOptions;
            }
        }
        
        public virtual AstReplicationAlias ReplicationAlias
        {
            get
            {
                return this._replicationAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterProcedure(this);
        }
        
        public static AstCreateOrAlterProcedure? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_procedure : 
        ///    procedure_declaration proc_keyword schema_func_proc_ref ; decimal procedure_declaration_arguments? procedure_options? FOR REPLICATION AS replication_alias 
        /// </summary>
        public static AstCreateOrAlterProcedure New(AstProcedureDeclaration procedureDeclaration, AstProcKeyword procKeyword, AstSchemaFuncProcRef schemaFuncProcRef, AstDecimal @decimal, AstProcedureDeclarationArguments? procedureDeclarationArguments, AstProcedureOptions? procedureOptions, AstReplicationAlias replicationAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(procedureDeclaration);
            list.Add(procKeyword);
            list.Add(schemaFuncProcRef);
            list.Add(@decimal);
            list.Add(procedureDeclarationArguments);
            list.Add(procedureOptions);
            list.Add(replicationAlias);
            return new AstCreateOrAlterProcedure(Position.Default, list);
        }
    }
    
    /// <summary>
    /// as_external_name : EXTERNAL  NAME  assembly_id  DOT  class_id  DOT  method_id
    /// </summary>
    public partial class AstAsExternalName : AstBnfRule
    {
        
        private AstAssemblyId _assemblyId;
        
        private AstClassId _classId;
        
        private AstMethodId _methodId;
        
        private static string _ruleValue = "EXTERNAL  NAME  assembly_id  DOT  class_id  DOT  method_id";
        
        private static string _ruleName = "as_external_name";
        
        public AstAsExternalName(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public AstAsExternalName(Position p, AstAssemblyId assemblyId, AstClassId classId, AstMethodId methodId) : 
                base(p)
        {
            this._assemblyId = assemblyId;
            this._classId = classId;
            this._methodId = methodId;
        }
        
        public AstAsExternalName(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAssemblyId>())
                {
                    this._assemblyId = ((AstAssemblyId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClassId>())
                {
                    this._classId = ((AstClassId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMethodId>())
                {
                    this._methodId = ((AstMethodId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAssemblyId AssemblyId
        {
            get
            {
                return this._assemblyId;
            }
        }
        
        public virtual AstClassId ClassId
        {
            get
            {
                return this._classId;
            }
        }
        
        public virtual AstMethodId MethodId
        {
            get
            {
                return this._methodId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsExternalName(this);
        }
        
        public static AstAsExternalName? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// as_external_name : 
        ///    EXTERNAL NAME assembly_id . class_id . method_id 
        /// </summary>
        public static AstAsExternalName New(AstAssemblyId assemblyId, AstClassId classId, AstMethodId methodId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(assemblyId);
            list.Add(classId);
            list.Add(methodId);
            return new AstAsExternalName(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_dml_trigger : create_or_alter  TRIGGER  schema_trigger_ref  ON  full_table_ref  dml_trigger_options?  for_after_instead  dml_trigger_operations  (WITH  APPEND)?  (NOT  FOR  REPLICATION)?  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDmlTrigger : AstBnfRule
    {
        
        private AstCreateOrAlter _createOrAlter;
        
        private AstSchemaTriggerRef _schemaTriggerRef;
        
        private AstFullTableRef _fullTableRef;
        
        private AstDmlTriggerOptions? _dmlTriggerOptions;
        
        private AstForAfterInstead _forAfterInstead;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        private static string _ruleValue = "create_or_alter  TRIGGER  schema_trigger_ref  ON  full_table_ref  dml_trigger_opt" +
            "ions?  for_after_instead  dml_trigger_operations  (WITH  APPEND)?  (NOT  FOR  RE" +
            "PLICATION)?  AS  sql_clauses";
        
        private static string _ruleName = "create_or_alter_dml_trigger";
        
        public AstCreateOrAlterDmlTrigger(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateOrAlter>())
                {
                    this._createOrAlter = ((AstCreateOrAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions?>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfterInstead>())
                {
                    this._forAfterInstead = ((AstForAfterInstead)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDmlTrigger(Position p, AstCreateOrAlter createOrAlter, AstSchemaTriggerRef schemaTriggerRef, AstFullTableRef fullTableRef, AstDmlTriggerOptions? dmlTriggerOptions, AstForAfterInstead forAfterInstead, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses) : 
                base(p)
        {
            this._createOrAlter = createOrAlter;
            this._schemaTriggerRef = schemaTriggerRef;
            this._fullTableRef = fullTableRef;
            this._dmlTriggerOptions = dmlTriggerOptions;
            this._forAfterInstead = forAfterInstead;
            this._dmlTriggerOperations = dmlTriggerOperations;
            this._sqlClauses = sqlClauses;
        }
        
        public AstCreateOrAlterDmlTrigger(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateOrAlter>())
                {
                    this._createOrAlter = ((AstCreateOrAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions?>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfterInstead>())
                {
                    this._forAfterInstead = ((AstForAfterInstead)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateOrAlter CreateOrAlter
        {
            get
            {
                return this._createOrAlter;
            }
        }
        
        public virtual AstSchemaTriggerRef SchemaTriggerRef
        {
            get
            {
                return this._schemaTriggerRef;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstDmlTriggerOptions? DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstForAfterInstead ForAfterInstead
        {
            get
            {
                return this._forAfterInstead;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDmlTrigger(this);
        }
        
        public static AstCreateOrAlterDmlTrigger? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_dml_trigger : 
        ///    create_or_alter TRIGGER schema_trigger_ref ON full_table_ref dml_trigger_options? for_after_instead dml_trigger_operations WITH APPEND NOT FOR REPLICATION AS sql_clauses 
        /// </summary>
        public static AstCreateOrAlterDmlTrigger New(AstCreateOrAlter createOrAlter, AstSchemaTriggerRef schemaTriggerRef, AstFullTableRef fullTableRef, AstDmlTriggerOptions? dmlTriggerOptions, AstForAfterInstead forAfterInstead, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(schemaTriggerRef);
            list.Add(fullTableRef);
            list.Add(dmlTriggerOptions);
            list.Add(forAfterInstead);
            list.Add(dmlTriggerOperations);
            list.Add(sqlClauses);
            return new AstCreateOrAlterDmlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_ddl_trigger : create_or_alter  TRIGGER  schema_trigger_ref  ON  all_server_database  dml_trigger_options?  for_after  dml_trigger_operations  AS  sql_clauses
    /// </summary>
    public partial class AstCreateOrAlterDdlTrigger : AstBnfRule
    {
        
        private AstCreateOrAlter _createOrAlter;
        
        private AstSchemaTriggerRef _schemaTriggerRef;
        
        private AstAllServerDatabase _allServerDatabase;
        
        private AstDmlTriggerOptions? _dmlTriggerOptions;
        
        private AstForAfter _forAfter;
        
        private AstDmlTriggerOperations _dmlTriggerOperations;
        
        private AstSqlClauses _sqlClauses;
        
        private static string _ruleValue = "create_or_alter  TRIGGER  schema_trigger_ref  ON  all_server_database  dml_trigge" +
            "r_options?  for_after  dml_trigger_operations  AS  sql_clauses";
        
        private static string _ruleName = "create_or_alter_ddl_trigger";
        
        public AstCreateOrAlterDdlTrigger(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateOrAlter>())
                {
                    this._createOrAlter = ((AstCreateOrAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions?>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfter>())
                {
                    this._forAfter = ((AstForAfter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterDdlTrigger(Position p, AstCreateOrAlter createOrAlter, AstSchemaTriggerRef schemaTriggerRef, AstAllServerDatabase allServerDatabase, AstDmlTriggerOptions? dmlTriggerOptions, AstForAfter forAfter, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses) : 
                base(p)
        {
            this._createOrAlter = createOrAlter;
            this._schemaTriggerRef = schemaTriggerRef;
            this._allServerDatabase = allServerDatabase;
            this._dmlTriggerOptions = dmlTriggerOptions;
            this._forAfter = forAfter;
            this._dmlTriggerOperations = dmlTriggerOperations;
            this._sqlClauses = sqlClauses;
        }
        
        public AstCreateOrAlterDdlTrigger(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateOrAlter>())
                {
                    this._createOrAlter = ((AstCreateOrAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRef>())
                {
                    this._schemaTriggerRef = ((AstSchemaTriggerRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOptions?>())
                {
                    this._dmlTriggerOptions = ((AstDmlTriggerOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstForAfter>())
                {
                    this._forAfter = ((AstForAfter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDmlTriggerOperations>())
                {
                    this._dmlTriggerOperations = ((AstDmlTriggerOperations)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses>())
                {
                    this._sqlClauses = ((AstSqlClauses)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateOrAlter CreateOrAlter
        {
            get
            {
                return this._createOrAlter;
            }
        }
        
        public virtual AstSchemaTriggerRef SchemaTriggerRef
        {
            get
            {
                return this._schemaTriggerRef;
            }
        }
        
        public virtual AstAllServerDatabase AllServerDatabase
        {
            get
            {
                return this._allServerDatabase;
            }
        }
        
        public virtual AstDmlTriggerOptions? DmlTriggerOptions
        {
            get
            {
                return this._dmlTriggerOptions;
            }
        }
        
        public virtual AstForAfter ForAfter
        {
            get
            {
                return this._forAfter;
            }
        }
        
        public virtual AstDmlTriggerOperations DmlTriggerOperations
        {
            get
            {
                return this._dmlTriggerOperations;
            }
        }
        
        public virtual AstSqlClauses SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterDdlTrigger(this);
        }
        
        public static AstCreateOrAlterDdlTrigger? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_ddl_trigger : 
        ///    create_or_alter TRIGGER schema_trigger_ref ON all_server_database dml_trigger_options? for_after dml_trigger_operations AS sql_clauses 
        /// </summary>
        public static AstCreateOrAlterDdlTrigger New(AstCreateOrAlter createOrAlter, AstSchemaTriggerRef schemaTriggerRef, AstAllServerDatabase allServerDatabase, AstDmlTriggerOptions? dmlTriggerOptions, AstForAfter forAfter, AstDmlTriggerOperations dmlTriggerOperations, AstSqlClauses sqlClauses)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(schemaTriggerRef);
            list.Add(allServerDatabase);
            list.Add(dmlTriggerOptions);
            list.Add(forAfter);
            list.Add(dmlTriggerOperations);
            list.Add(sqlClauses);
            return new AstCreateOrAlterDdlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_or_alter_function : create_or_alter  FUNCTION  funcName = schema_func_proc_ref  ((LR_BRACKET  procedure_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | func_body_returns_table | func_body_returns_scalar)
    /// </summary>
    public partial class AstCreateOrAlterFunction : AstBnfRule
    {
        
        private AstCreateOrAlter _createOrAlter;
        
        private AstSchemaFuncProcRef _funcName;
        
        private AstProcedureParams _procedureParams;
        
        private AstFuncBodyReturnsSelect _funcBodyReturnsSelect;
        
        private AstFuncBodyReturnsTable _funcBodyReturnsTable;
        
        private AstFuncBodyReturnsScalar _funcBodyReturnsScalar;
        
        private static string _ruleValue = "create_or_alter  FUNCTION  funcName = schema_func_proc_ref  ((LR_BRACKET  procedu" +
            "re_params  RR_BRACKET) | LR_BRACKET  RR_BRACKET)  (func_body_returns_select | fu" +
            "nc_body_returns_table | func_body_returns_scalar)";
        
        private static string _ruleName = "create_or_alter_function";
        
        public AstCreateOrAlterFunction(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateOrAlter>())
                {
                    this._createOrAlter = ((AstCreateOrAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._funcName = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureParams>())
                {
                    this._procedureParams = ((AstProcedureParams)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncBodyReturnsSelect>())
                {
                    this._funcBodyReturnsSelect = ((AstFuncBodyReturnsSelect)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncBodyReturnsTable>())
                {
                    this._funcBodyReturnsTable = ((AstFuncBodyReturnsTable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncBodyReturnsScalar>())
                {
                    this._funcBodyReturnsScalar = ((AstFuncBodyReturnsScalar)(enumerator.Current));
                }
            }
        }
        
        public AstCreateOrAlterFunction(Position p, AstCreateOrAlter createOrAlter, AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsSelect funcBodyReturnsSelect, AstFuncBodyReturnsTable funcBodyReturnsTable, AstFuncBodyReturnsScalar funcBodyReturnsScalar) : 
                base(p)
        {
            this._createOrAlter = createOrAlter;
            this._funcName = funcName;
            this._procedureParams = procedureParams;
            this._funcBodyReturnsSelect = funcBodyReturnsSelect;
            this._funcBodyReturnsTable = funcBodyReturnsTable;
            this._funcBodyReturnsScalar = funcBodyReturnsScalar;
        }
        
        public AstCreateOrAlterFunction(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCreateOrAlter>())
                {
                    this._createOrAlter = ((AstCreateOrAlter)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaFuncProcRef>())
                {
                    this._funcName = ((AstSchemaFuncProcRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstProcedureParams>())
                {
                    this._procedureParams = ((AstProcedureParams)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncBodyReturnsSelect>())
                {
                    this._funcBodyReturnsSelect = ((AstFuncBodyReturnsSelect)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncBodyReturnsTable>())
                {
                    this._funcBodyReturnsTable = ((AstFuncBodyReturnsTable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncBodyReturnsScalar>())
                {
                    this._funcBodyReturnsScalar = ((AstFuncBodyReturnsScalar)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCreateOrAlter CreateOrAlter
        {
            get
            {
                return this._createOrAlter;
            }
        }
        
        public virtual AstSchemaFuncProcRef Funcname
        {
            get
            {
                return this._funcName;
            }
        }
        
        public virtual AstProcedureParams ProcedureParams
        {
            get
            {
                return this._procedureParams;
            }
        }
        
        public virtual AstFuncBodyReturnsSelect FuncBodyReturnsSelect
        {
            get
            {
                return this._funcBodyReturnsSelect;
            }
        }
        
        public virtual AstFuncBodyReturnsTable FuncBodyReturnsTable
        {
            get
            {
                return this._funcBodyReturnsTable;
            }
        }
        
        public virtual AstFuncBodyReturnsScalar FuncBodyReturnsScalar
        {
            get
            {
                return this._funcBodyReturnsScalar;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateOrAlterFunction(this);
        }
        
        public static AstCreateOrAlterFunction? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    create_or_alter FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_select 
        /// </summary>
        public static AstCreateOrAlterFunction New(AstCreateOrAlter createOrAlter, AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsSelect funcBodyReturnsSelect)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(funcName);
            list.Add(procedureParams);
            list.Add(funcBodyReturnsSelect);
            return new AstCreateOrAlterFunction(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    create_or_alter FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_select 
        /// </summary>
        public static AstCreateOrAlterFunction New(AstCreateOrAlter createOrAlter, AstSchemaFuncProcRef funcName, AstFuncBodyReturnsSelect funcBodyReturnsSelect)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(funcName);
            list.Add(funcBodyReturnsSelect);
            return new AstCreateOrAlterFunction(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    create_or_alter FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_table 
        /// </summary>
        public static AstCreateOrAlterFunction New(AstCreateOrAlter createOrAlter, AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsTable funcBodyReturnsTable)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(funcName);
            list.Add(procedureParams);
            list.Add(funcBodyReturnsTable);
            return new AstCreateOrAlterFunction(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    create_or_alter FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_table 
        /// </summary>
        public static AstCreateOrAlterFunction New(AstCreateOrAlter createOrAlter, AstSchemaFuncProcRef funcName, AstFuncBodyReturnsTable funcBodyReturnsTable)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(funcName);
            list.Add(funcBodyReturnsTable);
            return new AstCreateOrAlterFunction(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    create_or_alter FUNCTION funcName=schema_func_proc_ref ( procedure_params ) func_body_returns_scalar 
        /// </summary>
        public static AstCreateOrAlterFunction New(AstCreateOrAlter createOrAlter, AstSchemaFuncProcRef funcName, AstProcedureParams procedureParams, AstFuncBodyReturnsScalar funcBodyReturnsScalar)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(funcName);
            list.Add(procedureParams);
            list.Add(funcBodyReturnsScalar);
            return new AstCreateOrAlterFunction(Position.Default, list);
        }
        
        /// <summary>
        /// create_or_alter_function : 
        ///    create_or_alter FUNCTION funcName=schema_func_proc_ref ( ) func_body_returns_scalar 
        /// </summary>
        public static AstCreateOrAlterFunction New(AstCreateOrAlter createOrAlter, AstSchemaFuncProcRef funcName, AstFuncBodyReturnsScalar funcBodyReturnsScalar)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(createOrAlter);
            list.Add(funcName);
            list.Add(funcBodyReturnsScalar);
            return new AstCreateOrAlterFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// func_body_returns_select : RETURNS  TABLE  function_options?  AS?  (as_external_name | RETURN  (LR_BRACKET  select_statement_standalone  RR_BRACKET | select_statement_standalone))
    /// </summary>
    public partial class AstFuncBodyReturnsSelect : AstBnfRule
    {
        
        private AstFunctionOptions? _functionOptions;
        
        private AstAsExternalName _asExternalName;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        private static string _ruleValue = "RETURNS  TABLE  function_options?  AS?  (as_external_name | RETURN  (LR_BRACKET  " +
            "select_statement_standalone  RR_BRACKET | select_statement_standalone))";
        
        private static string _ruleName = "func_body_returns_select";
        
        public AstFuncBodyReturnsSelect(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions?>())
                {
                    this._functionOptions = ((AstFunctionOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsSelect(Position p, AstFunctionOptions? functionOptions, AstAsExternalName asExternalName, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._functionOptions = functionOptions;
            this._asExternalName = asExternalName;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstFuncBodyReturnsSelect(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFunctionOptions?>())
                {
                    this._functionOptions = ((AstFunctionOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFunctionOptions? FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public virtual AstAsExternalName AsExternalName
        {
            get
            {
                return this._asExternalName;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsSelect(this);
        }
        
        public static AstFuncBodyReturnsSelect? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// func_body_returns_select : 
        ///    RETURNS TABLE function_options? AS? as_external_name 
        /// </summary>
        public static AstFuncBodyReturnsSelect New(AstFunctionOptions? functionOptions, AstAsExternalName asExternalName)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(functionOptions);
            list.Add(asExternalName);
            return new AstFuncBodyReturnsSelect(Position.Default, list);
        }
        
        /// <summary>
        /// func_body_returns_select : 
        ///    RETURNS TABLE function_options? AS? RETURN ( select_statement_standalone ) 
        /// </summary>
        public static AstFuncBodyReturnsSelect New(AstFunctionOptions? functionOptions, AstSelectStatementStandalone selectStatementStandalone)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(functionOptions);
            list.Add(selectStatementStandalone);
            return new AstFuncBodyReturnsSelect(Position.Default, list);
        }
    }
    
    /// <summary>
    /// func_body_returns_table : RETURNS  local_id  table_type_definition  function_options?  AS?  (as_external_name | BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?)
    /// </summary>
    public partial class AstFuncBodyReturnsTable : AstBnfRule
    {
        
        private AstLocalId _localId;
        
        private AstTableTypeDefinition _tableTypeDefinition;
        
        private AstFunctionOptions? _functionOptions;
        
        private AstAsExternalName _asExternalName;
        
        private AstSqlClauses? _sqlClauses;
        
        private static string _ruleValue = "RETURNS  local_id  table_type_definition  function_options?  AS?  (as_external_na" +
            "me | BEGIN  sql_clauses?  RETURN  SEMI?  END  SEMI?)";
        
        private static string _ruleName = "func_body_returns_table";
        
        public AstFuncBodyReturnsTable(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions?>())
                {
                    this._functionOptions = ((AstFunctionOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses?>())
                {
                    this._sqlClauses = ((AstSqlClauses?)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsTable(Position p, AstLocalId localId, AstTableTypeDefinition tableTypeDefinition, AstFunctionOptions? functionOptions, AstAsExternalName asExternalName, AstSqlClauses? sqlClauses) : 
                base(p)
        {
            this._localId = localId;
            this._tableTypeDefinition = tableTypeDefinition;
            this._functionOptions = functionOptions;
            this._asExternalName = asExternalName;
            this._sqlClauses = sqlClauses;
        }
        
        public AstFuncBodyReturnsTable(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeDefinition>())
                {
                    this._tableTypeDefinition = ((AstTableTypeDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions?>())
                {
                    this._functionOptions = ((AstFunctionOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClauses?>())
                {
                    this._sqlClauses = ((AstSqlClauses?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstTableTypeDefinition TableTypeDefinition
        {
            get
            {
                return this._tableTypeDefinition;
            }
        }
        
        public virtual AstFunctionOptions? FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public virtual AstAsExternalName AsExternalName
        {
            get
            {
                return this._asExternalName;
            }
        }
        
        public virtual AstSqlClauses? SqlClauses
        {
            get
            {
                return this._sqlClauses;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsTable(this);
        }
        
        public static AstFuncBodyReturnsTable? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// func_body_returns_table : 
        ///    RETURNS local_id table_type_definition function_options? AS? as_external_name 
        /// </summary>
        public static AstFuncBodyReturnsTable New(AstLocalId localId, AstTableTypeDefinition tableTypeDefinition, AstFunctionOptions? functionOptions, AstAsExternalName asExternalName)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localId);
            list.Add(tableTypeDefinition);
            list.Add(functionOptions);
            list.Add(asExternalName);
            return new AstFuncBodyReturnsTable(Position.Default, list);
        }
        
        /// <summary>
        /// func_body_returns_table : 
        ///    RETURNS local_id table_type_definition function_options? AS? BEGIN sql_clauses? RETURN SEMI? END SEMI? 
        /// </summary>
        public static AstFuncBodyReturnsTable New(AstLocalId localId, AstTableTypeDefinition tableTypeDefinition, AstFunctionOptions? functionOptions, AstSqlClauses? sqlClauses)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localId);
            list.Add(tableTypeDefinition);
            list.Add(functionOptions);
            list.Add(sqlClauses);
            return new AstFuncBodyReturnsTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// func_body_returns_scalar : RETURNS  data_type  function_options?  AS?  (as_external_name | BEGIN  sql_clause?  RETURN  ret = expression  SEMI?  END)
    /// </summary>
    public partial class AstFuncBodyReturnsScalar : AstBnfRule
    {
        
        private AstDataType _dataType;
        
        private AstFunctionOptions? _functionOptions;
        
        private AstAsExternalName _asExternalName;
        
        private AstSqlClause? _sqlClause;
        
        private AstExpression _ret;
        
        private static string _ruleValue = "RETURNS  data_type  function_options?  AS?  (as_external_name | BEGIN  sql_clause" +
            "?  RETURN  ret = expression  SEMI?  END)";
        
        private static string _ruleName = "func_body_returns_scalar";
        
        public AstFuncBodyReturnsScalar(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions?>())
                {
                    this._functionOptions = ((AstFunctionOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause?>())
                {
                    this._sqlClause = ((AstSqlClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._ret = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstFuncBodyReturnsScalar(Position p, AstDataType dataType, AstFunctionOptions? functionOptions, AstAsExternalName asExternalName, AstSqlClause? sqlClause, AstExpression ret) : 
                base(p)
        {
            this._dataType = dataType;
            this._functionOptions = functionOptions;
            this._asExternalName = asExternalName;
            this._sqlClause = sqlClause;
            this._ret = ret;
        }
        
        public AstFuncBodyReturnsScalar(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionOptions?>())
                {
                    this._functionOptions = ((AstFunctionOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsExternalName>())
                {
                    this._asExternalName = ((AstAsExternalName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlClause?>())
                {
                    this._sqlClause = ((AstSqlClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._ret = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstFunctionOptions? FunctionOptions
        {
            get
            {
                return this._functionOptions;
            }
        }
        
        public virtual AstAsExternalName AsExternalName
        {
            get
            {
                return this._asExternalName;
            }
        }
        
        public virtual AstSqlClause? SqlClause
        {
            get
            {
                return this._sqlClause;
            }
        }
        
        public virtual AstExpression Ret
        {
            get
            {
                return this._ret;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFuncBodyReturnsScalar(this);
        }
        
        public static AstFuncBodyReturnsScalar? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// func_body_returns_scalar : 
        ///    RETURNS data_type function_options? AS? as_external_name 
        /// </summary>
        public static AstFuncBodyReturnsScalar New(AstDataType dataType, AstFunctionOptions? functionOptions, AstAsExternalName asExternalName)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(dataType);
            list.Add(functionOptions);
            list.Add(asExternalName);
            return new AstFuncBodyReturnsScalar(Position.Default, list);
        }
        
        /// <summary>
        /// func_body_returns_scalar : 
        ///    RETURNS data_type function_options? AS? BEGIN sql_clause? RETURN ret=expression SEMI? END 
        /// </summary>
        public static AstFuncBodyReturnsScalar New(AstDataType dataType, AstFunctionOptions? functionOptions, AstSqlClause? sqlClause, AstExpression ret)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(dataType);
            list.Add(functionOptions);
            list.Add(sqlClause);
            list.Add(ret);
            return new AstFuncBodyReturnsScalar(Position.Default, list);
        }
    }
    
    /// <summary>
    /// procedure_param : arg_name = local_id  AS?  schema_type_ref  VARYING?  (EQUAL  default_val = default_value)?  param_way?
    /// </summary>
    public partial class AstProcedureParam : AstBnfRule
    {
        
        private AstLocalId _argName;
        
        private AstSchemaTypeRef _schemaTypeRef;
        
        private AstDefaultValue _defaultVal;
        
        private AstParamWay? _paramWay;
        
        private static string _ruleValue = "arg_name = local_id  AS?  schema_type_ref  VARYING?  (EQUAL  default_val = defaul" +
            "t_value)?  param_way?";
        
        private static string _ruleName = "procedure_param";
        
        public AstProcedureParam(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._argName = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTypeRef>())
                {
                    this._schemaTypeRef = ((AstSchemaTypeRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultValue>())
                {
                    this._defaultVal = ((AstDefaultValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstParamWay?>())
                {
                    this._paramWay = ((AstParamWay?)(enumerator.Current));
                }
            }
        }
        
        public AstProcedureParam(Position p, AstLocalId argName, AstSchemaTypeRef schemaTypeRef, AstDefaultValue defaultVal, AstParamWay? paramWay) : 
                base(p)
        {
            this._argName = argName;
            this._schemaTypeRef = schemaTypeRef;
            this._defaultVal = defaultVal;
            this._paramWay = paramWay;
        }
        
        public AstProcedureParam(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._argName = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTypeRef>())
                {
                    this._schemaTypeRef = ((AstSchemaTypeRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDefaultValue>())
                {
                    this._defaultVal = ((AstDefaultValue)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstParamWay?>())
                {
                    this._paramWay = ((AstParamWay?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId ArgName
        {
            get
            {
                return this._argName;
            }
        }
        
        public virtual AstSchemaTypeRef SchemaTypeRef
        {
            get
            {
                return this._schemaTypeRef;
            }
        }
        
        public virtual AstDefaultValue DefaultVal
        {
            get
            {
                return this._defaultVal;
            }
        }
        
        public virtual AstParamWay? ParamWay
        {
            get
            {
                return this._paramWay;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitProcedureParam(this);
        }
        
        public static AstProcedureParam? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// procedure_param : 
        ///    arg_name=local_id AS? schema_type_ref VARYING? EQUAL default_val=default_value param_way? 
        /// </summary>
        public static AstProcedureParam New(AstLocalId argName, AstSchemaTypeRef schemaTypeRef, AstDefaultValue defaultVal, AstParamWay? paramWay)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(argName);
            list.Add(schemaTypeRef);
            list.Add(defaultVal);
            list.Add(paramWay);
            return new AstProcedureParam(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_statistics : CREATE  STATISTICS  id_  ON  full_table_ref  LR_BRACKET  column_name_list  RR_BRACKET  (WITH  statistics_with  (COMMA  NORECOMPUTE)?  (COMMA  INCREMENTAL  EQUAL  on_off)?)?
    /// </summary>
    public partial class AstCreateStatistics : AstBnfRule
    {
        
        private AstId _id;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _columnNameList;
        
        private AstStatisticsWith _statisticsWith;
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "CREATE  STATISTICS  id_  ON  full_table_ref  LR_BRACKET  column_name_list  RR_BRA" +
            "CKET  (WITH  statistics_with  (COMMA  NORECOMPUTE)?  (COMMA  INCREMENTAL  EQUAL " +
            " on_off)?)?";
        
        private static string _ruleName = "create_statistics";
        
        public AstCreateStatistics(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsWith>())
                {
                    this._statisticsWith = ((AstStatisticsWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstCreateStatistics(Position p, AstId id, AstFullTableRef fullTableRef, AstColumnNameList columnNameList, AstStatisticsWith statisticsWith, AstOnOff onOff) : 
                base(p)
        {
            this._id = id;
            this._fullTableRef = fullTableRef;
            this._columnNameList = columnNameList;
            this._statisticsWith = statisticsWith;
            this._onOff = onOff;
        }
        
        public AstCreateStatistics(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStatisticsWith>())
                {
                    this._statisticsWith = ((AstStatisticsWith)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstStatisticsWith StatisticsWith
        {
            get
            {
                return this._statisticsWith;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateStatistics(this);
        }
        
        public static AstCreateStatistics? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_statistics : 
        ///    CREATE STATISTICS id_ ON full_table_ref ( column_name_list ) WITH statistics_with , NORECOMPUTE , INCREMENTAL EQUAL on_off 
        /// </summary>
        public static AstCreateStatistics New(AstId id, AstFullTableRef fullTableRef, AstColumnNameList columnNameList, AstStatisticsWith statisticsWith, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(fullTableRef);
            list.Add(columnNameList);
            list.Add(statisticsWith);
            list.Add(onOff);
            return new AstCreateStatistics(Position.Default, list);
        }
    }
    
    /// <summary>
    /// update_statistics : UPDATE  STATISTICS  complete_table_ref  (id_ | LR_BRACKET  ids  RR_BRACKET)?  update_statistics_options?
    /// </summary>
    public partial class AstUpdateStatistics : AstBnfRule
    {
        
        private AstCompleteTableRef _completeTableRef;
        
        private AstId _id;
        
        private AstIds _ids;
        
        private AstUpdateStatisticsOptions? _updateStatisticsOptions;
        
        private static string _ruleValue = "UPDATE  STATISTICS  complete_table_ref  (id_ | LR_BRACKET  ids  RR_BRACKET)?  upd" +
            "ate_statistics_options?";
        
        private static string _ruleName = "update_statistics";
        
        public AstUpdateStatistics(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions?>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions?)(enumerator.Current));
                }
            }
        }
        
        public AstUpdateStatistics(Position p, AstCompleteTableRef completeTableRef, AstId id, AstIds ids, AstUpdateStatisticsOptions? updateStatisticsOptions) : 
                base(p)
        {
            this._completeTableRef = completeTableRef;
            this._id = id;
            this._ids = ids;
            this._updateStatisticsOptions = updateStatisticsOptions;
        }
        
        public AstUpdateStatistics(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateStatisticsOptions?>())
                {
                    this._updateStatisticsOptions = ((AstUpdateStatisticsOptions?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstIds Ids
        {
            get
            {
                return this._ids;
            }
        }
        
        public virtual AstUpdateStatisticsOptions? UpdateStatisticsOptions
        {
            get
            {
                return this._updateStatisticsOptions;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUpdateStatistics(this);
        }
        
        public static AstUpdateStatistics? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// update_statistics : 
        ///    UPDATE STATISTICS complete_table_ref id_ update_statistics_options? 
        /// </summary>
        public static AstUpdateStatistics New(AstCompleteTableRef completeTableRef, AstId id, AstUpdateStatisticsOptions? updateStatisticsOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(completeTableRef);
            list.Add(id);
            list.Add(updateStatisticsOptions);
            return new AstUpdateStatistics(Position.Default, list);
        }
        
        /// <summary>
        /// update_statistics : 
        ///    UPDATE STATISTICS complete_table_ref ( ids ) update_statistics_options? 
        /// </summary>
        public static AstUpdateStatistics New(AstCompleteTableRef completeTableRef, AstIds ids, AstUpdateStatisticsOptions? updateStatisticsOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(completeTableRef);
            list.Add(ids);
            list.Add(updateStatisticsOptions);
            return new AstUpdateStatistics(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_table : CREATE  TABLE  full_table_ref  LR_BRACKET  column_def_table_constraints  table_indices_list?  RR_BRACKET  (LOCK  simple_id)?  table_options?  (ON  on = group_id | DEFAULT)?  (TEXTIMAGE_ON  text_image = group_id | DEFAULT)?
    /// </summary>
    public partial class AstCreateTable : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableIndicesList? _tableIndicesList;
        
        private AstSimpleId _simpleId;
        
        private AstTableOptions? _tableOptions;
        
        private AstGroupId _on;
        
        private AstGroupId _textImage;
        
        private static string _ruleValue = "CREATE  TABLE  full_table_ref  LR_BRACKET  column_def_table_constraints  table_in" +
            "dices_list?  RR_BRACKET  (LOCK  simple_id)?  table_options?  (ON  on = group_id " +
            "| DEFAULT)?  (TEXTIMAGE_ON  text_image = group_id | DEFAULT)?";
        
        private static string _ruleName = "create_table";
        
        public AstCreateTable(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableIndicesList?>())
                {
                    this._tableIndicesList = ((AstTableIndicesList?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions?>())
                {
                    this._tableOptions = ((AstTableOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._on = ((AstGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._textImage = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTable(Position p, AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList? tableIndicesList, AstSimpleId simpleId, AstTableOptions? tableOptions, AstGroupId on, AstGroupId textImage) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._columnDefTableConstraints = columnDefTableConstraints;
            this._tableIndicesList = tableIndicesList;
            this._simpleId = simpleId;
            this._tableOptions = tableOptions;
            this._on = on;
            this._textImage = textImage;
        }
        
        public AstCreateTable(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableIndicesList?>())
                {
                    this._tableIndicesList = ((AstTableIndicesList?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSimpleId>())
                {
                    this._simpleId = ((AstSimpleId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions?>())
                {
                    this._tableOptions = ((AstTableOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._on = ((AstGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupId>())
                {
                    this._textImage = ((AstGroupId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstTableIndicesList? TableIndicesList
        {
            get
            {
                return this._tableIndicesList;
            }
        }
        
        public virtual AstSimpleId SimpleId
        {
            get
            {
                return this._simpleId;
            }
        }
        
        public virtual AstTableOptions? TableOptions
        {
            get
            {
                return this._tableOptions;
            }
        }
        
        public virtual AstGroupId On
        {
            get
            {
                return this._on;
            }
        }
        
        public virtual AstGroupId TextImage
        {
            get
            {
                return this._textImage;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTable(this);
        }
        
        public static AstCreateTable? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_table : 
        ///    CREATE TABLE full_table_ref ( column_def_table_constraints table_indices_list? ) LOCK simple_id table_options? ON on=group_id TEXTIMAGE_ON text_image=group_id 
        /// </summary>
        public static AstCreateTable New(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList? tableIndicesList, AstSimpleId simpleId, AstTableOptions? tableOptions, AstGroupId on, AstGroupId textImage)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            list.Add(tableIndicesList);
            list.Add(simpleId);
            list.Add(tableOptions);
            list.Add(on);
            list.Add(textImage);
            return new AstCreateTable(Position.Default, list);
        }
        
        /// <summary>
        /// create_table : 
        ///    CREATE TABLE full_table_ref ( column_def_table_constraints table_indices_list? ) LOCK simple_id table_options? DEFAULT TEXTIMAGE_ON text_image=group_id 
        /// </summary>
        public static AstCreateTable New(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList? tableIndicesList, AstSimpleId simpleId, AstTableOptions? tableOptions, AstGroupId textImage)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            list.Add(tableIndicesList);
            list.Add(simpleId);
            list.Add(tableOptions);
            list.Add(textImage);
            return new AstCreateTable(Position.Default, list);
        }
        
        /// <summary>
        /// create_table : 
        ///    CREATE TABLE full_table_ref ( column_def_table_constraints table_indices_list? ) LOCK simple_id table_options? DEFAULT DEFAULT 
        /// </summary>
        public static AstCreateTable New(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints, AstTableIndicesList? tableIndicesList, AstSimpleId simpleId, AstTableOptions? tableOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            list.Add(tableIndicesList);
            list.Add(simpleId);
            list.Add(tableOptions);
            return new AstCreateTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_table_index_option : PAD_INDEX  EQUAL  on_off | FILLFACTOR  EQUAL  decimal | IGNORE_DUP_KEY  EQUAL  on_off | STATISTICS_NORECOMPUTE  EQUAL  on_off | STATISTICS_INCREMENTAL  EQUAL  on_off | ALLOW_ROW_LOCKS  EQUAL  on_off | ALLOW_PAGE_LOCKS  EQUAL  on_off | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions? | XML_COMPRESSION  EQUAL  on_off  on_partitions?
    /// </summary>
    public partial class AstCreateTableIndexOption : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private AstDecimal _decimal;
        
        private AstIndexStrategy _indexStrategy;
        
        private AstOnPartitions? _onPartitions;
        
        private static string _ruleValue = @"PAD_INDEX  EQUAL  on_off | FILLFACTOR  EQUAL  decimal | IGNORE_DUP_KEY  EQUAL  on_off | STATISTICS_NORECOMPUTE  EQUAL  on_off | STATISTICS_INCREMENTAL  EQUAL  on_off | ALLOW_ROW_LOCKS  EQUAL  on_off | ALLOW_PAGE_LOCKS  EQUAL  on_off | OPTIMIZE_FOR_SEQUENTIAL_KEY  EQUAL  on_off | DATA_COMPRESSION  EQUAL  index_strategy  on_partitions? | XML_COMPRESSION  EQUAL  on_off  on_partitions?";
        
        private static string _ruleName = "create_table_index_option";
        
        public AstCreateTableIndexOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStrategy>())
                {
                    this._indexStrategy = ((AstIndexStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitions?>())
                {
                    this._onPartitions = ((AstOnPartitions?)(enumerator.Current));
                }
            }
        }
        
        public AstCreateTableIndexOption(Position p, AstOnOff onOff, AstDecimal @decimal, AstIndexStrategy indexStrategy, AstOnPartitions? onPartitions) : 
                base(p)
        {
            this._onOff = onOff;
            this._decimal = @decimal;
            this._indexStrategy = indexStrategy;
            this._onPartitions = onPartitions;
        }
        
        public AstCreateTableIndexOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIndexStrategy>())
                {
                    this._indexStrategy = ((AstIndexStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitions?>())
                {
                    this._onPartitions = ((AstOnPartitions?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstIndexStrategy IndexStrategy
        {
            get
            {
                return this._indexStrategy;
            }
        }
        
        public virtual AstOnPartitions? OnPartitions
        {
            get
            {
                return this._onPartitions;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateTableIndexOption(this);
        }
        
        public static AstCreateTableIndexOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    PAD_INDEX EQUAL on_off 
        /// </summary>
        public static AstCreateTableIndexOption New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    FILLFACTOR EQUAL decimal 
        /// </summary>
        public static AstCreateTableIndexOption New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    DATA_COMPRESSION EQUAL index_strategy on_partitions? 
        /// </summary>
        public static AstCreateTableIndexOption New(AstIndexStrategy indexStrategy, AstOnPartitions? onPartitions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(indexStrategy);
            list.Add(onPartitions);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
        
        /// <summary>
        /// create_table_index_option : 
        ///    XML_COMPRESSION EQUAL on_off on_partitions? 
        /// </summary>
        public static AstCreateTableIndexOption New(AstOnOff onOff, AstOnPartitions? onPartitions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            list.Add(onPartitions);
            return new AstCreateTableIndexOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_view : CREATE  VIEW  schema_view_ref  (LR_BRACKET  column_name_list  RR_BRACKET)?  view_attributes?  AS  select_statement_standalone  (WITH  CHECK  OPTION)?  SEMI?
    /// </summary>
    public partial class AstCreateView : AstBnfRule
    {
        
        private AstSchemaViewRef _schemaViewRef;
        
        private AstColumnNameList _columnNameList;
        
        private AstViewAttributes? _viewAttributes;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        private static string _ruleValue = "CREATE  VIEW  schema_view_ref  (LR_BRACKET  column_name_list  RR_BRACKET)?  view_" +
            "attributes?  AS  select_statement_standalone  (WITH  CHECK  OPTION)?  SEMI?";
        
        private static string _ruleName = "create_view";
        
        public AstCreateView(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRef>())
                {
                    this._schemaViewRef = ((AstSchemaViewRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes?>())
                {
                    this._viewAttributes = ((AstViewAttributes?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstCreateView(Position p, AstSchemaViewRef schemaViewRef, AstColumnNameList columnNameList, AstViewAttributes? viewAttributes, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._schemaViewRef = schemaViewRef;
            this._columnNameList = columnNameList;
            this._viewAttributes = viewAttributes;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstCreateView(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSchemaViewRef>())
                {
                    this._schemaViewRef = ((AstSchemaViewRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstViewAttributes?>())
                {
                    this._viewAttributes = ((AstViewAttributes?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSchemaViewRef SchemaViewRef
        {
            get
            {
                return this._schemaViewRef;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstViewAttributes? ViewAttributes
        {
            get
            {
                return this._viewAttributes;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateView(this);
        }
        
        public static AstCreateView? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_view : 
        ///    CREATE VIEW schema_view_ref ( column_name_list ) view_attributes? AS select_statement_standalone WITH CHECK OPTION SEMI? 
        /// </summary>
        public static AstCreateView New(AstSchemaViewRef schemaViewRef, AstColumnNameList columnNameList, AstViewAttributes? viewAttributes, AstSelectStatementStandalone selectStatementStandalone)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(schemaViewRef);
            list.Add(columnNameList);
            list.Add(viewAttributes);
            list.Add(selectStatementStandalone);
            return new AstCreateView(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_table : ALTER  TABLE  full_table_ref  (SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  lock_mode  RR_BRACKET | ADD  column_def_table_constraints | ALTER  COLUMN  (column_definition | column_modifier) | DROP  COLUMN  ids | DROP  CONSTRAINT  constraint_id | WITH  check_nocheck  ADD  alter_table_constraint | check_nocheck  CONSTRAINT  constraint_id | enable_disable  TRIGGER  id_? | REBUILD  table_options | SWITCH  switch_partition)  SEMI?
    /// </summary>
    public partial class AstAlterTable : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstLockMode _lockMode;
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstColumnDefinition _columnDefinition;
        
        private AstColumnModifier _columnModifier;
        
        private AstIds _ids;
        
        private AstConstraintId _constraintId;
        
        private AstCheckNocheck _checkNocheck;
        
        private AstAlterTableConstraint _alterTableConstraint;
        
        private AstEnableDisable _enableDisable;
        
        private AstId? _id;
        
        private AstTableOptions _tableOptions;
        
        private AstSwitchPartition _switchPartition;
        
        private static string _ruleValue = @"ALTER  TABLE  full_table_ref  (SET  LR_BRACKET  LOCK_ESCALATION  EQUAL  lock_mode  RR_BRACKET | ADD  column_def_table_constraints | ALTER  COLUMN  (column_definition | column_modifier) | DROP  COLUMN  ids | DROP  CONSTRAINT  constraint_id | WITH  check_nocheck  ADD  alter_table_constraint | check_nocheck  CONSTRAINT  constraint_id | enable_disable  TRIGGER  id_? | REBUILD  table_options | SWITCH  switch_partition)  SEMI?";
        
        private static string _ruleName = "alter_table";
        
        public AstAlterTable(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLockMode>())
                {
                    this._lockMode = ((AstLockMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinition>())
                {
                    this._columnDefinition = ((AstColumnDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifier>())
                {
                    this._columnModifier = ((AstColumnModifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintId>())
                {
                    this._constraintId = ((AstConstraintId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCheckNocheck>())
                {
                    this._checkNocheck = ((AstCheckNocheck)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableConstraint>())
                {
                    this._alterTableConstraint = ((AstAlterTableConstraint)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId?>())
                {
                    this._id = ((AstId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSwitchPartition>())
                {
                    this._switchPartition = ((AstSwitchPartition)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTable(Position p, AstFullTableRef fullTableRef, AstLockMode lockMode, AstColumnDefTableConstraints columnDefTableConstraints, AstColumnDefinition columnDefinition, AstColumnModifier columnModifier, AstIds ids, AstConstraintId constraintId, AstCheckNocheck checkNocheck, AstAlterTableConstraint alterTableConstraint, AstEnableDisable enableDisable, AstId? id, AstTableOptions tableOptions, AstSwitchPartition switchPartition) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._lockMode = lockMode;
            this._columnDefTableConstraints = columnDefTableConstraints;
            this._columnDefinition = columnDefinition;
            this._columnModifier = columnModifier;
            this._ids = ids;
            this._constraintId = constraintId;
            this._checkNocheck = checkNocheck;
            this._alterTableConstraint = alterTableConstraint;
            this._enableDisable = enableDisable;
            this._id = id;
            this._tableOptions = tableOptions;
            this._switchPartition = switchPartition;
        }
        
        public AstAlterTable(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLockMode>())
                {
                    this._lockMode = ((AstLockMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinition>())
                {
                    this._columnDefinition = ((AstColumnDefinition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifier>())
                {
                    this._columnModifier = ((AstColumnModifier)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIds>())
                {
                    this._ids = ((AstIds)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintId>())
                {
                    this._constraintId = ((AstConstraintId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCheckNocheck>())
                {
                    this._checkNocheck = ((AstCheckNocheck)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableConstraint>())
                {
                    this._alterTableConstraint = ((AstAlterTableConstraint)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstId?>())
                {
                    this._id = ((AstId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableOptions>())
                {
                    this._tableOptions = ((AstTableOptions)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSwitchPartition>())
                {
                    this._switchPartition = ((AstSwitchPartition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstLockMode LockMode
        {
            get
            {
                return this._lockMode;
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstColumnDefinition ColumnDefinition
        {
            get
            {
                return this._columnDefinition;
            }
        }
        
        public virtual AstColumnModifier ColumnModifier
        {
            get
            {
                return this._columnModifier;
            }
        }
        
        public virtual AstIds Ids
        {
            get
            {
                return this._ids;
            }
        }
        
        public virtual AstConstraintId ConstraintId
        {
            get
            {
                return this._constraintId;
            }
        }
        
        public virtual AstCheckNocheck CheckNocheck
        {
            get
            {
                return this._checkNocheck;
            }
        }
        
        public virtual AstAlterTableConstraint AlterTableConstraint
        {
            get
            {
                return this._alterTableConstraint;
            }
        }
        
        public virtual AstEnableDisable EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public virtual AstId? Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstTableOptions TableOptions
        {
            get
            {
                return this._tableOptions;
            }
        }
        
        public virtual AstSwitchPartition SwitchPartition
        {
            get
            {
                return this._switchPartition;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTable(this);
        }
        
        public static AstAlterTable? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref SET ( LOCK_ESCALATION EQUAL lock_mode ) SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstLockMode lockMode)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(lockMode);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref ADD column_def_table_constraints SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstColumnDefTableConstraints columnDefTableConstraints)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefTableConstraints);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref ALTER COLUMN column_definition SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstColumnDefinition columnDefinition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnDefinition);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref ALTER COLUMN column_modifier SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstColumnModifier columnModifier)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(columnModifier);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref DROP COLUMN ids SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstIds ids)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(ids);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref DROP CONSTRAINT constraint_id SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstConstraintId constraintId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(constraintId);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref WITH check_nocheck ADD alter_table_constraint SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstCheckNocheck checkNocheck, AstAlterTableConstraint alterTableConstraint)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(checkNocheck);
            list.Add(alterTableConstraint);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref check_nocheck CONSTRAINT constraint_id SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstCheckNocheck checkNocheck, AstConstraintId constraintId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(checkNocheck);
            list.Add(constraintId);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref enable_disable TRIGGER id_? SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstEnableDisable enableDisable, AstId? id)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(enableDisable);
            list.Add(id);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref REBUILD table_options SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstTableOptions tableOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(tableOptions);
            return new AstAlterTable(Position.Default, list);
        }
        
        /// <summary>
        /// alter_table : 
        ///    ALTER TABLE full_table_ref SWITCH switch_partition SEMI? 
        /// </summary>
        public static AstAlterTable New(AstFullTableRef fullTableRef, AstSwitchPartition switchPartition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(switchPartition);
            return new AstAlterTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_table_constraint_foreign : FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  REFERENCES  full_table_ref  (LR_BRACKET  pk = column_name_list  RR_BRACKET)?  on1 = constraint_delete_or_update  on2 = constraint_delete_or_update
    /// </summary>
    public partial class AstAlterTableConstraintForeign : AstBnfRule
    {
        
        private AstColumnNameList _fk;
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _pk;
        
        private AstConstraintDeleteOrUpdate _on1;
        
        private AstConstraintDeleteOrUpdate _on2;
        
        private static string _ruleValue = "FOREIGN  KEY  LR_BRACKET  fk = column_name_list  RR_BRACKET  REFERENCES  full_tab" +
            "le_ref  (LR_BRACKET  pk = column_name_list  RR_BRACKET)?  on1 = constraint_delet" +
            "e_or_update  on2 = constraint_delete_or_update";
        
        private static string _ruleName = "alter_table_constraint_foreign";
        
        public AstAlterTableConstraintForeign(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._fk = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._pk = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintDeleteOrUpdate>())
                {
                    this._on1 = ((AstConstraintDeleteOrUpdate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintDeleteOrUpdate>())
                {
                    this._on2 = ((AstConstraintDeleteOrUpdate)(enumerator.Current));
                }
            }
        }
        
        public AstAlterTableConstraintForeign(Position p, AstColumnNameList fk, AstFullTableRef fullTableRef, AstColumnNameList pk, AstConstraintDeleteOrUpdate on1, AstConstraintDeleteOrUpdate on2) : 
                base(p)
        {
            this._fk = fk;
            this._fullTableRef = fullTableRef;
            this._pk = pk;
            this._on1 = on1;
            this._on2 = on2;
        }
        
        public AstAlterTableConstraintForeign(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._fk = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._pk = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintDeleteOrUpdate>())
                {
                    this._on1 = ((AstConstraintDeleteOrUpdate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstraintDeleteOrUpdate>())
                {
                    this._on2 = ((AstConstraintDeleteOrUpdate)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnNameList Fk
        {
            get
            {
                return this._fk;
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList Pk
        {
            get
            {
                return this._pk;
            }
        }
        
        public virtual AstConstraintDeleteOrUpdate On1
        {
            get
            {
                return this._on1;
            }
        }
        
        public virtual AstConstraintDeleteOrUpdate On2
        {
            get
            {
                return this._on2;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterTableConstraintForeign(this);
        }
        
        public static AstAlterTableConstraintForeign? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_table_constraint_foreign : 
        ///    FOREIGN KEY ( fk=column_name_list ) REFERENCES full_table_ref ( pk=column_name_list ) on1=constraint_delete_or_update? on2=constraint_delete_or_update? 
        /// </summary>
        public static AstAlterTableConstraintForeign New(AstColumnNameList fk, AstFullTableRef fullTableRef, AstColumnNameList pk, AstConstraintDeleteOrUpdate? on1, AstConstraintDeleteOrUpdate? on2)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fk);
            list.Add(fullTableRef);
            list.Add(pk);
            list.Add(on1);
            list.Add(on2);
            return new AstAlterTableConstraintForeign(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_database : ALTER  DATABASE  (database_id | CURRENT)  alter_database_new_infos
    /// </summary>
    public partial class AstAlterDatabase : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstAlterDatabaseNewInfos _alterDatabaseNewInfos;
        
        private static string _ruleValue = "ALTER  DATABASE  (database_id | CURRENT)  alter_database_new_infos";
        
        private static string _ruleName = "alter_database";
        
        public AstAlterDatabase(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterDatabaseNewInfos>())
                {
                    this._alterDatabaseNewInfos = ((AstAlterDatabaseNewInfos)(enumerator.Current));
                }
            }
        }
        
        public AstAlterDatabase(Position p, AstDatabaseId databaseId, AstAlterDatabaseNewInfos alterDatabaseNewInfos) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._alterDatabaseNewInfos = alterDatabaseNewInfos;
        }
        
        public AstAlterDatabase(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterDatabaseNewInfos>())
                {
                    this._alterDatabaseNewInfos = ((AstAlterDatabaseNewInfos)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstAlterDatabaseNewInfos AlterDatabaseNewInfos
        {
            get
            {
                return this._alterDatabaseNewInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterDatabase(this);
        }
        
        public static AstAlterDatabase? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_database : 
        ///    ALTER DATABASE database_id alter_database_new_infos 
        /// </summary>
        public static AstAlterDatabase New(AstDatabaseId databaseId, AstAlterDatabaseNewInfos alterDatabaseNewInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(alterDatabaseNewInfos);
            return new AstAlterDatabase(Position.Default, list);
        }
        
        /// <summary>
        /// alter_database : 
        ///    ALTER DATABASE CURRENT alter_database_new_infos 
        /// </summary>
        public static AstAlterDatabase New(AstAlterDatabaseNewInfos alterDatabaseNewInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(alterDatabaseNewInfos);
            return new AstAlterDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_filestream : FILESTREAM  LR_BRACKET  database_filestream_option  RR_BRACKET
    /// </summary>
    public partial class AstDatabaseFilestream : AstBnfRule
    {
        
        private AstDatabaseFilestreamOption _databaseFilestreamOption;
        
        private static string _ruleValue = "FILESTREAM  LR_BRACKET  database_filestream_option  RR_BRACKET";
        
        private static string _ruleName = "database_filestream";
        
        public AstDatabaseFilestream(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFilestreamOption>())
                {
                    this._databaseFilestreamOption = ((AstDatabaseFilestreamOption)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseFilestream(Position p, AstDatabaseFilestreamOption databaseFilestreamOption) : 
                base(p)
        {
            this._databaseFilestreamOption = databaseFilestreamOption;
        }
        
        public AstDatabaseFilestream(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseFilestreamOption>())
                {
                    this._databaseFilestreamOption = ((AstDatabaseFilestreamOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseFilestreamOption DatabaseFilestreamOption
        {
            get
            {
                return this._databaseFilestreamOption;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseFilestream(this);
        }
        
        public static AstDatabaseFilestream? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// database_filestream : 
        ///    FILESTREAM ( database_filestream_option ) 
        /// </summary>
        public static AstDatabaseFilestream New(AstDatabaseFilestreamOption databaseFilestreamOption)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseFilestreamOption);
            return new AstDatabaseFilestream(Position.Default, list);
        }
    }
    
    /// <summary>
    /// change_tracking_option_item : change_tracking_option_list  change_tracking_option_lists
    /// </summary>
    public partial class AstChangeTrackingOptionItem : AstBnfRule
    {
        
        private AstChangeTrackingOptionList _changeTrackingOptionList;
        
        private AstChangeTrackingOptionLists _changeTrackingOptionLists;
        
        private static string _ruleValue = "change_tracking_option_list  change_tracking_option_lists";
        
        private static string _ruleName = "change_tracking_option_item";
        
        public AstChangeTrackingOptionItem(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstChangeTrackingOptionLists>())
                {
                    this._changeTrackingOptionLists = ((AstChangeTrackingOptionLists)(enumerator.Current));
                }
            }
        }
        
        public AstChangeTrackingOptionItem(Position p, AstChangeTrackingOptionList changeTrackingOptionList, AstChangeTrackingOptionLists changeTrackingOptionLists) : 
                base(p)
        {
            this._changeTrackingOptionList = changeTrackingOptionList;
            this._changeTrackingOptionLists = changeTrackingOptionLists;
        }
        
        public AstChangeTrackingOptionItem(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstChangeTrackingOptionList>())
                {
                    this._changeTrackingOptionList = ((AstChangeTrackingOptionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstChangeTrackingOptionLists>())
                {
                    this._changeTrackingOptionLists = ((AstChangeTrackingOptionLists)(enumerator.Current));
                }
            }
        }
        
        public virtual AstChangeTrackingOptionList ChangeTrackingOptionList
        {
            get
            {
                return this._changeTrackingOptionList;
            }
        }
        
        public virtual AstChangeTrackingOptionLists ChangeTrackingOptionLists
        {
            get
            {
                return this._changeTrackingOptionLists;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitChangeTrackingOptionItem(this);
        }
        
        public static AstChangeTrackingOptionItem? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// change_tracking_option_item : 
        ///    change_tracking_option_list change_tracking_option_lists 
        /// </summary>
        public static AstChangeTrackingOptionItem New(AstChangeTrackingOptionList changeTrackingOptionList, AstChangeTrackingOptionLists changeTrackingOptionLists)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(changeTrackingOptionList);
            list.Add(changeTrackingOptionLists);
            return new AstChangeTrackingOptionItem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// containment_set : CONTAINMENT  EQUAL  none_partial
    /// </summary>
    public partial class AstContainmentSet : AstBnfRule
    {
        
        private AstNonePartial _nonePartial;
        
        private static string _ruleValue = "CONTAINMENT  EQUAL  none_partial";
        
        private static string _ruleName = "containment_set";
        
        public AstContainmentSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public AstContainmentSet(Position p, AstNonePartial nonePartial) : 
                base(p)
        {
            this._nonePartial = nonePartial;
        }
        
        public AstContainmentSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNonePartial>())
                {
                    this._nonePartial = ((AstNonePartial)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNonePartial NonePartial
        {
            get
            {
                return this._nonePartial;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitContainmentSet(this);
        }
        
        public static AstContainmentSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// containment_set : 
        ///    CONTAINMENT EQUAL none_partial 
        /// </summary>
        public static AstContainmentSet New(AstNonePartial nonePartial)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(nonePartial);
            return new AstContainmentSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_endpoint : ALTER  ENDPOINT  endpoint_id  (AUTHORIZATION  login_id)?  (STATE  EQUAL  state_enum)?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL  decimal  (COMMA  listener_ip_addr)?  RR_BRACKET  (TSQL | alter_endpoint_service_broker | alter_endpoint_database_mirroring)
    /// </summary>
    public partial class AstAlterEndpoint : AstBnfRule
    {
        
        private AstEndpointId _endpointId;
        
        private AstLoginId _loginId;
        
        private AstStateEnum _stateEnum;
        
        private AstDecimal _decimal;
        
        private AstListenerIpAddr _listenerIpAddr;
        
        private AstAlterEndpointServiceBroker _alterEndpointServiceBroker;
        
        private AstAlterEndpointDatabaseMirroring _alterEndpointDatabaseMirroring;
        
        private static string _ruleValue = "ALTER  ENDPOINT  endpoint_id  (AUTHORIZATION  login_id)?  (STATE  EQUAL  state_en" +
            "um)?  AS  TCP  LR_BRACKET  LISTENER_PORT  EQUAL  decimal  (COMMA  listener_ip_ad" +
            "dr)?  RR_BRACKET  (TSQL | alter_endpoint_service_broker | alter_endpoint_databas" +
            "e_mirroring)";
        
        private static string _ruleName = "alter_endpoint";
        
        public AstAlterEndpoint(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStateEnum>())
                {
                    this._stateEnum = ((AstStateEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstListenerIpAddr>())
                {
                    this._listenerIpAddr = ((AstListenerIpAddr)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointServiceBroker>())
                {
                    this._alterEndpointServiceBroker = ((AstAlterEndpointServiceBroker)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointDatabaseMirroring>())
                {
                    this._alterEndpointDatabaseMirroring = ((AstAlterEndpointDatabaseMirroring)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpoint(Position p, AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIpAddr listenerIpAddr, AstAlterEndpointServiceBroker alterEndpointServiceBroker, AstAlterEndpointDatabaseMirroring alterEndpointDatabaseMirroring) : 
                base(p)
        {
            this._endpointId = endpointId;
            this._loginId = loginId;
            this._stateEnum = stateEnum;
            this._decimal = @decimal;
            this._listenerIpAddr = listenerIpAddr;
            this._alterEndpointServiceBroker = alterEndpointServiceBroker;
            this._alterEndpointDatabaseMirroring = alterEndpointDatabaseMirroring;
        }
        
        public AstAlterEndpoint(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEndpointId>())
                {
                    this._endpointId = ((AstEndpointId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLoginId>())
                {
                    this._loginId = ((AstLoginId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStateEnum>())
                {
                    this._stateEnum = ((AstStateEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstListenerIpAddr>())
                {
                    this._listenerIpAddr = ((AstListenerIpAddr)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointServiceBroker>())
                {
                    this._alterEndpointServiceBroker = ((AstAlterEndpointServiceBroker)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterEndpointDatabaseMirroring>())
                {
                    this._alterEndpointDatabaseMirroring = ((AstAlterEndpointDatabaseMirroring)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEndpointId EndpointId
        {
            get
            {
                return this._endpointId;
            }
        }
        
        public virtual AstLoginId LoginId
        {
            get
            {
                return this._loginId;
            }
        }
        
        public virtual AstStateEnum StateEnum
        {
            get
            {
                return this._stateEnum;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstListenerIpAddr ListenerIpAddr
        {
            get
            {
                return this._listenerIpAddr;
            }
        }
        
        public virtual AstAlterEndpointServiceBroker AlterEndpointServiceBroker
        {
            get
            {
                return this._alterEndpointServiceBroker;
            }
        }
        
        public virtual AstAlterEndpointDatabaseMirroring AlterEndpointDatabaseMirroring
        {
            get
            {
                return this._alterEndpointDatabaseMirroring;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpoint(this);
        }
        
        public static AstAlterEndpoint? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_endpoint : 
        ///    ALTER ENDPOINT endpoint_id AUTHORIZATION login_id STATE EQUAL state_enum AS TCP ( LISTENER_PORT EQUAL decimal , listener_ip_addr ) TSQL 
        /// </summary>
        public static AstAlterEndpoint New(AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIpAddr listenerIpAddr)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(endpointId);
            list.Add(loginId);
            list.Add(stateEnum);
            list.Add(@decimal);
            list.Add(listenerIpAddr);
            return new AstAlterEndpoint(Position.Default, list);
        }
        
        /// <summary>
        /// alter_endpoint : 
        ///    ALTER ENDPOINT endpoint_id AUTHORIZATION login_id STATE EQUAL state_enum AS TCP ( LISTENER_PORT EQUAL decimal , listener_ip_addr ) alter_endpoint_service_broker 
        /// </summary>
        public static AstAlterEndpoint New(AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIpAddr listenerIpAddr, AstAlterEndpointServiceBroker alterEndpointServiceBroker)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(endpointId);
            list.Add(loginId);
            list.Add(stateEnum);
            list.Add(@decimal);
            list.Add(listenerIpAddr);
            list.Add(alterEndpointServiceBroker);
            return new AstAlterEndpoint(Position.Default, list);
        }
        
        /// <summary>
        /// alter_endpoint : 
        ///    ALTER ENDPOINT endpoint_id AUTHORIZATION login_id STATE EQUAL state_enum AS TCP ( LISTENER_PORT EQUAL decimal , listener_ip_addr ) alter_endpoint_database_mirroring 
        /// </summary>
        public static AstAlterEndpoint New(AstEndpointId endpointId, AstLoginId loginId, AstStateEnum stateEnum, AstDecimal @decimal, AstListenerIpAddr listenerIpAddr, AstAlterEndpointDatabaseMirroring alterEndpointDatabaseMirroring)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(endpointId);
            list.Add(loginId);
            list.Add(stateEnum);
            list.Add(@decimal);
            list.Add(listenerIpAddr);
            list.Add(alterEndpointDatabaseMirroring);
            return new AstAlterEndpoint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_endpoint_database_mirroring : FOR  DATABASE_MIRRORING  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  COMMA?  ROLE  EQUAL  role_mirroring  RR_BRACKET
    /// </summary>
    public partial class AstAlterEndpointDatabaseMirroring : AstBnfRule
    {
        
        private AstAuthenticationConfiguration _authenticationConfiguration;
        
        private AstEncryptionState _encryptionState;
        
        private AstEncryptionAlgorithm? _encryptionAlgorithm;
        
        private AstRoleMirroring _roleMirroring;
        
        private static string _ruleValue = "FOR  DATABASE_MIRRORING  LR_BRACKET  authentication_configuration  (COMMA?  encry" +
            "ption_state  encryption_algorithm?)?  COMMA?  ROLE  EQUAL  role_mirroring  RR_BR" +
            "ACKET";
        
        private static string _ruleName = "alter_endpoint_database_mirroring";
        
        public AstAlterEndpointDatabaseMirroring(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm?>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRoleMirroring>())
                {
                    this._roleMirroring = ((AstRoleMirroring)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpointDatabaseMirroring(Position p, AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm? encryptionAlgorithm, AstRoleMirroring roleMirroring) : 
                base(p)
        {
            this._authenticationConfiguration = authenticationConfiguration;
            this._encryptionState = encryptionState;
            this._encryptionAlgorithm = encryptionAlgorithm;
            this._roleMirroring = roleMirroring;
        }
        
        public AstAlterEndpointDatabaseMirroring(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm?>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRoleMirroring>())
                {
                    this._roleMirroring = ((AstRoleMirroring)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthenticationConfiguration AuthenticationConfiguration
        {
            get
            {
                return this._authenticationConfiguration;
            }
        }
        
        public virtual AstEncryptionState EncryptionState
        {
            get
            {
                return this._encryptionState;
            }
        }
        
        public virtual AstEncryptionAlgorithm? EncryptionAlgorithm
        {
            get
            {
                return this._encryptionAlgorithm;
            }
        }
        
        public virtual AstRoleMirroring RoleMirroring
        {
            get
            {
                return this._roleMirroring;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpointDatabaseMirroring(this);
        }
        
        public static AstAlterEndpointDatabaseMirroring? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_endpoint_database_mirroring : 
        ///    FOR DATABASE_MIRRORING ( authentication_configuration COMMA? encryption_state encryption_algorithm? COMMA? ROLE EQUAL role_mirroring ) 
        /// </summary>
        public static AstAlterEndpointDatabaseMirroring New(AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm? encryptionAlgorithm, AstRoleMirroring roleMirroring)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(authenticationConfiguration);
            list.Add(encryptionState);
            list.Add(encryptionAlgorithm);
            list.Add(roleMirroring);
            return new AstAlterEndpointDatabaseMirroring(Position.Default, list);
        }
    }
    
    /// <summary>
    /// alter_endpoint_service_broker : FOR  SERVICE_BROKER  LR_BRACKET  authentication_configuration  (COMMA?  encryption_state  encryption_algorithm?)?  (COMMA?  MESSAGE_FORWARDING  EQUAL  enable_disable)?  (COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  decimal)?  RR_BRACKET
    /// </summary>
    public partial class AstAlterEndpointServiceBroker : AstBnfRule
    {
        
        private AstAuthenticationConfiguration _authenticationConfiguration;
        
        private AstEncryptionState _encryptionState;
        
        private AstEncryptionAlgorithm? _encryptionAlgorithm;
        
        private AstEnableDisable _enableDisable;
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "FOR  SERVICE_BROKER  LR_BRACKET  authentication_configuration  (COMMA?  encryptio" +
            "n_state  encryption_algorithm?)?  (COMMA?  MESSAGE_FORWARDING  EQUAL  enable_dis" +
            "able)?  (COMMA?  MESSAGE_FORWARD_SIZE  EQUAL  decimal)?  RR_BRACKET";
        
        private static string _ruleName = "alter_endpoint_service_broker";
        
        public AstAlterEndpointServiceBroker(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm?>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstAlterEndpointServiceBroker(Position p, AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm? encryptionAlgorithm, AstEnableDisable enableDisable, AstDecimal @decimal) : 
                base(p)
        {
            this._authenticationConfiguration = authenticationConfiguration;
            this._encryptionState = encryptionState;
            this._encryptionAlgorithm = encryptionAlgorithm;
            this._enableDisable = enableDisable;
            this._decimal = @decimal;
        }
        
        public AstAlterEndpointServiceBroker(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAuthenticationConfiguration>())
                {
                    this._authenticationConfiguration = ((AstAuthenticationConfiguration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionState>())
                {
                    this._encryptionState = ((AstEncryptionState)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionAlgorithm?>())
                {
                    this._encryptionAlgorithm = ((AstEncryptionAlgorithm?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEnableDisable>())
                {
                    this._enableDisable = ((AstEnableDisable)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAuthenticationConfiguration AuthenticationConfiguration
        {
            get
            {
                return this._authenticationConfiguration;
            }
        }
        
        public virtual AstEncryptionState EncryptionState
        {
            get
            {
                return this._encryptionState;
            }
        }
        
        public virtual AstEncryptionAlgorithm? EncryptionAlgorithm
        {
            get
            {
                return this._encryptionAlgorithm;
            }
        }
        
        public virtual AstEnableDisable EnableDisable
        {
            get
            {
                return this._enableDisable;
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAlterEndpointServiceBroker(this);
        }
        
        public static AstAlterEndpointServiceBroker? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// alter_endpoint_service_broker : 
        ///    FOR SERVICE_BROKER ( authentication_configuration COMMA? encryption_state encryption_algorithm? COMMA? MESSAGE_FORWARDING EQUAL enable_disable COMMA? MESSAGE_FORWARD_SIZE EQUAL decimal ) 
        /// </summary>
        public static AstAlterEndpointServiceBroker New(AstAuthenticationConfiguration authenticationConfiguration, AstEncryptionState encryptionState, AstEncryptionAlgorithm? encryptionAlgorithm, AstEnableDisable enableDisable, AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(authenticationConfiguration);
            list.Add(encryptionState);
            list.Add(encryptionAlgorithm);
            list.Add(enableDisable);
            list.Add(@decimal);
            return new AstAlterEndpointServiceBroker(Position.Default, list);
        }
    }
    
    /// <summary>
    /// database_mirroring_option : mirroring_set_option
    /// </summary>
    public partial class AstDatabaseMirroringOption : AstBnfRule
    {
        
        private AstMirroringSetOption _mirroringSetOption;
        
        private static string _ruleValue = "mirroring_set_option";
        
        private static string _ruleName = "database_mirroring_option";
        
        public AstDatabaseMirroringOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMirroringSetOption>())
                {
                    this._mirroringSetOption = ((AstMirroringSetOption)(enumerator.Current));
                }
            }
        }
        
        public AstDatabaseMirroringOption(Position p, AstMirroringSetOption mirroringSetOption) : 
                base(p)
        {
            this._mirroringSetOption = mirroringSetOption;
        }
        
        public AstDatabaseMirroringOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstMirroringSetOption>())
                {
                    this._mirroringSetOption = ((AstMirroringSetOption)(enumerator.Current));
                }
            }
        }
        
        public virtual AstMirroringSetOption MirroringSetOption
        {
            get
            {
                return this._mirroringSetOption;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDatabaseMirroringOption(this);
        }
        
        public static AstDatabaseMirroringOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// database_mirroring_option : 
        ///    mirroring_set_option 
        /// </summary>
        public static AstDatabaseMirroringOption New(AstMirroringSetOption mirroringSetOption)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(mirroringSetOption);
            return new AstDatabaseMirroringOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// witness_server : partner_server
    /// </summary>
    public partial class AstWitnessServer : AstBnfRule
    {
        
        private AstPartnerServer _partnerServer;
        
        private static string _ruleValue = "partner_server";
        
        private static string _ruleName = "witness_server";
        
        public AstWitnessServer(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServer>())
                {
                    this._partnerServer = ((AstPartnerServer)(enumerator.Current));
                }
            }
        }
        
        public AstWitnessServer(Position p, AstPartnerServer partnerServer) : 
                base(p)
        {
            this._partnerServer = partnerServer;
        }
        
        public AstWitnessServer(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServer>())
                {
                    this._partnerServer = ((AstPartnerServer)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServer PartnerServer
        {
            get
            {
                return this._partnerServer;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWitnessServer(this);
        }
        
        public static AstWitnessServer? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// witness_server : 
        ///    partner_server 
        /// </summary>
        public static AstWitnessServer New(AstPartnerServer partnerServer)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partnerServer);
            return new AstWitnessServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// partner_server : partner_server_tcp_prefix  host  COLON  port_number
    /// </summary>
    public partial class AstPartnerServer : AstBnfRule
    {
        
        private AstPartnerServerTcpPrefix _partnerServerTcpPrefix;
        
        private AstHost _host;
        
        private AstPortNumber _portNumber;
        
        private static string _ruleValue = "partner_server_tcp_prefix  host  COLON  port_number";
        
        private static string _ruleName = "partner_server";
        
        public AstPartnerServer(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public AstPartnerServer(Position p, AstPartnerServerTcpPrefix partnerServerTcpPrefix, AstHost host, AstPortNumber portNumber) : 
                base(p)
        {
            this._partnerServerTcpPrefix = partnerServerTcpPrefix;
            this._host = host;
            this._portNumber = portNumber;
        }
        
        public AstPartnerServer(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPartnerServerTcpPrefix>())
                {
                    this._partnerServerTcpPrefix = ((AstPartnerServerTcpPrefix)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstHost>())
                {
                    this._host = ((AstHost)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstPortNumber>())
                {
                    this._portNumber = ((AstPortNumber)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPartnerServerTcpPrefix PartnerServerTcpPrefix
        {
            get
            {
                return this._partnerServerTcpPrefix;
            }
        }
        
        public virtual AstHost Host
        {
            get
            {
                return this._host;
            }
        }
        
        public virtual AstPortNumber PortNumber
        {
            get
            {
                return this._portNumber;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPartnerServer(this);
        }
        
        public static AstPartnerServer? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// partner_server : 
        ///    partner_server_tcp_prefix host : port_number 
        /// </summary>
        public static AstPartnerServer New(AstPartnerServerTcpPrefix partnerServerTcpPrefix, AstHost host, AstPortNumber portNumber)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(partnerServerTcpPrefix);
            list.Add(host);
            list.Add(portNumber);
            return new AstPartnerServer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// port_number : decimal
    /// </summary>
    public partial class AstPortNumber : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "decimal";
        
        private static string _ruleName = "port_number";
        
        public AstPortNumber(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstPortNumber(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstPortNumber(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPortNumber(this);
        }
        
        public static AstPortNumber? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// port_number : 
        ///    decimal 
        /// </summary>
        public static AstPortNumber New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstPortNumber(Position.Default, list);
        }
    }
    
    /// <summary>
    /// date_correlation_optimization_option : DATE_CORRELATION_OPTIMIZATION  on_off
    /// </summary>
    public partial class AstDateCorrelationOptimizationOption : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "DATE_CORRELATION_OPTIMIZATION  on_off";
        
        private static string _ruleName = "date_correlation_optimization_option";
        
        public AstDateCorrelationOptimizationOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDateCorrelationOptimizationOption(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstDateCorrelationOptimizationOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateCorrelationOptimizationOption(this);
        }
        
        public static AstDateCorrelationOptimizationOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// date_correlation_optimization_option : 
        ///    DATE_CORRELATION_OPTIMIZATION on_off 
        /// </summary>
        public static AstDateCorrelationOptimizationOption New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstDateCorrelationOptimizationOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// db_encryption_option : ENCRYPTION  on_off
    /// </summary>
    public partial class AstDbEncryptionOption : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "ENCRYPTION  on_off";
        
        private static string _ruleName = "db_encryption_option";
        
        public AstDbEncryptionOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDbEncryptionOption(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstDbEncryptionOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbEncryptionOption(this);
        }
        
        public static AstDbEncryptionOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// db_encryption_option : 
        ///    ENCRYPTION on_off 
        /// </summary>
        public static AstDbEncryptionOption New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstDbEncryptionOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// delayed_durability_option : DELAYED_DURABILITY  EQUAL  delayed_durability
    /// </summary>
    public partial class AstDelayedDurabilityOption : AstBnfRule
    {
        
        private AstDelayedDurability _delayedDurability;
        
        private static string _ruleValue = "DELAYED_DURABILITY  EQUAL  delayed_durability";
        
        private static string _ruleName = "delayed_durability_option";
        
        public AstDelayedDurabilityOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDelayedDurability>())
                {
                    this._delayedDurability = ((AstDelayedDurability)(enumerator.Current));
                }
            }
        }
        
        public AstDelayedDurabilityOption(Position p, AstDelayedDurability delayedDurability) : 
                base(p)
        {
            this._delayedDurability = delayedDurability;
        }
        
        public AstDelayedDurabilityOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDelayedDurability>())
                {
                    this._delayedDurability = ((AstDelayedDurability)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDelayedDurability DelayedDurability
        {
            get
            {
                return this._delayedDurability;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDelayedDurabilityOption(this);
        }
        
        public static AstDelayedDurabilityOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// delayed_durability_option : 
        ///    DELAYED_DURABILITY EQUAL delayed_durability 
        /// </summary>
        public static AstDelayedDurabilityOption New(AstDelayedDurability delayedDurability)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(delayedDurability);
            return new AstDelayedDurabilityOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// language_setting : id_or_string
    /// </summary>
    public partial class AstLanguageSetting : AstBnfRule
    {
        
        private AstIdOrString _idOrString;
        
        private static string _ruleValue = "id_or_string";
        
        private static string _ruleName = "language_setting";
        
        public AstLanguageSetting(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public AstLanguageSetting(Position p, AstIdOrString idOrString) : 
                base(p)
        {
            this._idOrString = idOrString;
        }
        
        public AstLanguageSetting(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIdOrString>())
                {
                    this._idOrString = ((AstIdOrString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIdOrString IdOrString
        {
            get
            {
                return this._idOrString;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitLanguageSetting(this);
        }
        
        public static AstLanguageSetting? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// language_setting : 
        ///    id_or_string 
        /// </summary>
        public static AstLanguageSetting New(AstIdOrString idOrString)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(idOrString);
            return new AstLanguageSetting(Position.Default, list);
        }
    }
    
    /// <summary>
    /// mixed_page_allocation_option : MIXED_PAGE_ALLOCATION  on_off
    /// </summary>
    public partial class AstMixedPageAllocationOption : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "MIXED_PAGE_ALLOCATION  on_off";
        
        private static string _ruleName = "mixed_page_allocation_option";
        
        public AstMixedPageAllocationOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstMixedPageAllocationOption(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstMixedPageAllocationOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMixedPageAllocationOption(this);
        }
        
        public static AstMixedPageAllocationOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// mixed_page_allocation_option : 
        ///    MIXED_PAGE_ALLOCATION on_off 
        /// </summary>
        public static AstMixedPageAllocationOption New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstMixedPageAllocationOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// target_recovery_time_option : TARGET_RECOVERY_TIME  EQUAL  decimal  seconds_minutes
    /// </summary>
    public partial class AstTargetRecoveryTimeOption : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private AstSecondsMinutes _secondsMinutes;
        
        private static string _ruleValue = "TARGET_RECOVERY_TIME  EQUAL  decimal  seconds_minutes";
        
        private static string _ruleName = "target_recovery_time_option";
        
        public AstTargetRecoveryTimeOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecondsMinutes>())
                {
                    this._secondsMinutes = ((AstSecondsMinutes)(enumerator.Current));
                }
            }
        }
        
        public AstTargetRecoveryTimeOption(Position p, AstDecimal @decimal, AstSecondsMinutes secondsMinutes) : 
                base(p)
        {
            this._decimal = @decimal;
            this._secondsMinutes = secondsMinutes;
        }
        
        public AstTargetRecoveryTimeOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecondsMinutes>())
                {
                    this._secondsMinutes = ((AstSecondsMinutes)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstSecondsMinutes SecondsMinutes
        {
            get
            {
                return this._secondsMinutes;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTargetRecoveryTimeOption(this);
        }
        
        public static AstTargetRecoveryTimeOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// target_recovery_time_option : 
        ///    TARGET_RECOVERY_TIME EQUAL decimal seconds_minutes 
        /// </summary>
        public static AstTargetRecoveryTimeOption New(AstDecimal @decimal, AstSecondsMinutes secondsMinutes)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            list.Add(secondsMinutes);
            return new AstTargetRecoveryTimeOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_index : DROP  INDEX  if_exists?  (drop_relational_or_xml_or_spatial_indexs | drop_backward_compatible_indexs)
    /// </summary>
    public partial class AstDropIndex : AstBnfRule
    {
        
        private AstIfExists? _ifExists;
        
        private AstDropRelationalOrXmlOrSpatialIndexs _dropRelationalOrXmlOrSpatialIndexs;
        
        private AstDropBackwardCompatibleIndexs _dropBackwardCompatibleIndexs;
        
        private static string _ruleValue = "DROP  INDEX  if_exists?  (drop_relational_or_xml_or_spatial_indexs | drop_backwar" +
            "d_compatible_indexs)";
        
        private static string _ruleName = "drop_index";
        
        public AstDropIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndexs>())
                {
                    this._dropRelationalOrXmlOrSpatialIndexs = ((AstDropRelationalOrXmlOrSpatialIndexs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndexs>())
                {
                    this._dropBackwardCompatibleIndexs = ((AstDropBackwardCompatibleIndexs)(enumerator.Current));
                }
            }
        }
        
        public AstDropIndex(Position p, AstIfExists? ifExists, AstDropRelationalOrXmlOrSpatialIndexs dropRelationalOrXmlOrSpatialIndexs, AstDropBackwardCompatibleIndexs dropBackwardCompatibleIndexs) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._dropRelationalOrXmlOrSpatialIndexs = dropRelationalOrXmlOrSpatialIndexs;
            this._dropBackwardCompatibleIndexs = dropBackwardCompatibleIndexs;
        }
        
        public AstDropIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropRelationalOrXmlOrSpatialIndexs>())
                {
                    this._dropRelationalOrXmlOrSpatialIndexs = ((AstDropRelationalOrXmlOrSpatialIndexs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDropBackwardCompatibleIndexs>())
                {
                    this._dropBackwardCompatibleIndexs = ((AstDropBackwardCompatibleIndexs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists? IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstDropRelationalOrXmlOrSpatialIndexs DropRelationalOrXmlOrSpatialIndexs
        {
            get
            {
                return this._dropRelationalOrXmlOrSpatialIndexs;
            }
        }
        
        public virtual AstDropBackwardCompatibleIndexs DropBackwardCompatibleIndexs
        {
            get
            {
                return this._dropBackwardCompatibleIndexs;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropIndex(this);
        }
        
        public static AstDropIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_index : 
        ///    DROP INDEX if_exists? drop_relational_or_xml_or_spatial_indexs 
        /// </summary>
        public static AstDropIndex New(AstIfExists? ifExists, AstDropRelationalOrXmlOrSpatialIndexs dropRelationalOrXmlOrSpatialIndexs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ifExists);
            list.Add(dropRelationalOrXmlOrSpatialIndexs);
            return new AstDropIndex(Position.Default, list);
        }
        
        /// <summary>
        /// drop_index : 
        ///    DROP INDEX if_exists? drop_backward_compatible_indexs 
        /// </summary>
        public static AstDropIndex New(AstIfExists? ifExists, AstDropBackwardCompatibleIndexs dropBackwardCompatibleIndexs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ifExists);
            list.Add(dropBackwardCompatibleIndexs);
            return new AstDropIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_relational_or_xml_or_spatial_index : index_id  ON  complete_table_ref
    /// </summary>
    public partial class AstDropRelationalOrXmlOrSpatialIndex : AstBnfRule
    {
        
        private AstIndexId _indexId;
        
        private AstCompleteTableRef _completeTableRef;
        
        private static string _ruleValue = "index_id  ON  complete_table_ref";
        
        private static string _ruleName = "drop_relational_or_xml_or_spatial_index";
        
        public AstDropRelationalOrXmlOrSpatialIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstDropRelationalOrXmlOrSpatialIndex(Position p, AstIndexId indexId, AstCompleteTableRef completeTableRef) : 
                base(p)
        {
            this._indexId = indexId;
            this._completeTableRef = completeTableRef;
        }
        
        public AstDropRelationalOrXmlOrSpatialIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId>())
                {
                    this._indexId = ((AstIndexId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCompleteTableRef>())
                {
                    this._completeTableRef = ((AstCompleteTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstCompleteTableRef CompleteTableRef
        {
            get
            {
                return this._completeTableRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropRelationalOrXmlOrSpatialIndex(this);
        }
        
        public static AstDropRelationalOrXmlOrSpatialIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_relational_or_xml_or_spatial_index : 
        ///    index_id ON complete_table_ref 
        /// </summary>
        public static AstDropRelationalOrXmlOrSpatialIndex New(AstIndexId indexId, AstCompleteTableRef completeTableRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(indexId);
            list.Add(completeTableRef);
            return new AstDropRelationalOrXmlOrSpatialIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_procedure : DROP  proc_keyword  if_exists?  func_proc_name_schemas
    /// </summary>
    public partial class AstDropProcedure : AstBnfRule
    {
        
        private AstProcKeyword _procKeyword;
        
        private AstIfExists? _ifExists;
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        private static string _ruleValue = "DROP  proc_keyword  if_exists?  func_proc_name_schemas";
        
        private static string _ruleName = "drop_procedure";
        
        public AstDropProcedure(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropProcedure(Position p, AstProcKeyword procKeyword, AstIfExists? ifExists, AstFuncProcNameSchemas funcProcNameSchemas) : 
                base(p)
        {
            this._procKeyword = procKeyword;
            this._ifExists = ifExists;
            this._funcProcNameSchemas = funcProcNameSchemas;
        }
        
        public AstDropProcedure(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstProcKeyword>())
                {
                    this._procKeyword = ((AstProcKeyword)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstProcKeyword ProcKeyword
        {
            get
            {
                return this._procKeyword;
            }
        }
        
        public virtual AstIfExists? IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropProcedure(this);
        }
        
        public static AstDropProcedure? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_procedure : 
        ///    DROP proc_keyword if_exists? func_proc_name_schemas 
        /// </summary>
        public static AstDropProcedure New(AstProcKeyword procKeyword, AstIfExists? ifExists, AstFuncProcNameSchemas funcProcNameSchemas)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(procKeyword);
            list.Add(ifExists);
            list.Add(funcProcNameSchemas);
            return new AstDropProcedure(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_dml_trigger : DROP  TRIGGER  if_exists?  schema_trigger_refs
    /// </summary>
    public partial class AstDropDmlTrigger : AstBnfRule
    {
        
        private AstIfExists? _ifExists;
        
        private AstSchemaTriggerRefs _schemaTriggerRefs;
        
        private static string _ruleValue = "DROP  TRIGGER  if_exists?  schema_trigger_refs";
        
        private static string _ruleName = "drop_dml_trigger";
        
        public AstDropDmlTrigger(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRefs>())
                {
                    this._schemaTriggerRefs = ((AstSchemaTriggerRefs)(enumerator.Current));
                }
            }
        }
        
        public AstDropDmlTrigger(Position p, AstIfExists? ifExists, AstSchemaTriggerRefs schemaTriggerRefs) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._schemaTriggerRefs = schemaTriggerRefs;
        }
        
        public AstDropDmlTrigger(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaTriggerRefs>())
                {
                    this._schemaTriggerRefs = ((AstSchemaTriggerRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists? IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstSchemaTriggerRefs SchemaTriggerRefs
        {
            get
            {
                return this._schemaTriggerRefs;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDmlTrigger(this);
        }
        
        public static AstDropDmlTrigger? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_dml_trigger : 
        ///    DROP TRIGGER if_exists? schema_trigger_refs 
        /// </summary>
        public static AstDropDmlTrigger New(AstIfExists? ifExists, AstSchemaTriggerRefs schemaTriggerRefs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ifExists);
            list.Add(schemaTriggerRefs);
            return new AstDropDmlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_ddl_trigger : DROP  TRIGGER  if_exists?  schema_view_refs  ON  all_server_database
    /// </summary>
    public partial class AstDropDdlTrigger : AstBnfRule
    {
        
        private AstIfExists? _ifExists;
        
        private AstSchemaViewRefs _schemaViewRefs;
        
        private AstAllServerDatabase _allServerDatabase;
        
        private static string _ruleValue = "DROP  TRIGGER  if_exists?  schema_view_refs  ON  all_server_database";
        
        private static string _ruleName = "drop_ddl_trigger";
        
        public AstDropDdlTrigger(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
            }
        }
        
        public AstDropDdlTrigger(Position p, AstIfExists? ifExists, AstSchemaViewRefs schemaViewRefs, AstAllServerDatabase allServerDatabase) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._schemaViewRefs = schemaViewRefs;
            this._allServerDatabase = allServerDatabase;
        }
        
        public AstDropDdlTrigger(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAllServerDatabase>())
                {
                    this._allServerDatabase = ((AstAllServerDatabase)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists? IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstSchemaViewRefs SchemaViewRefs
        {
            get
            {
                return this._schemaViewRefs;
            }
        }
        
        public virtual AstAllServerDatabase AllServerDatabase
        {
            get
            {
                return this._allServerDatabase;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropDdlTrigger(this);
        }
        
        public static AstDropDdlTrigger? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_ddl_trigger : 
        ///    DROP TRIGGER if_exists? schema_view_refs ON all_server_database 
        /// </summary>
        public static AstDropDdlTrigger New(AstIfExists? ifExists, AstSchemaViewRefs schemaViewRefs, AstAllServerDatabase allServerDatabase)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ifExists);
            list.Add(schemaViewRefs);
            list.Add(allServerDatabase);
            return new AstDropDdlTrigger(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_function : DROP  FUNCTION  if_exists?  func_proc_name_schemas
    /// </summary>
    public partial class AstDropFunction : AstBnfRule
    {
        
        private AstIfExists? _ifExists;
        
        private AstFuncProcNameSchemas _funcProcNameSchemas;
        
        private static string _ruleValue = "DROP  FUNCTION  if_exists?  func_proc_name_schemas";
        
        private static string _ruleName = "drop_function";
        
        public AstDropFunction(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public AstDropFunction(Position p, AstIfExists? ifExists, AstFuncProcNameSchemas funcProcNameSchemas) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._funcProcNameSchemas = funcProcNameSchemas;
        }
        
        public AstDropFunction(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFuncProcNameSchemas>())
                {
                    this._funcProcNameSchemas = ((AstFuncProcNameSchemas)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists? IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstFuncProcNameSchemas FuncProcNameSchemas
        {
            get
            {
                return this._funcProcNameSchemas;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropFunction(this);
        }
        
        public static AstDropFunction? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_function : 
        ///    DROP FUNCTION if_exists? func_proc_name_schemas 
        /// </summary>
        public static AstDropFunction New(AstIfExists? ifExists, AstFuncProcNameSchemas funcProcNameSchemas)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ifExists);
            list.Add(funcProcNameSchemas);
            return new AstDropFunction(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_table : DROP  TABLE  if_exists?  table_names
    /// </summary>
    public partial class AstDropTable : AstBnfRule
    {
        
        private AstIfExists? _ifExists;
        
        private AstTableNames _tableNames;
        
        private static string _ruleValue = "DROP  TABLE  if_exists?  table_names";
        
        private static string _ruleName = "drop_table";
        
        public AstDropTable(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public AstDropTable(Position p, AstIfExists? ifExists, AstTableNames tableNames) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._tableNames = tableNames;
        }
        
        public AstDropTable(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableNames>())
                {
                    this._tableNames = ((AstTableNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists? IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstTableNames TableNames
        {
            get
            {
                return this._tableNames;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropTable(this);
        }
        
        public static AstDropTable? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_table : 
        ///    DROP TABLE if_exists? table_names 
        /// </summary>
        public static AstDropTable New(AstIfExists? ifExists, AstTableNames tableNames)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ifExists);
            list.Add(tableNames);
            return new AstDropTable(Position.Default, list);
        }
    }
    
    /// <summary>
    /// drop_view : DROP  VIEW  if_exists?  schema_view_refs
    /// </summary>
    public partial class AstDropView : AstBnfRule
    {
        
        private AstIfExists? _ifExists;
        
        private AstSchemaViewRefs _schemaViewRefs;
        
        private static string _ruleValue = "DROP  VIEW  if_exists?  schema_view_refs";
        
        private static string _ruleName = "drop_view";
        
        public AstDropView(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public AstDropView(Position p, AstIfExists? ifExists, AstSchemaViewRefs schemaViewRefs) : 
                base(p)
        {
            this._ifExists = ifExists;
            this._schemaViewRefs = schemaViewRefs;
        }
        
        public AstDropView(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIfExists?>())
                {
                    this._ifExists = ((AstIfExists?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaViewRefs>())
                {
                    this._schemaViewRefs = ((AstSchemaViewRefs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIfExists? IfExists
        {
            get
            {
                return this._ifExists;
            }
        }
        
        public virtual AstSchemaViewRefs SchemaViewRefs
        {
            get
            {
                return this._schemaViewRefs;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDropView(this);
        }
        
        public static AstDropView? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// drop_view : 
        ///    DROP VIEW if_exists? schema_view_refs 
        /// </summary>
        public static AstDropView New(AstIfExists? ifExists, AstSchemaViewRefs schemaViewRefs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(ifExists);
            list.Add(schemaViewRefs);
            return new AstDropView(Position.Default, list);
        }
    }
    
    /// <summary>
    /// openquery_args : OPENQUERY  LR_BRACKET  server_id  COMMA  query = stringtext  RR_BRACKET
    /// </summary>
    public partial class AstOpenqueryArgs : AstBnfRule
    {
        
        private AstServerId _serverId;
        
        private AstStringtext _query;
        
        private static string _ruleValue = "OPENQUERY  LR_BRACKET  server_id  COMMA  query = stringtext  RR_BRACKET";
        
        private static string _ruleName = "openquery_args";
        
        public AstOpenqueryArgs(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._query = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstOpenqueryArgs(Position p, AstServerId serverId, AstStringtext query) : 
                base(p)
        {
            this._serverId = serverId;
            this._query = query;
        }
        
        public AstOpenqueryArgs(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId>())
                {
                    this._serverId = ((AstServerId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._query = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstStringtext Query
        {
            get
            {
                return this._query;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenqueryArgs(this);
        }
        
        public static AstOpenqueryArgs? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// openquery_args : 
        ///    OPENQUERY ( server_id , query=stringtext ) 
        /// </summary>
        public static AstOpenqueryArgs New(AstServerId serverId, AstStringtext query)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverId);
            list.Add(query);
            return new AstOpenqueryArgs(Position.Default, list);
        }
    }
    
    /// <summary>
    /// open_data_source : OPENDATASOURCE  LR_BRACKET  provider = stringtext  COMMA  init = stringtext  RR_BRACKET  DOT  database_schema_table_ref
    /// </summary>
    public partial class AstOpenDataSource : AstBnfRule
    {
        
        private AstStringtext _provider;
        
        private AstStringtext _init;
        
        private AstDatabaseSchemaTableRef _databaseSchemaTableRef;
        
        private static string _ruleValue = "OPENDATASOURCE  LR_BRACKET  provider = stringtext  COMMA  init = stringtext  RR_B" +
            "RACKET  DOT  database_schema_table_ref";
        
        private static string _ruleName = "open_data_source";
        
        public AstOpenDataSource(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._provider = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._init = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstOpenDataSource(Position p, AstStringtext provider, AstStringtext init, AstDatabaseSchemaTableRef databaseSchemaTableRef) : 
                base(p)
        {
            this._provider = provider;
            this._init = init;
            this._databaseSchemaTableRef = databaseSchemaTableRef;
        }
        
        public AstOpenDataSource(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._provider = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._init = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseSchemaTableRef>())
                {
                    this._databaseSchemaTableRef = ((AstDatabaseSchemaTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Provider
        {
            get
            {
                return this._provider;
            }
        }
        
        public virtual AstStringtext Init
        {
            get
            {
                return this._init;
            }
        }
        
        public virtual AstDatabaseSchemaTableRef DatabaseSchemaTableRef
        {
            get
            {
                return this._databaseSchemaTableRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenDataSource(this);
        }
        
        public static AstOpenDataSource? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// open_data_source : 
        ///    OPENDATASOURCE ( provider=stringtext , init=stringtext ) . database_schema_table_ref 
        /// </summary>
        public static AstOpenDataSource New(AstStringtext provider, AstStringtext init, AstDatabaseSchemaTableRef databaseSchemaTableRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(provider);
            list.Add(init);
            list.Add(databaseSchemaTableRef);
            return new AstOpenDataSource(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_database : BACKUP  DATABASE  (database_id)  (READ_WRITE_FILEGROUPS  group1 = file_group_list)?  group2 = file_group_list  backup_target?  backup_settings?
    /// </summary>
    public partial class AstBackupDatabase : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstFileGroupList _group1;
        
        private AstFileGroupList _group2;
        
        private AstBackupTarget? _backupTarget;
        
        private AstBackupSettings? _backupSettings;
        
        private static string _ruleValue = "BACKUP  DATABASE  (database_id)  (READ_WRITE_FILEGROUPS  group1 = file_group_list" +
            ")?  group2 = file_group_list  backup_target?  backup_settings?";
        
        private static string _ruleName = "backup_database";
        
        public AstBackupDatabase(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupList>())
                {
                    this._group1 = ((AstFileGroupList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupList>())
                {
                    this._group2 = ((AstFileGroupList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget?>())
                {
                    this._backupTarget = ((AstBackupTarget?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings?>())
                {
                    this._backupSettings = ((AstBackupSettings?)(enumerator.Current));
                }
            }
        }
        
        public AstBackupDatabase(Position p, AstDatabaseId databaseId, AstFileGroupList group1, AstFileGroupList group2, AstBackupTarget? backupTarget, AstBackupSettings? backupSettings) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._group1 = group1;
            this._group2 = group2;
            this._backupTarget = backupTarget;
            this._backupSettings = backupSettings;
        }
        
        public AstBackupDatabase(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupList>())
                {
                    this._group1 = ((AstFileGroupList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileGroupList>())
                {
                    this._group2 = ((AstFileGroupList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget?>())
                {
                    this._backupTarget = ((AstBackupTarget?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings?>())
                {
                    this._backupSettings = ((AstBackupSettings?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstFileGroupList Group1
        {
            get
            {
                return this._group1;
            }
        }
        
        public virtual AstFileGroupList Group2
        {
            get
            {
                return this._group2;
            }
        }
        
        public virtual AstBackupTarget? BackupTarget
        {
            get
            {
                return this._backupTarget;
            }
        }
        
        public virtual AstBackupSettings? BackupSettings
        {
            get
            {
                return this._backupSettings;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupDatabase(this);
        }
        
        public static AstBackupDatabase? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// backup_database : 
        ///    BACKUP DATABASE database_id READ_WRITE_FILEGROUPS group1=file_group_list? group2=file_group_list? backup_target? backup_settings? 
        /// </summary>
        public static AstBackupDatabase New(AstDatabaseId databaseId, AstFileGroupList? group1, AstFileGroupList? group2, AstBackupTarget? backupTarget, AstBackupSettings? backupSettings)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(group1);
            list.Add(group2);
            list.Add(backupTarget);
            list.Add(backupSettings);
            return new AstBackupDatabase(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_group_assign : file_file_group  EQUAL  file_or_filegroup = stringtext
    /// </summary>
    public partial class AstFileGroupAssign : AstBnfRule
    {
        
        private AstFileFileGroup _fileFileGroup;
        
        private AstStringtext _fileOrFilegroup;
        
        private static string _ruleValue = "file_file_group  EQUAL  file_or_filegroup = stringtext";
        
        private static string _ruleName = "file_group_assign";
        
        public AstFileGroupAssign(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileFileGroup>())
                {
                    this._fileFileGroup = ((AstFileFileGroup)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._fileOrFilegroup = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroupAssign(Position p, AstFileFileGroup fileFileGroup, AstStringtext fileOrFilegroup) : 
                base(p)
        {
            this._fileFileGroup = fileFileGroup;
            this._fileOrFilegroup = fileOrFilegroup;
        }
        
        public AstFileGroupAssign(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileFileGroup>())
                {
                    this._fileFileGroup = ((AstFileFileGroup)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._fileOrFilegroup = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileFileGroup FileFileGroup
        {
            get
            {
                return this._fileFileGroup;
            }
        }
        
        public virtual AstStringtext FileOrFilegroup
        {
            get
            {
                return this._fileOrFilegroup;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroupAssign(this);
        }
        
        public static AstFileGroupAssign? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// file_group_assign : 
        ///    file_file_group EQUAL file_or_filegroup=stringtext 
        /// </summary>
        public static AstFileGroupAssign New(AstFileFileGroup fileFileGroup, AstStringtext fileOrFilegroup)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fileFileGroup);
            list.Add(fileOrFilegroup);
            return new AstFileGroupAssign(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_log : BACKUP  LOG  database_id  backup_target?  backup_settings?
    /// </summary>
    public partial class AstBackupLog : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private AstBackupTarget? _backupTarget;
        
        private AstBackupSettings? _backupSettings;
        
        private static string _ruleValue = "BACKUP  LOG  database_id  backup_target?  backup_settings?";
        
        private static string _ruleName = "backup_log";
        
        public AstBackupLog(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget?>())
                {
                    this._backupTarget = ((AstBackupTarget?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings?>())
                {
                    this._backupSettings = ((AstBackupSettings?)(enumerator.Current));
                }
            }
        }
        
        public AstBackupLog(Position p, AstDatabaseId databaseId, AstBackupTarget? backupTarget, AstBackupSettings? backupSettings) : 
                base(p)
        {
            this._databaseId = databaseId;
            this._backupTarget = backupTarget;
            this._backupSettings = backupSettings;
        }
        
        public AstBackupLog(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupTarget?>())
                {
                    this._backupTarget = ((AstBackupTarget?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupSettings?>())
                {
                    this._backupSettings = ((AstBackupSettings?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstBackupTarget? BackupTarget
        {
            get
            {
                return this._backupTarget;
            }
        }
        
        public virtual AstBackupSettings? BackupSettings
        {
            get
            {
                return this._backupSettings;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupLog(this);
        }
        
        public static AstBackupLog? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// backup_log : 
        ///    BACKUP LOG database_id backup_target? backup_settings? 
        /// </summary>
        public static AstBackupLog New(AstDatabaseId databaseId, AstBackupTarget? backupTarget, AstBackupSettings? backupSettings)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            list.Add(backupTarget);
            list.Add(backupSettings);
            return new AstBackupLog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_target : backup_to  backup_to_mirror
    /// </summary>
    public partial class AstBackupTarget : AstBnfRule
    {
        
        private AstBackupTo _backupTo;
        
        private AstBackupToMirror _backupToMirror;
        
        private static string _ruleValue = "backup_to  backup_to_mirror";
        
        private static string _ruleName = "backup_target";
        
        public AstBackupTarget(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTo>())
                {
                    this._backupTo = ((AstBackupTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupToMirror>())
                {
                    this._backupToMirror = ((AstBackupToMirror)(enumerator.Current));
                }
            }
        }
        
        public AstBackupTarget(Position p, AstBackupTo backupTo, AstBackupToMirror backupToMirror) : 
                base(p)
        {
            this._backupTo = backupTo;
            this._backupToMirror = backupToMirror;
        }
        
        public AstBackupTarget(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstBackupTo>())
                {
                    this._backupTo = ((AstBackupTo)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupToMirror>())
                {
                    this._backupToMirror = ((AstBackupToMirror)(enumerator.Current));
                }
            }
        }
        
        public virtual AstBackupTo BackupTo
        {
            get
            {
                return this._backupTo;
            }
        }
        
        public virtual AstBackupToMirror BackupToMirror
        {
            get
            {
                return this._backupToMirror;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupTarget(this);
        }
        
        public static AstBackupTarget? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// backup_target : 
        ///    backup_to backup_to_mirror 
        /// </summary>
        public static AstBackupTarget New(AstBackupTo backupTo, AstBackupToMirror backupToMirror)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(backupTo);
            list.Add(backupToMirror);
            return new AstBackupTarget(Position.Default, list);
        }
    }
    
    /// <summary>
    /// disk_tape_url_value : disk_tape_url  EQUAL  string_id
    /// </summary>
    public partial class AstDiskTapeUrlValue : AstBnfRule
    {
        
        private AstDiskTapeUrl _diskTapeUrl;
        
        private AstStringId _stringId;
        
        private static string _ruleValue = "disk_tape_url  EQUAL  string_id";
        
        private static string _ruleName = "disk_tape_url_value";
        
        public AstDiskTapeUrlValue(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDiskTapeUrl>())
                {
                    this._diskTapeUrl = ((AstDiskTapeUrl)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId>())
                {
                    this._stringId = ((AstStringId)(enumerator.Current));
                }
            }
        }
        
        public AstDiskTapeUrlValue(Position p, AstDiskTapeUrl diskTapeUrl, AstStringId stringId) : 
                base(p)
        {
            this._diskTapeUrl = diskTapeUrl;
            this._stringId = stringId;
        }
        
        public AstDiskTapeUrlValue(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDiskTapeUrl>())
                {
                    this._diskTapeUrl = ((AstDiskTapeUrl)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringId>())
                {
                    this._stringId = ((AstStringId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDiskTapeUrl DiskTapeUrl
        {
            get
            {
                return this._diskTapeUrl;
            }
        }
        
        public virtual AstStringId StringId
        {
            get
            {
                return this._stringId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDiskTapeUrlValue(this);
        }
        
        public static AstDiskTapeUrlValue? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// disk_tape_url_value : 
        ///    disk_tape_url EQUAL string_id 
        /// </summary>
        public static AstDiskTapeUrlValue New(AstDiskTapeUrl diskTapeUrl, AstStringId stringId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(diskTapeUrl);
            list.Add(stringId);
            return new AstDiskTapeUrlValue(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_certificate : BACKUP  CERTIFICATE  certificate_id  TO  FILE  EQUAL  cert_file = stringtext  (WITH  PRIVATE  KEY  LR_BRACKET  backup_certificate_private_keys  RR_BRACKET)?
    /// </summary>
    public partial class AstBackupCertificate : AstBnfRule
    {
        
        private AstCertificateId _certificateId;
        
        private AstStringtext _certFile;
        
        private AstBackupCertificatePrivateKeys _backupCertificatePrivateKeys;
        
        private static string _ruleValue = "BACKUP  CERTIFICATE  certificate_id  TO  FILE  EQUAL  cert_file = stringtext  (WI" +
            "TH  PRIVATE  KEY  LR_BRACKET  backup_certificate_private_keys  RR_BRACKET)?";
        
        private static string _ruleName = "backup_certificate";
        
        public AstBackupCertificate(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._certFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupCertificatePrivateKeys>())
                {
                    this._backupCertificatePrivateKeys = ((AstBackupCertificatePrivateKeys)(enumerator.Current));
                }
            }
        }
        
        public AstBackupCertificate(Position p, AstCertificateId certificateId, AstStringtext certFile, AstBackupCertificatePrivateKeys backupCertificatePrivateKeys) : 
                base(p)
        {
            this._certificateId = certificateId;
            this._certFile = certFile;
            this._backupCertificatePrivateKeys = backupCertificatePrivateKeys;
        }
        
        public AstBackupCertificate(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._certFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstBackupCertificatePrivateKeys>())
                {
                    this._backupCertificatePrivateKeys = ((AstBackupCertificatePrivateKeys)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstStringtext CertFile
        {
            get
            {
                return this._certFile;
            }
        }
        
        public virtual AstBackupCertificatePrivateKeys BackupCertificatePrivateKeys
        {
            get
            {
                return this._backupCertificatePrivateKeys;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupCertificate(this);
        }
        
        public static AstBackupCertificate? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// backup_certificate : 
        ///    BACKUP CERTIFICATE certificate_id TO FILE EQUAL cert_file=stringtext WITH PRIVATE KEY ( backup_certificate_private_keys ) 
        /// </summary>
        public static AstBackupCertificate New(AstCertificateId certificateId, AstStringtext certFile, AstBackupCertificatePrivateKeys backupCertificatePrivateKeys)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(certificateId);
            list.Add(certFile);
            list.Add(backupCertificatePrivateKeys);
            return new AstBackupCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_master_key : BACKUP  MASTER  KEY  TO  FILE  EQUAL  master_key_backup_file = stringtext  encryption_by_pwd
    /// </summary>
    public partial class AstBackupMasterKey : AstBnfRule
    {
        
        private AstStringtext _masterKeyBackupFile;
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        private static string _ruleValue = "BACKUP  MASTER  KEY  TO  FILE  EQUAL  master_key_backup_file = stringtext  encryp" +
            "tion_by_pwd";
        
        private static string _ruleName = "backup_master_key";
        
        public AstBackupMasterKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._masterKeyBackupFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstBackupMasterKey(Position p, AstStringtext masterKeyBackupFile, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._masterKeyBackupFile = masterKeyBackupFile;
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstBackupMasterKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._masterKeyBackupFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext MasterKeyBackupFile
        {
            get
            {
                return this._masterKeyBackupFile;
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupMasterKey(this);
        }
        
        public static AstBackupMasterKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// backup_master_key : 
        ///    BACKUP MASTER KEY TO FILE EQUAL master_key_backup_file=stringtext encryption_by_pwd 
        /// </summary>
        public static AstBackupMasterKey New(AstStringtext masterKeyBackupFile, AstEncryptionByPwd encryptionByPwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(masterKeyBackupFile);
            list.Add(encryptionByPwd);
            return new AstBackupMasterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// backup_service_master_key : BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL  service_master_key_backup_file = stringtext  encryption_by_pwd
    /// </summary>
    public partial class AstBackupServiceMasterKey : AstBnfRule
    {
        
        private AstStringtext _serviceMasterKeyBackupFile;
        
        private AstEncryptionByPwd _encryptionByPwd;
        
        private static string _ruleValue = "BACKUP  SERVICE  MASTER  KEY  TO  FILE  EQUAL  service_master_key_backup_file = s" +
            "tringtext  encryption_by_pwd";
        
        private static string _ruleName = "backup_service_master_key";
        
        public AstBackupServiceMasterKey(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._serviceMasterKeyBackupFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public AstBackupServiceMasterKey(Position p, AstStringtext serviceMasterKeyBackupFile, AstEncryptionByPwd encryptionByPwd) : 
                base(p)
        {
            this._serviceMasterKeyBackupFile = serviceMasterKeyBackupFile;
            this._encryptionByPwd = encryptionByPwd;
        }
        
        public AstBackupServiceMasterKey(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._serviceMasterKeyBackupFile = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstEncryptionByPwd>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext ServiceMasterKeyBackupFile
        {
            get
            {
                return this._serviceMasterKeyBackupFile;
            }
        }
        
        public virtual AstEncryptionByPwd EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBackupServiceMasterKey(this);
        }
        
        public static AstBackupServiceMasterKey? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// backup_service_master_key : 
        ///    BACKUP SERVICE MASTER KEY TO FILE EQUAL service_master_key_backup_file=stringtext encryption_by_pwd 
        /// </summary>
        public static AstBackupServiceMasterKey New(AstStringtext serviceMasterKeyBackupFile, AstEncryptionByPwd encryptionByPwd)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serviceMasterKeyBackupFile);
            list.Add(encryptionByPwd);
            return new AstBackupServiceMasterKey(Position.Default, list);
        }
    }
    
    /// <summary>
    /// execute_statement : EXECUTE  execute_body
    /// </summary>
    public partial class AstExecuteStatement : AstBnfRule
    {
        
        private AstExecuteBody _executeBody;
        
        private static string _ruleValue = "EXECUTE  execute_body";
        
        private static string _ruleName = "execute_statement";
        
        public AstExecuteStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteStatement(Position p, AstExecuteBody executeBody) : 
                base(p)
        {
            this._executeBody = executeBody;
        }
        
        public AstExecuteStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteBody>())
                {
                    this._executeBody = ((AstExecuteBody)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteBody ExecuteBody
        {
            get
            {
                return this._executeBody;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteStatement(this);
        }
        
        public static AstExecuteStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// execute_statement : 
        ///    EXECUTE execute_body 
        /// </summary>
        public static AstExecuteStatement New(AstExecuteBody executeBody)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(executeBody);
            return new AstExecuteStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// execute_body_batch : func_proc_name_server_database_schema  execute_statement_args?
    /// </summary>
    public partial class AstExecuteBodyBatch : AstBnfRule
    {
        
        private AstFuncProcNameServerDatabaseSchema _funcProcNameServerDatabaseSchema;
        
        private AstExecuteStatementArgs? _executeStatementArgs;
        
        private static string _ruleValue = "func_proc_name_server_database_schema  execute_statement_args?";
        
        private static string _ruleName = "execute_body_batch";
        
        public AstExecuteBodyBatch(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExecuteStatementArgs?>())
                {
                    this._executeStatementArgs = ((AstExecuteStatementArgs?)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteBodyBatch(Position p, AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema, AstExecuteStatementArgs? executeStatementArgs) : 
                base(p)
        {
            this._funcProcNameServerDatabaseSchema = funcProcNameServerDatabaseSchema;
            this._executeStatementArgs = executeStatementArgs;
        }
        
        public AstExecuteBodyBatch(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFuncProcNameServerDatabaseSchema>())
                {
                    this._funcProcNameServerDatabaseSchema = ((AstFuncProcNameServerDatabaseSchema)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExecuteStatementArgs?>())
                {
                    this._executeStatementArgs = ((AstExecuteStatementArgs?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFuncProcNameServerDatabaseSchema FuncProcNameServerDatabaseSchema
        {
            get
            {
                return this._funcProcNameServerDatabaseSchema;
            }
        }
        
        public virtual AstExecuteStatementArgs? ExecuteStatementArgs
        {
            get
            {
                return this._executeStatementArgs;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteBodyBatch(this);
        }
        
        public static AstExecuteBodyBatch? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// execute_body_batch : 
        ///    func_proc_name_server_database_schema execute_statement_args? 
        /// </summary>
        public static AstExecuteBodyBatch New(AstFuncProcNameServerDatabaseSchema funcProcNameServerDatabaseSchema, AstExecuteStatementArgs? executeStatementArgs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(funcProcNameServerDatabaseSchema);
            list.Add(executeStatementArgs);
            return new AstExecuteBodyBatch(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_certificate : CREATE  CERTIFICATE  certificate_id  (AUTHORIZATION  user_id)?  (FROM  existing_keys | generate_new_keys)  (ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off)?
    /// </summary>
    public partial class AstCreateCertificate : AstBnfRule
    {
        
        private AstCertificateId _certificateId;
        
        private AstUserId _userId;
        
        private AstExistingKeys _existingKeys;
        
        private AstGenerateNewKeys _generateNewKeys;
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "CREATE  CERTIFICATE  certificate_id  (AUTHORIZATION  user_id)?  (FROM  existing_k" +
            "eys | generate_new_keys)  (ACTIVE  FOR  BEGIN  DIALOG  EQUAL  on_off)?";
        
        private static string _ruleName = "create_certificate";
        
        public AstCreateCertificate(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExistingKeys>())
                {
                    this._existingKeys = ((AstExistingKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGenerateNewKeys>())
                {
                    this._generateNewKeys = ((AstGenerateNewKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstCreateCertificate(Position p, AstCertificateId certificateId, AstUserId userId, AstExistingKeys existingKeys, AstGenerateNewKeys generateNewKeys, AstOnOff onOff) : 
                base(p)
        {
            this._certificateId = certificateId;
            this._userId = userId;
            this._existingKeys = existingKeys;
            this._generateNewKeys = generateNewKeys;
            this._onOff = onOff;
        }
        
        public AstCreateCertificate(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCertificateId>())
                {
                    this._certificateId = ((AstCertificateId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUserId>())
                {
                    this._userId = ((AstUserId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExistingKeys>())
                {
                    this._existingKeys = ((AstExistingKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGenerateNewKeys>())
                {
                    this._generateNewKeys = ((AstGenerateNewKeys)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCertificateId CertificateId
        {
            get
            {
                return this._certificateId;
            }
        }
        
        public virtual AstUserId UserId
        {
            get
            {
                return this._userId;
            }
        }
        
        public virtual AstExistingKeys ExistingKeys
        {
            get
            {
                return this._existingKeys;
            }
        }
        
        public virtual AstGenerateNewKeys GenerateNewKeys
        {
            get
            {
                return this._generateNewKeys;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateCertificate(this);
        }
        
        public static AstCreateCertificate? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_certificate : 
        ///    CREATE CERTIFICATE certificate_id AUTHORIZATION user_id FROM existing_keys ACTIVE FOR BEGIN DIALOG EQUAL on_off 
        /// </summary>
        public static AstCreateCertificate New(AstCertificateId certificateId, AstUserId userId, AstExistingKeys existingKeys, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(certificateId);
            list.Add(userId);
            list.Add(existingKeys);
            list.Add(onOff);
            return new AstCreateCertificate(Position.Default, list);
        }
        
        /// <summary>
        /// create_certificate : 
        ///    CREATE CERTIFICATE certificate_id AUTHORIZATION user_id generate_new_keys ACTIVE FOR BEGIN DIALOG EQUAL on_off 
        /// </summary>
        public static AstCreateCertificate New(AstCertificateId certificateId, AstUserId userId, AstGenerateNewKeys generateNewKeys, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(certificateId);
            list.Add(userId);
            list.Add(generateNewKeys);
            list.Add(onOff);
            return new AstCreateCertificate(Position.Default, list);
        }
    }
    
    /// <summary>
    /// generate_new_keys : encryption_by_pwd?  WITH  SUBJECT  EQUAL  certificate_subject_name = stringtext  (COMMA  date_options)?
    /// </summary>
    public partial class AstGenerateNewKeys : AstBnfRule
    {
        
        private AstEncryptionByPwd? _encryptionByPwd;
        
        private AstStringtext _certificateSubjectName;
        
        private AstDateOptions _dateOptions;
        
        private static string _ruleValue = "encryption_by_pwd?  WITH  SUBJECT  EQUAL  certificate_subject_name = stringtext  " +
            "(COMMA  date_options)?";
        
        private static string _ruleName = "generate_new_keys";
        
        public AstGenerateNewKeys(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd?>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._certificateSubjectName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDateOptions>())
                {
                    this._dateOptions = ((AstDateOptions)(enumerator.Current));
                }
            }
        }
        
        public AstGenerateNewKeys(Position p, AstEncryptionByPwd? encryptionByPwd, AstStringtext certificateSubjectName, AstDateOptions dateOptions) : 
                base(p)
        {
            this._encryptionByPwd = encryptionByPwd;
            this._certificateSubjectName = certificateSubjectName;
            this._dateOptions = dateOptions;
        }
        
        public AstGenerateNewKeys(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstEncryptionByPwd?>())
                {
                    this._encryptionByPwd = ((AstEncryptionByPwd?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._certificateSubjectName = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDateOptions>())
                {
                    this._dateOptions = ((AstDateOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstEncryptionByPwd? EncryptionByPwd
        {
            get
            {
                return this._encryptionByPwd;
            }
        }
        
        public virtual AstStringtext CertificateSubjectName
        {
            get
            {
                return this._certificateSubjectName;
            }
        }
        
        public virtual AstDateOptions DateOptions
        {
            get
            {
                return this._dateOptions;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGenerateNewKeys(this);
        }
        
        public static AstGenerateNewKeys? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// generate_new_keys : 
        ///    encryption_by_pwd? WITH SUBJECT EQUAL certificate_subject_name=stringtext , date_options 
        /// </summary>
        public static AstGenerateNewKeys New(AstEncryptionByPwd? encryptionByPwd, AstStringtext certificateSubjectName, AstDateOptions dateOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(encryptionByPwd);
            list.Add(certificateSubjectName);
            list.Add(dateOptions);
            return new AstGenerateNewKeys(Position.Default, list);
        }
    }
    
    /// <summary>
    /// date_option : start_date_expiry_date  EQUAL  stringtext
    /// </summary>
    public partial class AstDateOption : AstBnfRule
    {
        
        private AstStartDateExpiryDate _startDateExpiryDate;
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "start_date_expiry_date  EQUAL  stringtext";
        
        private static string _ruleName = "date_option";
        
        public AstDateOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStartDateExpiryDate>())
                {
                    this._startDateExpiryDate = ((AstStartDateExpiryDate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstDateOption(Position p, AstStartDateExpiryDate startDateExpiryDate, AstStringtext stringtext) : 
                base(p)
        {
            this._startDateExpiryDate = startDateExpiryDate;
            this._stringtext = stringtext;
        }
        
        public AstDateOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStartDateExpiryDate>())
                {
                    this._startDateExpiryDate = ((AstStartDateExpiryDate)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStartDateExpiryDate StartDateExpiryDate
        {
            get
            {
                return this._startDateExpiryDate;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDateOption(this);
        }
        
        public static AstDateOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// date_option : 
        ///    start_date_expiry_date EQUAL stringtext 
        /// </summary>
        public static AstDateOption New(AstStartDateExpiryDate startDateExpiryDate, AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(startDateExpiryDate);
            list.Add(stringtext);
            return new AstDateOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// use_statement : USE  database_id
    /// </summary>
    public partial class AstUseStatement : AstBnfRule
    {
        
        private AstDatabaseId _databaseId;
        
        private static string _ruleValue = "USE  database_id";
        
        private static string _ruleName = "use_statement";
        
        public AstUseStatement(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public AstUseStatement(Position p, AstDatabaseId databaseId) : 
                base(p)
        {
            this._databaseId = databaseId;
        }
        
        public AstUseStatement(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDatabaseId>())
                {
                    this._databaseId = ((AstDatabaseId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDatabaseId DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUseStatement(this);
        }
        
        public static AstUseStatement? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// use_statement : 
        ///    USE database_id 
        /// </summary>
        public static AstUseStatement New(AstDatabaseId databaseId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(databaseId);
            return new AstUseStatement(Position.Default, list);
        }
    }
    
    /// <summary>
    /// execute_clause : EXECUTE  AS  execute_clause_mode
    /// </summary>
    public partial class AstExecuteClause : AstBnfRule
    {
        
        private AstExecuteClauseMode _executeClauseMode;
        
        private static string _ruleValue = "EXECUTE  AS  execute_clause_mode";
        
        private static string _ruleName = "execute_clause";
        
        public AstExecuteClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteClauseMode>())
                {
                    this._executeClauseMode = ((AstExecuteClauseMode)(enumerator.Current));
                }
            }
        }
        
        public AstExecuteClause(Position p, AstExecuteClauseMode executeClauseMode) : 
                base(p)
        {
            this._executeClauseMode = executeClauseMode;
        }
        
        public AstExecuteClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExecuteClauseMode>())
                {
                    this._executeClauseMode = ((AstExecuteClauseMode)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExecuteClauseMode ExecuteClauseMode
        {
            get
            {
                return this._executeClauseMode;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExecuteClause(this);
        }
        
        public static AstExecuteClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// execute_clause : 
        ///    EXECUTE AS execute_clause_mode 
        /// </summary>
        public static AstExecuteClause New(AstExecuteClauseMode executeClauseMode)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(executeClauseMode);
            return new AstExecuteClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// declare_local : local_id  AS?  data_type  (EQUAL  expression)?
    /// </summary>
    public partial class AstDeclareLocal : AstBnfRule
    {
        
        private AstLocalId _localId;
        
        private AstDataType _dataType;
        
        private AstExpression _expression;
        
        private static string _ruleValue = "local_id  AS?  data_type  (EQUAL  expression)?";
        
        private static string _ruleName = "declare_local";
        
        public AstDeclareLocal(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareLocal(Position p, AstLocalId localId, AstDataType dataType, AstExpression expression) : 
                base(p)
        {
            this._localId = localId;
            this._dataType = dataType;
            this._expression = expression;
        }
        
        public AstDeclareLocal(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareLocal(this);
        }
        
        public static AstDeclareLocal? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// declare_local : 
        ///    local_id AS? data_type EQUAL expression 
        /// </summary>
        public static AstDeclareLocal New(AstLocalId localId, AstDataType dataType, AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localId);
            list.Add(dataType);
            list.Add(expression);
            return new AstDeclareLocal(Position.Default, list);
        }
    }
    
    /// <summary>
    /// table_type_definition : TABLE  LR_BRACKET  column_def_table_constraints  table_type_indices?  RR_BRACKET
    /// </summary>
    public partial class AstTableTypeDefinition : AstBnfRule
    {
        
        private AstColumnDefTableConstraints _columnDefTableConstraints;
        
        private AstTableTypeIndices? _tableTypeIndices;
        
        private static string _ruleValue = "TABLE  LR_BRACKET  column_def_table_constraints  table_type_indices?  RR_BRACKET";
        
        private static string _ruleName = "table_type_definition";
        
        public AstTableTypeDefinition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeIndices?>())
                {
                    this._tableTypeIndices = ((AstTableTypeIndices?)(enumerator.Current));
                }
            }
        }
        
        public AstTableTypeDefinition(Position p, AstColumnDefTableConstraints columnDefTableConstraints, AstTableTypeIndices? tableTypeIndices) : 
                base(p)
        {
            this._columnDefTableConstraints = columnDefTableConstraints;
            this._tableTypeIndices = tableTypeIndices;
        }
        
        public AstTableTypeDefinition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDefTableConstraints>())
                {
                    this._columnDefTableConstraints = ((AstColumnDefTableConstraints)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableTypeIndices?>())
                {
                    this._tableTypeIndices = ((AstTableTypeIndices?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDefTableConstraints ColumnDefTableConstraints
        {
            get
            {
                return this._columnDefTableConstraints;
            }
        }
        
        public virtual AstTableTypeIndices? TableTypeIndices
        {
            get
            {
                return this._tableTypeIndices;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableTypeDefinition(this);
        }
        
        public static AstTableTypeDefinition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// table_type_definition : 
        ///    TABLE ( column_def_table_constraints table_type_indices? ) 
        /// </summary>
        public static AstTableTypeDefinition New(AstColumnDefTableConstraints columnDefTableConstraints, AstTableTypeIndices? tableTypeIndices)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnDefTableConstraints);
            list.Add(tableTypeIndices);
            return new AstTableTypeDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// xml_type_definition : XML  LR_BRACKET  content_document?  xml_schema_collection  RR_BRACKET
    /// </summary>
    public partial class AstXmlTypeDefinition : AstBnfRule
    {
        
        private AstContentDocument? _contentDocument;
        
        private AstXmlSchemaCollection _xmlSchemaCollection;
        
        private static string _ruleValue = "XML  LR_BRACKET  content_document?  xml_schema_collection  RR_BRACKET";
        
        private static string _ruleName = "xml_type_definition";
        
        public AstXmlTypeDefinition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContentDocument?>())
                {
                    this._contentDocument = ((AstContentDocument?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public AstXmlTypeDefinition(Position p, AstContentDocument? contentDocument, AstXmlSchemaCollection xmlSchemaCollection) : 
                base(p)
        {
            this._contentDocument = contentDocument;
            this._xmlSchemaCollection = xmlSchemaCollection;
        }
        
        public AstXmlTypeDefinition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstContentDocument?>())
                {
                    this._contentDocument = ((AstContentDocument?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlSchemaCollection>())
                {
                    this._xmlSchemaCollection = ((AstXmlSchemaCollection)(enumerator.Current));
                }
            }
        }
        
        public virtual AstContentDocument? ContentDocument
        {
            get
            {
                return this._contentDocument;
            }
        }
        
        public virtual AstXmlSchemaCollection XmlSchemaCollection
        {
            get
            {
                return this._xmlSchemaCollection;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitXmlTypeDefinition(this);
        }
        
        public static AstXmlTypeDefinition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// xml_type_definition : 
        ///    XML ( content_document? xml_schema_collection ) 
        /// </summary>
        public static AstXmlTypeDefinition New(AstContentDocument? contentDocument, AstXmlSchemaCollection xmlSchemaCollection)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(contentDocument);
            list.Add(xmlSchemaCollection);
            return new AstXmlTypeDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_definition : column_id  (data_type | AS  expression  PERSISTED?)  column_definition_elements?  column_index?
    /// </summary>
    public partial class AstColumnDefinition : AstBnfRule
    {
        
        private AstColumnId _columnId;
        
        private AstDataType _dataType;
        
        private AstExpression _expression;
        
        private AstColumnDefinitionElements? _columnDefinitionElements;
        
        private AstColumnIndex? _columnIndex;
        
        private static string _ruleValue = "column_id  (data_type | AS  expression  PERSISTED?)  column_definition_elements? " +
            " column_index?";
        
        private static string _ruleName = "column_definition";
        
        public AstColumnDefinition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElements?>())
                {
                    this._columnDefinitionElements = ((AstColumnDefinitionElements?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex?>())
                {
                    this._columnIndex = ((AstColumnIndex?)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDefinition(Position p, AstColumnId columnId, AstDataType dataType, AstExpression expression, AstColumnDefinitionElements? columnDefinitionElements, AstColumnIndex? columnIndex) : 
                base(p)
        {
            this._columnId = columnId;
            this._dataType = dataType;
            this._expression = expression;
            this._columnDefinitionElements = columnDefinitionElements;
            this._columnIndex = columnIndex;
        }
        
        public AstColumnDefinition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnDefinitionElements?>())
                {
                    this._columnDefinitionElements = ((AstColumnDefinitionElements?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnIndex?>())
                {
                    this._columnIndex = ((AstColumnIndex?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstColumnDefinitionElements? ColumnDefinitionElements
        {
            get
            {
                return this._columnDefinitionElements;
            }
        }
        
        public virtual AstColumnIndex? ColumnIndex
        {
            get
            {
                return this._columnIndex;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDefinition(this);
        }
        
        public static AstColumnDefinition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// column_definition : 
        ///    column_id data_type column_definition_elements? column_index? 
        /// </summary>
        public static AstColumnDefinition New(AstColumnId columnId, AstDataType dataType, AstColumnDefinitionElements? columnDefinitionElements, AstColumnIndex? columnIndex)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnId);
            list.Add(dataType);
            list.Add(columnDefinitionElements);
            list.Add(columnIndex);
            return new AstColumnDefinition(Position.Default, list);
        }
        
        /// <summary>
        /// column_definition : 
        ///    column_id AS expression PERSISTED? column_definition_elements? column_index? 
        /// </summary>
        public static AstColumnDefinition New(AstColumnId columnId, AstExpression expression, AstColumnDefinitionElements? columnDefinitionElements, AstColumnIndex? columnIndex)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnId);
            list.Add(expression);
            list.Add(columnDefinitionElements);
            list.Add(columnIndex);
            return new AstColumnDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_modifier : id_  add_drop  (column_modifier_enum | MASKED  (WITH  (FUNCTION  EQUAL  stringtext | LR_BRACKET  FUNCTION  EQUAL  stringtext  RR_BRACKET))?)
    /// </summary>
    public partial class AstColumnModifier : AstBnfRule
    {
        
        private AstId _id;
        
        private AstAddDrop _addDrop;
        
        private AstColumnModifierEnum _columnModifierEnum;
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "id_  add_drop  (column_modifier_enum | MASKED  (WITH  (FUNCTION  EQUAL  stringtex" +
            "t | LR_BRACKET  FUNCTION  EQUAL  stringtext  RR_BRACKET))?)";
        
        private static string _ruleName = "column_modifier";
        
        public AstColumnModifier(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifierEnum>())
                {
                    this._columnModifierEnum = ((AstColumnModifierEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstColumnModifier(Position p, AstId id, AstAddDrop addDrop, AstColumnModifierEnum columnModifierEnum, AstStringtext stringtext) : 
                base(p)
        {
            this._id = id;
            this._addDrop = addDrop;
            this._columnModifierEnum = columnModifierEnum;
            this._stringtext = stringtext;
        }
        
        public AstColumnModifier(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAddDrop>())
                {
                    this._addDrop = ((AstAddDrop)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnModifierEnum>())
                {
                    this._columnModifierEnum = ((AstColumnModifierEnum)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstAddDrop AddDrop
        {
            get
            {
                return this._addDrop;
            }
        }
        
        public virtual AstColumnModifierEnum ColumnModifierEnum
        {
            get
            {
                return this._columnModifierEnum;
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnModifier(this);
        }
        
        public static AstColumnModifier? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// column_modifier : 
        ///    id_ add_drop column_modifier_enum 
        /// </summary>
        public static AstColumnModifier New(AstId id, AstAddDrop addDrop, AstColumnModifierEnum columnModifierEnum)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(addDrop);
            list.Add(columnModifierEnum);
            return new AstColumnModifier(Position.Default, list);
        }
        
        /// <summary>
        /// column_modifier : 
        ///    id_ add_drop MASKED WITH FUNCTION EQUAL stringtext 
        /// </summary>
        public static AstColumnModifier New(AstId id, AstAddDrop addDrop, AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(addDrop);
            list.Add(stringtext);
            return new AstColumnModifier(Position.Default, list);
        }
    }
    
    /// <summary>
    /// materialized_column_definition : id_  compute_as  expression  materialized_mode?
    /// </summary>
    public partial class AstMaterializedColumnDefinition : AstBnfRule
    {
        
        private AstId _id;
        
        private AstComputeAs _computeAs;
        
        private AstExpression _expression;
        
        private AstMaterializedMode? _materializedMode;
        
        private static string _ruleValue = "id_  compute_as  expression  materialized_mode?";
        
        private static string _ruleName = "materialized_column_definition";
        
        public AstMaterializedColumnDefinition(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComputeAs>())
                {
                    this._computeAs = ((AstComputeAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaterializedMode?>())
                {
                    this._materializedMode = ((AstMaterializedMode?)(enumerator.Current));
                }
            }
        }
        
        public AstMaterializedColumnDefinition(Position p, AstId id, AstComputeAs computeAs, AstExpression expression, AstMaterializedMode? materializedMode) : 
                base(p)
        {
            this._id = id;
            this._computeAs = computeAs;
            this._expression = expression;
            this._materializedMode = materializedMode;
        }
        
        public AstMaterializedColumnDefinition(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComputeAs>())
                {
                    this._computeAs = ((AstComputeAs)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaterializedMode?>())
                {
                    this._materializedMode = ((AstMaterializedMode?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstComputeAs ComputeAs
        {
            get
            {
                return this._computeAs;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstMaterializedMode? MaterializedMode
        {
            get
            {
                return this._materializedMode;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitMaterializedColumnDefinition(this);
        }
        
        public static AstMaterializedColumnDefinition? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// materialized_column_definition : 
        ///    id_ compute_as expression materialized_mode? 
        /// </summary>
        public static AstMaterializedColumnDefinition New(AstId id, AstComputeAs computeAs, AstExpression expression, AstMaterializedMode? materializedMode)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(computeAs);
            list.Add(expression);
            list.Add(materializedMode);
            return new AstMaterializedColumnDefinition(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_index : INDEX  index_id?  create_table_index_options?  on_partition_or_filegroup?  (FILESTREAM_ON  (filestream_filegroup_or_partition_schema_id | NULL_DOUBLE_QUOTE))?
    /// </summary>
    public partial class AstColumnIndex : AstBnfRule
    {
        
        private AstIndexId? _indexId;
        
        private AstCreateTableIndexOptions? _createTableIndexOptions;
        
        private AstOnPartitionOrFilegroup? _onPartitionOrFilegroup;
        
        private AstFilestreamFilegroupOrPartitionSchemaId _filestreamFilegroupOrPartitionSchemaId;
        
        private static string _ruleValue = "INDEX  index_id?  create_table_index_options?  on_partition_or_filegroup?  (FILES" +
            "TREAM_ON  (filestream_filegroup_or_partition_schema_id | NULL_DOUBLE_QUOTE))?";
        
        private static string _ruleName = "column_index";
        
        public AstColumnIndex(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId?>())
                {
                    this._indexId = ((AstIndexId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions?>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup?>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilestreamFilegroupOrPartitionSchemaId>())
                {
                    this._filestreamFilegroupOrPartitionSchemaId = ((AstFilestreamFilegroupOrPartitionSchemaId)(enumerator.Current));
                }
            }
        }
        
        public AstColumnIndex(Position p, AstIndexId? indexId, AstCreateTableIndexOptions? createTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup, AstFilestreamFilegroupOrPartitionSchemaId filestreamFilegroupOrPartitionSchemaId) : 
                base(p)
        {
            this._indexId = indexId;
            this._createTableIndexOptions = createTableIndexOptions;
            this._onPartitionOrFilegroup = onPartitionOrFilegroup;
            this._filestreamFilegroupOrPartitionSchemaId = filestreamFilegroupOrPartitionSchemaId;
        }
        
        public AstColumnIndex(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstIndexId?>())
                {
                    this._indexId = ((AstIndexId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCreateTableIndexOptions?>())
                {
                    this._createTableIndexOptions = ((AstCreateTableIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup?>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilestreamFilegroupOrPartitionSchemaId>())
                {
                    this._filestreamFilegroupOrPartitionSchemaId = ((AstFilestreamFilegroupOrPartitionSchemaId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstIndexId? IndexId
        {
            get
            {
                return this._indexId;
            }
        }
        
        public virtual AstCreateTableIndexOptions? CreateTableIndexOptions
        {
            get
            {
                return this._createTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup? OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public virtual AstFilestreamFilegroupOrPartitionSchemaId FilestreamFilegroupOrPartitionSchemaId
        {
            get
            {
                return this._filestreamFilegroupOrPartitionSchemaId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnIndex(this);
        }
        
        public static AstColumnIndex? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// column_index : 
        ///    INDEX index_id? create_table_index_options? on_partition_or_filegroup? FILESTREAM_ON filestream_filegroup_or_partition_schema_id 
        /// </summary>
        public static AstColumnIndex New(AstIndexId? indexId, AstCreateTableIndexOptions? createTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup, AstFilestreamFilegroupOrPartitionSchemaId filestreamFilegroupOrPartitionSchemaId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(indexId);
            list.Add(createTableIndexOptions);
            list.Add(onPartitionOrFilegroup);
            list.Add(filestreamFilegroupOrPartitionSchemaId);
            return new AstColumnIndex(Position.Default, list);
        }
        
        /// <summary>
        /// column_index : 
        ///    INDEX index_id? create_table_index_options? on_partition_or_filegroup? FILESTREAM_ON NULL_DOUBLE_QUOTE 
        /// </summary>
        public static AstColumnIndex New(AstIndexId? indexId, AstCreateTableIndexOptions? createTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(indexId);
            list.Add(createTableIndexOptions);
            list.Add(onPartitionOrFilegroup);
            return new AstColumnIndex(Position.Default, list);
        }
    }
    
    /// <summary>
    /// primary_key_options : (WITH  FILLFACTOR  EQUAL  decimal)?  alter_table_index_options?  on_partition_or_filegroup?
    /// </summary>
    public partial class AstPrimaryKeyOptions : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private AstAlterTableIndexOptions? _alterTableIndexOptions;
        
        private AstOnPartitionOrFilegroup? _onPartitionOrFilegroup;
        
        private static string _ruleValue = "(WITH  FILLFACTOR  EQUAL  decimal)?  alter_table_index_options?  on_partition_or_" +
            "filegroup?";
        
        private static string _ruleName = "primary_key_options";
        
        public AstPrimaryKeyOptions(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableIndexOptions?>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup?>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup?)(enumerator.Current));
                }
            }
        }
        
        public AstPrimaryKeyOptions(Position p, AstDecimal @decimal, AstAlterTableIndexOptions? alterTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup) : 
                base(p)
        {
            this._decimal = @decimal;
            this._alterTableIndexOptions = alterTableIndexOptions;
            this._onPartitionOrFilegroup = onPartitionOrFilegroup;
        }
        
        public AstPrimaryKeyOptions(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAlterTableIndexOptions?>())
                {
                    this._alterTableIndexOptions = ((AstAlterTableIndexOptions?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnPartitionOrFilegroup?>())
                {
                    this._onPartitionOrFilegroup = ((AstOnPartitionOrFilegroup?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstAlterTableIndexOptions? AlterTableIndexOptions
        {
            get
            {
                return this._alterTableIndexOptions;
            }
        }
        
        public virtual AstOnPartitionOrFilegroup? OnPartitionOrFilegroup
        {
            get
            {
                return this._onPartitionOrFilegroup;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPrimaryKeyOptions(this);
        }
        
        public static AstPrimaryKeyOptions? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// primary_key_options : 
        ///    WITH FILLFACTOR EQUAL decimal alter_table_index_options? on_partition_or_filegroup? 
        /// </summary>
        public static AstPrimaryKeyOptions New(AstDecimal @decimal, AstAlterTableIndexOptions? alterTableIndexOptions, AstOnPartitionOrFilegroup? onPartitionOrFilegroup)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            list.Add(alterTableIndexOptions);
            list.Add(onPartitionOrFilegroup);
            return new AstPrimaryKeyOptions(Position.Default, list);
        }
    }
    
    /// <summary>
    /// foreign_key_options : REFERENCES  full_table_ref  LR_BRACKET  pk = column_name_list  RR_BRACKET  on_delete?  on_update?  (NOT  FOR  REPLICATION)?
    /// </summary>
    public partial class AstForeignKeyOptions : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstColumnNameList _pk;
        
        private AstOnDelete? _onDelete;
        
        private AstOnUpdate? _onUpdate;
        
        private static string _ruleValue = "REFERENCES  full_table_ref  LR_BRACKET  pk = column_name_list  RR_BRACKET  on_del" +
            "ete?  on_update?  (NOT  FOR  REPLICATION)?";
        
        private static string _ruleName = "foreign_key_options";
        
        public AstForeignKeyOptions(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._pk = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete?>())
                {
                    this._onDelete = ((AstOnDelete?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate?>())
                {
                    this._onUpdate = ((AstOnUpdate?)(enumerator.Current));
                }
            }
        }
        
        public AstForeignKeyOptions(Position p, AstFullTableRef fullTableRef, AstColumnNameList pk, AstOnDelete? onDelete, AstOnUpdate? onUpdate) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._pk = pk;
            this._onDelete = onDelete;
            this._onUpdate = onUpdate;
        }
        
        public AstForeignKeyOptions(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._pk = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnDelete?>())
                {
                    this._onDelete = ((AstOnDelete?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnUpdate?>())
                {
                    this._onUpdate = ((AstOnUpdate?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstColumnNameList Pk
        {
            get
            {
                return this._pk;
            }
        }
        
        public virtual AstOnDelete? OnDelete
        {
            get
            {
                return this._onDelete;
            }
        }
        
        public virtual AstOnUpdate? OnUpdate
        {
            get
            {
                return this._onUpdate;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForeignKeyOptions(this);
        }
        
        public static AstForeignKeyOptions? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// foreign_key_options : 
        ///    REFERENCES full_table_ref ( pk=column_name_list ) on_delete? on_update? NOT FOR REPLICATION 
        /// </summary>
        public static AstForeignKeyOptions New(AstFullTableRef fullTableRef, AstColumnNameList pk, AstOnDelete? onDelete, AstOnUpdate? onUpdate)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(pk);
            list.Add(onDelete);
            list.Add(onUpdate);
            return new AstForeignKeyOptions(Position.Default, list);
        }
    }
    
    /// <summary>
    /// check_constraint : CHECK  (NOT  FOR  REPLICATION)?  LR_BRACKET  search_condition  RR_BRACKET
    /// </summary>
    public partial class AstCheckConstraint : AstBnfRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private static string _ruleValue = "CHECK  (NOT  FOR  REPLICATION)?  LR_BRACKET  search_condition  RR_BRACKET";
        
        private static string _ruleName = "check_constraint";
        
        public AstCheckConstraint(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstCheckConstraint(Position p, AstSearchCondition searchCondition) : 
                base(p)
        {
            this._searchCondition = searchCondition;
        }
        
        public AstCheckConstraint(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCheckConstraint(this);
        }
        
        public static AstCheckConstraint? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// check_constraint : 
        ///    CHECK NOT FOR REPLICATION ( search_condition ) 
        /// </summary>
        public static AstCheckConstraint New(AstSearchCondition searchCondition)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(searchCondition);
            return new AstCheckConstraint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// declare_cursor : DECLARE  cursor_name  (CURSOR  (declare_set_cursor_common  (FOR  UPDATE  (OF  column_name_list)?)?)? | sensitive?  SCROLL?  CURSOR  FOR  select_statement_standalone  (FOR  (READ  ONLY | UPDATE | (OF  column_name_list)))?)  SEMI?
    /// </summary>
    public partial class AstDeclareCursor : AstBnfRule
    {
        
        private AstCursorName _cursorName;
        
        private AstDeclareSetCursorCommon _declareSetCursorCommon;
        
        private AstColumnNameList _columnNameList;
        
        private AstSensitive? _sensitive;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        private static string _ruleValue = "DECLARE  cursor_name  (CURSOR  (declare_set_cursor_common  (FOR  UPDATE  (OF  col" +
            "umn_name_list)?)?)? | sensitive?  SCROLL?  CURSOR  FOR  select_statement_standal" +
            "one  (FOR  (READ  ONLY | UPDATE | (OF  column_name_list)))?)  SEMI?";
        
        private static string _ruleName = "declare_cursor";
        
        public AstDeclareCursor(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeclareSetCursorCommon>())
                {
                    this._declareSetCursorCommon = ((AstDeclareSetCursorCommon)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSensitive?>())
                {
                    this._sensitive = ((AstSensitive?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareCursor(Position p, AstCursorName cursorName, AstDeclareSetCursorCommon declareSetCursorCommon, AstColumnNameList columnNameList, AstSensitive? sensitive, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._cursorName = cursorName;
            this._declareSetCursorCommon = declareSetCursorCommon;
            this._columnNameList = columnNameList;
            this._sensitive = sensitive;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstDeclareCursor(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDeclareSetCursorCommon>())
                {
                    this._declareSetCursorCommon = ((AstDeclareSetCursorCommon)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnNameList>())
                {
                    this._columnNameList = ((AstColumnNameList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSensitive?>())
                {
                    this._sensitive = ((AstSensitive?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstDeclareSetCursorCommon DeclareSetCursorCommon
        {
            get
            {
                return this._declareSetCursorCommon;
            }
        }
        
        public virtual AstColumnNameList ColumnNameList
        {
            get
            {
                return this._columnNameList;
            }
        }
        
        public virtual AstSensitive? Sensitive
        {
            get
            {
                return this._sensitive;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareCursor(this);
        }
        
        public static AstDeclareCursor? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// declare_cursor : 
        ///    DECLARE cursor_name CURSOR declare_set_cursor_common FOR UPDATE OF column_name_list SEMI? 
        /// </summary>
        public static AstDeclareCursor New(AstCursorName cursorName, AstDeclareSetCursorCommon declareSetCursorCommon, AstColumnNameList columnNameList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(cursorName);
            list.Add(declareSetCursorCommon);
            list.Add(columnNameList);
            return new AstDeclareCursor(Position.Default, list);
        }
        
        /// <summary>
        /// declare_cursor : 
        ///    DECLARE cursor_name sensitive? SCROLL? CURSOR FOR select_statement_standalone FOR READ ONLY SEMI? 
        /// </summary>
        public static AstDeclareCursor New(AstCursorName cursorName, AstSensitive? sensitive, AstSelectStatementStandalone selectStatementStandalone)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(cursorName);
            list.Add(sensitive);
            list.Add(selectStatementStandalone);
            return new AstDeclareCursor(Position.Default, list);
        }
        
        /// <summary>
        /// declare_cursor : 
        ///    DECLARE cursor_name sensitive? SCROLL? CURSOR FOR select_statement_standalone FOR OF column_name_list SEMI? 
        /// </summary>
        public static AstDeclareCursor New(AstCursorName cursorName, AstSensitive? sensitive, AstSelectStatementStandalone selectStatementStandalone, AstColumnNameList columnNameList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(cursorName);
            list.Add(sensitive);
            list.Add(selectStatementStandalone);
            list.Add(columnNameList);
            return new AstDeclareCursor(Position.Default, list);
        }
    }
    
    /// <summary>
    /// declare_set_cursor_common : declare_set_cursor_common_partials?  FOR  select_statement_standalone
    /// </summary>
    public partial class AstDeclareSetCursorCommon : AstBnfRule
    {
        
        private AstDeclareSetCursorCommonPartials? _declareSetCursorCommonPartials;
        
        private AstSelectStatementStandalone _selectStatementStandalone;
        
        private static string _ruleValue = "declare_set_cursor_common_partials?  FOR  select_statement_standalone";
        
        private static string _ruleName = "declare_set_cursor_common";
        
        public AstDeclareSetCursorCommon(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartials?>())
                {
                    this._declareSetCursorCommonPartials = ((AstDeclareSetCursorCommonPartials?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public AstDeclareSetCursorCommon(Position p, AstDeclareSetCursorCommonPartials? declareSetCursorCommonPartials, AstSelectStatementStandalone selectStatementStandalone) : 
                base(p)
        {
            this._declareSetCursorCommonPartials = declareSetCursorCommonPartials;
            this._selectStatementStandalone = selectStatementStandalone;
        }
        
        public AstDeclareSetCursorCommon(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeclareSetCursorCommonPartials?>())
                {
                    this._declareSetCursorCommonPartials = ((AstDeclareSetCursorCommonPartials?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectStatementStandalone>())
                {
                    this._selectStatementStandalone = ((AstSelectStatementStandalone)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeclareSetCursorCommonPartials? DeclareSetCursorCommonPartials
        {
            get
            {
                return this._declareSetCursorCommonPartials;
            }
        }
        
        public virtual AstSelectStatementStandalone SelectStatementStandalone
        {
            get
            {
                return this._selectStatementStandalone;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeclareSetCursorCommon(this);
        }
        
        public static AstDeclareSetCursorCommon? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// declare_set_cursor_common : 
        ///    declare_set_cursor_common_partials? FOR select_statement_standalone 
        /// </summary>
        public static AstDeclareSetCursorCommon New(AstDeclareSetCursorCommonPartials? declareSetCursorCommonPartials, AstSelectStatementStandalone selectStatementStandalone)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(declareSetCursorCommonPartials);
            list.Add(selectStatementStandalone);
            return new AstDeclareSetCursorCommon(Position.Default, list);
        }
    }
    
    /// <summary>
    /// fetch_cursor : FETCH  ((fetch_cursor_strategy | absolute_relative  expression)?  FROM)?  GLOBAL?  cursor_name  (INTO  local_ids)?  SEMI?
    /// </summary>
    public partial class AstFetchCursor : AstBnfRule
    {
        
        private AstFetchCursorStrategy _fetchCursorStrategy;
        
        private AstAbsoluteRelative _absoluteRelative;
        
        private AstExpression _expression;
        
        private AstCursorName _cursorName;
        
        private AstLocalIds _localIds;
        
        private static string _ruleValue = "FETCH  ((fetch_cursor_strategy | absolute_relative  expression)?  FROM)?  GLOBAL?" +
            "  cursor_name  (INTO  local_ids)?  SEMI?";
        
        private static string _ruleName = "fetch_cursor";
        
        public AstFetchCursor(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFetchCursorStrategy>())
                {
                    this._fetchCursorStrategy = ((AstFetchCursorStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsoluteRelative>())
                {
                    this._absoluteRelative = ((AstAbsoluteRelative)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds>())
                {
                    this._localIds = ((AstLocalIds)(enumerator.Current));
                }
            }
        }
        
        public AstFetchCursor(Position p, AstFetchCursorStrategy fetchCursorStrategy, AstAbsoluteRelative absoluteRelative, AstExpression expression, AstCursorName cursorName, AstLocalIds localIds) : 
                base(p)
        {
            this._fetchCursorStrategy = fetchCursorStrategy;
            this._absoluteRelative = absoluteRelative;
            this._expression = expression;
            this._cursorName = cursorName;
            this._localIds = localIds;
        }
        
        public AstFetchCursor(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFetchCursorStrategy>())
                {
                    this._fetchCursorStrategy = ((AstFetchCursorStrategy)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsoluteRelative>())
                {
                    this._absoluteRelative = ((AstAbsoluteRelative)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstCursorName>())
                {
                    this._cursorName = ((AstCursorName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalIds>())
                {
                    this._localIds = ((AstLocalIds)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFetchCursorStrategy FetchCursorStrategy
        {
            get
            {
                return this._fetchCursorStrategy;
            }
        }
        
        public virtual AstAbsoluteRelative AbsoluteRelative
        {
            get
            {
                return this._absoluteRelative;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstCursorName CursorName
        {
            get
            {
                return this._cursorName;
            }
        }
        
        public virtual AstLocalIds LocalIds
        {
            get
            {
                return this._localIds;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFetchCursor(this);
        }
        
        public static AstFetchCursor? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// fetch_cursor : 
        ///    FETCH fetch_cursor_strategy FROM GLOBAL? cursor_name INTO local_ids SEMI? 
        /// </summary>
        public static AstFetchCursor New(AstFetchCursorStrategy fetchCursorStrategy, AstCursorName cursorName, AstLocalIds localIds)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fetchCursorStrategy);
            list.Add(cursorName);
            list.Add(localIds);
            return new AstFetchCursor(Position.Default, list);
        }
        
        /// <summary>
        /// fetch_cursor : 
        ///    FETCH absolute_relative expression FROM GLOBAL? cursor_name INTO local_ids SEMI? 
        /// </summary>
        public static AstFetchCursor New(AstAbsoluteRelative absoluteRelative, AstExpression expression, AstCursorName cursorName, AstLocalIds localIds)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(absoluteRelative);
            list.Add(expression);
            list.Add(cursorName);
            list.Add(localIds);
            return new AstFetchCursor(Position.Default, list);
        }
    }
    
    /// <summary>
    /// time_zone : AT_KEYWORD  TIME  ZONE  expression
    /// </summary>
    public partial class AstTimeZone : AstBnfRule
    {
        
        private AstExpression _expression;
        
        private static string _ruleValue = "AT_KEYWORD  TIME  ZONE  expression";
        
        private static string _ruleName = "time_zone";
        
        public AstTimeZone(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstTimeZone(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstTimeZone(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTimeZone(this);
        }
        
        public static AstTimeZone? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// time_zone : 
        ///    AT_KEYWORD TIME ZONE expression 
        /// </summary>
        public static AstTimeZone New(AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expression);
            return new AstTimeZone(Position.Default, list);
        }
    }
    
    /// <summary>
    /// subquery : select_statement
    /// </summary>
    public partial class AstSubquery : AstBnfRule
    {
        
        private AstSelectStatement _selectStatement;
        
        private static string _ruleValue = "select_statement";
        
        private static string _ruleName = "subquery";
        
        public AstSubquery(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public AstSubquery(Position p, AstSelectStatement selectStatement) : 
                base(p)
        {
            this._selectStatement = selectStatement;
        }
        
        public AstSubquery(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSelectStatement>())
                {
                    this._selectStatement = ((AstSelectStatement)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSelectStatement SelectStatement
        {
            get
            {
                return this._selectStatement;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSubquery(this);
        }
        
        public static AstSubquery? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// subquery : 
        ///    select_statement 
        /// </summary>
        public static AstSubquery New(AstSelectStatement selectStatement)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(selectStatement);
            return new AstSubquery(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_multi_assign : left = expression  MULT_ASSIGN  right = expression
    /// </summary>
    public partial class AstPredicateMultiAssign : AstBnfRule
    {
        
        private AstExpression _left;
        
        private AstExpression _right;
        
        private static string _ruleValue = "left = expression  MULT_ASSIGN  right = expression";
        
        private static string _ruleName = "predicate_multi_assign";
        
        public AstPredicateMultiAssign(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateMultiAssign(Position p, AstExpression left, AstExpression right) : 
                base(p)
        {
            this._left = left;
            this._right = right;
        }
        
        public AstPredicateMultiAssign(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Left
        {
            get
            {
                return this._left;
            }
        }
        
        public virtual AstExpression Right
        {
            get
            {
                return this._right;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateMultiAssign(this);
        }
        
        public static AstPredicateMultiAssign? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// predicate_multi_assign : 
        ///    left=expression MULT_ASSIGN right=expression 
        /// </summary>
        public static AstPredicateMultiAssign New(AstExpression left, AstExpression right)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(left);
            list.Add(right);
            return new AstPredicateMultiAssign(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_binary : left = expression  comparison_operator  right = expression
    /// </summary>
    public partial class AstPredicateBinary : AstBnfRule
    {
        
        private AstExpression _left;
        
        private AstComparisonOperator _comparisonOperator;
        
        private AstExpression _right;
        
        private static string _ruleValue = "left = expression  comparison_operator  right = expression";
        
        private static string _ruleName = "predicate_binary";
        
        public AstPredicateBinary(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComparisonOperator>())
                {
                    this._comparisonOperator = ((AstComparisonOperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateBinary(Position p, AstExpression left, AstComparisonOperator comparisonOperator, AstExpression right) : 
                base(p)
        {
            this._left = left;
            this._comparisonOperator = comparisonOperator;
            this._right = right;
        }
        
        public AstPredicateBinary(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstComparisonOperator>())
                {
                    this._comparisonOperator = ((AstComparisonOperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Left
        {
            get
            {
                return this._left;
            }
        }
        
        public virtual AstComparisonOperator ComparisonOperator
        {
            get
            {
                return this._comparisonOperator;
            }
        }
        
        public virtual AstExpression Right
        {
            get
            {
                return this._right;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateBinary(this);
        }
        
        public static AstPredicateBinary? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// predicate_binary : 
        ///    left=expression comparison_operator right=expression 
        /// </summary>
        public static AstPredicateBinary New(AstExpression left, AstComparisonOperator comparisonOperator, AstExpression right)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(left);
            list.Add(comparisonOperator);
            list.Add(right);
            return new AstPredicateBinary(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_tier : init = expression  NOT*  BETWEEN  left = expression  AND  right = expression
    /// </summary>
    public partial class AstPredicateTier : AstBnfRule
    {
        
        private AstExpression _init;
        
        private AstExpression _left;
        
        private AstExpression _right;
        
        private static string _ruleValue = "init = expression  NOT*  BETWEEN  left = expression  AND  right = expression";
        
        private static string _ruleName = "predicate_tier";
        
        public AstPredicateTier(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._init = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateTier(Position p, AstExpression init, AstExpression left, AstExpression right) : 
                base(p)
        {
            this._init = init;
            this._left = left;
            this._right = right;
        }
        
        public AstPredicateTier(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._init = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Init
        {
            get
            {
                return this._init;
            }
        }
        
        public virtual AstExpression Left
        {
            get
            {
                return this._left;
            }
        }
        
        public virtual AstExpression Right
        {
            get
            {
                return this._right;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateTier(this);
        }
        
        public static AstPredicateTier? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// predicate_tier : 
        ///    init=expression NOT* BETWEEN left=expression AND right=expression 
        /// </summary>
        public static AstPredicateTier New(AstExpression init, AstExpression left, AstExpression right)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(init);
            list.Add(left);
            list.Add(right);
            return new AstPredicateTier(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_not_like : left = expression  NOT*  LIKE  right = expression  (ESCAPE  escape = expression)?
    /// </summary>
    public partial class AstPredicateNotLike : AstBnfRule
    {
        
        private AstExpression _left;
        
        private AstExpression _right;
        
        private AstExpression _escape;
        
        private static string _ruleValue = "left = expression  NOT*  LIKE  right = expression  (ESCAPE  escape = expression)?" +
            "";
        
        private static string _ruleName = "predicate_not_like";
        
        public AstPredicateNotLike(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._escape = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateNotLike(Position p, AstExpression left, AstExpression right, AstExpression escape) : 
                base(p)
        {
            this._left = left;
            this._right = right;
            this._escape = escape;
        }
        
        public AstPredicateNotLike(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._right = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._escape = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Left
        {
            get
            {
                return this._left;
            }
        }
        
        public virtual AstExpression Right
        {
            get
            {
                return this._right;
            }
        }
        
        public virtual AstExpression Escape
        {
            get
            {
                return this._escape;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateNotLike(this);
        }
        
        public static AstPredicateNotLike? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// predicate_not_like : 
        ///    left=expression NOT* LIKE right=expression ESCAPE escape=expression 
        /// </summary>
        public static AstPredicateNotLike New(AstExpression left, AstExpression right, AstExpression escape)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(left);
            list.Add(right);
            list.Add(escape);
            return new AstPredicateNotLike(Position.Default, list);
        }
    }
    
    /// <summary>
    /// predicate_not_in : left = expression  NOT*  IN  LR_BRACKET  (subquery | expression_list)  RR_BRACKET
    /// </summary>
    public partial class AstPredicateNotIn : AstBnfRule
    {
        
        private AstExpression _left;
        
        private AstSubquery _subquery;
        
        private AstExpressionList _expressionList;
        
        private static string _ruleValue = "left = expression  NOT*  IN  LR_BRACKET  (subquery | expression_list)  RR_BRACKET" +
            "";
        
        private static string _ruleName = "predicate_not_in";
        
        public AstPredicateNotIn(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSubquery>())
                {
                    this._subquery = ((AstSubquery)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public AstPredicateNotIn(Position p, AstExpression left, AstSubquery subquery, AstExpressionList expressionList) : 
                base(p)
        {
            this._left = left;
            this._subquery = subquery;
            this._expressionList = expressionList;
        }
        
        public AstPredicateNotIn(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._left = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSubquery>())
                {
                    this._subquery = ((AstSubquery)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Left
        {
            get
            {
                return this._left;
            }
        }
        
        public virtual AstSubquery Subquery
        {
            get
            {
                return this._subquery;
            }
        }
        
        public virtual AstExpressionList ExpressionList
        {
            get
            {
                return this._expressionList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPredicateNotIn(this);
        }
        
        public static AstPredicateNotIn? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// predicate_not_in : 
        ///    left=expression NOT* IN ( subquery ) 
        /// </summary>
        public static AstPredicateNotIn New(AstExpression left, AstSubquery subquery)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(left);
            list.Add(subquery);
            return new AstPredicateNotIn(Position.Default, list);
        }
        
        /// <summary>
        /// predicate_not_in : 
        ///    left=expression NOT* IN ( expression_list ) 
        /// </summary>
        public static AstPredicateNotIn New(AstExpression left, AstExpressionList expressionList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(left);
            list.Add(expressionList);
            return new AstPredicateNotIn(Position.Default, list);
        }
    }
    
    /// <summary>
    /// sql_union : join_mode  sql_union_def
    /// </summary>
    public partial class AstSqlUnion : AstBnfRule
    {
        
        private AstJoinMode _joinMode;
        
        private AstSqlUnionDef _sqlUnionDef;
        
        private static string _ruleValue = "join_mode  sql_union_def";
        
        private static string _ruleName = "sql_union";
        
        public AstSqlUnion(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinMode>())
                {
                    this._joinMode = ((AstJoinMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlUnionDef>())
                {
                    this._sqlUnionDef = ((AstSqlUnionDef)(enumerator.Current));
                }
            }
        }
        
        public AstSqlUnion(Position p, AstJoinMode joinMode, AstSqlUnionDef sqlUnionDef) : 
                base(p)
        {
            this._joinMode = joinMode;
            this._sqlUnionDef = sqlUnionDef;
        }
        
        public AstSqlUnion(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinMode>())
                {
                    this._joinMode = ((AstJoinMode)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSqlUnionDef>())
                {
                    this._sqlUnionDef = ((AstSqlUnionDef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstJoinMode JoinMode
        {
            get
            {
                return this._joinMode;
            }
        }
        
        public virtual AstSqlUnionDef SqlUnionDef
        {
            get
            {
                return this._sqlUnionDef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSqlUnion(this);
        }
        
        public static AstSqlUnion? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// sql_union : 
        ///    join_mode sql_union_def 
        /// </summary>
        public static AstSqlUnion New(AstJoinMode joinMode, AstSqlUnionDef sqlUnionDef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(joinMode);
            list.Add(sqlUnionDef);
            return new AstSqlUnion(Position.Default, list);
        }
    }
    
    /// <summary>
    /// query_specification : SELECT  allOrDistinct = all_distinct  top = top_clause  columns = select_list  (INTO  into = full_table_ref)?  (FROM  from = table_sources)?  where_condition?  (GROUP  BY  ((groupByAll = ALL  groupBys_list) | GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET))?  (HAVING  having = search_condition)?
    /// </summary>
    public partial class AstQuerySpecification : AstBnfRule
    {
        
        private AstAllDistinct _allOrDistinct;
        
        private AstTopClause _top;
        
        private AstSelectList _columns;
        
        private AstFullTableRef _into;
        
        private AstTableSources _from;
        
        private AstWhereCondition? _whereCondition;
        
        private AstGroupbysList _groupBysList;
        
        private AstGroupsetList _groupSetList;
        
        private AstSearchCondition _having;
        
        private static string _ruleValue = @"SELECT  allOrDistinct = all_distinct  top = top_clause  columns = select_list  (INTO  into = full_table_ref)?  (FROM  from = table_sources)?  where_condition?  (GROUP  BY  ((groupByAll = ALL  groupBys_list) | GROUPING  SETS  LR_BRACKET  groupSet_list  RR_BRACKET))?  (HAVING  having = search_condition)?";
        
        private static string _ruleName = "query_specification";
        
        public AstQuerySpecification(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct>())
                {
                    this._allOrDistinct = ((AstAllDistinct)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTopClause>())
                {
                    this._top = ((AstTopClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectList>())
                {
                    this._columns = ((AstSelectList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._into = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._from = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition?>())
                {
                    this._whereCondition = ((AstWhereCondition?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupbysList>())
                {
                    this._groupBysList = ((AstGroupbysList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupsetList>())
                {
                    this._groupSetList = ((AstGroupsetList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._having = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstQuerySpecification(Position p, AstAllDistinct allOrDistinct, AstTopClause top, AstSelectList columns, AstFullTableRef into, AstTableSources from, AstWhereCondition? whereCondition, AstGroupbysList groupBysList, AstGroupsetList groupSetList, AstSearchCondition having) : 
                base(p)
        {
            this._allOrDistinct = allOrDistinct;
            this._top = top;
            this._columns = columns;
            this._into = into;
            this._from = from;
            this._whereCondition = whereCondition;
            this._groupBysList = groupBysList;
            this._groupSetList = groupSetList;
            this._having = having;
        }
        
        public AstQuerySpecification(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct>())
                {
                    this._allOrDistinct = ((AstAllDistinct)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTopClause>())
                {
                    this._top = ((AstTopClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSelectList>())
                {
                    this._columns = ((AstSelectList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._into = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSources>())
                {
                    this._from = ((AstTableSources)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWhereCondition?>())
                {
                    this._whereCondition = ((AstWhereCondition?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupbysList>())
                {
                    this._groupBysList = ((AstGroupbysList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstGroupsetList>())
                {
                    this._groupSetList = ((AstGroupsetList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._having = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAllDistinct Allordistinct
        {
            get
            {
                return this._allOrDistinct;
            }
        }
        
        public virtual AstTopClause Top
        {
            get
            {
                return this._top;
            }
        }
        
        public virtual AstSelectList Columns
        {
            get
            {
                return this._columns;
            }
        }
        
        public virtual AstFullTableRef Into
        {
            get
            {
                return this._into;
            }
        }
        
        public virtual AstTableSources From
        {
            get
            {
                return this._from;
            }
        }
        
        public virtual AstWhereCondition? WhereCondition
        {
            get
            {
                return this._whereCondition;
            }
        }
        
        public virtual AstGroupbysList GroupbysList
        {
            get
            {
                return this._groupBysList;
            }
        }
        
        public virtual AstGroupsetList GroupsetList
        {
            get
            {
                return this._groupSetList;
            }
        }
        
        public virtual AstSearchCondition Having
        {
            get
            {
                return this._having;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitQuerySpecification(this);
        }
        
        public static AstQuerySpecification? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// query_specification : 
        ///    SELECT allOrDistinct=all_distinct? top=top_clause? columns=select_list INTO into=full_table_ref FROM from=table_sources where_condition? GROUP BY groupByAll=ALL? groupBys_list HAVING having=search_condition 
        /// </summary>
        public static AstQuerySpecification New(AstAllDistinct? allOrDistinct, AstTopClause? top, AstSelectList columns, AstFullTableRef into, AstTableSources from, AstWhereCondition? whereCondition, AstGroupbysList groupBysList, AstSearchCondition having)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(allOrDistinct);
            list.Add(top);
            list.Add(columns);
            list.Add(into);
            list.Add(from);
            list.Add(whereCondition);
            list.Add(groupBysList);
            list.Add(having);
            return new AstQuerySpecification(Position.Default, list);
        }
        
        /// <summary>
        /// query_specification : 
        ///    SELECT allOrDistinct=all_distinct? top=top_clause? columns=select_list INTO into=full_table_ref FROM from=table_sources where_condition? GROUP BY GROUPING SETS ( groupSet_list ) HAVING having=search_condition 
        /// </summary>
        public static AstQuerySpecification New(AstAllDistinct? allOrDistinct, AstTopClause? top, AstSelectList columns, AstFullTableRef into, AstTableSources from, AstWhereCondition? whereCondition, AstGroupsetList groupSetList, AstSearchCondition having)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(allOrDistinct);
            list.Add(top);
            list.Add(columns);
            list.Add(into);
            list.Add(from);
            list.Add(whereCondition);
            list.Add(groupSetList);
            list.Add(having);
            return new AstQuerySpecification(Position.Default, list);
        }
    }
    
    /// <summary>
    /// select_order_by_clause : order_by_clause  (OFFSET  offset_exp = expression  offset_rows = row_rows  (FETCH  fetch_offset = first_next  fetch_exp = expression  fetch_rows = row_rows  ONLY)?)?
    /// </summary>
    public partial class AstSelectOrderByClause : AstBnfRule
    {
        
        private AstOrderByClause _orderByClause;
        
        private AstExpression _offsetExp;
        
        private AstRowRows _offsetRows;
        
        private AstFirstNext _fetchOffset;
        
        private AstExpression _fetchExp;
        
        private AstRowRows _fetchRows;
        
        private static string _ruleValue = "order_by_clause  (OFFSET  offset_exp = expression  offset_rows = row_rows  (FETCH" +
            "  fetch_offset = first_next  fetch_exp = expression  fetch_rows = row_rows  ONLY" +
            ")?)?";
        
        private static string _ruleName = "select_order_by_clause";
        
        public AstSelectOrderByClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._offsetExp = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowRows>())
                {
                    this._offsetRows = ((AstRowRows)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFirstNext>())
                {
                    this._fetchOffset = ((AstFirstNext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._fetchExp = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowRows>())
                {
                    this._fetchRows = ((AstRowRows)(enumerator.Current));
                }
            }
        }
        
        public AstSelectOrderByClause(Position p, AstOrderByClause orderByClause, AstExpression offsetExp, AstRowRows offsetRows, AstFirstNext fetchOffset, AstExpression fetchExp, AstRowRows fetchRows) : 
                base(p)
        {
            this._orderByClause = orderByClause;
            this._offsetExp = offsetExp;
            this._offsetRows = offsetRows;
            this._fetchOffset = fetchOffset;
            this._fetchExp = fetchExp;
            this._fetchRows = fetchRows;
        }
        
        public AstSelectOrderByClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOrderByClause>())
                {
                    this._orderByClause = ((AstOrderByClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._offsetExp = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowRows>())
                {
                    this._offsetRows = ((AstRowRows)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFirstNext>())
                {
                    this._fetchOffset = ((AstFirstNext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._fetchExp = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowRows>())
                {
                    this._fetchRows = ((AstRowRows)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOrderByClause OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public virtual AstExpression OffsetExp
        {
            get
            {
                return this._offsetExp;
            }
        }
        
        public virtual AstRowRows OffsetRows
        {
            get
            {
                return this._offsetRows;
            }
        }
        
        public virtual AstFirstNext FetchOffset
        {
            get
            {
                return this._fetchOffset;
            }
        }
        
        public virtual AstExpression FetchExp
        {
            get
            {
                return this._fetchExp;
            }
        }
        
        public virtual AstRowRows FetchRows
        {
            get
            {
                return this._fetchRows;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSelectOrderByClause(this);
        }
        
        public static AstSelectOrderByClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// select_order_by_clause : 
        ///    order_by_clause OFFSET offset_exp=expression offset_rows=row_rows FETCH fetch_offset=first_next fetch_exp=expression fetch_rows=row_rows ONLY 
        /// </summary>
        public static AstSelectOrderByClause New(AstOrderByClause orderByClause, AstExpression offsetExp, AstRowRows offsetRows, AstFirstNext fetchOffset, AstExpression fetchExp, AstRowRows fetchRows)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(orderByClause);
            list.Add(offsetExp);
            list.Add(offsetRows);
            list.Add(fetchOffset);
            list.Add(fetchExp);
            list.Add(fetchRows);
            return new AstSelectOrderByClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// for_clause_xml_raw : FOR  XML  (RAW  (LR_BRACKET  xmlraw = stringtext  RR_BRACKET)? | AUTO)  xml_common_directives?  (COMMA  (XMLDATA | XMLSCHEMA  (LR_BRACKET  xml_schema = stringtext  RR_BRACKET)?))?  (COMMA  ELEMENTS  absent_xsinil?)?
    /// </summary>
    public partial class AstForClauseXmlRaw : AstBnfRule
    {
        
        private AstStringtext _xmlraw;
        
        private AstXmlCommonDirectives? _xmlCommonDirectives;
        
        private AstStringtext _xmlSchema;
        
        private AstAbsentXsinil? _absentXsinil;
        
        private static string _ruleValue = "FOR  XML  (RAW  (LR_BRACKET  xmlraw = stringtext  RR_BRACKET)? | AUTO)  xml_commo" +
            "n_directives?  (COMMA  (XMLDATA | XMLSCHEMA  (LR_BRACKET  xml_schema = stringtex" +
            "t  RR_BRACKET)?))?  (COMMA  ELEMENTS  absent_xsinil?)?";
        
        private static string _ruleName = "for_clause_xml_raw";
        
        public AstForClauseXmlRaw(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._xmlraw = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlCommonDirectives?>())
                {
                    this._xmlCommonDirectives = ((AstXmlCommonDirectives?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._xmlSchema = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsentXsinil?>())
                {
                    this._absentXsinil = ((AstAbsentXsinil?)(enumerator.Current));
                }
            }
        }
        
        public AstForClauseXmlRaw(Position p, AstStringtext xmlraw, AstXmlCommonDirectives? xmlCommonDirectives, AstStringtext xmlSchema, AstAbsentXsinil? absentXsinil) : 
                base(p)
        {
            this._xmlraw = xmlraw;
            this._xmlCommonDirectives = xmlCommonDirectives;
            this._xmlSchema = xmlSchema;
            this._absentXsinil = absentXsinil;
        }
        
        public AstForClauseXmlRaw(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._xmlraw = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstXmlCommonDirectives?>())
                {
                    this._xmlCommonDirectives = ((AstXmlCommonDirectives?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._xmlSchema = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAbsentXsinil?>())
                {
                    this._absentXsinil = ((AstAbsentXsinil?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Xmlraw
        {
            get
            {
                return this._xmlraw;
            }
        }
        
        public virtual AstXmlCommonDirectives? XmlCommonDirectives
        {
            get
            {
                return this._xmlCommonDirectives;
            }
        }
        
        public virtual AstStringtext XmlSchema
        {
            get
            {
                return this._xmlSchema;
            }
        }
        
        public virtual AstAbsentXsinil? AbsentXsinil
        {
            get
            {
                return this._absentXsinil;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClauseXmlRaw(this);
        }
        
        public static AstForClauseXmlRaw? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML RAW ( xmlraw=stringtext ) xml_common_directives? , XMLDATA , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw New(AstStringtext xmlraw, AstXmlCommonDirectives? xmlCommonDirectives, AstAbsentXsinil? absentXsinil)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(xmlraw);
            list.Add(xmlCommonDirectives);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML AUTO xml_common_directives? , XMLDATA , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw New(AstXmlCommonDirectives? xmlCommonDirectives, AstAbsentXsinil? absentXsinil)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(xmlCommonDirectives);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML RAW ( xmlraw=stringtext ) xml_common_directives? , XMLSCHEMA ( xml_schema=stringtext ) , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw New(AstStringtext xmlraw, AstXmlCommonDirectives? xmlCommonDirectives, AstStringtext xmlSchema, AstAbsentXsinil? absentXsinil)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(xmlraw);
            list.Add(xmlCommonDirectives);
            list.Add(xmlSchema);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
        
        /// <summary>
        /// for_clause_xml_raw : 
        ///    FOR XML AUTO xml_common_directives? , XMLSCHEMA ( xml_schema=stringtext ) , ELEMENTS absent_xsinil? 
        /// </summary>
        public static AstForClauseXmlRaw New(AstXmlCommonDirectives? xmlCommonDirectives, AstStringtext xmlSchema, AstAbsentXsinil? absentXsinil)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(xmlCommonDirectives);
            list.Add(xmlSchema);
            list.Add(absentXsinil);
            return new AstForClauseXmlRaw(Position.Default, list);
        }
    }
    
    /// <summary>
    /// for_clause_json : FOR  JSON  auto_path  clause_json_infos?
    /// </summary>
    public partial class AstForClauseJson : AstBnfRule
    {
        
        private AstAutoPath _autoPath;
        
        private AstClauseJsonInfos? _clauseJsonInfos;
        
        private static string _ruleValue = "FOR  JSON  auto_path  clause_json_infos?";
        
        private static string _ruleName = "for_clause_json";
        
        public AstForClauseJson(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoPath>())
                {
                    this._autoPath = ((AstAutoPath)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClauseJsonInfos?>())
                {
                    this._clauseJsonInfos = ((AstClauseJsonInfos?)(enumerator.Current));
                }
            }
        }
        
        public AstForClauseJson(Position p, AstAutoPath autoPath, AstClauseJsonInfos? clauseJsonInfos) : 
                base(p)
        {
            this._autoPath = autoPath;
            this._clauseJsonInfos = clauseJsonInfos;
        }
        
        public AstForClauseJson(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAutoPath>())
                {
                    this._autoPath = ((AstAutoPath)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstClauseJsonInfos?>())
                {
                    this._clauseJsonInfos = ((AstClauseJsonInfos?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAutoPath AutoPath
        {
            get
            {
                return this._autoPath;
            }
        }
        
        public virtual AstClauseJsonInfos? ClauseJsonInfos
        {
            get
            {
                return this._clauseJsonInfos;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitForClauseJson(this);
        }
        
        public static AstForClauseJson? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// for_clause_json : 
        ///    FOR JSON auto_path clause_json_infos? 
        /// </summary>
        public static AstForClauseJson New(AstAutoPath autoPath, AstClauseJsonInfos? clauseJsonInfos)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(autoPath);
            list.Add(clauseJsonInfos);
            return new AstForClauseJson(Position.Default, list);
        }
    }
    
    /// <summary>
    /// group_by_item : expression
    /// </summary>
    public partial class AstGroupByItem : AstBnfRule
    {
        
        private AstExpression _expression;
        
        private static string _ruleValue = "expression";
        
        private static string _ruleName = "group_by_item";
        
        public AstGroupByItem(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstGroupByItem(Position p, AstExpression expression) : 
                base(p)
        {
            this._expression = expression;
        }
        
        public AstGroupByItem(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitGroupByItem(this);
        }
        
        public static AstGroupByItem? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// group_by_item : 
        ///    expression 
        /// </summary>
        public static AstGroupByItem New(AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expression);
            return new AstGroupByItem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// optimize_for_arg : local_id  (UNKNOWN | EQUAL  (constant | NULL_))
    /// </summary>
    public partial class AstOptimizeForArg : AstBnfRule
    {
        
        private AstLocalId _localId;
        
        private AstConstant _constant;
        
        private static string _ruleValue = "local_id  (UNKNOWN | EQUAL  (constant | NULL_))";
        
        private static string _ruleName = "optimize_for_arg";
        
        public AstOptimizeForArg(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstant>())
                {
                    this._constant = ((AstConstant)(enumerator.Current));
                }
            }
        }
        
        public AstOptimizeForArg(Position p, AstLocalId localId, AstConstant constant) : 
                base(p)
        {
            this._localId = localId;
            this._constant = constant;
        }
        
        public AstOptimizeForArg(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstConstant>())
                {
                    this._constant = ((AstConstant)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstConstant Constant
        {
            get
            {
                return this._constant;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOptimizeForArg(this);
        }
        
        public static AstOptimizeForArg? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// optimize_for_arg : 
        ///    local_id UNKNOWN 
        /// </summary>
        public static AstOptimizeForArg New(AstLocalId localId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localId);
            return new AstOptimizeForArg(Position.Default, list);
        }
        
        /// <summary>
        /// optimize_for_arg : 
        ///    local_id EQUAL constant 
        /// </summary>
        public static AstOptimizeForArg New(AstLocalId localId, AstConstant constant)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localId);
            list.Add(constant);
            return new AstOptimizeForArg(Position.Default, list);
        }
    }
    
    /// <summary>
    /// table_asterisk : full_table_ref  DOT  STAR
    /// </summary>
    public partial class AstTableAsterisk : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private static string _ruleValue = "full_table_ref  DOT  STAR";
        
        private static string _ruleName = "table_asterisk";
        
        public AstTableAsterisk(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public AstTableAsterisk(Position p, AstFullTableRef fullTableRef) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
        }
        
        public AstTableAsterisk(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableAsterisk(this);
        }
        
        public static AstTableAsterisk? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// table_asterisk : 
        ///    full_table_ref . STAR 
        /// </summary>
        public static AstTableAsterisk New(AstFullTableRef fullTableRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            return new AstTableAsterisk(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_elem : column_elem_target  as_column_alias?
    /// </summary>
    public partial class AstColumnElem : AstBnfRule
    {
        
        private AstColumnElemTarget _columnElemTarget;
        
        private AstAsColumnAlias? _asColumnAlias;
        
        private static string _ruleValue = "column_elem_target  as_column_alias?";
        
        private static string _ruleName = "column_elem";
        
        public AstColumnElem(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias?>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias?)(enumerator.Current));
                }
            }
        }
        
        public AstColumnElem(Position p, AstColumnElemTarget columnElemTarget, AstAsColumnAlias? asColumnAlias) : 
                base(p)
        {
            this._columnElemTarget = columnElemTarget;
            this._asColumnAlias = asColumnAlias;
        }
        
        public AstColumnElem(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnElemTarget>())
                {
                    this._columnElemTarget = ((AstColumnElemTarget)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsColumnAlias?>())
                {
                    this._asColumnAlias = ((AstAsColumnAlias?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnElemTarget ColumnElemTarget
        {
            get
            {
                return this._columnElemTarget;
            }
        }
        
        public virtual AstAsColumnAlias? AsColumnAlias
        {
            get
            {
                return this._asColumnAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnElem(this);
        }
        
        public static AstColumnElem? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// column_elem : 
        ///    column_elem_target as_column_alias? 
        /// </summary>
        public static AstColumnElem New(AstColumnElemTarget columnElemTarget, AstAsColumnAlias? asColumnAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnElemTarget);
            list.Add(asColumnAlias);
            return new AstColumnElem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// expression_assign_elem : local_id  update_operator  expression
    /// </summary>
    public partial class AstExpressionAssignElem : AstBnfRule
    {
        
        private AstLocalId _localId;
        
        private AstUpdateOperator _updateOperator;
        
        private AstExpression _expression;
        
        private static string _ruleValue = "local_id  update_operator  expression";
        
        private static string _ruleName = "expression_assign_elem";
        
        public AstExpressionAssignElem(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOperator>())
                {
                    this._updateOperator = ((AstUpdateOperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstExpressionAssignElem(Position p, AstLocalId localId, AstUpdateOperator updateOperator, AstExpression expression) : 
                base(p)
        {
            this._localId = localId;
            this._updateOperator = updateOperator;
            this._expression = expression;
        }
        
        public AstExpressionAssignElem(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._localId = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstUpdateOperator>())
                {
                    this._updateOperator = ((AstUpdateOperator)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId LocalId
        {
            get
            {
                return this._localId;
            }
        }
        
        public virtual AstUpdateOperator UpdateOperator
        {
            get
            {
                return this._updateOperator;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitExpressionAssignElem(this);
        }
        
        public static AstExpressionAssignElem? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// expression_assign_elem : 
        ///    local_id update_operator expression 
        /// </summary>
        public static AstExpressionAssignElem New(AstLocalId localId, AstUpdateOperator updateOperator, AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(localId);
            list.Add(updateOperator);
            list.Add(expression);
            return new AstExpressionAssignElem(Position.Default, list);
        }
    }
    
    /// <summary>
    /// table_source : table_source_item_joined
    /// </summary>
    public partial class AstTableSource : AstBnfRule
    {
        
        private AstTableSourceItemJoined _tableSourceItemJoined;
        
        private static string _ruleValue = "table_source_item_joined";
        
        private static string _ruleName = "table_source";
        
        public AstTableSource(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSourceItemJoined>())
                {
                    this._tableSourceItemJoined = ((AstTableSourceItemJoined)(enumerator.Current));
                }
            }
        }
        
        public AstTableSource(Position p, AstTableSourceItemJoined tableSourceItemJoined) : 
                base(p)
        {
            this._tableSourceItemJoined = tableSourceItemJoined;
        }
        
        public AstTableSource(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSourceItemJoined>())
                {
                    this._tableSourceItemJoined = ((AstTableSourceItemJoined)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableSourceItemJoined TableSourceItemJoined
        {
            get
            {
                return this._tableSourceItemJoined;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTableSource(this);
        }
        
        public static AstTableSource? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// table_source : 
        ///    table_source_item_joined 
        /// </summary>
        public static AstTableSource New(AstTableSourceItemJoined tableSourceItemJoined)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableSourceItemJoined);
            return new AstTableSource(Position.Default, list);
        }
    }
    
    /// <summary>
    /// as_table_alias_column : as_table_alias  column_alias_list?
    /// </summary>
    public partial class AstAsTableAliasColumn : AstBnfRule
    {
        
        private AstAsTableAlias _asTableAlias;
        
        private AstColumnAliasList? _columnAliasList;
        
        private static string _ruleValue = "as_table_alias  column_alias_list?";
        
        private static string _ruleName = "as_table_alias_column";
        
        public AstAsTableAliasColumn(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList?>())
                {
                    this._columnAliasList = ((AstColumnAliasList?)(enumerator.Current));
                }
            }
        }
        
        public AstAsTableAliasColumn(Position p, AstAsTableAlias asTableAlias, AstColumnAliasList? columnAliasList) : 
                base(p)
        {
            this._asTableAlias = asTableAlias;
            this._columnAliasList = columnAliasList;
        }
        
        public AstAsTableAliasColumn(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList?>())
                {
                    this._columnAliasList = ((AstColumnAliasList?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public virtual AstColumnAliasList? ColumnAliasList
        {
            get
            {
                return this._columnAliasList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsTableAliasColumn(this);
        }
        
        public static AstAsTableAliasColumn? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// as_table_alias_column : 
        ///    as_table_alias column_alias_list? 
        /// </summary>
        public static AstAsTableAliasColumn New(AstAsTableAlias asTableAlias, AstColumnAliasList? columnAliasList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(asTableAlias);
            list.Add(columnAliasList);
            return new AstAsTableAliasColumn(Position.Default, list);
        }
    }
    
    /// <summary>
    /// open_xml : OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  (WITH  LR_BRACKET  schema_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenXml : AstBnfRule
    {
        
        private AstExpression _expression;
        
        private AstExpression2 _expression2;
        
        private AstSchemaDeclaration _schemaDeclaration;
        
        private AstAsTableAlias? _asTableAlias;
        
        private static string _ruleValue = "OPENXML  LR_BRACKET  expression  COMMA  expression2  RR_BRACKET  (WITH  LR_BRACKE" +
            "T  schema_declaration  RR_BRACKET)?  as_table_alias?";
        
        private static string _ruleName = "open_xml";
        
        public AstOpenXml(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaDeclaration>())
                {
                    this._schemaDeclaration = ((AstSchemaDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias?>())
                {
                    this._asTableAlias = ((AstAsTableAlias?)(enumerator.Current));
                }
            }
        }
        
        public AstOpenXml(Position p, AstExpression expression, AstExpression2 expression2, AstSchemaDeclaration schemaDeclaration, AstAsTableAlias? asTableAlias) : 
                base(p)
        {
            this._expression = expression;
            this._expression2 = expression2;
            this._schemaDeclaration = schemaDeclaration;
            this._asTableAlias = asTableAlias;
        }
        
        public AstOpenXml(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaDeclaration>())
                {
                    this._schemaDeclaration = ((AstSchemaDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias?>())
                {
                    this._asTableAlias = ((AstAsTableAlias?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstSchemaDeclaration SchemaDeclaration
        {
            get
            {
                return this._schemaDeclaration;
            }
        }
        
        public virtual AstAsTableAlias? AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenXml(this);
        }
        
        public static AstOpenXml? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// open_xml : 
        ///    OPENXML ( expression , expression2 ) WITH ( schema_declaration ) as_table_alias? 
        /// </summary>
        public static AstOpenXml New(AstExpression expression, AstExpression2 expression2, AstSchemaDeclaration schemaDeclaration, AstAsTableAlias? asTableAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expression);
            list.Add(expression2);
            list.Add(schemaDeclaration);
            list.Add(asTableAlias);
            return new AstOpenXml(Position.Default, list);
        }
    }
    
    /// <summary>
    /// open_json : OPENJSON  LR_BRACKET  expression2  RR_BRACKET  (WITH  LR_BRACKET  json_declaration  RR_BRACKET)?  as_table_alias?
    /// </summary>
    public partial class AstOpenJson : AstBnfRule
    {
        
        private AstExpression2 _expression2;
        
        private AstJsonDeclaration _jsonDeclaration;
        
        private AstAsTableAlias? _asTableAlias;
        
        private static string _ruleValue = "OPENJSON  LR_BRACKET  expression2  RR_BRACKET  (WITH  LR_BRACKET  json_declaratio" +
            "n  RR_BRACKET)?  as_table_alias?";
        
        private static string _ruleName = "open_json";
        
        public AstOpenJson(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJsonDeclaration>())
                {
                    this._jsonDeclaration = ((AstJsonDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias?>())
                {
                    this._asTableAlias = ((AstAsTableAlias?)(enumerator.Current));
                }
            }
        }
        
        public AstOpenJson(Position p, AstExpression2 expression2, AstJsonDeclaration jsonDeclaration, AstAsTableAlias? asTableAlias) : 
                base(p)
        {
            this._expression2 = expression2;
            this._jsonDeclaration = jsonDeclaration;
            this._asTableAlias = asTableAlias;
        }
        
        public AstOpenJson(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression2>())
                {
                    this._expression2 = ((AstExpression2)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJsonDeclaration>())
                {
                    this._jsonDeclaration = ((AstJsonDeclaration)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias?>())
                {
                    this._asTableAlias = ((AstAsTableAlias?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression2 Expression2
        {
            get
            {
                return this._expression2;
            }
        }
        
        public virtual AstJsonDeclaration JsonDeclaration
        {
            get
            {
                return this._jsonDeclaration;
            }
        }
        
        public virtual AstAsTableAlias? AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOpenJson(this);
        }
        
        public static AstOpenJson? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// open_json : 
        ///    OPENJSON ( expression2 ) WITH ( json_declaration ) as_table_alias? 
        /// </summary>
        public static AstOpenJson New(AstExpression2 expression2, AstJsonDeclaration jsonDeclaration, AstAsTableAlias? asTableAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expression2);
            list.Add(jsonDeclaration);
            list.Add(asTableAlias);
            return new AstOpenJson(Position.Default, list);
        }
    }
    
    /// <summary>
    /// json_column_declaration : column_declaration  (AS  JSON)?
    /// </summary>
    public partial class AstJsonColumnDeclaration : AstBnfRule
    {
        
        private AstColumnDeclaration _columnDeclaration;
        
        private static string _ruleValue = "column_declaration  (AS  JSON)?";
        
        private static string _ruleName = "json_column_declaration";
        
        public AstJsonColumnDeclaration(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public AstJsonColumnDeclaration(Position p, AstColumnDeclaration columnDeclaration) : 
                base(p)
        {
            this._columnDeclaration = columnDeclaration;
        }
        
        public AstJsonColumnDeclaration(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnDeclaration>())
                {
                    this._columnDeclaration = ((AstColumnDeclaration)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnDeclaration ColumnDeclaration
        {
            get
            {
                return this._columnDeclaration;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJsonColumnDeclaration(this);
        }
        
        public static AstJsonColumnDeclaration? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// json_column_declaration : 
        ///    column_declaration AS JSON 
        /// </summary>
        public static AstJsonColumnDeclaration New(AstColumnDeclaration columnDeclaration)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnDeclaration);
            return new AstJsonColumnDeclaration(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_declaration : id_  data_type  stringtext?
    /// </summary>
    public partial class AstColumnDeclaration : AstBnfRule
    {
        
        private AstId _id;
        
        private AstDataType _dataType;
        
        private AstStringtext? _stringtext;
        
        private static string _ruleValue = "id_  data_type  stringtext?";
        
        private static string _ruleName = "column_declaration";
        
        public AstColumnDeclaration(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext?>())
                {
                    this._stringtext = ((AstStringtext?)(enumerator.Current));
                }
            }
        }
        
        public AstColumnDeclaration(Position p, AstId id, AstDataType dataType, AstStringtext? stringtext) : 
                base(p)
        {
            this._id = id;
            this._dataType = dataType;
            this._stringtext = stringtext;
        }
        
        public AstColumnDeclaration(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDataType>())
                {
                    this._dataType = ((AstDataType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext?>())
                {
                    this._stringtext = ((AstStringtext?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstDataType DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        public virtual AstStringtext? Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnDeclaration(this);
        }
        
        public static AstColumnDeclaration? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// column_declaration : 
        ///    id_ data_type stringtext? 
        /// </summary>
        public static AstColumnDeclaration New(AstId id, AstDataType dataType, AstStringtext? stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(dataType);
            list.Add(stringtext);
            return new AstColumnDeclaration(Position.Default, list);
        }
    }
    
    /// <summary>
    /// join_on : (inner = INNER | join_type  outer = OUTER)  join_hint?  JOIN  source = table_source  ON  cond = search_condition
    /// </summary>
    public partial class AstJoinOn : AstBnfRule
    {
        
        private AstJoinType _joinType;
        
        private AstJoinHint? _joinHint;
        
        private AstTableSource _source;
        
        private AstSearchCondition _cond;
        
        private static string _ruleValue = "(inner = INNER | join_type  outer = OUTER)  join_hint?  JOIN  source = table_sour" +
            "ce  ON  cond = search_condition";
        
        private static string _ruleName = "join_on";
        
        public AstJoinOn(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinType>())
                {
                    this._joinType = ((AstJoinType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJoinHint?>())
                {
                    this._joinHint = ((AstJoinHint?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._source = ((AstTableSource)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._cond = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public AstJoinOn(Position p, AstJoinType joinType, AstJoinHint? joinHint, AstTableSource source, AstSearchCondition cond) : 
                base(p)
        {
            this._joinType = joinType;
            this._joinHint = joinHint;
            this._source = source;
            this._cond = cond;
        }
        
        public AstJoinOn(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstJoinType>())
                {
                    this._joinType = ((AstJoinType)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstJoinHint?>())
                {
                    this._joinHint = ((AstJoinHint?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._source = ((AstTableSource)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._cond = ((AstSearchCondition)(enumerator.Current));
                }
            }
        }
        
        public virtual AstJoinType JoinType
        {
            get
            {
                return this._joinType;
            }
        }
        
        public virtual AstJoinHint? JoinHint
        {
            get
            {
                return this._joinHint;
            }
        }
        
        public virtual AstTableSource Source
        {
            get
            {
                return this._source;
            }
        }
        
        public virtual AstSearchCondition Cond
        {
            get
            {
                return this._cond;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitJoinOn(this);
        }
        
        public static AstJoinOn? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// join_on : 
        ///    inner=INNER? join_hint? JOIN source=table_source ON cond=search_condition 
        /// </summary>
        public static AstJoinOn New(AstJoinHint? joinHint, AstTableSource source, AstSearchCondition cond)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(joinHint);
            list.Add(source);
            list.Add(cond);
            return new AstJoinOn(Position.Default, list);
        }
        
        /// <summary>
        /// join_on : 
        ///    join_type outer=OUTER? join_hint? JOIN source=table_source ON cond=search_condition 
        /// </summary>
        public static AstJoinOn New(AstJoinType joinType, AstJoinHint? joinHint, AstTableSource source, AstSearchCondition cond)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(joinType);
            list.Add(joinHint);
            list.Add(source);
            list.Add(cond);
            return new AstJoinOn(Position.Default, list);
        }
    }
    
    /// <summary>
    /// cross_join : CROSS  JOIN  table_source
    /// </summary>
    public partial class AstCrossJoin : AstBnfRule
    {
        
        private AstTableSource _tableSource;
        
        private static string _ruleValue = "CROSS  JOIN  table_source";
        
        private static string _ruleName = "cross_join";
        
        public AstCrossJoin(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public AstCrossJoin(Position p, AstTableSource tableSource) : 
                base(p)
        {
            this._tableSource = tableSource;
        }
        
        public AstCrossJoin(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._tableSource = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableSource TableSource
        {
            get
            {
                return this._tableSource;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCrossJoin(this);
        }
        
        public static AstCrossJoin? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// cross_join : 
        ///    CROSS JOIN table_source 
        /// </summary>
        public static AstCrossJoin New(AstTableSource tableSource)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableSource);
            return new AstCrossJoin(Position.Default, list);
        }
    }
    
    /// <summary>
    /// apply_enum : apply_style  APPLY  source = table_source
    /// </summary>
    public partial class AstApplyEnum : AstBnfRule
    {
        
        private AstApplyStyle _applyStyle;
        
        private AstTableSource _source;
        
        private static string _ruleValue = "apply_style  APPLY  source = table_source";
        
        private static string _ruleName = "apply_enum";
        
        public AstApplyEnum(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplyStyle>())
                {
                    this._applyStyle = ((AstApplyStyle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._source = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public AstApplyEnum(Position p, AstApplyStyle applyStyle, AstTableSource source) : 
                base(p)
        {
            this._applyStyle = applyStyle;
            this._source = source;
        }
        
        public AstApplyEnum(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstApplyStyle>())
                {
                    this._applyStyle = ((AstApplyStyle)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTableSource>())
                {
                    this._source = ((AstTableSource)(enumerator.Current));
                }
            }
        }
        
        public virtual AstApplyStyle ApplyStyle
        {
            get
            {
                return this._applyStyle;
            }
        }
        
        public virtual AstTableSource Source
        {
            get
            {
                return this._source;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitApplyEnum(this);
        }
        
        public static AstApplyEnum? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// apply_enum : 
        ///    apply_style APPLY source=table_source 
        /// </summary>
        public static AstApplyEnum New(AstApplyStyle applyStyle, AstTableSource source)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(applyStyle);
            list.Add(source);
            return new AstApplyEnum(Position.Default, list);
        }
    }
    
    /// <summary>
    /// pivot_join : PIVOT  pivot_clause  as_table_alias
    /// </summary>
    public partial class AstPivotJoin : AstBnfRule
    {
        
        private AstPivotClause _pivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        private static string _ruleValue = "PIVOT  pivot_clause  as_table_alias";
        
        private static string _ruleName = "pivot_join";
        
        public AstPivotJoin(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstPivotJoin(Position p, AstPivotClause pivotClause, AstAsTableAlias asTableAlias) : 
                base(p)
        {
            this._pivotClause = pivotClause;
            this._asTableAlias = asTableAlias;
        }
        
        public AstPivotJoin(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstPivotClause>())
                {
                    this._pivotClause = ((AstPivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstPivotClause PivotClause
        {
            get
            {
                return this._pivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivotJoin(this);
        }
        
        public static AstPivotJoin? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// pivot_join : 
        ///    PIVOT pivot_clause as_table_alias 
        /// </summary>
        public static AstPivotJoin New(AstPivotClause pivotClause, AstAsTableAlias asTableAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(pivotClause);
            list.Add(asTableAlias);
            return new AstPivotJoin(Position.Default, list);
        }
    }
    
    /// <summary>
    /// unpivot_join : UNPIVOT  unpivot_clause  as_table_alias
    /// </summary>
    public partial class AstUnpivotJoin : AstBnfRule
    {
        
        private AstUnpivotClause _unpivotClause;
        
        private AstAsTableAlias _asTableAlias;
        
        private static string _ruleValue = "UNPIVOT  unpivot_clause  as_table_alias";
        
        private static string _ruleName = "unpivot_join";
        
        public AstUnpivotJoin(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivotJoin(Position p, AstUnpivotClause unpivotClause, AstAsTableAlias asTableAlias) : 
                base(p)
        {
            this._unpivotClause = unpivotClause;
            this._asTableAlias = asTableAlias;
        }
        
        public AstUnpivotJoin(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstUnpivotClause>())
                {
                    this._unpivotClause = ((AstUnpivotClause)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAsTableAlias>())
                {
                    this._asTableAlias = ((AstAsTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstUnpivotClause UnpivotClause
        {
            get
            {
                return this._unpivotClause;
            }
        }
        
        public virtual AstAsTableAlias AsTableAlias
        {
            get
            {
                return this._asTableAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivotJoin(this);
        }
        
        public static AstUnpivotJoin? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// unpivot_join : 
        ///    UNPIVOT unpivot_clause as_table_alias 
        /// </summary>
        public static AstUnpivotJoin New(AstUnpivotClause unpivotClause, AstAsTableAlias asTableAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(unpivotClause);
            list.Add(asTableAlias);
            return new AstUnpivotJoin(Position.Default, list);
        }
    }
    
    /// <summary>
    /// pivot_clause : LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_list  RR_BRACKET
    /// </summary>
    public partial class AstPivotClause : AstBnfRule
    {
        
        private AstAggregateWindowedFunction _aggregateWindowedFunction;
        
        private AstFullColumnName _fullColumnName;
        
        private AstColumnAliasList _columnAliasList;
        
        private static string _ruleValue = "LR_BRACKET  aggregate_windowed_function  FOR  full_column_name  IN  column_alias_" +
            "list  RR_BRACKET";
        
        private static string _ruleName = "pivot_clause";
        
        public AstPivotClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public AstPivotClause(Position p, AstAggregateWindowedFunction aggregateWindowedFunction, AstFullColumnName fullColumnName, AstColumnAliasList columnAliasList) : 
                base(p)
        {
            this._aggregateWindowedFunction = aggregateWindowedFunction;
            this._fullColumnName = fullColumnName;
            this._columnAliasList = columnAliasList;
        }
        
        public AstPivotClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAggregateWindowedFunction>())
                {
                    this._aggregateWindowedFunction = ((AstAggregateWindowedFunction)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnAliasList>())
                {
                    this._columnAliasList = ((AstColumnAliasList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAggregateWindowedFunction AggregateWindowedFunction
        {
            get
            {
                return this._aggregateWindowedFunction;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstColumnAliasList ColumnAliasList
        {
            get
            {
                return this._columnAliasList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitPivotClause(this);
        }
        
        public static AstPivotClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// pivot_clause : 
        ///    ( aggregate_windowed_function FOR full_column_name IN column_alias_list ) 
        /// </summary>
        public static AstPivotClause New(AstAggregateWindowedFunction aggregateWindowedFunction, AstFullColumnName fullColumnName, AstColumnAliasList columnAliasList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(aggregateWindowedFunction);
            list.Add(fullColumnName);
            list.Add(columnAliasList);
            return new AstPivotClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// unpivot_clause : LR_BRACKET  unpivot_exp = expression  FOR  full_column_name  IN  LR_BRACKET  full_column_name_list  RR_BRACKET  RR_BRACKET
    /// </summary>
    public partial class AstUnpivotClause : AstBnfRule
    {
        
        private AstExpression _unpivotExp;
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNameList _fullColumnNameList;
        
        private static string _ruleValue = "LR_BRACKET  unpivot_exp = expression  FOR  full_column_name  IN  LR_BRACKET  full" +
            "_column_name_list  RR_BRACKET  RR_BRACKET";
        
        private static string _ruleName = "unpivot_clause";
        
        public AstUnpivotClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._unpivotExp = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public AstUnpivotClause(Position p, AstExpression unpivotExp, AstFullColumnName fullColumnName, AstFullColumnNameList fullColumnNameList) : 
                base(p)
        {
            this._unpivotExp = unpivotExp;
            this._fullColumnName = fullColumnName;
            this._fullColumnNameList = fullColumnNameList;
        }
        
        public AstUnpivotClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._unpivotExp = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNameList>())
                {
                    this._fullColumnNameList = ((AstFullColumnNameList)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression UnpivotExp
        {
            get
            {
                return this._unpivotExp;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstFullColumnNameList FullColumnNameList
        {
            get
            {
                return this._fullColumnNameList;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitUnpivotClause(this);
        }
        
        public static AstUnpivotClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// unpivot_clause : 
        ///    ( unpivot_exp=expression FOR full_column_name IN ( full_column_name_list ) ) 
        /// </summary>
        public static AstUnpivotClause New(AstExpression unpivotExp, AstFullColumnName fullColumnName, AstFullColumnNameList fullColumnNameList)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(unpivotExp);
            list.Add(fullColumnName);
            list.Add(fullColumnNameList);
            return new AstUnpivotClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// bulk_option : id_  EQUAL  bulk_option_value = decimal_string
    /// </summary>
    public partial class AstBulkOption : AstBnfRule
    {
        
        private AstId _id;
        
        private AstDecimalString _bulkOptionValue;
        
        private static string _ruleValue = "id_  EQUAL  bulk_option_value = decimal_string";
        
        private static string _ruleName = "bulk_option";
        
        public AstBulkOption(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._bulkOptionValue = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public AstBulkOption(Position p, AstId id, AstDecimalString bulkOptionValue) : 
                base(p)
        {
            this._id = id;
            this._bulkOptionValue = bulkOptionValue;
        }
        
        public AstBulkOption(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstId>())
                {
                    this._id = ((AstId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalString>())
                {
                    this._bulkOptionValue = ((AstDecimalString)(enumerator.Current));
                }
            }
        }
        
        public virtual AstId Id
        {
            get
            {
                return this._id;
            }
        }
        
        public virtual AstDecimalString BulkOptionValue
        {
            get
            {
                return this._bulkOptionValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBulkOption(this);
        }
        
        public static AstBulkOption? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// bulk_option : 
        ///    id_ EQUAL bulk_option_value=decimal_string 
        /// </summary>
        public static AstBulkOption New(AstId id, AstDecimalString bulkOptionValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(id);
            list.Add(bulkOptionValue);
            return new AstBulkOption(Position.Default, list);
        }
    }
    
    /// <summary>
    /// freetext_table_andcolumn_names : full_table_ref  COMMA  (full_column_name | full_column_names | STAR)
    /// </summary>
    public partial class AstFreetextTableAndcolumnNames : AstBnfRule
    {
        
        private AstFullTableRef _fullTableRef;
        
        private AstFullColumnName _fullColumnName;
        
        private AstFullColumnNames _fullColumnNames;
        
        private static string _ruleValue = "full_table_ref  COMMA  (full_column_name | full_column_names | STAR)";
        
        private static string _ruleName = "freetext_table_andcolumn_names";
        
        public AstFreetextTableAndcolumnNames(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNames>())
                {
                    this._fullColumnNames = ((AstFullColumnNames)(enumerator.Current));
                }
            }
        }
        
        public AstFreetextTableAndcolumnNames(Position p, AstFullTableRef fullTableRef, AstFullColumnName fullColumnName, AstFullColumnNames fullColumnNames) : 
                base(p)
        {
            this._fullTableRef = fullTableRef;
            this._fullColumnName = fullColumnName;
            this._fullColumnNames = fullColumnNames;
        }
        
        public AstFreetextTableAndcolumnNames(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFullTableRef>())
                {
                    this._fullTableRef = ((AstFullTableRef)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnName>())
                {
                    this._fullColumnName = ((AstFullColumnName)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFullColumnNames>())
                {
                    this._fullColumnNames = ((AstFullColumnNames)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFullTableRef FullTableRef
        {
            get
            {
                return this._fullTableRef;
            }
        }
        
        public virtual AstFullColumnName FullColumnName
        {
            get
            {
                return this._fullColumnName;
            }
        }
        
        public virtual AstFullColumnNames FullColumnNames
        {
            get
            {
                return this._fullColumnNames;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFreetextTableAndcolumnNames(this);
        }
        
        public static AstFreetextTableAndcolumnNames? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names : 
        ///    full_table_ref , full_column_name 
        /// </summary>
        public static AstFreetextTableAndcolumnNames New(AstFullTableRef fullTableRef, AstFullColumnName fullColumnName)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(fullColumnName);
            return new AstFreetextTableAndcolumnNames(Position.Default, list);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names : 
        ///    full_table_ref , full_column_names 
        /// </summary>
        public static AstFreetextTableAndcolumnNames New(AstFullTableRef fullTableRef, AstFullColumnNames fullColumnNames)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            list.Add(fullColumnNames);
            return new AstFreetextTableAndcolumnNames(Position.Default, list);
        }
        
        /// <summary>
        /// freetext_table_andcolumn_names : 
        ///    full_table_ref , STAR 
        /// </summary>
        public static AstFreetextTableAndcolumnNames New(AstFullTableRef fullTableRef)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fullTableRef);
            return new AstFreetextTableAndcolumnNames(Position.Default, list);
        }
    }
    
    /// <summary>
    /// switch_section : WHEN  when_expr = expression  THEN  then_expr = expression
    /// </summary>
    public partial class AstSwitchSection : AstBnfRule
    {
        
        private AstExpression _whenExpr;
        
        private AstExpression _thenExpr;
        
        private static string _ruleValue = "WHEN  when_expr = expression  THEN  then_expr = expression";
        
        private static string _ruleName = "switch_section";
        
        public AstSwitchSection(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._whenExpr = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._thenExpr = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSection(Position p, AstExpression whenExpr, AstExpression thenExpr) : 
                base(p)
        {
            this._whenExpr = whenExpr;
            this._thenExpr = thenExpr;
        }
        
        public AstSwitchSection(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._whenExpr = ((AstExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._thenExpr = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpression WhenExpr
        {
            get
            {
                return this._whenExpr;
            }
        }
        
        public virtual AstExpression ThenExpr
        {
            get
            {
                return this._thenExpr;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSection(this);
        }
        
        public static AstSwitchSection? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// switch_section : 
        ///    WHEN when_expr=expression THEN then_expr=expression 
        /// </summary>
        public static AstSwitchSection New(AstExpression whenExpr, AstExpression thenExpr)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(whenExpr);
            list.Add(thenExpr);
            return new AstSwitchSection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// switch_search_condition_section : WHEN  search_condition  THEN  expression
    /// </summary>
    public partial class AstSwitchSearchConditionSection : AstBnfRule
    {
        
        private AstSearchCondition _searchCondition;
        
        private AstExpression _expression;
        
        private static string _ruleValue = "WHEN  search_condition  THEN  expression";
        
        private static string _ruleName = "switch_search_condition_section";
        
        public AstSwitchSearchConditionSection(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstSwitchSearchConditionSection(Position p, AstSearchCondition searchCondition, AstExpression expression) : 
                base(p)
        {
            this._searchCondition = searchCondition;
            this._expression = expression;
        }
        
        public AstSwitchSearchConditionSection(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstSearchCondition>())
                {
                    this._searchCondition = ((AstSearchCondition)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstSearchCondition SearchCondition
        {
            get
            {
                return this._searchCondition;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSwitchSearchConditionSection(this);
        }
        
        public static AstSwitchSearchConditionSection? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// switch_search_condition_section : 
        ///    WHEN search_condition THEN expression 
        /// </summary>
        public static AstSwitchSearchConditionSection New(AstSearchCondition searchCondition, AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(searchCondition);
            list.Add(expression);
            return new AstSwitchSearchConditionSection(Position.Default, list);
        }
    }
    
    /// <summary>
    /// as_column_alias : AS?  column_alias
    /// </summary>
    public partial class AstAsColumnAlias : AstBnfRule
    {
        
        private AstColumnAlias _columnAlias;
        
        private static string _ruleValue = "AS?  column_alias";
        
        private static string _ruleName = "as_column_alias";
        
        public AstAsColumnAlias(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsColumnAlias(Position p, AstColumnAlias columnAlias) : 
                base(p)
        {
            this._columnAlias = columnAlias;
        }
        
        public AstAsColumnAlias(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnAlias>())
                {
                    this._columnAlias = ((AstColumnAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnAlias ColumnAlias
        {
            get
            {
                return this._columnAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsColumnAlias(this);
        }
        
        public static AstAsColumnAlias? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// as_column_alias : 
        ///    AS? column_alias 
        /// </summary>
        public static AstAsColumnAlias New(AstColumnAlias columnAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnAlias);
            return new AstAsColumnAlias(Position.Default, list);
        }
    }
    
    /// <summary>
    /// as_table_alias : AS?  table_alias
    /// </summary>
    public partial class AstAsTableAlias : AstBnfRule
    {
        
        private AstTableAlias _tableAlias;
        
        private static string _ruleValue = "AS?  table_alias";
        
        private static string _ruleName = "as_table_alias";
        
        public AstAsTableAlias(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public AstAsTableAlias(Position p, AstTableAlias tableAlias) : 
                base(p)
        {
            this._tableAlias = tableAlias;
        }
        
        public AstAsTableAlias(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableAlias>())
                {
                    this._tableAlias = ((AstTableAlias)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableAlias TableAlias
        {
            get
            {
                return this._tableAlias;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAsTableAlias(this);
        }
        
        public static AstAsTableAlias? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// as_table_alias : 
        ///    AS? table_alias 
        /// </summary>
        public static AstAsTableAlias New(AstTableAlias tableAlias)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableAlias);
            return new AstAsTableAlias(Position.Default, list);
        }
    }
    
    /// <summary>
    /// deprecated_table_hint : LR_BRACKET  table_hint  RR_BRACKET
    /// </summary>
    public partial class AstDeprecatedTableHint : AstBnfRule
    {
        
        private AstTableHint _tableHint;
        
        private static string _ruleValue = "LR_BRACKET  table_hint  RR_BRACKET";
        
        private static string _ruleName = "deprecated_table_hint";
        
        public AstDeprecatedTableHint(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public AstDeprecatedTableHint(Position p, AstTableHint tableHint) : 
                base(p)
        {
            this._tableHint = tableHint;
        }
        
        public AstDeprecatedTableHint(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTableHint>())
                {
                    this._tableHint = ((AstTableHint)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTableHint TableHint
        {
            get
            {
                return this._tableHint;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeprecatedTableHint(this);
        }
        
        public static AstDeprecatedTableHint? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// deprecated_table_hint : 
        ///    ( table_hint ) 
        /// </summary>
        public static AstDeprecatedTableHint New(AstTableHint tableHint)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tableHint);
            return new AstDeprecatedTableHint(Position.Default, list);
        }
    }
    
    /// <summary>
    /// all_distinct_expression : all_distinct?  expression
    /// </summary>
    public partial class AstAllDistinctExpression : AstBnfRule
    {
        
        private AstAllDistinct? _allDistinct;
        
        private AstExpression _expression;
        
        private static string _ruleValue = "all_distinct?  expression";
        
        private static string _ruleName = "all_distinct_expression";
        
        public AstAllDistinctExpression(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct?>())
                {
                    this._allDistinct = ((AstAllDistinct?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public AstAllDistinctExpression(Position p, AstAllDistinct? allDistinct, AstExpression expression) : 
                base(p)
        {
            this._allDistinct = allDistinct;
            this._expression = expression;
        }
        
        public AstAllDistinctExpression(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstAllDistinct?>())
                {
                    this._allDistinct = ((AstAllDistinct?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstExpression>())
                {
                    this._expression = ((AstExpression)(enumerator.Current));
                }
            }
        }
        
        public virtual AstAllDistinct? AllDistinct
        {
            get
            {
                return this._allDistinct;
            }
        }
        
        public virtual AstExpression Expression
        {
            get
            {
                return this._expression;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitAllDistinctExpression(this);
        }
        
        public static AstAllDistinctExpression? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// all_distinct_expression : 
        ///    all_distinct? expression 
        /// </summary>
        public static AstAllDistinctExpression New(AstAllDistinct? allDistinct, AstExpression expression)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(allDistinct);
            list.Add(expression);
            return new AstAllDistinctExpression(Position.Default, list);
        }
    }
    
    /// <summary>
    /// over_clause : OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause?  row_or_range_clause?  RR_BRACKET
    /// </summary>
    public partial class AstOverClause : AstBnfRule
    {
        
        private AstExpressionList _expressionList;
        
        private AstOrderByClause? _orderByClause;
        
        private AstRowOrRangeClause? _rowOrRangeClause;
        
        private static string _ruleValue = "OVER  LR_BRACKET  (PARTITION  BY  expression_list)?  order_by_clause?  row_or_ran" +
            "ge_clause?  RR_BRACKET";
        
        private static string _ruleName = "over_clause";
        
        public AstOverClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOrderByClause?>())
                {
                    this._orderByClause = ((AstOrderByClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause?>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause?)(enumerator.Current));
                }
            }
        }
        
        public AstOverClause(Position p, AstExpressionList expressionList, AstOrderByClause? orderByClause, AstRowOrRangeClause? rowOrRangeClause) : 
                base(p)
        {
            this._expressionList = expressionList;
            this._orderByClause = orderByClause;
            this._rowOrRangeClause = rowOrRangeClause;
        }
        
        public AstOverClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstExpressionList>())
                {
                    this._expressionList = ((AstExpressionList)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOrderByClause?>())
                {
                    this._orderByClause = ((AstOrderByClause?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRowOrRangeClause?>())
                {
                    this._rowOrRangeClause = ((AstRowOrRangeClause?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstExpressionList ExpressionList
        {
            get
            {
                return this._expressionList;
            }
        }
        
        public virtual AstOrderByClause? OrderByClause
        {
            get
            {
                return this._orderByClause;
            }
        }
        
        public virtual AstRowOrRangeClause? RowOrRangeClause
        {
            get
            {
                return this._rowOrRangeClause;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitOverClause(this);
        }
        
        public static AstOverClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// over_clause : 
        ///    OVER ( PARTITION BY expression_list order_by_clause? row_or_range_clause? ) 
        /// </summary>
        public static AstOverClause New(AstExpressionList expressionList, AstOrderByClause? orderByClause, AstRowOrRangeClause? rowOrRangeClause)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(expressionList);
            list.Add(orderByClause);
            list.Add(rowOrRangeClause);
            return new AstOverClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// row_or_range_clause : row_range  window_frame_extent
    /// </summary>
    public partial class AstRowOrRangeClause : AstBnfRule
    {
        
        private AstRowRange _rowRange;
        
        private AstWindowFrameExtent _windowFrameExtent;
        
        private static string _ruleValue = "row_range  window_frame_extent";
        
        private static string _ruleName = "row_or_range_clause";
        
        public AstRowOrRangeClause(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRowRange>())
                {
                    this._rowRange = ((AstRowRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public AstRowOrRangeClause(Position p, AstRowRange rowRange, AstWindowFrameExtent windowFrameExtent) : 
                base(p)
        {
            this._rowRange = rowRange;
            this._windowFrameExtent = windowFrameExtent;
        }
        
        public AstRowOrRangeClause(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRowRange>())
                {
                    this._rowRange = ((AstRowRange)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstWindowFrameExtent>())
                {
                    this._windowFrameExtent = ((AstWindowFrameExtent)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRowRange RowRange
        {
            get
            {
                return this._rowRange;
            }
        }
        
        public virtual AstWindowFrameExtent WindowFrameExtent
        {
            get
            {
                return this._windowFrameExtent;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitRowOrRangeClause(this);
        }
        
        public static AstRowOrRangeClause? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// row_or_range_clause : 
        ///    row_range window_frame_extent 
        /// </summary>
        public static AstRowOrRangeClause New(AstRowRange rowRange, AstWindowFrameExtent windowFrameExtent)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(rowRange);
            list.Add(windowFrameExtent);
            return new AstRowOrRangeClause(Position.Default, list);
        }
    }
    
    /// <summary>
    /// db_chaining_set : DB_CHAINING  on_off
    /// </summary>
    public partial class AstDbChainingSet : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "DB_CHAINING  on_off";
        
        private static string _ruleName = "db_chaining_set";
        
        public AstDbChainingSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstDbChainingSet(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstDbChainingSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDbChainingSet(this);
        }
        
        public static AstDbChainingSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// db_chaining_set : 
        ///    DB_CHAINING on_off 
        /// </summary>
        public static AstDbChainingSet New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstDbChainingSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// trustworthy_set : TRUSTWORTHY  on_off
    /// </summary>
    public partial class AstTrustworthySet : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "TRUSTWORTHY  on_off";
        
        private static string _ruleName = "trustworthy_set";
        
        public AstTrustworthySet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstTrustworthySet(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstTrustworthySet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTrustworthySet(this);
        }
        
        public static AstTrustworthySet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// trustworthy_set : 
        ///    TRUSTWORTHY on_off 
        /// </summary>
        public static AstTrustworthySet New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstTrustworthySet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// default_language_set : DEFAULT_LANGUAGE  EQUAL  language_setting_value
    /// </summary>
    public partial class AstDefaultLanguageSet : AstBnfRule
    {
        
        private AstLanguageSettingValue _languageSettingValue;
        
        private static string _ruleValue = "DEFAULT_LANGUAGE  EQUAL  language_setting_value";
        
        private static string _ruleName = "default_language_set";
        
        public AstDefaultLanguageSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLanguageSettingValue>())
                {
                    this._languageSettingValue = ((AstLanguageSettingValue)(enumerator.Current));
                }
            }
        }
        
        public AstDefaultLanguageSet(Position p, AstLanguageSettingValue languageSettingValue) : 
                base(p)
        {
            this._languageSettingValue = languageSettingValue;
        }
        
        public AstDefaultLanguageSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLanguageSettingValue>())
                {
                    this._languageSettingValue = ((AstLanguageSettingValue)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLanguageSettingValue LanguageSettingValue
        {
            get
            {
                return this._languageSettingValue;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultLanguageSet(this);
        }
        
        public static AstDefaultLanguageSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// default_language_set : 
        ///    DEFAULT_LANGUAGE EQUAL language_setting_value 
        /// </summary>
        public static AstDefaultLanguageSet New(AstLanguageSettingValue languageSettingValue)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(languageSettingValue);
            return new AstDefaultLanguageSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// default_fulltext_language_set : DEFAULT_FULLTEXT_LANGUAGE  EQUAL  language_setting
    /// </summary>
    public partial class AstDefaultFulltextLanguageSet : AstBnfRule
    {
        
        private AstLanguageSetting _languageSetting;
        
        private static string _ruleValue = "DEFAULT_FULLTEXT_LANGUAGE  EQUAL  language_setting";
        
        private static string _ruleName = "default_fulltext_language_set";
        
        public AstDefaultFulltextLanguageSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLanguageSetting>())
                {
                    this._languageSetting = ((AstLanguageSetting)(enumerator.Current));
                }
            }
        }
        
        public AstDefaultFulltextLanguageSet(Position p, AstLanguageSetting languageSetting) : 
                base(p)
        {
            this._languageSetting = languageSetting;
        }
        
        public AstDefaultFulltextLanguageSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLanguageSetting>())
                {
                    this._languageSetting = ((AstLanguageSetting)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLanguageSetting LanguageSetting
        {
            get
            {
                return this._languageSetting;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDefaultFulltextLanguageSet(this);
        }
        
        public static AstDefaultFulltextLanguageSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// default_fulltext_language_set : 
        ///    DEFAULT_FULLTEXT_LANGUAGE EQUAL language_setting 
        /// </summary>
        public static AstDefaultFulltextLanguageSet New(AstLanguageSetting languageSetting)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(languageSetting);
            return new AstDefaultFulltextLanguageSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// nested_triggers_set : NESTED_TRIGGERS  EQUAL  on_off
    /// </summary>
    public partial class AstNestedTriggersSet : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "NESTED_TRIGGERS  EQUAL  on_off";
        
        private static string _ruleName = "nested_triggers_set";
        
        public AstNestedTriggersSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstNestedTriggersSet(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstNestedTriggersSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNestedTriggersSet(this);
        }
        
        public static AstNestedTriggersSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// nested_triggers_set : 
        ///    NESTED_TRIGGERS EQUAL on_off 
        /// </summary>
        public static AstNestedTriggersSet New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstNestedTriggersSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// transform_noise_words_set : TRANSFORM_NOISE_WORDS  EQUAL  on_off
    /// </summary>
    public partial class AstTransformNoiseWordsSet : AstBnfRule
    {
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = "TRANSFORM_NOISE_WORDS  EQUAL  on_off";
        
        private static string _ruleName = "transform_noise_words_set";
        
        public AstTransformNoiseWordsSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstTransformNoiseWordsSet(Position p, AstOnOff onOff) : 
                base(p)
        {
            this._onOff = onOff;
        }
        
        public AstTransformNoiseWordsSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTransformNoiseWordsSet(this);
        }
        
        public static AstTransformNoiseWordsSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// transform_noise_words_set : 
        ///    TRANSFORM_NOISE_WORDS EQUAL on_off 
        /// </summary>
        public static AstTransformNoiseWordsSet New(AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(onOff);
            return new AstTransformNoiseWordsSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// two_digit_year_cutoff_set : TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal
    /// </summary>
    public partial class AstTwoDigitYearCutoffSet : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private static string _ruleValue = "TWO_DIGIT_YEAR_CUTOFF  EQUAL  decimal";
        
        private static string _ruleName = "two_digit_year_cutoff_set";
        
        public AstTwoDigitYearCutoffSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstTwoDigitYearCutoffSet(Position p, AstDecimal @decimal) : 
                base(p)
        {
            this._decimal = @decimal;
        }
        
        public AstTwoDigitYearCutoffSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitTwoDigitYearCutoffSet(this);
        }
        
        public static AstTwoDigitYearCutoffSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// two_digit_year_cutoff_set : 
        ///    TWO_DIGIT_YEAR_CUTOFF EQUAL decimal 
        /// </summary>
        public static AstTwoDigitYearCutoffSet New(AstDecimal @decimal)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            return new AstTwoDigitYearCutoffSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// directory_name_set : DIRECTORY_NAME  EQUAL  stringtext
    /// </summary>
    public partial class AstDirectoryNameSet : AstBnfRule
    {
        
        private AstStringtext _stringtext;
        
        private static string _ruleValue = "DIRECTORY_NAME  EQUAL  stringtext";
        
        private static string _ruleName = "directory_name_set";
        
        public AstDirectoryNameSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public AstDirectoryNameSet(Position p, AstStringtext stringtext) : 
                base(p)
        {
            this._stringtext = stringtext;
        }
        
        public AstDirectoryNameSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._stringtext = ((AstStringtext)(enumerator.Current));
                }
            }
        }
        
        public virtual AstStringtext Stringtext
        {
            get
            {
                return this._stringtext;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDirectoryNameSet(this);
        }
        
        public static AstDirectoryNameSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// directory_name_set : 
        ///    DIRECTORY_NAME EQUAL stringtext 
        /// </summary>
        public static AstDirectoryNameSet New(AstStringtext stringtext)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(stringtext);
            return new AstDirectoryNameSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// non_transacted_access_set : NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full
    /// </summary>
    public partial class AstNonTransactedAccessSet : AstBnfRule
    {
        
        private AstOffReadOnlyFull _offReadOnlyFull;
        
        private static string _ruleValue = "NON_TRANSACTED_ACCESS  EQUAL  off_read_only_full";
        
        private static string _ruleName = "non_transacted_access_set";
        
        public AstNonTransactedAccessSet(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOffReadOnlyFull>())
                {
                    this._offReadOnlyFull = ((AstOffReadOnlyFull)(enumerator.Current));
                }
            }
        }
        
        public AstNonTransactedAccessSet(Position p, AstOffReadOnlyFull offReadOnlyFull) : 
                base(p)
        {
            this._offReadOnlyFull = offReadOnlyFull;
        }
        
        public AstNonTransactedAccessSet(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstOffReadOnlyFull>())
                {
                    this._offReadOnlyFull = ((AstOffReadOnlyFull)(enumerator.Current));
                }
            }
        }
        
        public virtual AstOffReadOnlyFull OffReadOnlyFull
        {
            get
            {
                return this._offReadOnlyFull;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitNonTransactedAccessSet(this);
        }
        
        public static AstNonTransactedAccessSet? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// non_transacted_access_set : 
        ///    NON_TRANSACTED_ACCESS EQUAL off_read_only_full 
        /// </summary>
        public static AstNonTransactedAccessSet New(AstOffReadOnlyFull offReadOnlyFull)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(offReadOnlyFull);
            return new AstNonTransactedAccessSet(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_group : FILEGROUP  file_group_id  (CONTAINS  FILESTREAM)?  (DEFAULT)?  (CONTAINS  MEMORY_OPTIMIZED_DATA)?  file_specs
    /// </summary>
    public partial class AstFileGroup : AstBnfRule
    {
        
        private AstFileGroupId _fileGroupId;
        
        private AstFileSpecs _fileSpecs;
        
        private static string _ruleValue = "FILEGROUP  file_group_id  (CONTAINS  FILESTREAM)?  (DEFAULT)?  (CONTAINS  MEMORY_" +
            "OPTIMIZED_DATA)?  file_specs";
        
        private static string _ruleName = "file_group";
        
        public AstFileGroup(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpecs>())
                {
                    this._fileSpecs = ((AstFileSpecs)(enumerator.Current));
                }
            }
        }
        
        public AstFileGroup(Position p, AstFileGroupId fileGroupId, AstFileSpecs fileSpecs) : 
                base(p)
        {
            this._fileGroupId = fileGroupId;
            this._fileSpecs = fileSpecs;
        }
        
        public AstFileGroup(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstFileGroupId>())
                {
                    this._fileGroupId = ((AstFileGroupId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSpecs>())
                {
                    this._fileSpecs = ((AstFileSpecs)(enumerator.Current));
                }
            }
        }
        
        public virtual AstFileGroupId FileGroupId
        {
            get
            {
                return this._fileGroupId;
            }
        }
        
        public virtual AstFileSpecs FileSpecs
        {
            get
            {
                return this._fileSpecs;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileGroup(this);
        }
        
        public static AstFileGroup? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// file_group : 
        ///    FILEGROUP file_group_id CONTAINS FILESTREAM DEFAULT CONTAINS MEMORY_OPTIMIZED_DATA file_specs 
        /// </summary>
        public static AstFileGroup New(AstFileGroupId fileGroupId, AstFileSpecs fileSpecs)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(fileGroupId);
            list.Add(fileSpecs);
            return new AstFileGroup(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_spec : LR_BRACKET  name_set  COMMA?  filename_set  COMMA?  (size_set  COMMA?)?  (maxsize_set  COMMA?)?  (filegrowth_set  COMMA?)?  RR_BRACKET
    /// </summary>
    public partial class AstFileSpec : AstBnfRule
    {
        
        private AstNameSet _nameSet;
        
        private AstFilenameSet _filenameSet;
        
        private AstSizeSet _sizeSet;
        
        private AstMaxsizeSet _maxsizeSet;
        
        private AstFilegrowthSet _filegrowthSet;
        
        private static string _ruleValue = "LR_BRACKET  name_set  COMMA?  filename_set  COMMA?  (size_set  COMMA?)?  (maxsize" +
            "_set  COMMA?)?  (filegrowth_set  COMMA?)?  RR_BRACKET";
        
        private static string _ruleName = "file_spec";
        
        public AstFileSpec(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNameSet>())
                {
                    this._nameSet = ((AstNameSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilenameSet>())
                {
                    this._filenameSet = ((AstFilenameSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSizeSet>())
                {
                    this._sizeSet = ((AstSizeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxsizeSet>())
                {
                    this._maxsizeSet = ((AstMaxsizeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilegrowthSet>())
                {
                    this._filegrowthSet = ((AstFilegrowthSet)(enumerator.Current));
                }
            }
        }
        
        public AstFileSpec(Position p, AstNameSet nameSet, AstFilenameSet filenameSet, AstSizeSet sizeSet, AstMaxsizeSet maxsizeSet, AstFilegrowthSet filegrowthSet) : 
                base(p)
        {
            this._nameSet = nameSet;
            this._filenameSet = filenameSet;
            this._sizeSet = sizeSet;
            this._maxsizeSet = maxsizeSet;
            this._filegrowthSet = filegrowthSet;
        }
        
        public AstFileSpec(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstNameSet>())
                {
                    this._nameSet = ((AstNameSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilenameSet>())
                {
                    this._filenameSet = ((AstFilenameSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSizeSet>())
                {
                    this._sizeSet = ((AstSizeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstMaxsizeSet>())
                {
                    this._maxsizeSet = ((AstMaxsizeSet)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFilegrowthSet>())
                {
                    this._filegrowthSet = ((AstFilegrowthSet)(enumerator.Current));
                }
            }
        }
        
        public virtual AstNameSet NameSet
        {
            get
            {
                return this._nameSet;
            }
        }
        
        public virtual AstFilenameSet FilenameSet
        {
            get
            {
                return this._filenameSet;
            }
        }
        
        public virtual AstSizeSet SizeSet
        {
            get
            {
                return this._sizeSet;
            }
        }
        
        public virtual AstMaxsizeSet MaxsizeSet
        {
            get
            {
                return this._maxsizeSet;
            }
        }
        
        public virtual AstFilegrowthSet FilegrowthSet
        {
            get
            {
                return this._filegrowthSet;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSpec(this);
        }
        
        public static AstFileSpec? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// file_spec : 
        ///    ( name_set COMMA? filename_set COMMA? size_set COMMA? maxsize_set COMMA? filegrowth_set COMMA? ) 
        /// </summary>
        public static AstFileSpec New(AstNameSet nameSet, AstFilenameSet filenameSet, AstSizeSet sizeSet, AstMaxsizeSet maxsizeSet, AstFilegrowthSet filegrowthSet)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(nameSet);
            list.Add(filenameSet);
            list.Add(sizeSet);
            list.Add(maxsizeSet);
            list.Add(filegrowthSet);
            return new AstFileSpec(Position.Default, list);
        }
    }
    
    /// <summary>
    /// begin_conversation_timer : BEGIN  CONVERSATION  TIMER  LR_BRACKET  conversation = local_id  RR_BRACKET  TIMEOUT  EQUAL  timespan
    /// </summary>
    public partial class AstBeginConversationTimer : AstBnfRule
    {
        
        private AstLocalId _conversation;
        
        private AstTimespan _timespan;
        
        private static string _ruleValue = "BEGIN  CONVERSATION  TIMER  LR_BRACKET  conversation = local_id  RR_BRACKET  TIME" +
            "OUT  EQUAL  timespan";
        
        private static string _ruleName = "begin_conversation_timer";
        
        public AstBeginConversationTimer(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._conversation = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTimespan>())
                {
                    this._timespan = ((AstTimespan)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationTimer(Position p, AstLocalId conversation, AstTimespan timespan) : 
                base(p)
        {
            this._conversation = conversation;
            this._timespan = timespan;
        }
        
        public AstBeginConversationTimer(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._conversation = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTimespan>())
                {
                    this._timespan = ((AstTimespan)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId Conversation
        {
            get
            {
                return this._conversation;
            }
        }
        
        public virtual AstTimespan Timespan
        {
            get
            {
                return this._timespan;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationTimer(this);
        }
        
        public static AstBeginConversationTimer? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// begin_conversation_timer : 
        ///    BEGIN CONVERSATION TIMER ( conversation=local_id ) TIMEOUT EQUAL timespan 
        /// </summary>
        public static AstBeginConversationTimer New(AstLocalId conversation, AstTimespan timespan)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(conversation);
            list.Add(timespan);
            return new AstBeginConversationTimer(Position.Default, list);
        }
    }
    
    /// <summary>
    /// begin_conversation_dialog : BEGIN  DIALOG  (CONVERSATION)?  dialog_handle = local_id  FROM  SERVICE  initiator_service_name = service_name_expr  TO  SERVICE  target_service_name = service_name_expr  (COMMA  service_broker_guid = stringtext)?  ON  CONTRACT  contract_name_expression  (WITH  (relayed_conversation  EQUAL  group = local_id  COMMA?)?  (LIFETIME  EQUAL  decimal_local_id  COMMA?)?  (ENCRYPTION  EQUAL  on_off)?)?
    /// </summary>
    public partial class AstBeginConversationDialog : AstBnfRule
    {
        
        private AstLocalId _dialogHandle;
        
        private AstServiceNameExpr _initiatorServiceName;
        
        private AstServiceNameExpr _targetServiceName;
        
        private AstStringtext _serviceBrokerGuid;
        
        private AstContractNameExpression _contractNameExpression;
        
        private AstRelayedConversation _relayedConversation;
        
        private AstLocalId _group;
        
        private AstDecimalLocalId _decimalLocalId;
        
        private AstOnOff _onOff;
        
        private static string _ruleValue = @"BEGIN  DIALOG  (CONVERSATION)?  dialog_handle = local_id  FROM  SERVICE  initiator_service_name = service_name_expr  TO  SERVICE  target_service_name = service_name_expr  (COMMA  service_broker_guid = stringtext)?  ON  CONTRACT  contract_name_expression  (WITH  (relayed_conversation  EQUAL  group = local_id  COMMA?)?  (LIFETIME  EQUAL  decimal_local_id  COMMA?)?  (ENCRYPTION  EQUAL  on_off)?)?";
        
        private static string _ruleName = "begin_conversation_dialog";
        
        public AstBeginConversationDialog(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._dialogHandle = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServiceNameExpr>())
                {
                    this._initiatorServiceName = ((AstServiceNameExpr)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServiceNameExpr>())
                {
                    this._targetServiceName = ((AstServiceNameExpr)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._serviceBrokerGuid = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRelayedConversation>())
                {
                    this._relayedConversation = ((AstRelayedConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._group = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public AstBeginConversationDialog(Position p, AstLocalId dialogHandle, AstServiceNameExpr initiatorServiceName, AstServiceNameExpr targetServiceName, AstStringtext serviceBrokerGuid, AstContractNameExpression contractNameExpression, AstRelayedConversation relayedConversation, AstLocalId group, AstDecimalLocalId decimalLocalId, AstOnOff onOff) : 
                base(p)
        {
            this._dialogHandle = dialogHandle;
            this._initiatorServiceName = initiatorServiceName;
            this._targetServiceName = targetServiceName;
            this._serviceBrokerGuid = serviceBrokerGuid;
            this._contractNameExpression = contractNameExpression;
            this._relayedConversation = relayedConversation;
            this._group = group;
            this._decimalLocalId = decimalLocalId;
            this._onOff = onOff;
        }
        
        public AstBeginConversationDialog(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._dialogHandle = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServiceNameExpr>())
                {
                    this._initiatorServiceName = ((AstServiceNameExpr)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstServiceNameExpr>())
                {
                    this._targetServiceName = ((AstServiceNameExpr)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstStringtext>())
                {
                    this._serviceBrokerGuid = ((AstStringtext)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstContractNameExpression>())
                {
                    this._contractNameExpression = ((AstContractNameExpression)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstRelayedConversation>())
                {
                    this._relayedConversation = ((AstRelayedConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstLocalId>())
                {
                    this._group = ((AstLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimalLocalId>())
                {
                    this._decimalLocalId = ((AstDecimalLocalId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstOnOff>())
                {
                    this._onOff = ((AstOnOff)(enumerator.Current));
                }
            }
        }
        
        public virtual AstLocalId DialogHandle
        {
            get
            {
                return this._dialogHandle;
            }
        }
        
        public virtual AstServiceNameExpr InitiatorServiceName
        {
            get
            {
                return this._initiatorServiceName;
            }
        }
        
        public virtual AstServiceNameExpr TargetServiceName
        {
            get
            {
                return this._targetServiceName;
            }
        }
        
        public virtual AstStringtext ServiceBrokerGuid
        {
            get
            {
                return this._serviceBrokerGuid;
            }
        }
        
        public virtual AstContractNameExpression ContractNameExpression
        {
            get
            {
                return this._contractNameExpression;
            }
        }
        
        public virtual AstRelayedConversation RelayedConversation
        {
            get
            {
                return this._relayedConversation;
            }
        }
        
        public virtual AstLocalId Group
        {
            get
            {
                return this._group;
            }
        }
        
        public virtual AstDecimalLocalId DecimalLocalId
        {
            get
            {
                return this._decimalLocalId;
            }
        }
        
        public virtual AstOnOff OnOff
        {
            get
            {
                return this._onOff;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitBeginConversationDialog(this);
        }
        
        public static AstBeginConversationDialog? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// begin_conversation_dialog : 
        ///    BEGIN DIALOG CONVERSATION dialog_handle=local_id FROM SERVICE initiator_service_name=service_name_expr TO SERVICE target_service_name=service_name_expr , service_broker_guid=stringtext ON CONTRACT contract_name_expression WITH relayed_conversation EQUAL group=local_id ,? LIFETIME EQUAL decimal_local_id ,? ENCRYPTION EQUAL on_off 
        /// </summary>
        public static AstBeginConversationDialog New(AstLocalId dialogHandle, AstServiceNameExpr initiatorServiceName, AstServiceNameExpr targetServiceName, AstStringtext serviceBrokerGuid, AstContractNameExpression contractNameExpression, AstRelayedConversation relayedConversation, AstLocalId group, AstDecimalLocalId decimalLocalId, AstOnOff onOff)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(dialogHandle);
            list.Add(initiatorServiceName);
            list.Add(targetServiceName);
            list.Add(serviceBrokerGuid);
            list.Add(contractNameExpression);
            list.Add(relayedConversation);
            list.Add(group);
            list.Add(decimalLocalId);
            list.Add(onOff);
            return new AstBeginConversationDialog(Position.Default, list);
        }
    }
    
    /// <summary>
    /// waitfor_conversation : WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  (COMMA?  TIMEOUT  timeout = timespan)?
    /// </summary>
    public partial class AstWaitforConversation : AstBnfRule
    {
        
        private AstGetConversation _getConversation;
        
        private AstTimespan _timeout;
        
        private static string _ruleValue = "WAITFOR?  LR_BRACKET  get_conversation  RR_BRACKET  (COMMA?  TIMEOUT  timeout = t" +
            "imespan)?";
        
        private static string _ruleName = "waitfor_conversation";
        
        public AstWaitforConversation(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTimespan>())
                {
                    this._timeout = ((AstTimespan)(enumerator.Current));
                }
            }
        }
        
        public AstWaitforConversation(Position p, AstGetConversation getConversation, AstTimespan timeout) : 
                base(p)
        {
            this._getConversation = getConversation;
            this._timeout = timeout;
        }
        
        public AstWaitforConversation(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstGetConversation>())
                {
                    this._getConversation = ((AstGetConversation)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstTimespan>())
                {
                    this._timeout = ((AstTimespan)(enumerator.Current));
                }
            }
        }
        
        public virtual AstGetConversation GetConversation
        {
            get
            {
                return this._getConversation;
            }
        }
        
        public virtual AstTimespan Timeout
        {
            get
            {
                return this._timeout;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitWaitforConversation(this);
        }
        
        public static AstWaitforConversation? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// waitfor_conversation : 
        ///    WAITFOR? ( get_conversation ) COMMA? TIMEOUT timeout=timespan 
        /// </summary>
        public static AstWaitforConversation New(AstGetConversation getConversation, AstTimespan timeout)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(getConversation);
            list.Add(timeout);
            return new AstWaitforConversation(Position.Default, list);
        }
    }
    
    /// <summary>
    /// decimal_scale_prec : scale = decimal  COMMA  prec = decimal
    /// </summary>
    public partial class AstDecimalScalePrec : AstBnfRule
    {
        
        private AstDecimal _scale;
        
        private AstDecimal _prec;
        
        private static string _ruleValue = "scale = decimal  COMMA  prec = decimal";
        
        private static string _ruleName = "decimal_scale_prec";
        
        public AstDecimalScalePrec(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._scale = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._prec = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstDecimalScalePrec(Position p, AstDecimal scale, AstDecimal prec) : 
                base(p)
        {
            this._scale = scale;
            this._prec = prec;
        }
        
        public AstDecimalScalePrec(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._scale = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._prec = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Scale
        {
            get
            {
                return this._scale;
            }
        }
        
        public virtual AstDecimal Prec
        {
            get
            {
                return this._prec;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDecimalScalePrec(this);
        }
        
        public static AstDecimalScalePrec? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// decimal_scale_prec : 
        ///    scale=decimal , prec=decimal 
        /// </summary>
        public static AstDecimalScalePrec New(AstDecimal scale, AstDecimal prec)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(scale);
            list.Add(prec);
            return new AstDecimalScalePrec(Position.Default, list);
        }
    }
    
    /// <summary>
    /// identity_seed : seed = decimal  COMMA  inc = decimal
    /// </summary>
    public partial class AstIdentitySeed : AstBnfRule
    {
        
        private AstDecimal _seed;
        
        private AstDecimal _inc;
        
        private static string _ruleValue = "seed = decimal  COMMA  inc = decimal";
        
        private static string _ruleName = "identity_seed";
        
        public AstIdentitySeed(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._seed = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._inc = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public AstIdentitySeed(Position p, AstDecimal seed, AstDecimal inc) : 
                base(p)
        {
            this._seed = seed;
            this._inc = inc;
        }
        
        public AstIdentitySeed(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._seed = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._inc = ((AstDecimal)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Seed
        {
            get
            {
                return this._seed;
            }
        }
        
        public virtual AstDecimal Inc
        {
            get
            {
                return this._inc;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitIdentitySeed(this);
        }
        
        public static AstIdentitySeed? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// identity_seed : 
        ///    seed=decimal , inc=decimal 
        /// </summary>
        public static AstIdentitySeed New(AstDecimal seed, AstDecimal inc)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(seed);
            list.Add(inc);
            return new AstIdentitySeed(Position.Default, list);
        }
    }
    
    /// <summary>
    /// file_size : decimal  file_size_unity?
    /// </summary>
    public partial class AstFileSize : AstBnfRule
    {
        
        private AstDecimal _decimal;
        
        private AstFileSizeUnity? _fileSizeUnity;
        
        private static string _ruleValue = "decimal  file_size_unity?";
        
        private static string _ruleName = "file_size";
        
        public AstFileSize(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSizeUnity?>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity?)(enumerator.Current));
                }
            }
        }
        
        public AstFileSize(Position p, AstDecimal @decimal, AstFileSizeUnity? fileSizeUnity) : 
                base(p)
        {
            this._decimal = @decimal;
            this._fileSizeUnity = fileSizeUnity;
        }
        
        public AstFileSize(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDecimal>())
                {
                    this._decimal = ((AstDecimal)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFileSizeUnity?>())
                {
                    this._fileSizeUnity = ((AstFileSizeUnity?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDecimal Decimal
        {
            get
            {
                return this._decimal;
            }
        }
        
        public virtual AstFileSizeUnity? FileSizeUnity
        {
            get
            {
                return this._fileSizeUnity;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitFileSize(this);
        }
        
        public static AstFileSize? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// file_size : 
        ///    decimal file_size_unity? 
        /// </summary>
        public static AstFileSize New(AstDecimal @decimal, AstFileSizeUnity? fileSizeUnity)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(@decimal);
            list.Add(fileSizeUnity);
            return new AstFileSize(Position.Default, list);
        }
    }
    
    /// <summary>
    /// schema_security_predicate_function_id : tvf_schema_id  DOT  security_predicate_function_id
    /// </summary>
    public partial class AstSchemaSecurityPredicateFunctionId : AstBnfRule
    {
        
        private AstTvfSchemaId _tvfSchemaId;
        
        private AstSecurityPredicateFunctionId _securityPredicateFunctionId;
        
        private static string _ruleValue = "tvf_schema_id  DOT  security_predicate_function_id";
        
        private static string _ruleName = "schema_security_predicate_function_id";
        
        public AstSchemaSecurityPredicateFunctionId(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTvfSchemaId>())
                {
                    this._tvfSchemaId = ((AstTvfSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPredicateFunctionId>())
                {
                    this._securityPredicateFunctionId = ((AstSecurityPredicateFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstSchemaSecurityPredicateFunctionId(Position p, AstTvfSchemaId tvfSchemaId, AstSecurityPredicateFunctionId securityPredicateFunctionId) : 
                base(p)
        {
            this._tvfSchemaId = tvfSchemaId;
            this._securityPredicateFunctionId = securityPredicateFunctionId;
        }
        
        public AstSchemaSecurityPredicateFunctionId(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstTvfSchemaId>())
                {
                    this._tvfSchemaId = ((AstTvfSchemaId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSecurityPredicateFunctionId>())
                {
                    this._securityPredicateFunctionId = ((AstSecurityPredicateFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstTvfSchemaId TvfSchemaId
        {
            get
            {
                return this._tvfSchemaId;
            }
        }
        
        public virtual AstSecurityPredicateFunctionId SecurityPredicateFunctionId
        {
            get
            {
                return this._securityPredicateFunctionId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitSchemaSecurityPredicateFunctionId(this);
        }
        
        public static AstSchemaSecurityPredicateFunctionId? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// schema_security_predicate_function_id : 
        ///    tvf_schema_id . security_predicate_function_id 
        /// </summary>
        public static AstSchemaSecurityPredicateFunctionId New(AstTvfSchemaId tvfSchemaId, AstSecurityPredicateFunctionId securityPredicateFunctionId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(tvfSchemaId);
            list.Add(securityPredicateFunctionId);
            return new AstSchemaSecurityPredicateFunctionId(Position.Default, list);
        }
    }
    
    /// <summary>
    /// server_database_schema_function_ref : server_id?  DOT  database_id?  DOT  schema_identifier?  DOT  function_id
    /// </summary>
    public partial class AstServerDatabaseSchemaFunctionRef : AstBnfRule
    {
        
        private AstServerId? _serverId;
        
        private AstDatabaseId? _databaseId;
        
        private AstSchemaIdentifier? _schemaIdentifier;
        
        private AstFunctionId _functionId;
        
        private static string _ruleValue = "server_id?  DOT  database_id?  DOT  schema_identifier?  DOT  function_id";
        
        private static string _ruleName = "server_database_schema_function_ref";
        
        public AstServerDatabaseSchemaFunctionRef(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId?>())
                {
                    this._serverId = ((AstServerId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId?>())
                {
                    this._databaseId = ((AstDatabaseId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public AstServerDatabaseSchemaFunctionRef(Position p, AstServerId? serverId, AstDatabaseId? databaseId, AstSchemaIdentifier? schemaIdentifier, AstFunctionId functionId) : 
                base(p)
        {
            this._serverId = serverId;
            this._databaseId = databaseId;
            this._schemaIdentifier = schemaIdentifier;
            this._functionId = functionId;
        }
        
        public AstServerDatabaseSchemaFunctionRef(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstServerId?>())
                {
                    this._serverId = ((AstServerId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstDatabaseId?>())
                {
                    this._databaseId = ((AstDatabaseId?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstSchemaIdentifier?>())
                {
                    this._schemaIdentifier = ((AstSchemaIdentifier?)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstFunctionId>())
                {
                    this._functionId = ((AstFunctionId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstServerId? ServerId
        {
            get
            {
                return this._serverId;
            }
        }
        
        public virtual AstDatabaseId? DatabaseId
        {
            get
            {
                return this._databaseId;
            }
        }
        
        public virtual AstSchemaIdentifier? SchemaIdentifier
        {
            get
            {
                return this._schemaIdentifier;
            }
        }
        
        public virtual AstFunctionId FunctionId
        {
            get
            {
                return this._functionId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitServerDatabaseSchemaFunctionRef(this);
        }
        
        public static AstServerDatabaseSchemaFunctionRef? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// server_database_schema_function_ref : 
        ///    server_id? . database_id? . schema_identifier? . function_id 
        /// </summary>
        public static AstServerDatabaseSchemaFunctionRef New(AstServerId? serverId, AstDatabaseId? databaseId, AstSchemaIdentifier? schemaIdentifier, AstFunctionId functionId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(serverId);
            list.Add(databaseId);
            list.Add(schemaIdentifier);
            list.Add(functionId);
            return new AstServerDatabaseSchemaFunctionRef(Position.Default, list);
        }
    }
    
    /// <summary>
    /// deleteed_inserted_column_id : deleteed_inserted  DOT  column_id
    /// </summary>
    public partial class AstDeleteedInsertedColumnId : AstBnfRule
    {
        
        private AstDeleteedInserted _deleteedInserted;
        
        private AstColumnId _columnId;
        
        private static string _ruleValue = "deleteed_inserted  DOT  column_id";
        
        private static string _ruleName = "deleteed_inserted_column_id";
        
        public AstDeleteedInsertedColumnId(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeleteedInserted>())
                {
                    this._deleteedInserted = ((AstDeleteedInserted)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public AstDeleteedInsertedColumnId(Position p, AstDeleteedInserted deleteedInserted, AstColumnId columnId) : 
                base(p)
        {
            this._deleteedInserted = deleteedInserted;
            this._columnId = columnId;
        }
        
        public AstDeleteedInsertedColumnId(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstDeleteedInserted>())
                {
                    this._deleteedInserted = ((AstDeleteedInserted)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
            }
        }
        
        public virtual AstDeleteedInserted DeleteedInserted
        {
            get
            {
                return this._deleteedInserted;
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitDeleteedInsertedColumnId(this);
        }
        
        public static AstDeleteedInsertedColumnId? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// deleteed_inserted_column_id : 
        ///    deleteed_inserted . column_id 
        /// </summary>
        public static AstDeleteedInsertedColumnId New(AstDeleteedInserted deleteedInserted, AstColumnId columnId)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(deleteedInserted);
            list.Add(columnId);
            return new AstDeleteedInsertedColumnId(Position.Default, list);
        }
    }
    
    /// <summary>
    /// column_ordered : column_id  asc_desc?
    /// </summary>
    public partial class AstColumnOrdered : AstBnfRule
    {
        
        private AstColumnId _columnId;
        
        private AstAscDesc? _ascDesc;
        
        private static string _ruleValue = "column_id  asc_desc?";
        
        private static string _ruleName = "column_ordered";
        
        public AstColumnOrdered(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAscDesc?>())
                {
                    this._ascDesc = ((AstAscDesc?)(enumerator.Current));
                }
            }
        }
        
        public AstColumnOrdered(Position p, AstColumnId columnId, AstAscDesc? ascDesc) : 
                base(p)
        {
            this._columnId = columnId;
            this._ascDesc = ascDesc;
        }
        
        public AstColumnOrdered(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstColumnId>())
                {
                    this._columnId = ((AstColumnId)(enumerator.Current));
                }
                if (enumerator.Current.Is<AstAscDesc?>())
                {
                    this._ascDesc = ((AstAscDesc?)(enumerator.Current));
                }
            }
        }
        
        public virtual AstColumnId ColumnId
        {
            get
            {
                return this._columnId;
            }
        }
        
        public virtual AstAscDesc? AscDesc
        {
            get
            {
                return this._ascDesc;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitColumnOrdered(this);
        }
        
        public static AstColumnOrdered? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// column_ordered : 
        ///    column_id asc_desc? 
        /// </summary>
        public static AstColumnOrdered New(AstColumnId columnId, AstAscDesc? ascDesc)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(columnId);
            list.Add(ascDesc);
            return new AstColumnOrdered(Position.Default, list);
        }
    }
    
    /// <summary>
    /// create_index_options : WITH  LR_BRACKET  relational_index_options  RR_BRACKET
    /// </summary>
    public partial class AstCreateIndexOptions : AstBnfRule
    {
        
        private AstRelationalIndexOptions _relationalIndexOptions;
        
        private static string _ruleValue = "WITH  LR_BRACKET  relational_index_options  RR_BRACKET";
        
        private static string _ruleName = "create_index_options";
        
        public AstCreateIndexOptions(Position p, AstRootList<AstRoot> list) : 
                base(p)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public AstCreateIndexOptions(Position p, AstRelationalIndexOptions relationalIndexOptions) : 
                base(p)
        {
            this._relationalIndexOptions = relationalIndexOptions;
        }
        
        public AstCreateIndexOptions(ParserRuleContext ctx, AstRootList<AstRoot> list) : 
                base(ctx)
        {
            for (var enumerator = list.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                AstRoot item = ((AstRoot)(enumerator.Current));
                if (enumerator.Current.Is<AstRelationalIndexOptions>())
                {
                    this._relationalIndexOptions = ((AstRelationalIndexOptions)(enumerator.Current));
                }
            }
        }
        
        public virtual AstRelationalIndexOptions RelationalIndexOptions
        {
            get
            {
                return this._relationalIndexOptions;
            }
        }
        
        public override string RuleName
        {
            get
            {
                return _ruleName;
            }
        }
        
        public override string RuleValue
        {
            get
            {
                return _ruleValue;
            }
        }
        
        public override void Accept(IAstTSqlVisitor visitor)
        {
            visitor.VisitCreateIndexOptions(this);
        }
        
        public static AstCreateIndexOptions? Null()
        {
            return null;
        }
        
        public override bool ToString(Writer writer, StrategySerializationItem strategy)
        {
            return true;
        }
        
        /// <summary>
        /// create_index_options : 
        ///    WITH ( relational_index_options ) 
        /// </summary>
        public static AstCreateIndexOptions New(AstRelationalIndexOptions relationalIndexOptions)
        {
            AstRootList<AstRoot> list = new AstRootList<AstRoot>();
            list.Add(relationalIndexOptions);
            return new AstCreateIndexOptions(Position.Default, list);
        }
    }
}
