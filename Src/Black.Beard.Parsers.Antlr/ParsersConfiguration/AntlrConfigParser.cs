//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrConfigParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.ParserConfigurations.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AntlrConfigParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOC_COMMENT=1, WS=2, INT=3, STRING_LITERAL=4, NO=5, GENERATE=6, CALCULATED=7, 
		WITH=8, DEFAULT=9, RULE=10, TEMPLATE=11, SELECT=12, WHEN=13, ONE=14, ONLY=15, 
		ANY=16, MANY=17, BLOCK=18, TERM=19, ALTERNATIVE=20, HAS=21, IS=22, NOT=23, 
		IN=24, LIST=25, KIND=26, INHERIT=27, OR=28, AND=29, OUTPUT=30, SEMI=31, 
		COLON=32, LPAREN=33, RPAREN=34, ASSIGN=35, OTHER_=36, CONSTANT_=37, IDENTIFIER_=38, 
		COMMENT_=39, BOOLEAN_=40, STRING_=41, DECIMAL_=42, INTEGER_=43, REAL_=44, 
		HEXA_=45, BINARY_=46, PATTERN_=47, OPERATOR_=48, PONCTUATION_=49, ID=50;
	public const int
		RULE_grammar_spec = 0, RULE_grammar_spec_list = 1, RULE_default = 2, RULE_template_selector = 3, 
		RULE_item_list = 4, RULE_grammar_declaration = 5, RULE_template_selector_expression = 6, 
		RULE_template_selector_expression_item = 7, RULE_template_selector_expression_item_has = 8, 
		RULE_template_selector_expression_item_is = 9, RULE_ruleConfig = 10, RULE_ruleTermConfig = 11, 
		RULE_termKindEnum = 12, RULE_rule_tune_inherit = 13, RULE_calculated_template_setting = 14, 
		RULE_template_setting = 15, RULE_optional_template_setting = 16, RULE_additional_settings = 17, 
		RULE_value_item = 18, RULE_identifier = 19;
	public static readonly string[] ruleNames = {
		"grammar_spec", "grammar_spec_list", "default", "template_selector", "item_list", 
		"grammar_declaration", "template_selector_expression", "template_selector_expression_item", 
		"template_selector_expression_item_has", "template_selector_expression_item_is", 
		"ruleConfig", "ruleTermConfig", "termKindEnum", "rule_tune_inherit", "calculated_template_setting", 
		"template_setting", "optional_template_setting", "additional_settings", 
		"value_item", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'NO'", "'GENERATE'", "'CALCULATED'", "'WITH'", 
		"'DEFAULT'", "'RULE'", "'TEMPLATE'", "'SELECT'", "'WHEN'", "'ONE'", "'ONLY'", 
		"'ANY'", "'MANY'", "'BLOCK'", "'TERM'", "'ALTERNATIVE'", "'HAS'", "'IS'", 
		"'NOT'", "'IN'", "'LIST'", "'KIND'", "'INHERIT'", "'|'", "'&'", "'OUTPUT'", 
		null, null, null, null, null, "'#OTHER'", "'#CONSTANT'", "'#IDENTIFIER'", 
		"'#COMMENT'", "'#BOOLEAN'", "'#STRING'", "'#DECIMAL'", "'#INTEGER'", "'#REAL'", 
		"'#HEXA'", "'#BINARY'", "'#PATTERN'", "'#OPERATOR'", "'#PONCTUATION'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOC_COMMENT", "WS", "INT", "STRING_LITERAL", "NO", "GENERATE", 
		"CALCULATED", "WITH", "DEFAULT", "RULE", "TEMPLATE", "SELECT", "WHEN", 
		"ONE", "ONLY", "ANY", "MANY", "BLOCK", "TERM", "ALTERNATIVE", "HAS", "IS", 
		"NOT", "IN", "LIST", "KIND", "INHERIT", "OR", "AND", "OUTPUT", "SEMI", 
		"COLON", "LPAREN", "RPAREN", "ASSIGN", "OTHER_", "CONSTANT_", "IDENTIFIER_", 
		"COMMENT_", "BOOLEAN_", "STRING_", "DECIMAL_", "INTEGER_", "REAL_", "HEXA_", 
		"BINARY_", "PATTERN_", "OPERATOR_", "PONCTUATION_", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AntlrConfigParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AntlrConfigParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AntlrConfigParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AntlrConfigParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AntlrConfigParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_spec_listContext[] grammar_spec_list() {
			return GetRuleContexts<Grammar_spec_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_spec_listContext grammar_spec_list(int i) {
			return GetRuleContext<Grammar_spec_listContext>(i);
		}
		public Grammar_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_specContext grammar_spec() {
		Grammar_specContext _localctx = new Grammar_specContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 34084352L) != 0) {
				{
				{
				State = 40;
				grammar_spec_list();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefaultContext @default() {
			return GetRuleContext<DefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_selectorContext template_selector() {
			return GetRuleContext<Template_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_listContext item_list() {
			return GetRuleContext<Item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_declarationContext grammar_declaration() {
			return GetRuleContext<Grammar_declarationContext>(0);
		}
		public Grammar_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_spec_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_spec_listContext grammar_spec_list() {
		Grammar_spec_listContext _localctx = new Grammar_spec_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammar_spec_list);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				@default();
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				template_selector();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				item_list();
				}
				break;
			case RULE:
			case TERM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51;
				grammar_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(AntlrConfigParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_settingContext template_setting() {
			return GetRuleContext<Template_settingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrConfigParser.SEMI, 0); }
		public DefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultContext @default() {
		DefaultContext _localctx = new DefaultContext(Context, State);
		EnterRule(_localctx, 4, RULE_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(DEFAULT);
			State = 55;
			template_setting();
			State = 56;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(AntlrConfigParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_settingContext template_setting() {
			return GetRuleContext<Template_settingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(AntlrConfigParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expressionContext template_selector_expression() {
			return GetRuleContext<Template_selector_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrConfigParser.SEMI, 0); }
		public Template_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selectorContext template_selector() {
		Template_selectorContext _localctx = new Template_selectorContext(Context, State);
		EnterRule(_localctx, 6, RULE_template_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(SELECT);
			State = 59;
			template_setting();
			State = 60;
			Match(WHEN);
			State = 61;
			template_selector_expression();
			State = 62;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(AntlrConfigParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrConfigParser.SEMI, 0); }
		public Item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_listContext item_list() {
		Item_listContext _localctx = new Item_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(LIST);
			State = 65;
			identifier();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 66;
				identifier();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING_LITERAL || _la==ID );
			State = 71;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(AntlrConfigParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleConfigContext ruleConfig() {
			return GetRuleContext<RuleConfigContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrConfigParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(AntlrConfigParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleTermConfigContext ruleTermConfig() {
			return GetRuleContext<RuleTermConfigContext>(0);
		}
		public Grammar_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_declarationContext grammar_declaration() {
		Grammar_declarationContext _localctx = new Grammar_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_grammar_declaration);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				Match(RULE);
				State = 74;
				identifier();
				State = 75;
				ruleConfig();
				State = 76;
				Match(SEMI);
				}
				break;
			case TERM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(TERM);
				State = 79;
				identifier();
				State = 80;
				ruleTermConfig();
				State = 81;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expression_itemContext template_selector_expression_item() {
			return GetRuleContext<Template_selector_expression_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expressionContext template_selector_expression() {
			return GetRuleContext<Template_selector_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(AntlrConfigParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(AntlrConfigParser.AND, 0); }
		public Template_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expressionContext template_selector_expression() {
		Template_selector_expressionContext _localctx = new Template_selector_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_template_selector_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			template_selector_expression_item();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR || _la==AND) {
				{
				State = 86;
				_la = TokenStream.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 87;
				template_selector_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expression_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expression_item_hasContext template_selector_expression_item_has() {
			return GetRuleContext<Template_selector_expression_item_hasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expression_item_isContext template_selector_expression_item_is() {
			return GetRuleContext<Template_selector_expression_item_isContext>(0);
		}
		public Template_selector_expression_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expression_itemContext template_selector_expression_item() {
		Template_selector_expression_itemContext _localctx = new Template_selector_expression_itemContext(Context, State);
		EnterRule(_localctx, 14, RULE_template_selector_expression_item);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				template_selector_expression_item_has();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				template_selector_expression_item_is();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expression_item_hasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RULE() { return GetTokens(AntlrConfigParser.RULE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE(int i) {
			return GetToken(AntlrConfigParser.RULE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(AntlrConfigParser.HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(AntlrConfigParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(AntlrConfigParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(AntlrConfigParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(AntlrConfigParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANY() { return GetToken(AntlrConfigParser.MANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(AntlrConfigParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(AntlrConfigParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTERNATIVE() { return GetToken(AntlrConfigParser.ALTERNATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(AntlrConfigParser.OUTPUT, 0); }
		public Template_selector_expression_item_hasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression_item_has; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression_item_has(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expression_item_hasContext template_selector_expression_item_has() {
		Template_selector_expression_item_hasContext _localctx = new Template_selector_expression_item_hasContext(Context, State);
		EnterRule(_localctx, 16, RULE_template_selector_expression_item_has);
		int _la;
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(RULE);
				State = 95;
				Match(HAS);
				State = 96;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 245792L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 97;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1836032L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(RULE);
				State = 99;
				Match(HAS);
				State = 100;
				Match(ONE);
				State = 101;
				Match(OUTPUT);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1836032L) != 0) {
					{
					State = 102;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1836032L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expression_item_isContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RULE() { return GetTokens(AntlrConfigParser.RULE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE(int i) {
			return GetToken(AntlrConfigParser.RULE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(AntlrConfigParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(AntlrConfigParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BLOCK() { return GetTokens(AntlrConfigParser.BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK(int i) {
			return GetToken(AntlrConfigParser.BLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TERM() { return GetTokens(AntlrConfigParser.TERM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM(int i) {
			return GetToken(AntlrConfigParser.TERM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTERNATIVE() { return GetTokens(AntlrConfigParser.ALTERNATIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTERNATIVE(int i) {
			return GetToken(AntlrConfigParser.ALTERNATIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(AntlrConfigParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Template_selector_expression_item_isContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression_item_is; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression_item_is(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expression_item_isContext template_selector_expression_item_is() {
		Template_selector_expression_item_isContext _localctx = new Template_selector_expression_item_isContext(Context, State);
		EnterRule(_localctx, 18, RULE_template_selector_expression_item_is);
		int _la;
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				Match(RULE);
				State = 108;
				Match(IS);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 109;
					Match(NOT);
					}
				}

				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 112;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1836032L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 1836032L) != 0 );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(RULE);
				State = 118;
				Match(IS);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 119;
					Match(NOT);
					}
				}

				State = 122;
				Match(IN);
				State = 123;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleConfigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATE() { return GetToken(AntlrConfigParser.GENERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Optional_template_settingContext optional_template_setting() {
			return GetRuleContext<Optional_template_settingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(AntlrConfigParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_tune_inheritContext rule_tune_inherit() {
			return GetRuleContext<Rule_tune_inheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Calculated_template_settingContext calculated_template_setting() {
			return GetRuleContext<Calculated_template_settingContext>(0);
		}
		public RuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleConfig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleConfigContext ruleConfig() {
		RuleConfigContext _localctx = new RuleConfigContext(Context, State);
		EnterRule(_localctx, 20, RULE_ruleConfig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO) {
				{
				State = 126;
				Match(NO);
				}
			}

			State = 129;
			Match(GENERATE);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERIT) {
				{
				State = 130;
				rule_tune_inherit();
				}
			}

			State = 133;
			optional_template_setting();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CALCULATED) {
				{
				State = 134;
				calculated_template_setting();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleTermConfigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIND() { return GetToken(AntlrConfigParser.KIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermKindEnumContext termKindEnum() {
			return GetRuleContext<TermKindEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RuleTermConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleTermConfig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleTermConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleTermConfigContext ruleTermConfig() {
		RuleTermConfigContext _localctx = new RuleTermConfigContext(Context, State);
		EnterRule(_localctx, 22, RULE_ruleTermConfig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(KIND);
			State = 138;
			termKindEnum();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL || _la==ID) {
				{
				State = 139;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermKindEnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER_() { return GetToken(AntlrConfigParser.OTHER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT_() { return GetToken(AntlrConfigParser.CONSTANT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_() { return GetToken(AntlrConfigParser.IDENTIFIER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_() { return GetToken(AntlrConfigParser.COMMENT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_() { return GetToken(AntlrConfigParser.BOOLEAN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_() { return GetToken(AntlrConfigParser.STRING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_() { return GetToken(AntlrConfigParser.DECIMAL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_() { return GetToken(AntlrConfigParser.INTEGER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_() { return GetToken(AntlrConfigParser.REAL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXA_() { return GetToken(AntlrConfigParser.HEXA_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_() { return GetToken(AntlrConfigParser.BINARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATTERN_() { return GetToken(AntlrConfigParser.PATTERN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_() { return GetToken(AntlrConfigParser.OPERATOR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PONCTUATION_() { return GetToken(AntlrConfigParser.PONCTUATION_, 0); }
		public TermKindEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termKindEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermKindEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermKindEnumContext termKindEnum() {
		TermKindEnumContext _localctx = new TermKindEnumContext(Context, State);
		EnterRule(_localctx, 24, RULE_termKindEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1125831187365888L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_tune_inheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(AntlrConfigParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(AntlrConfigParser.STRING_LITERAL, 0); }
		public Rule_tune_inheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_tune_inherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_tune_inherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_tune_inheritContext rule_tune_inherit() {
		Rule_tune_inheritContext _localctx = new Rule_tune_inheritContext(Context, State);
		EnterRule(_localctx, 26, RULE_rule_tune_inherit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(INHERIT);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 145;
				Match(STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Calculated_template_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALCULATED() { return GetToken(AntlrConfigParser.CALCULATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Optional_template_settingContext optional_template_setting() {
			return GetRuleContext<Optional_template_settingContext>(0);
		}
		public Calculated_template_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculated_template_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculated_template_setting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Calculated_template_settingContext calculated_template_setting() {
		Calculated_template_settingContext _localctx = new Calculated_template_settingContext(Context, State);
		EnterRule(_localctx, 28, RULE_calculated_template_setting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(CALCULATED);
			State = 149;
			optional_template_setting();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(AntlrConfigParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additional_settingsContext additional_settings() {
			return GetRuleContext<Additional_settingsContext>(0);
		}
		public Template_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_setting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_settingContext template_setting() {
		Template_settingContext _localctx = new Template_settingContext(Context, State);
		EnterRule(_localctx, 30, RULE_template_setting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(TEMPLATE);
			State = 152;
			identifier();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 153;
				additional_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_template_settingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(AntlrConfigParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additional_settingsContext additional_settings() {
			return GetRuleContext<Additional_settingsContext>(0);
		}
		public Optional_template_settingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_template_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_template_setting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_template_settingContext optional_template_setting() {
		Optional_template_settingContext _localctx = new Optional_template_settingContext(Context, State);
		EnterRule(_localctx, 32, RULE_optional_template_setting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(TEMPLATE);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL || _la==ID) {
				{
				State = 157;
				identifier();
				}
			}

			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 160;
				additional_settings();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additional_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrConfigParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrConfigParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_itemContext[] value_item() {
			return GetRuleContexts<Value_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_itemContext value_item(int i) {
			return GetRuleContext<Value_itemContext>(i);
		}
		public Additional_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additional_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditional_settings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additional_settingsContext additional_settings() {
		Additional_settingsContext _localctx = new Additional_settingsContext(Context, State);
		EnterRule(_localctx, 34, RULE_additional_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(LPAREN);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING_LITERAL || _la==ID) {
				{
				{
				State = 164;
				value_item();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrConfigParser.COLON, 0); }
		public Value_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_itemContext value_item() {
		Value_itemContext _localctx = new Value_itemContext(Context, State);
		EnterRule(_localctx, 36, RULE_value_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			identifier();
			State = 173;
			Match(COLON);
			State = 174;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrConfigParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(AntlrConfigParser.STRING_LITERAL, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,50,179,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,5,0,42,8,0,10,0,
		12,0,45,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,4,4,68,8,4,11,4,12,4,69,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,84,8,5,1,6,1,6,1,6,3,6,89,8,6,1,7,1,
		7,3,7,93,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,104,8,8,3,8,106,8,
		8,1,9,1,9,1,9,3,9,111,8,9,1,9,4,9,114,8,9,11,9,12,9,115,1,9,1,9,1,9,3,
		9,121,8,9,1,9,1,9,3,9,125,8,9,1,10,3,10,128,8,10,1,10,1,10,3,10,132,8,
		10,1,10,1,10,3,10,136,8,10,1,11,1,11,1,11,3,11,141,8,11,1,12,1,12,1,13,
		1,13,3,13,147,8,13,1,14,1,14,1,14,1,15,1,15,1,15,3,15,155,8,15,1,16,1,
		16,3,16,159,8,16,1,16,3,16,162,8,16,1,17,1,17,5,17,166,8,17,10,17,12,17,
		169,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,0,0,20,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,5,1,0,28,29,2,0,5,5,14,
		17,2,0,10,10,18,20,1,0,36,49,2,0,4,4,50,50,181,0,43,1,0,0,0,2,52,1,0,0,
		0,4,54,1,0,0,0,6,58,1,0,0,0,8,64,1,0,0,0,10,83,1,0,0,0,12,85,1,0,0,0,14,
		92,1,0,0,0,16,105,1,0,0,0,18,124,1,0,0,0,20,127,1,0,0,0,22,137,1,0,0,0,
		24,142,1,0,0,0,26,144,1,0,0,0,28,148,1,0,0,0,30,151,1,0,0,0,32,156,1,0,
		0,0,34,163,1,0,0,0,36,172,1,0,0,0,38,176,1,0,0,0,40,42,3,2,1,0,41,40,1,
		0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,46,1,0,0,0,45,43,1,
		0,0,0,46,47,5,0,0,1,47,1,1,0,0,0,48,53,3,4,2,0,49,53,3,6,3,0,50,53,3,8,
		4,0,51,53,3,10,5,0,52,48,1,0,0,0,52,49,1,0,0,0,52,50,1,0,0,0,52,51,1,0,
		0,0,53,3,1,0,0,0,54,55,5,9,0,0,55,56,3,30,15,0,56,57,5,31,0,0,57,5,1,0,
		0,0,58,59,5,12,0,0,59,60,3,30,15,0,60,61,5,13,0,0,61,62,3,12,6,0,62,63,
		5,31,0,0,63,7,1,0,0,0,64,65,5,25,0,0,65,67,3,38,19,0,66,68,3,38,19,0,67,
		66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,
		72,5,31,0,0,72,9,1,0,0,0,73,74,5,10,0,0,74,75,3,38,19,0,75,76,3,20,10,
		0,76,77,5,31,0,0,77,84,1,0,0,0,78,79,5,19,0,0,79,80,3,38,19,0,80,81,3,
		22,11,0,81,82,5,31,0,0,82,84,1,0,0,0,83,73,1,0,0,0,83,78,1,0,0,0,84,11,
		1,0,0,0,85,88,3,14,7,0,86,87,7,0,0,0,87,89,3,12,6,0,88,86,1,0,0,0,88,89,
		1,0,0,0,89,13,1,0,0,0,90,93,3,16,8,0,91,93,3,18,9,0,92,90,1,0,0,0,92,91,
		1,0,0,0,93,15,1,0,0,0,94,95,5,10,0,0,95,96,5,21,0,0,96,97,7,1,0,0,97,106,
		7,2,0,0,98,99,5,10,0,0,99,100,5,21,0,0,100,101,5,14,0,0,101,103,5,30,0,
		0,102,104,7,2,0,0,103,102,1,0,0,0,103,104,1,0,0,0,104,106,1,0,0,0,105,
		94,1,0,0,0,105,98,1,0,0,0,106,17,1,0,0,0,107,108,5,10,0,0,108,110,5,22,
		0,0,109,111,5,23,0,0,110,109,1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,112,
		114,7,2,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,
		0,0,0,116,125,1,0,0,0,117,118,5,10,0,0,118,120,5,22,0,0,119,121,5,23,0,
		0,120,119,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,123,5,24,0,0,123,
		125,3,38,19,0,124,107,1,0,0,0,124,117,1,0,0,0,125,19,1,0,0,0,126,128,5,
		5,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,131,5,6,0,0,
		130,132,3,26,13,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,
		135,3,32,16,0,134,136,3,28,14,0,135,134,1,0,0,0,135,136,1,0,0,0,136,21,
		1,0,0,0,137,138,5,26,0,0,138,140,3,24,12,0,139,141,3,38,19,0,140,139,1,
		0,0,0,140,141,1,0,0,0,141,23,1,0,0,0,142,143,7,3,0,0,143,25,1,0,0,0,144,
		146,5,27,0,0,145,147,5,4,0,0,146,145,1,0,0,0,146,147,1,0,0,0,147,27,1,
		0,0,0,148,149,5,7,0,0,149,150,3,32,16,0,150,29,1,0,0,0,151,152,5,11,0,
		0,152,154,3,38,19,0,153,155,3,34,17,0,154,153,1,0,0,0,154,155,1,0,0,0,
		155,31,1,0,0,0,156,158,5,11,0,0,157,159,3,38,19,0,158,157,1,0,0,0,158,
		159,1,0,0,0,159,161,1,0,0,0,160,162,3,34,17,0,161,160,1,0,0,0,161,162,
		1,0,0,0,162,33,1,0,0,0,163,167,5,33,0,0,164,166,3,36,18,0,165,164,1,0,
		0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,
		167,1,0,0,0,170,171,5,34,0,0,171,35,1,0,0,0,172,173,3,38,19,0,173,174,
		5,32,0,0,174,175,3,38,19,0,175,37,1,0,0,0,176,177,7,4,0,0,177,39,1,0,0,
		0,21,43,52,69,83,88,92,103,105,110,115,120,124,127,131,135,140,146,154,
		158,161,167
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.ParserConfigurations.Antlr
