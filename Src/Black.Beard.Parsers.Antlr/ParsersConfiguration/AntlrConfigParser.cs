//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrConfigParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.ParserConfigurations.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AntlrConfigParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOC_COMMENT=1, BLOCK_COMMENT=2, LINE_COMMENT=3, WS=4, INT=5, STRING_LITERAL=6, 
		NO=7, GENERATE=8, CALCULATED=9, WITH=10, DEFAULT=11, RULE=12, TEMPLATE=13, 
		SET=14, WHEN=15, ONE=16, ONLY=17, ANY=18, NONE=19, BLOCK=20, TERM=21, 
		ALTERNATIVE=22, HAS=23, IS=24, OR=25, AND=26, SEMI=27, COLON=28, LPAREN=29, 
		RPAREN=30, ASSIGN=31, ID=32;
	public const int
		RULE_grammarSpec = 0, RULE_template_selector = 1, RULE_additional_settings = 2, 
		RULE_template_selector_expression = 3, RULE_template_selector_expression_item = 4, 
		RULE_template_selector_expression_item_1 = 5, RULE_template_selector_expression_item_2 = 6, 
		RULE_default_values = 7, RULE_default_value_item = 8, RULE_grammarDeclaration = 9, 
		RULE_ruleConfig = 10, RULE_identifier = 11, RULE_constant = 12;
	public static readonly string[] ruleNames = {
		"grammarSpec", "template_selector", "additional_settings", "template_selector_expression", 
		"template_selector_expression_item", "template_selector_expression_item_1", 
		"template_selector_expression_item_2", "default_values", "default_value_item", 
		"grammarDeclaration", "ruleConfig", "identifier", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'NO'", "'GENERATE'", "'CALCULATED'", 
		"'WITH'", "'DEFAULT'", "'RULE'", "'TEMPLATE'", "'SET'", "'WHEN'", "'ONE'", 
		"'ONLY'", "'ANY'", "'NONE'", "'BLOCK'", "'TERM'", "'ALTERNATIVE'", "'HAS'", 
		"'IS'", "'|'", "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "INT", "STRING_LITERAL", 
		"NO", "GENERATE", "CALCULATED", "WITH", "DEFAULT", "RULE", "TEMPLATE", 
		"SET", "WHEN", "ONE", "ONLY", "ANY", "NONE", "BLOCK", "TERM", "ALTERNATIVE", 
		"HAS", "IS", "OR", "AND", "SEMI", "COLON", "LPAREN", "RPAREN", "ASSIGN", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AntlrConfigParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AntlrConfigParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AntlrConfigParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AntlrConfigParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GrammarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AntlrConfigParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Default_valuesContext default_values() {
			return GetRuleContext<Default_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_selectorContext[] template_selector() {
			return GetRuleContexts<Template_selectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_selectorContext template_selector(int i) {
			return GetRuleContext<Template_selectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrammarDeclarationContext[] grammarDeclaration() {
			return GetRuleContexts<GrammarDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrammarDeclarationContext grammarDeclaration(int i) {
			return GetRuleContext<GrammarDeclarationContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 26;
				default_values();
				}
			}

			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SET) {
				{
				{
				State = 29;
				template_selector();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RULE) {
				{
				{
				State = 35;
				grammarDeclaration();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(AntlrConfigParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(AntlrConfigParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additional_settingsContext additional_settings() {
			return GetRuleContext<Additional_settingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(AntlrConfigParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expressionContext template_selector_expression() {
			return GetRuleContext<Template_selector_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrConfigParser.SEMI, 0); }
		public Template_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selectorContext template_selector() {
		Template_selectorContext _localctx = new Template_selectorContext(Context, State);
		EnterRule(_localctx, 2, RULE_template_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(SET);
			State = 44;
			Match(TEMPLATE);
			State = 45;
			identifier();
			State = 46;
			additional_settings();
			State = 47;
			Match(WHEN);
			State = 48;
			template_selector_expression();
			State = 49;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additional_settingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrConfigParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrConfigParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Default_value_itemContext[] default_value_item() {
			return GetRuleContexts<Default_value_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_value_itemContext default_value_item(int i) {
			return GetRuleContext<Default_value_itemContext>(i);
		}
		public Additional_settingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additional_settings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditional_settings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additional_settingsContext additional_settings() {
		Additional_settingsContext _localctx = new Additional_settingsContext(Context, State);
		EnterRule(_localctx, 4, RULE_additional_settings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(LPAREN);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 52;
				default_value_item();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expression_itemContext[] template_selector_expression_item() {
			return GetRuleContexts<Template_selector_expression_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expression_itemContext template_selector_expression_item(int i) {
			return GetRuleContext<Template_selector_expression_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AntlrConfigParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AntlrConfigParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(AntlrConfigParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(AntlrConfigParser.AND, i);
		}
		public Template_selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expressionContext template_selector_expression() {
		Template_selector_expressionContext _localctx = new Template_selector_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_template_selector_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			template_selector_expression_item();
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR || _la==AND) {
				{
				{
				State = 61;
				_la = TokenStream.LA(1);
				if ( !(_la==OR || _la==AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 62;
				template_selector_expression_item();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expression_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expression_item_1Context template_selector_expression_item_1() {
			return GetRuleContext<Template_selector_expression_item_1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_selector_expression_item_2Context template_selector_expression_item_2() {
			return GetRuleContext<Template_selector_expression_item_2Context>(0);
		}
		public Template_selector_expression_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expression_itemContext template_selector_expression_item() {
		Template_selector_expression_itemContext _localctx = new Template_selector_expression_itemContext(Context, State);
		EnterRule(_localctx, 8, RULE_template_selector_expression_item);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				template_selector_expression_item_1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				template_selector_expression_item_2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expression_item_1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RULE() { return GetTokens(AntlrConfigParser.RULE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE(int i) {
			return GetToken(AntlrConfigParser.RULE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(AntlrConfigParser.HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(AntlrConfigParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(AntlrConfigParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(AntlrConfigParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(AntlrConfigParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(AntlrConfigParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(AntlrConfigParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTERNATIVE() { return GetToken(AntlrConfigParser.ALTERNATIVE, 0); }
		public Template_selector_expression_item_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression_item_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression_item_1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expression_item_1Context template_selector_expression_item_1() {
		Template_selector_expression_item_1Context _localctx = new Template_selector_expression_item_1Context(Context, State);
		EnterRule(_localctx, 10, RULE_template_selector_expression_item_1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(RULE);
			State = 73;
			Match(HAS);
			State = 74;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 983040L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 75;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7344128L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_selector_expression_item_2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RULE() { return GetTokens(AntlrConfigParser.RULE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE(int i) {
			return GetToken(AntlrConfigParser.RULE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(AntlrConfigParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(AntlrConfigParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(AntlrConfigParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTERNATIVE() { return GetToken(AntlrConfigParser.ALTERNATIVE, 0); }
		public Template_selector_expression_item_2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_selector_expression_item_2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_selector_expression_item_2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_selector_expression_item_2Context template_selector_expression_item_2() {
		Template_selector_expression_item_2Context _localctx = new Template_selector_expression_item_2Context(Context, State);
		EnterRule(_localctx, 12, RULE_template_selector_expression_item_2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(RULE);
			State = 78;
			Match(IS);
			State = 79;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7344128L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(AntlrConfigParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(AntlrConfigParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrConfigParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Default_value_itemContext[] default_value_item() {
			return GetRuleContexts<Default_value_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_value_itemContext default_value_item(int i) {
			return GetRuleContext<Default_value_itemContext>(i);
		}
		public Default_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valuesContext default_values() {
		Default_valuesContext _localctx = new Default_valuesContext(Context, State);
		EnterRule(_localctx, 14, RULE_default_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(WITH);
			State = 82;
			Match(DEFAULT);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 83;
				default_value_item();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 88;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrConfigParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_value_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_itemContext default_value_item() {
		Default_value_itemContext _localctx = new Default_value_itemContext(Context, State);
		EnterRule(_localctx, 16, RULE_default_value_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			identifier();
			State = 91;
			Match(COLON);
			State = 92;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(AntlrConfigParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrConfigParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleConfigContext ruleConfig() {
			return GetRuleContext<RuleConfigContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrConfigParser.SEMI, 0); }
		public GrammarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarDeclarationContext grammarDeclaration() {
		GrammarDeclarationContext _localctx = new GrammarDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_grammarDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(RULE);
			State = 95;
			identifier();
			State = 96;
			Match(COLON);
			State = 97;
			ruleConfig();
			State = 98;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleConfigContext : ParserRuleContext {
		public IdentifierContext templateIdentifier;
		public IdentifierContext calculatedTemplateIdentifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATE() { return GetToken(AntlrConfigParser.GENERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEMPLATE() { return GetTokens(AntlrConfigParser.TEMPLATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE(int i) {
			return GetToken(AntlrConfigParser.TEMPLATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(AntlrConfigParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(AntlrConfigParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(AntlrConfigParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALCULATED() { return GetToken(AntlrConfigParser.CALCULATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public RuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleConfig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleConfigContext ruleConfig() {
		RuleConfigContext _localctx = new RuleConfigContext(Context, State);
		EnterRule(_localctx, 20, RULE_ruleConfig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO) {
				{
				State = 100;
				Match(NO);
				}
			}

			State = 103;
			Match(GENERATE);
			State = 104;
			Match(TEMPLATE);
			State = 105;
			Match(COLON);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 106;
				_localctx.templateIdentifier = identifier();
				}
			}

			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CALCULATED) {
				{
				State = 109;
				Match(CALCULATED);
				State = 110;
				Match(TEMPLATE);
				State = 111;
				Match(COLON);
				State = 112;
				_localctx.calculatedTemplateIdentifier = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrConfigParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(AntlrConfigParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrConfigParserVisitor<TResult> typedVisitor = visitor as IAntlrConfigParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 24, RULE_constant);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				Match(STRING_LITERAL);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,32,122,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,3,0,28,8,0,1,0,5,
		0,31,8,0,10,0,12,0,34,9,0,1,0,5,0,37,8,0,10,0,12,0,40,9,0,1,0,1,0,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,5,2,54,8,2,10,2,12,2,57,9,2,1,2,1,
		2,1,3,1,3,1,3,5,3,64,8,3,10,3,12,3,67,9,3,1,4,1,4,3,4,71,8,4,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,4,7,85,8,7,11,7,12,7,86,1,7,1,7,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,3,10,102,8,10,1,10,1,10,1,
		10,1,10,3,10,108,8,10,1,10,1,10,1,10,1,10,3,10,114,8,10,1,11,1,11,1,12,
		1,12,3,12,120,8,12,1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,3,1,
		0,25,26,1,0,16,19,2,0,12,12,20,22,119,0,27,1,0,0,0,2,43,1,0,0,0,4,51,1,
		0,0,0,6,60,1,0,0,0,8,70,1,0,0,0,10,72,1,0,0,0,12,77,1,0,0,0,14,81,1,0,
		0,0,16,90,1,0,0,0,18,94,1,0,0,0,20,101,1,0,0,0,22,115,1,0,0,0,24,119,1,
		0,0,0,26,28,3,14,7,0,27,26,1,0,0,0,27,28,1,0,0,0,28,32,1,0,0,0,29,31,3,
		2,1,0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,38,1,
		0,0,0,34,32,1,0,0,0,35,37,3,18,9,0,36,35,1,0,0,0,37,40,1,0,0,0,38,36,1,
		0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,42,5,0,0,1,42,1,1,0,
		0,0,43,44,5,14,0,0,44,45,5,13,0,0,45,46,3,22,11,0,46,47,3,4,2,0,47,48,
		5,15,0,0,48,49,3,6,3,0,49,50,5,27,0,0,50,3,1,0,0,0,51,55,5,29,0,0,52,54,
		3,16,8,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,
		1,0,0,0,57,55,1,0,0,0,58,59,5,30,0,0,59,5,1,0,0,0,60,65,3,8,4,0,61,62,
		7,0,0,0,62,64,3,8,4,0,63,61,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,
		1,0,0,0,66,7,1,0,0,0,67,65,1,0,0,0,68,71,3,10,5,0,69,71,3,12,6,0,70,68,
		1,0,0,0,70,69,1,0,0,0,71,9,1,0,0,0,72,73,5,12,0,0,73,74,5,23,0,0,74,75,
		7,1,0,0,75,76,7,2,0,0,76,11,1,0,0,0,77,78,5,12,0,0,78,79,5,24,0,0,79,80,
		7,2,0,0,80,13,1,0,0,0,81,82,5,10,0,0,82,84,5,11,0,0,83,85,3,16,8,0,84,
		83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,
		89,5,27,0,0,89,15,1,0,0,0,90,91,3,22,11,0,91,92,5,28,0,0,92,93,3,24,12,
		0,93,17,1,0,0,0,94,95,5,12,0,0,95,96,3,22,11,0,96,97,5,28,0,0,97,98,3,
		20,10,0,98,99,5,27,0,0,99,19,1,0,0,0,100,102,5,7,0,0,101,100,1,0,0,0,101,
		102,1,0,0,0,102,103,1,0,0,0,103,104,5,8,0,0,104,105,5,13,0,0,105,107,5,
		28,0,0,106,108,3,22,11,0,107,106,1,0,0,0,107,108,1,0,0,0,108,113,1,0,0,
		0,109,110,5,9,0,0,110,111,5,13,0,0,111,112,5,28,0,0,112,114,3,22,11,0,
		113,109,1,0,0,0,113,114,1,0,0,0,114,21,1,0,0,0,115,116,5,32,0,0,116,23,
		1,0,0,0,117,120,5,6,0,0,118,120,3,22,11,0,119,117,1,0,0,0,119,118,1,0,
		0,0,120,25,1,0,0,0,11,27,32,38,55,65,70,86,101,107,113,119
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.ParserConfigurations.Antlr
