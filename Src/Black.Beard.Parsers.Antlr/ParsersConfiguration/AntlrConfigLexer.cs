//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrConfigLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.ParserConfigurations.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AntlrConfigLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOC_COMMENT=1, BLOCK_COMMENT=2, LINE_COMMENT=3, WS=4, INT=5, STRING_LITERAL=6, 
		NO=7, GENERATE=8, CALCULATED=9, WITH=10, DEFAULT=11, RULE=12, TEMPLATE=13, 
		SET=14, WHEN=15, ONE=16, ONLY=17, ANY=18, NONE=19, BLOCK=20, TERM=21, 
		ALTERNATIVE=22, HAS=23, IS=24, OR=25, AND=26, SEMI=27, COLON=28, LPAREN=29, 
		RPAREN=30, ASSIGN=31, ID=32;
	public const int
		OFF_CHANNEL=2, COMMENT=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "OFF_CHANNEL", "COMMENT"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "INT", "STRING_LITERAL", 
		"WSNLCHARS", "NO", "GENERATE", "CALCULATED", "WITH", "DEFAULT", "RULE", 
		"TEMPLATE", "SET", "WHEN", "ONE", "ONLY", "ANY", "NONE", "BLOCK", "TERM", 
		"ALTERNATIVE", "HAS", "IS", "OR", "AND", "SEMI", "COLON", "LPAREN", "RPAREN", 
		"ASSIGN", "ID", "Id", "Ws", "Hws", "Vws", "BlockComment", "DocComment", 
		"LineComment", "EscSeq", "EscAny", "UnicodeEsc", "DecimalNumeral", "HexDigit", 
		"DecDigit", "BoolLiteral", "CharLiteral", "SQuoteLiteral", "DQuoteLiteral", 
		"USQuoteLiteral", "NameChar", "NameStartChar", "Int", "Esc", "Colon", 
		"DColon", "SQuote", "DQuote", "LParen", "RParen", "LBrace", "RBrace", 
		"LBrack", "RBrack", "RArrow", "Lt", "Gt", "Equal", "Question", "Star", 
		"Plus", "PlusAssign", "Underscore", "Pipe", "Dollar", "Comma", "Semi", 
		"Dot", "Range", "At", "Pound", "Tilde"
	};


	public AntlrConfigLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AntlrConfigLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'NO'", "'GENERATE'", "'CALCULATED'", 
		"'WITH'", "'DEFAULT'", "'RULE'", "'TEMPLATE'", "'SET'", "'WHEN'", "'ONE'", 
		"'ONLY'", "'ANY'", "'NONE'", "'BLOCK'", "'TERM'", "'ALTERNATIVE'", "'HAS'", 
		"'IS'", "'|'", "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "INT", "STRING_LITERAL", 
		"NO", "GENERATE", "CALCULATED", "WITH", "DEFAULT", "RULE", "TEMPLATE", 
		"SET", "WHEN", "ONE", "ONLY", "ANY", "NONE", "BLOCK", "TERM", "ALTERNATIVE", 
		"HAS", "IS", "OR", "AND", "SEMI", "COLON", "LPAREN", "RPAREN", "ASSIGN", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AntlrConfigLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AntlrConfigLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,32,527,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
		7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,4,3,181,8,3,11,3,12,3,182,1,3,1,3,
		1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
		1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,5,33,
		318,8,33,10,33,12,33,321,9,33,1,34,1,34,3,34,325,8,34,1,35,1,35,1,36,1,
		36,1,37,1,37,1,37,1,37,5,37,335,8,37,10,37,12,37,338,9,37,1,37,1,37,1,
		37,3,37,343,8,37,1,38,1,38,1,38,1,38,1,38,5,38,350,8,38,10,38,12,38,353,
		9,38,1,38,1,38,1,38,3,38,358,8,38,1,39,1,39,1,39,1,39,5,39,364,8,39,10,
		39,12,39,367,9,39,1,40,1,40,1,40,1,40,1,40,3,40,374,8,40,1,41,1,41,1,41,
		1,42,1,42,1,42,1,42,1,42,3,42,384,8,42,3,42,386,8,42,3,42,388,8,42,3,42,
		390,8,42,1,43,1,43,1,43,5,43,395,8,43,10,43,12,43,398,9,43,3,43,400,8,
		43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,
		46,415,8,46,1,47,1,47,1,47,3,47,420,8,47,1,47,1,47,1,48,1,48,1,48,5,48,
		427,8,48,10,48,12,48,430,9,48,1,48,1,48,1,49,1,49,1,49,5,49,437,8,49,10,
		49,12,49,440,9,49,1,49,1,49,1,50,1,50,1,50,5,50,447,8,50,10,50,12,50,450,
		9,50,1,51,1,51,1,51,1,51,3,51,456,8,51,1,52,1,52,3,52,460,8,52,1,53,1,
		53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,
		59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,
		65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,
		72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,
		79,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,2,336,351,0,83,1,1,3,2,5,3,
		7,4,9,5,11,6,13,0,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,
		16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,57,
		28,59,29,61,30,63,31,65,32,67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,0,83,
		0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,109,
		0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,
		0,135,0,137,0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,155,0,157,
		0,159,0,161,0,163,0,165,0,1,0,12,3,0,9,10,12,13,32,32,2,0,9,9,32,32,2,
		0,10,10,12,13,2,0,10,10,13,13,8,0,34,34,39,39,92,92,98,98,102,102,110,
		110,114,114,116,116,1,0,49,57,3,0,48,57,65,70,97,102,1,0,48,57,4,0,10,
		10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,3,0,183,183,768,879,8255,
		8256,13,0,65,90,97,122,192,214,216,246,248,767,880,893,895,8191,8204,8205,
		8304,8591,11264,12271,12289,55295,63744,64975,65008,65533,504,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,167,1,0,0,0,3,171,1,0,
		0,0,5,175,1,0,0,0,7,180,1,0,0,0,9,186,1,0,0,0,11,188,1,0,0,0,13,190,1,
		0,0,0,15,192,1,0,0,0,17,195,1,0,0,0,19,204,1,0,0,0,21,215,1,0,0,0,23,220,
		1,0,0,0,25,228,1,0,0,0,27,233,1,0,0,0,29,242,1,0,0,0,31,246,1,0,0,0,33,
		251,1,0,0,0,35,255,1,0,0,0,37,260,1,0,0,0,39,264,1,0,0,0,41,269,1,0,0,
		0,43,275,1,0,0,0,45,280,1,0,0,0,47,292,1,0,0,0,49,296,1,0,0,0,51,299,1,
		0,0,0,53,301,1,0,0,0,55,303,1,0,0,0,57,305,1,0,0,0,59,307,1,0,0,0,61,309,
		1,0,0,0,63,311,1,0,0,0,65,313,1,0,0,0,67,315,1,0,0,0,69,324,1,0,0,0,71,
		326,1,0,0,0,73,328,1,0,0,0,75,330,1,0,0,0,77,344,1,0,0,0,79,359,1,0,0,
		0,81,368,1,0,0,0,83,375,1,0,0,0,85,378,1,0,0,0,87,399,1,0,0,0,89,401,1,
		0,0,0,91,403,1,0,0,0,93,414,1,0,0,0,95,416,1,0,0,0,97,423,1,0,0,0,99,433,
		1,0,0,0,101,443,1,0,0,0,103,455,1,0,0,0,105,459,1,0,0,0,107,461,1,0,0,
		0,109,465,1,0,0,0,111,467,1,0,0,0,113,469,1,0,0,0,115,472,1,0,0,0,117,
		474,1,0,0,0,119,476,1,0,0,0,121,478,1,0,0,0,123,480,1,0,0,0,125,482,1,
		0,0,0,127,484,1,0,0,0,129,486,1,0,0,0,131,488,1,0,0,0,133,491,1,0,0,0,
		135,493,1,0,0,0,137,495,1,0,0,0,139,497,1,0,0,0,141,499,1,0,0,0,143,501,
		1,0,0,0,145,503,1,0,0,0,147,506,1,0,0,0,149,508,1,0,0,0,151,510,1,0,0,
		0,153,512,1,0,0,0,155,514,1,0,0,0,157,516,1,0,0,0,159,518,1,0,0,0,161,
		521,1,0,0,0,163,523,1,0,0,0,165,525,1,0,0,0,167,168,3,77,38,0,168,169,
		1,0,0,0,169,170,6,0,0,0,170,2,1,0,0,0,171,172,3,75,37,0,172,173,1,0,0,
		0,173,174,6,1,0,0,174,4,1,0,0,0,175,176,3,79,39,0,176,177,1,0,0,0,177,
		178,6,2,0,0,178,6,1,0,0,0,179,181,3,69,34,0,180,179,1,0,0,0,181,182,1,
		0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,185,6,3,1,0,
		185,8,1,0,0,0,186,187,3,87,43,0,187,10,1,0,0,0,188,189,3,97,48,0,189,12,
		1,0,0,0,190,191,7,0,0,0,191,14,1,0,0,0,192,193,5,78,0,0,193,194,5,79,0,
		0,194,16,1,0,0,0,195,196,5,71,0,0,196,197,5,69,0,0,197,198,5,78,0,0,198,
		199,5,69,0,0,199,200,5,82,0,0,200,201,5,65,0,0,201,202,5,84,0,0,202,203,
		5,69,0,0,203,18,1,0,0,0,204,205,5,67,0,0,205,206,5,65,0,0,206,207,5,76,
		0,0,207,208,5,67,0,0,208,209,5,85,0,0,209,210,5,76,0,0,210,211,5,65,0,
		0,211,212,5,84,0,0,212,213,5,69,0,0,213,214,5,68,0,0,214,20,1,0,0,0,215,
		216,5,87,0,0,216,217,5,73,0,0,217,218,5,84,0,0,218,219,5,72,0,0,219,22,
		1,0,0,0,220,221,5,68,0,0,221,222,5,69,0,0,222,223,5,70,0,0,223,224,5,65,
		0,0,224,225,5,85,0,0,225,226,5,76,0,0,226,227,5,84,0,0,227,24,1,0,0,0,
		228,229,5,82,0,0,229,230,5,85,0,0,230,231,5,76,0,0,231,232,5,69,0,0,232,
		26,1,0,0,0,233,234,5,84,0,0,234,235,5,69,0,0,235,236,5,77,0,0,236,237,
		5,80,0,0,237,238,5,76,0,0,238,239,5,65,0,0,239,240,5,84,0,0,240,241,5,
		69,0,0,241,28,1,0,0,0,242,243,5,83,0,0,243,244,5,69,0,0,244,245,5,84,0,
		0,245,30,1,0,0,0,246,247,5,87,0,0,247,248,5,72,0,0,248,249,5,69,0,0,249,
		250,5,78,0,0,250,32,1,0,0,0,251,252,5,79,0,0,252,253,5,78,0,0,253,254,
		5,69,0,0,254,34,1,0,0,0,255,256,5,79,0,0,256,257,5,78,0,0,257,258,5,76,
		0,0,258,259,5,89,0,0,259,36,1,0,0,0,260,261,5,65,0,0,261,262,5,78,0,0,
		262,263,5,89,0,0,263,38,1,0,0,0,264,265,5,78,0,0,265,266,5,79,0,0,266,
		267,5,78,0,0,267,268,5,69,0,0,268,40,1,0,0,0,269,270,5,66,0,0,270,271,
		5,76,0,0,271,272,5,79,0,0,272,273,5,67,0,0,273,274,5,75,0,0,274,42,1,0,
		0,0,275,276,5,84,0,0,276,277,5,69,0,0,277,278,5,82,0,0,278,279,5,77,0,
		0,279,44,1,0,0,0,280,281,5,65,0,0,281,282,5,76,0,0,282,283,5,84,0,0,283,
		284,5,69,0,0,284,285,5,82,0,0,285,286,5,78,0,0,286,287,5,65,0,0,287,288,
		5,84,0,0,288,289,5,73,0,0,289,290,5,86,0,0,290,291,5,69,0,0,291,46,1,0,
		0,0,292,293,5,72,0,0,293,294,5,65,0,0,294,295,5,83,0,0,295,48,1,0,0,0,
		296,297,5,73,0,0,297,298,5,83,0,0,298,50,1,0,0,0,299,300,5,124,0,0,300,
		52,1,0,0,0,301,302,5,38,0,0,302,54,1,0,0,0,303,304,3,155,77,0,304,56,1,
		0,0,0,305,306,3,111,55,0,306,58,1,0,0,0,307,308,3,119,59,0,308,60,1,0,
		0,0,309,310,3,121,60,0,310,62,1,0,0,0,311,312,3,137,68,0,312,64,1,0,0,
		0,313,314,3,67,33,0,314,66,1,0,0,0,315,319,3,105,52,0,316,318,3,103,51,
		0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,
		68,1,0,0,0,321,319,1,0,0,0,322,325,3,71,35,0,323,325,3,73,36,0,324,322,
		1,0,0,0,324,323,1,0,0,0,325,70,1,0,0,0,326,327,7,1,0,0,327,72,1,0,0,0,
		328,329,7,2,0,0,329,74,1,0,0,0,330,331,5,47,0,0,331,332,5,42,0,0,332,336,
		1,0,0,0,333,335,9,0,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,337,1,0,0,
		0,336,334,1,0,0,0,337,342,1,0,0,0,338,336,1,0,0,0,339,340,5,42,0,0,340,
		343,5,47,0,0,341,343,5,0,0,1,342,339,1,0,0,0,342,341,1,0,0,0,343,76,1,
		0,0,0,344,345,5,47,0,0,345,346,5,42,0,0,346,347,5,42,0,0,347,351,1,0,0,
		0,348,350,9,0,0,0,349,348,1,0,0,0,350,353,1,0,0,0,351,352,1,0,0,0,351,
		349,1,0,0,0,352,357,1,0,0,0,353,351,1,0,0,0,354,355,5,42,0,0,355,358,5,
		47,0,0,356,358,5,0,0,1,357,354,1,0,0,0,357,356,1,0,0,0,358,78,1,0,0,0,
		359,360,5,47,0,0,360,361,5,47,0,0,361,365,1,0,0,0,362,364,8,3,0,0,363,
		362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,80,1,0,
		0,0,367,365,1,0,0,0,368,373,3,109,54,0,369,374,7,4,0,0,370,374,3,85,42,
		0,371,374,9,0,0,0,372,374,5,0,0,1,373,369,1,0,0,0,373,370,1,0,0,0,373,
		371,1,0,0,0,373,372,1,0,0,0,374,82,1,0,0,0,375,376,3,109,54,0,376,377,
		9,0,0,0,377,84,1,0,0,0,378,389,5,117,0,0,379,387,3,89,44,0,380,385,3,89,
		44,0,381,383,3,89,44,0,382,384,3,89,44,0,383,382,1,0,0,0,383,384,1,0,0,
		0,384,386,1,0,0,0,385,381,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,
		380,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,379,1,0,0,0,389,390,1,
		0,0,0,390,86,1,0,0,0,391,400,5,48,0,0,392,396,7,5,0,0,393,395,3,91,45,
		0,394,393,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,
		400,1,0,0,0,398,396,1,0,0,0,399,391,1,0,0,0,399,392,1,0,0,0,400,88,1,0,
		0,0,401,402,7,6,0,0,402,90,1,0,0,0,403,404,7,7,0,0,404,92,1,0,0,0,405,
		406,5,116,0,0,406,407,5,114,0,0,407,408,5,117,0,0,408,415,5,101,0,0,409,
		410,5,102,0,0,410,411,5,97,0,0,411,412,5,108,0,0,412,413,5,115,0,0,413,
		415,5,101,0,0,414,405,1,0,0,0,414,409,1,0,0,0,415,94,1,0,0,0,416,419,3,
		115,57,0,417,420,3,81,40,0,418,420,8,8,0,0,419,417,1,0,0,0,419,418,1,0,
		0,0,420,421,1,0,0,0,421,422,3,115,57,0,422,96,1,0,0,0,423,428,3,115,57,
		0,424,427,3,81,40,0,425,427,8,8,0,0,426,424,1,0,0,0,426,425,1,0,0,0,427,
		430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,
		0,0,0,431,432,3,115,57,0,432,98,1,0,0,0,433,438,3,117,58,0,434,437,3,81,
		40,0,435,437,8,9,0,0,436,434,1,0,0,0,436,435,1,0,0,0,437,440,1,0,0,0,438,
		436,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,438,1,0,0,0,441,442,3,
		117,58,0,442,100,1,0,0,0,443,448,3,115,57,0,444,447,3,81,40,0,445,447,
		8,8,0,0,446,444,1,0,0,0,446,445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,
		0,448,449,1,0,0,0,449,102,1,0,0,0,450,448,1,0,0,0,451,456,3,105,52,0,452,
		456,2,48,57,0,453,456,3,147,73,0,454,456,7,10,0,0,455,451,1,0,0,0,455,
		452,1,0,0,0,455,453,1,0,0,0,455,454,1,0,0,0,456,104,1,0,0,0,457,460,3,
		147,73,0,458,460,7,11,0,0,459,457,1,0,0,0,459,458,1,0,0,0,460,106,1,0,
		0,0,461,462,5,105,0,0,462,463,5,110,0,0,463,464,5,116,0,0,464,108,1,0,
		0,0,465,466,5,92,0,0,466,110,1,0,0,0,467,468,5,58,0,0,468,112,1,0,0,0,
		469,470,5,58,0,0,470,471,5,58,0,0,471,114,1,0,0,0,472,473,5,39,0,0,473,
		116,1,0,0,0,474,475,5,34,0,0,475,118,1,0,0,0,476,477,5,40,0,0,477,120,
		1,0,0,0,478,479,5,41,0,0,479,122,1,0,0,0,480,481,5,123,0,0,481,124,1,0,
		0,0,482,483,5,125,0,0,483,126,1,0,0,0,484,485,5,91,0,0,485,128,1,0,0,0,
		486,487,5,93,0,0,487,130,1,0,0,0,488,489,5,45,0,0,489,490,5,62,0,0,490,
		132,1,0,0,0,491,492,5,60,0,0,492,134,1,0,0,0,493,494,5,62,0,0,494,136,
		1,0,0,0,495,496,5,61,0,0,496,138,1,0,0,0,497,498,5,63,0,0,498,140,1,0,
		0,0,499,500,5,42,0,0,500,142,1,0,0,0,501,502,5,43,0,0,502,144,1,0,0,0,
		503,504,5,43,0,0,504,505,5,61,0,0,505,146,1,0,0,0,506,507,5,95,0,0,507,
		148,1,0,0,0,508,509,5,124,0,0,509,150,1,0,0,0,510,511,5,36,0,0,511,152,
		1,0,0,0,512,513,5,44,0,0,513,154,1,0,0,0,514,515,5,59,0,0,515,156,1,0,
		0,0,516,517,5,46,0,0,517,158,1,0,0,0,518,519,5,46,0,0,519,520,5,46,0,0,
		520,160,1,0,0,0,521,522,5,64,0,0,522,162,1,0,0,0,523,524,5,35,0,0,524,
		164,1,0,0,0,525,526,5,126,0,0,526,166,1,0,0,0,26,0,182,319,324,336,342,
		351,357,365,373,383,385,387,389,396,399,414,419,426,428,436,438,446,448,
		455,459,2,0,3,0,0,2,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.ParserConfigurations.Antlr
